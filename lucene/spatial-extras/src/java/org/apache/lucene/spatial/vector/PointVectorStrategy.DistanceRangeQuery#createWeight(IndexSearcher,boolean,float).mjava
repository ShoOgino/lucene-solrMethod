    @Override
    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {
      Weight w = inner.createWeight(searcher, needsScores, 1f);
      return new ConstantScoreWeight(this, boost) {
        @Override
        public Scorer scorer(LeafReaderContext context) throws IOException {
          Scorer in = w.scorer(context);
          if (in == null)
            return null;
          DoubleValues v = distanceSource.getValues(context, DoubleValuesSource.fromScorer(in));
          DocIdSetIterator approximation = in.iterator();
          TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {
            @Override
            public boolean matches() throws IOException {
              return v.advanceExact(approximation.docID()) && v.doubleValue() <= limit;
            }

            @Override
            public float matchCost() {
              return 100;   // distance calculation can be heavy!
            }
          };
          return new ConstantScoreScorer(this, score(), twoPhase);
        }

        @Override
        public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {
          return null; // TODO delegate to DoubleValuesSource?
        }
      };
    }

