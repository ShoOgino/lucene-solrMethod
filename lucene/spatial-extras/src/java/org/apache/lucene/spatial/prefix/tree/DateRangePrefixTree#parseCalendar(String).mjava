  /** Calendar utility method:
   * The reverse of {@link #toString(java.util.Calendar)}. It will only set the fields found, leaving
   * the remainder in an un-set state. A leading '-' or '+' is optional (positive assumed), and a
   * trailing 'Z' is also optional.
   * @param str not null and not empty
   * @return not null
   */
  public Calendar parseCalendar(String str) throws ParseException {
    // example: +2014-10-23T21:22:33.159Z
    if (str == null || str.isEmpty())
      throw new IllegalArgumentException("str is null or blank");
    Calendar cal = newCal();
    if (str.equals("*"))
      return cal;
    int offset = 0;//a pointer
    try {
      //year & era:
      int lastOffset = str.charAt(str.length()-1) == 'Z' ? str.length() - 1 : str.length();
      int hyphenIdx = str.indexOf('-', 1);//look past possible leading hyphen
      if (hyphenIdx < 0)
        hyphenIdx = lastOffset;
      int year = Integer.parseInt(str.substring(offset, hyphenIdx));
      cal.set(Calendar.ERA, year <= 0 ? 0 : 1);
      cal.set(Calendar.YEAR, year <= 0 ? -1*year + 1 : year);
      offset = hyphenIdx + 1;
      if (lastOffset < offset)
        return cal;

      //NOTE: We aren't validating separator chars, and we unintentionally accept leading +/-.
      // The str.substring()'s hopefully get optimized to be stack-allocated.

      //month:
      cal.set(Calendar.MONTH, Integer.parseInt(str.substring(offset, offset+2)) - 1);//starts at 0
      offset += 3;
      if (lastOffset < offset)
        return cal;
      //day:
      cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(str.substring(offset, offset+2)));
      offset += 3;
      if (lastOffset < offset)
        return cal;
      //hour:
      cal.set(Calendar.HOUR_OF_DAY, Integer.parseInt(str.substring(offset, offset+2)));
      offset += 3;
      if (lastOffset < offset)
        return cal;
      //minute:
      cal.set(Calendar.MINUTE, Integer.parseInt(str.substring(offset, offset+2)));
      offset += 3;
      if (lastOffset < offset)
        return cal;
      //second:
      cal.set(Calendar.SECOND, Integer.parseInt(str.substring(offset, offset+2)));
      offset += 3;
      if (lastOffset < offset)
        return cal;
      //ms:
      cal.set(Calendar.MILLISECOND, Integer.parseInt(str.substring(offset, offset+3)));
      offset += 3;//last one, move to next char
      if (lastOffset == offset)
        return cal;
    } catch (Exception e) {
      ParseException pe = new ParseException("Improperly formatted date: "+str, offset);
      pe.initCause(e);
      throw pe;
    }
    throw new ParseException("Improperly formatted date: "+str, offset);
  }

