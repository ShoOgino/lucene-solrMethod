  /** uses this test with a different classloader and tries to
   * register it using the default classloader, which should fail */
  public void testClassLoader() throws Exception {
    Loader child = new Loader(this.getClass().getClassLoader());
    Class<?> thisInDifferentLoader = child.loadFromParentResource(getClass().getName());
    Map<String,Method> functions = Collections.singletonMap("zeroArgMethod", thisInDifferentLoader.getMethod("zeroArgMethod"));
    
    // use our classloader, not the foreign one, which should fail!
    try {
      JavascriptCompiler.compile("zeroArgMethod()", functions, getClass().getClassLoader());
      fail();
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("is not declared by a class which is accessible by the given parent ClassLoader"));
    }
    
    // this should pass:
    JavascriptCompiler.compile("zeroArgMethod()", functions, child);
    
    // mix foreign and default functions
    Map<String,Method> mixedFunctions = new HashMap<>(JavascriptCompiler.DEFAULT_FUNCTIONS);
    mixedFunctions.putAll(functions);
    JavascriptCompiler.compile("zeroArgMethod()", mixedFunctions, child);
    JavascriptCompiler.compile("sqrt(20)", mixedFunctions, child);
    try {
      JavascriptCompiler.compile("zeroArgMethod()", functions, getClass().getClassLoader());
      fail();
    } catch (IllegalArgumentException e) {
      assertTrue(e.getMessage().contains("is not declared by a class which is accessible by the given parent ClassLoader"));
    }
  }

