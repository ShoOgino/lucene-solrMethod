    // $ANTLR start "expression"
    // src/java/org/apache/lucene/expressions/js/Javascript.g:250:1: expression : conditional EOF !;
    public final JavascriptParser.expression_return expression() throws RecognitionException {
        JavascriptParser.expression_return retval = new JavascriptParser.expression_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token EOF2=null;
        JavascriptParser.conditional_return conditional1 =null;


        CommonTree EOF2_tree=null;

        try {
            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:5: ( conditional EOF !)
            // src/java/org/apache/lucene/expressions/js/Javascript.g:251:7: conditional EOF !
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_conditional_in_expression737);
            conditional1=conditional();

            state._fsp--;

            adaptor.addChild(root_0, conditional1.getTree());

            EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_expression739); 

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"

