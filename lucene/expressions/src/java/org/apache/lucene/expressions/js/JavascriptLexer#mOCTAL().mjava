  // $ANTLR start "OCTAL"
  public final void mOCTAL() throws RecognitionException {
    try {
      int _type = OCTAL;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // src/java/org/apache/lucene/expressions/js/Javascript.g:348:5: ( '0' ( OCTALDIGIT )+ )
      // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: '0' ( OCTALDIGIT )+
      {
      match('0'); 
      // src/java/org/apache/lucene/expressions/js/Javascript.g:348:11: ( OCTALDIGIT )+
      int cnt9=0;
      loop9:
      while (true) {
        int alt9=2;
        int LA9_0 = input.LA(1);
        if ( ((LA9_0 >= '0' && LA9_0 <= '7')) ) {
          alt9=1;
        }

        switch (alt9) {
        case 1 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:
          {
          if ( (input.LA(1) >= '0' && input.LA(1) <= '7') ) {
            input.consume();
          }
          else {
            MismatchedSetException mse = new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
          }
          break;

        default :
          if ( cnt9 >= 1 ) break loop9;
          EarlyExitException eee = new EarlyExitException(9, input);
          throw eee;
        }
        cnt9++;
      }

      }

      state.type = _type;
      state.channel = _channel;
    }
    finally {
      // do for sure before leaving
    }
  }
  // $ANTLR end "OCTAL"

