    // $ANTLR start "numeric"
    // src/java/org/apache/lucene/expressions/js/Javascript.g:325:1: numeric : ( HEX | OCTAL | DECIMAL );
    public final JavascriptParser.numeric_return numeric() throws RecognitionException {
        JavascriptParser.numeric_return retval = new JavascriptParser.numeric_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token set59=null;

        CommonTree set59_tree=null;

        try {
            // src/java/org/apache/lucene/expressions/js/Javascript.g:326:5: ( HEX | OCTAL | DECIMAL )
            // src/java/org/apache/lucene/expressions/js/Javascript.g:
            {
            root_0 = (CommonTree)adaptor.nil();


            set59=(Token)input.LT(1);

            if ( input.LA(1)==DECIMAL||input.LA(1)==HEX||input.LA(1)==OCTAL ) {
                input.consume();
                adaptor.addChild(root_0, 
                (CommonTree)adaptor.create(set59)
                );
                state.errorRecovery=false;
            }
            else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "numeric"

