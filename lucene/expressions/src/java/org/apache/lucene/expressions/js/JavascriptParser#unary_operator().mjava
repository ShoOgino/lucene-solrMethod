  // $ANTLR start "unary_operator"
  // src/java/org/apache/lucene/expressions/js/Javascript.g:304:1: unary_operator : ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT );
  public final JavascriptParser.unary_operator_return unary_operator() throws RecognitionException {
    JavascriptParser.unary_operator_return retval = new JavascriptParser.unary_operator_return();
    retval.start = input.LT(1);

    CommonTree root_0 = null;

    Token AT_SUBTRACT43=null;
    Token AT_BIT_NOT44=null;
    Token AT_BOOL_NOT45=null;

    CommonTree AT_SUBTRACT43_tree=null;
    CommonTree AT_BIT_NOT44_tree=null;
    CommonTree AT_BOOL_NOT45_tree=null;
    RewriteRuleTokenStream stream_AT_SUBTRACT=new RewriteRuleTokenStream(adaptor,"token AT_SUBTRACT");

    try {
      // src/java/org/apache/lucene/expressions/js/Javascript.g:305:5: ( AT_SUBTRACT -> AT_NEGATE | AT_BIT_NOT | AT_BOOL_NOT )
      int alt13=3;
      switch ( input.LA(1) ) {
      case AT_SUBTRACT:
        {
        alt13=1;
        }
        break;
      case AT_BIT_NOT:
        {
        alt13=2;
        }
        break;
      case AT_BOOL_NOT:
        {
        alt13=3;
        }
        break;
      default:
        NoViableAltException nvae =
          new NoViableAltException("", 13, 0, input);
        throw nvae;
      }
      switch (alt13) {
        case 1 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:305:7: AT_SUBTRACT
          {
          AT_SUBTRACT43=(Token)match(input,AT_SUBTRACT,FOLLOW_AT_SUBTRACT_in_unary_operator1123);  
          stream_AT_SUBTRACT.add(AT_SUBTRACT43);

          // AST REWRITE
          // elements: 
          // token labels: 
          // rule labels: retval
          // token list labels: 
          // rule list labels: 
          // wildcard labels: 
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

          root_0 = (CommonTree)adaptor.nil();
          // 305:19: -> AT_NEGATE
          {
            adaptor.addChild(root_0, (CommonTree)adaptor.create(AT_NEGATE, "AT_NEGATE"));
          }


          retval.tree = root_0;

          }
          break;
        case 2 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:306:7: AT_BIT_NOT
          {
          root_0 = (CommonTree)adaptor.nil();


          AT_BIT_NOT44=(Token)match(input,AT_BIT_NOT,FOLLOW_AT_BIT_NOT_in_unary_operator1135); 
          AT_BIT_NOT44_tree = (CommonTree)adaptor.create(AT_BIT_NOT44);
          adaptor.addChild(root_0, AT_BIT_NOT44_tree);

          }
          break;
        case 3 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:307:7: AT_BOOL_NOT
          {
          root_0 = (CommonTree)adaptor.nil();


          AT_BOOL_NOT45=(Token)match(input,AT_BOOL_NOT,FOLLOW_AT_BOOL_NOT_in_unary_operator1143); 
          AT_BOOL_NOT45_tree = (CommonTree)adaptor.create(AT_BOOL_NOT45);
          adaptor.addChild(root_0, AT_BOOL_NOT45_tree);

          }
          break;

      }
      retval.stop = input.LT(-1);

      retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
      adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

    }
    catch (RecognitionException re) {
      reportError(re);
      recover(input,re);
      retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
    }
    finally {
      // do for sure before leaving
    }
    return retval;
  }
  // $ANTLR end "unary_operator"

