  // $ANTLR start "HEX"
  public final void mHEX() throws RecognitionException {
    try {
      int _type = HEX;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:5: ( ( '0x' | '0X' ) ( HEXDIGIT )+ )
      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:7: ( '0x' | '0X' ) ( HEXDIGIT )+
      {
      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:7: ( '0x' | '0X' )
      int alt18=2;
      int LA18_0 = input.LA(1);
      if ( (LA18_0=='0') ) {
        int LA18_1 = input.LA(2);
        if ( (LA18_1=='x') ) {
          alt18=1;
        }
        else if ( (LA18_1=='X') ) {
          alt18=2;
        }

        else {
          int nvaeMark = input.mark();
          try {
            input.consume();
            NoViableAltException nvae =
              new NoViableAltException("", 18, 1, input);
            throw nvae;
          } finally {
            input.rewind(nvaeMark);
          }
        }

      }

      else {
        NoViableAltException nvae =
          new NoViableAltException("", 18, 0, input);
        throw nvae;
      }

      switch (alt18) {
        case 1 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:388:8: '0x'
          {
          match("0x"); 

          }
          break;
        case 2 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:388:13: '0X'
          {
          match("0X"); 

          }
          break;

      }

      // src/java/org/apache/lucene/expressions/js/Javascript.g:388:19: ( HEXDIGIT )+
      int cnt19=0;
      loop19:
      while (true) {
        int alt19=2;
        int LA19_0 = input.LA(1);
        if ( ((LA19_0 >= '0' && LA19_0 <= '9')||(LA19_0 >= 'A' && LA19_0 <= 'F')||(LA19_0 >= 'a' && LA19_0 <= 'f')) ) {
          alt19=1;
        }

        switch (alt19) {
        case 1 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:
          {
          if ( (input.LA(1) >= '0' && input.LA(1) <= '9')||(input.LA(1) >= 'A' && input.LA(1) <= 'F')||(input.LA(1) >= 'a' && input.LA(1) <= 'f') ) {
            input.consume();
          }
          else {
            MismatchedSetException mse = new MismatchedSetException(null,input);
            recover(mse);
            throw mse;
          }
          }
          break;

        default :
          if ( cnt19 >= 1 ) break loop19;
          EarlyExitException eee = new EarlyExitException(19, input);
          throw eee;
        }
        cnt19++;
      }

      }

      state.type = _type;
      state.channel = _channel;
    }
    finally {
      // do for sure before leaving
    }
  }
  // $ANTLR end "HEX"

