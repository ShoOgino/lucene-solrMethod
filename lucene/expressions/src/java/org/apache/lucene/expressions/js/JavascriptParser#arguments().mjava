    // $ANTLR start "arguments"
    // src/java/org/apache/lucene/expressions/js/Javascript.g:321:1: arguments : AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !;
    public final JavascriptParser.arguments_return arguments() throws RecognitionException {
        JavascriptParser.arguments_return retval = new JavascriptParser.arguments_return();
        retval.start = input.LT(1);


        CommonTree root_0 = null;

        Token AT_LPAREN54=null;
        Token AT_COMMA56=null;
        Token AT_RPAREN58=null;
        JavascriptParser.conditional_return conditional55 =null;

        JavascriptParser.conditional_return conditional57 =null;


        CommonTree AT_LPAREN54_tree=null;
        CommonTree AT_COMMA56_tree=null;
        CommonTree AT_RPAREN58_tree=null;

        try {
            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:5: ( AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !)
            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:7: AT_LPAREN ! ( conditional ( AT_COMMA ! conditional )* )? AT_RPAREN !
            {
            root_0 = (CommonTree)adaptor.nil();


            AT_LPAREN54=(Token)match(input,AT_LPAREN,FOLLOW_AT_LPAREN_in_arguments1237); 

            // src/java/org/apache/lucene/expressions/js/Javascript.g:322:18: ( conditional ( AT_COMMA ! conditional )* )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==AT_ADD||LA17_0==AT_BIT_NOT||LA17_0==AT_BOOL_NOT||LA17_0==AT_LPAREN||(LA17_0 >= AT_SUBTRACT && LA17_0 <= DECIMAL)||LA17_0==HEX||(LA17_0 >= ID && LA17_0 <= OCTAL)) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:19: conditional ( AT_COMMA ! conditional )*
                    {
                    pushFollow(FOLLOW_conditional_in_arguments1241);
                    conditional55=conditional();

                    state._fsp--;

                    adaptor.addChild(root_0, conditional55.getTree());

                    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:31: ( AT_COMMA ! conditional )*
                    loop16:
                    do {
                        int alt16=2;
                        int LA16_0 = input.LA(1);

                        if ( (LA16_0==AT_COMMA) ) {
                            alt16=1;
                        }


                        switch (alt16) {
                    	case 1 :
                    	    // src/java/org/apache/lucene/expressions/js/Javascript.g:322:32: AT_COMMA ! conditional
                    	    {
                    	    AT_COMMA56=(Token)match(input,AT_COMMA,FOLLOW_AT_COMMA_in_arguments1244); 

                    	    pushFollow(FOLLOW_conditional_in_arguments1247);
                    	    conditional57=conditional();

                    	    state._fsp--;

                    	    adaptor.addChild(root_0, conditional57.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop16;
                        }
                    } while (true);


                    }
                    break;

            }


            AT_RPAREN58=(Token)match(input,AT_RPAREN,FOLLOW_AT_RPAREN_in_arguments1253); 

            }

            retval.stop = input.LT(-1);


            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "arguments"

