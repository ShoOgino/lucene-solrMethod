  @Override
  public void mTokens() throws RecognitionException {
    // src/java/org/apache/lucene/expressions/js/Javascript.g:1:8: ( AT_ADD | AT_BIT_AND | AT_BIT_NOT | AT_BIT_OR | AT_BIT_SHL | AT_BIT_SHR | AT_BIT_SHU | AT_BIT_XOR | AT_BOOL_AND | AT_BOOL_NOT | AT_BOOL_OR | AT_COLON | AT_COMMA | AT_COMP_EQ | AT_COMP_GT | AT_COMP_GTE | AT_COMP_LT | AT_COMP_LTE | AT_COMP_NEQ | AT_COND_QUE | AT_DIVIDE | AT_DOT | AT_LPAREN | AT_MODULO | AT_MULTIPLY | AT_RPAREN | AT_SUBTRACT | NAMESPACE_ID | WS | DECIMAL | OCTAL | HEX )
    int alt17=32;
    switch ( input.LA(1) ) {
    case '+':
      {
      alt17=1;
      }
      break;
    case '&':
      {
      int LA17_2 = input.LA(2);
      if ( (LA17_2=='&') ) {
        alt17=9;
      }

      else {
        alt17=2;
      }

      }
      break;
    case '~':
      {
      alt17=3;
      }
      break;
    case '|':
      {
      int LA17_4 = input.LA(2);
      if ( (LA17_4=='|') ) {
        alt17=11;
      }

      else {
        alt17=4;
      }

      }
      break;
    case '<':
      {
      switch ( input.LA(2) ) {
      case '<':
        {
        alt17=5;
        }
        break;
      case '=':
        {
        alt17=18;
        }
        break;
      default:
        alt17=17;
      }
      }
      break;
    case '>':
      {
      switch ( input.LA(2) ) {
      case '>':
        {
        int LA17_31 = input.LA(3);
        if ( (LA17_31=='>') ) {
          alt17=7;
        }

        else {
          alt17=6;
        }

        }
        break;
      case '=':
        {
        alt17=16;
        }
        break;
      default:
        alt17=15;
      }
      }
      break;
    case '^':
      {
      alt17=8;
      }
      break;
    case '!':
      {
      int LA17_8 = input.LA(2);
      if ( (LA17_8=='=') ) {
        alt17=19;
      }

      else {
        alt17=10;
      }

      }
      break;
    case ':':
      {
      alt17=12;
      }
      break;
    case ',':
      {
      alt17=13;
      }
      break;
    case '=':
      {
      alt17=14;
      }
      break;
    case '?':
      {
      alt17=20;
      }
      break;
    case '/':
      {
      alt17=21;
      }
      break;
    case '.':
      {
      int LA17_14 = input.LA(2);
      if ( ((LA17_14 >= '0' && LA17_14 <= '9')) ) {
        alt17=30;
      }

      else {
        alt17=22;
      }

      }
      break;
    case '(':
      {
      alt17=23;
      }
      break;
    case '%':
      {
      alt17=24;
      }
      break;
    case '*':
      {
      alt17=25;
      }
      break;
    case ')':
      {
      alt17=26;
      }
      break;
    case '-':
      {
      alt17=27;
      }
      break;
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case '_':
    case 'a':
    case 'b':
    case 'c':
    case 'd':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 's':
    case 't':
    case 'u':
    case 'v':
    case 'w':
    case 'x':
    case 'y':
    case 'z':
      {
      alt17=28;
      }
      break;
    case '\t':
    case '\n':
    case '\r':
    case ' ':
      {
      alt17=29;
      }
      break;
    case '0':
      {
      switch ( input.LA(2) ) {
      case 'X':
      case 'x':
        {
        alt17=32;
        }
        break;
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
        {
        alt17=31;
        }
        break;
      default:
        alt17=30;
      }
      }
      break;
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      {
      alt17=30;
      }
      break;
    default:
      NoViableAltException nvae =
        new NoViableAltException("", 17, 0, input);
      throw nvae;
    }
    switch (alt17) {
      case 1 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:10: AT_ADD
        {
        mAT_ADD(); 

        }
        break;
      case 2 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:17: AT_BIT_AND
        {
        mAT_BIT_AND(); 

        }
        break;
      case 3 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:28: AT_BIT_NOT
        {
        mAT_BIT_NOT(); 

        }
        break;
      case 4 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:39: AT_BIT_OR
        {
        mAT_BIT_OR(); 

        }
        break;
      case 5 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:49: AT_BIT_SHL
        {
        mAT_BIT_SHL(); 

        }
        break;
      case 6 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:60: AT_BIT_SHR
        {
        mAT_BIT_SHR(); 

        }
        break;
      case 7 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:71: AT_BIT_SHU
        {
        mAT_BIT_SHU(); 

        }
        break;
      case 8 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:82: AT_BIT_XOR
        {
        mAT_BIT_XOR(); 

        }
        break;
      case 9 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:93: AT_BOOL_AND
        {
        mAT_BOOL_AND(); 

        }
        break;
      case 10 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:105: AT_BOOL_NOT
        {
        mAT_BOOL_NOT(); 

        }
        break;
      case 11 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:117: AT_BOOL_OR
        {
        mAT_BOOL_OR(); 

        }
        break;
      case 12 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:128: AT_COLON
        {
        mAT_COLON(); 

        }
        break;
      case 13 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:137: AT_COMMA
        {
        mAT_COMMA(); 

        }
        break;
      case 14 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:146: AT_COMP_EQ
        {
        mAT_COMP_EQ(); 

        }
        break;
      case 15 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:157: AT_COMP_GT
        {
        mAT_COMP_GT(); 

        }
        break;
      case 16 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:168: AT_COMP_GTE
        {
        mAT_COMP_GTE(); 

        }
        break;
      case 17 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:180: AT_COMP_LT
        {
        mAT_COMP_LT(); 

        }
        break;
      case 18 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:191: AT_COMP_LTE
        {
        mAT_COMP_LTE(); 

        }
        break;
      case 19 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:203: AT_COMP_NEQ
        {
        mAT_COMP_NEQ(); 

        }
        break;
      case 20 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:215: AT_COND_QUE
        {
        mAT_COND_QUE(); 

        }
        break;
      case 21 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:227: AT_DIVIDE
        {
        mAT_DIVIDE(); 

        }
        break;
      case 22 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:237: AT_DOT
        {
        mAT_DOT(); 

        }
        break;
      case 23 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:244: AT_LPAREN
        {
        mAT_LPAREN(); 

        }
        break;
      case 24 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:254: AT_MODULO
        {
        mAT_MODULO(); 

        }
        break;
      case 25 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:264: AT_MULTIPLY
        {
        mAT_MULTIPLY(); 

        }
        break;
      case 26 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:276: AT_RPAREN
        {
        mAT_RPAREN(); 

        }
        break;
      case 27 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:286: AT_SUBTRACT
        {
        mAT_SUBTRACT(); 

        }
        break;
      case 28 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:298: NAMESPACE_ID
        {
        mNAMESPACE_ID(); 

        }
        break;
      case 29 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:311: WS
        {
        mWS(); 

        }
        break;
      case 30 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:314: DECIMAL
        {
        mDECIMAL(); 

        }
        break;
      case 31 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:322: OCTAL
        {
        mOCTAL(); 

        }
        break;
      case 32 :
        // src/java/org/apache/lucene/expressions/js/Javascript.g:1:328: HEX
        {
        mHEX(); 

        }
        break;

    }
  }

