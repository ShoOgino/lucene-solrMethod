    // $ANTLR start "relational"
    // src/java/org/apache/lucene/expressions/js/Javascript.g:282:1: relational : shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* ;
    public final JavascriptParser.relational_return relational() throws RecognitionException {
        JavascriptParser.relational_return retval = new JavascriptParser.relational_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set27=null;
        ParserRuleReturnScope shift26 =null;
        ParserRuleReturnScope shift28 =null;

        CommonTree set27_tree=null;

        try {
            // src/java/org/apache/lucene/expressions/js/Javascript.g:283:5: ( shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )* )
            // src/java/org/apache/lucene/expressions/js/Javascript.g:283:7: shift ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )*
            {
            root_0 = (CommonTree)adaptor.nil();


            pushFollow(FOLLOW_shift_in_relational944);
            shift26=shift();
            state._fsp--;

            adaptor.addChild(root_0, shift26.getTree());

            // src/java/org/apache/lucene/expressions/js/Javascript.g:283:13: ( ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift )*
            loop8:
            while (true) {
                int alt8=2;
                int LA8_0 = input.LA(1);
                if ( ((LA8_0 >= AT_COMP_GT && LA8_0 <= AT_COMP_LTE)) ) {
                    alt8=1;
                }

                switch (alt8) {
                case 1 :
                    // src/java/org/apache/lucene/expressions/js/Javascript.g:283:14: ( AT_COMP_LT | AT_COMP_GT | AT_COMP_LTE | AT_COMP_GTE ) ^ shift
                    {
                    set27=input.LT(1);
                    set27=input.LT(1);
                    if ( (input.LA(1) >= AT_COMP_GT && input.LA(1) <= AT_COMP_LTE) ) {
                        input.consume();
                        root_0 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(set27), root_0);
                        state.errorRecovery=false;
                    }
                    else {
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }
                    pushFollow(FOLLOW_shift_in_relational964);
                    shift28=shift();
                    state._fsp--;

                    adaptor.addChild(root_0, shift28.getTree());

                    }
                    break;

                default :
                    break loop8;
                }
            }

            }

            retval.stop = input.LT(-1);

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
            // do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "relational"

