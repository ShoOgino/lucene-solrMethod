  // $ANTLR start "DECIMAL"
  public final void mDECIMAL() throws RecognitionException {
    try {
      int _type = DECIMAL;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // src/java/org/apache/lucene/expressions/js/Javascript.g:347:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )
      int alt9=3;
      alt9 = dfa9.predict(input);
      switch (alt9) {
        case 1 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:347:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?
          {
          mDECIMALINTEGER(); 

          mAT_DOT(); 

          // src/java/org/apache/lucene/expressions/js/Javascript.g:347:29: ( DECIMALDIGIT )*
          loop4:
          while (true) {
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( ((LA4_0 >= '0' && LA4_0 <= '9')) ) {
              alt4=1;
            }

            switch (alt4) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:
              {
              if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
                input.consume();
              }
              else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
              }
              }
              break;

            default :
              break loop4;
            }
          }

          // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: ( EXPONENT )?
          int alt5=2;
          int LA5_0 = input.LA(1);
          if ( (LA5_0=='E'||LA5_0=='e') ) {
            alt5=1;
          }
          switch (alt5) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:347:43: EXPONENT
              {
              mEXPONENT(); 

              }
              break;

          }

          }
          break;
        case 2 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:348:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?
          {
          mAT_DOT(); 

          // src/java/org/apache/lucene/expressions/js/Javascript.g:348:14: ( DECIMALDIGIT )+
          int cnt6=0;
          loop6:
          while (true) {
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( ((LA6_0 >= '0' && LA6_0 <= '9')) ) {
              alt6=1;
            }

            switch (alt6) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:
              {
              if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
                input.consume();
              }
              else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
              }
              }
              break;

            default :
              if ( cnt6 >= 1 ) break loop6;
              EarlyExitException eee = new EarlyExitException(6, input);
              throw eee;
            }
            cnt6++;
          }

          // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: ( EXPONENT )?
          int alt7=2;
          int LA7_0 = input.LA(1);
          if ( (LA7_0=='E'||LA7_0=='e') ) {
            alt7=1;
          }
          switch (alt7) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:348:28: EXPONENT
              {
              mEXPONENT(); 

              }
              break;

          }

          }
          break;
        case 3 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:349:7: DECIMALINTEGER ( EXPONENT )?
          {
          mDECIMALINTEGER(); 

          // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: ( EXPONENT )?
          int alt8=2;
          int LA8_0 = input.LA(1);
          if ( (LA8_0=='E'||LA8_0=='e') ) {
            alt8=1;
          }
          switch (alt8) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:349:22: EXPONENT
              {
              mEXPONENT(); 

              }
              break;

          }

          }
          break;

      }
      state.type = _type;
      state.channel = _channel;
    }
    finally {
      // do for sure before leaving
    }
  }
  // $ANTLR end "DECIMAL"

