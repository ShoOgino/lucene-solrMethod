  // $ANTLR start "DECIMAL"
  public final void mDECIMAL() throws RecognitionException {
    try {
      int _type = DECIMAL;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      // src/java/org/apache/lucene/expressions/js/Javascript.g:378:5: ( DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )? | AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )? | DECIMALINTEGER ( EXPONENT )? )
      int alt16=3;
      alt16 = dfa16.predict(input);
      switch (alt16) {
        case 1 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:378:7: DECIMALINTEGER AT_DOT ( DECIMALDIGIT )* ( EXPONENT )?
          {
          mDECIMALINTEGER(); 

          mAT_DOT(); 

          // src/java/org/apache/lucene/expressions/js/Javascript.g:378:29: ( DECIMALDIGIT )*
          loop11:
          while (true) {
            int alt11=2;
            int LA11_0 = input.LA(1);
            if ( ((LA11_0 >= '0' && LA11_0 <= '9')) ) {
              alt11=1;
            }

            switch (alt11) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:
              {
              if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
                input.consume();
              }
              else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
              }
              }
              break;

            default :
              break loop11;
            }
          }

          // src/java/org/apache/lucene/expressions/js/Javascript.g:378:43: ( EXPONENT )?
          int alt12=2;
          int LA12_0 = input.LA(1);
          if ( (LA12_0=='E'||LA12_0=='e') ) {
            alt12=1;
          }
          switch (alt12) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:378:43: EXPONENT
              {
              mEXPONENT(); 

              }
              break;

          }

          }
          break;
        case 2 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:379:7: AT_DOT ( DECIMALDIGIT )+ ( EXPONENT )?
          {
          mAT_DOT(); 

          // src/java/org/apache/lucene/expressions/js/Javascript.g:379:14: ( DECIMALDIGIT )+
          int cnt13=0;
          loop13:
          while (true) {
            int alt13=2;
            int LA13_0 = input.LA(1);
            if ( ((LA13_0 >= '0' && LA13_0 <= '9')) ) {
              alt13=1;
            }

            switch (alt13) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:
              {
              if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
                input.consume();
              }
              else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
              }
              }
              break;

            default :
              if ( cnt13 >= 1 ) break loop13;
              EarlyExitException eee = new EarlyExitException(13, input);
              throw eee;
            }
            cnt13++;
          }

          // src/java/org/apache/lucene/expressions/js/Javascript.g:379:28: ( EXPONENT )?
          int alt14=2;
          int LA14_0 = input.LA(1);
          if ( (LA14_0=='E'||LA14_0=='e') ) {
            alt14=1;
          }
          switch (alt14) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:379:28: EXPONENT
              {
              mEXPONENT(); 

              }
              break;

          }

          }
          break;
        case 3 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:380:7: DECIMALINTEGER ( EXPONENT )?
          {
          mDECIMALINTEGER(); 

          // src/java/org/apache/lucene/expressions/js/Javascript.g:380:22: ( EXPONENT )?
          int alt15=2;
          int LA15_0 = input.LA(1);
          if ( (LA15_0=='E'||LA15_0=='e') ) {
            alt15=1;
          }
          switch (alt15) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:380:22: EXPONENT
              {
              mEXPONENT(); 

              }
              break;

          }

          }
          break;

      }
      state.type = _type;
      state.channel = _channel;
    }
    finally {
      // do for sure before leaving
    }
  }
  // $ANTLR end "DECIMAL"

