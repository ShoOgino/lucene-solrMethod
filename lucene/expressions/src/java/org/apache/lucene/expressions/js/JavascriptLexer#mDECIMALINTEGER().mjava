  // $ANTLR start "DECIMALINTEGER"
  public final void mDECIMALINTEGER() throws RecognitionException {
    try {
      // src/java/org/apache/lucene/expressions/js/Javascript.g:363:5: ( '0' | '1' .. '9' ( DECIMALDIGIT )* )
      int alt14=2;
      int LA14_0 = input.LA(1);
      if ( (LA14_0=='0') ) {
        alt14=1;
      }
      else if ( ((LA14_0 >= '1' && LA14_0 <= '9')) ) {
        alt14=2;
      }

      else {
        NoViableAltException nvae =
          new NoViableAltException("", 14, 0, input);
        throw nvae;
      }

      switch (alt14) {
        case 1 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:363:7: '0'
          {
          match('0'); 
          }
          break;
        case 2 :
          // src/java/org/apache/lucene/expressions/js/Javascript.g:364:7: '1' .. '9' ( DECIMALDIGIT )*
          {
          matchRange('1','9'); 
          // src/java/org/apache/lucene/expressions/js/Javascript.g:364:16: ( DECIMALDIGIT )*
          loop13:
          while (true) {
            int alt13=2;
            int LA13_0 = input.LA(1);
            if ( ((LA13_0 >= '0' && LA13_0 <= '9')) ) {
              alt13=1;
            }

            switch (alt13) {
            case 1 :
              // src/java/org/apache/lucene/expressions/js/Javascript.g:
              {
              if ( (input.LA(1) >= '0' && input.LA(1) <= '9') ) {
                input.consume();
              }
              else {
                MismatchedSetException mse = new MismatchedSetException(null,input);
                recover(mse);
                throw mse;
              }
              }
              break;

            default :
              break loop13;
            }
          }

          }
          break;

      }
    }
    finally {
      // do for sure before leaving
    }
  }
  // $ANTLR end "DECIMALINTEGER"

