  /**
   * Builds up logical {@link java.util.Properties} lines, composed of one non-blank,
   * non-comment initial line, either:
   * 
   * 1. without a non-escaped trailing slash; or
   * 2. with a non-escaped trailing slash, followed by
   *    zero or more lines with a non-escaped trailing slash, followed by
   *    one or more lines without a non-escaped trailing slash
   *
   * All leading non-escaped whitespace and trailing non-escaped whitespace +
   * non-escaped slash are trimmed from each line before concatenating.
   * 
   * After composing the logical line, escaped characters are un-escaped.
   * 
   * null is returned if there are no lines left to read. 
   */
  private String readLogicalPropertiesLine(BufferedReader reader) throws IOException {
    final StringBuilder logicalLine = new StringBuilder();
    String line;
    do {
      line = reader.readLine();
      if (null == line) { 
        return null;
      }
    } while (BLANK_OR_COMMENT_LINE_PATTERN.matcher(line).matches());

    Matcher backslashMatcher = TRAILING_BACKSLASH_PATTERN.matcher(line); 
    // Check for a non-escaped backslash
    if (backslashMatcher.find() && 1 == (backslashMatcher.group(1).length() % 2)) {
      final Matcher firstLineMatcher = TRAILING_WHITESPACE_BACKSLASH_PATTERN.matcher(line);
      if (firstLineMatcher.matches()) {
        logicalLine.append(firstLineMatcher.group(1)); // trim trailing backslash and any preceding whitespace
      }
      line = reader.readLine();
      while (null != line
             && (backslashMatcher = TRAILING_BACKSLASH_PATTERN.matcher(line)).find()
             && 1 == (backslashMatcher.group(1).length() % 2)) {
        // Trim leading whitespace, the trailing backslash and any preceding whitespace
        final Matcher goodStuffMatcher = WHITESPACE_GOODSTUFF_WHITESPACE_BACKSLASH_PATTERN.matcher(line);
        if (goodStuffMatcher.matches()) {
          logicalLine.append(goodStuffMatcher.group(1));
        }
        line = reader.readLine();
      }
      if (null != line) {
        // line can't have a non-escaped trailing backslash
        final Matcher leadingWhitespaceMatcher = LEADING_WHITESPACE_PATTERN.matcher(line);
        if (leadingWhitespaceMatcher.matches()) {
          line = leadingWhitespaceMatcher.group(1); // trim leading whitespace
        }
        logicalLine.append(line);
      }
    } else {
      logicalLine.append(line);
    }
    // trim non-escaped leading whitespace
    final Matcher leadingWhitespaceMatcher = LEADING_WHITESPACE_PATTERN.matcher(logicalLine);
    final CharSequence leadingWhitespaceStripped = leadingWhitespaceMatcher.matches()
                                                 ? leadingWhitespaceMatcher.group(1)
                                                 : logicalLine;

    // unescape all chars in the logical line
    StringBuilder output = new StringBuilder();
    final int numChars = leadingWhitespaceStripped.length();
    for (int pos = 0 ; pos < numChars - 1 ; ++pos) {
      char ch = leadingWhitespaceStripped.charAt(pos);
      if (ch == '\\') {
        ch = leadingWhitespaceStripped.charAt(++pos);
      }
      output.append(ch);
    }
    if (numChars > 0) {
      output.append(leadingWhitespaceStripped.charAt(numChars - 1));
    }

    return output.toString();
  }

