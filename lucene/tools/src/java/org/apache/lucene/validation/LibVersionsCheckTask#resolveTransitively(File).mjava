  /**
   * Transitively resolves all dependencies in the given ivy.xml file,
   * looking for indirect dependencies with versions that conflict
   * with those of direct dependencies.  Dependency conflict when a
   * direct dependency's version is older than that of an indirect
   * dependency with the same /org/name.
   * 
   * Returns true if no version conflicts are found and no resolution
   * errors occurred, false otherwise.
   */
  private boolean resolveTransitively(File ivyXmlFile) {
    boolean success = true;

    ResolveOptions options = new ResolveOptions();
    options.setDownload(false);           // Download only module descriptors, not artifacts
    options.setTransitive(true);          // Resolve transitively, if not already specified in the ivy.xml file
    options.setUseCacheOnly(false);       // Download the internet!
    options.setOutputReport(false);       // Don't print to the console
    options.setLog(LogOptions.LOG_QUIET); // Don't log to the console
    options.setConfs(new String[] {"*"}); // Resolve all configurations

    // Rewrite the ivy.xml, replacing all 'transitive="false"' with 'transitive="true"'
    // The Ivy API is file-based, so we have to write the result to the filesystem.
    String moduleName = "unknown";
    String ivyXmlContent = xmlToString(ivyXmlFile);
    Matcher matcher = MODULE_NAME_PATTERN.matcher(ivyXmlContent);
    if (matcher.find()) {
      moduleName = matcher.group(1);
    }
    ivyXmlContent = ivyXmlContent.replaceAll("\\btransitive\\s*=\\s*[\"']false[\"']", "transitive=\"true\"");
    File transitiveIvyXmlFile = null;
    try {
      File buildDir = new File(commonBuildDir, "ivy-transitive-resolve");
      if ( ! buildDir.exists() && ! buildDir.mkdirs()) {
        throw new BuildException("Could not create temp directory " + buildDir.getPath());
      }
      matcher = MODULE_DIRECTORY_PATTERN.matcher(ivyXmlFile.getCanonicalPath());
      if ( ! matcher.matches()) {
        throw new BuildException("Unknown ivy.xml module directory: " + ivyXmlFile.getCanonicalPath());
      }
      String moduleDirPrefix = matcher.group(1).replaceAll("[/\\\\]", ".");
      transitiveIvyXmlFile = new File(buildDir, "transitive." + moduleDirPrefix + ".ivy.xml");
      try (Writer writer = new OutputStreamWriter(new FileOutputStream(transitiveIvyXmlFile), StandardCharsets.UTF_8)) {
        writer.write(ivyXmlContent);
      }
      ResolveReport resolveReport = ivy.resolve(transitiveIvyXmlFile.toURI().toURL(), options);
      IvyNodeElement root = IvyNodeElementAdapter.adapt(resolveReport);
      for (IvyNodeElement directDependency : root.getDependencies()) {
        String coordinate = "/" + directDependency.getOrganization() + "/" + directDependency.getName();
        Dependency dependency = directDependencies.get(coordinate);
        if (null == dependency) {
          log("ERROR: the following coordinate key does not appear in " 
              + centralizedVersionsFile.getName() + ": " + coordinate);
          success = false;
        } else {
          dependency.directlyReferenced = true;
          if (collectConflicts(directDependency, directDependency, moduleName)) {
            success = false;
          }
        }
      }
    } catch (ParseException | IOException e) {
      if (null != transitiveIvyXmlFile) {
        log("Exception reading " + transitiveIvyXmlFile.getPath() + ": " + e.toString());
      }
      success = false;
    }
    return success;
  }

