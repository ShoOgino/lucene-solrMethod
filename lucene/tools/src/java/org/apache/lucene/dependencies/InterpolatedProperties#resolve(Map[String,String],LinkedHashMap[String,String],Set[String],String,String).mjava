  private static String resolve(Map<String,String> props,
                               LinkedHashMap<String, String> resolved,
                               Set<String> recursive,
                               String key,
                               String value) {
    if (value == null) {
      throw new IllegalArgumentException("Missing replaced property key: " + key);
    }

    if (recursive.contains(key)) {
      throw new IllegalArgumentException("Circular recursive property resolution: " + recursive);
    }

    if (!resolved.containsKey(key)) {
      recursive.add(key);
      StringBuffer buffer = new StringBuffer();
      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher(value);
      while (matcher.find()) {
        String referenced = matcher.group("name");
        String concrete = resolve(props, resolved, recursive, referenced, props.get(referenced));
        matcher.appendReplacement(buffer, Matcher.quoteReplacement(concrete));
      }
      matcher.appendTail(buffer);
      resolved.put(key, buffer.toString());
      recursive.remove(key);
    }
    assert resolved.get(key).equals(value);
    return resolved.get(key);
  }

