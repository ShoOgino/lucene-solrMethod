  /**
   * Converts either a compile output directory or an internal jar
   * dependency, taken from an Ant (test.)classpath, into an artifactId
   */
  private String dependencyToArtifactId(String newPropertyKey, String dependency) {
    StringBuilder artifactId = new StringBuilder();
    Matcher matcher = COMPILATION_OUTPUT_DIRECTORY_PATTERN.matcher(dependency);
    if (matcher.matches()) {
      // Pattern.compile("(lucene|solr)/build/(.*)/classes/java");
      String artifact = matcher.group(2);
      artifact = artifact.replace('/', '-');
      artifact = artifact.replaceAll("(?<!solr-)analysis-", "analyzers-");
      if ("lucene".equals(matcher.group(1))) {
        artifactId.append("lucene-");
      }
      artifactId.append(artifact);
    } else {
      matcher = internalJarPattern.matcher(dependency);
      if (matcher.matches()) {
        // internalJarPattern is /.*(lucene|solr)([^/]*?)-<version>\.jar/,
        // where <version> is the value of the Ant "version" property
        artifactId.append(matcher.group(1));
        artifactId.append(matcher.group(2));
      } else {
        throw new BuildException
            ("Malformed module dependency from '" + newPropertyKey + "': '" + dependency + "'");
      }
    }
    return artifactId.toString();
  }

