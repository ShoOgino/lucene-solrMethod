  /**
   * For each module that include other modules' external dependencies via
   * including all files under their ".../lib/" dirs in their (test.)classpath,
   * add the other modules' dependencies to its set of external dependencies. 
   */
  private void addSharedExternalDependencies() {
    // Delay adding shared compile-scope dependencies until after all have been processed,
    // so dependency sharing is limited to a depth of one.
    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<String,SortedSet<ExternalDependency>>();
    for (String artifactId : interModuleExternalCompileScopeDependencies.keySet()) {
      TreeSet<ExternalDependency> deps = new TreeSet<>();
      sharedDependencies.put(artifactId, deps);
      Set<String> moduleDependencies = interModuleExternalCompileScopeDependencies.get(artifactId);
      if (null != moduleDependencies) {
        for (String otherArtifactId : moduleDependencies) {
          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); 
          if (null != otherExtDeps) {
            for (ExternalDependency otherDep : otherExtDeps) {
              if ( ! otherDep.isTestDependency) {
                deps.add(otherDep);
              }
            }
          }
        }
      }
    }
    for (String artifactId : interModuleExternalTestScopeDependencies.keySet()) {
      SortedSet<ExternalDependency> deps = sharedDependencies.get(artifactId);
      if (null == deps) {
        deps = new TreeSet<ExternalDependency>();
        sharedDependencies.put(artifactId, deps);
      }
      Set<String> moduleDependencies = interModuleExternalTestScopeDependencies.get(artifactId);
      if (null != moduleDependencies) {
        for (String otherArtifactId : moduleDependencies) {
          int testScopePos = otherArtifactId.indexOf(":test");
          boolean isTestScope = false;
          if (-1 != testScopePos) {
            otherArtifactId = otherArtifactId.substring(0, testScopePos);
            isTestScope = true;
          }
          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);
          if (null != otherExtDeps) {
            for (ExternalDependency otherDep : otherExtDeps) {
              if (otherDep.isTestDependency == isTestScope) {
                if (  ! deps.contains(otherDep)
                   && (  null == allExternalDependencies.get(artifactId)
                      || ! allExternalDependencies.get(artifactId).contains(otherDep))) { 
                  // Add test-scope clone only if it's not already a compile-scope dependency. 
                  ExternalDependency otherDepTestScope = new ExternalDependency
                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);
                  deps.add(otherDepTestScope);
                }
              }
            }
          }
        }
      }
    }
    for (String artifactId : sharedDependencies.keySet()) {
      SortedSet<ExternalDependency> deps = allExternalDependencies.get(artifactId);
      if (null == deps) {
        deps = new TreeSet<ExternalDependency>();
        allExternalDependencies.put(artifactId, deps);
      }
      deps.addAll(sharedDependencies.get(artifactId));
    }
  }

