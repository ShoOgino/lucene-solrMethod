  /**
   * For each module that includes other modules' external dependencies via
   * including all files under their ".../lib/" dirs in their (test.)classpath,
   * add the other modules' dependencies to its set of external dependencies. 
   */
  private void addSharedExternalDependencies() {
    // Delay adding shared compile-scope dependencies until after all have been processed,
    // so dependency sharing is limited to a depth of one.
    Map<String,SortedSet<ExternalDependency>> sharedDependencies = new HashMap<>();
    for (Map.Entry<String, Set<String>> entry : interModuleExternalCompileScopeDependencies.entrySet()) {
      TreeSet<ExternalDependency> deps = new TreeSet<>();
      sharedDependencies.put(entry.getKey(), deps);
      Set<String> moduleDependencies = entry.getValue();
      if (null != moduleDependencies) {
        for (String otherArtifactId : moduleDependencies) {
          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId); 
          if (null != otherExtDeps) {
            for (ExternalDependency otherDep : otherExtDeps) {
              if ( ! otherDep.isTestDependency) {
                deps.add(otherDep);
              }
            }
          }
        }
      }
    }
    for (Map.Entry<String, Set<String>> entry : interModuleExternalTestScopeDependencies.entrySet()) {
      String module = entry.getKey();
      SortedSet<ExternalDependency> deps = sharedDependencies.get(module);
      if (null == deps) {
        deps = new TreeSet<>();
        sharedDependencies.put(module, deps);
      }
      Set<String> moduleDependencies = entry.getValue();
      if (null != moduleDependencies) {
        for (String otherArtifactId : moduleDependencies) {
          int testScopePos = otherArtifactId.indexOf(":test");
          boolean isTestScope = false;
          if (-1 != testScopePos) {
            otherArtifactId = otherArtifactId.substring(0, testScopePos);
            isTestScope = true;
          }
          SortedSet<ExternalDependency> otherExtDeps = allExternalDependencies.get(otherArtifactId);
          if (null != otherExtDeps) {
            for (ExternalDependency otherDep : otherExtDeps) {
              if (otherDep.isTestDependency == isTestScope) {
                if (  ! deps.contains(otherDep)
                   && (  null == allExternalDependencies.get(module)
                      || ! allExternalDependencies.get(module).contains(otherDep))) {
                  // Add test-scope clone only if it's not already a compile-scope dependency. 
                  ExternalDependency otherDepTestScope = new ExternalDependency
                      (otherDep.groupId, otherDep.artifactId, otherDep.classifier, true, otherDep.isOptional);
                  deps.add(otherDepTestScope);
                }
              }
            }
          }
        }
      }
    }
    for (Map.Entry<String, SortedSet<ExternalDependency>> entry : sharedDependencies.entrySet()) {
      String module = entry.getKey();
      SortedSet<ExternalDependency> deps = allExternalDependencies.get(module);
      if (null == deps) {
        deps = new TreeSet<>();
        allExternalDependencies.put(module, deps);
      }
      for (ExternalDependency dep : entry.getValue()) {
        String dependencyCoordinate = dep.groupId + ":" + dep.artifactId;
        if (globalOptionalExternalDependencies.contains(dependencyCoordinate)
            || (perModuleOptionalExternalDependencies.containsKey(module)
                && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate))) {
          // make a copy of the dep and set optional=true
          dep = new ExternalDependency(dep.groupId, dep.artifactId, dep.classifier, dep.isTestDependency, true);
        }
        deps.add(dep);
      }
    }
  }

