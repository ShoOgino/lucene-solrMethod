  public static void main(String [] args) {
    {
      Map<String, String> props = new LinkedHashMap<>();
      props.put("a", "${b}");
      props.put("b", "${c}");
      props.put("c", "foo");
      props.put("d", "${a}/${b}/${c}");
      assertEquals(resolve(props), "a=foo", "b=foo", "c=foo", "d=foo/foo/foo");
    }

    {
      Map<String, String> props = new LinkedHashMap<>();
      props.put("a", "foo");
      props.put("b", "${a}");
      assertEquals(resolve(props), "a=foo", "b=foo");
    }

    {
      Map<String, String> props = new LinkedHashMap<>();
      props.put("a", "${b}");
      props.put("b", "${c}");
      props.put("c", "${a}");
      try {
        resolve(props);
      } catch (IllegalArgumentException e) {
        // Expected, circular reference.
        if (!e.getMessage().contains("Circular recursive")) {
          throw new AssertionError();
        }
      }
    }

    {
      Map<String, String> props = new LinkedHashMap<>();
      props.put("a", "${b}");
      try {
        resolve(props);
      } catch (IllegalArgumentException e) {
        // Expected, no referenced value.
        if (!e.getMessage().contains("Missing replaced")) {
          throw new AssertionError();
        }
      }
    }
  }

