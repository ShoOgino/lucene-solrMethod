  /**
   * Parses a string such as "Intersects(-10,20,-8,22) distPec=0.025".
   *
   * @param v   The string to parse. Mandatory.
   * @param ctx The spatial context. Mandatory.
   * @return Not null.
   * @throws IllegalArgumentException If there is a problem parsing the string.
   * @throws InvalidShapeException  Thrown from {@link ShapeReadWriter#readShape(String)}
   */
  public SpatialArgs parse(String v, SpatialContext ctx) throws IllegalArgumentException, InvalidShapeException {
    int idx = v.indexOf('(');
    int edx = v.lastIndexOf(')');

    if (idx < 0 || idx > edx) {
      throw new IllegalArgumentException("missing parens: " + v, null);
    }

    SpatialOperation op = SpatialOperation.get(v.substring(0, idx).trim());

    String body = v.substring(idx + 1, edx).trim();
    if (body.length() < 1) {
      throw new IllegalArgumentException("missing body : " + v, null);
    }

    Shape shape = new ShapeReadWriter(ctx).readShape(body);
    SpatialArgs args = new SpatialArgs(op, shape);

    if (v.length() > (edx + 1)) {
      body = v.substring(edx + 1).trim();
      if (body.length() > 0) {
        Map<String, String> aa = parseMap(body);
        args.setDistPrecision(readDouble(aa.remove("distPrec")));
        if (!aa.isEmpty()) {
          throw new IllegalArgumentException("unused parameters: " + aa, null);
        }
      }
    }
    return args;
  }

