  /**
   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric
   * range of the bounding box. Those terms that pass the initial range filter are then compared against the
   * decoded min/max latitude and longitude values of the bounding box only if the range is not a "boundary" range
   * (e.g., a range that straddles the boundary of the bbox).
   * @param term term for candidate document
   * @return match status
   */
  @Override
  protected AcceptStatus accept(BytesRef term) {
    final long encodedTerm = prefixCodedToGeoCoded(term);
    final short termShift = (short)(64-getPrefixCodedShift(term));
    // range < term
    while (range.compare(encodedTerm, termShift) < 0) {
      // no more ranges, be gone
      if (hasNext() == false) {
        return AcceptStatus.END;
      }

      // peek next range, if the range > term then seek
      final int peekCompare = range.compare(encodedTerm, termShift);
      if (peekCompare > 0) {
        return AcceptStatus.NO_AND_SEEK;
      } else if (peekCompare < 0) {
        seek(encodedTerm, termShift);
      }
      hasNext = false;
    }
    return AcceptStatus.YES;
  }

