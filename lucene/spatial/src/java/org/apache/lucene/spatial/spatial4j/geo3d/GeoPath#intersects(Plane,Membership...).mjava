    @Override
    public boolean intersects(final Plane plane, final Membership... bounds)
    {
        // We look for an intersection with any of the exterior edges of the path.
        // We also have to look for intersections with the cones described by the endpoints.
        // Return "true" if any such intersections are found.

        // For plane intersections, the basic idea is to come up with an equation of the line that is
        // the intersection (if any).  Then, find the intersections with the unit sphere (if any).  If
        // any of the intersection points are within the bounds, then we've detected an intersection.
        // Well, sort of.  We can detect intersections also due to overlap of segments with each other.
        // But that's an edge case and we won't be optimizing for it.
        
        for (int i = 0; i < points.size(); i++) {
            final SegmentEndpoint pathPoint = points.get(i);
            Membership previousEndBound = null;
            Membership nextStartBound = null;
            if (i > 0)
                previousEndBound = segments.get(i-1).invertedEndCutoffPlane;
            if (i < segments.size())
                nextStartBound = segments.get(i).invertedStartCutoffPlane;
            if (pathPoint.intersects(plane, bounds, previousEndBound, nextStartBound)) {
                return true;
            }
        }

        for (PathSegment pathSegment : segments) {
            if (pathSegment.intersects(plane, bounds)) {
                return true;
            }
        }

        return false;
    }

