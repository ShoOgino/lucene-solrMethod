    /** Finish the polygon, by connecting the last added point with the starting point.
    */
    public void donePoints() {
        // If fewer than 3 points, can't do it.
        if (points.size() < 3)
            throw new IllegalArgumentException("Polygon needs at least three points.");
        // Time to construct the planes.  If the polygon is truly convex, then any adjacent point
        edges = new SidedPlane[points.size()];
        // to a segment can provide an interior measurement.
        for (int i = 0; i < points.size(); i++) {
            GeoPoint start = points.get(i);
            GeoPoint end = points.get(legalIndex(i+1));
            GeoPoint check = points.get(legalIndex(i+2));
            SidedPlane sp = new SidedPlane(check,start,end);
            //System.out.println("Created edge "+sp+" using start="+start+" end="+end+" check="+check);
            edges[i] = sp;
        }
        
        // In order to naively confirm that the polygon is convex, I would need to
        // check every edge, and verify that every point (other than the edge endpoints)
        // is within the edge's sided plane.  This is an order n^2 operation.  That's still
        // not wrong, though, because everything else about polygons has a similar cost.
        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {
            SidedPlane edge = edges[edgeIndex];
            for (int pointIndex =0; pointIndex < points.size(); pointIndex++) {
                if (pointIndex != edgeIndex && pointIndex != legalIndex(edgeIndex+1)) {
                    if (!edge.isWithin(points.get(pointIndex)))
                        throw new IllegalArgumentException("Polygon is not convex: Point "+points.get(pointIndex)+" Edge "+edge);
                }
            }
        }
        
        // Finally, we need to compute a single interior point that will satisfy
        // all edges.  If the polygon is convex, we know that such a point exists.
        
        // This is actually surprisingly hard.  I believe merely averaging the x, y, and z
        // values of the points will produce a point inside the shape, but it won't be
        // on the unit sphere, and it may be in fact degenerate and have a zero magnitude.
        // In that case, an alternate algorithm would be required.  But since such cases
        // are very special (or very contrived), I'm just going to not worry about that
        // for the moment.
        double sumX = 0.0;
        double sumY = 0.0;
        double sumZ = 0.0;
        for (GeoPoint p : points) {
            sumX += p.x;
            sumY += p.y;
            sumZ += p.z;
        }
        double denom = 1.0 / (double)points.size();
        sumX *= denom;
        sumY *= denom;
        sumZ *= denom;
        double magnitude = Math.sqrt(sumX * sumX + sumY * sumY + sumZ * sumZ);
        if (magnitude < 1.0e-10)
            throw new IllegalArgumentException("Polygon interior point cannot be determined");
        denom = 1.0/magnitude;
        
        interiorPoint = new GeoPoint(sumX*denom,sumY*denom,sumZ*denom);
        
        // Let's be sure that our interior point is really inside
        for (SidedPlane sp : edges) {
            if (!sp.isWithin(interiorPoint)) {
                StringBuilder sb = new StringBuilder("Interior point logic failed to produce an interior point.  Vertices: ");
                for (GeoPoint p : points) {
                    sb.append(p).append(" ");
                }
                sb.append(". Interior point: ").append(interiorPoint);
                throw new IllegalArgumentException(sb.toString());
            }
        }
    }

