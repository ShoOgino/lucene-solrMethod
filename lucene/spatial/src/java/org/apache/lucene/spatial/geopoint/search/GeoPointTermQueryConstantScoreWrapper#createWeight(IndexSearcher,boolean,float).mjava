  @Override
  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {
    return new ConstantScoreWeight(this, boost) {

      @Override
      public Scorer scorer(LeafReaderContext context) throws IOException {
        final Terms terms = context.reader().terms(query.getField());
        if (terms == null) {
          return null;
        }

        final GeoPointTermsEnum termsEnum = (GeoPointTermsEnum)(query.getTermsEnum(terms, null));
        assert termsEnum != null;

        LeafReader reader = context.reader();
        // approximation (postfiltering has not yet been applied)
        DocIdSetBuilder builder = new DocIdSetBuilder(reader.maxDoc(), terms);
        // subset of documents that need no postfiltering, this is purely an optimization
        final BitSet preApproved;
        // dumb heuristic: if the field is really sparse, use a sparse impl
        if (terms.getDocCount() * 100L < reader.maxDoc()) {
          preApproved = new SparseFixedBitSet(reader.maxDoc());
        } else {
          preApproved = new FixedBitSet(reader.maxDoc());
        }
        PostingsEnum docs = null;

        while (termsEnum.next() != null) {
          docs = termsEnum.postings(docs, PostingsEnum.NONE);
          // boundary terms need post filtering
          if (termsEnum.boundaryTerm()) {
            builder.add(docs);
          } else {
            int numDocs = termsEnum.docFreq();
            DocIdSetBuilder.BulkAdder adder = builder.grow(numDocs);
            for (int i = 0; i < numDocs; ++i) {
              int docId = docs.nextDoc();
              adder.add(docId);
              preApproved.set(docId);
            }
          }
        }

        DocIdSet set = builder.build();
        final DocIdSetIterator disi = set.iterator();
        if (disi == null) {
          return null;
        }

        // return two-phase iterator using docvalues to postfilter candidates
        SortedNumericDocValues sdv = reader.getSortedNumericDocValues(query.getField());
        TwoPhaseIterator iterator = new TwoPhaseIterator(disi) {
          @Override
          public boolean matches() throws IOException {
            int docId = disi.docID();
            if (preApproved.get(docId)) {
              return true;
            } else {
              if (docId > sdv.docID()) {
                sdv.advance(docId);
              }
              if (docId == sdv.docID()) {
                int count = sdv.docValueCount();
                for (int i = 0; i < count; i++) {
                  long hash = sdv.nextValue();
                  if (termsEnum.postFilter(GeoPointField.decodeLatitude(hash), GeoPointField.decodeLongitude(hash))) {
                    return true;
                  }
                }
              }
              return false;
            }
          }

          @Override
          public float matchCost() {
            return 20; // TODO: make this fancier
          }
        };
        return new ConstantScoreScorer(this, score(), iterator);
      }
    };
  }

