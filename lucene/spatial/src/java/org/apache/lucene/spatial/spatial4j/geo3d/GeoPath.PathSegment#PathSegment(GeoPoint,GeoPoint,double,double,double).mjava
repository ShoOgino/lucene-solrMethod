        public PathSegment(final GeoPoint start, final GeoPoint end, final double planeBoundingOffset, final double arcWidth, final double chordDistance)
        {
            this.start = start;
            this.end = end;
            this.planeBoundingOffset = planeBoundingOffset;
            this.arcWidth = arcWidth;
            this.chordDistance = chordDistance;
            
            fullDistance = start.arcDistance(end);
            fullNormalDistance = start.normalDistance(end);
            fullLinearDistance = start.linearDistance(end);
            normalizedConnectingPlane = new Plane(start,end).normalize();
            if (normalizedConnectingPlane == null) {
                upperConnectingPlane = null;
                lowerConnectingPlane = null;
                startCutoffPlane = null;
                endCutoffPlane = null;
                invertedStartCutoffPlane = null;
                invertedEndCutoffPlane = null;
            } else {
                // Either start or end should be on the correct side
                upperConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,-planeBoundingOffset);
                lowerConnectingPlane = new SidedPlane(start,normalizedConnectingPlane,planeBoundingOffset);
                // Cutoff planes use opposite endpoints as correct side examples
                startCutoffPlane = new SidedPlane(end,normalizedConnectingPlane,start);
                endCutoffPlane = new SidedPlane(start,normalizedConnectingPlane,end);
                invertedStartCutoffPlane = new SidedPlane(startCutoffPlane);
                invertedEndCutoffPlane = new SidedPlane(endCutoffPlane);
            }
        }

