        public double pathLinearDistance(final GeoPoint point)
        {
            if (!isWithin(point))
                return Double.MAX_VALUE;

            // We have a normalized connecting plane.
            // First, compute the perpendicular plane.
            // Want no allocations or expensive operations!  so we do this the hard way
            final double perpX = normalizedConnectingPlane.y * point.z - normalizedConnectingPlane.z * point.y;
            final double perpY = normalizedConnectingPlane.z * point.x - normalizedConnectingPlane.x * point.z;
            final double perpZ = normalizedConnectingPlane.x * point.y - normalizedConnectingPlane.y * point.x;

            // If we have a degenerate line, then just compute the normal distance from point x to the start
            if (Math.abs(perpX) < Vector.MINIMUM_RESOLUTION && Math.abs(perpY) < Vector.MINIMUM_RESOLUTION && Math.abs(perpZ) < Vector.MINIMUM_RESOLUTION)
                return point.linearDistance(start);

            // Next, we need the vector of the line, which is the cross product of the normalized connecting plane
            // and the perpendicular plane that we just calculated.
            final double lineX = normalizedConnectingPlane.y * perpZ - normalizedConnectingPlane.z * perpY;
            final double lineY = normalizedConnectingPlane.z * perpX - normalizedConnectingPlane.x * perpZ;
            final double lineZ = normalizedConnectingPlane.x * perpY - normalizedConnectingPlane.y * perpX;
            
            // Now, compute a normalization factor
            final double normalizer = 1.0/Math.sqrt(lineX * lineX + lineY * lineY + lineZ * lineZ);
            
            // Pick which point by using bounding planes
            double normLineX = lineX * normalizer;
            double normLineY = lineY * normalizer;
            double normLineZ = lineZ * normalizer;
            if (!startCutoffPlane.isWithin(normLineX,normLineY,normLineZ) ||
              !endCutoffPlane.isWithin(normLineX,normLineY,normLineZ))
            {
                normLineX = -normLineX;
                normLineY = -normLineY;
                normLineZ = -normLineZ;
            }
            
            // Compute linear distance for the two points
            return point.linearDistance(normLineX,normLineY,normLineZ) + start.linearDistance(normLineX,normLineY,normLineZ);
        }

