    /** Determine whether the plane intersects another plane within the
     * bounds provided.
     *@param q is the other plane.
     *@param notablePoints are points to look at to disambiguate cases when the two planes are identical.
     *@param moreNotablePoints are additional points to look at to disambiguate cases when the two planes are identical.
     *@param bounds is one part of the bounds.
     *@param moreBounds are more bounds.
     *@return true if there's an intersection.
     */
    public boolean intersects(final Plane q, final GeoPoint[] notablePoints, final GeoPoint[] moreNotablePoints, final Membership[] bounds, final Membership... moreBounds) {
        // If the two planes are identical, then the math will find no points of intersection.
        // So a special case of this is to check for plane equality.  But that is not enough, because
        // what we really need at that point is to determine whether overlap occurs between the two parts of the intersection
        // of plane and circle.  That is, are there *any* points on the plane that are within the bounds described?
	if (equals(q)) {
            // The only way to efficiently figure this out will be to have a list of trial points available to evaluate.
            // We look for any point that fulfills all the bounds.
            for (GeoPoint p : notablePoints) {
                if (meetsAllBounds(p,bounds,moreBounds))
                    return true;
            }
            for (GeoPoint p : moreNotablePoints) {
                if (meetsAllBounds(p,bounds,moreBounds))
                    return true;
            }
            return false;
        }
        return findIntersections(q,bounds,moreBounds).length > 0;
    }

