  public static Facets compute(NumberRangePrefixTreeStrategy strategy,
                               IndexReaderContext context, final Bits acceptDocs, Shape queryShape, int facetLevel)
      throws IOException {

    Facets facets = new Facets(facetLevel);

    // TODO should we pre-create all parent buckets? It's not necessary, but the client/user may find it convenient to
    //   have so it needn't do a bunch of calendar work itself to ascertain which buckets are missing. It would
    //   also then easily allow us to have a too-many-facets exception (e.g. you ask for a millisecond bucket for
    //   the entire year). We could do that now but we would only be able to throw if the actual counts get to the
    //   threshold vs. being able to know the possible values consistently a-priori which is much preferred. Now on the
    //   other hand, we can facet over extremely sparse data sets without needless parent buckets.

    //We collect per-leaf
    final List<LeafReaderContext> leaves = context.leaves();
    for (final LeafReaderContext leafCtx : leaves) {
      //determine leaf acceptDocs
      Bits leafAcceptDocs;
      if (acceptDocs == null) {
        leafAcceptDocs = leafCtx.reader().getLiveDocs();
      } else if (leaves.size() == 1) {
        leafAcceptDocs = acceptDocs;
      } else {
        leafAcceptDocs = new Bits() {//note: it'd be nice if Lucene's BitsSlice was public.

          final int docBase = leafCtx.docBase;

          @Override
          public boolean get(int index) {
            return acceptDocs.get(docBase + index);
          }

          @Override
          public int length() {
            return leafCtx.reader().maxDoc();
          }
        };
      }

      facets = compute(strategy, leafCtx, leafAcceptDocs, queryShape, facets);
    }
    return facets;

  }

