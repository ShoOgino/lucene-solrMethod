    /** Compute longitude/latitude bounds for the shape.
    *@param bounds is the optional input bounds object.  If this is null,
    * a bounds object will be created.  Otherwise, the input object will be modified.
    *@return a Bounds object describing the shape's bounds.  If the bounds cannot
    * be computed, then return a Bounds object with noLongitudeBound,
    * noTopLatitudeBound, and noBottomLatitudeBound.
    */
    @Override
    public Bounds getBounds(Bounds bounds)
    {
        bounds = super.getBounds(bounds);

        // Add all the points
        for (final GeoPoint point : points) {
            bounds.addPoint(point);
        }

        // Add planes with membership.
        for (int edgeIndex = 0; edgeIndex < edges.length; edgeIndex++) {
            final SidedPlane edge = edges[edgeIndex];
            // Construct boundaries
            final Membership[] membershipBounds = new Membership[edges.length-1];
            int count = 0;
            for (int otherIndex = 0; otherIndex < edges.length; otherIndex++) {
                if (otherIndex != edgeIndex) {
                    membershipBounds[count++] = edges[otherIndex];
                }
            }
            edge.recordBounds(bounds,membershipBounds);
        }

        if (fullDistance >= Math.PI) {
            // We can't reliably assume that bounds did its longitude calculation right, so we force it to be unbounded.
            bounds.noLongitudeBound();
        }
        return bounds;
    }

