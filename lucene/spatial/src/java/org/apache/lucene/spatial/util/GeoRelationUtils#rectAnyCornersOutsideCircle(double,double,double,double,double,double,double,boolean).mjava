  /**
   * Compute whether any of the 4 corners of the rectangle (defined by min/max X/Y) are outside the circle (defined
   * by centerLon, centerLat, radiusMeters)
   *
   * Note: exotic rectangles at the poles (e.g., those whose lon/lat distance ratios greatly deviate from 1) can not
   * be determined by using distance alone. For this reason the approx flag may be set to false, in which case the
   * space will be further divided to more accurately compute whether the rectangle crosses the circle
   */
  private static boolean rectAnyCornersOutsideCircle(final double rMinX, final double rMinY, final double rMaxX,
                                                     final double rMaxY, final double centerLon, final double centerLat,
                                                     final double radiusMeters, final boolean approx) {
    if (approx == true) {
      return rectAnyCornersOutsideCircleSloppy(rMinX, rMinY, rMaxX, rMaxY, centerLon, centerLat, radiusMeters);
    }
    // if span is less than 70 degrees we can approximate using distance alone
    if (Math.abs(rMaxX - rMinX) <= 70.0) {
      return SloppyMath.haversinMeters(centerLat, centerLon, rMinY, rMinX) > radiusMeters
          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxY, rMinX) > radiusMeters
          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxY, rMaxX) > radiusMeters
          || SloppyMath.haversinMeters(centerLat, centerLon, rMinY, rMaxX) > radiusMeters;
    }
    return rectCrossesOblateCircle(centerLon, centerLat, radiusMeters, rMinX, rMinY, rMaxX, rMaxY);
  }

