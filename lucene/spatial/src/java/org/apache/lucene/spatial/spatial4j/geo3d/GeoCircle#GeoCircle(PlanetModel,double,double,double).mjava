  public GeoCircle(final PlanetModel planetModel, final double lat, final double lon, final double cutoffAngle) {
    super(planetModel);
    if (lat < -Math.PI * 0.5 || lat > Math.PI * 0.5)
      throw new IllegalArgumentException("Latitude out of bounds");
    if (lon < -Math.PI || lon > Math.PI)
      throw new IllegalArgumentException("Longitude out of bounds");
    if (cutoffAngle <= 0.0 || cutoffAngle > Math.PI)
      throw new IllegalArgumentException("Cutoff angle out of bounds");
    final double cosAngle = Math.cos(cutoffAngle);
    this.center = new GeoPoint(planetModel, lat, lon);
    final double magnitude = center.magnitude();
    // In an ellipsoidal world, cutoff distances make no sense, unfortunately.  Only membership
    // can be used to make in/out determination.
    this.cutoffAngle = cutoffAngle;
    // The plane's normal vector needs to be normalized, since we compute D on that basis
    this.circlePlane = new SidedPlane(center, center.normalize(), -cosAngle * magnitude);

    // Compute a point on the circle boundary.
    if (cutoffAngle == Math.PI)
      this.edgePoints = new GeoPoint[0];
    else {
      // We already have circle plane, which is the definitive determination of the edge of the "circle".
      // Next, compute vertical plane going through origin and the center point (C = 0, D = 0).
      Plane verticalPlane = Plane.constructNormalizedVerticalPlane(this.center.x, this.center.y);
      if (verticalPlane == null) {
        verticalPlane = new Plane(1.0,0.0);
      }
      // Finally, use Plane.findIntersections() to find the intersection points.
      final GeoPoint edgePoint = this.circlePlane.getSampleIntersectionPoint(planetModel, verticalPlane);
      if (edgePoint == null) {
        throw new RuntimeException("Could not find edge point for circle at lat="+lat+" lon="+lon+" cutoffAngle="+cutoffAngle+" planetModel="+planetModel);
      }
      //if (Math.abs(circlePlane.evaluate(edgePoint)) > 1e-10)
      //    throw new RuntimeException("Computed an edge point that does not satisfy circlePlane equation! "+circlePlane.evaluate(edgePoint));
      this.edgePoints = new GeoPoint[]{edgePoint};
    }
  }

