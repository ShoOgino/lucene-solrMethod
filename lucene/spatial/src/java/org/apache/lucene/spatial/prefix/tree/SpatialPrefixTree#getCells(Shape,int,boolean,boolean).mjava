  /**
   * Gets the intersecting cells for the specified shape, without exceeding
   * detail level. If a cell is within the query shape then it's marked as a
   * leaf and none of its children are added.
   * <p/>
   * This implementation checks if shape is a Point and if so returns {@link
   * #getCells(com.spatial4j.core.shape.Point, int, boolean)}.
   *
   * @param shape       the shape; non-null
   * @param detailLevel the maximum detail level to get cells for
   * @param inclParents if true then all parent cells of leaves are returned
   *                    too. The top world cell is never returned.
   * @param simplify    for non-point shapes, this will simply/aggregate sets of
   *                    complete leaves in a cell to its parent, resulting in
   *                    ~20-25% fewer cells.
   * @return a set of cells (no dups), sorted, immutable, non-null
   */
  public List<Cell> getCells(Shape shape, int detailLevel, boolean inclParents,
                             boolean simplify) {
    //TODO consider an on-demand iterator -- it won't build up all cells in memory.
    if (detailLevel > maxLevels) {
      throw new IllegalArgumentException("detailLevel > maxLevels");
    }
    if (shape instanceof Point) {
      return getCells((Point) shape, detailLevel, inclParents);
    }
    List<Cell> cells = new ArrayList<Cell>(inclParents ? 4096 : 2048);
    recursiveGetCells(getWorldCell(), shape, detailLevel, inclParents, simplify, cells);
    return cells;
  }

