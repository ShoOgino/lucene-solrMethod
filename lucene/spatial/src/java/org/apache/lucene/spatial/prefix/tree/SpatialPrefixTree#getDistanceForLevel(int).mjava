  /**
   * Given a node having the specified level, returns the distance from opposite
   * corners. Since this might very depending on where the node is, this method
   * may over-estimate.
   *
   * @param level [1 to maxLevels]
   * @return > 0
   */
  public double getDistanceForLevel(int level) {
    if (level < 1 || level > getMaxLevels())
      throw new IllegalArgumentException("Level must be in 1 to maxLevels range");
    //TODO cache for each level
    Node node = getNode(ctx.getWorldBounds().getCenter(), level);
    Rectangle bbox = node.getShape().getBoundingBox();
    double width = bbox.getWidth();
    double height = bbox.getHeight();
    //Use standard cartesian hypotenuse. For geospatial, this answer is larger
    // than the correct one but it's okay to over-estimate.
    return Math.sqrt(width * width + height * height);
  }

