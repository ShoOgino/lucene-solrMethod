  /** Returns a shape that represents the continuous range between {@code start} and {@code end}. It will
   * be optimized.
   * @throws IllegalArgumentException if the arguments are in the wrong order, or if either contains the other.
   */
  public Shape toRangeShape(Shape start, Shape end) {
    if (!(start instanceof LevelledValue && end instanceof LevelledValue))
      throw new IllegalArgumentException("Must pass "+LevelledValue.class+" but got "+start.getClass());
    LevelledValue minLV = (LevelledValue) start;
    LevelledValue maxLV = (LevelledValue) end;
    if (minLV.equals(maxLV))
      return minLV;
    //Optimize precision of the range, e.g. April 1st to April 30th is April.
    minLV = minLV.getLVAtLevel(truncateStartVals(minLV, 0));
    maxLV = maxLV.getLVAtLevel(truncateEndVals(maxLV, 0));
    int cmp = comparePrefixLV(minLV, maxLV);
    if (cmp > 0) {
      throw new IllegalArgumentException("Wrong order: "+start+" TO "+end);
    }
    if (cmp == 0 && minLV.getLevel() == maxLV.getLevel())
      return minLV;
    return new NRShape(minLV, maxLV);
  }

