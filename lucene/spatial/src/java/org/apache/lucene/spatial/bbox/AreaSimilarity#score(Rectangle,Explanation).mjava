  @Override
  public double score(Rectangle target, Explanation exp) {
    if (target == null || queryArea <= 0) {
      return 0;
    }
    double targetArea = target.getArea(null);
    if (targetArea <= 0) {
      return 0;
    }
    double score = 0;

    double top = Math.min(queryExtent.getMaxY(), target.getMaxY());
    double bottom = Math.max(queryExtent.getMinY(), target.getMinY());
    double height = top - bottom;
    double width = 0;

    // queries that cross the date line
    if (queryExtent.getCrossesDateLine()) {
      // documents that cross the date line
      if (target.getCrossesDateLine()) {
        double left = Math.max(queryExtent.getMinX(), target.getMinX());
        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());
        width = right + 360.0 - left;
      } else {
        double qryWestLeft = Math.max(queryExtent.getMinX(), target.getMaxX());
        double qryWestRight = Math.min(target.getMaxX(), 180.0);
        double qryWestWidth = qryWestRight - qryWestLeft;
        if (qryWestWidth > 0) {
          width = qryWestWidth;
        } else {
          double qryEastLeft = Math.max(target.getMaxX(), -180.0);
          double qryEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());
          double qryEastWidth = qryEastRight - qryEastLeft;
          if (qryEastWidth > 0) {
            width = qryEastWidth;
          }
        }
      }
    } else { // queries that do not cross the date line

      if (target.getCrossesDateLine()) {
        double tgtWestLeft = Math.max(queryExtent.getMinX(), target.getMinX());
        double tgtWestRight = Math.min(queryExtent.getMaxX(), 180.0);
        double tgtWestWidth = tgtWestRight - tgtWestLeft;
        if (tgtWestWidth > 0) {
          width = tgtWestWidth;
        } else {
          double tgtEastLeft = Math.max(queryExtent.getMinX(), -180.0);
          double tgtEastRight = Math.min(queryExtent.getMaxX(), target.getMaxX());
          double tgtEastWidth = tgtEastRight - tgtEastLeft;
          if (tgtEastWidth > 0) {
            width = tgtEastWidth;
          }
        }
      } else {
        double left = Math.max(queryExtent.getMinX(), target.getMinX());
        double right = Math.min(queryExtent.getMaxX(), target.getMaxX());
        width = right - left;
      }
    }


    // calculate the score
    if ((width > 0) && (height > 0)) {
      double intersectionArea = width * height;
      double queryRatio = intersectionArea / queryArea;
      double targetRatio = intersectionArea / targetArea;
      double queryFactor = Math.pow(queryRatio, queryPower);
      double targetFactor = Math.pow(targetRatio, targetPower);
      score = queryFactor * targetFactor * 10000.0;

      if (exp!=null) {
//        StringBuilder sb = new StringBuilder();
//        sb.append("\nscore=").append(score);
//        sb.append("\n  query=").append();
//        sb.append("\n  target=").append(target.toString());
//        sb.append("\n  intersectionArea=").append(intersectionArea);
//        
//        sb.append(" queryArea=").append(queryArea).append(" targetArea=").append(targetArea);
//        sb.append("\n  queryRatio=").append(queryRatio).append(" targetRatio=").append(targetRatio);
//        sb.append("\n  queryFactor=").append(queryFactor).append(" targetFactor=").append(targetFactor);
//        sb.append(" (queryPower=").append(queryPower).append(" targetPower=").append(targetPower).append(")");
        
        exp.setValue((float)score);
        exp.setDescription(this.getClass().getSimpleName());
        
        Explanation e = null;
        
        exp.addDetail( e = new Explanation((float)intersectionArea, "IntersectionArea") );
        e.addDetail(new Explanation((float)width,  "width; Query: "+queryExtent.toString()));
        e.addDetail(new Explanation((float)height, "height; Target: "+target.toString()));

        exp.addDetail( e = new Explanation((float)queryFactor, "Query") );
        e.addDetail(new Explanation((float)queryArea, "area"));
        e.addDetail(new Explanation((float)queryRatio, "ratio"));
        e.addDetail(new Explanation((float)queryPower, "power"));

        exp.addDetail( e = new Explanation((float)targetFactor, "Target") );
        e.addDetail(new Explanation((float)targetArea, "area"));
        e.addDetail(new Explanation((float)targetRatio, "ratio"));
        e.addDetail(new Explanation((float)targetPower, "power"));
      }
    }
    else if(exp !=null) {
      exp.setValue(0);
      exp.setDescription("Shape does not intersect");
    }
    return score;
  }

