  /**
   * Returns true if node was added as a leaf. If it wasn't it recursively
   * descends.
   */
  private boolean recursiveGetNodes(Node node, Shape shape, int detailLevel,
                                    boolean inclParents, boolean simplify,
                                    List<Node> result) {
    if (node.getLevel() == detailLevel) {
      node.setLeaf();//FYI might already be a leaf
    }
    if (node.isLeaf()) {
      result.add(node);
      return true;
    }
    if (inclParents && node.getLevel() != 0)
      result.add(node);

    Collection<Node> subCells = node.getSubCells(shape);
    int leaves = 0;
    for (Node subCell : subCells) {
      if (recursiveGetNodes(subCell, shape, detailLevel, inclParents, simplify, result))
        leaves++;
    }
    //can we simplify?
    if (simplify && leaves == node.getSubCellsSize() && node.getLevel() != 0) {
      //Optimization: substitute the parent as a leaf instead of adding all
      // children as leaves

      //remove the leaves
      do {
        result.remove(result.size() - 1);//remove last
      } while (--leaves > 0);
      //add node as the leaf
      node.setLeaf();
      if (!inclParents) // otherwise it was already added up above
        result.add(node);
      return true;
    }
    return false;
  }

