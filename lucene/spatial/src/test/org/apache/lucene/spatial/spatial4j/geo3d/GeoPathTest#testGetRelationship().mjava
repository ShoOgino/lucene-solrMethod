    @Test
    public void testGetRelationship() {
        GeoArea rect;
        GeoPath p;

        // Start by testing the basic kinds of relationship, increasing in order of difficulty.

        p = new GeoPath(0.1);
        p.addPoint(-0.3,-0.3);
        p.addPoint(0.3,0.3);
        // Easiest: The path is wholly contains the georect
        rect = new GeoRectangle(0.05,-0.05,-0.05,0.05);
        assertEquals(GeoArea.CONTAINS, rect.getRelationship(p));
        // Next easiest: Some endpoints of the rectangle are inside, and some are outside.
        rect = new GeoRectangle(0.05,-0.05,-0.05,0.5);
        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));
        // Now, all points are outside, but the figures intersect
        rect = new GeoRectangle(0.05,-0.05,-0.5,0.5);
        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));
        // Finally, all points are outside, and the figures *do not* intersect
        rect = new GeoRectangle(0.5,-0.5,-0.5,0.5);
        assertEquals(GeoArea.WITHIN, rect.getRelationship(p));
        // Check that segment edge overlap detection works
        rect = new GeoRectangle(0.1,0.0,-0.1,0.0);
        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));
        rect = new GeoRectangle(0.2,0.1,-0.2,-0.1);
        assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));
        // Check if overlap at endpoints behaves as expected next
        rect = new GeoRectangle(0.5,-0.5,-0.5,-0.35);
        assertEquals(GeoArea.OVERLAPS, rect.getRelationship(p));
        rect = new GeoRectangle(0.5,-0.5,-0.5,-0.45);
        assertEquals(GeoArea.DISJOINT, rect.getRelationship(p));

    }

