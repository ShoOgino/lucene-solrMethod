  /** Returns {polyLats, polyLons} double[] array */
  private static double[][] surpriseMePolygon(Double otherLatitude, Double otherLongitude) {
    // repeat until we get a poly that doesn't cross dateline:
    newPoly:
    while (true) {
      //System.out.println("\nPOLY ITER");
      final double centerLat;
      final double centerLon;
      if (otherLatitude == null) {
        centerLat = nextLatitude();
        centerLon = nextLongitude();
      } else {
        GeoUtils.checkLatitude(otherLatitude);
        GeoUtils.checkLongitude(otherLongitude);
        centerLat = nextLatitudeNear(otherLatitude);
        centerLon = nextLongitudeNear(otherLongitude);
      }

      double radius = 0.1 + 20 * random().nextDouble();
      double radiusDelta = random().nextDouble();

      ArrayList<Double> lats = new ArrayList<>();
      ArrayList<Double> lons = new ArrayList<>();
      double angle = 0.0;
      while (true) {
        angle += random().nextDouble()*40.0;
        //System.out.println("  angle " + angle);
        if (angle > 360) {
          break;
        }
        double len = radius * (1.0 - radiusDelta + radiusDelta * random().nextDouble());
        //System.out.println("    len=" + len);
        double lat = centerLat + len * Math.cos(Math.toRadians(angle));
        double lon = centerLon + len * Math.sin(Math.toRadians(angle));
        if (lon <= GeoUtils.MIN_LON_INCL || lon >= GeoUtils.MAX_LON_INCL) {
          // cannot cross dateline: try again!
          continue newPoly;
        }
        if (lat > 90) {
          // cross the north pole
          lat = 180 - lat;
          lon = 180 - lon;
        } else if (lat < -90) {
          // cross the south pole
          lat = -180 - lat;
          lon = 180 - lon;
        }
        if (lon <= GeoUtils.MIN_LON_INCL || lon >= GeoUtils.MAX_LON_INCL) {
          // cannot cross dateline: try again!
          continue newPoly;
        }
        lats.add(lat);
        lons.add(lon);

        //System.out.println("    lat=" + lats.get(lats.size()-1) + " lon=" + lons.get(lons.size()-1));
      }

      // close it
      lats.add(lats.get(0));
      lons.add(lons.get(0));

      double[] latsArray = new double[lats.size()];
      double[] lonsArray = new double[lons.size()];
      for(int i=0;i<lats.size();i++) {
        latsArray[i] = lats.get(i);
        lonsArray[i] = lons.get(i);
      }
      return new double[][] {latsArray, lonsArray};
    }
  }

