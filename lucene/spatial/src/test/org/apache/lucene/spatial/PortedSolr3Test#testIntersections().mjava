  @Test
  public void testIntersections() throws Exception {
    setupDocs();
    //Try some edge cases
      //NOTE: 2nd arg is distance in kilometers
    checkHitsCircle(ctx.makePoint(1, 1), 175, 3, 5, 6, 7);
    checkHitsCircle(ctx.makePoint(179.8, 0), 200, 2, 8, 9);
    checkHitsCircle(ctx.makePoint(50, 89.8), 200, 2, 10, 11);//this goes over the north pole
    checkHitsCircle(ctx.makePoint(50, -89.8), 200, 2, 12, 13);//this goes over the south pole
    //try some normal cases
    checkHitsCircle(ctx.makePoint(-80.0, 33.0), 300, 2);
    //large distance
    checkHitsCircle(ctx.makePoint(1, 1), 5000, 3, 5, 6, 7);
    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then
    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,
    //it will be included, b/c of the box calculation.
    checkHitsBBox(ctx.makePoint(0.1, 0.1), 15, 2, 5, 6);
    //try some more
    deleteAll();
    adoc("14", ctx.makePoint(5, 0));
    adoc("15", ctx.makePoint(15, 0));
    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html
    adoc("16", ctx.makePoint(19.79750, 18.71111));
    adoc("17", ctx.makePoint(-95.436643, 44.043900));
    commit();

    checkHitsCircle(ctx.makePoint(0, 0), 1000, 1, 14);
    checkHitsCircle(ctx.makePoint(0, 0), 2000, 2, 14, 15);
    checkHitsBBox(ctx.makePoint(0, 0), 3000, 3, 14, 15, 16);
    checkHitsCircle(ctx.makePoint(0, 0), 3001, 3, 14, 15, 16);
    checkHitsCircle(ctx.makePoint(0, 0), 3000.1, 3, 14, 15, 16);

    //really fine grained distance and reflects some of the vagaries of how we are calculating the box
    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 109, 0);

    // falls outside of the real distance, but inside the bounding box
    checkHitsCircle(ctx.makePoint(-96.789603, 43.517030), 110, 0);
    checkHitsBBox(ctx.makePoint(-96.789603, 43.517030), 110, 1, 17);
  }

