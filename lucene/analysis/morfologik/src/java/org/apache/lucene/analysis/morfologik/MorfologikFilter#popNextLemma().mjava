  private void popNextLemma() {
    // Collect all tags for the next unique lemma.
    CharSequence currentStem;
    int tags = 0;
    do {
      final WordData lemma = lemmaList.get(lemmaListIndex++);
      currentStem = lemma.getStem();
      final CharSequence tag = lemma.getTag();
      if (tag != null) {
        if (tagsList.size() <= tags) {
          tagsList.add(new StringBuilder());
        }

        final StringBuilder buffer = tagsList.get(tags++);  
        buffer.setLength(0);
        buffer.append(lemma.getTag());
      }
    } while (lemmaListIndex < lemmaList.size() &&
             equalCharSequences(lemmaList.get(lemmaListIndex).getStem(), currentStem));

    // Set the lemma's base form and tags as attributes.
    termAtt.setEmpty().append(currentStem);
    tagsAtt.setTags(tagsList.subList(0, tags));
  }

