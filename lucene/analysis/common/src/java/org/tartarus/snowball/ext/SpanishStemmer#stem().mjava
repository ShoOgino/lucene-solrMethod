                @Override
                public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
                    // (, line 215
                    // do, line 216
                    v_1 = cursor;
                    lab0: do {
                        // call mark_regions, line 216
                        if (!r_mark_regions())
                        {
                            break lab0;
                        }
                    } while (false);
                    cursor = v_1;
                    // backwards, line 217
                    limit_backward = cursor; cursor = limit;
                    // (, line 217
                    // do, line 218
                    v_2 = limit - cursor;
                    lab1: do {
                        // call attached_pronoun, line 218
                        if (!r_attached_pronoun())
                        {
                            break lab1;
                        }
                    } while (false);
                    cursor = limit - v_2;
                    // do, line 219
                    v_3 = limit - cursor;
                    lab2: do {
                        // (, line 219
                        // or, line 219
                        lab3: do {
                            v_4 = limit - cursor;
                            lab4: do {
                                // call standard_suffix, line 219
                                if (!r_standard_suffix())
                                {
                                    break lab4;
                                }
                                break lab3;
                            } while (false);
                            cursor = limit - v_4;
                            lab5: do {
                                // call y_verb_suffix, line 220
                                if (!r_y_verb_suffix())
                                {
                                    break lab5;
                                }
                                break lab3;
                            } while (false);
                            cursor = limit - v_4;
                            // call verb_suffix, line 221
                            if (!r_verb_suffix())
                            {
                                break lab2;
                            }
                        } while (false);
                    } while (false);
                    cursor = limit - v_3;
                    // do, line 223
                    v_5 = limit - cursor;
                    lab6: do {
                        // call residual_suffix, line 223
                        if (!r_residual_suffix())
                        {
                            break lab6;
                        }
                    } while (false);
                    cursor = limit - v_5;
                    cursor = limit_backward;                    // do, line 225
                    v_6 = cursor;
                    lab7: do {
                        // call postlude, line 225
                        if (!r_postlude())
                        {
                            break lab7;
                        }
                    } while (false);
                    cursor = v_6;
                    return true;
                }

