private boolean r_stem_suffix_chain_before_ki() {
  ket = cursor;
  if (!r_mark_ki())
  {
    return false;
  }
  lab0: {
    int v_1 = limit - cursor;
    lab1: {
      if (!r_mark_DA())
      {
        break lab1;
      }
      bra = cursor;
      slice_del();
      int v_2 = limit - cursor;
      lab2: {
        ket = cursor;
        lab3: {
          int v_3 = limit - cursor;
          lab4: {
            if (!r_mark_lAr())
            {
              break lab4;
            }
            bra = cursor;
            slice_del();
            int v_4 = limit - cursor;
            lab5: {
              if (!r_stem_suffix_chain_before_ki())
              {
                cursor = limit - v_4;
                break lab5;
              }
            }
            break lab3;
          }
          cursor = limit - v_3;
          if (!r_mark_possessives())
          {
            cursor = limit - v_2;
            break lab2;
          }
          bra = cursor;
          slice_del();
          int v_5 = limit - cursor;
          lab6: {
            ket = cursor;
            if (!r_mark_lAr())
            {
              cursor = limit - v_5;
              break lab6;
            }
            bra = cursor;
            slice_del();
            if (!r_stem_suffix_chain_before_ki())
            {
              cursor = limit - v_5;
              break lab6;
            }
          }
        }
      }
      break lab0;
    }
    cursor = limit - v_1;
    lab7: {
      if (!r_mark_nUn())
      {
        break lab7;
      }
      bra = cursor;
      slice_del();
      int v_6 = limit - cursor;
      lab8: {
        ket = cursor;
        lab9: {
          int v_7 = limit - cursor;
          lab10: {
            if (!r_mark_lArI())
            {
              break lab10;
            }
            bra = cursor;
            slice_del();
            break lab9;
          }
          cursor = limit - v_7;
          lab11: {
            ket = cursor;
            lab12: {
              int v_8 = limit - cursor;
              lab13: {
                if (!r_mark_possessives())
                {
                  break lab13;
                }
                break lab12;
              }
              cursor = limit - v_8;
              if (!r_mark_sU())
              {
                break lab11;
              }
            }
            bra = cursor;
            slice_del();
            int v_9 = limit - cursor;
            lab14: {
              ket = cursor;
              if (!r_mark_lAr())
              {
                cursor = limit - v_9;
                break lab14;
              }
              bra = cursor;
              slice_del();
              if (!r_stem_suffix_chain_before_ki())
              {
                cursor = limit - v_9;
                break lab14;
              }
            }
            break lab9;
          }
          cursor = limit - v_7;
          if (!r_stem_suffix_chain_before_ki())
          {
            cursor = limit - v_6;
            break lab8;
          }
        }
      }
      break lab0;
    }
    cursor = limit - v_1;
    if (!r_mark_ndA())
    {
      return false;
    }
    lab15: {
      int v_10 = limit - cursor;
      lab16: {
        if (!r_mark_lArI())
        {
          break lab16;
        }
        bra = cursor;
        slice_del();
        break lab15;
      }
      cursor = limit - v_10;
      lab17: {
        if (!r_mark_sU())
        {
          break lab17;
        }
        bra = cursor;
        slice_del();
        int v_11 = limit - cursor;
        lab18: {
          ket = cursor;
          if (!r_mark_lAr())
          {
            cursor = limit - v_11;
            break lab18;
          }
          bra = cursor;
          slice_del();
          if (!r_stem_suffix_chain_before_ki())
          {
            cursor = limit - v_11;
            break lab18;
          }
        }
        break lab15;
      }
      cursor = limit - v_10;
      if (!r_stem_suffix_chain_before_ki())
      {
        return false;
      }
    }
  }
  return true;
}

