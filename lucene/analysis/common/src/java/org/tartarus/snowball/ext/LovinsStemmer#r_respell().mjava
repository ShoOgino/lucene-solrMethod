private boolean r_respell() {
  int among_var;
  ket = cursor;
  among_var = find_among_b(a_3);
  if (among_var == 0)
  {
    return false;
  }
  bra = cursor;
  switch (among_var) {
    case 1:
      slice_from("ief");
      break;
    case 2:
      slice_from("uc");
      break;
    case 3:
      slice_from("um");
      break;
    case 4:
      slice_from("rb");
      break;
    case 5:
      slice_from("ur");
      break;
    case 6:
      slice_from("ister");
      break;
    case 7:
      slice_from("meter");
      break;
    case 8:
      slice_from("olut");
      break;
    case 9:
      {
        int v_1 = limit - cursor;
        lab0: {
          if (!(eq_s_b("a")))
          {
            break lab0;
          }
          return false;
        }
        cursor = limit - v_1;
      }
      {
        int v_2 = limit - cursor;
        lab1: {
          if (!(eq_s_b("i")))
          {
            break lab1;
          }
          return false;
        }
        cursor = limit - v_2;
      }
      {
        int v_3 = limit - cursor;
        lab2: {
          if (!(eq_s_b("o")))
          {
            break lab2;
          }
          return false;
        }
        cursor = limit - v_3;
      }
      slice_from("l");
      break;
    case 10:
      slice_from("bic");
      break;
    case 11:
      slice_from("dic");
      break;
    case 12:
      slice_from("pic");
      break;
    case 13:
      slice_from("tic");
      break;
    case 14:
      slice_from("ac");
      break;
    case 15:
      slice_from("ec");
      break;
    case 16:
      slice_from("ic");
      break;
    case 17:
      slice_from("luc");
      break;
    case 18:
      slice_from("uas");
      break;
    case 19:
      slice_from("vas");
      break;
    case 20:
      slice_from("cis");
      break;
    case 21:
      slice_from("lis");
      break;
    case 22:
      slice_from("eris");
      break;
    case 23:
      slice_from("pans");
      break;
    case 24:
      {
        int v_4 = limit - cursor;
        lab3: {
          if (!(eq_s_b("s")))
          {
            break lab3;
          }
          return false;
        }
        cursor = limit - v_4;
      }
      slice_from("ens");
      break;
    case 25:
      slice_from("ons");
      break;
    case 26:
      slice_from("lus");
      break;
    case 27:
      slice_from("rus");
      break;
    case 28:
      {
        int v_5 = limit - cursor;
        lab4: {
          if (!(eq_s_b("p")))
          {
            break lab4;
          }
          return false;
        }
        cursor = limit - v_5;
      }
      {
        int v_6 = limit - cursor;
        lab5: {
          if (!(eq_s_b("t")))
          {
            break lab5;
          }
          return false;
        }
        cursor = limit - v_6;
      }
      slice_from("hes");
      break;
    case 29:
      slice_from("mis");
      break;
    case 30:
      {
        int v_7 = limit - cursor;
        lab6: {
          if (!(eq_s_b("m")))
          {
            break lab6;
          }
          return false;
        }
        cursor = limit - v_7;
      }
      slice_from("ens");
      break;
    case 31:
      slice_from("ers");
      break;
    case 32:
      {
        int v_8 = limit - cursor;
        lab7: {
          if (!(eq_s_b("n")))
          {
            break lab7;
          }
          return false;
        }
        cursor = limit - v_8;
      }
      slice_from("es");
      break;
    case 33:
      slice_from("ys");
      break;
  }
  return true;
}

