                private boolean r_possessive() {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
                    // (, line 68
                    // setlimit, line 69
                    v_1 = limit - cursor;
                    // tomark, line 69
                    if (cursor < I_p1)
                    {
                        return false;
                    }
                    cursor = I_p1;
                    v_2 = limit_backward;
                    limit_backward = cursor;
                    cursor = limit - v_1;
                    // (, line 69
                    // [, line 69
                    ket = cursor;
                    // substring, line 69
                    among_var = find_among_b(a_4, 9);
                    if (among_var == 0)
                    {
                        limit_backward = v_2;
                        return false;
                    }
                    // ], line 69
                    bra = cursor;
                    limit_backward = v_2;
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 72
                            // not, line 72
                            {
                                v_3 = limit - cursor;
                                lab0: do {
                                    // literal, line 72
                                    if (!(eq_s_b(1, "k")))
                                    {
                                        break lab0;
                                    }
                                    return false;
                                } while (false);
                                cursor = limit - v_3;
                            }
                            // delete, line 72
                            slice_del();
                            break;
                        case 2:
                            // (, line 74
                            // delete, line 74
                            slice_del();
                            // [, line 74
                            ket = cursor;
                            // literal, line 74
                            if (!(eq_s_b(3, "kse")))
                            {
                                return false;
                            }
                            // ], line 74
                            bra = cursor;
                            // <-, line 74
                            slice_from("ksi");
                            break;
                        case 3:
                            // (, line 78
                            // delete, line 78
                            slice_del();
                            break;
                        case 4:
                            // (, line 81
                            // among, line 81
                            if (find_among_b(a_1, 6) == 0)
                            {
                                return false;
                            }
                            // delete, line 81
                            slice_del();
                            break;
                        case 5:
                            // (, line 83
                            // among, line 83
                            if (find_among_b(a_2, 6) == 0)
                            {
                                return false;
                            }
                            // delete, line 84
                            slice_del();
                            break;
                        case 6:
                            // (, line 86
                            // among, line 86
                            if (find_among_b(a_3, 2) == 0)
                            {
                                return false;
                            }
                            // delete, line 86
                            slice_del();
                            break;
                    }
                    return true;
                }

