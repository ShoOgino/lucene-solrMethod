    private boolean r_emphasis() {
        int among_var;
        int v_1;
        int v_2;
        int v_3;
        int v_4;
        int v_5;
        // (, line 50
        // setlimit, line 51
        v_1 = limit - cursor;
        // tomark, line 51
        if (cursor < I_p1)
        {
            return false;
        }
        cursor = I_p1;
        v_2 = limit_backward;
        limit_backward = cursor;
        cursor = limit - v_1;
        // (, line 51
        // [, line 51
        ket = cursor;
        // substring, line 51
        among_var = find_among_b(a_0, 2);
        if (among_var == 0)
        {
            limit_backward = v_2;
            return false;
        }
        // ], line 51
        bra = cursor;
        limit_backward = v_2;
        // test, line 52
        v_3 = limit - cursor;
        // hop, line 52
        {
            int c = cursor - 4;
            if (limit_backward > c || c > limit)
            {
                return false;
            }
            cursor = c;
        }
        cursor = limit - v_3;
        switch(among_var) {
            case 0:
                return false;
            case 1:
                // (, line 54
                // (, line 54
                // and, line 54
                v_4 = limit - cursor;
                if (!(in_grouping_b(g_GI, 97, 252)))
                {
                    return false;
                }
                cursor = limit - v_4;
                // not, line 54
            {
                v_5 = limit - cursor;
                lab0: do {
                    // call LONGV, line 54
                    if (!r_LONGV())
                    {
                        break lab0;
                    }
                    return false;
                } while (false);
                cursor = limit - v_5;
            }
            // delete, line 54
            slice_del();
            break;
            case 2:
                // (, line 55
                if (!(in_grouping_b(g_KI, 98, 197)))
                {
                    return false;
                }
                // delete, line 55
                slice_del();
                break;
        }
        return true;
    }

