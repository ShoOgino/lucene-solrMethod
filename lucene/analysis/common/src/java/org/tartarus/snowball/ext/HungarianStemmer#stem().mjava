        public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
            int v_7;
            int v_8;
            int v_9;
            int v_10;
            // (, line 228
            // do, line 229
            v_1 = cursor;
            lab0: do {
                // call mark_regions, line 229
                if (!r_mark_regions())
                {
                    break lab0;
                }
            } while (false);
            cursor = v_1;
            // backwards, line 230
            limit_backward = cursor; cursor = limit;
            // (, line 230
            // do, line 231
            v_2 = limit - cursor;
            lab1: do {
                // call instrum, line 231
                if (!r_instrum())
                {
                    break lab1;
                }
            } while (false);
            cursor = limit - v_2;
            // do, line 232
            v_3 = limit - cursor;
            lab2: do {
                // call case, line 232
                if (!r_case())
                {
                    break lab2;
                }
            } while (false);
            cursor = limit - v_3;
            // do, line 233
            v_4 = limit - cursor;
            lab3: do {
                // call case_special, line 233
                if (!r_case_special())
                {
                    break lab3;
                }
            } while (false);
            cursor = limit - v_4;
            // do, line 234
            v_5 = limit - cursor;
            lab4: do {
                // call case_other, line 234
                if (!r_case_other())
                {
                    break lab4;
                }
            } while (false);
            cursor = limit - v_5;
            // do, line 235
            v_6 = limit - cursor;
            lab5: do {
                // call factive, line 235
                if (!r_factive())
                {
                    break lab5;
                }
            } while (false);
            cursor = limit - v_6;
            // do, line 236
            v_7 = limit - cursor;
            lab6: do {
                // call owned, line 236
                if (!r_owned())
                {
                    break lab6;
                }
            } while (false);
            cursor = limit - v_7;
            // do, line 237
            v_8 = limit - cursor;
            lab7: do {
                // call sing_owner, line 237
                if (!r_sing_owner())
                {
                    break lab7;
                }
            } while (false);
            cursor = limit - v_8;
            // do, line 238
            v_9 = limit - cursor;
            lab8: do {
                // call plur_owner, line 238
                if (!r_plur_owner())
                {
                    break lab8;
                }
            } while (false);
            cursor = limit - v_9;
            // do, line 239
            v_10 = limit - cursor;
            lab9: do {
                // call plural, line 239
                if (!r_plural())
                {
                    break lab9;
                }
            } while (false);
            cursor = limit - v_10;
            cursor = limit_backward;            return true;
        }

