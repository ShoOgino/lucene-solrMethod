private boolean r_fix_ending() {
  if (!(limit > 3))
  {
    return false;
  }
  limit_backward = cursor;
  cursor = limit;
  lab0: {
    int v_1 = limit - cursor;
    lab1: {
      ket = cursor;
      if (find_among_b(a_1) == 0)
      {
        break lab1;
      }
      bra = cursor;
      slice_del();
      break lab0;
    }
    cursor = limit - v_1;
    lab2: {
      ket = cursor;
      if (!(eq_s_b("\u0BAF\u0BCD")))
      {
        break lab2;
      }
      int v_2 = limit - cursor;
      if (find_among_b(a_2) == 0)
      {
        break lab2;
      }
      cursor = limit - v_2;
      bra = cursor;
      slice_del();
      break lab0;
    }
    cursor = limit - v_1;
    lab3: {
      ket = cursor;
      lab4: {
        int v_3 = limit - cursor;
        lab5: {
          if (!(eq_s_b("\u0B9F\u0BCD\u0BAA\u0BCD")))
          {
            break lab5;
          }
          break lab4;
        }
        cursor = limit - v_3;
        if (!(eq_s_b("\u0B9F\u0BCD\u0B95\u0BCD")))
        {
          break lab3;
        }
      }
      bra = cursor;
      slice_from("\u0BB3\u0BCD");
      break lab0;
    }
    cursor = limit - v_1;
    lab6: {
      ket = cursor;
      if (!(eq_s_b("\u0BA9\u0BCD\u0BB1\u0BCD")))
      {
        break lab6;
      }
      bra = cursor;
      slice_from("\u0BB2\u0BCD");
      break lab0;
    }
    cursor = limit - v_1;
    lab7: {
      ket = cursor;
      if (!(eq_s_b("\u0BB1\u0BCD\u0B95\u0BCD")))
      {
        break lab7;
      }
      bra = cursor;
      slice_from("\u0BB2\u0BCD");
      break lab0;
    }
    cursor = limit - v_1;
    lab8: {
      ket = cursor;
      if (!(eq_s_b("\u0B9F\u0BCD\u0B9F\u0BCD")))
      {
        break lab8;
      }
      bra = cursor;
      slice_from("\u0B9F\u0BC1");
      break lab0;
    }
    cursor = limit - v_1;
    lab9: {
      if (!(B_found_vetrumai_urupu))
      {
        break lab9;
      }
      ket = cursor;
      if (!(eq_s_b("\u0BA4\u0BCD\u0BA4\u0BCD")))
      {
        break lab9;
      }
      int v_4 = limit - cursor;
      {
        int v_5 = limit - cursor;
        lab10: {
          if (!(eq_s_b("\u0BC8")))
          {
            break lab10;
          }
          break lab9;
        }
        cursor = limit - v_5;
      }
      cursor = limit - v_4;
      bra = cursor;
      slice_from("\u0BAE\u0BCD");
      bra = cursor;
      break lab0;
    }
    cursor = limit - v_1;
    lab11: {
      ket = cursor;
      lab12: {
        int v_6 = limit - cursor;
        lab13: {
          if (!(eq_s_b("\u0BC1\u0B95\u0BCD")))
          {
            break lab13;
          }
          break lab12;
        }
        cursor = limit - v_6;
        if (!(eq_s_b("\u0BC1\u0B95\u0BCD\u0B95\u0BCD")))
        {
          break lab11;
        }
      }
      bra = cursor;
      slice_from("\u0BCD");
      break lab0;
    }
    cursor = limit - v_1;
    lab14: {
      ket = cursor;
      if (!(eq_s_b("\u0BCD")))
      {
        break lab14;
      }
      if (find_among_b(a_3) == 0)
      {
        break lab14;
      }
      if (!(eq_s_b("\u0BCD")))
      {
        break lab14;
      }
      if (find_among_b(a_4) == 0)
      {
        break lab14;
      }
      bra = cursor;
      slice_del();
      break lab0;
    }
    cursor = limit - v_1;
    lab15: {
      ket = cursor;
      if (!(eq_s_b("\u0BC1\u0B95\u0BCD")))
      {
        break lab15;
      }
      bra = cursor;
      slice_from("\u0BCD");
      break lab0;
    }
    cursor = limit - v_1;
    lab16: {
      ket = cursor;
      if (!(eq_s_b("\u0BCD")))
      {
        break lab16;
      }
      if (find_among_b(a_5) == 0)
      {
        break lab16;
      }
      bra = cursor;
      slice_del();
      break lab0;
    }
    cursor = limit - v_1;
    lab17: {
      ket = cursor;
      if (!(eq_s_b("\u0BCD")))
      {
        break lab17;
      }
      lab18: {
        int v_7 = limit - cursor;
        lab19: {
          if (find_among_b(a_6) == 0)
          {
            break lab19;
          }
          break lab18;
        }
        cursor = limit - v_7;
        if (find_among_b(a_7) == 0)
        {
          break lab17;
        }
      }
      if (!(eq_s_b("\u0BCD")))
      {
        break lab17;
      }
      bra = cursor;
      slice_from("\u0BCD");
      break lab0;
    }
    cursor = limit - v_1;
    lab20: {
      ket = cursor;
      if (find_among_b(a_8) == 0)
      {
        break lab20;
      }
      bra = cursor;
      slice_del();
      break lab0;
    }
    cursor = limit - v_1;
    lab21: {
      ket = cursor;
      if (!(eq_s_b("\u0BA9\u0BC1")))
      {
        break lab21;
      }
      int v_8 = limit - cursor;
      {
        int v_9 = limit - cursor;
        lab22: {
          if (find_among_b(a_9) == 0)
          {
            break lab22;
          }
          break lab21;
        }
        cursor = limit - v_9;
      }
      cursor = limit - v_8;
      bra = cursor;
      slice_del();
      break lab0;
    }
    cursor = limit - v_1;
    lab23: {
      ket = cursor;
      if (!(eq_s_b("\u0B99\u0BCD")))
      {
        break lab23;
      }
      int v_10 = limit - cursor;
      {
        int v_11 = limit - cursor;
        lab24: {
          if (!(eq_s_b("\u0BC8")))
          {
            break lab24;
          }
          break lab23;
        }
        cursor = limit - v_11;
      }
      cursor = limit - v_10;
      bra = cursor;
      slice_from("\u0BAE\u0BCD");
      break lab0;
    }
    cursor = limit - v_1;
    lab25: {
      ket = cursor;
      if (!(eq_s_b("\u0B99\u0BCD")))
      {
        break lab25;
      }
      bra = cursor;
      slice_del();
      break lab0;
    }
    cursor = limit - v_1;
    ket = cursor;
    if (!(eq_s_b("\u0BCD")))
    {
      return false;
    }
    int v_12 = limit - cursor;
    lab26: {
      int v_13 = limit - cursor;
      lab27: {
        if (find_among_b(a_10) == 0)
        {
          break lab27;
        }
        break lab26;
      }
      cursor = limit - v_13;
      if (!(eq_s_b("\u0BCD")))
      {
        return false;
      }
    }
    cursor = limit - v_12;
    bra = cursor;
    slice_del();
  }
  cursor = limit_backward;
  return true;
}

