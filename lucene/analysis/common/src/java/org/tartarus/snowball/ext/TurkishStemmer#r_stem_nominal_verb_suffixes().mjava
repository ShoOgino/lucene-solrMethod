private boolean r_stem_nominal_verb_suffixes() {
  ket = cursor;
  B_continue_stemming_noun_suffixes = true;
  lab0: {
    int v_1 = limit - cursor;
    lab1: {
      lab2: {
        int v_2 = limit - cursor;
        lab3: {
          if (!r_mark_ymUs_())
          {
            break lab3;
          }
          break lab2;
        }
        cursor = limit - v_2;
        lab4: {
          if (!r_mark_yDU())
          {
            break lab4;
          }
          break lab2;
        }
        cursor = limit - v_2;
        lab5: {
          if (!r_mark_ysA())
          {
            break lab5;
          }
          break lab2;
        }
        cursor = limit - v_2;
        if (!r_mark_yken())
        {
          break lab1;
        }
      }
      break lab0;
    }
    cursor = limit - v_1;
    lab6: {
      if (!r_mark_cAsInA())
      {
        break lab6;
      }
      lab7: {
        int v_3 = limit - cursor;
        lab8: {
          if (!r_mark_sUnUz())
          {
            break lab8;
          }
          break lab7;
        }
        cursor = limit - v_3;
        lab9: {
          if (!r_mark_lAr())
          {
            break lab9;
          }
          break lab7;
        }
        cursor = limit - v_3;
        lab10: {
          if (!r_mark_yUm())
          {
            break lab10;
          }
          break lab7;
        }
        cursor = limit - v_3;
        lab11: {
          if (!r_mark_sUn())
          {
            break lab11;
          }
          break lab7;
        }
        cursor = limit - v_3;
        lab12: {
          if (!r_mark_yUz())
          {
            break lab12;
          }
          break lab7;
        }
        cursor = limit - v_3;
      }
      if (!r_mark_ymUs_())
      {
        break lab6;
      }
      break lab0;
    }
    cursor = limit - v_1;
    lab13: {
      if (!r_mark_lAr())
      {
        break lab13;
      }
      bra = cursor;
      slice_del();
      int v_4 = limit - cursor;
      lab14: {
        ket = cursor;
        lab15: {
          int v_5 = limit - cursor;
          lab16: {
            if (!r_mark_DUr())
            {
              break lab16;
            }
            break lab15;
          }
          cursor = limit - v_5;
          lab17: {
            if (!r_mark_yDU())
            {
              break lab17;
            }
            break lab15;
          }
          cursor = limit - v_5;
          lab18: {
            if (!r_mark_ysA())
            {
              break lab18;
            }
            break lab15;
          }
          cursor = limit - v_5;
          if (!r_mark_ymUs_())
          {
            cursor = limit - v_4;
            break lab14;
          }
        }
      }
      B_continue_stemming_noun_suffixes = false;
      break lab0;
    }
    cursor = limit - v_1;
    lab19: {
      if (!r_mark_nUz())
      {
        break lab19;
      }
      lab20: {
        int v_6 = limit - cursor;
        lab21: {
          if (!r_mark_yDU())
          {
            break lab21;
          }
          break lab20;
        }
        cursor = limit - v_6;
        if (!r_mark_ysA())
        {
          break lab19;
        }
      }
      break lab0;
    }
    cursor = limit - v_1;
    lab22: {
      lab23: {
        int v_7 = limit - cursor;
        lab24: {
          if (!r_mark_sUnUz())
          {
            break lab24;
          }
          break lab23;
        }
        cursor = limit - v_7;
        lab25: {
          if (!r_mark_yUz())
          {
            break lab25;
          }
          break lab23;
        }
        cursor = limit - v_7;
        lab26: {
          if (!r_mark_sUn())
          {
            break lab26;
          }
          break lab23;
        }
        cursor = limit - v_7;
        if (!r_mark_yUm())
        {
          break lab22;
        }
      }
      bra = cursor;
      slice_del();
      int v_8 = limit - cursor;
      lab27: {
        ket = cursor;
        if (!r_mark_ymUs_())
        {
          cursor = limit - v_8;
          break lab27;
        }
      }
      break lab0;
    }
    cursor = limit - v_1;
    if (!r_mark_DUr())
    {
      return false;
    }
    bra = cursor;
    slice_del();
    int v_9 = limit - cursor;
    lab28: {
      ket = cursor;
      lab29: {
        int v_10 = limit - cursor;
        lab30: {
          if (!r_mark_sUnUz())
          {
            break lab30;
          }
          break lab29;
        }
        cursor = limit - v_10;
        lab31: {
          if (!r_mark_lAr())
          {
            break lab31;
          }
          break lab29;
        }
        cursor = limit - v_10;
        lab32: {
          if (!r_mark_yUm())
          {
            break lab32;
          }
          break lab29;
        }
        cursor = limit - v_10;
        lab33: {
          if (!r_mark_sUn())
          {
            break lab33;
          }
          break lab29;
        }
        cursor = limit - v_10;
        lab34: {
          if (!r_mark_yUz())
          {
            break lab34;
          }
          break lab29;
        }
        cursor = limit - v_10;
      }
      if (!r_mark_ymUs_())
      {
        cursor = limit - v_9;
        break lab28;
      }
    }
  }
  bra = cursor;
  slice_del();
  return true;
}

