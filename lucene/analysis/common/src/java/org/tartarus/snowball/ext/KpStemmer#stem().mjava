public boolean stem() {
  B_Y_found = false;
  B_stemmed = false;
  int v_1 = cursor;
  lab0: {
    bra = cursor;
    if (!(eq_s("y")))
    {
      break lab0;
    }
    ket = cursor;
    slice_from("Y");
    B_Y_found = true;
  }
  cursor = v_1;
  int v_2 = cursor;
  lab1: {
    while(true)
    {
      int v_3 = cursor;
      lab2: {
        golab3: while(true)
        {
          int v_4 = cursor;
          lab4: {
            if (!(in_grouping(g_v, 97, 121)))
            {
              break lab4;
            }
            bra = cursor;
            if (!(eq_s("y")))
            {
              break lab4;
            }
            ket = cursor;
            cursor = v_4;
            break golab3;
          }
          cursor = v_4;
          if (cursor >= limit)
          {
            break lab2;
          }
          cursor++;
        }
        slice_from("Y");
        B_Y_found = true;
        continue;
      }
      cursor = v_3;
      break;
    }
  }
  cursor = v_2;
  if (!r_measure())
  {
    return false;
  }
  limit_backward = cursor;
  cursor = limit;
  int v_5 = limit - cursor;
  lab5: {
    if (!r_Step_1())
    {
      break lab5;
    }
    B_stemmed = true;
  }
  cursor = limit - v_5;
  int v_6 = limit - cursor;
  lab6: {
    if (!r_Step_2())
    {
      break lab6;
    }
    B_stemmed = true;
  }
  cursor = limit - v_6;
  int v_7 = limit - cursor;
  lab7: {
    if (!r_Step_3())
    {
      break lab7;
    }
    B_stemmed = true;
  }
  cursor = limit - v_7;
  int v_8 = limit - cursor;
  lab8: {
    if (!r_Step_4())
    {
      break lab8;
    }
    B_stemmed = true;
  }
  cursor = limit - v_8;
  cursor = limit_backward;
  B_GE_removed = false;
  int v_9 = cursor;
  lab9: {
    int v_10 = cursor;
    if (!r_Lose_prefix())
    {
      break lab9;
    }
    cursor = v_10;
    if (!r_measure())
    {
      break lab9;
    }
  }
  cursor = v_9;
  limit_backward = cursor;
  cursor = limit;
  int v_11 = limit - cursor;
  lab10: {
    if (!(B_GE_removed))
    {
      break lab10;
    }
    if (!r_Step_1c())
    {
      break lab10;
    }
  }
  cursor = limit - v_11;
  cursor = limit_backward;
  B_GE_removed = false;
  int v_12 = cursor;
  lab11: {
    int v_13 = cursor;
    if (!r_Lose_infix())
    {
      break lab11;
    }
    cursor = v_13;
    if (!r_measure())
    {
      break lab11;
    }
  }
  cursor = v_12;
  limit_backward = cursor;
  cursor = limit;
  int v_14 = limit - cursor;
  lab12: {
    if (!(B_GE_removed))
    {
      break lab12;
    }
    if (!r_Step_1c())
    {
      break lab12;
    }
  }
  cursor = limit - v_14;
  cursor = limit_backward;
  limit_backward = cursor;
  cursor = limit;
  int v_15 = limit - cursor;
  lab13: {
    if (!r_Step_7())
    {
      break lab13;
    }
    B_stemmed = true;
  }
  cursor = limit - v_15;
  int v_16 = limit - cursor;
  lab14: {
    lab15: {
      lab16: {
        if (!(B_stemmed))
        {
          break lab16;
        }
        break lab15;
      }
      if (!(B_GE_removed))
      {
        break lab14;
      }
    }
    if (!r_Step_6())
    {
      break lab14;
    }
  }
  cursor = limit - v_16;
  cursor = limit_backward;
  int v_18 = cursor;
  lab17: {
    if (!(B_Y_found))
    {
      break lab17;
    }
    while(true)
    {
      int v_19 = cursor;
      lab18: {
        golab19: while(true)
        {
          int v_20 = cursor;
          lab20: {
            bra = cursor;
            if (!(eq_s("Y")))
            {
              break lab20;
            }
            ket = cursor;
            cursor = v_20;
            break golab19;
          }
          cursor = v_20;
          if (cursor >= limit)
          {
            break lab18;
          }
          cursor++;
        }
        slice_from("y");
        continue;
      }
      cursor = v_19;
      break;
    }
  }
  cursor = v_18;
  return true;
}

