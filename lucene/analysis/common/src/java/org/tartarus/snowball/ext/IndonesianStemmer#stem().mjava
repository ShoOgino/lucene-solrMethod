public boolean stem() {
  I_measure = 0;
  int v_1 = cursor;
  lab0: {
    while(true)
    {
      int v_2 = cursor;
      lab1: {
        golab2: while(true)
        {
          lab3: {
            if (!(in_grouping(g_vowel, 97, 117)))
            {
              break lab3;
            }
            break golab2;
          }
          if (cursor >= limit)
          {
            break lab1;
          }
          cursor++;
        }
        I_measure += 1;
        continue;
      }
      cursor = v_2;
      break;
    }
  }
  cursor = v_1;
  if (!(I_measure > 2))
  {
    return false;
  }
  I_prefix = 0;
  limit_backward = cursor;
  cursor = limit;
  int v_4 = limit - cursor;
  r_remove_particle();
  cursor = limit - v_4;
  if (!(I_measure > 2))
  {
    return false;
  }
  int v_5 = limit - cursor;
  r_remove_possessive_pronoun();
  cursor = limit - v_5;
  cursor = limit_backward;
  if (!(I_measure > 2))
  {
    return false;
  }
  lab4: {
    int v_6 = cursor;
    lab5: {
      int v_7 = cursor;
      if (!r_remove_first_order_prefix())
      {
        break lab5;
      }
      int v_8 = cursor;
      lab6: {
        int v_9 = cursor;
        if (!(I_measure > 2))
        {
          break lab6;
        }
        limit_backward = cursor;
        cursor = limit;
        if (!r_remove_suffix())
        {
          break lab6;
        }
        cursor = limit_backward;
        cursor = v_9;
        if (!(I_measure > 2))
        {
          break lab6;
        }
        if (!r_remove_second_order_prefix())
        {
          break lab6;
        }
      }
      cursor = v_8;
      cursor = v_7;
      break lab4;
    }
    cursor = v_6;
    int v_10 = cursor;
    r_remove_second_order_prefix();
    cursor = v_10;
    int v_11 = cursor;
    lab7: {
      if (!(I_measure > 2))
      {
        break lab7;
      }
      limit_backward = cursor;
      cursor = limit;
      if (!r_remove_suffix())
      {
        break lab7;
      }
      cursor = limit_backward;
    }
    cursor = v_11;
  }
  return true;
}

