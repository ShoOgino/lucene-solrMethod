                public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
                    // (, line 190
                    // do, line 191
                    v_1 = cursor;
                    lab0: do {
                        // call mark_regions, line 191
                        if (!r_mark_regions())
                        {
                            break lab0;
                        }
                    } while (false);
                    cursor = v_1;
                    // backwards, line 192
                    limit_backward = cursor; cursor = limit;
                    // (, line 192
                    // do, line 193
                    v_2 = limit - cursor;
                    lab1: do {
                        // call attached_pronoun, line 193
                        if (!r_attached_pronoun())
                        {
                            break lab1;
                        }
                    } while (false);
                    cursor = limit - v_2;
                    // do, line 194
                    v_3 = limit - cursor;
                    lab2: do {
                        // (, line 194
                        // or, line 194
                        lab3: do {
                            v_4 = limit - cursor;
                            lab4: do {
                                // call standard_suffix, line 194
                                if (!r_standard_suffix())
                                {
                                    break lab4;
                                }
                                break lab3;
                            } while (false);
                            cursor = limit - v_4;
                            // call verb_suffix, line 195
                            if (!r_verb_suffix())
                            {
                                break lab2;
                            }
                        } while (false);
                    } while (false);
                    cursor = limit - v_3;
                    // do, line 197
                    v_5 = limit - cursor;
                    lab5: do {
                        // call residual_suffix, line 197
                        if (!r_residual_suffix())
                        {
                            break lab5;
                        }
                    } while (false);
                    cursor = limit - v_5;
                    cursor = limit_backward;                    // do, line 199
                    v_6 = cursor;
                    lab6: do {
                        // call cleaning, line 199
                        if (!r_cleaning())
                        {
                            break lab6;
                        }
                    } while (false);
                    cursor = v_6;
                    return true;
                }

