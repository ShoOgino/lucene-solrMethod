public boolean stem() {
  limit_backward = cursor;
  cursor = limit;
  int v_1 = limit - cursor;
  r_tolower();
  cursor = limit - v_1;
  if (!r_has_min_length())
  {
    return false;
  }
  B_test1 = true;
  int v_2 = limit - cursor;
  r_step1();
  cursor = limit - v_2;
  int v_3 = limit - cursor;
  r_steps1();
  cursor = limit - v_3;
  int v_4 = limit - cursor;
  r_steps2();
  cursor = limit - v_4;
  int v_5 = limit - cursor;
  r_steps3();
  cursor = limit - v_5;
  int v_6 = limit - cursor;
  r_steps4();
  cursor = limit - v_6;
  int v_7 = limit - cursor;
  r_steps5();
  cursor = limit - v_7;
  int v_8 = limit - cursor;
  r_steps6();
  cursor = limit - v_8;
  int v_9 = limit - cursor;
  r_steps7();
  cursor = limit - v_9;
  int v_10 = limit - cursor;
  r_steps8();
  cursor = limit - v_10;
  int v_11 = limit - cursor;
  r_steps9();
  cursor = limit - v_11;
  int v_12 = limit - cursor;
  r_steps10();
  cursor = limit - v_12;
  int v_13 = limit - cursor;
  r_step2a();
  cursor = limit - v_13;
  int v_14 = limit - cursor;
  r_step2b();
  cursor = limit - v_14;
  int v_15 = limit - cursor;
  r_step2c();
  cursor = limit - v_15;
  int v_16 = limit - cursor;
  r_step2d();
  cursor = limit - v_16;
  int v_17 = limit - cursor;
  r_step3();
  cursor = limit - v_17;
  int v_18 = limit - cursor;
  r_step4();
  cursor = limit - v_18;
  int v_19 = limit - cursor;
  r_step5a();
  cursor = limit - v_19;
  int v_20 = limit - cursor;
  r_step5b();
  cursor = limit - v_20;
  int v_21 = limit - cursor;
  r_step5c();
  cursor = limit - v_21;
  int v_22 = limit - cursor;
  r_step5d();
  cursor = limit - v_22;
  int v_23 = limit - cursor;
  r_step5e();
  cursor = limit - v_23;
  int v_24 = limit - cursor;
  r_step5f();
  cursor = limit - v_24;
  int v_25 = limit - cursor;
  r_step5g();
  cursor = limit - v_25;
  int v_26 = limit - cursor;
  r_step5h();
  cursor = limit - v_26;
  int v_27 = limit - cursor;
  r_step5j();
  cursor = limit - v_27;
  int v_28 = limit - cursor;
  r_step5i();
  cursor = limit - v_28;
  int v_29 = limit - cursor;
  r_step5k();
  cursor = limit - v_29;
  int v_30 = limit - cursor;
  r_step5l();
  cursor = limit - v_30;
  int v_31 = limit - cursor;
  r_step5m();
  cursor = limit - v_31;
  int v_32 = limit - cursor;
  r_step6();
  cursor = limit - v_32;
  int v_33 = limit - cursor;
  r_step7();
  cursor = limit - v_33;
  cursor = limit_backward;
  return true;
}

