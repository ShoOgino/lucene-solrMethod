                private boolean r_verb_suffix() {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
                    // setlimit, line 174
                    v_1 = limit - cursor;
                    // tomark, line 174
                    if (cursor < I_pV)
                    {
                        return false;
                    }
                    cursor = I_pV;
                    v_2 = limit_backward;
                    limit_backward = cursor;
                    cursor = limit - v_1;
                    // (, line 174
                    // [, line 175
                    ket = cursor;
                    // substring, line 175
                    among_var = find_among_b(a_6, 38);
                    if (among_var == 0)
                    {
                        limit_backward = v_2;
                        return false;
                    }
                    // ], line 175
                    bra = cursor;
                    switch(among_var) {
                        case 0:
                            limit_backward = v_2;
                            return false;
                        case 1:
                            // (, line 177
                            // call R2, line 177
                            if (!r_R2())
                            {
                                limit_backward = v_2;
                                return false;
                            }
                            // delete, line 177
                            slice_del();
                            break;
                        case 2:
                            // (, line 185
                            // delete, line 185
                            slice_del();
                            break;
                        case 3:
                            // (, line 190
                            // delete, line 190
                            slice_del();
                            // try, line 191
                            v_3 = limit - cursor;
                            lab0: do {
                                // (, line 191
                                // [, line 191
                                ket = cursor;
                                // literal, line 191
                                if (!(eq_s_b(1, "e")))
                                {
                                    cursor = limit - v_3;
                                    break lab0;
                                }
                                // ], line 191
                                bra = cursor;
                                // delete, line 191
                                slice_del();
                            } while (false);
                            break;
                    }
                    limit_backward = v_2;
                    return true;
                }

