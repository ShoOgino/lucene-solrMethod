private boolean r_standard_suffix() {
  int among_var;
  ket = cursor;
  among_var = find_among_b(a_4);
  if (among_var == 0)
  {
    return false;
  }
  bra = cursor;
  switch (among_var) {
    case 1:
      if (!r_R2())
      {
        return false;
      }
      slice_del();
      break;
    case 2:
      if (!r_R2())
      {
        return false;
      }
      slice_del();
      int v_1 = limit - cursor;
      lab0: {
        ket = cursor;
        if (!(eq_s_b("ic")))
        {
          cursor = limit - v_1;
          break lab0;
        }
        bra = cursor;
        lab1: {
          int v_2 = limit - cursor;
          lab2: {
            if (!r_R2())
            {
              break lab2;
            }
            slice_del();
            break lab1;
          }
          cursor = limit - v_2;
          slice_from("iqU");
        }
      }
      break;
    case 3:
      if (!r_R2())
      {
        return false;
      }
      slice_from("log");
      break;
    case 4:
      if (!r_R2())
      {
        return false;
      }
      slice_from("u");
      break;
    case 5:
      if (!r_R2())
      {
        return false;
      }
      slice_from("ent");
      break;
    case 6:
      if (!r_RV())
      {
        return false;
      }
      slice_del();
      int v_3 = limit - cursor;
      lab3: {
        ket = cursor;
        among_var = find_among_b(a_2);
        if (among_var == 0)
        {
          cursor = limit - v_3;
          break lab3;
        }
        bra = cursor;
        switch (among_var) {
          case 1:
            if (!r_R2())
            {
              cursor = limit - v_3;
              break lab3;
            }
            slice_del();
            ket = cursor;
            if (!(eq_s_b("at")))
            {
              cursor = limit - v_3;
              break lab3;
            }
            bra = cursor;
            if (!r_R2())
            {
              cursor = limit - v_3;
              break lab3;
            }
            slice_del();
            break;
          case 2:
            lab4: {
              int v_4 = limit - cursor;
              lab5: {
                if (!r_R2())
                {
                  break lab5;
                }
                slice_del();
                break lab4;
              }
              cursor = limit - v_4;
              if (!r_R1())
              {
                cursor = limit - v_3;
                break lab3;
              }
              slice_from("eux");
            }
            break;
          case 3:
            if (!r_R2())
            {
              cursor = limit - v_3;
              break lab3;
            }
            slice_del();
            break;
          case 4:
            if (!r_RV())
            {
              cursor = limit - v_3;
              break lab3;
            }
            slice_from("i");
            break;
        }
      }
      break;
    case 7:
      if (!r_R2())
      {
        return false;
      }
      slice_del();
      int v_5 = limit - cursor;
      lab6: {
        ket = cursor;
        among_var = find_among_b(a_3);
        if (among_var == 0)
        {
          cursor = limit - v_5;
          break lab6;
        }
        bra = cursor;
        switch (among_var) {
          case 1:
            lab7: {
              int v_6 = limit - cursor;
              lab8: {
                if (!r_R2())
                {
                  break lab8;
                }
                slice_del();
                break lab7;
              }
              cursor = limit - v_6;
              slice_from("abl");
            }
            break;
          case 2:
            lab9: {
              int v_7 = limit - cursor;
              lab10: {
                if (!r_R2())
                {
                  break lab10;
                }
                slice_del();
                break lab9;
              }
              cursor = limit - v_7;
              slice_from("iqU");
            }
            break;
          case 3:
            if (!r_R2())
            {
              cursor = limit - v_5;
              break lab6;
            }
            slice_del();
            break;
        }
      }
      break;
    case 8:
      if (!r_R2())
      {
        return false;
      }
      slice_del();
      int v_8 = limit - cursor;
      lab11: {
        ket = cursor;
        if (!(eq_s_b("at")))
        {
          cursor = limit - v_8;
          break lab11;
        }
        bra = cursor;
        if (!r_R2())
        {
          cursor = limit - v_8;
          break lab11;
        }
        slice_del();
        ket = cursor;
        if (!(eq_s_b("ic")))
        {
          cursor = limit - v_8;
          break lab11;
        }
        bra = cursor;
        lab12: {
          int v_9 = limit - cursor;
          lab13: {
            if (!r_R2())
            {
              break lab13;
            }
            slice_del();
            break lab12;
          }
          cursor = limit - v_9;
          slice_from("iqU");
        }
      }
      break;
    case 9:
      slice_from("eau");
      break;
    case 10:
      if (!r_R1())
      {
        return false;
      }
      slice_from("al");
      break;
    case 11:
      lab14: {
        int v_10 = limit - cursor;
        lab15: {
          if (!r_R2())
          {
            break lab15;
          }
          slice_del();
          break lab14;
        }
        cursor = limit - v_10;
        if (!r_R1())
        {
          return false;
        }
        slice_from("eux");
      }
      break;
    case 12:
      if (!r_R1())
      {
        return false;
      }
      if (!(out_grouping_b(g_v, 97, 251)))
      {
        return false;
      }
      slice_del();
      break;
    case 13:
      if (!r_RV())
      {
        return false;
      }
      slice_from("ant");
      return false;
    case 14:
      if (!r_RV())
      {
        return false;
      }
      slice_from("ent");
      return false;
    case 15:
      int v_11 = limit - cursor;
      if (!(in_grouping_b(g_v, 97, 251)))
      {
        return false;
      }
      if (!r_RV())
      {
        return false;
      }
      cursor = limit - v_11;
      slice_del();
      return false;
  }
  return true;
}

