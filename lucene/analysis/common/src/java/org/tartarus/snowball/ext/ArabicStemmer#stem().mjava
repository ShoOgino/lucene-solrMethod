public boolean stem() {
  B_is_noun = true;
  B_is_verb = true;
  B_is_defined = false;
  int v_1 = cursor;
  r_Checks1();
  cursor = v_1;
  r_Normalize_pre();
  limit_backward = cursor;
  cursor = limit;
  int v_3 = limit - cursor;
  lab0: {
    lab1: {
      int v_4 = limit - cursor;
      lab2: {
        if (!(B_is_verb))
        {
          break lab2;
        }
        lab3: {
          int v_5 = limit - cursor;
          lab4: {
            {
              int v_6 = 1;
              while(true)
              {
                int v_7 = limit - cursor;
                lab5: {
                  if (!r_Suffix_Verb_Step1())
                  {
                    break lab5;
                  }
                  v_6--;
                  continue;
                }
                cursor = limit - v_7;
                break;
              }
              if (v_6 > 0)
              {
                break lab4;
              }
            }
            lab6: {
              int v_8 = limit - cursor;
              lab7: {
                if (!r_Suffix_Verb_Step2a())
                {
                  break lab7;
                }
                break lab6;
              }
              cursor = limit - v_8;
              lab8: {
                if (!r_Suffix_Verb_Step2c())
                {
                  break lab8;
                }
                break lab6;
              }
              cursor = limit - v_8;
              if (cursor <= limit_backward)
              {
                break lab4;
              }
              cursor--;
            }
            break lab3;
          }
          cursor = limit - v_5;
          lab9: {
            if (!r_Suffix_Verb_Step2b())
            {
              break lab9;
            }
            break lab3;
          }
          cursor = limit - v_5;
          if (!r_Suffix_Verb_Step2a())
          {
            break lab2;
          }
        }
        break lab1;
      }
      cursor = limit - v_4;
      lab10: {
        if (!(B_is_noun))
        {
          break lab10;
        }
        int v_9 = limit - cursor;
        lab11: {
          lab12: {
            int v_10 = limit - cursor;
            lab13: {
              if (!r_Suffix_Noun_Step2c2())
              {
                break lab13;
              }
              break lab12;
            }
            cursor = limit - v_10;
            lab14: {
              lab15: {
                if (!(B_is_defined))
                {
                  break lab15;
                }
                break lab14;
              }
              if (!r_Suffix_Noun_Step1a())
              {
                break lab14;
              }
              lab16: {
                int v_12 = limit - cursor;
                lab17: {
                  if (!r_Suffix_Noun_Step2a())
                  {
                    break lab17;
                  }
                  break lab16;
                }
                cursor = limit - v_12;
                lab18: {
                  if (!r_Suffix_Noun_Step2b())
                  {
                    break lab18;
                  }
                  break lab16;
                }
                cursor = limit - v_12;
                lab19: {
                  if (!r_Suffix_Noun_Step2c1())
                  {
                    break lab19;
                  }
                  break lab16;
                }
                cursor = limit - v_12;
                if (cursor <= limit_backward)
                {
                  break lab14;
                }
                cursor--;
              }
              break lab12;
            }
            cursor = limit - v_10;
            lab20: {
              if (!r_Suffix_Noun_Step1b())
              {
                break lab20;
              }
              lab21: {
                int v_13 = limit - cursor;
                lab22: {
                  if (!r_Suffix_Noun_Step2a())
                  {
                    break lab22;
                  }
                  break lab21;
                }
                cursor = limit - v_13;
                lab23: {
                  if (!r_Suffix_Noun_Step2b())
                  {
                    break lab23;
                  }
                  break lab21;
                }
                cursor = limit - v_13;
                if (!r_Suffix_Noun_Step2c1())
                {
                  break lab20;
                }
              }
              break lab12;
            }
            cursor = limit - v_10;
            lab24: {
              lab25: {
                if (!(B_is_defined))
                {
                  break lab25;
                }
                break lab24;
              }
              if (!r_Suffix_Noun_Step2a())
              {
                break lab24;
              }
              break lab12;
            }
            cursor = limit - v_10;
            if (!r_Suffix_Noun_Step2b())
            {
              cursor = limit - v_9;
              break lab11;
            }
          }
        }
        if (!r_Suffix_Noun_Step3())
        {
          break lab10;
        }
        break lab1;
      }
      cursor = limit - v_4;
      if (!r_Suffix_All_alef_maqsura())
      {
        break lab0;
      }
    }
  }
  cursor = limit - v_3;
  cursor = limit_backward;
  int v_15 = cursor;
  lab26: {
    int v_16 = cursor;
    lab27: {
      if (!r_Prefix_Step1())
      {
        cursor = v_16;
        break lab27;
      }
    }
    int v_17 = cursor;
    lab28: {
      if (!r_Prefix_Step2())
      {
        cursor = v_17;
        break lab28;
      }
    }
    lab29: {
      int v_18 = cursor;
      lab30: {
        if (!r_Prefix_Step3a_Noun())
        {
          break lab30;
        }
        break lab29;
      }
      cursor = v_18;
      lab31: {
        if (!(B_is_noun))
        {
          break lab31;
        }
        if (!r_Prefix_Step3b_Noun())
        {
          break lab31;
        }
        break lab29;
      }
      cursor = v_18;
      if (!(B_is_verb))
      {
        break lab26;
      }
      int v_19 = cursor;
      lab32: {
        if (!r_Prefix_Step3_Verb())
        {
          cursor = v_19;
          break lab32;
        }
      }
      if (!r_Prefix_Step4_Verb())
      {
        break lab26;
      }
    }
  }
  cursor = v_15;
  r_Normalize_post();
  return true;
}

