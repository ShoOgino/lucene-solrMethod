        private boolean r_Step_2() {
            int among_var;
            int v_1;
            // (, line 70
            // [, line 71
            ket = cursor;
            // among, line 71
            among_var = find_among_b(a_1, 11);
            if (among_var == 0)
            {
                return false;
            }
            // (, line 71
            // ], line 71
            bra = cursor;
            switch(among_var) {
                case 0:
                    return false;
                case 1:
                    // (, line 72
                    // or, line 72
                    lab0: do {
                        v_1 = limit - cursor;
                        lab1: do {
                            // (, line 72
                            // literal, line 72
                            if (!(eq_s_b(2, "'t")))
                            {
                                break lab1;
                            }
                            // ], line 72
                            bra = cursor;
                            // delete, line 72
                            slice_del();
                            break lab0;
                        } while (false);
                        cursor = limit - v_1;
                        lab2: do {
                            // (, line 73
                            // literal, line 73
                            if (!(eq_s_b(2, "et")))
                            {
                                break lab2;
                            }
                            // ], line 73
                            bra = cursor;
                            // call R1, line 73
                            if (!r_R1())
                            {
                                break lab2;
                            }
                            // call C, line 73
                            if (!r_C())
                            {
                                break lab2;
                            }
                            // delete, line 73
                            slice_del();
                            break lab0;
                        } while (false);
                        cursor = limit - v_1;
                        lab3: do {
                            // (, line 74
                            // literal, line 74
                            if (!(eq_s_b(3, "rnt")))
                            {
                                break lab3;
                            }
                            // ], line 74
                            bra = cursor;
                            // <-, line 74
                            slice_from("rn");
                            break lab0;
                        } while (false);
                        cursor = limit - v_1;
                        lab4: do {
                            // (, line 75
                            // literal, line 75
                            if (!(eq_s_b(1, "t")))
                            {
                                break lab4;
                            }
                            // ], line 75
                            bra = cursor;
                            // call R1, line 75
                            if (!r_R1())
                            {
                                break lab4;
                            }
                            // call VX, line 75
                            if (!r_VX())
                            {
                                break lab4;
                            }
                            // delete, line 75
                            slice_del();
                            break lab0;
                        } while (false);
                        cursor = limit - v_1;
                        lab5: do {
                            // (, line 76
                            // literal, line 76
                            if (!(eq_s_b(3, "ink")))
                            {
                                break lab5;
                            }
                            // ], line 76
                            bra = cursor;
                            // <-, line 76
                            slice_from("ing");
                            break lab0;
                        } while (false);
                        cursor = limit - v_1;
                        lab6: do {
                            // (, line 77
                            // literal, line 77
                            if (!(eq_s_b(2, "mp")))
                            {
                                break lab6;
                            }
                            // ], line 77
                            bra = cursor;
                            // <-, line 77
                            slice_from("m");
                            break lab0;
                        } while (false);
                        cursor = limit - v_1;
                        lab7: do {
                            // (, line 78
                            // literal, line 78
                            if (!(eq_s_b(1, "'")))
                            {
                                break lab7;
                            }
                            // ], line 78
                            bra = cursor;
                            // call R1, line 78
                            if (!r_R1())
                            {
                                break lab7;
                            }
                            // delete, line 78
                            slice_del();
                            break lab0;
                        } while (false);
                        cursor = limit - v_1;
                        // (, line 79
                        // ], line 79
                        bra = cursor;
                        // call R1, line 79
                        if (!r_R1())
                        {
                            return false;
                        }
                        // call C, line 79
                        if (!r_C())
                        {
                            return false;
                        }
                        // delete, line 79
                        slice_del();
                    } while (false);
                    break;
                case 2:
                    // (, line 80
                    // call R1, line 80
                    if (!r_R1())
                    {
                        return false;
                    }
                    // <-, line 80
                    slice_from("g");
                    break;
                case 3:
                    // (, line 81
                    // call R1, line 81
                    if (!r_R1())
                    {
                        return false;
                    }
                    // <-, line 81
                    slice_from("lijk");
                    break;
                case 4:
                    // (, line 82
                    // call R1, line 82
                    if (!r_R1())
                    {
                        return false;
                    }
                    // <-, line 82
                    slice_from("isch");
                    break;
                case 5:
                    // (, line 83
                    // call R1, line 83
                    if (!r_R1())
                    {
                        return false;
                    }
                    // call C, line 83
                    if (!r_C())
                    {
                        return false;
                    }
                    // delete, line 83
                    slice_del();
                    break;
                case 6:
                    // (, line 84
                    // call R1, line 84
                    if (!r_R1())
                    {
                        return false;
                    }
                    // <-, line 84
                    slice_from("t");
                    break;
                case 7:
                    // (, line 85
                    // call R1, line 85
                    if (!r_R1())
                    {
                        return false;
                    }
                    // <-, line 85
                    slice_from("s");
                    break;
                case 8:
                    // (, line 86
                    // call R1, line 86
                    if (!r_R1())
                    {
                        return false;
                    }
                    // <-, line 86
                    slice_from("r");
                    break;
                case 9:
                    // (, line 87
                    // call R1, line 87
                    if (!r_R1())
                    {
                        return false;
                    }
                    // delete, line 87
                    slice_del();
                    // attach, line 87
                    insert(cursor, cursor, "l");
                    // call lengthen_V, line 87
                    if (!r_lengthen_V())
                    {
                        return false;
                    }
                    break;
                case 10:
                    // (, line 88
                    // call R1, line 88
                    if (!r_R1())
                    {
                        return false;
                    }
                    // call C, line 88
                    if (!r_C())
                    {
                        return false;
                    }
                    // delete, line 88
                    slice_del();
                    // attach, line 88
                    insert(cursor, cursor, "en");
                    // call lengthen_V, line 88
                    if (!r_lengthen_V())
                    {
                        return false;
                    }
                    break;
                case 11:
                    // (, line 89
                    // call R1, line 89
                    if (!r_R1())
                    {
                        return false;
                    }
                    // call C, line 89
                    if (!r_C())
                    {
                        return false;
                    }
                    // <-, line 89
                    slice_from("ief");
                    break;
            }
            return true;
        }

