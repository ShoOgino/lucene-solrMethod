private boolean r_Step_2() {
  int among_var;
  ket = cursor;
  among_var = find_among_b(a_1);
  if (among_var == 0)
  {
    return false;
  }
  bra = cursor;
  switch (among_var) {
    case 1:
      lab0: {
        int v_1 = limit - cursor;
        lab1: {
          if (!(eq_s_b("'t")))
          {
            break lab1;
          }
          bra = cursor;
          slice_del();
          break lab0;
        }
        cursor = limit - v_1;
        lab2: {
          if (!(eq_s_b("et")))
          {
            break lab2;
          }
          bra = cursor;
          if (!r_R1())
          {
            break lab2;
          }
          if (!r_C())
          {
            break lab2;
          }
          slice_del();
          break lab0;
        }
        cursor = limit - v_1;
        lab3: {
          if (!(eq_s_b("rnt")))
          {
            break lab3;
          }
          bra = cursor;
          slice_from("rn");
          break lab0;
        }
        cursor = limit - v_1;
        lab4: {
          if (!(eq_s_b("t")))
          {
            break lab4;
          }
          bra = cursor;
          if (!r_R1())
          {
            break lab4;
          }
          if (!r_VX())
          {
            break lab4;
          }
          slice_del();
          break lab0;
        }
        cursor = limit - v_1;
        lab5: {
          if (!(eq_s_b("ink")))
          {
            break lab5;
          }
          bra = cursor;
          slice_from("ing");
          break lab0;
        }
        cursor = limit - v_1;
        lab6: {
          if (!(eq_s_b("mp")))
          {
            break lab6;
          }
          bra = cursor;
          slice_from("m");
          break lab0;
        }
        cursor = limit - v_1;
        lab7: {
          if (!(eq_s_b("'")))
          {
            break lab7;
          }
          bra = cursor;
          if (!r_R1())
          {
            break lab7;
          }
          slice_del();
          break lab0;
        }
        cursor = limit - v_1;
        bra = cursor;
        if (!r_R1())
        {
          return false;
        }
        if (!r_C())
        {
          return false;
        }
        slice_del();
      }
      break;
    case 2:
      if (!r_R1())
      {
        return false;
      }
      slice_from("g");
      break;
    case 3:
      if (!r_R1())
      {
        return false;
      }
      slice_from("lijk");
      break;
    case 4:
      if (!r_R1())
      {
        return false;
      }
      slice_from("isch");
      break;
    case 5:
      if (!r_R1())
      {
        return false;
      }
      if (!r_C())
      {
        return false;
      }
      slice_del();
      break;
    case 6:
      if (!r_R1())
      {
        return false;
      }
      slice_from("t");
      break;
    case 7:
      if (!r_R1())
      {
        return false;
      }
      slice_from("s");
      break;
    case 8:
      if (!r_R1())
      {
        return false;
      }
      slice_from("r");
      break;
    case 9:
      if (!r_R1())
      {
        return false;
      }
      slice_del();
      insert(cursor, cursor, "l");
      if (!r_lengthen_V())
      {
        return false;
      }
      break;
    case 10:
      if (!r_R1())
      {
        return false;
      }
      if (!r_C())
      {
        return false;
      }
      slice_del();
      insert(cursor, cursor, "en");
      if (!r_lengthen_V())
      {
        return false;
      }
      break;
    case 11:
      if (!r_R1())
      {
        return false;
      }
      if (!r_C())
      {
        return false;
      }
      slice_from("ief");
      break;
  }
  return true;
}

