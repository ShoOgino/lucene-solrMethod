public boolean stem() {
  lab0: {
    int v_1 = cursor;
    lab1: {
      if (!r_exception1())
      {
        break lab1;
      }
      break lab0;
    }
    cursor = v_1;
    lab2: {
      {
        int v_2 = cursor;
        lab3: {
          {
            int c = cursor + 3;
            if (0 > c || c > limit)
            {
              break lab3;
            }
            cursor = c;
          }
          break lab2;
        }
        cursor = v_2;
      }
      break lab0;
    }
    cursor = v_1;
    r_prelude();
    r_mark_regions();
    limit_backward = cursor;
    cursor = limit;
    int v_5 = limit - cursor;
    r_Step_1a();
    cursor = limit - v_5;
    lab4: {
      int v_6 = limit - cursor;
      lab5: {
        if (!r_exception2())
        {
          break lab5;
        }
        break lab4;
      }
      cursor = limit - v_6;
      int v_7 = limit - cursor;
      r_Step_1b();
      cursor = limit - v_7;
      int v_8 = limit - cursor;
      r_Step_1c();
      cursor = limit - v_8;
      int v_9 = limit - cursor;
      r_Step_2();
      cursor = limit - v_9;
      int v_10 = limit - cursor;
      r_Step_3();
      cursor = limit - v_10;
      int v_11 = limit - cursor;
      r_Step_4();
      cursor = limit - v_11;
      int v_12 = limit - cursor;
      r_Step_5();
      cursor = limit - v_12;
    }
    cursor = limit_backward;
    int v_13 = cursor;
    r_postlude();
    cursor = v_13;
  }
  return true;
}

