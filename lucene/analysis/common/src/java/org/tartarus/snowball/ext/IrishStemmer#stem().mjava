                @Override
                public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
                    // (, line 143
                    // do, line 144
                    v_1 = cursor;
                    lab0: do {
                        // call initial_morph, line 144
                        if (!r_initial_morph())
                        {
                            break lab0;
                        }
                    } while (false);
                    cursor = v_1;
                    // do, line 145
                    v_2 = cursor;
                    lab1: do {
                        // call mark_regions, line 145
                        if (!r_mark_regions())
                        {
                            break lab1;
                        }
                    } while (false);
                    cursor = v_2;
                    // backwards, line 146
                    limit_backward = cursor; cursor = limit;
                    // (, line 146
                    // do, line 147
                    v_3 = limit - cursor;
                    lab2: do {
                        // call noun_sfx, line 147
                        if (!r_noun_sfx())
                        {
                            break lab2;
                        }
                    } while (false);
                    cursor = limit - v_3;
                    // do, line 148
                    v_4 = limit - cursor;
                    lab3: do {
                        // call deriv, line 148
                        if (!r_deriv())
                        {
                            break lab3;
                        }
                    } while (false);
                    cursor = limit - v_4;
                    // do, line 149
                    v_5 = limit - cursor;
                    lab4: do {
                        // call verb_sfx, line 149
                        if (!r_verb_sfx())
                        {
                            break lab4;
                        }
                    } while (false);
                    cursor = limit - v_5;
                    cursor = limit_backward;                    return true;
                }

