private boolean r_prelude() {
  int among_var;
  int v_1 = cursor;
  while(true)
  {
    int v_2 = cursor;
    lab0: {
      golab1: while(true)
      {
        int v_3 = cursor;
        lab2: {
          if (!(in_grouping(g_v, 97, 252)))
          {
            break lab2;
          }
          bra = cursor;
          lab3: {
            int v_4 = cursor;
            lab4: {
              if (!(eq_s("u")))
              {
                break lab4;
              }
              ket = cursor;
              if (!(in_grouping(g_v, 97, 252)))
              {
                break lab4;
              }
              slice_from("U");
              break lab3;
            }
            cursor = v_4;
            if (!(eq_s("y")))
            {
              break lab2;
            }
            ket = cursor;
            if (!(in_grouping(g_v, 97, 252)))
            {
              break lab2;
            }
            slice_from("Y");
          }
          cursor = v_3;
          break golab1;
        }
        cursor = v_3;
        if (cursor >= limit)
        {
          break lab0;
        }
        cursor++;
      }
      continue;
    }
    cursor = v_2;
    break;
  }
  cursor = v_1;
  while(true)
  {
    int v_5 = cursor;
    lab5: {
      bra = cursor;
      among_var = find_among(a_0);
      if (among_var == 0)
      {
        break lab5;
      }
      ket = cursor;
      switch (among_var) {
        case 1:
          slice_from("ss");
          break;
        case 2:
          slice_from("\u00E4");
          break;
        case 3:
          slice_from("\u00F6");
          break;
        case 4:
          slice_from("\u00FC");
          break;
        case 5:
          {
            int c = cursor + 2;
            if (0 > c || c > limit)
            {
              break lab5;
            }
            cursor = c;
          }
          break;
        case 6:
          if (cursor >= limit)
          {
            break lab5;
          }
          cursor++;
          break;
      }
      continue;
    }
    cursor = v_5;
    break;
  }
  return true;
}

