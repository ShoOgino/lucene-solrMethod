                public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
            int v_7;
            int v_8;
            int v_9;
            int v_10;
                    // (, line 199
                    // do, line 201
                    v_1 = cursor;
                    lab0: do {
                        // call mark_regions, line 201
                        if (!r_mark_regions())
                        {
                            break lab0;
                        }
                    } while (false);
                    cursor = v_1;
                    // backwards, line 202
                    limit_backward = cursor; cursor = limit;
                    // setlimit, line 202
                    v_2 = limit - cursor;
                    // tomark, line 202
                    if (cursor < I_pV)
                    {
                        return false;
                    }
                    cursor = I_pV;
                    v_3 = limit_backward;
                    limit_backward = cursor;
                    cursor = limit - v_2;
                    // (, line 202
                    // do, line 203
                    v_4 = limit - cursor;
                    lab1: do {
                        // (, line 203
                        // or, line 204
                        lab2: do {
                            v_5 = limit - cursor;
                            lab3: do {
                                // call perfective_gerund, line 204
                                if (!r_perfective_gerund())
                                {
                                    break lab3;
                                }
                                break lab2;
                            } while (false);
                            cursor = limit - v_5;
                            // (, line 205
                            // try, line 205
                            v_6 = limit - cursor;
                            lab4: do {
                                // call reflexive, line 205
                                if (!r_reflexive())
                                {
                                    cursor = limit - v_6;
                                    break lab4;
                                }
                            } while (false);
                            // or, line 206
                            lab5: do {
                                v_7 = limit - cursor;
                                lab6: do {
                                    // call adjectival, line 206
                                    if (!r_adjectival())
                                    {
                                        break lab6;
                                    }
                                    break lab5;
                                } while (false);
                                cursor = limit - v_7;
                                lab7: do {
                                    // call verb, line 206
                                    if (!r_verb())
                                    {
                                        break lab7;
                                    }
                                    break lab5;
                                } while (false);
                                cursor = limit - v_7;
                                // call noun, line 206
                                if (!r_noun())
                                {
                                    break lab1;
                                }
                            } while (false);
                        } while (false);
                    } while (false);
                    cursor = limit - v_4;
                    // try, line 209
                    v_8 = limit - cursor;
                    lab8: do {
                        // (, line 209
                        // [, line 209
                        ket = cursor;
                        // literal, line 209
                        if (!(eq_s_b(1, "\u0438")))
                        {
                            cursor = limit - v_8;
                            break lab8;
                        }
                        // ], line 209
                        bra = cursor;
                        // delete, line 209
                        slice_del();
                    } while (false);
                    // do, line 212
                    v_9 = limit - cursor;
                    lab9: do {
                        // call derivational, line 212
                        if (!r_derivational())
                        {
                            break lab9;
                        }
                    } while (false);
                    cursor = limit - v_9;
                    // do, line 213
                    v_10 = limit - cursor;
                    lab10: do {
                        // call tidy_up, line 213
                        if (!r_tidy_up())
                        {
                            break lab10;
                        }
                    } while (false);
                    cursor = limit - v_10;
                    limit_backward = v_3;
                    cursor = limit_backward;                    return true;
                }

