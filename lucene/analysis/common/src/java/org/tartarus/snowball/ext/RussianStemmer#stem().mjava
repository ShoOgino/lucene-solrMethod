public boolean stem() {
  int v_1 = cursor;
  lab0: {
    while(true)
    {
      int v_2 = cursor;
      lab1: {
        golab2: while(true)
        {
          int v_3 = cursor;
          lab3: {
            bra = cursor;
            if (!(eq_s("\u0451")))
            {
              break lab3;
            }
            ket = cursor;
            cursor = v_3;
            break golab2;
          }
          cursor = v_3;
          if (cursor >= limit)
          {
            break lab1;
          }
          cursor++;
        }
        slice_from("\u0435");
        continue;
      }
      cursor = v_2;
      break;
    }
  }
  cursor = v_1;
  r_mark_regions();
  limit_backward = cursor;
  cursor = limit;
  if (cursor < I_pV)
  {
    return false;
  }
  int v_6 = limit_backward;
  limit_backward = I_pV;
  int v_7 = limit - cursor;
  lab4: {
    lab5: {
      int v_8 = limit - cursor;
      lab6: {
        if (!r_perfective_gerund())
        {
          break lab6;
        }
        break lab5;
      }
      cursor = limit - v_8;
      int v_9 = limit - cursor;
      lab7: {
        if (!r_reflexive())
        {
          cursor = limit - v_9;
          break lab7;
        }
      }
      lab8: {
        int v_10 = limit - cursor;
        lab9: {
          if (!r_adjectival())
          {
            break lab9;
          }
          break lab8;
        }
        cursor = limit - v_10;
        lab10: {
          if (!r_verb())
          {
            break lab10;
          }
          break lab8;
        }
        cursor = limit - v_10;
        if (!r_noun())
        {
          break lab4;
        }
      }
    }
  }
  cursor = limit - v_7;
  int v_11 = limit - cursor;
  lab11: {
    ket = cursor;
    if (!(eq_s_b("\u0438")))
    {
      cursor = limit - v_11;
      break lab11;
    }
    bra = cursor;
    slice_del();
  }
  int v_12 = limit - cursor;
  r_derivational();
  cursor = limit - v_12;
  int v_13 = limit - cursor;
  r_tidy_up();
  cursor = limit - v_13;
  limit_backward = v_6;
  cursor = limit_backward;
  return true;
}

