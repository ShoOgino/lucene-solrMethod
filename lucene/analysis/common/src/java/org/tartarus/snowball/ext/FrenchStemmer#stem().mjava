public boolean stem() {
  int v_1 = cursor;
  r_prelude();
  cursor = v_1;
  r_mark_regions();
  limit_backward = cursor;
  cursor = limit;
  int v_3 = limit - cursor;
  lab0: {
    lab1: {
      int v_4 = limit - cursor;
      lab2: {
        int v_5 = limit - cursor;
        lab3: {
          int v_6 = limit - cursor;
          lab4: {
            if (!r_standard_suffix())
            {
              break lab4;
            }
            break lab3;
          }
          cursor = limit - v_6;
          lab5: {
            if (!r_i_verb_suffix())
            {
              break lab5;
            }
            break lab3;
          }
          cursor = limit - v_6;
          if (!r_verb_suffix())
          {
            break lab2;
          }
        }
        cursor = limit - v_5;
        int v_7 = limit - cursor;
        lab6: {
          ket = cursor;
          lab7: {
            int v_8 = limit - cursor;
            lab8: {
              if (!(eq_s_b("Y")))
              {
                break lab8;
              }
              bra = cursor;
              slice_from("i");
              break lab7;
            }
            cursor = limit - v_8;
            if (!(eq_s_b("\u00E7")))
            {
              cursor = limit - v_7;
              break lab6;
            }
            bra = cursor;
            slice_from("c");
          }
        }
        break lab1;
      }
      cursor = limit - v_4;
      if (!r_residual_suffix())
      {
        break lab0;
      }
    }
  }
  cursor = limit - v_3;
  int v_9 = limit - cursor;
  r_un_double();
  cursor = limit - v_9;
  int v_10 = limit - cursor;
  r_un_accent();
  cursor = limit - v_10;
  cursor = limit_backward;
  int v_11 = cursor;
  r_postlude();
  cursor = v_11;
  return true;
}

