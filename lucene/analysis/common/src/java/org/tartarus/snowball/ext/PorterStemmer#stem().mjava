public boolean stem() {
  B_Y_found = false;
  int v_1 = cursor;
  lab0: {
    bra = cursor;
    if (!(eq_s("y")))
    {
      break lab0;
    }
    ket = cursor;
    slice_from("Y");
    B_Y_found = true;
  }
  cursor = v_1;
  int v_2 = cursor;
  lab1: {
    while(true)
    {
      int v_3 = cursor;
      lab2: {
        golab3: while(true)
        {
          int v_4 = cursor;
          lab4: {
            if (!(in_grouping(g_v, 97, 121)))
            {
              break lab4;
            }
            bra = cursor;
            if (!(eq_s("y")))
            {
              break lab4;
            }
            ket = cursor;
            cursor = v_4;
            break golab3;
          }
          cursor = v_4;
          if (cursor >= limit)
          {
            break lab2;
          }
          cursor++;
        }
        slice_from("Y");
        B_Y_found = true;
        continue;
      }
      cursor = v_3;
      break;
    }
  }
  cursor = v_2;
  I_p1 = limit;
  I_p2 = limit;
  int v_5 = cursor;
  lab5: {
    golab6: while(true)
    {
      lab7: {
        if (!(in_grouping(g_v, 97, 121)))
        {
          break lab7;
        }
        break golab6;
      }
      if (cursor >= limit)
      {
        break lab5;
      }
      cursor++;
    }
    golab8: while(true)
    {
      lab9: {
        if (!(out_grouping(g_v, 97, 121)))
        {
          break lab9;
        }
        break golab8;
      }
      if (cursor >= limit)
      {
        break lab5;
      }
      cursor++;
    }
    I_p1 = cursor;
    golab10: while(true)
    {
      lab11: {
        if (!(in_grouping(g_v, 97, 121)))
        {
          break lab11;
        }
        break golab10;
      }
      if (cursor >= limit)
      {
        break lab5;
      }
      cursor++;
    }
    golab12: while(true)
    {
      lab13: {
        if (!(out_grouping(g_v, 97, 121)))
        {
          break lab13;
        }
        break golab12;
      }
      if (cursor >= limit)
      {
        break lab5;
      }
      cursor++;
    }
    I_p2 = cursor;
  }
  cursor = v_5;
  limit_backward = cursor;
  cursor = limit;
  int v_10 = limit - cursor;
  r_Step_1a();
  cursor = limit - v_10;
  int v_11 = limit - cursor;
  r_Step_1b();
  cursor = limit - v_11;
  int v_12 = limit - cursor;
  r_Step_1c();
  cursor = limit - v_12;
  int v_13 = limit - cursor;
  r_Step_2();
  cursor = limit - v_13;
  int v_14 = limit - cursor;
  r_Step_3();
  cursor = limit - v_14;
  int v_15 = limit - cursor;
  r_Step_4();
  cursor = limit - v_15;
  int v_16 = limit - cursor;
  r_Step_5a();
  cursor = limit - v_16;
  int v_17 = limit - cursor;
  r_Step_5b();
  cursor = limit - v_17;
  cursor = limit_backward;
  int v_18 = cursor;
  lab14: {
    if (!(B_Y_found))
    {
      break lab14;
    }
    while(true)
    {
      int v_19 = cursor;
      lab15: {
        golab16: while(true)
        {
          int v_20 = cursor;
          lab17: {
            bra = cursor;
            if (!(eq_s("Y")))
            {
              break lab17;
            }
            ket = cursor;
            cursor = v_20;
            break golab16;
          }
          cursor = v_20;
          if (cursor >= limit)
          {
            break lab15;
          }
          cursor++;
        }
        slice_from("y");
        continue;
      }
      cursor = v_19;
      break;
    }
  }
  cursor = v_18;
  return true;
}

