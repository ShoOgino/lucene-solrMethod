                public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
            int v_7;
            int v_8;
            int v_9;
            int v_10;
                    // (, line 201
                    // do, line 202
                    v_1 = cursor;
                    lab0: do {
                        // call prelude, line 202
                        if (!r_prelude())
                        {
                            break lab0;
                        }
                    } while (false);
                    cursor = v_1;
                    // do, line 203
                    v_2 = cursor;
                    lab1: do {
                        // call mark_regions, line 203
                        if (!r_mark_regions())
                        {
                            break lab1;
                        }
                    } while (false);
                    cursor = v_2;
                    // backwards, line 204
                    limit_backward = cursor; cursor = limit;
                    // (, line 204
                    // do, line 205
                    v_3 = limit - cursor;
                    lab2: do {
                        // (, line 205
                        // or, line 209
                        lab3: do {
                            v_4 = limit - cursor;
                            lab4: do {
                                // (, line 206
                                // and, line 207
                                v_5 = limit - cursor;
                                // (, line 206
                                // or, line 206
                                lab5: do {
                                    v_6 = limit - cursor;
                                    lab6: do {
                                        // call standard_suffix, line 206
                                        if (!r_standard_suffix())
                                        {
                                            break lab6;
                                        }
                                        break lab5;
                                    } while (false);
                                    cursor = limit - v_6;
                                    // call verb_suffix, line 206
                                    if (!r_verb_suffix())
                                    {
                                        break lab4;
                                    }
                                } while (false);
                                cursor = limit - v_5;
                                // do, line 207
                                v_7 = limit - cursor;
                                lab7: do {
                                    // (, line 207
                                    // [, line 207
                                    ket = cursor;
                                    // literal, line 207
                                    if (!(eq_s_b(1, "i")))
                                    {
                                        break lab7;
                                    }
                                    // ], line 207
                                    bra = cursor;
                                    // test, line 207
                                    v_8 = limit - cursor;
                                    // literal, line 207
                                    if (!(eq_s_b(1, "c")))
                                    {
                                        break lab7;
                                    }
                                    cursor = limit - v_8;
                                    // call RV, line 207
                                    if (!r_RV())
                                    {
                                        break lab7;
                                    }
                                    // delete, line 207
                                    slice_del();
                                } while (false);
                                cursor = limit - v_7;
                                break lab3;
                            } while (false);
                            cursor = limit - v_4;
                            // call residual_suffix, line 209
                            if (!r_residual_suffix())
                            {
                                break lab2;
                            }
                        } while (false);
                    } while (false);
                    cursor = limit - v_3;
                    // do, line 211
                    v_9 = limit - cursor;
                    lab8: do {
                        // call residual_form, line 211
                        if (!r_residual_form())
                        {
                            break lab8;
                        }
                    } while (false);
                    cursor = limit - v_9;
                    cursor = limit_backward;                    // do, line 213
                    v_10 = cursor;
                    lab9: do {
                        // call postlude, line 213
                        if (!r_postlude())
                        {
                            break lab9;
                        }
                    } while (false);
                    cursor = v_10;
                    return true;
                }

