public boolean stem() {
  int v_1 = cursor;
  r_prelude();
  cursor = v_1;
  r_mark_regions();
  limit_backward = cursor;
  cursor = limit;
  int v_3 = limit - cursor;
  lab0: {
    lab1: {
      int v_4 = limit - cursor;
      lab2: {
        int v_5 = limit - cursor;
        lab3: {
          int v_6 = limit - cursor;
          lab4: {
            if (!r_standard_suffix())
            {
              break lab4;
            }
            break lab3;
          }
          cursor = limit - v_6;
          if (!r_verb_suffix())
          {
            break lab2;
          }
        }
        cursor = limit - v_5;
        int v_7 = limit - cursor;
        lab5: {
          ket = cursor;
          if (!(eq_s_b("i")))
          {
            break lab5;
          }
          bra = cursor;
          int v_8 = limit - cursor;
          if (!(eq_s_b("c")))
          {
            break lab5;
          }
          cursor = limit - v_8;
          if (!r_RV())
          {
            break lab5;
          }
          slice_del();
        }
        cursor = limit - v_7;
        break lab1;
      }
      cursor = limit - v_4;
      if (!r_residual_suffix())
      {
        break lab0;
      }
    }
  }
  cursor = limit - v_3;
  int v_9 = limit - cursor;
  r_residual_form();
  cursor = limit - v_9;
  cursor = limit_backward;
  int v_10 = cursor;
  r_postlude();
  cursor = v_10;
  return true;
}

