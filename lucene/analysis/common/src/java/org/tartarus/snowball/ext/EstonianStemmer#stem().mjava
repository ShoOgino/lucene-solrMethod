    public boolean stem() {
        int v_1;
        int v_2;
        int v_3;
        int v_4;
        int v_5;
        int v_7;
        int v_8;
        // (, line 245
        // do, line 246
        v_1 = cursor;
        lab0: do {
            // call mark_regions, line 246
            if (!r_mark_regions())
            {
                break lab0;
            }
        } while (false);
        cursor = v_1;
        // not, line 247
        {
            v_2 = cursor;
            lab1: do {
                // call verb_exceptions, line 247
                if (!r_verb_exceptions())
                {
                    break lab1;
                }
                return false;
            } while (false);
            cursor = v_2;
        }
        // unset is_verb, line 248
        B_is_verb = false;
        // backwards, line 249
        limit_backward = cursor; cursor = limit;
        // (, line 249
        // do, line 250
        v_3 = limit - cursor;
        lab2: do {
            // call emphasis, line 250
            if (!r_emphasis())
            {
                break lab2;
            }
        } while (false);
        cursor = limit - v_3;
        // do, line 251
        v_4 = limit - cursor;
        lab3: do {
            // call verb, line 251
            if (!r_verb())
            {
                break lab3;
            }
        } while (false);
        cursor = limit - v_4;
        // try, line 252
        v_5 = limit - cursor;
        lab4: do {
            // (, line 252
            // not, line 252
            lab5: do {
                // Boolean test is_verb, line 252
                if (!(B_is_verb))
                {
                    break lab5;
                }
                cursor = limit - v_5;
                break lab4;
            } while (false);
            // do, line 252
            v_7 = limit - cursor;
            lab6: do {
                // call substantive, line 252
                if (!r_substantive())
                {
                    break lab6;
                }
            } while (false);
            cursor = limit - v_7;
        } while (false);
        // do, line 253
        v_8 = limit - cursor;
        lab7: do {
            // call remove_double_kpt, line 253
            if (!r_remove_double_kpt())
            {
                break lab7;
            }
        } while (false);
        cursor = limit - v_8;
        cursor = limit_backward;                    return true;
    }

