  public int stem(char s[], int len) {   
    // Remove posessive -s (bilens -> bilen) and continue checking 
    if (len > 4 && s[len-1] == 's')
      len--;

    // Remove common endings, single-pass
    if (len > 7 && 
        (endsWith(s, len, "heter") ||  // general ending (hemmelig-heter -> hemmelig)
         endsWith(s, len, "heten")))   // general ending (hemmelig-heten -> hemmelig)
      return len - 5;

    if (len > 5 &&
        (endsWith(s, len, "dom") || // general ending (kristen-dom -> kristen)
         endsWith(s, len, "het")))  // general ending (hemmelig-het -> hemmelig)
      return len - 3;
    
    if (len > 7 && 
        (endsWith(s, len, "elser") ||   // general ending (føl-elser -> føl)
         endsWith(s, len, "elsen")))    // general ending (føl-elsen -> føl)
      return len - 5;
    
    if (len > 6 &&
        (endsWith(s, len, "ende") ||  // (sov-ende -> sov)
         endsWith(s, len, "else") ||  // general ending (føl-else -> føl)
         endsWith(s, len, "este") ||  // adj (fin-este -> fin)
         endsWith(s, len, "eren")))   // masc
      return len - 4;
    
    if (len > 5 &&
        (endsWith(s, len, "ere") || // adj (fin-ere -> fin)
         endsWith(s, len, "est") || // adj (fin-est -> fin)
         endsWith(s, len, "ene")    // masc/fem/neutr pl definite (hus-ene)
         )) 
      return len - 3;
    
    if (len > 4 &&
        (endsWith(s, len, "er") ||  // masc/fem indefinite
         endsWith(s, len, "en") ||  // masc/fem definite
         endsWith(s, len, "et") ||  // neutr definite
         endsWith(s, len, "st") ||  // adj (billig-st -> billig)
         endsWith(s, len, "te")))
      return len - 2;
    
    if (len > 3)
      switch(s[len-1]) {
        case 'a':     // fem definite
        case 'e':     // to get correct stem for nouns ending in -e (kake -> kak, kaker -> kak)
        case 'n': 
          return len - 1;
      }
    
    return len;
  }

