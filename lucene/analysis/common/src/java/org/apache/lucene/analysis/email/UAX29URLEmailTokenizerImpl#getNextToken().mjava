  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              return YYEOF;
            }  // fall though
            case 12893: break;
            case AVOID_BAD_URL: {
              return YYEOF;
            }  // fall though
            case 12894: break;
            default:
        return YYEOF;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* Break so we don't hit fall-through warning: */ break; /* Not numeric, word, ideographic, hiragana, emoji or SE Asian -- ignore it. */
            } 
            // fall through
          case 16: break;
          case 2: 
            { yybegin(YYINITIAL); return EMOJI_TYPE;
            } 
            // fall through
          case 17: break;
          case 3: 
            { yybegin(YYINITIAL); return WORD_TYPE;
            } 
            // fall through
          case 18: break;
          case 4: 
            { yybegin(YYINITIAL); return HANGUL_TYPE;
            } 
            // fall through
          case 19: break;
          case 5: 
            { yybegin(YYINITIAL); return NUMERIC_TYPE;
            } 
            // fall through
          case 20: break;
          case 6: 
            { yybegin(YYINITIAL); return KATAKANA_TYPE;
            } 
            // fall through
          case 21: break;
          case 7: 
            { yybegin(YYINITIAL); return IDEOGRAPHIC_TYPE;
            } 
            // fall through
          case 22: break;
          case 8: 
            { yybegin(YYINITIAL); return HIRAGANA_TYPE;
            } 
            // fall through
          case 23: break;
          case 9: 
            { yybegin(YYINITIAL); return SOUTH_EAST_ASIAN_TYPE;
            } 
            // fall through
          case 24: break;
          case 10: 
            { yybegin(YYINITIAL); return EMAIL_TYPE;
            } 
            // fall through
          case 25: break;
          case 11: 
            { return URL_TYPE;
            } 
            // fall through
          case 26: break;
          case 12: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return URL_TYPE;
            } 
            // fall through
          case 27: break;
          case 13: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { yybegin(AVOID_BAD_URL); yypushback(yylength());
            } 
            // fall through
          case 28: break;
          case 14: 
            { yybegin(YYINITIAL); return URL_TYPE;
            } 
            // fall through
          case 29: break;
          case 15: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 6);
            { yybegin(YYINITIAL); return WORD_TYPE;
            } 
            // fall through
          case 30: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

