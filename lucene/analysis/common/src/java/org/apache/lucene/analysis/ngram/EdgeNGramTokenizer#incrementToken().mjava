  /** Returns the next token in the stream, or null at EOS. */
  @Override
  public boolean incrementToken() throws IOException {
    clearAttributes();
    // if we are just starting, read the whole input
    if (!started) {
      started = true;
      gramSize = minGram;
      char[] chars = new char[Math.min(1024, maxGram)];
      charsRead = 0;
      // TODO: refactor to a shared readFully somewhere:
      boolean exhausted = false;
      while (charsRead < maxGram) {
        final int inc = input.read(chars, charsRead, chars.length-charsRead);
        if (inc == -1) {
          exhausted = true;
          break;
        }
        charsRead += inc;
        if (charsRead == chars.length && charsRead < maxGram) {
          chars = ArrayUtil.grow(chars);
        }
      }

      inStr = new String(chars, 0, charsRead);

      if (!exhausted) {
        // Read extra throwaway chars so that on end() we
        // report the correct offset:
        char[] throwaway = new char[1024];
        while(true) {
          final int inc = input.read(throwaway, 0, throwaway.length);
          if (inc == -1) {
            break;
          }
          charsRead += inc;
        }
      }

      inLen = inStr.length();
      if (inLen == 0) {
        return false;
      }
      posIncrAtt.setPositionIncrement(1);
    } else {
      posIncrAtt.setPositionIncrement(1);
    }

    // if the remaining input is too short, we can't generate any n-grams
    if (gramSize > inLen) {
      return false;
    }

    // if we have hit the end of our n-gram size range, quit
    if (gramSize > maxGram || gramSize > inLen) {
      return false;
    }

    // grab gramSize chars from front or back
    termAtt.setEmpty().append(inStr, 0, gramSize);
    offsetAtt.setOffset(correctOffset(0), correctOffset(gramSize));
    gramSize++;
    return true;
  }

