  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {
    this.clazz = clazz;
    final ServiceLoader<S> loader = ServiceLoader.load(clazz);
    final LinkedHashMap<String,Class<? extends S>> services = new LinkedHashMap<String,Class<? extends S>>();
    for (final S service : loader) {
      final String clazzName = service.getClass().getSimpleName();
      int suffixIndex = -1;
      for (String suffix : suffixes) {
        suffixIndex = clazzName.lastIndexOf(suffix);
        if (suffixIndex != -1) {
          break;
        }
      }
      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);
      // only add the first one for each name, later services will be ignored
      // this allows to place services before others in classpath to make 
      // them used instead of others
      if (!services.containsKey(name)) {
        assert checkServiceName(name);
        @SuppressWarnings("unchecked")
        final Class<? extends S> sclazz = (Class<? extends S>) service.getClass();
        services.put(name, sclazz);
      }
    }
    this.services = Collections.unmodifiableMap(services);
  }

