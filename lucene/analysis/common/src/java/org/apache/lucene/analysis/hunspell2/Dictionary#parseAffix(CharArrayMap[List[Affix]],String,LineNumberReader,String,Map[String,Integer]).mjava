  /**
   * Parses a specific affix rule putting the result into the provided affix map
   * 
   * @param affixes Map where the result of the parsing will be put
   * @param header Header line of the affix rule
   * @param reader BufferedReader to read the content of the rule from
   * @param conditionPattern {@link String#format(String, Object...)} pattern to be used to generate the condition regex
   *                         pattern
   * @param seenPatterns map from condition -> index of patterns, for deduplication.
   * @throws IOException Can be thrown while reading the rule
   */
  private void parseAffix(CharArrayMap<List<Affix>> affixes,
                          String header,
                          LineNumberReader reader,
                          String conditionPattern,
                          Map<String,Integer> seenPatterns) throws IOException, ParseException {
    String args[] = header.split("\\s+");

    boolean crossProduct = args[2].equals("Y");
    
    int numLines = Integer.parseInt(args[3]);
    for (int i = 0; i < numLines; i++) {
      String line = reader.readLine();
      String ruleArgs[] = line.split("\\s+");

      if (ruleArgs.length < 5) {
          throw new ParseException("The affix file contains a rule with less than five elements", reader.getLineNumber());
      }

      Affix affix = new Affix();
      
      affix.setFlag(flagParsingStrategy.parseFlag(ruleArgs[1]));
      affix.setStrip(ruleArgs[2].equals("0") ? "" : ruleArgs[2]);

      String affixArg = ruleArgs[3];
      
      int flagSep = affixArg.lastIndexOf('/');
      if (flagSep != -1) {
        String flagPart = affixArg.substring(flagSep + 1);
        
        if (aliasCount > 0) {
          flagPart = getAliasValue(Integer.parseInt(flagPart));
        } 
        
        char appendFlags[] = flagParsingStrategy.parseFlags(flagPart);
        Arrays.sort(appendFlags);
        affix.setAppendFlags(appendFlags);
        affix.setAppend(affixArg.substring(0, flagSep));
      } else {
        affix.setAppend(affixArg);
      }

      String condition = ruleArgs[4];
      // at least the gascon affix file has this issue
      if (condition.startsWith("[") && !condition.endsWith("]")) {
        condition = condition + "]";
      }
      // "dash hasn't got special meaning" (we must escape it)
      if (condition.indexOf('-') >= 0) {
        condition = condition.replace("-", "\\-");
      }
      // deduplicate patterns
      String regex = String.format(Locale.ROOT, conditionPattern, condition);
      Integer patternIndex = seenPatterns.get(regex);
      if (patternIndex == null) {
        patternIndex = patterns.size();
        seenPatterns.put(regex, patternIndex);
        Pattern pattern = Pattern.compile(regex);
        patterns.add(pattern);
      }
      affix.setCondition(patterns.get(patternIndex));
      affix.setCrossProduct(crossProduct);
      
      List<Affix> list = affixes.get(affix.getAppend());
      if (list == null) {
        list = new ArrayList<Affix>();
        affixes.put(affix.getAppend(), list);
      }
      
      list.add(affix);
    }
  }

