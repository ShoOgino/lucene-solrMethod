  private boolean resetShingleRoot(Token token) throws IOException {
    this.currentShingleTokens[0] = token;
    for (int i = 1; i < shingleSize; i++) {
      Token current = nextTokenInGraph(this.currentShingleTokens[i - 1]);
      if (current == endToken) {
        if (endToken.posInc() + i >= shingleSize) {
          // end tokens are a special case, because their posIncs are always
          // due to stopwords.  Therefore, we can happily append gap tokens
          // to the end of the current shingle
          for (int j = i; j < shingleSize; j++) {
            this.currentShingleTokens[i] = gapToken;
            i++;
          }
          return true;
        }
        return false;
      }
      if (current.posInc() > 1) {
        // insert gaps into the shingle list
        for (int j = 1; j < current.posInc(); j++) {
          this.currentShingleTokens[i] = gapToken;
          i++;
          if (i >= shingleSize)
            return true;
        }
      }
      this.currentShingleTokens[i] = current;
    }
    return true;
  }

