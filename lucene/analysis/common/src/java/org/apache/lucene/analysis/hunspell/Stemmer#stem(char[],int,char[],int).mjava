  /**
   * Generates a list of stems for the provided word
   *
   * @param word Word to generate the stems for
   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step
   * @param recursionDepth Level of recursion this stemming step is at
   * @return List of stems, or empty list if no stems are found
   */
  private List<CharsRef> stem(char word[], int length, char[] flags, int recursionDepth) {
    // TODO: allow this stuff to be reused by tokenfilter
    List<CharsRef> stems = new ArrayList<CharsRef>();

    for (int i = 0; i < length; i++) {
      IntsRef suffixes = dictionary.lookupSuffix(word, i, length - i);
      if (suffixes == null) {
        continue;
      }

      for (int j = 0; j < suffixes.length; j++) {
        int suffix = suffixes.ints[suffixes.offset + j];
        affixReader.setPosition(8 * suffix);
        char flag = (char) (affixReader.readShort() & 0xffff);
        if (hasCrossCheckedFlag(flag, flags)) {
          int appendLength = length - i;
          int deAffixedLength = length - appendLength;
          // TODO: can we do this in-place?
          char stripOrd = (char) (affixReader.readShort() & 0xffff);
          dictionary.stripLookup.get(stripOrd, scratch);
          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(scratch.utf8ToString()).toString();

          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);

          stems.addAll(stemList);
        }
      }
    }

    for (int i = length - 1; i >= 0; i--) {
      IntsRef prefixes = dictionary.lookupPrefix(word, 0, i);
      if (prefixes == null) {
        continue;
      }

      for (int j = 0; j < prefixes.length; j++) {
        int prefix = prefixes.ints[prefixes.offset + j];
        affixReader.setPosition(8 * prefix);
        char flag = (char) (affixReader.readShort() & 0xffff);
        if (hasCrossCheckedFlag(flag, flags)) {
          int deAffixedStart = i;
          int deAffixedLength = length - deAffixedStart;
          char stripOrd = (char) (affixReader.readShort() & 0xffff);

          dictionary.stripLookup.get(stripOrd, scratch);
          String strippedWord = new StringBuilder().append(scratch.utf8ToString())
              .append(word, deAffixedStart, deAffixedLength)
              .toString();

          List<CharsRef> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);

          stems.addAll(stemList);
        }
      }
    }

    return stems;
  }

