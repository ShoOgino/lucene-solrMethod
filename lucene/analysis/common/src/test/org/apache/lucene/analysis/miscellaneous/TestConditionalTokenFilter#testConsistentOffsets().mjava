  public void testConsistentOffsets() throws IOException {

    long seed = random().nextLong();
    Analyzer analyzer = new Analyzer() {
      @Override
      protected TokenStreamComponents createComponents(String fieldName) {
        Tokenizer source = new NGramTokenizer();
        TokenStream sink = new KeywordRepeatFilter(source);
        sink = new ConditionalTokenFilter(sink, in -> new TypeTokenFilter(in, Collections.singleton("word"))) {
          Random random = new Random(seed);
          @Override
          protected boolean shouldFilter() throws IOException {
            return random.nextBoolean();
          }

          @Override
          public void reset() throws IOException {
            super.reset();
            random = new Random(seed);
          }
        };
        sink = new ValidatingTokenFilter(sink, "last stage");
        return new TokenStreamComponents(source, sink);
      }
    };

    checkRandomData(random(), analyzer, 1);

  }

