  /**
   * Helper method to validate all strings that can be generated from a token stream.
   * Uses {@link TokenStreamToAutomaton} to create an automaton. Asserts the finite strings of the automaton are all
   * and only the given valid strings.
   * @param analyzer analyzer containing the SynonymFilter under test.
   * @param text text to be analyzed.
   * @param expectedStrings all expected finite strings.
   */
  public void assertAllStrings(Analyzer analyzer, String text, String[] expectedStrings) throws IOException {
    TokenStream tokenStream = analyzer.tokenStream("dummy", text);
    try {
      Automaton automaton = new TokenStreamToAutomaton().toAutomaton(tokenStream);
      Set<IntsRef> finiteStrings = AutomatonTestUtil.getFiniteStringsRecursive(automaton, -1);

      assertEquals("Invalid resulting strings count. Expected " + expectedStrings.length + " was " + finiteStrings.size(),
          expectedStrings.length, finiteStrings.size());

      Set<String> expectedStringsSet = new HashSet<>(Arrays.asList(expectedStrings));

      BytesRefBuilder scratchBytesRefBuilder = new BytesRefBuilder();
      for (IntsRef ir: finiteStrings) {
        String s = Util.toBytesRef(ir, scratchBytesRefBuilder).utf8ToString().replace((char) TokenStreamToAutomaton.POS_SEP, ' ');
        assertTrue("Unexpected string found: " + s, expectedStringsSet.contains(s));
      }
    } finally {
      tokenStream.close();
    }
  }

