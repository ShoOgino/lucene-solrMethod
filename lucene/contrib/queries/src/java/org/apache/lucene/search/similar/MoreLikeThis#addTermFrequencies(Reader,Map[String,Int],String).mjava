	/**
	 * Adds term frequencies found by tokenizing text from reader into the Map words
	 * @param r a source of text to be tokenized
	 * @param termFreqMap a Map of terms and their frequencies
	 * @param fieldName Used by analyzer for any special per-field analysis
	 */
	private void addTermFrequencies(Reader r, Map<String,Int> termFreqMap, String fieldName)
		throws IOException
	{
	  if (analyzer == null) {
	    throw new UnsupportedOperationException("To use MoreLikeThis without " +
	    		"term vectors, you must provide an Analyzer");
	  }
		   TokenStream ts = analyzer.tokenStream(fieldName, r);
			int tokenCount=0;
			// for every token
			CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);
			
			while (ts.incrementToken()) {
				String word = termAtt.toString();
				tokenCount++;
				if(tokenCount>maxNumTokensParsed)
				{
					break;
				}
				if(isNoiseWord(word)){
					continue;
				}
				
				// increment frequency
				Int cnt = termFreqMap.get(word);
				if (cnt == null) {
					termFreqMap.put(word, new Int());
				}
				else {
					cnt.x++;
				}
			}
	}

