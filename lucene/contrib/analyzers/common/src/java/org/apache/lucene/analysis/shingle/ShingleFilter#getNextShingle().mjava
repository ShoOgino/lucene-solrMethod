  /**
   * <p>Makes the next token a shingle of length {@link #gramSize}, 
   * composed of tokens taken from {@link #inputWindow}.
   * <p>Callers of this method must first insure that there are at least 
   * <code>gramSize</code> tokens available in <code>inputWindow</code>.
   */
  private void getNextShingle() {
    int startOffset = offsetAtt.startOffset();

    int minTokNum = gramSize.getValue() - 1; // zero-based inputWindow position
    if (gramSize.getValue() == minShingleSize) {
      // Clear the shingle text buffer if this is the first shingle
      // at the current position in the input stream.
      shingleBuilder.setLength(0);
      minTokNum = 0;
    }
    for (int tokNum = minTokNum ; tokNum < gramSize.getValue() ; ++tokNum) {
      if (tokNum > 0) {
        shingleBuilder.append(tokenSeparator);
      }
      restoreState(inputWindow.get(tokNum));
      shingleBuilder.append(termAtt.termBuffer(), 0, termAtt.termLength());
    }
    char[] termBuffer = termAtt.termBuffer();
    int termLength = shingleBuilder.length();
    if (termBuffer.length < termLength) {
      termBuffer = termAtt.resizeTermBuffer(termLength);
    }
    shingleBuilder.getChars(0, termLength, termBuffer, 0);
    termAtt.setTermLength(termLength);
    posIncrAtt.setPositionIncrement(gramSize.atMinValue() ? 1 : 0);
    typeAtt.setType(tokenType);
    offsetAtt.setOffset(startOffset, offsetAtt.endOffset());
  }

