  /**
   * Creates and returns a new SearcherManager from the given {@link IndexWriter}. 
   * @param writer the IndexWriter to open the IndexReader from.
   * @param applyAllDeletes If <code>true</code>, all buffered deletes will
   *        be applied (made visible) in the {@link IndexSearcher} / {@link IndexReader}.
   *        If <code>false</code>, the deletes are not applied but remain buffered 
   *        (in IndexWriter) so that they will be applied in the future.
   *        Applying deletes can be costly, so if your app can tolerate deleted documents
   *        being returned you might gain some performance by passing <code>false</code>.
   * @param warmer An optional {@link SearcherWarmer}. Pass
   *        <code>null</code> if you don't require the searcher to warmed
   *        before going live.  If this is  <code>non-null</code> then a
   *        merged segment warmer is installed on the
   *        provided IndexWriter's config.
   * @param es An optional {@link ExecutorService} so different segments can
   *        be searched concurrently (see {@link
   *        IndexSearcher#IndexSearcher(IndexReader,ExecutorService)}.  Pass <code>null</code>
   *        to search segments sequentially.
   *        
   * @see IndexReader#openIfChanged(IndexReader, IndexWriter, boolean)
   * @throws IOException
   */
  public static SearcherManager open(IndexWriter writer, boolean applyAllDeletes,
      SearcherWarmer warmer, ExecutorService es) throws IOException {
    final IndexReader open = IndexReader.open(writer, true);
    boolean success = false;
    try {
      SearcherManager manager = new NRTSearcherManager(writer, applyAllDeletes,
          open, warmer, es);
      success = true;
      return manager;
    } finally {
      if (!success) {
        open.close();
      }
    }
  }

