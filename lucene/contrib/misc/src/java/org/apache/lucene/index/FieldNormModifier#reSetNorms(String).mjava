  /**
   * Resets the norms for the specified field.
   *
   * <p>
   * Opens a new IndexReader on the Directory given to this instance,
   * modifies the norms (either using the Similarity given to this instance, or by using fake norms,
   * and closes the IndexReader.
   * </p>
   *
   * @param field the field whose norms should be reset
   */
  public void reSetNorms(String field) throws IOException {
    Similarity fieldSim = sim.get(field); 
    IndexReader reader = null;
    try {
      reader = IndexReader.open(dir, false);

      final List<IndexReader> subReaders = new ArrayList<IndexReader>();
      ReaderUtil.gatherSubReaders(subReaders, reader);

      final FieldInvertState invertState = new FieldInvertState();
      for(IndexReader subReader : subReaders) {
        final Bits liveDocs = subReader.getLiveDocs();

        int[] termCounts = new int[subReader.maxDoc()];
        Fields fields = subReader.fields();
        if (fields != null) {
          Terms terms = fields.terms(field);
          if (terms != null) {
            TermsEnum termsEnum = terms.iterator(null);
            DocsEnum docs = null;
            while(termsEnum.next() != null) {
              docs = termsEnum.docs(liveDocs, docs);
              while(true) {
                int docID = docs.nextDoc();
                if (docID != docs.NO_MORE_DOCS) {
                  termCounts[docID] += docs.freq();
                } else {
                  break;
                }
              }
            }
          }
        }

        invertState.setBoost(1.0f);
        for (int d = 0; d < termCounts.length; d++) {
          if (liveDocs == null || liveDocs.get(d)) {
            invertState.setLength(termCounts[d]);
            subReader.setNorm(d, field, fieldSim.computeNorm(invertState));
          }
        }
      }
      
    } finally {
      if (null != reader) reader.close();
    }
  }

