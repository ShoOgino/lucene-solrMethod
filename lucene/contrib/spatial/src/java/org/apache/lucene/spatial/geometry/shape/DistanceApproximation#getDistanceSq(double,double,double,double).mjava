  // Approximate arc distance between a segment (with lat,lng endpoints) and
  //    the test position
  public double getDistanceSq(double lat1, double lng1, double lat2, double lng2)
  {
     // Check if lat1,lng1 is closest point.  Construct a vector from point1
     //    to point2 (v1) and another from point 1 to the test point (v2).
     //    If dot product is negative then point 1 is the closest point
     double v1y = lat2 - lat1;
     double v1x = lng2 - lng1;
     double v2y = m_testLat - lat1;
     double v2x = m_testLng - lng1;
     double dot = v1x * v2x + v1y * v2y;
     if (dot <= 0.0f)
        return getDistanceSq(lat1, lng1);

     // Get the component of vector v2 along v1.  If component is greater
     //    than 1 then the endpoint is the closest point.
     double c = dot / (v1x * v1x + v1y * v1y);
     if (c >= 1.0f)
        return getDistanceSq(lat2, lng2);

     // Since we are working io lat,lng space we need to find the point
     //    along p1->p2 such that q->pt is perpendicular to p1->p2.  We
     //    then find the distance squared between Q and pt.
     return getDistanceSq((lat1 + v1y * c), (lng1 + v1x * c));
  }

