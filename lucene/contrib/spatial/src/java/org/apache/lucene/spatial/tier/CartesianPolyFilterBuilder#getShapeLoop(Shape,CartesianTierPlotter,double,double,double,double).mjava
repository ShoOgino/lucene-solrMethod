  public Shape getShapeLoop(Shape shape, CartesianTierPlotter ctp, double latX, double longX, double latY, double longY) {

    //System.err.println("getShapeLoop:"+latY+"," + longY);
    //System.err.println("getShapeLoop:"+latX+"," + longX);
    double beginAt = ctp.getTierBoxId(latX, longX);
    double endAt = ctp.getTierBoxId(latY, longY);
    if (beginAt > endAt) {
      double tmp = beginAt;
      beginAt = endAt;
      endAt = tmp;
    }
    double tierVert = ctp.getTierVerticalPosDivider();
    //System.err.println(" | "+ beginAt+" | "+ endAt);

    double startX = beginAt - (beginAt % 1);
    double startY = beginAt - startX; //should give a whole number

    double endX = endAt - (endAt % 1);
    double endY = endAt - endX; //should give a whole number

    int scale = (int) Math.log10(tierVert);
    endY = new BigDecimal(endY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
    startY = new BigDecimal(startY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
    double xInc = 1.0d / tierVert;
    xInc = new BigDecimal(xInc).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();

    //System.err.println("go from startX:"+startX+" to:" + endX);
    for (; startX <= endX; startX++) {

      double itY = startY;
      //System.err.println("go from startY:"+startY+" to:" + endY);
      while (itY <= endY) {
        //create a boxId
        // startX.startY
        double boxId = startX + itY;
        shape.addBox(boxId);
        //System.err.println("----"+startX+" and "+itY);
        //System.err.println("----"+boxId);
        itY += xInc;

        // java keeps 0.0001 as 1.0E-1
        // which ends up as 0.00011111
        itY = new BigDecimal(itY).setScale(scale, RoundingMode.HALF_EVEN).doubleValue();
      }
    }
    return shape;
  }

