  public void testPoleFlipping() throws IOException, InvalidGeoException {
    IndexReader reader = IndexReader.open(directory);
    searcher = new IndexSearcher(reader);

    final double miles = 3500.0;
    lat = 41.6032207;
    lng = -73.087749;

    if (VERBOSE) System.out.println("testPoleFlipping");

    // create a distance query
    final DistanceQueryBuilder dq = new DistanceQueryBuilder(lat, lng, miles,
        latField, lngField, CartesianTierPlotter.DEFALT_FIELD_PREFIX, true, 2, 15);

    if (VERBOSE) System.out.println(dq);
    //create a term query to search against all documents
    Query tq = new TermQuery(new Term("metafile", "doc"));
    // Create a distance sort
    // As the radius filter has performed the distance calculations
    // already, pass in the filter to reuse the results.
    //
    DistanceFieldComparatorSource dsort = new DistanceFieldComparatorSource(dq.distanceFilter);
    Sort sort = new Sort(new SortField("foo", dsort,false));

    // Perform the search, using the term query, the serial chain filter, and the
    // distance sort
    TopDocs hits = searcher.search(dq.getQuery(tq),null, 1000, sort);
    int results = hits.totalHits;
    ScoreDoc[] scoreDocs = hits.scoreDocs; 

    // Get a list of distances
    Map<Integer,Double> distances = dq.distanceFilter.getDistances();

    // distances calculated from filter first pass must be less than total
    // docs, from the above test of 20 items, 12 will come from the boundary box
    // filter, but only 5 are actually in the radius of the results.

    // Note Boundary Box filtering, is not accurate enough for most systems.


    if (VERBOSE) {
      System.out.println("Distance Filter filtered: " + distances.size());
      System.out.println("Results: " + results);
      System.out.println("=============================");
      System.out.println("Distances should be 18 "+ distances.size());
      System.out.println("Results should be 18 "+ results);
    }

    assertEquals(18, distances.size()); // fixed a store of only needed distances
    assertEquals(18, results);
    double lastDistance = 0;
    for(int i =0 ; i < results; i++){
      Document d = searcher.doc(scoreDocs[i].doc);
      String name = d.get("name");
      double rsLat = Double.parseDouble(d.get(latField));
      double rsLng = Double.parseDouble(d.get(lngField));
      Double geo_distance = distances.get(scoreDocs[i].doc);

      double distance = DistanceUtils.getDistanceMi(lat, lng, rsLat, rsLng);
      double llm = DistanceUtils.getLLMDistance(lat, lng, rsLat, rsLng);
      if (VERBOSE) System.out.println("Name: "+ name +", Distance "+ distance); //(res, ortho, harvesine):"+ distance +" |"+ geo_distance +"|"+ llm +" | score "+ hits.score(i));
      assertTrue(Math.abs((distance - llm)) < 1);
      if (VERBOSE) System.out.println("checking limit "+ distance + " < " + miles);
      assertTrue((distance < miles ));
      if (VERBOSE) System.out.println("checking sort "+ geo_distance + " >= " + lastDistance);
      assertTrue(geo_distance >= lastDistance);
      lastDistance = geo_distance;
    }
    searcher.close();
    reader.close();
  }

