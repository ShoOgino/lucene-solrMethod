  public void testIsCacheAble() throws Exception {
    Directory dir = new MockRAMDirectory();
    RandomIndexWriter writer = new RandomIndexWriter(rand, dir);
    writer.addDocument(new Document());
    writer.close();

    IndexReader reader = IndexReader.open(dir, true);
    IndexReader slowReader = SlowMultiReaderWrapper.wrap(reader);

    // not cacheable:
    assertDocIdSetCacheable(slowReader, new QueryWrapperFilter(new TermQuery(new Term("test","value"))), false);
    // returns default empty docidset, always cacheable:
    assertDocIdSetCacheable(slowReader, NumericRangeFilter.newIntRange("test", Integer.valueOf(10000), Integer.valueOf(-10000), true, true), true);
    // is cacheable:
    assertDocIdSetCacheable(slowReader, FieldCacheRangeFilter.newIntRange("test", Integer.valueOf(10), Integer.valueOf(20), true, true), true);
    // a openbitset filter is always cacheable
    assertDocIdSetCacheable(slowReader, new Filter() {
      @Override
      public DocIdSet getDocIdSet(IndexReader reader) {
        return new OpenBitSet();
      }
    }, true);

    reader.close();
  }

