  /*
   * Test per field codec support - adding fields with random codecs
   */
  @Test
  public void testStressPerFieldCodec() throws IOException {
    Directory dir = newDirectory(random);
    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,
        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };
    final int docsPerRound = 97;
    for (int i = 0; i < 5; i++) {
      CodecProvider provider = new CodecProvider();
      provider.register(new StandardCodec());
      provider.register(new SimpleTextCodec());
      // provider.register(new MockSepCodec()); // TODO enable once we have
      // files per codec
      // provider.register(new PulsingCodec());

      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {
        provider.setFieldCodec("" + j, random.nextBoolean() ? "SimpleText"
            : "Standard"); // TODO enable other codecs once possible
      }
      IndexWriterConfig config = newIndexWriterConfig(random,
          TEST_VERSION_CURRENT, new MockAnalyzer());
      config.setOpenMode(OpenMode.CREATE_OR_APPEND);
      config.setCodecProvider(provider);
      IndexWriter writer = newWriter(dir, config);
      for (int j = 0; j < docsPerRound; j++) {
        final Document doc = new Document();
        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {
          Field field = newField("" + k, _TestUtil
              .randomRealisticUnicodeString(random, 128), indexValue[random
              .nextInt(indexValue.length)]);
          doc.add(field);
        }
        writer.addDocument(doc);
      }
      if (random.nextBoolean()) {
        writer.optimize();
      }
      writer.commit();
      assertEquals((i + 1) * docsPerRound, writer.maxDoc());
      writer.close();
      _TestUtil.checkIndex(dir, provider);
    }
    dir.close();
  }

