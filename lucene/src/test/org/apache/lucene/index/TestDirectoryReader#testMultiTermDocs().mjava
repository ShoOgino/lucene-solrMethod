  public void testMultiTermDocs() throws IOException {
    Directory ramDir1=newDirectory();
    addDoc(random, ramDir1, "test foo", true);
    Directory ramDir2=newDirectory();
    addDoc(random, ramDir2, "test blah", true);
    Directory ramDir3=newDirectory();
    addDoc(random, ramDir3, "test wow", true);

    IndexReader[] readers1 = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir3, false)};
    IndexReader[] readers2 = new IndexReader[]{IndexReader.open(ramDir1, false), IndexReader.open(ramDir2, false), IndexReader.open(ramDir3, false)};
    MultiReader mr2 = new MultiReader(readers1);
    MultiReader mr3 = new MultiReader(readers2);

    // test mixing up TermDocs and TermEnums from different readers.
    TermsEnum te2 = MultiFields.getTerms(mr2, "body").iterator(null);
    te2.seekCeil(new BytesRef("wow"));
    DocsEnum td = _TestUtil.docs(random, mr2,
                                 "body",
                                 te2.term(),
                                 MultiFields.getLiveDocs(mr2),
                                 null,
                                 false);

    TermsEnum te3 = MultiFields.getTerms(mr3, "body").iterator(null);
    te3.seekCeil(new BytesRef("wow"));
    td = _TestUtil.docs(random, te3, MultiFields.getLiveDocs(mr3),
                        td,
                        false);
    
    int ret = 0;

    // This should blow up if we forget to check that the TermEnum is from the same
    // reader as the TermDocs.
    while (td.nextDoc() != td.NO_MORE_DOCS) ret += td.docID();

    // really a dummy assert to ensure that we got some docs and to ensure that
    // nothing is eliminated by hotspot
    assertTrue(ret > 0);
    readers1[0].close();
    readers1[1].close();
    readers2[0].close();
    readers2[1].close();
    readers2[2].close();
    ramDir1.close();
    ramDir2.close();
    ramDir3.close();
  }

