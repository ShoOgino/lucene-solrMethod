  public void testIsOptimized() throws IOException {
    Directory dir1 = getDir1(random);
    Directory dir2 = getDir2(random);
    
    // add another document to ensure that the indexes are not optimized
    IndexWriter modifier = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));
    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);
    Document d = new Document();
    d.add(new Field("f1", "v1", Field.Store.YES, Field.Index.ANALYZED));
    modifier.addDocument(d);
    modifier.close();
    
    modifier = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));
    ((LogMergePolicy) modifier.getMergePolicy()).setMergeFactor(10);
    d = new Document();
    d.add(new Field("f2", "v2", Field.Store.YES, Field.Index.ANALYZED));
    modifier.addDocument(d);
    modifier.close();

    
    ParallelReader pr = new ParallelReader();
    pr.add(IndexReader.open(dir1, false));
    pr.add(IndexReader.open(dir2, false));
    assertFalse(pr.isOptimized());
    pr.close();
    
    modifier = new IndexWriter(dir1, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));
    modifier.optimize();
    modifier.close();
    
    pr = new ParallelReader();
    pr.add(IndexReader.open(dir1, false));
    pr.add(IndexReader.open(dir2, false));
    // just one of the two indexes are optimized
    assertFalse(pr.isOptimized());
    pr.close();

    
    modifier = new IndexWriter(dir2, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));
    modifier.optimize();
    modifier.close();
    
    pr = new ParallelReader();
    pr.add(IndexReader.open(dir1, false));
    pr.add(IndexReader.open(dir2, false));
    // now both indexes are optimized
    assertTrue(pr.isOptimized());
    pr.close();

  }

