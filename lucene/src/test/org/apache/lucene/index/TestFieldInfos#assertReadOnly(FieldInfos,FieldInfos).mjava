  private void assertReadOnly(FieldInfos readOnly, FieldInfos modifiable) {
    assertTrue(readOnly.isReadOnly());
    assertFalse(modifiable.isReadOnly());
    try {
      readOnly.add(modifiable.fieldInfo(0));
      fail("instance should be read only");
    } catch (IllegalStateException e) {
      // expected
    }
    
    try {
      readOnly.addOrUpdate("bogus", random.nextBoolean());
      fail("instance should be read only");
    } catch (IllegalStateException e) {
      // expected
    }
    try {
      readOnly.addOrUpdate("bogus", random.nextBoolean(), random.nextBoolean());
      fail("instance should be read only");
    } catch (IllegalStateException e) {
      // expected
    }
    try {
      readOnly.addOrUpdate("bogus", random.nextBoolean(), random.nextBoolean(),
          random.nextBoolean(), random.nextBoolean());
      fail("instance should be read only");
    } catch (IllegalStateException e) {
      // expected
    }
    try {
      readOnly.addOrUpdate("bogus", random.nextBoolean(), random.nextBoolean(),
          random.nextBoolean(), random.nextBoolean(), random.nextBoolean());
      fail("instance should be read only");
    } catch (IllegalStateException e) {
      // expected
    }
    try {
      readOnly.addOrUpdate("bogus", random.nextBoolean(), random.nextBoolean(),
          random.nextBoolean(), random.nextBoolean(), random.nextBoolean(),
          random.nextBoolean(), random.nextBoolean());
      fail("instance should be read only");
    } catch (IllegalStateException e) {
      // expected
    }
    try {
      readOnly.addOrUpdate(Arrays.asList("a", "b", "c"), random.nextBoolean());
      fail("instance should be read only");
    } catch (IllegalStateException e) {
      // expected
    }
    
    assertEquals(modifiable.size(), readOnly.size());
    // assert we can iterate
    for (FieldInfo fi : readOnly) {
      assertEquals(fi.name, modifiable.fieldName(fi.number));
    }
    
  }

