  private void doTest(boolean addIndexesNoOptimize, boolean addToEmptyIndex,
      int numExpectedPayloads, boolean multipleCommits) throws IOException {
    Directory[] dirs = new Directory[2];
    populateDirs(dirs, multipleCommits);

    Directory dir = new MockRAMDirectory();
    if (!addToEmptyIndex) {
      populateDocs(dir, multipleCommits);
      verifyPayloadExists(dir, "p", new BytesRef("p1"), NUM_DOCS);
      verifyPayloadExists(dir, "p", new BytesRef("p2"), NUM_DOCS);
    }

    // Add two source dirs. By not adding the dest dir, we ensure its payloads
    // won't get processed.
    Map<Directory, DirPayloadProcessor> processors = new HashMap<Directory, DirPayloadProcessor>();
    for (Directory d : dirs) {
      processors.put(d, new PerTermPayloadProcessor());
    }
    IndexWriter writer = new IndexWriter(dir, getConfig());
    writer.setPayloadProcessorProvider(new PerDirPayloadProcessor(processors));

    if (!addIndexesNoOptimize) {
      IndexReader[] readers = new IndexReader[dirs.length];
      for (int i = 0; i < readers.length; i++) {
        readers[i] = IndexReader.open(dirs[i]);
      }
      try {
        writer.addIndexes(readers);
      } finally {
        for (IndexReader r : readers) {
          r.close();
        }
      }
    } else {
      writer.addIndexesNoOptimize(dirs);
    }
    writer.close();
    verifyPayloadExists(dir, "p", new BytesRef("p1"), numExpectedPayloads);
    // the second term should always have all payloads
    numExpectedPayloads = NUM_DOCS * dirs.length
        + (addToEmptyIndex ? 0 : NUM_DOCS);
    verifyPayloadExists(dir, "p", new BytesRef("p2"), numExpectedPayloads);
  }

