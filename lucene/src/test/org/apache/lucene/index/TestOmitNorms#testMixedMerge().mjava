  // Tests whether merging of docs that have different
  // omitNorms for the same field works
  public void testMixedMerge() throws Exception {
    Directory ram = newDirectory();
    Analyzer analyzer = new MockAnalyzer(random);
    IndexWriter writer = new IndexWriter(
        ram,
        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).
            setMaxBufferedDocs(3).
            setMergePolicy(newLogMergePolicy(2))
    );
    Document d = new Document();
        
    // this field will have norms
    Field f1 = newField("f1", "This field has norms", Field.Store.NO, Field.Index.ANALYZED);
    d.add(f1);
       
    // this field will NOT have norms
    Field f2 = newField("f2", "This field has NO norms in all docs", Field.Store.NO, Field.Index.ANALYZED);
    f2.setOmitNorms(true);
    d.add(f2);

    for (int i = 0; i < 30; i++) {
      writer.addDocument(d);
    }
        
    // now we add another document which has norms for field f2 and not for f1 and verify if the SegmentMerger
    // keep things constant
    d = new Document();
        
    // Reverese
    f1.setOmitNorms(true);
    d.add(f1);
        
    f2.setOmitNorms(false);        
    d.add(f2);
        
    for (int i = 0; i < 30; i++) {
      writer.addDocument(d);
    }
        
    // force merge
    writer.optimize();
    // flush
    writer.close();

    _TestUtil.checkIndex(ram);

    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram, false));
    FieldInfos fi = reader.fieldInfos();
    assertTrue("OmitNorms field bit should be set.", fi.fieldInfo("f1").omitNorms);
    assertTrue("OmitNorms field bit should be set.", fi.fieldInfo("f2").omitNorms);
        
    reader.close();
    ram.close();
  }

