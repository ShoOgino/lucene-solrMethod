  // returns current default codec
  static Codec installTestCodecs(String codec, CodecProvider cp) {
    savedDefaultCodec = cp.getDefaultFieldCodec();

    final boolean codecHasParam;
    int codecParam = 0;
    if (codec.equals("randomPerField")) {
      // lie
      codec = "Standard";
      codecHasParam = false;
    } else if (codec.equals("random")) {
      codec = pickRandomCodec(random);
      codecHasParam = false;
    } else {
      Matcher m = codecWithParam.matcher(codec);
      if (m.matches()) {
        // codec has a fixed param
        codecHasParam = true;
        codec = m.group(1);
        codecParam = Integer.parseInt(m.group(2));
      } else {
        codecHasParam = false;
      }
    }

    cp.setDefaultFieldCodec(codec);

    if (codec.equals("PreFlex")) {
      // If we're running w/ PreFlex codec we must swap in the
      // test-only PreFlexRW codec (since core PreFlex can
      // only read segments):
      swapCodec(new PreFlexRWCodec(), cp);
    }

    swapCodec(new MockSepCodec(), cp);
    swapCodec(new PulsingCodec(codecHasParam && "Pulsing".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 20)), cp);
    swapCodec(new MockFixedIntBlockCodec(codecHasParam && "MockFixedIntBlock".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 2000)), cp);
    // baseBlockSize cannot be over 127:
    swapCodec(new MockVariableIntBlockCodec(codecHasParam && "MockVariableIntBlock".equals(codec) ? codecParam : _TestUtil.nextInt(random, 1, 127)), cp);
    swapCodec(new MockRandomCodec(random), cp);

    return cp.lookup(codec);
  }

