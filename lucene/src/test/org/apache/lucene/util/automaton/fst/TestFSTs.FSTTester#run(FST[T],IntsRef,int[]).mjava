    // runs the term, returning the output, or null if term
    // isn't accepted.  if stopNode is non-null it must be
    // length 2 int array; stopNode[0] will be the last
    // matching node (-1 if the term is accepted)
    // and stopNode[1] will be the length of the
    // term prefix that matches
    private T run(FST<T> fst, IntsRef term, int[] stopNode) throws IOException {
      if (term.length == 0) {
        final T output = fst.getEmptyOutput();
        if (stopNode != null) {
          stopNode[1] = 0;
          if (output != null) {
            // accepted
            stopNode[0] = -1;
          } else {
            stopNode[0] = fst.getStartNode();
          }
        }
        return output;
      }

      final FST.Arc<T> arc = new FST.Arc<T>();
      int node = fst.getStartNode();
      int lastNode = -1;
      T output = fst.outputs.getNoOutput();
      //System.out.println("match?");
      for(int i=0;i<term.length;i++) {
        //System.out.println("  int=" + term.ints[i]);
        if (!fst.hasArcs(node)) {
          //System.out.println("    no arcs!");
          // hit end node before term's end
          if (stopNode != null) {
            stopNode[0] = lastNode;
            stopNode[1] = i-1;
            return output;
          } else {
            return null;
          }
        }

        if (fst.findArc(node, term.ints[term.offset + i], arc) != null) {
          node = arc.target;
          //System.out.println("    match final?=" + arc.isFinal());
          if (arc.output != fst.outputs.getNoOutput()) {
            output = fst.outputs.add(output, arc.output);
          }
        } else if (stopNode != null) {
          stopNode[0] = node;
          stopNode[1] = i;
          return output;
        } else {
          //System.out.println("    no match");
          return null;
        }

        lastNode = node;
      }

      if (!arc.isFinal()) {
        // hit term's end before end node
        if (stopNode != null) {
          stopNode[0] = node;
          stopNode[1] = term.length;
          return output;
        } else {
          return null;
        }
      }

      if (arc.nextFinalOutput != fst.outputs.getNoOutput()) {
        output = fst.outputs.add(output, arc.nextFinalOutput);
      }

      if (stopNode != null) {
        stopNode[0] = -1;
        stopNode[1] = term.length;
      }
      return output;
    }

