  private void testOne(Random r, ByteRunAutomaton a, int startCode, int endCode, int iters) {

    // Verify correct ints are accepted
    for(int iter=0;iter<iters;iter++) {
      // pick random code point in-range

      final int code = _TestUtil.nextInt(r, startCode, endCode);
      if ((code >= UnicodeUtil.UNI_SUR_HIGH_START && code <= UnicodeUtil.UNI_SUR_HIGH_END) |
          (code >= UnicodeUtil.UNI_SUR_LOW_START && code <= UnicodeUtil.UNI_SUR_LOW_END)) {
        iter--;
        continue;
      }
      assertTrue("DFA for range " + startCode + "-" + endCode + " failed to match code=" + code, 
                 matches(a, code));
    }

    // Verify invalid ints are not accepted
    final int invalidRange = MAX_UNICODE - (endCode - startCode + 1);
    if (invalidRange > 0) {
      for(int iter=0;iter<iters;iter++) {
        int x = _TestUtil.nextInt(r, 0, invalidRange-1);
        final int code;
        if (x >= startCode) {
          code = endCode + 1 + x - startCode;
        } else {
          code = x;
        }
        if ((code >= UnicodeUtil.UNI_SUR_HIGH_START && code <= UnicodeUtil.UNI_SUR_HIGH_END) |
            (code >= UnicodeUtil.UNI_SUR_LOW_START && code <= UnicodeUtil.UNI_SUR_LOW_END)) {
          iter--;
          continue;
        }
        assertFalse("DFA for range " + startCode + "-" + endCode + " matched invalid code=" + code,
                    matches(a, code));
                    
      }
    }
  }

