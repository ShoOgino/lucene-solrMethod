    private T randomAcceptedWord(FST<T> fst, IntsRef in) throws IOException {
      int node = fst.getStartNode();

      if (fst.noNodes()) {
        // degenerate FST: only accepts the empty string
        assertTrue(fst.getEmptyOutput() != null);
        in.length = 0;
        return fst.getEmptyOutput();
      }
      final List<FST.Arc<T>> arcs = new ArrayList<FST.Arc<T>>();
      in.length = 0;
      in.offset = 0;
      T output = fst.outputs.getNoOutput();
      //System.out.println("get random");
      while(true) {
        // read all arcs:
        //System.out.println("  n=" + node);
        int arcAddress = node;
        FST.Arc<T> arc = new FST.Arc<T>();
        fst.readFirstArc(arcAddress, arc);
        arcs.add(copyArc(arc));
        while(!arc.isLast()) {
          fst.readNextArc(arc);
          arcs.add(copyArc(arc));
        }
      
        // pick one
        arc = arcs.get(random.nextInt(arcs.size()));

        arcs.clear();

        // append label
        if (in.ints.length == in.length) {
          in.grow(1+in.length);
        }
        in.ints[in.length++] = arc.label;

        output = fst.outputs.add(output, arc.output);

        // maybe stop
        if (arc.isFinal()) {
          if (fst.hasArcs(arc.target)) {
            // final state but it also has outgoing edges
            if (random.nextBoolean()) {
              output = fst.outputs.add(output, arc.nextFinalOutput);
              break;
            }
          } else {
            break;
          }
        }

        node = arc.target;
      }

      return output;
    }

