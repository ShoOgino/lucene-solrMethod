    public int[] getRandomAcceptedString(Random r) {

      final List<Integer> soFar = new ArrayList<Integer>();
      if (a.isSingleton()) {
        // accepts only one
        final String s = a.singleton;
      
        int charUpto = 0;
        while(charUpto < s.length()) {
          final int cp = s.codePointAt(charUpto);
          charUpto += Character.charCount(cp);
          soFar.add(cp);
        }
      } else {

        State s = a.initial;

        while(true) {
      
          if (s.accept) {
            if (s.numTransitions == 0) {
              // stop now
              break;
            } else {
              if (r.nextBoolean()) {
                break;
              }
            }
          }

          if (s.numTransitions == 0) {
            throw new RuntimeException("this automaton has dead states");
          }

          boolean cheat = r.nextBoolean();

          final Transition t;
          if (cheat) {
            // pick a transition that we know is the fastest
            // path to an accept state
            List<Transition> toAccept = new ArrayList<Transition>();
            for(int i=0;i<s.numTransitions;i++) {
              final Transition t0 = s.transitionsArray[i];
              if (leadsToAccept.containsKey(t0)) {
                toAccept.add(t0);
              }
            }
            if (toAccept.size() == 0) {
              // this is OK -- it means we jumped into a cycle
              t = s.transitionsArray[r.nextInt(s.numTransitions)];
            } else {
              t = toAccept.get(r.nextInt(toAccept.size()));
            }
          } else {
            t = s.transitionsArray[r.nextInt(s.numTransitions)];
          }
          soFar.add(getRandomCodePoint(r, t));
          s = t.to;
        }
      }

      return ArrayUtil.toIntArray(soFar);
    }

