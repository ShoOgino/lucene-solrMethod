  private synchronized void open(Random random) throws IOException {
    InputStream is = getClass().getResourceAsStream(path);
    if (is == null) {
      // if its not in classpath, we load it as absolute filesystem path (e.g. Hudson's home dir)
      is = new FileInputStream(path);
    }
    File file = new File(path);
    long size;
    if (file.exists()) {
      size = file.length();
    } else {
      size = is.available();
    }
    if (path.endsWith(".gz")) {
      is = new GZIPInputStream(is);
      // guestimate:
      size *= 2.8;
    }

    final InputStream in = new BufferedInputStream(is, BUFFER_SIZE);
    reader = new BufferedReader(new InputStreamReader(in, "UTF-8"), BUFFER_SIZE);

    // Override sizes for currently "known" line files:
    if (path.equals("europarl.lines.txt.gz")) {
      size = 15129506L;
    } else if (path.equals("/home/hudson/lucene-data/enwiki.random.lines.txt.gz")) {
      size = 3038178822L;
    }

    // Randomly seek to starting point:
    if (random != null && size > 3) {
      final long seekTo = (random.nextLong()&Long.MAX_VALUE) % (size/3);
      if (LuceneTestCase.VERBOSE) {
        System.out.println("TEST: LineFileDocs: seek to fp=" + seekTo + " on open");
      }
      reader.skip(seekTo);
      reader.readLine();
    }
  }

