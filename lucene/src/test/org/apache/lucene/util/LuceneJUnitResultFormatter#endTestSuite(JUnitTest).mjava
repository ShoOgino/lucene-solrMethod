  /**
   * The whole testsuite ended.
   * @param suite the test suite
   */
  public synchronized void endTestSuite(JUnitTest suite) {
    append("Tests run: ");
    append(suite.runCount());
    append(", Failures: ");
    append(suite.failureCount());
    append(", Errors: ");
    append(suite.errorCount());
    append(", Time elapsed: ");
    append(numberFormat.format(suite.getRunTime() / ONE_SECOND));
    append(" sec");
    append(StringUtils.LINE_SEP);
    append(StringUtils.LINE_SEP);
    
    // append the err and output streams to the log
    if (systemOutput != null && systemOutput.length() > 0) {
      append("------------- Standard Output ---------------")
      .append(StringUtils.LINE_SEP)
      .append(systemOutput)
      .append("------------- ---------------- ---------------")
      .append(StringUtils.LINE_SEP);
    }
    
    // HACK: junit gives us no way to do this in LuceneTestCase
    try {
      Class<?> clazz = Class.forName(suite.getName());
      Ignore ignore = clazz.getAnnotation(Ignore.class);
      if (ignore != null) {
        if (systemError == null) systemError = "";
        systemError += "NOTE: Ignoring test class '" + clazz.getSimpleName() + "': " 
                    + ignore.value() + StringUtils.LINE_SEP;
      }
    } catch (ClassNotFoundException e) { /* no problem */ }
    // END HACK
    
    if (systemError != null && systemError.length() > 0) {
      append("------------- Standard Error -----------------")
      .append(StringUtils.LINE_SEP)
      .append(systemError)
      .append("------------- ---------------- ---------------")
      .append(StringUtils.LINE_SEP);
    }
    
    if (out != null) {
      try {
        lock.obtain(5000);
        try {
          sb.writeTo(out);
          out.flush();
        } finally {
          try {
            lock.release();
          } catch(LockReleaseFailedException e) {
            // well lets pretend its released anyway
          }
        }
      } catch (IOException e) {
        throw new RuntimeException("unable to write results", e);
      } finally {
        if (out != System.out && out != System.err) {
          FileUtils.close(out);
        }
      }
    }
  }

