  /** Creates a sort, possibly in reverse, by terms in the given field, parsed
   * to numeric values using a custom {@link FieldCache.Parser}.
   * @param field  Name of field to sort by.  Must not be null.
   * @param parser Instance of a {@link FieldCache.Parser},
   *  which must subclass one of the existing numeric
   *  parsers from {@link FieldCache}. Sort type is inferred
   *  by testing which numeric parser the parser subclasses.
   * @param reverse True if natural order should be reversed.
   * @throws IllegalArgumentException if the parser fails to
   *  subclass an existing numeric parser, or field is null
   *  
   *  @deprecated (4.0) use EntryCreator version
   */
  @Deprecated
  public SortField(String field, FieldCache.Parser parser, boolean reverse) {
    if (field == null) {
      throw new IllegalArgumentException("field can only be null when type is SCORE or DOC");
    } 
    this.field = field;
    this.reverse = reverse;
    
    if (parser instanceof FieldCache.IntParser) {
      this.creator = new IntValuesCreator( field, (FieldCache.IntParser)parser );
    }
    else if (parser instanceof FieldCache.FloatParser) {
      this.creator = new FloatValuesCreator( field, (FieldCache.FloatParser)parser );
    }
    else if (parser instanceof FieldCache.ShortParser) {
      this.creator = new ShortValuesCreator( field, (FieldCache.ShortParser)parser );
    }
    else if (parser instanceof FieldCache.ByteParser) {
      this.creator = new ByteValuesCreator( field, (FieldCache.ByteParser)parser );
    }
    else if (parser instanceof FieldCache.LongParser) {
      this.creator = new LongValuesCreator( field, (FieldCache.LongParser)parser );
    }
    else if (parser instanceof FieldCache.DoubleParser) {
      this.creator = new DoubleValuesCreator( field, (FieldCache.DoubleParser)parser );
    }
    else
      throw new IllegalArgumentException("Parser instance does not subclass existing numeric parser from FieldCache (got " + parser + ")");

    this.type = this.creator.getSortType();
  }

