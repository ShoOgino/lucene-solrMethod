  /**
   * Sets the enum to operate in linear fashion, as we have found
   * a looping transition at position
   */
  private void setLinear(int position) {
    int state = runAutomaton.getInitialState();
    int maxInterval = 0xef;
    for (int i = 0; i < position; i++) {
      state = runAutomaton.step(state, seekBytesRef.bytes[i] & 0xff);
      assert state >= 0: "state=" + state;
    }
    for (int i = 0; i < allTransitions[state].length; i++) {
      Transition t = allTransitions[state][i];
      if (compareToUTF16(t.getMin(), (seekBytesRef.bytes[position] & 0xff)) <= 0 && 
          compareToUTF16((seekBytesRef.bytes[position] & 0xff), t.getMax()) <= 0) {
        maxInterval = t.getMax();
        break;
      }
    }
    // 0xef terms don't get the optimization... not worth the trouble.
    if (maxInterval != 0xef)
      maxInterval = incrementUTF16(maxInterval);
    int length = position + 1; /* position + maxTransition */
    if (linearUpperBound.bytes.length < length)
      linearUpperBound.bytes = new byte[length];
    System.arraycopy(seekBytesRef.bytes, 0, linearUpperBound.bytes, 0, position);
    linearUpperBound.bytes[position] = (byte) maxInterval;
    linearUpperBound.length = length;
  }

