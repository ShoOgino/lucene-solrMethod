  /** Returns the {@link FieldComparator} to use for
   * sorting.
   *
   * @lucene.experimental
   *
   * @param numHits number of top hits the queue will store
   * @param sortPos position of this SortField within {@link
   *   Sort}.  The comparator is primary if sortPos==0,
   *   secondary if sortPos==1, etc.  Some comparators can
   *   optimize themselves when they are the primary sort.
   * @return {@link FieldComparator} to use when sorting
   */
  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {

    switch (type) {
    case SortField.SCORE:
      return new FieldComparator.RelevanceComparator(numHits);

    case SortField.DOC:
      return new FieldComparator.DocComparator(numHits);

    case SortField.INT:
      if (useIndexValues) {
        return new FieldComparator.IntDocValuesComparator(numHits, field);
      } else {
        return new FieldComparator.IntComparator(numHits, (IntValuesCreator)creator, (Integer) missingValue);
      }

    case SortField.FLOAT:
      if (useIndexValues) {
        return new FieldComparator.FloatDocValuesComparator(numHits, field);
      } else {
        return new FieldComparator.FloatComparator(numHits, (FloatValuesCreator) creator, (Float) missingValue);
      }

    case SortField.LONG:
      return new FieldComparator.LongComparator(numHits, (LongValuesCreator)creator, (Long)missingValue );

    case SortField.DOUBLE:
      return new FieldComparator.DoubleComparator(numHits, (DoubleValuesCreator)creator, (Double)missingValue );

    case SortField.BYTE:
      return new FieldComparator.ByteComparator(numHits, (ByteValuesCreator)creator, (Byte)missingValue );

    case SortField.SHORT:
      return new FieldComparator.ShortComparator(numHits, (ShortValuesCreator)creator, (Short)missingValue );

    case SortField.CUSTOM:
      assert comparatorSource != null;
      return comparatorSource.newComparator(field, numHits, sortPos, reverse);

    case SortField.STRING:
      return new FieldComparator.TermOrdValComparator(numHits, field, sortPos, reverse);

    case SortField.STRING_VAL:
      return new FieldComparator.TermValComparator(numHits, field);
        
    default:
      throw new IllegalStateException("Illegal sort type: " + type);
    }
  }

