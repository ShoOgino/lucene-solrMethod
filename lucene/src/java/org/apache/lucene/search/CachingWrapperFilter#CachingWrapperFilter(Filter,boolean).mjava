  /** Wraps another filter's result and caches it. If
   * {@code recacheDeletes} is {@code true}, then new deletes (for example
   * after {@link DirectoryReader#openIfChanged}) will cause the filter
   * {@link DocIdSet} to be recached.
   *
   * <p>If your index changes seldom, it is recommended to use {@code recacheDeletes=true},
   * as recaching will only occur when the index is reopened.
   * For near-real-time indexes or indexes that are often
   * reopened with (e.g., {@link DirectoryReader#openIfChanged} is used), you should
   * pass {@code recacheDeletes=false}. This will cache the filter results omitting
   * deletions and will AND them in while scoring.
   * @param filter Filter to cache results of
   * @param recacheDeletes if deletions on the underlying index should recache
   */
  public CachingWrapperFilter(Filter filter, boolean recacheDeletes) {
    this.filter = filter;
    this.recacheDeletes = recacheDeletes;
  }

