  /**
   * Lower-level search API.
   * 
   * <p>
   * {@link Collector#collect(int)} is called for every document. <br>
   * Collector-based access to remote indexes is discouraged.
   * 
   * <p>
   * Applications should only use this if they need <i>all</i> of the matching
   * documents. The high-level search API ({@link IndexSearcher#search(Query,int)}) is
   * usually more efficient, as it skips non-high-scoring hits.
   * 
   * <p>
   * NOTE: this method executes the searches on all given leaves exclusively.
   * To search across all the searchers leaves use {@link #leafContexts}.
   * 
   * @param leaves 
   *          the searchers leaves to execute the searches on
   * @param weight
   *          to match documents
   * @param filter
   *          if non-null, used to permit documents to be collected.
   * @param collector
   *          to receive hits
   * @throws BooleanQuery.TooManyClauses
   */
  protected void search(AtomicReaderContext[] leaves, Weight weight, Filter filter, Collector collector)
      throws IOException {

    // TODO: should we make this
    // threaded...?  the Collector could be sync'd?
    ScorerContext scorerContext =  ScorerContext.def().scoreDocsInOrder(true).topScorer(true);
    // always use single thread:
    if (filter == null) {
      for (int i = 0; i < leaves.length; i++) { // search each subreader
        collector.setNextReader(leaves[i]);
        scorerContext = scorerContext.scoreDocsInOrder(!collector.acceptsDocsOutOfOrder());
        Scorer scorer = weight.scorer(leaves[i], scorerContext);
        if (scorer != null) {
          scorer.score(collector);
        }
      }
    } else {
      for (int i = 0; i < leaves.length; i++) { // search each subreader
        collector.setNextReader(leaves[i]);
        searchWithFilter(leaves[i], weight, filter, collector);
      }
    }
  }

