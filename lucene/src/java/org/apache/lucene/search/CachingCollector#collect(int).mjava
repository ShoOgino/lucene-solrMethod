  @Override
  public void collect(int doc) throws IOException {

    if (curDocs == null) {
      // Cache was too large
      if (cacheScores) {
        cachedScorer.score = scorer.score();
      }
      cachedScorer.doc = doc;
      other.collect(doc);
      return;
    }

    // Allocate a bigger array or abort caching
    if (upto == curDocs.length) {
      base += upto;
      
      // Compute next array length - don't allocate too big arrays
      int nextLength = 8*curDocs.length;
      if (nextLength > MAX_ARRAY_SIZE) {
        nextLength = MAX_ARRAY_SIZE;
      }

      if (base + nextLength > maxDocsToCache) {
        // try to allocate a smaller array
        nextLength = maxDocsToCache - base;
        if (nextLength <= 0) {
          // Too many docs to collect -- clear cache
          curDocs = null;
          curScores = null;
          cachedSegs.clear();
          cachedDocs.clear();
          cachedScores.clear();
          if (cacheScores) {
            cachedScorer.score = scorer.score();
          }
          cachedScorer.doc = doc;
          other.collect(doc);
          return;
        }
      }
      
      curDocs = new int[nextLength];
      cachedDocs.add(curDocs);
      if (cacheScores) {
        curScores = new float[nextLength];
        cachedScores.add(curScores);
      }
      upto = 0;
    }
    
    curDocs[upto] = doc;
    // TODO: maybe specialize private subclass so we don't
    // null check per collect...
    if (cacheScores) {
      cachedScorer.score = curScores[upto] = scorer.score();
    }
    upto++;
    cachedScorer.doc = doc;
    other.collect(doc);
  }

