    @Override
    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {
      if (terms.size() == 0)			  // optimize zero-term case
        return null;
      final IndexReader reader = context.reader;
      final Bits liveDocs = reader.getLiveDocs();
      PostingsAndFreq[] postingsFreqs = new PostingsAndFreq[terms.size()];
      for (int i = 0; i < terms.size(); i++) {
        final Term t = terms.get(i);
        DocsAndPositionsEnum postingsEnum = reader.termPositionsEnum(liveDocs,
                                                                     t.field(),
                                                                     t.bytes());
        // PhraseQuery on a field that did not index
        // positions.
        if (postingsEnum == null) {
          if (reader.termDocsEnum(liveDocs, t.field(), t.bytes()) != null) {
            // term does exist, but has no positions
            throw new IllegalStateException("field \"" + t.field() + "\" was indexed with Field.omitTermFreqAndPositions=true; cannot run PhraseQuery (term=" + t.text() + ")");
          } else {
            // term does not exist
            return null;
          }
        }
        postingsFreqs[i] = new PostingsAndFreq(postingsEnum, reader.docFreq(t.field(), t.bytes()), positions.get(i).intValue(), t);
      }

      // sort by increasing docFreq order
      if (slop == 0) {
        ArrayUtil.mergeSort(postingsFreqs);
      }

      if (slop == 0) {				  // optimize exact case
        ExactPhraseScorer s = new ExactPhraseScorer(this, postingsFreqs, similarity,
            reader.norms(field));
        if (s.noDocs) {
          return null;
        } else {
          return s;
        }
      } else {
        return
          new SloppyPhraseScorer(this, postingsFreqs, similarity, slop,
              reader.norms(field));
      }
    }

