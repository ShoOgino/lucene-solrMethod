  /**
   * Returns a DocIdSet with documents that should be permitted in search
   * results.
   */
  @Override
  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {
    final IndexReader reader = context.reader;
    final Fields fields = reader.fields();
    if (fields == null) {
      // reader has no fields
      return DocIdSet.EMPTY_DOCIDSET;
    }

    final Terms terms = fields.terms(query.field);
    if (terms == null) {
      // field does not exist
      return DocIdSet.EMPTY_DOCIDSET;
    }

    final TermsEnum termsEnum = query.getTermsEnum(terms);
    assert termsEnum != null;
    if (termsEnum.next() != null) {
      // fill into a OpenBitSet
      final OpenBitSet bitSet = new OpenBitSet(reader.maxDoc());
      int termCount = 0;
      final Bits liveDocs = reader.getLiveDocs();
      DocsEnum docsEnum = null;
      do {
        termCount++;
        // System.out.println("  iter termCount=" + termCount + " term=" +
        // enumerator.term().toBytesString());
        docsEnum = termsEnum.docs(liveDocs, docsEnum);
        final DocsEnum.BulkReadResult result = docsEnum.getBulkResult();
        while (true) {
          final int count = docsEnum.read();
          if (count != 0) {
            final int[] docs = result.docs.ints;
            for (int i = 0; i < count; i++) {
              bitSet.set(docs[i]);
            }
          } else {
            break;
          }
        }
      } while (termsEnum.next() != null);
      // System.out.println("  done termCount=" + termCount);

      query.incTotalNumberOfTerms(termCount);
      return bitSet;
    } else {
      return DocIdSet.EMPTY_DOCIDSET;
    }
  }

