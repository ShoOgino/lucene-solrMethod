    @Override
    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {
      final int docBase = context.docBase;

      final IndexDocValues dv = context.reader.docValues(field);
      if (dv == null) {
        termsIndex = IndexDocValues.getDefaultSortedSource(ValueType.BYTES_VAR_SORTED, context.reader.maxDoc());
      } else {
        termsIndex = dv.getSource().asSortedSource();
        if (termsIndex == null) {
          termsIndex = IndexDocValues.getDefaultSortedSource(ValueType.BYTES_VAR_SORTED, context.reader.maxDoc());
        }
      }

      comp = termsIndex.getComparator();

      FieldComparator perSegComp = null;
      final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();
      if (docToOrd.hasArray()) {
        final Object arr = docToOrd.getArray();
        assert arr != null;
        if (arr instanceof byte[]) {
          // 8 bit packed
          perSegComp = new ByteOrdComparator((byte[]) arr, termsIndex, docBase);
        } else if (arr instanceof short[]) {
          // 16 bit packed
          perSegComp = new ShortOrdComparator((short[]) arr, termsIndex, docBase);
        } else if (arr instanceof int[]) {
          // 32 bit packed
          perSegComp = new IntOrdComparator((int[]) arr, termsIndex, docBase);
        }
      }

      if (perSegComp == null) {
        perSegComp = new AnyOrdComparator(docToOrd, docBase);
      }
        
      currentReaderGen++;
      if (bottomSlot != -1) {
        perSegComp.setBottom(bottomSlot);
      }

      return perSegComp;
    }

