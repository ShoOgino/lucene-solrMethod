  private IndexSearcher(ReaderContext context, boolean closeReader, ExecutorService executor) {
    // TODO: eable this assert once SolrIndexReader and friends are refactored to use ReaderContext
    // We can't assert this here since SolrIndexReader will fail in some contexts - once solr is consistent we should be fine here
    // Lucene instead passes all tests even with this assert!
    // assert context.isTopLevel: "IndexSearcher's ReaderContext must be topLevel for reader" + context.reader;
    reader = context.reader;
    this.executor = executor;
    this.closeReader = closeReader;
    this.readerContext = context;
    if (context.isAtomic) {
      assert context.leaves() == null : "AtomicReaderContext must not have any leaves";
      this.leafContexts = new AtomicReaderContext[] { (AtomicReaderContext) context };
    } else {
      assert context.leaves() != null : "non-atomic top-level context must have leaves";
      this.leafContexts = context.leaves();
    }
    subSearchers = new IndexSearcher[this.leafContexts.length];
    for (int i = 0; i < subSearchers.length; i++) { // TODO do we need those IS if executor is null?
      if (leafContexts[i].reader == context.reader) {
        subSearchers[i] = this;
      } else {
        subSearchers[i] = new IndexSearcher(leafContexts[i].reader.getTopReaderContext()); // we need to get a TL context for sub searchers!
      }
    }
  }

