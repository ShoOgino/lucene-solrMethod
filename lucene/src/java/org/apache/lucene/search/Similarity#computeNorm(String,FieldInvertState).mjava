  /**
   * Computes the normalization value for a field, given the accumulated
   * state of term processing for this field (see {@link FieldInvertState}).
   * 
   * <p>Implementations should calculate a float value based on the field
   * state and then return that value.
   *
   * <p>Matches in longer fields are less precise, so implementations of this
   * method usually return smaller values when <code>state.getLength()</code> is large,
   * and larger values when <code>state.getLength()</code> is small.
   * 
   * <p>Note that the return values are computed under 
   * {@link org.apache.lucene.index.IndexWriter#addDocument(org.apache.lucene.document.Document)} 
   * and then stored using
   * {@link #encodeNormValue(float)}.  
   * Thus they have limited precision, and documents
   * must be re-indexed if this method is altered.
   *
   * <p>For backward compatibility this method by default calls
   * {@link #lengthNorm(String, int)} passing
   * {@link FieldInvertState#getLength()} as the second argument, and
   * then multiplies this value by {@link FieldInvertState#getBoost()}.</p>
   * 
   * @lucene.experimental
   * 
   * @param field field name
   * @param state current processing state for this field
   * @return the calculated float norm
   */
  public abstract float computeNorm(String field, FieldInvertState state);

