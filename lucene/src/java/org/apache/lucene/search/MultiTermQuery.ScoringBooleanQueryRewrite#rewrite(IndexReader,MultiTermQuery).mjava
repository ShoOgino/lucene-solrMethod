    @Override
    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {
      final ParallelArraysTermCollector col = new ParallelArraysTermCollector();
      collectTerms(reader, query, col);
      
      final Term placeholderTerm = new Term(query.field);
      final BooleanQuery result = new BooleanQuery(true);
      final int size = col.terms.size();
      if (size > 0) {
        final int sort[] = col.terms.sort(col.termsEnum.getComparator());
        final int[] docFreq = col.array.docFreq;
        final float[] boost = col.array.boost;
        for (int i = 0; i < size; i++) {
          final int pos = sort[i];
          final Term term = placeholderTerm.createTerm(col.terms.get(pos, new BytesRef()));
          assert reader.docFreq(term) == docFreq[pos];
          final TermQuery tq = new TermQuery(term, docFreq[pos]);
          tq.setBoost(query.getBoost() * boost[pos]);
          result.add(tq, BooleanClause.Occur.SHOULD);
        }
      }
      query.incTotalNumberOfTerms(size);
      return result;
    }

