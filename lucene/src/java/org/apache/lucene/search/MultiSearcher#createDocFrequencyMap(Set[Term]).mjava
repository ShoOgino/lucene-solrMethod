  /**
   * Collects the document frequency for the given terms form all searchables
   * @param terms term set used to collect the document frequency form all
   *        searchables 
   * @return a map with a term as the key and the terms aggregated document
   *         frequency as a value  
   * @throws IOException if a searchable throws an {@link IOException}
   */
   Map<Term, Integer> createDocFrequencyMap(final Set<Term> terms) throws IOException  {
    final Term[] allTermsArray = terms.toArray(new Term[terms.size()]);
    final int[] aggregatedDfs = new int[allTermsArray.length];
    for (Searchable searchable : searchables) {
      final int[] dfs = searchable.docFreqs(allTermsArray); 
      for(int j=0; j<aggregatedDfs.length; j++){
        aggregatedDfs[j] += dfs[j];
      }
    }
    final HashMap<Term,Integer> dfMap = new HashMap<Term,Integer>();
    for(int i=0; i<allTermsArray.length; i++) {
      dfMap.put(allTermsArray[i], Integer.valueOf(aggregatedDfs[i]));
    }
    return dfMap;
  }

