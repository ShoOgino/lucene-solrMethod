  boolean updateDocument(final Document doc, final Analyzer analyzer,
      final Term delTerm) throws CorruptIndexException, IOException {
    ensureOpen();
    boolean maybeMerge = false;
    final boolean isUpdate = delTerm != null;
    if (healthiness.isStalled()) {
      /*
       * if we are allowed to hijack threads for flushing we try to flush out 
       * as many pending DWPT to release memory and get back healthy status.
       */
      if (infoStream != null) {
        message("WARNING DocumentsWriter is stalled try to hijack thread to flush pending segment");
      }
      // try pick up pending threads here if possile
      DocumentsWriterPerThread flushingDWPT;
      while ( (flushingDWPT = flushControl.nextPendingFlush()) != null){
       // don't push the delete here since the update could fail!
        maybeMerge = doFlush(flushingDWPT);
        if (!healthiness.isStalled()) {
          break;
        }
      }
      if (infoStream != null && healthiness.isStalled()) {
        message("WARNING DocumentsWriter is stalled might block thread until DocumentsWriter is not stalled anymore");
      }
      healthiness.waitIfStalled(); // block if stalled
    }
    final ThreadState perThread = perThreadPool.getAndLock(Thread.currentThread(),
        this, doc);
    final DocumentsWriterPerThread flushingDWPT;
    final DocumentsWriterPerThread dwpt;
    try {
      if (!perThread.isActive()) {
        ensureOpen();
        assert false: "perThread is not active but we are still open";
      }
       
      dwpt = perThread.perThread;
      try {
        dwpt.updateDocument(doc, analyzer, delTerm); 
        numDocsInRAM.incrementAndGet();
      } finally {
        if(dwpt.checkAndResetHasAborted()) {
            flushControl.doOnAbort(perThread);
        }
      }
      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);
    } finally {
      perThread.unlock();
    }
    
    maybeMerge |= doFlush(flushingDWPT);
    return maybeMerge;
  }

