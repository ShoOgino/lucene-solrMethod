  boolean updateDocument(final Document doc, final Analyzer analyzer,
      final Term delTerm) throws CorruptIndexException, IOException {
    ensureOpen();
    boolean maybeMerge = false;
    final boolean isUpdate = delTerm != null;
    if (healthiness.anyStalledThreads()) {

      // Help out flushing any pending DWPTs so we can un-stall:
      if (infoStream != null) {
        message("WARNING DocumentsWriter has stalled threads; will hijack this thread to flush pending segment(s)");
      }

      // Try pick up pending threads here if possible
      DocumentsWriterPerThread flushingDWPT;
      while ((flushingDWPT = flushControl.nextPendingFlush()) != null) {
        // Don't push the delete here since the update could fail!
        maybeMerge = doFlush(flushingDWPT);
        if (!healthiness.anyStalledThreads()) {
          break;
        }
      }

      if (infoStream != null && healthiness.anyStalledThreads()) {
        message("WARNING DocumentsWriter still has stalled threads; waiting");
      }

      healthiness.waitIfStalled(); // block if stalled

      if (infoStream != null && healthiness.anyStalledThreads()) {
        message("WARNING DocumentsWriter done waiting");
      }
    }

    final ThreadState perThread = perThreadPool.getAndLock(Thread.currentThread(),
        this, doc);
    final DocumentsWriterPerThread flushingDWPT;
    
    try {

      if (!perThread.isActive()) {
        ensureOpen();
        assert false: "perThread is not active but we are still open";
      }
       
      final DocumentsWriterPerThread dwpt = perThread.perThread;
      try {
        dwpt.updateDocument(doc, analyzer, delTerm); 
        numDocsInRAM.incrementAndGet();
      } finally {
        if (dwpt.checkAndResetHasAborted()) {
          flushControl.doOnAbort(perThread);
        }
      }
      flushingDWPT = flushControl.doAfterDocument(perThread, isUpdate);
    } finally {
      perThread.unlock();
    }
    
    if (flushingDWPT != null) {
      maybeMerge |= doFlush(flushingDWPT);
    }
    return maybeMerge;
  }

