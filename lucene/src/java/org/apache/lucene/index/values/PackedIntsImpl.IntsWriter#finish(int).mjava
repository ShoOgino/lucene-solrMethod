    @Override
    public synchronized void finish(int docCount) throws IOException {
      if (!started)
        return;
      final IndexOutput datOut = dir.createOutput(IndexFileNames
          .segmentFileName(id, "", DATA_EXTENSION));
      CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);

      // TODO -- long can't work right since it's signed
      datOut.writeLong(minValue);
      // write a default value to recognize docs without a value for that field
      final long defaultValue = ++maxValue - minValue;
      datOut.writeLong(defaultValue);
      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount, PackedInts
          .bitsRequired(maxValue - minValue));
      final int firstDoc = defaultValues.nextSetBit(0);
      assert firstDoc >= 0; // we have at lest one value!
      for (int i = 0; i < firstDoc; i++) {
        w.add(defaultValue); // fill with defaults until first bit set
      }
      lastDocId++;
      for (int i = firstDoc; i < lastDocId;) {
        w.add(docToValue[i] - minValue);
        final int nextValue = defaultValues.nextSetBit(i);
        for (i++; i < nextValue; i++) {
          w.add(defaultValue); // fill all gaps
        }
      }
      for (int i = lastDocId; i < docCount; i++) {
        w.add(defaultValue);
      }
      w.finish();
      datOut.close();
      bytesUsed.addAndGet(-(RamUsageEstimator.NUM_BYTES_LONG * docToValue.length ));
      docToValue = null;
      
    }

