  /**
   * Creates a new {@link IndexDocValues} instance that provides either memory
   * resident or iterative access to a per-document stored <tt>byte[]</tt>
   * value. The returned {@link IndexDocValues} instance will be initialized without
   * consuming a significant amount of memory.
   * 
   * @param dir
   *          the directory to load the {@link IndexDocValues} from.
   * @param id
   *          the file ID in the {@link Directory} to load the values from.
   * @param mode
   *          the mode used to store the values
   * @param fixedSize
   *          <code>true</code> iff the values are stored with fixed-size,
   *          otherwise <code>false</code>
   * @param maxDoc
   *          the number of document values stored for the given ID
   * @return an initialized {@link IndexDocValues} instance.
   * @throws IOException
   *           if an {@link IOException} occurs
   */
  public static IndexDocValues getValues(Directory dir, String id, Mode mode,
      boolean fixedSize, int maxDoc) throws IOException {
    //nocommit this and all the readers below need an IOContext too

    // TODO -- I can peek @ header to determing fixed/mode?
    if (fixedSize) {
      if (mode == Mode.STRAIGHT) {
        return new FixedStraightBytesImpl.Reader(dir, id, maxDoc);
      } else if (mode == Mode.DEREF) {
        return new FixedDerefBytesImpl.Reader(dir, id, maxDoc);
      } else if (mode == Mode.SORTED) {
        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc);
      }
    } else {
      if (mode == Mode.STRAIGHT) {
        return new VarStraightBytesImpl.Reader(dir, id, maxDoc);
      } else if (mode == Mode.DEREF) {
        return new VarDerefBytesImpl.Reader(dir, id, maxDoc);
      } else if (mode == Mode.SORTED) {
        return new VarSortedBytesImpl.Reader(dir, id, maxDoc);
      }
    }

    throw new IllegalArgumentException("Illegal Mode: " + mode);
  }

