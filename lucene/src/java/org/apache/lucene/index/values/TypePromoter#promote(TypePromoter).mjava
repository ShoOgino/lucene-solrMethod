  /**
   * Creates a new promoted {@link TypePromoter} based on this and the given
   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} 
   * aren't compatible.
   * 
   * @param promoter
   *          the incoming promoter
   * @return a new promoted {@link TypePromoter} based on this and the given
   *         {@link TypePromoter} or <code>null</code> iff the
   *         {@link TypePromoter} aren't compatible.
   */
  public TypePromoter promote(TypePromoter promoter) {

    int promotedFlags = promoter.flags & this.flags;
    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);
    if (promoted == null) {
      return promoted;
    }
    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {
      if (this.valueSize == promoter.valueSize) {
        return promoted;
      }
      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),
          VAR_TYPE_VALUE_SIZE);
    }
    return promoted;

  }

