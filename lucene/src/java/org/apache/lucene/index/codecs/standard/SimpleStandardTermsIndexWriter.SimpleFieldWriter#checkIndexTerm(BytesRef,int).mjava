    @Override
    public boolean checkIndexTerm(BytesRef text, int docFreq) throws IOException {
      // First term is first indexed term:
      if (0 == (numTerms++ % termIndexInterval)) {

        // we can safely strip off the non-distinguishing
        // suffix to save RAM in the loaded terms index.
        final int limit = Math.min(lastTerm.length, text.length);
        int minPrefixDiff = 1+lastTerm.length;
        for(int byteIdx=0;byteIdx<limit;byteIdx++) {
          if (lastTerm.bytes[lastTerm.offset+byteIdx] != text.bytes[text.offset+byteIdx]) {
            minPrefixDiff = byteIdx+1;
            break;
          }
        }

        // write only the min prefix that shows the diff
        // against prior term
        out.writeBytes(text.bytes, text.offset, minPrefixDiff);

        if (termLengths.length == numIndexTerms) {
          termLengths = ArrayUtil.grow(termLengths);
        }
        if (termsPointerDeltas.length == numIndexTerms) {
          termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);
        }

        // save delta terms pointer
        final long fp = termsOut.getFilePointer();
        termsPointerDeltas[numIndexTerms] = (int) (fp - lastTermsPointer);
        lastTermsPointer = fp;

        // save term length (in bytes)
        assert minPrefixDiff <= Short.MAX_VALUE;
        termLengths[numIndexTerms] = (short) minPrefixDiff;
        totTermLength += minPrefixDiff;

        lastTerm.copy(text);
        numIndexTerms++;
        return true;
      } else {
        if (0 == numTerms % termIndexInterval) {
          // save last term just before next index term so we
          // can compute wasted suffix
          lastTerm.copy(text);
        }
        return false;
      }
    }

