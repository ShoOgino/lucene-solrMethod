  /**
   * 
   * Creates a new {@link DefaultDocValuesProducer} instance and loads all
   * {@link IndexDocValues} instances for this segment and codec.
   * 
   * @param si
   *          the segment info to load the {@link IndexDocValues} for.
   * @param dir
   *          the directory to load the {@link IndexDocValues} from.
   * @param fieldInfo
   *          the {@link FieldInfos}
   * @param codecId
   *          the codec ID
   * @param useCompoundFile
   *          if <code>true</code> this producer opens a compound file to read
   *          IndexDocValues fields, otherwise each field defines its own set of
   *          files.
   * @param sortComparator
   *          defines the sort order for sorted IndexDocValues variants
   * @throws IOException
   *           if an {@link IOException} occurs
   */
  public DefaultDocValuesProducer(SegmentInfo si, Directory dir, 
      FieldInfos fieldInfo, int codecId, boolean useCompoundFile, Comparator<BytesRef> sortComparator) throws IOException {
    this.useCompoundFile = useCompoundFile;
    this.sortComparator = sortComparator;
    final Directory directory;
    if (useCompoundFile) {
      cfs = directory = dir.openCompoundInput(IndexFileNames.segmentFileName(si.name, codecId, IndexFileNames.COMPOUND_FILE_EXTENSION), 1024);
    } else {
      cfs = null;
      directory = dir;
    }
    docValues = load(fieldInfo, si.name, si.docCount, directory, codecId);
  }

