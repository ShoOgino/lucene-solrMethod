  @Override
  public void close() throws IOException {

    IOException ioe = null;
    try {
      
      int nonZeroCount = 0;
      for(TermsWriter field : fields) {
        if (field.numTerms > 0) {
          nonZeroCount++;
        }
      }

      final long dirStart = out.getFilePointer();
      final long indexDirStart = indexOut.getFilePointer();

      out.writeVInt(nonZeroCount);
      
      for(TermsWriter field : fields) {
        if (field.numTerms > 0) {
          //System.out.println("  field " + field.fieldInfo.name + " " + field.numTerms + " terms");
          out.writeVInt(field.fieldInfo.number);
          out.writeVLong(field.numTerms);
          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();
          assert rootCode != null: "field=" + field.fieldInfo.name + " numTerms=" + field.numTerms;
          out.writeVInt(rootCode.length);
          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);
          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {
            out.writeVLong(field.sumTotalTermFreq);
          }
          out.writeVLong(field.sumDocFreq);
          out.writeVInt(field.docCount);
          indexOut.writeVLong(field.indexStartFP);
        }
      }
      writeTrailer(dirStart);
      writeIndexTrailer(indexDirStart);
    } catch (IOException ioe2) {
      ioe = ioe2;
    } finally {
      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);
    }
  }

