  @Override
  public void startDoc(int docID, int termDocFreq) throws IOException {

    assert docID >= 0: "got docID=" + docID;
        
    if (!pulsed && pendingDocCount == pendingDocs.length) {
      
      // OK we just crossed the threshold, this term should
      // now be written with our wrapped codec:
      wrappedPostingsWriter.startTerm();
      
      // Flush all buffered docs
      for(int i=0;i<pendingDocCount;i++) {
        final Document doc = pendingDocs[i];

        wrappedPostingsWriter.startDoc(doc.docID, doc.termDocFreq);

        if (!omitTF) {
          assert doc.termDocFreq == doc.numPositions;
          for(int j=0;j<doc.termDocFreq;j++) {
            final Position pos = doc.positions[j];
            if (pos.payload != null && pos.payload.length > 0) {
              assert storePayloads;
              wrappedPostingsWriter.addPosition(pos.pos, pos.payload);
            } else {
              wrappedPostingsWriter.addPosition(pos.pos, null);
            }
          }
          wrappedPostingsWriter.finishDoc();
        }
      }

      pendingDocCount = 0;

      pulsed = true;
    }

    if (pulsed) {
      // We've already seen too many docs for this term --
      // just forward to our fallback writer
      wrappedPostingsWriter.startDoc(docID, termDocFreq);
    } else {
      currentDoc = pendingDocs[pendingDocCount++];
      currentDoc.docID = docID;
      // TODO: -- need not store in doc?  only used for alloc & assert
      currentDoc.termDocFreq = termDocFreq;
      if (termDocFreq > currentDoc.positions.length) {
        currentDoc.reallocPositions(termDocFreq);
      }
      currentDoc.numPositions = 0;
    }
  }

