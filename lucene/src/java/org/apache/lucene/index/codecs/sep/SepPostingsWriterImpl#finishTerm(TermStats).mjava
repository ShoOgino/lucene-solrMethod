  /** Called when we are done adding docs to this term */
  @Override
  public void finishTerm(TermStats stats) throws IOException {
    // TODO: -- wasteful we are counting this in two places?
    assert stats.docFreq > 0;
    assert stats.docFreq == df;

    final boolean isFirstTerm = pendingTermCount == 0;  
    //System.out.println("SepW.finishTerm: isFirstTerm=" + isFirstTerm);

    docIndex.write(indexBytesWriter, isFirstTerm);
    //System.out.println("  docIndex=" + docIndex);

    if (!omitTF) {
      freqIndex.write(indexBytesWriter, isFirstTerm);
      //System.out.println("  freqIndex=" + freqIndex);

      posIndex.write(indexBytesWriter, isFirstTerm);
      //System.out.println("  posIndex=" + posIndex);
      if (storePayloads) {
        if (isFirstTerm) {
          indexBytesWriter.writeVLong(payloadStart);
        } else {
          indexBytesWriter.writeVLong(payloadStart - lastPayloadStart);
        }
        lastPayloadStart = payloadStart;
        //System.out.println("  payloadFP=" + payloadStart);
      }
    }

    if (df >= skipMinimum) {
      //System.out.println("  skipFP=" + skipStart);
      final long skipFP = skipOut.getFilePointer();
      skipListWriter.writeSkip(skipOut);
      //System.out.println("   writeSkip @ " + indexBytesWriter.getFilePointer());
      if (isFirstTerm) {
        indexBytesWriter.writeVLong(skipFP);
      } else {
        indexBytesWriter.writeVLong(skipFP - lastSkipFP);
      }
      lastSkipFP = skipFP;
    } else if (isFirstTerm) {
      // TODO: this is somewhat wasteful; eg if no terms in
      // this block will use skip data, we don't need to
      // write this:
      final long skipFP = skipOut.getFilePointer();
      indexBytesWriter.writeVLong(skipFP);
      lastSkipFP = skipFP;
    }

    lastDocID = 0;
    df = 0;
    pendingTermCount++;
  }

