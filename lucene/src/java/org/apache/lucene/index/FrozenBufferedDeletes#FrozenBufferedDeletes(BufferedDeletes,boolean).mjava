  public FrozenBufferedDeletes(BufferedDeletes deletes, boolean isSegmentPrivate) {
    this.isSegmentPrivate = isSegmentPrivate;
    assert !isSegmentPrivate || deletes.terms.size() == 0 : "segment private package should only have del queries"; 
    terms = deletes.terms.keySet().toArray(new Term[deletes.terms.size()]);
    queries = new Query[deletes.queries.size()];
    queryLimits = new int[deletes.queries.size()];
    int upto = 0;
    for(Map.Entry<Query,Integer> ent : deletes.queries.entrySet()) {
      queries[upto] = ent.getKey();
      queryLimits[upto] = ent.getValue();
      upto++;
    }
    int termDataBytes = 0;
    for(Map.Entry<Term,Integer> ent : deletes.terms.entrySet()) {
      final Term term = ent.getKey();
      termDataBytes += term.bytes().length;
      termDataBytes += term.field().length() * RamUsageEstimator.NUM_BYTES_CHAR;
    }
    bytesUsed = terms.length * BYTES_PER_DEL_TERM + queries.length * BYTES_PER_DEL_QUERY + termDataBytes;
    numTermDeletes = deletes.numTermDeletes.get();
  }

