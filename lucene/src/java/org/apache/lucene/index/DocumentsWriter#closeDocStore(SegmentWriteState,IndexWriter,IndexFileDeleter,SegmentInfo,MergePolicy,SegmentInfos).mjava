  /** Closes the current open doc stores an sets the
   *  docStoreSegment and docStoreUseCFS on the provided
   *  SegmentInfo. */
  synchronized void closeDocStore(SegmentWriteState flushState, IndexWriter writer, IndexFileDeleter deleter, SegmentInfo newSegment, MergePolicy mergePolicy, SegmentInfos segmentInfos) throws IOException {
    
    final boolean isSeparate = numDocsInRAM == 0 || !segment.equals(docStoreSegment);

    assert docStoreSegment != null;

    if (infoStream != null) {
      message("closeDocStore: openFiles=" + openFiles + "; segment=" + docStoreSegment + "; docStoreOffset=" + docStoreOffset + "; numDocsInStore=" + numDocsInStore + "; isSeparate=" + isSeparate);
    }

    closedFiles.clear();
    consumer.closeDocStore(flushState);
    flushState.numDocsInStore = 0;
    assert 0 == openFiles.size();

    if (isSeparate) {
      flushState.flushedFiles.clear();

      if (mergePolicy.useCompoundDocStore(segmentInfos)) {

        final String compoundFileName = IndexFileNames.segmentFileName(docStoreSegment, "", IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);

        if (infoStream != null) {
          message("closeDocStore: create compound file " + compoundFileName);
        }

        boolean success = false;
        try {

          CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);
          for (final String file : closedFiles) {
            cfsWriter.addFile(file);
          }
      
          // Perform the merge
          cfsWriter.close();

          success = true;
        } finally {
          if (!success) {
            deleter.deleteFile(compoundFileName);
          }
        }

        // In case the files we just merged into a CFS were
        // not registered w/ IFD:
        deleter.deleteNewFiles(closedFiles);

        final int numSegments = segmentInfos.size();
        for(int i=0;i<numSegments;i++) {
          SegmentInfo si = segmentInfos.info(i);
          if (si.getDocStoreOffset() != -1 &&
              si.getDocStoreSegment().equals(docStoreSegment)) {
            si.setDocStoreIsCompoundFile(true);
          }
        }

        newSegment.setDocStoreIsCompoundFile(true);
        if (infoStream != null) {
          message("closeDocStore: after compound file index=" + segmentInfos);
        }

        writer.checkpoint();
      }
    }

    docStoreSegment = null;
    docStoreOffset = 0;
    numDocsInStore = 0;
  }

