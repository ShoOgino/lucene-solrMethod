  void markForFullFlush() {
    final DocumentsWriterDeleteQueue flushingQueue;
    synchronized (this) {
      assert !fullFlush;
      fullFlush = true;
      flushingQueue = documentsWriter.deleteQueue;
      // set a new delete queue - all subsequent DWPT will use this queue until
      // we do another full flush
      documentsWriter.deleteQueue = new DocumentsWriterDeleteQueue(new BufferedDeletes(false));
    }
    final Iterator<ThreadState> allActiveThreads = perThreadPool
    .getActivePerThreadsIterator();
    final ArrayList<DocumentsWriterPerThread> toFlush = new ArrayList<DocumentsWriterPerThread>();
    while (allActiveThreads.hasNext()) {
      final ThreadState next = allActiveThreads.next();
      next.lock();
      try {
        if (!next.isActive()) {
          continue; 
        }
        if (next.perThread.deleteQueue != flushingQueue) {
          // this one is already a new DWPT
          continue;
        }
        if (next.perThread.getNumDocsInRAM() > 0 ) {
          final DocumentsWriterPerThread dwpt = next.perThread; // just for assert
          final DocumentsWriterPerThread flushingDWPT = internalTryCheckOutForFlush(next, true);
          assert flushingDWPT != null : "DWPT must never be null here since we hold the lock and it holds documents";
          assert dwpt == flushingDWPT : "flushControl returned different DWPT";
          toFlush.add(flushingDWPT);
        } else {
          // get the new delete queue from DW
          next.perThread.initialize();
        }
      } finally {
        next.unlock();
      }
    }
    synchronized (this) {
      flushQueue.addAll(blockedFlushes);
      blockedFlushes.clear();
      flushQueue.addAll(toFlush);
    }
  }

