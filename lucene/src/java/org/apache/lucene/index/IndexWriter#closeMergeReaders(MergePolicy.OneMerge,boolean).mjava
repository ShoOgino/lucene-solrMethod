  private synchronized void closeMergeReaders(MergePolicy.OneMerge merge, boolean suppressExceptions) throws IOException {
    final int numSegments = merge.segments.size();
    if (suppressExceptions) {
      // Suppress any new exceptions so we throw the
      // original cause
      boolean anyChanges = false;
      for (int i=0;i<numSegments;i++) {
        if (merge.readers[i] != null) {
          try {
            anyChanges |= readerPool.release(merge.readers[i], false);
          } catch (Throwable t) {
          }
          merge.readers[i] = null;
        }

        if (merge.readersClone[i] != null) {
          try {
            merge.readersClone[i].close();
          } catch (Throwable t) {
          }
          // This was a private clone and we had the
          // only reference
          assert merge.readersClone[i].getRefCount() == 0: "refCount should be 0 but is " + merge.readersClone[i].getRefCount();
          merge.readersClone[i] = null;
        }
      }
      if (anyChanges) {
        checkpoint();
      }
    } else {
      for (int i=0;i<numSegments;i++) {
        if (merge.readers[i] != null) {
          readerPool.release(merge.readers[i], true);
          merge.readers[i] = null;
        }

        if (merge.readersClone[i] != null) {
          merge.readersClone[i].close();
          // This was a private clone and we had the only reference
          assert merge.readersClone[i].getRefCount() == 0;
          merge.readersClone[i] = null;
        }
      }
    }
  }

