  /**
   * Adds a document to this index, using the provided analyzer instead of the
   * value of {@link #getAnalyzer()}.  If the document contains more than
   * {@link #setMaxFieldLength(int)} terms for a given field, the remainder are
   * discarded.
   *
   * <p>See {@link #addDocument(Document)} for details on
   * index and IndexWriter state after an Exception, and
   * flushing/merging temporary free space requirements.</p>
   *
   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError
   * you should immediately close the writer.  See <a
   * href="#OOME">above</a> for details.</p>
   *
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */
  public long addDocument(Document doc, Analyzer analyzer) throws CorruptIndexException, IOException {
    ensureOpen();
    boolean success = false;
    try {
      try {
        long sequenceID = docWriter.addDocument(doc, analyzer);
        success = true;
        return sequenceID;
      } finally {
        if (!success) {
          if (infoStream != null) {
            message("hit exception adding document");
          }
          synchronized (this) {
            // If docWriter has some aborted files that were
            // never incref'd, then we clean them up here
            if (docWriter != null) {
              final Collection<String> files = docWriter.abortedFiles();
              if (files != null) {
                deleter.deleteNewFiles(files);
              }
            }
          }
        }
      }
    } catch (OutOfMemoryError oom) {
      handleOOM(oom, "addDocument");
    }
    
    return -1;
  }

