  @Override
  public MergeSpecification findMergesForOptimize(SegmentInfos segmentInfos, int maxSegmentCount, Set<SegmentInfo> segmentsToOptimize) throws CorruptIndexException, IOException {
    // first find all old segments
    final HashSet<SegmentInfo> oldSegments = new HashSet<SegmentInfo>();
    for (final SegmentInfo si : segmentInfos) {
      if (segmentsToOptimize.contains(si) && shouldUpgradeSegment(si)) {
        oldSegments.add(si);
      }
    }
    
    if (verbose()) message("findMergesForOptimize: segmentsToUpgrade=" + oldSegments);
      
    if (oldSegments.isEmpty())
      return null;

    MergeSpecification spec = base.findMergesForOptimize(segmentInfos, maxSegmentCount, oldSegments);    
    
    if (spec != null) {
      // remove all segments that are in merge specification from oldSegments,
      // the resulting set contains all segments that are left over
      // and will be merged to one additional segment:
      for (final OneMerge om : spec.merges) {
        oldSegments.removeAll(om.segments);
      }
    }

    if (!oldSegments.isEmpty()) {
      if (verbose())
        message("findMergesForOptimize: " +  base.getClass().getSimpleName() +
        " does not want to merge all old segments, merge remaining ones into new segment: " + oldSegments);
      final SegmentInfos newInfos = new SegmentInfos();
      for (final SegmentInfo si : segmentInfos) {
        if (oldSegments.contains(si)) {
          newInfos.add(si);
        }
      }
      // add the final merge
      if (spec == null) {
        spec = new MergeSpecification();
      }
      spec.add(new OneMerge(newInfos));
    }

    return spec;
  }

