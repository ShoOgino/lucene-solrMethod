  DocValuesConsumer docValuesConsumer(DocState docState, FieldInfo fieldInfo) 
      throws IOException {
    DocValuesConsumerAndDocID docValuesConsumerAndDocID = docValues.get(fieldInfo.name);
    if (docValuesConsumerAndDocID != null) {
      if (docState.docID == docValuesConsumerAndDocID.docID) {
        throw new IllegalArgumentException("IndexDocValuesField \"" + fieldInfo.name + "\" appears more than once in this document (only one value is allowed, per field)");
      }
      assert docValuesConsumerAndDocID.docID < docState.docID;
      docValuesConsumerAndDocID.docID = docState.docID;
      return docValuesConsumerAndDocID.docValuesConsumer;
    }
    PerDocConsumer perDocConsumer = perDocConsumers.get(fieldInfo.getCodecId());
    if (perDocConsumer == null) {
      PerDocWriteState perDocWriteState = docState.docWriter.newPerDocWriteState(fieldInfo.getCodecId());
      SegmentCodecs codecs = perDocWriteState.segmentCodecs;
      assert codecs.codecs.length > fieldInfo.getCodecId();
      Codec codec = codecs.codecs[fieldInfo.getCodecId()];
      perDocConsumer = codec.docsConsumer(perDocWriteState);
      perDocConsumers.put(Integer.valueOf(fieldInfo.getCodecId()), perDocConsumer);
    }
    boolean success = false;
    DocValuesConsumer docValuesConsumer = null;
    try {
      docValuesConsumer = perDocConsumer.addValuesField(fieldInfo);
      fieldInfo.commitDocValues();
      success = true;
    } finally {
      if (!success) {
        fieldInfo.revertUncommitted();
      }
    }

    docValuesConsumerAndDocID = new DocValuesConsumerAndDocID(docValuesConsumer);
    docValuesConsumerAndDocID.docID = docState.docID;
    docValues.put(fieldInfo.name, docValuesConsumerAndDocID);
    return docValuesConsumer;
  }

