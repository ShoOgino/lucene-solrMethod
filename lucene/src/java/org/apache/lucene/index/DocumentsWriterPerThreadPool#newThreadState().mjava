  /**
   * Returns a new {@link ThreadState} iff any new state is available otherwise
   * <code>null</code>.
   * <p>
   * NOTE: the returned {@link ThreadState} is already locked iff non-
   * <code>null</code>.
   * 
   * @return a new {@link ThreadState} iff any new state is available otherwise
   *         <code>null</code>
   */
  public synchronized ThreadState newThreadState() {
    if (numThreadStatesActive < perThreads.length) {
      final ThreadState threadState = perThreads[numThreadStatesActive];
      threadState.lock(); // lock so nobody else will get this ThreadState
      boolean unlock = true;
      try {
        if (threadState.isActive()) {
          // unreleased thread states are deactivated during DW#close()
          numThreadStatesActive++; // increment will publish the ThreadState
          assert threadState.perThread != null;
          threadState.perThread.initialize();
          unlock = false;
          return threadState;
        }
        // unlock since the threadstate is not active anymore - we are closed!
        assert assertUnreleasedThreadStatesInactive();
        return null;
      } finally {
        if (unlock) {
          // in any case make sure we unlock if we fail 
          threadState.unlock();
        }
      }
    }
    return null;
  }

