    public int read(int[] docs, int[] freqs) throws IOException {
      if (any && pendingBulkResult == null) {
        pendingBulkResult = docsEnum.getBulkResult();
      }
      if (!any) {
        return 0;
      } else if (pendingBulk > 0) {
        final int left = bulkCount - pendingBulk;
        if (docs.length >= left) {
          // read all pending
          System.arraycopy(pendingBulkResult.docs.ints, pendingBulk, docs, 0, left);
          System.arraycopy(pendingBulkResult.freqs.ints, pendingBulk, freqs, 0, left);
          pendingBulk = 0;
          return left;
        } else {
          // read only part of pending
          System.arraycopy(pendingBulkResult.docs.ints, pendingBulk, docs, 0, docs.length);
          System.arraycopy(pendingBulkResult.freqs.ints, pendingBulk, freqs, 0, docs.length);
          pendingBulk += docs.length;
          return docs.length;
        }
      } else {
        // nothing pending
        bulkCount = docsEnum.read();
        if (docs.length >= bulkCount) {
          System.arraycopy(pendingBulkResult.docs.ints, 0, docs, 0, bulkCount);
          System.arraycopy(pendingBulkResult.freqs.ints, 0, freqs, 0, bulkCount);
          return bulkCount;
        } else {
          System.arraycopy(pendingBulkResult.docs.ints, 0, docs, 0, docs.length);
          System.arraycopy(pendingBulkResult.freqs.ints, 0, freqs, 0, docs.length);
          pendingBulk = docs.length;
          return docs.length;
        }
      }
    }

