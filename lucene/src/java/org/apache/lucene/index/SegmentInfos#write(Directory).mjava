  private void write(Directory directory) throws IOException {

    String segmentFileName = getNextSegmentFileName();
    final String globalFieldMapFile;
    if (globalFieldNumberMap != null && globalFieldNumberMap.isDirty()) {
      globalFieldMapFile = getGlobalFieldNumberName(++globalFieldMapVersion);
      pendingMapVersion = writeGlobalFieldMap(globalFieldNumberMap, directory, globalFieldMapFile);
    } else {
      globalFieldMapFile = null;
    }
    
    
    // Always advance the generation on write:
    if (generation == -1) {
      generation = 1;
    } else {
      generation++;
    }
    
    IndexOutput segnOutput = null;
    

    boolean success = false;

    try {
      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();
      segnOutput = infosWriter.writeInfos(directory, segmentFileName, this, IOContext.DEFAULT);
      infosWriter.prepareCommit(segnOutput);
      pendingSegnOutput = segnOutput;
      success = true;
    } finally {
      if (!success) {
        // We hit an exception above; try to close the file
        // but suppress any exception:
        IOUtils.closeWhileHandlingException(segnOutput);
        try {
          // Try not to leave a truncated segments_N file in
          // the index:
          directory.deleteFile(segmentFileName);
        } catch (Throwable t) {
          // Suppress so we keep throwing the original exception
        }
        if (globalFieldMapFile != null) { // delete if written here
          try {
            // Try not to leave global field map in
            // the index:
            directory.deleteFile(globalFieldMapFile);
          } catch (Throwable t) {
            // Suppress so we keep throwing the original exception
          }
        }
        pendingMapVersion = -1;
      }
    }
  }

