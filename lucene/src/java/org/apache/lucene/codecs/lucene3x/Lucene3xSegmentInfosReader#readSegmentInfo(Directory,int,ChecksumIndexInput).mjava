  // if we make a preflex impl we can remove a lot of this hair...
  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {
    final String version;
    if (format <= SegmentInfos.FORMAT_3_1) {
      version = input.readString();
    } else {
      version = null;
    }
    final String name = input.readString();
    final int docCount = input.readInt();
    final long delGen = input.readLong();
    final int docStoreOffset = input.readInt();
    final String docStoreSegment;
    final boolean docStoreIsCompoundFile;
    if (docStoreOffset != -1) {
      docStoreSegment = input.readString();
      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;
    } else {
      docStoreSegment = name;
      docStoreIsCompoundFile = false;
    }

    // pre-4.0 indexes write a byte if there is a single norms file
    byte b = input.readByte();
    assert 1 == b : "expected 1 but was: "+ b + " format: " + format;

    final int numNormGen = input.readInt();
    final Map<Integer,Long> normGen;
    if (numNormGen == SegmentInfo.NO) {
      normGen = null;
    } else {
      normGen = new HashMap<Integer, Long>();
      for(int j=0;j<numNormGen;j++) {
        normGen.put(j, input.readLong());
      }
    }
    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;

    final int delCount = input.readInt();
    assert delCount <= docCount;

    final int hasProx = input.readByte();

    final Codec codec = Codec.forName("Lucene3x");
    final Map<String,String> diagnostics = input.readStringStringMap();

    final int hasVectors;
    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {
      hasVectors = input.readByte();
    } else {
      final String storesSegment;
      final String ext;
      final boolean storeIsCompoundFile;
      if (docStoreOffset != -1) {
        storesSegment = docStoreSegment;
        storeIsCompoundFile = docStoreIsCompoundFile;
        ext = IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;
      } else {
        storesSegment = name;
        storeIsCompoundFile = isCompoundFile;
        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;
      }
      final Directory dirToTest;
      if (storeIsCompoundFile) {
        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, "", ext), IOContext.READONCE, false);
      } else {
        dirToTest = dir;
      }
      try {
        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, "", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION)) ? SegmentInfo.YES : SegmentInfo.NO;
      } finally {
        if (isCompoundFile) {
          dirToTest.close();
        }
      }
    }
    
    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,
      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,
      delCount, hasProx, codec, diagnostics, hasVectors);
  }

