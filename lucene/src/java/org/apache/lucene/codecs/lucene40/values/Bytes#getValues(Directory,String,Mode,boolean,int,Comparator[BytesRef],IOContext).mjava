  /**
   * Creates a new {@link DocValues} instance that provides either memory
   * resident or iterative access to a per-document stored <tt>byte[]</tt>
   * value. The returned {@link DocValues} instance will be initialized without
   * consuming a significant amount of memory.
   * 
   * @param dir
   *          the directory to load the {@link DocValues} from.
   * @param id
   *          the file ID in the {@link Directory} to load the values from.
   * @param mode
   *          the mode used to store the values
   * @param fixedSize
   *          <code>true</code> iff the values are stored with fixed-size,
   *          otherwise <code>false</code>
   * @param maxDoc
   *          the number of document values stored for the given ID
   * @param sortComparator {@link BytesRef} comparator used by sorted variants. 
   *        If <code>null</code> {@link BytesRef#getUTF8SortedAsUnicodeComparator()}
   *        is used instead
   * @return an initialized {@link DocValues} instance.
   * @throws IOException
   *           if an {@link IOException} occurs
   */
  public static DocValues getValues(Directory dir, String id, Mode mode,
      boolean fixedSize, int maxDoc, Comparator<BytesRef> sortComparator, IOContext context) throws IOException {
    if (sortComparator == null) {
      sortComparator = BytesRef.getUTF8SortedAsUnicodeComparator();
    }
    // TODO -- I can peek @ header to determing fixed/mode?
    if (fixedSize) {
      if (mode == Mode.STRAIGHT) {
        return new FixedStraightBytesImpl.FixedStraightReader(dir, id, maxDoc, context);
      } else if (mode == Mode.DEREF) {
        return new FixedDerefBytesImpl.FixedDerefReader(dir, id, maxDoc, context);
      } else if (mode == Mode.SORTED) {
        return new FixedSortedBytesImpl.Reader(dir, id, maxDoc, context, Type.BYTES_FIXED_SORTED, sortComparator);
      }
    } else {
      if (mode == Mode.STRAIGHT) {
        return new VarStraightBytesImpl.VarStraightReader(dir, id, maxDoc, context);
      } else if (mode == Mode.DEREF) {
        return new VarDerefBytesImpl.VarDerefReader(dir, id, maxDoc, context);
      } else if (mode == Mode.SORTED) {
        return new VarSortedBytesImpl.Reader(dir, id, maxDoc,context, Type.BYTES_VAR_SORTED, sortComparator);
      }
    }

    throw new IllegalArgumentException("Illegal Mode: " + mode);
  }

