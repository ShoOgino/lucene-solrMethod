  /**
   * Factory method to create a {@link Writer} instance for a given type. This
   * method returns default implementations for each of the different types
   * defined in the {@link Type} enumeration.
   * 
   * @param type
   *          the {@link Type} to create the {@link Writer} for
   * @param id
   *          the file name id used to create files within the writer.
   * @param directory
   *          the {@link Directory} to create the files from.
   * @param bytesUsed
   *          a byte-usage tracking reference
   * @param fasterButMoreRam Whether the space used for packed ints should be rounded up for higher lookup performance.
   *                         Currently this parameter only applies for types {@link Type#BYTES_VAR_SORTED}
   *                         and {@link Type#BYTES_FIXED_SORTED}.
   * @return a new {@link Writer} instance for the given {@link Type}
   * @throws IOException
   */
  public static Writer create(Type type, String id, Directory directory,
      Comparator<BytesRef> comp, Counter bytesUsed, IOContext context, boolean fasterButMoreRam) throws IOException {
    if (comp == null) {
      comp = BytesRef.getUTF8SortedAsUnicodeComparator();
    }
    switch (type) {
    case FIXED_INTS_16:
    case FIXED_INTS_32:
    case FIXED_INTS_64:
    case FIXED_INTS_8:
    case VAR_INTS:
      return Ints.getWriter(directory, id, bytesUsed, type, context);
    case FLOAT_32:
      return Floats.getWriter(directory, id, bytesUsed, context, type);
    case FLOAT_64:
      return Floats.getWriter(directory, id, bytesUsed, context, type);
    case BYTES_FIXED_STRAIGHT:
      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, true, comp,
          bytesUsed, context, fasterButMoreRam);
    case BYTES_FIXED_DEREF:
      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, true, comp,
          bytesUsed, context, fasterButMoreRam);
    case BYTES_FIXED_SORTED:
      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, true, comp,
          bytesUsed, context, fasterButMoreRam);
    case BYTES_VAR_STRAIGHT:
      return Bytes.getWriter(directory, id, Bytes.Mode.STRAIGHT, false, comp,
          bytesUsed, context, fasterButMoreRam);
    case BYTES_VAR_DEREF:
      return Bytes.getWriter(directory, id, Bytes.Mode.DEREF, false, comp,
          bytesUsed, context, fasterButMoreRam);
    case BYTES_VAR_SORTED:
      return Bytes.getWriter(directory, id, Bytes.Mode.SORTED, false, comp,
          bytesUsed, context, fasterButMoreRam);
    default:
      throw new IllegalArgumentException("Unknown Values: " + type);
    }
  }

