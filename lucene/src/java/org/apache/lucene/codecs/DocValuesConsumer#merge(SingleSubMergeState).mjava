  /**
   * Merges the given {@link SingleSubMergeState} into this {@link DocValuesConsumer}.
   * 
   * @param mergeState
   *          the {@link SingleSubMergeState} to merge
   * @throws IOException
   *           if an {@link IOException} occurs
   */
  protected void merge(SingleSubMergeState state) throws IOException {
    // This enables bulk copies in subclasses per MergeState, subclasses can
    // simply override this and decide if they want to merge
    // segments using this generic implementation or if a bulk merge is possible
    // / feasible.
    final Source source = state.reader.getDirectSource();
    assert source != null;
    setNextMergeSource(source); // set the current enum we are working on - the
    // impl. will get the correct reference for the type
    // it supports
    int docID = state.docBase;
    final Bits liveDocs = state.liveDocs;
    final int docCount = state.docCount;
    for (int i = 0; i < docCount; i++) {
      if (liveDocs == null || liveDocs.get(i)) {
        mergeDoc(docID++, i);
      }
    }
  }

