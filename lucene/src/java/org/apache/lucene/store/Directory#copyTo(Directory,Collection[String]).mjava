  /**
   * <p>Copy given files of this directory to destination directory. All conflicting files at destination are overwritten</p>
   * <p><b>NOTE:</b> the source directory should not change while this method is running.  Otherwise the results are
   * undefined and you could easily hit a FileNotFoundException. </p>
   * <p><b>NOTE:</b> implementations can check if destination directory is of the same type as 'this' and perform optimized copy</p>
   *
   * @param to        destination directory
   * @param filenames file names to be copied
   */
  public void copyTo(Directory to, Collection<String> filenames) throws IOException {
    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];
    for (String filename : filenames) {
      IndexOutput os = null;
      IndexInput is = null;
      IOException priorException = null;
      try {
        // create file in dest directory
        os = to.createOutput(filename);
        // read current file
        is = openInput(filename);
        // and copy to dest directory
        long len = is.length();
        long readCount = 0;
        while (readCount < len) {
          int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int) (len - readCount) : BufferedIndexOutput.BUFFER_SIZE;
          is.readBytes(buf, 0, toRead);
          os.writeBytes(buf, toRead);
          readCount += toRead;
        }
      } catch (IOException ioe) {
        priorException = ioe;
      } finally {
        IOUtils.closeSafely(priorException, os, is);
      }
    }
  }

