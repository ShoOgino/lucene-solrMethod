  /** Lucene default index order. Currently the same as String.compareTo() (UTF16) but will change
   * in the future to unsigned byte comparison. */
  public int compareTo(BytesRef other) {
    if (this == other) return 0;

    final byte[] aBytes = this.bytes;
    int aUpto = this.offset;
    final byte[] bBytes = other.bytes;
    int bUpto = other.offset;

    final int aStop = aUpto + Math.min(this.length, other.length);

    while(aUpto < aStop) {
      int aByte = aBytes[aUpto++] & 0xff;
      int bByte = bBytes[bUpto++] & 0xff;
      if (aByte != bByte) {

        // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order

        // We know the terms are not equal, but, we may
        // have to carefully fixup the bytes at the
        // difference to match UTF16's sort order:
        if (aByte >= 0xee && bByte >= 0xee) {
          if ((aByte & 0xfe) == 0xee) {
            aByte += 0x10;
          }
          if ((bByte&0xfe) == 0xee) {
            bByte += 0x10;
          }
        }
        return aByte - bByte;
      }
    }

    // One is a prefix of the other, or, they are equal:
    return this.length - other.length;
  }

