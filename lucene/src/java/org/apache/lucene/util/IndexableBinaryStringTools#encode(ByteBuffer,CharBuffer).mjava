  /**
   * Encodes the input byte sequence into the output char sequence. Before
   * calling this method, ensure that the output CharBuffer has sufficient
   * capacity by calling {@link #getEncodedLength(java.nio.ByteBuffer)}.
   * 
   * @param input The byte sequence to encode
   * @param output Where the char sequence encoding result will go. The limit is
   *        set to one past the position of the final char.
   * @throws IllegalArgumentException If either the input or the output buffer
   *         is not backed by an array
   * @deprecated Use {@link #encode(byte[], int, int, char[], int, int)}
   *             instead. This method will be removed in Lucene 4.0
   */
  @Deprecated
  public static void encode(ByteBuffer input, CharBuffer output) {
    if (input.hasArray() && output.hasArray()) {
      final int inputOffset = input.arrayOffset();
      final int inputLength = input.limit() - inputOffset;
      final int outputOffset = output.arrayOffset();
      final int outputLength = getEncodedLength(input.array(), inputOffset,
          inputLength);
      output.limit(outputLength + outputOffset);
      output.position(0);
      encode(input.array(), inputOffset, inputLength, output.array(),
          outputOffset, outputLength);
    } else {
      throw new IllegalArgumentException("Arguments must have backing arrays");
    }
  }

