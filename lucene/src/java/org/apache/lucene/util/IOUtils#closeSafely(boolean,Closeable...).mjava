  /**
   * Closes all given <tt>Closeable</tt>s, suppressing all thrown exceptions.
   * Some of the <tt>Closeable</tt>s may be null, they are ignored. After
   * everything is closed, and if {@code suppressExceptions} is {@code false},
   * method either throws the first of suppressed exceptions, or completes
   * normally.
   * 
   * @param suppressExceptions
   *          if true then exceptions that occur during close() are suppressed
   * @param objects
   *          objects to call <tt>close()</tt> on
   */
  public static void closeSafely(boolean suppressExceptions, Closeable... objects) throws IOException {
    Throwable th = null;

    for (Closeable object : objects) {
      try {
        if (object != null) {
          object.close();
        }
      } catch (Throwable t) {
        if (th == null)
          th = t;
      }
    }

    if (th != null && !suppressExceptions) {
      if (th instanceof IOException) throw (IOException) th;
      if (th instanceof RuntimeException) throw (RuntimeException) th;
      if (th instanceof Error) throw (Error) th;
      throw new RuntimeException(th);
    }
  }

