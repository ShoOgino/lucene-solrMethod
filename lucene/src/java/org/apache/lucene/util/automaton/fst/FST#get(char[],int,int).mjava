  /** Logically casts input to UTF32 ints then looks up the output
   *  or null if the input is not accepted.  FST must be
   *  INPUT_TYPE.BYTE4.  */
  public T get(char[] input, int offset, int length) throws IOException {
    assert inputType == INPUT_TYPE.BYTE4;

    if (length == 0) {
      return getEmptyOutput();
    }

    // TODO: would be nice not to alloc this on every lookup
    final FST.Arc<T> arc = new FST.Arc<T>();
    int node = getStartNode();
    int charIdx = offset;
    final int charLimit = offset + length;
    T output = NO_OUTPUT;
    while(charIdx < charLimit) {
      if (!hasArcs(node)) {
        // hit end of FST before input end
        return null;
      }

      final int utf32 = Character.codePointAt(input, charIdx);
      charIdx += Character.charCount(utf32);

      if (findArc(node, utf32, arc) != null) {
        node = arc.target;
        if (arc.output != NO_OUTPUT) {
          output = outputs.add(output, arc.output);
        }
      } else {
        return null;
      }
    }

    if (!arc.isFinal()) {
      // hit input's end before end node
      return null;
    }

    if (arc.nextFinalOutput != NO_OUTPUT) {
      output = outputs.add(output, arc.nextFinalOutput);
    }

    return output;
  }

