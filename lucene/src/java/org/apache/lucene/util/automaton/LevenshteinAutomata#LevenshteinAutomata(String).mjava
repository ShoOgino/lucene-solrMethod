  /**
   * Create a new LevenshteinAutomata for some input String.
   */
  public LevenshteinAutomata(String input) {
    this.input = input;
    this.word = input.toCharArray();
    
    // calculate the alphabet
    SortedSet<Character> set = new TreeSet<Character>();
    for (int i = 0; i < word.length; i++)
      set.add(word[i]);
    alphabet = new char[set.size()];
    Iterator<Character> iterator = set.iterator();
    for (int i = 0; i < alphabet.length; i++)
      alphabet[i] = iterator.next();
      
    rangeLower = new char[alphabet.length + 2];
    rangeUpper = new char[alphabet.length + 2];
    // calculate the unicode range intervals that exclude the alphabet
    // these are the ranges for all unicode characters not in the alphabet
    int lower = 0;
    for (int i = 0; i < alphabet.length; i++) {
      char higher = alphabet[i];
      if (higher > lower) {
        rangeLower[numRanges] = (char) lower;
        rangeUpper[numRanges] = (char) (higher - 1);
        numRanges++;
      }
      lower = higher + 1;
    }
    /* add the final endpoint */
    if (lower <= 0xFFFF) {
      rangeLower[numRanges] = (char) lower;
      rangeUpper[numRanges] = '\uFFFF';
      numRanges++;
    }

    descriptions = new ParametricDescription[] {
        null, /* for n=0, we do not need to go through the trouble */
        new Lev1ParametricDescription(input.length()),
        new Lev2ParametricDescription(input.length()),
    };
  }

