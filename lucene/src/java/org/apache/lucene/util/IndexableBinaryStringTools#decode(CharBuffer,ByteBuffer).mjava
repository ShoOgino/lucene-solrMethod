  /**
   * Decodes the input char sequence into the output byte sequence. Before
   * calling this method, ensure that the output ByteBuffer has sufficient
   * capacity by calling {@link #getDecodedLength(java.nio.CharBuffer)}.
   * 
   * @param input The char sequence to decode
   * @param output Where the byte sequence decoding result will go. The limit is
   *        set to one past the position of the final char.
   * @throws IllegalArgumentException If either the input or the output buffer
   *         is not backed by an array
   * @deprecated Use {@link #decode(char[], int, int, byte[], int, int)}
   *             instead. This method will be removed in Lucene 4.0
   */
  @Deprecated
  public static void decode(CharBuffer input, ByteBuffer output) {
    if (input.hasArray() && output.hasArray()) {
      final int inputOffset = input.arrayOffset();
      final int inputLength = input.limit() - inputOffset;
      final int outputOffset = output.arrayOffset();
      final int outputLength = getDecodedLength(input.array(), inputOffset,
          inputLength);
      output.limit(outputLength + outputOffset);
      output.position(0);
      decode(input.array(), inputOffset, inputLength, output.array(),
          outputOffset, outputLength);
    } else {
      throw new IllegalArgumentException("Arguments must have backing arrays");
    }
  }

