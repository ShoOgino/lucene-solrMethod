  /**
   * Converts a string produced by <code>timeToString</code> or
   * <code>dateToString</code> back to a time, represented as a
   * Date object.
   * 
   * @param dateString the date string to be converted
   * @return the parsed time as a Date object 
   * @throws ParseException if <code>dateString</code> is not in the 
   *  expected format 
   */
  public static Date stringToDate(String dateString) throws ParseException {
    final DateFormats formats = FORMATS.get();
    
    if (dateString.length() == 4) {
      return formats.YEAR_FORMAT.parse(dateString);
    } else if (dateString.length() == 6) {
      return formats.MONTH_FORMAT.parse(dateString);
    } else if (dateString.length() == 8) {
      return formats.DAY_FORMAT.parse(dateString);
    } else if (dateString.length() == 10) {
      return formats.HOUR_FORMAT.parse(dateString);
    } else if (dateString.length() == 12) {
      return formats.MINUTE_FORMAT.parse(dateString);
    } else if (dateString.length() == 14) {
      return formats.SECOND_FORMAT.parse(dateString);
    } else if (dateString.length() == 17) {
      return formats.MILLISECOND_FORMAT.parse(dateString);
    }
    throw new ParseException("Input is not valid date string: " + dateString, 0);
  }

