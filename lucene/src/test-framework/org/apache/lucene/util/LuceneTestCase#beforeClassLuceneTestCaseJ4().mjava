  @BeforeClass
  public static void beforeClassLuceneTestCaseJ4() {
    initRandom();
    state = State.INITIAL;
    tempDirs.clear();
    stores = Collections.synchronizedMap(new IdentityHashMap<MockDirectoryWrapper,StackTraceElement[]>());
    
    // enable this by default, for IDE consistency with ant tests (as its the default from ant)
    // TODO: really should be in solr base classes, but some extend LTC directly.
    // we do this in beforeClass, because some tests currently disable it
    if (System.getProperty("solr.directoryFactory") == null) {
      System.setProperty("solr.directoryFactory", "org.apache.solr.core.MockDirectoryFactory");
    }
    
    savedCodecProvider = CodecProvider.getDefault();
    if ("random".equals(TEST_CODECPROVIDER)) {
      if ("randomPerField".equals(TEST_CODEC)) {
        if (random.nextInt(4) == 0) { // preflex-only setup
          codec = installTestCodecs("PreFlex", CodecProvider.getDefault());
        } else { // per-field setup
          CodecProvider.setDefault(new RandomCodecProvider(random, useNoMemoryExpensiveCodec));
          codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());
        }
      } else { // ordinary setup
        codec = installTestCodecs(TEST_CODEC, CodecProvider.getDefault());
      }
    } else {
      // someone specified their own codecprovider by class
      try {
        Class<? extends CodecProvider> cpClazz = Class.forName(TEST_CODECPROVIDER).asSubclass(CodecProvider.class);
        CodecProvider cp = cpClazz.newInstance();
        String codecName;
        if (TEST_CODEC.startsWith("random")) { // TODO: somehow do random per-field?!
          Set<String> codecSet = cp.listAll();
          String availableCodecs[] = codecSet.toArray(new String[codecSet.size()]);
          codecName = availableCodecs[random.nextInt(availableCodecs.length)];
        } else {
          codecName = TEST_CODEC;
        }
        
        codec = cp.lookup(codecName);
        cp.setDefaultFieldCodec(codecName);
        CodecProvider.setDefault(cp);
      } catch (Exception e) {
        System.err.println("Could not instantiate CodecProvider: " + TEST_CODECPROVIDER);
        throw new RuntimeException(e);
      }
    }
    
    savedLocale = Locale.getDefault();
    
    // START hack to init ICU safely before we randomize locales.
    // ICU fails during classloading when a special Java7-only locale is the default
    // see: http://bugs.icu-project.org/trac/ticket/8734
    if (!icuTested) {
      icuTested = true;
      try {
        Locale.setDefault(Locale.US);
        Class.forName("com.ibm.icu.util.ULocale");
      } catch (ClassNotFoundException cnfe) {
        // ignore if no ICU is in classpath
      }
    }
    // END hack
    
    locale = TEST_LOCALE.equals("random") ? randomLocale(random) : localeForName(TEST_LOCALE);
    Locale.setDefault(locale);
    savedTimeZone = TimeZone.getDefault();
    timeZone = TEST_TIMEZONE.equals("random") ? randomTimeZone(random) : TimeZone.getTimeZone(TEST_TIMEZONE);
    TimeZone.setDefault(timeZone);
    similarityProvider = new RandomSimilarityProvider(random);
    testsFailed = false;
    
    // verify assertions are enabled (do last, for smooth cleanup)
    assertTrue("assertions are not enabled!", assertionsEnabled());
  }

