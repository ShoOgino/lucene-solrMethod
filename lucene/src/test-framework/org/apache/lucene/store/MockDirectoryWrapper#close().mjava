  @Override
  public synchronized void close() throws IOException {
    maybeYield();
    if (openFiles == null) {
      openFiles = new HashMap<String,Integer>();
      openFilesDeleted = new HashSet<String>();
    }
    if (noDeleteOpenFile && openFiles.size() > 0) {
      // print the first one as its very verbose otherwise
      Exception cause = null;
      Iterator<Exception> stacktraces = openFileHandles.values().iterator();
      if (stacktraces.hasNext())
        cause = stacktraces.next();
      // RuntimeException instead of IOException because
      // super() does not throw IOException currently:
      throw new RuntimeException("MockDirectoryWrapper: cannot close: there are still open files: " + openFiles, cause);
    }
    open = false;
    if (checkIndexOnClose) {
      if (codecProvider != null) {
        if (IndexReader.indexExists(this, codecProvider)) {
          _TestUtil.checkIndex(this, codecProvider);
        }
      } else {
        if (IndexReader.indexExists(this)) {
          _TestUtil.checkIndex(this);
        }
      }
    }
    delegate.close();
  }

