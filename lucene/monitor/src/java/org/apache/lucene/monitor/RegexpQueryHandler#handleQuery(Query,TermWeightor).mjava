  @Override
  public QueryTree handleQuery(Query q, TermWeightor termWeightor) {
    if (q instanceof RegexpQuery == false) {
      return null;
    }
    RegexpQuery query = (RegexpQuery) q;
    String regexp = parseOutRegexp(query.toString(""));
    String selected = selectLongestSubstring(regexp);
    Term term = new Term(query.getField(), selected + ngramSuffix);
    double weight = termWeightor.applyAsDouble(term);
    return new QueryTree() {
      @Override
      public double weight() {
        return weight;
      }

      @Override
      public void collectTerms(BiConsumer<String, BytesRef> termCollector) {
        termCollector.accept(term.field(), term.bytes());
        termCollector.accept(term.field(), wildcardTokenBytes);
      }

      @Override
      public boolean advancePhase(double minWeight) {
        return false;
      }

      @Override
      public String toString(int depth) {
        return space(depth) + "WILDCARD_NGRAM[" + term.toString() + "]^" + weight;
      }
    };
  }

