  public void testFixBrokenOffsetsIndex() throws IOException {
    InputStream resource = getClass().getResourceAsStream("index.630.brokenoffsets.zip");
    assertNotNull("Broken offsets index not found", resource);
    Path path = createTempDir("brokenoffsets");
    TestUtil.unzip(resource, path);
    Directory dir = newFSDirectory(path);

    // OK: index is 6.3.0 so offsets not checked:
    TestUtil.checkIndex(dir);
    
    MockDirectoryWrapper tmpDir = newMockDirectory();
    tmpDir.setCheckIndexOnClose(false);
    IndexWriter w = new IndexWriter(tmpDir, new IndexWriterConfig());
    w.addIndexes(dir);
    w.close();
    // OK: addIndexes(Directory...) also keeps version as 6.3.0, so offsets not checked:
    TestUtil.checkIndex(tmpDir);
    tmpDir.close();

    final MockDirectoryWrapper tmpDir2 = newMockDirectory();
    tmpDir2.setCheckIndexOnClose(false);
    w = new IndexWriter(tmpDir2, new IndexWriterConfig());
    DirectoryReader reader = DirectoryReader.open(dir);
    List<LeafReaderContext> leaves = reader.leaves();
    CodecReader[] codecReaders = new CodecReader[leaves.size()];
    for(int i=0;i<leaves.size();i++) {
      codecReaders[i] = (CodecReader) leaves.get(i).reader();
    }
    w.addIndexes(codecReaders);
    reader.close();
    w.close();

    // NOT OK: broken offsets were copied into a 7.0 segment:
    ByteArrayOutputStream output = new ByteArrayOutputStream(1024);    
    RuntimeException re = expectThrows(RuntimeException.class, () -> {TestUtil.checkIndex(tmpDir2, false, true, output);});
    assertEquals("term [66 6f 6f]: doc 0: pos 1: startOffset 7 < lastStartOffset 10; consider using the FixBrokenOffsets tool in Lucene's backward-codecs module to correct your index", re.getMessage());
    tmpDir2.close();

    // Now run the tool and confirm the broken offsets are fixed:
    Path path2 = createTempDir("fixedbrokenoffsets").resolve("subdir");
    FixBrokenOffsets.main(new String[] {path.toString(), path2.toString()});
    Directory tmpDir3 = FSDirectory.open(path2);
    TestUtil.checkIndex(tmpDir3);
    tmpDir3.close();
    
    dir.close();
  }

