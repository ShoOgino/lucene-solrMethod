  /**
   * Closes all resources and writes the entry table
   * 
   * @throws IllegalStateException
   *           if close() had been called before or if no file has been added to
   *           this object
   */
  @Override
  public void close() throws IOException {
    if (closed) {
      return;
    }
    IndexOutput entryTableOut = null;
    // TODO this code should clean up after itself
    // (remove partial .cfs/.cfe)
    boolean success = false;
    try {
      if (!pendingEntries.isEmpty() || outputTaken.get()) {
        throw new IllegalStateException("CFS has pending open files");
      }
      closed = true;
      getOutput(this.context);
      assert dataOut != null;
      CodecUtil.writeFooter(dataOut);
      success = true;
    } finally {
      if (success) {
        IOUtils.close(dataOut);
      } else {
        IOUtils.closeWhileHandlingException(dataOut);
      }
    }
    success = false;
    try {
      entryTableOut = directory.createOutput(entryTableName, this.context);
      writeEntryTable(entries.values(), entryTableOut);
      success = true;
    } finally {
      if (success) {
        IOUtils.close(entryTableOut);
      } else {
        IOUtils.closeWhileHandlingException(entryTableOut);
      }
    }
  }

