  @Override
  public SortedDocValues getSorted(FieldInfo field) throws IOException {
    final int valueCount = (int) binaries.get(field.name).count;
    final LegacyBinaryDocValues binary = getLegacyBinary(field);
    NumericEntry entry = ords.get(field.name);
    final LongValues ordinals = getNumeric(entry);
    if (entry.format == SPARSE_COMPRESSED) {
      final SparseNumericDocValues sparseValues = ((SparseNumericDocValuesRandomAccessWrapper) ordinals).values;
      return new SortedDocValues() {

        @Override
        public int ordValue() {
          return (int) sparseValues.longValue();
        }

        @Override
        public BytesRef lookupOrd(int ord) {
          return binary.get(ord);
        }

        @Override
        public int getValueCount() {
          return valueCount;
        }

        @Override
        public int docID() {
          return sparseValues.docID();
        }

        @Override
        public int nextDoc() throws IOException {
          return sparseValues.nextDoc();
        }

        @Override
        public int advance(int target) throws IOException {
          return sparseValues.advance(target);
        }

        @Override
        public long cost() {
          return sparseValues.cost();
        }

      };
    }
    return new SortedDocValues() {
      private int docID = -1;
      private int ord;

      @Override
      public int docID() {
        return docID;
      }

      @Override
      public int nextDoc() throws IOException {
        assert docID != NO_MORE_DOCS;
        while (true) {
          docID++;
          if (docID == maxDoc) {
            docID = NO_MORE_DOCS;
            break;
          }
          ord = (int) ordinals.get(docID);
          if (ord != -1) {
            break;
          }
        }
        return docID;
      }

      @Override
      public int advance(int target) throws IOException {
        if (target >= maxDoc) {
          docID = NO_MORE_DOCS;
          return docID;
        } else {
          docID = target-1;
          return nextDoc();
        }
      }
          
      @Override
      public int ordValue() {
        return ord;
      }

      @Override
      public long cost() {
        // TODO
        return 0;
      }

      @Override
      public BytesRef lookupOrd(int ord) {
        return binary.get(ord);
      }

      @Override
      public int getValueCount() {
        return valueCount;
      }

      @Override
      public int lookupTerm(BytesRef key) throws IOException {
        if (binary instanceof CompressedBinaryDocValues) {
          return (int) ((CompressedBinaryDocValues)binary).lookupTerm(key);
        } else {
          return super.lookupTerm(key);
        }
      }

      @Override
      public TermsEnum termsEnum() {
        if (binary instanceof CompressedBinaryDocValues) {
          return ((CompressedBinaryDocValues)binary).getTermsEnum();
        } else {
          return super.termsEnum();
        }
      }
    };
  }

