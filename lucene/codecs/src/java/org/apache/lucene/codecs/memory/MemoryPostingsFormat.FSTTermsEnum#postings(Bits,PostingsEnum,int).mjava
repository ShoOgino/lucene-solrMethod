    @Override
    public PostingsEnum postings(Bits liveDocs, PostingsEnum reuse, int flags) {

      // TODO: the logic of which enum impl to choose should be refactored to be simpler...
      boolean hasPositions = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0;
      if (hasPositions && PostingsEnum.featureRequested(flags, PostingsEnum.POSITIONS)) {
        boolean hasOffsets = field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;
        decodeMetaData();
        FSTPostingsEnum docsAndPositionsEnum;
        if (reuse == null || !(reuse instanceof FSTPostingsEnum)) {
          docsAndPositionsEnum = new FSTPostingsEnum(field.hasPayloads(), hasOffsets);
        } else {
          docsAndPositionsEnum = (FSTPostingsEnum) reuse;
          if (!docsAndPositionsEnum.canReuse(field.hasPayloads(), hasOffsets)) {
            docsAndPositionsEnum = new FSTPostingsEnum(field.hasPayloads(), hasOffsets);
          }
        }
        //System.out.println("D&P reset this=" + this);
        return docsAndPositionsEnum.reset(postingsSpare, liveDocs, docFreq);
      }

      decodeMetaData();
      FSTDocsEnum docsEnum;

      if (reuse == null || !(reuse instanceof FSTDocsEnum)) {
        docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());
      } else {
        docsEnum = (FSTDocsEnum) reuse;        
        if (!docsEnum.canReuse(field.getIndexOptions(), field.hasPayloads())) {
          docsEnum = new FSTDocsEnum(field.getIndexOptions(), field.hasPayloads());
        }
      }
      return docsEnum.reset(this.postingsSpare, liveDocs, docFreq);
    }

