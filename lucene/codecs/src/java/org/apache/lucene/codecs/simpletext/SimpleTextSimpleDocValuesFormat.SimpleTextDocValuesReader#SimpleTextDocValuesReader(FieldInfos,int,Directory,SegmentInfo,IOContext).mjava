    SimpleTextDocValuesReader(FieldInfos fieldInfos, int maxDoc, Directory dir, SegmentInfo si, IOContext context) throws IOException {
      data = dir.openInput(IndexFileNames.segmentFileName(si.name, "", "dat"), context);

      while(true) {
        readLine();
        if (scratch.equals(END)) {
          break;
        }
        assert startsWith(FIELD);
        String fieldName = stripPrefix(FIELD);
        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);
        assert fieldInfo != null;

        OneField field = new OneField();
        fields.put(fieldName, field);

        field.fieldInfo = fieldInfo;
        
        DocValues.Type dvType = fieldInfo.getDocValuesType();
        assert dvType != null;
        switch(dvType) {
        case BYTES_VAR_STRAIGHT:
        case BYTES_FIXED_STRAIGHT:
          readLine();
          assert startsWith(PATTERN);
          field.decoder = new DecimalFormat(stripPrefix(PATTERN), new DecimalFormatSymbols(Locale.ROOT));
          readLine();
          assert startsWith(MAXLENGTH);
          field.maxLength = field.decoder.parse(stripPrefix(MAXLENGTH), new ParsePosition(0)).intValue();
          data.seek(data.getFilePointer() + field.maxLength * maxDoc);
          break;
        case BYTES_VAR_SORTED:
        case BYTES_FIXED_SORTED:
        case BYTES_VAR_DEREF:
        case BYTES_FIXED_DEREF:
          // nocommit TODO
          break;
        case VAR_INTS:
        case FIXED_INTS_8:
        case FIXED_INTS_16:
        case FIXED_INTS_32:
        case FIXED_INTS_64:
          readLine();
          assert startsWith(MINVALUE);
          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));
          readLine();
          assert startsWith(PATTERN);
          field.decoder = new DecimalFormat(stripPrefix(PATTERN), new DecimalFormatSymbols(Locale.ROOT));
          data.seek(data.getFilePointer() + field.maxLength * maxDoc);
          break;
        default:
          break;
        }
        field.dataStartFilePointer = data.getFilePointer();
      }
    }

