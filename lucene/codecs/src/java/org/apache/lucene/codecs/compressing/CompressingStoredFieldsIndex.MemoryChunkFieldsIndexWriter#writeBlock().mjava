    private void writeBlock() throws IOException {
      assert blockChunks > 0;
      fieldsIndexOut.writeVInt(blockChunks);

      // The trick here is that we only store the difference from the average start
      // pointer or doc base, this helps save bits per value.
      // And in order to prevent a few chunks that would be far from the average to
      // raise the number of bits per value for all of them, we only encode blocks
      // of 1024 chunks at once
      // See LUCENE-4512

      // doc bases
      final int avgChunkDocs;
      if (blockChunks == 1) {
        avgChunkDocs = 0;
      } else {
        avgChunkDocs = Math.round((float) (blockDocs - docBaseDeltas[blockChunks - 1]) / (blockChunks - 1));
      }
      fieldsIndexOut.writeVInt(totalDocs - blockDocs); // docBase
      fieldsIndexOut.writeVInt(avgChunkDocs);
      int docBase = 0;
      long maxDelta = 0;
      for (int i = 0; i < blockChunks; ++i) {
        final int delta = docBase - avgChunkDocs * i;
        maxDelta |= moveSignToLowOrderBit(delta);
        docBase += docBaseDeltas[i];
      }

      final int bitsPerDocBase = PackedInts.bitsRequired(maxDelta);
      fieldsIndexOut.writeVInt(bitsPerDocBase);
      PackedInts.Writer writer = PackedInts.getWriterNoHeader(fieldsIndexOut,
          PackedInts.Format.PACKED, blockChunks, bitsPerDocBase, 1);
      docBase = 0;
      for (int i = 0; i < blockChunks; ++i) {
        final long delta = docBase - avgChunkDocs * i;
        assert PackedInts.bitsRequired(moveSignToLowOrderBit(delta)) <= writer.bitsPerValue();
        writer.add(moveSignToLowOrderBit(delta));
        docBase += docBaseDeltas[i];
      }
      writer.finish();

      // start pointers
      fieldsIndexOut.writeVLong(firstStartPointer);
      final long avgChunkSize;
      if (blockChunks == 1) {
        avgChunkSize = 0;
      } else {
        avgChunkSize = (maxStartPointer - firstStartPointer) / (blockChunks - 1);
      }
      fieldsIndexOut.writeVLong(avgChunkSize);
      long startPointer = 0;
      maxDelta = 0;
      for (int i = 0; i < blockChunks; ++i) {
        startPointer += startPointerDeltas[i];
        final long delta = startPointer - avgChunkSize * i;
        maxDelta |= moveSignToLowOrderBit(delta);
      }

      final int bitsPerStartPointer = PackedInts.bitsRequired(maxDelta);
      fieldsIndexOut.writeVInt(bitsPerStartPointer);
      writer = PackedInts.getWriterNoHeader(fieldsIndexOut, PackedInts.Format.PACKED,
          blockChunks, bitsPerStartPointer, 1);
      startPointer = 0;
      for (int i = 0; i < blockChunks; ++i) {
        startPointer += startPointerDeltas[i];
        final long delta = startPointer - avgChunkSize * i;
        assert PackedInts.bitsRequired(moveSignToLowOrderBit(delta)) <= writer.bitsPerValue();
        writer.add(moveSignToLowOrderBit(delta));
      }
      writer.finish();
    }

