    @Override
    public int nextDoc() {
      //System.out.println("  nextDoc cycle docUpto=" + docUpto + " numDocs=" + numDocs + " fp=" + in.getPosition() + " this=" + this);
      if (docUpto == numDocs) {
        // System.out.println("    END");
        return docID = NO_MORE_DOCS;
      }
      docUpto++;
      if (indexOptions == IndexOptions.DOCS) {
        accum += in.readVInt();
      } else {
        final int code = in.readVInt();
        accum += code >>> 1;
        //System.out.println("  docID=" + accum + " code=" + code);
        if ((code & 1) != 0) {
          freq = 1;
        } else {
          freq = in.readVInt();
          assert freq > 0;
        }

        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {
          // Skip positions/payloads
          for(int posUpto=0;posUpto<freq;posUpto++) {
            if (!storePayloads) {
              in.readVInt();
            } else {
              final int posCode = in.readVInt();
              if ((posCode & 1) != 0) {
                payloadLen = in.readVInt();
              }
              in.skipBytes(payloadLen);
            }
          }
        } else if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) {
          // Skip positions/offsets/payloads
          for(int posUpto=0;posUpto<freq;posUpto++) {
            int posCode = in.readVInt();
            if (storePayloads && ((posCode & 1) != 0)) {
              payloadLen = in.readVInt();
            }
            if ((in.readVInt() & 1) != 0) {
              // new offset length
              in.readVInt();
            }
            if (storePayloads) {
              in.skipBytes(payloadLen);
            }
          }
        }
      }

      //System.out.println("    return docID=" + accum + " freq=" + freq);
      return (docID = accum);
    }

