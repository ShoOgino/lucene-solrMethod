  @Override
  public void addSortedNumericField(FieldInfo field, final DocValuesProducer valuesProducer) throws IOException {

    final Iterable<Number> docToValueCount = LegacyDocValuesIterables.sortedNumericToDocCount(valuesProducer, field, numDocs);
    final Iterable<Number> values = LegacyDocValuesIterables.sortedNumericToValues(valuesProducer, field);

    assert fieldSeen(field.name);
    assert field.getDocValuesType() == DocValuesType.SORTED_NUMERIC;
    doAddBinary(field, new Iterable<BytesRef>() {     
      @Override
      public Iterator<BytesRef> iterator() {
        final StringBuilder builder = new StringBuilder();
        final BytesRefBuilder scratch = new BytesRefBuilder();
        final Iterator<Number> counts = docToValueCount.iterator();
        final Iterator<Number> numbers = values.iterator();
        
        return new Iterator<BytesRef>() {

          @Override
          public boolean hasNext() {
            return counts.hasNext();
          }

          @Override
          public BytesRef next() {
            builder.setLength(0);
            long count = counts.next().longValue();
            for (int i = 0; i < count; i++) {
              if (i > 0) {
                builder.append(',');
              }
              builder.append(Long.toString(numbers.next().longValue()));
            }
            scratch.copyChars(builder);
            return scratch.get();
          }

          @Override
          public void remove() {
            throw new UnsupportedOperationException();
          }
        };
      }
    });
  }

