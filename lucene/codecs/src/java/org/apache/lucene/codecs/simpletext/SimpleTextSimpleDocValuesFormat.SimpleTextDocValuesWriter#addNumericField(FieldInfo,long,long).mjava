    @Override
    public NumericDocValuesConsumer addNumericField(FieldInfo field, final long minValue, long maxValue) throws IOException {
      assert fieldSeen(field.name);
      writeFieldEntry(field);
      
      // write our minimum value to the .dat, all entries are deltas from that
      SimpleTextUtil.write(data, MINVALUE);
      SimpleTextUtil.write(data, Long.toString(minValue), scratch);
      SimpleTextUtil.writeNewline(data);

      assert maxValue >= minValue;

      // build up our fixed-width "simple text packed ints"
      // format
      BigInteger maxBig = BigInteger.valueOf(maxValue);
      BigInteger minBig = BigInteger.valueOf(minValue);
      BigInteger diffBig = maxBig.subtract(minBig);
      int maxBytesPerValue = diffBig.toString().length();
      StringBuilder sb = new StringBuilder();
      for (int i = 0; i < maxBytesPerValue; i++) {
        sb.append('0');
      }
      
      // write our pattern to the .dat
      SimpleTextUtil.write(data, PATTERN);
      SimpleTextUtil.write(data, sb.toString(), scratch);
      SimpleTextUtil.writeNewline(data);

      final String patternString = sb.toString();
      
      final DecimalFormat encoder = new DecimalFormat(patternString, new DecimalFormatSymbols(Locale.ROOT));
      return new NumericDocValuesConsumer() {
        int numDocsWritten = 0;

        @Override
        public void add(long value) throws IOException {
          assert value >= minValue;
          Number delta = BigInteger.valueOf(value).subtract(BigInteger.valueOf(minValue));
          String s = encoder.format(delta);
          assert s.length() == patternString.length();
          SimpleTextUtil.write(data, s, scratch);
          SimpleTextUtil.writeNewline(data);
          numDocsWritten++;
          assert numDocsWritten <= numDocs;
        }

        @Override
        public void finish() throws IOException {
          assert numDocs == numDocsWritten: "numDocs=" + numDocs + " numDocsWritten=" + numDocsWritten;
        }
      };
    }

