      @Override
      public Source loadDirectSource() throws IOException {
        DocValues.Type dvType = field.fieldInfo.getDocValuesType();
        final IndexInput in = data.clone();
        final BytesRef scratch = new BytesRef();
        final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));
        final ParsePosition pos = new ParsePosition(0);

        if (DocValues.isNumber(dvType)) {
          return new Source(dvType) {
            @Override
            public long getInt(int docID) {
              try {
                // nocommit bounds check docID?  spooky
                // because if we don't you can maybe get
                // value from the wrong field ...
                in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);
                SimpleTextUtil.readLine(in, scratch);
                System.out.println("trying to parse number: " + scratch.utf8ToString());
                // nocommit
                long seekPos = field.dataStartFilePointer;
                byte wholeFile[] = new byte[(int)(in.length()-seekPos)];
                IndexInput foo = in.clone();
                foo.seek(seekPos);
                foo.readBytes(wholeFile, 0, wholeFile.length);
                System.out.println("rest: " + new String(wholeFile, 0, wholeFile.length, "UTF-8"));
                return field.minValue + decoder.parse(scratch.utf8ToString(), pos).longValue();
              } catch (IOException ioe) {
                throw new RuntimeException(ioe);
              }
            }
          };
        } else if (DocValues.isBytes(dvType)) {
          return new Source(dvType) {
            @Override
            public BytesRef getBytes(int docID, BytesRef result) {
              try {
                // nocommit bounds check docID?  spooky
                // because if we don't you can maybe get
                // value from the wrong field ...
                in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength)*docID);
                SimpleTextUtil.readLine(in, scratch);
                assert StringHelper.startsWith(scratch, LENGTH);
                int len;
                try {
                  len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, "UTF-8")).intValue();
                } catch (ParseException pe) {
                  throw new RuntimeException(pe);
                }
                result.bytes = new byte[len];
                result.offset = 0;
                result.length = len;
                in.readBytes(result.bytes, 0, len);
                return result;
              } catch (IOException ioe) {
                // nocommit should .get() just throw IOE...
                throw new RuntimeException(ioe);
              }
            }
          };
        } else if (DocValues.isSortedBytes(dvType)) {

          final DecimalFormat ordDecoder = new DecimalFormat(field.ordPattern, new DecimalFormatSymbols(Locale.ROOT));

          return new SortedSource(dvType, BytesRef.getUTF8SortedAsUnicodeComparator()) {
            @Override
            public int ord(int docID) {
              try {
                in.seek(field.dataStartFilePointer + field.numValues * (9 + field.pattern.length() + field.maxLength) + (1 + field.ordPattern.length()) * docID);
                SimpleTextUtil.readLine(in, scratch);
                return ordDecoder.parse(scratch.utf8ToString(), pos).intValue();
              } catch (IOException ioe) {
                // nocommit should .get() just throw IOE...
                throw new RuntimeException(ioe);
              }
            }

            @Override
            public BytesRef getByOrd(int ord, BytesRef result) {
              try {
                in.seek(field.dataStartFilePointer + ord * (9 + field.pattern.length() + field.maxLength));
                SimpleTextUtil.readLine(in, scratch);
                assert StringHelper.startsWith(scratch, LENGTH);
                int len;
                try {
                  len = decoder.parse(new String(scratch.bytes, scratch.offset + LENGTH.length, scratch.length - LENGTH.length, "UTF-8")).intValue();
                } catch (ParseException pe) {
                  throw new RuntimeException(pe);
                }
                result.bytes = new byte[len];
                result.offset = 0;
                result.length = len;
                in.readBytes(result.bytes, 0, len);
                return result;
              } catch (IOException ioe) {
                // nocommit should .get() just throw IOE...
                throw new RuntimeException(ioe);
              }
            }

            @Override
            public int getValueCount() {
              return field.numValues;
            }

            @Override
            public PackedInts.Reader getDocToOrd() {
              return null;
            }
          };
        } else if (DocValues.isFloat(dvType)) {
          // nocommit
          return null;
        } else {
          throw new AssertionError();
        }
      }

