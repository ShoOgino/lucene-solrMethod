  /** 
   * Just aggregates the count values so they become
   * "addresses", and adds one more value in the end
   * (the final sum)
   */ 
  private Iterable<Number> countToAddressIterator(final Iterable<Number> counts) {
    return new Iterable<Number>() {
      @Override
      public Iterator<Number> iterator() {
        final Iterator<Number> iter = counts.iterator();
        
        return new Iterator<Number>() {
          
          long sum;
          boolean ended;
          
          @Override
          public boolean hasNext() {
            return iter.hasNext() || !ended;
          }
          
          @Override
          public Number next() {
            long toReturn = sum;
            
            if (iter.hasNext()) {
              Number n = iter.next();
              if (n != null) {
                sum += n.longValue();
              }
            } else if (!ended) {
              ended = true;
            } else {
              assert false;
            }
            
            return toReturn;
          }
          
          @Override
          public void remove() {
            throw new UnsupportedOperationException();
          }
        };
      }
    };
  }

