  public IntersectBlockReader(CompiledAutomaton compiled, BytesRef startTerm,
                              DictionaryBrowserSupplier dictionaryBrowserSupplier, IndexInput blockInput, PostingsReaderBase postingsReader,
                              FieldMetadata fieldMetadata, BlockDecoder blockDecoder) throws IOException {
    super(dictionaryBrowserSupplier, blockInput, postingsReader, fieldMetadata, blockDecoder);
    this.nextStringCalculator = new AutomatonNextTermCalculator(compiled);
    Automaton automaton = Objects.requireNonNull(compiled.automaton);
    this.runAutomaton = Objects.requireNonNull(compiled.runAutomaton);
    this.commonSuffixRef = compiled.commonSuffixRef; // maybe null
    this.commonPrefixRef = Operations.getCommonPrefixBytesRef(automaton); // never null

    this.startTerm = startTerm;
    assert startTerm == null || StringHelper.startsWith(startTerm, commonPrefixRef);
    // it is thus also true that startTerm >= commonPrefixRef

    this.seekTerm = startTerm != null ? startTerm : commonPrefixRef;
  }

