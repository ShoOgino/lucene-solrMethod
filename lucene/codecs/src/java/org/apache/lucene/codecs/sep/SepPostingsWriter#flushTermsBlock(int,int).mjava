  @Override
  public void flushTermsBlock(int start, int count) throws IOException {
    //System.out.println("SEPW: flushTermsBlock: start=" + start + " count=" + count + " pendingTerms.size()=" + pendingTerms.size() + " termsOut.fp=" + termsOut.getFilePointer());
    assert indexBytesWriter.getFilePointer() == 0;
    final int absStart = pendingTerms.size() - start;
    final List<PendingTerm> slice = pendingTerms.subList(absStart, absStart+count);

    long lastPayloadFP = 0;
    long lastSkipFP = 0;

    if (count == 0) {
      termsOut.writeByte((byte) 0);
      return;
    }

    final PendingTerm firstTerm = slice.get(0);
    final IntIndexOutput.Index docIndexFlush = firstTerm.docIndex;
    final IntIndexOutput.Index freqIndexFlush = firstTerm.freqIndex;
    final IntIndexOutput.Index posIndexFlush = firstTerm.posIndex;

    for(int idx=0;idx<slice.size();idx++) {
      final boolean isFirstTerm = idx == 0;
      final PendingTerm t = slice.get(idx);
      //System.out.println("  write idx=" + idx + " docIndex=" + t.docIndex);
      docIndexFlush.copyFrom(t.docIndex, false);
      docIndexFlush.write(indexBytesWriter, isFirstTerm);
      if (indexOptions != IndexOptions.DOCS_ONLY) {
        freqIndexFlush.copyFrom(t.freqIndex, false);
        freqIndexFlush.write(indexBytesWriter, isFirstTerm);
        //System.out.println("    freqIndex=" + t.freqIndex);
        if (indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {
          posIndexFlush.copyFrom(t.posIndex, false);
          posIndexFlush.write(indexBytesWriter, isFirstTerm);
          //System.out.println("    posIndex=" + t.posIndex);
          if (storePayloads) {
            //System.out.println("    payloadFP=" + t.payloadFP);
            if (isFirstTerm) {
              indexBytesWriter.writeVLong(t.payloadFP);
            } else {
              indexBytesWriter.writeVLong(t.payloadFP - lastPayloadFP);
            }
            lastPayloadFP = t.payloadFP;
          }
        }
      }

      if (t.skipFP != -1) {
        if (isFirstTerm) {
          indexBytesWriter.writeVLong(t.skipFP);
        } else {
          indexBytesWriter.writeVLong(t.skipFP - lastSkipFP);
        }
        lastSkipFP = t.skipFP;
        //System.out.println("    skipFP=" + t.skipFP);
      }
    }

    //System.out.println("  numBytes=" + indexBytesWriter.getFilePointer());
    termsOut.writeVLong((int) indexBytesWriter.getFilePointer());
    indexBytesWriter.writeTo(termsOut);
    indexBytesWriter.reset();
    slice.clear();
  }

