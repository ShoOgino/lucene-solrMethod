  protected void writeDoc(IndexOutput output, int docId, BytesRef spare) throws IOException {
    int ord = ords[docId] - 1;
    if (ord != -1) {
      assert ord >= 0;
      hash.get(ord, spare);

      switch (type) {
      case BYTES_FIXED_DEREF:
      case BYTES_FIXED_SORTED:
      case BYTES_FIXED_STRAIGHT:
      case BYTES_VAR_DEREF:
      case BYTES_VAR_SORTED:
      case BYTES_VAR_STRAIGHT:
        SimpleTextUtil.write(output, spare);
        break;
      case FIXED_INTS_16:
        SimpleTextUtil.write(output,
            Short.toString(DocValuesArraySource.asShort(spare)), scratch);
        break;
      case FIXED_INTS_32:
        SimpleTextUtil.write(output,
            Integer.toString(DocValuesArraySource.asInt(spare)), scratch);
        break;
      case VAR_INTS:
      case FIXED_INTS_64:
        SimpleTextUtil.write(output,
            Long.toString(DocValuesArraySource.asLong(spare)), scratch);
        break;
      case FIXED_INTS_8:
        assert spare.length == 1 : spare.length;
        SimpleTextUtil.write(output,
            Integer.toString(spare.bytes[spare.offset]), scratch);
        break;
      case FLOAT_32:
        float valueFloat = Float.intBitsToFloat(DocValuesArraySource.asInt(spare));
        SimpleTextUtil.write(output, Float.toString(valueFloat), scratch);
        break;
      case FLOAT_64:
        double valueDouble = Double.longBitsToDouble(DocValuesArraySource
            .asLong(spare));
        SimpleTextUtil.write(output, Double.toString(valueDouble), scratch);
        break;
      default:
        throw new IllegalArgumentException("unsupported type: " + type);
      }
    } else {
      switch (type) {
      case BYTES_FIXED_DEREF:
      case BYTES_FIXED_SORTED:
      case BYTES_FIXED_STRAIGHT:
        if(zeroBytes == null) {
          assert valueSize > 0;
          zeroBytes = new BytesRef(new byte[valueSize]);
        }
        SimpleTextUtil.write(output, zeroBytes);
        break;
      case BYTES_VAR_DEREF:
      case BYTES_VAR_SORTED:
      case BYTES_VAR_STRAIGHT:
        scratch.length = 0;
        SimpleTextUtil.write(output, scratch);
        break;
      case FIXED_INTS_16:
      case FIXED_INTS_32:
      case FIXED_INTS_64:
      case FIXED_INTS_8:
      case VAR_INTS:
        SimpleTextUtil.write(output, ZERO_INT);
        break;
      case FLOAT_32:
      case FLOAT_64:
        SimpleTextUtil.write(output, ZERO_DOUBLE);
        break;
      default:
        throw new IllegalArgumentException("unsupported type: " + type);
      }
    }

  }

