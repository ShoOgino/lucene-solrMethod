  /** Make sure auto prefix terms are used with PrefixQuery. */
  public void testPrefixQuery() throws Exception {

    List<String> prefixes = new ArrayList<>();
    for(int i=1;i<5;i++) {
      char[] chars = new char[i];
      Arrays.fill(chars, 'a');
      prefixes.add(new String(chars));
    }

    Set<String> randomTerms = new HashSet<>();
    int numTerms = atLeast(10000);
    while (randomTerms.size() < numTerms) {
      for(String prefix : prefixes) {
        randomTerms.add(prefix + TestUtil.randomRealisticUnicodeString(random()));
      }
    }

    int actualCount = 0;
    for(String term : randomTerms) {
      if (term.startsWith("aa")) {
        actualCount++;
      }
    }

    //System.out.println("actual count " + actualCount);

    Directory dir = newDirectory();
    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));
    int minTermsInBlock = TestUtil.nextInt(random(), 2, 100);
    int maxTermsInBlock = Math.max(2, (minTermsInBlock-1)*2 + random().nextInt(100));

    // As long as this is never > actualCount, aa should always see at least one auto-prefix term:
    int minTermsAutoPrefix = TestUtil.nextInt(random(), 2, actualCount);
    int maxTermsAutoPrefix = random().nextBoolean() ? Math.max(2, (minTermsAutoPrefix-1)*2 + random().nextInt(100)) : Integer.MAX_VALUE;

    iwc.setCodec(TestUtil.alwaysPostingsFormat(new AutoPrefixPostingsFormat(minTermsInBlock, maxTermsInBlock,
                                                                            minTermsAutoPrefix, maxTermsAutoPrefix)));
    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);

    for (String term : randomTerms) {
      Document doc = new Document();
      doc.add(new StringField("field", term, Field.Store.NO));
      w.addDocument(doc);
    }

    w.forceMerge(1);
    IndexReader r = w.getReader();
    final Terms terms = MultiFields.getTerms(r, "field");
    IndexSearcher s = new IndexSearcher(r);
    final int finalActualCount = actualCount;
    PrefixQuery q = new PrefixQuery(new Term("field", "aa")) {
      public PrefixQuery checkTerms() throws IOException {
        TermsEnum termsEnum = getTermsEnum(terms, new AttributeSource());
        int count = 0;
        while (termsEnum.next() != null) {
          //System.out.println("got term: " + termsEnum.term().utf8ToString());
          count++;
        }

        // Auto-prefix term(s) should have kicked in, so we should have visited fewer than the total number of aa* terms:
        assertTrue(count < finalActualCount);

        return this;
      }
    }.checkTerms();

    int x = BooleanQuery.getMaxClauseCount();
    try {
      // TODO test with boolean rewrite as well once we can create term
      // queries on fake terms
      /*BooleanQuery.setMaxClauseCount(randomTerms.size());
      if (random().nextBoolean()) {
        q.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);
      } else if (random().nextBoolean()) {
        q.setRewriteMethod(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_REWRITE);
      }*/

      assertEquals(actualCount, s.search(q, 1).totalHits);
    } finally {
      BooleanQuery.setMaxClauseCount(x);
    }

    r.close();
    w.close();
    dir.close();
  }

