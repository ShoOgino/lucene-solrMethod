  /**
   * Expose this ValueSource as a DoubleValuesSource
   */
  public DoubleValuesSource asDoubleValuesSource() {
    return new DoubleValuesSource() {
      @Override
      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {
        Map context = new HashMap<>();
        FakeScorer scorer = new FakeScorer();
        context.put("scorer", scorer);
        FunctionValues fv = ValueSource.this.getValues(context, ctx);
        return new DoubleValues() {

          @Override
          public double doubleValue() throws IOException {
            return fv.doubleVal(scorer.current);
          }

          @Override
          public boolean advanceExact(int doc) throws IOException {
            scorer.current = doc;
            if (scores != null && scores.advanceExact(doc)) {
              scorer.score = (float) scores.doubleValue();
            }
            else
              scorer.score = 0;
            return fv.exists(doc);
          }
        };
      }

      @Override
      public boolean needsScores() {
        return true;  // be on the safe side
      }

      @Override
      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {
        Map context = new HashMap<>();
        FakeScorer scorer = new FakeScorer();
        scorer.score = scoreExplanation.getValue();
        context.put("scorer", scorer);
        FunctionValues fv = ValueSource.this.getValues(context, ctx);
        return fv.explain(docId);
      }
    };
  }

