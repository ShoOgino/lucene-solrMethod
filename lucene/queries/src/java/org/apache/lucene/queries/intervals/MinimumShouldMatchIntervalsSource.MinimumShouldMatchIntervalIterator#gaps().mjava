    @Override
    public int gaps() {
      int i = 0;
      for (IntervalIterator it : proximityQueue) {
        if (it.end() > end) {
          innerPositions[i * 2] = start;
          innerPositions[i * 2 + 1] = firstEnd;
        }
        else {
          innerPositions[i * 2] = it.start();
          innerPositions[i * 2 + 1] = it.end();
        }
        i++;
      }
      if (proximityQueue.size() < minShouldMatch) {
        // the leading iterator has been exhausted and removed from the queue
        innerPositions[i * 2] = start;
        innerPositions[i * 2 + 1] = firstEnd;
      }
      Arrays.sort(innerPositions);
      int gaps = 0;
      for (int j = 1; j < minShouldMatch; j++) {
        gaps += (innerPositions[j * 2] - innerPositions[j * 2 - 1] - 1);
      }
      return gaps;
    }

