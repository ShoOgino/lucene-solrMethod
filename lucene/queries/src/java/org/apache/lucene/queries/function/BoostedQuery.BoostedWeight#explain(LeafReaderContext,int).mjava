    @Override
    public Explanation explain(LeafReaderContext readerContext, int doc) throws IOException {
      Explanation subQueryExpl = qWeight.explain(readerContext,doc);
      if (!subQueryExpl.isMatch()) {
        return subQueryExpl;
      }
      FunctionValues vals = boostVal.getValues(fcontext, readerContext);
      float factor = vals.floatVal(doc);
      Explanation factorExpl = vals.explain(doc);
      if (factor < 0) {
        factor = 0;
        factorExpl = Explanation.match(0, "truncated score, max of:",
            Explanation.match(0f, "minimum score"), factorExpl);
      } else if (Float.isNaN(factor)) {
        factor = 0;
        factorExpl = Explanation.match(0, "score, computed as (score == NaN ? 0 : score) since NaN is an illegal score from:", factorExpl);
      }
      
      float sc = subQueryExpl.getValue() * factor;
      return Explanation.match(sc, BoostedQuery.this.toString() + ", product of:",
          subQueryExpl, factorExpl);
    }

