  /** Three boxes, an island inside a hole inside a shape */
  public void testMultiPolygon() {
    Polygon hole = new Polygon(new double[] { -10, -10, 10, 10, -10 }, new double[] { -10, 10, 10, -10, -10 });
    Polygon outer = new Polygon(new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 }, hole);
    Polygon island = new Polygon(new double[] { -5, -5, 5, 5, -5 }, new double[] { -5, 5, 5, -5, -5 } );
    Polygon polygons[] = new Polygon[] { outer, island };
    
    // contains(point)
    assertTrue(Polygon.contains(polygons, -2, 2)); // on the island
    assertFalse(Polygon.contains(polygons, -6, 6)); // in the hole
    assertTrue(Polygon.contains(polygons, -25, 25)); // on the mainland
    assertFalse(Polygon.contains(polygons, -51, 51)); // in the ocean
    
    // contains(box): this can conservatively return false
    assertTrue(Polygon.contains(polygons, -2, 2, -2, 2)); // on the island
    assertFalse(Polygon.contains(polygons, 6, 7, 6, 7)); // in the hole
    assertTrue(Polygon.contains(polygons, 24, 25, 24, 25)); // on the mainland
    assertFalse(Polygon.contains(polygons, 51, 52, 51, 52)); // in the ocean
    assertFalse(Polygon.contains(polygons, -60, 60, -60, 60)); // enclosing us completely
    assertFalse(Polygon.contains(polygons, 49, 51, 49, 51)); // overlapping the mainland
    assertFalse(Polygon.contains(polygons, 9, 11, 9, 11)); // overlapping the hole
    assertFalse(Polygon.contains(polygons, 5, 6, 5, 6)); // overlapping the island

    // crosses(box): this can conservatively return true
    assertTrue(Polygon.crosses(polygons, -60, 60, -60, 60)); // enclosing us completely
    assertTrue(Polygon.crosses(polygons, 49, 51, 49, 51)); // overlapping the mainland and ocean
    assertTrue(Polygon.crosses(polygons, 9, 11, 9, 11)); // overlapping the hole and mainland
    assertTrue(Polygon.crosses(polygons, 5, 6, 5, 6)); // overlapping the island
  }

