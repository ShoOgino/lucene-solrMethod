  public void testIntersectOptimization() {
    byte[] minTriangle = box(0, 0, 10, 5);
    byte[] maxTriangle = box(20, 10, 30, 15);

    Rectangle2D rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 15.1));
    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,
        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));
    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,
        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));

    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, -0.1, 10.1));
    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,
        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,
        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));

    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 30.1, 4.9, 15.1));
    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,
        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,
        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));

    rectangle2D = Rectangle2D.create(new Rectangle(-0.1, 20.1, -0.1, 15.1));
    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,
        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,
        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));

    rectangle2D = Rectangle2D.create(new Rectangle(9.9, 30.1, -0.1, 15.1));
    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY,
        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,
        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));

    rectangle2D = Rectangle2D.create(new Rectangle(5, 25, 3, 13));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,
        rectangle2D.intersectRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY,
        rectangle2D.relateRangeBBox(BYTES, 0, minTriangle, 3 * BYTES, 2 * BYTES, maxTriangle));
  }

