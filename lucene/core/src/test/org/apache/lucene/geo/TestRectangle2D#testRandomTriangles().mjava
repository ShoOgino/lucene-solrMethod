  public void testRandomTriangles() {
    Random random = random();
    XYRectangle rectangle = ShapeTestUtil.nextBox(random);
    Component2D rectangle2D = Rectangle2D.create(rectangle);
    for (int i =0; i < 100; i++) {
      float ax = ShapeTestUtil.nextFloat(random);
      float ay = ShapeTestUtil.nextFloat(random);
      float bx = ShapeTestUtil.nextFloat(random);
      float by = ShapeTestUtil.nextFloat(random);
      float cx = ShapeTestUtil.nextFloat(random);
      float cy = ShapeTestUtil.nextFloat(random);

      float tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);
      float tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);
      float tMinY = StrictMath.min(StrictMath.min(ay, by), cy);
      float tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);


      PointValues.Relation r = rectangle2D.relate(tMinX, tMaxX, tMinY, tMaxY);
      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {
        assertEquals(PointValues.Relation.CELL_OUTSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));
      }
      else if (r == PointValues.Relation.CELL_INSIDE_QUERY) {
        assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rectangle2D.relateTriangle(ax, ay, bx, by , cx, cy));
      }
    }
  }

