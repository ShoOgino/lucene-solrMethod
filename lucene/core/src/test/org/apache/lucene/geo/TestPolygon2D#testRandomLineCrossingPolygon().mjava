  public void testRandomLineCrossingPolygon() {
    Polygon p = GeoTestUtil.createRegularPolygon(0, 0, 1000, TestUtil.nextInt(random(), 100, 10000));
    Polygon2D polygon2D = Polygon2D.create(p);
    for (int i=0; i < 1000; i ++) {
      double longitude = GeoTestUtil.nextLongitude();
      double latitude = GeoTestUtil.nextLatitude();
      Relation rel = polygon2D.relateTriangle(
          GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(-longitude)),
          GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(-latitude)),
          GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(longitude)),
          GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(latitude)),
          GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(-longitude)),
          GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(-latitude)));
      assertNotEquals(Relation.CELL_OUTSIDE_QUERY, rel);
    }
  }

