  public void testRandomTopDocs() throws IOException {
    Directory dir = newDirectory();
    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());
    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data
    for (int i = 0; i < numDocs; ++i) {
      Document doc = new Document();
      int numValues = random().nextInt(1 << random().nextInt(5));
      int start = random().nextInt(10);
      for (int j = 0; j < numValues; ++j) {
        doc.add(new StringField("foo", Integer.toString(start + j), Store.NO));
      }
      w.addDocument(doc);
    }
    IndexReader reader = DirectoryReader.open(w);
    w.close();
    IndexSearcher searcher = newSearcher(reader);

    for (int iter = 0; iter < 15; ++iter) {
      Query query = new TermQuery(new Term("foo", Integer.toString(iter)));

      TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE
      TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES
      
      searcher.search(query, collector1);
      searcher.search(query, collector2);
      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());

      int filterTerm = random().nextInt(15);
      Query filteredQuery = new BooleanQuery.Builder()
          .add(query, Occur.MUST)
          .add(new TermQuery(new Term("foo", Integer.toString(filterTerm))), Occur.FILTER)
          .build();

      collector1 = TopScoreDocCollector.create(10, null, true); // COMPLETE
      collector2 = TopScoreDocCollector.create(10, null, false); // TOP_SCORES
      searcher.search(filteredQuery, collector1);
      searcher.search(filteredQuery, collector2);
      assertTopDocsEquals(collector1.topDocs(), collector2.topDocs());
    }
    reader.close();
    dir.close();
  }

