  public void testIllegalCollectorOnReplay() throws Exception {
    // tests that the Collector passed to replay() has an out-of-order mode that
    // is valid with the Collector passed to the ctor
    
    // 'src' Collector does not support out-of-order
    CachingCollector cc = CachingCollector.create(new NoOpCollector(false), true, 100 * ONE_BYTE);
    LeafCollector acc = cc.getLeafCollector(null);
    acc.setScorer(new MockScorer());
    for (int i = 0; i < 10; i++) acc.collect(i);
    cc.replay(new NoOpCollector(true)); // this call should not fail
    cc.replay(new NoOpCollector(false)); // this call should not fail

    // 'src' Collector supports out-of-order
    cc = CachingCollector.create(new NoOpCollector(true), true, 100 * ONE_BYTE);
    acc = cc.getLeafCollector(null);
    acc.setScorer(new MockScorer());
    for (int i = 0; i < 10; i++) acc.collect(i);
    cc.replay(new NoOpCollector(true)); // this call should not fail
    try {
      cc.replay(new NoOpCollector(false)); // this call should fail
      fail("should have failed if an in-order Collector was given to replay(), " +
           "while CachingCollector was initialized with out-of-order collection");
    } catch (IllegalArgumentException e) {
      // ok
    }
  }

