  /**
   *
   */
  public void testAfter() throws IOException {
    // create an index
    Directory indexStore = newDirectory();
    RandomIndexWriter writer = new RandomIndexWriter(random, indexStore);
    
    long now = System.currentTimeMillis();
    
    Document doc = new Document();
    // add time that is in the future
    doc.add(newField("datefield", DateTools.timeToString(now + 888888,
        DateTools.Resolution.MILLISECOND), StringField.TYPE_STORED));
    doc.add(newField("body", "Today is a very sunny day in New York City",
                     TextField.TYPE_STORED));
    writer.addDocument(doc);
    
    IndexReader reader = writer.getReader();
    writer.close();
    IndexSearcher searcher = newSearcher(reader);
    
    // filter that should preserve matches
    // DateFilter df1 = DateFilter.After("datefield", now);
    TermRangeFilter df1 = TermRangeFilter.newStringRange("datefield", DateTools
        .timeToString(now, DateTools.Resolution.MILLISECOND), DateTools
        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true,
        false);
    // filter that should discard matches
    // DateFilter df2 = DateFilter.After("datefield", now + 999999);
    TermRangeFilter df2 = TermRangeFilter.newStringRange("datefield", DateTools
        .timeToString(now + 999999, DateTools.Resolution.MILLISECOND),
        DateTools.timeToString(now + 999999999,
            DateTools.Resolution.MILLISECOND), false, true);
    
    // search something that doesn't exist with DateFilter
    Query query1 = new TermQuery(new Term("body", "NoMatchForThis"));
    
    // search for something that does exists
    Query query2 = new TermQuery(new Term("body", "sunny"));
    
    ScoreDoc[] result;
    
    // ensure that queries return expected results without DateFilter first
    result = searcher.search(query1, null, 1000).scoreDocs;
    assertEquals(0, result.length);
    
    result = searcher.search(query2, null, 1000).scoreDocs;
    assertEquals(1, result.length);
    
    // run queries with DateFilter
    result = searcher.search(query1, df1, 1000).scoreDocs;
    assertEquals(0, result.length);
    
    result = searcher.search(query1, df2, 1000).scoreDocs;
    assertEquals(0, result.length);
    
    result = searcher.search(query2, df1, 1000).scoreDocs;
    assertEquals(1, result.length);
    
    result = searcher.search(query2, df2, 1000).scoreDocs;
    assertEquals(0, result.length);
    reader.close();
    indexStore.close();
  }

