  private IndexSearcher getFullStrings() throws IOException {
    Directory indexStore = newDirectory();
    dirs.add(indexStore);
    IndexWriter writer = new IndexWriter(
        indexStore,
        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).
            setMergePolicy(newLogMergePolicy(97))
    );
    FieldType onlyStored = new FieldType();
    onlyStored.setStored(true);
    final int fixedLen = getRandomNumber(2, 8);
    final int fixedLen2 = getRandomNumber(1, 4);
    for (int i=0; i<NUM_STRINGS; i++) {
      Document doc = new Document();
      String num = getRandomCharString(getRandomNumber(2, 8), 48, 52);
      doc.add (new Field ("tracer", num, onlyStored));
      //doc.add (new Field ("contents", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));
      doc.add(new StringField("string", num, Field.Store.NO));
      doc.add(new SortedBytesDocValuesField("string", new BytesRef(num)));
      String num2 = getRandomCharString(getRandomNumber(1, 4), 48, 50);
      doc.add(new StringField ("string2", num2, Field.Store.NO));
      doc.add(new SortedBytesDocValuesField("string2", new BytesRef(num2)));
      doc.add (new Field ("tracer2", num2, onlyStored));
      for(IndexableField f2 : doc.getFields()) {
        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {
          ((Field) f2).setBoost(2.0f);
        }
      }

      String numFixed = getRandomCharString(fixedLen, 48, 52);
      doc.add (new Field ("tracer_fixed", numFixed, onlyStored));
      //doc.add (new Field ("contents", Integer.toString(i), Field.Store.NO, Field.Index.ANALYZED));
      doc.add(new StringField("string_fixed", numFixed, Field.Store.NO));
      doc.add(new SortedBytesDocValuesField("string_fixed", new BytesRef(numFixed), true));
      String num2Fixed = getRandomCharString(fixedLen2, 48, 52);
      doc.add(new StringField ("string2_fixed", num2Fixed, Field.Store.NO));
      doc.add(new SortedBytesDocValuesField("string2_fixed", new BytesRef(num2Fixed), true));
      doc.add (new Field ("tracer2_fixed", num2Fixed, onlyStored));

      for(IndexableField f2 : doc.getFields()) {
        if (f2.fieldType().indexed() && !f2.fieldType().omitNorms()) {
          ((Field) f2).setBoost(2.0f);
        }
      }

      writer.addDocument (doc);
    }
    //System.out.println(writer.getSegmentCount());
    writer.close();
    IndexReader reader = DirectoryReader.open(indexStore);
    IndexSearcher searcher = newSearcher(reader);

    /*
    for(int docID=0;docID<reader.maxDoc();docID++) {
      StoredDocument doc = reader.document(docID);
      String s = doc.get("tracer");
      TopDocs hits = searcher.search(new TermQuery(new Term("string", s)), NUM_STRINGS);
      System.out.println("string=" + s + " has " + hits.totalHits + " docs");
      boolean found = false;
      for(int hit=0;!found && hit<hits.totalHits;hit++) {
        if (hits.scoreDocs[hit].doc == docID) {
          found = true;
          break;
        }
      }
      assertTrue(found);
      s = doc.get("tracer2");
      hits = searcher.search(new TermQuery(new Term("string2", s)), NUM_STRINGS);
      System.out.println("string2=" + s + " has " + hits.totalHits + " docs");
      found = false;
      for(int hit=0;!found && hit<hits.totalHits;hit++) {
        if (hits.scoreDocs[hit].doc == docID) {
          found = true;
          break;
        }
      }
      assertTrue(found);
    }
    */

    return searcher;
  }

