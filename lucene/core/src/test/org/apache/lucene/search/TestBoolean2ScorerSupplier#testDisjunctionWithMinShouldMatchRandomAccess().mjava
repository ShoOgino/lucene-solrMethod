  public void testDisjunctionWithMinShouldMatchRandomAccess() throws IOException {
    Map<Occur, Collection<ScorerSupplier>> subs = new EnumMap<>(Occur.class);
    for (Occur occur : Occur.values()) {
      subs.put(occur, new ArrayList<>());
    }

    // Only the most costly clause uses random-access in that case:
    // most of time, we will find agreement between the 2 least costly
    // clauses and only then check whether the 3rd one matches too
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));
    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect

    subs = new EnumMap<>(Occur.class);
    for (Occur occur : Occur.values()) {
      subs.put(occur, new ArrayList<>());
    }

    // When random-access is true, just propagate
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, true));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));
    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(true); // triggers assertions as a side-effect

    subs = new EnumMap<>(Occur.class);
    for (Occur occur : Occur.values()) {
      subs.put(occur, new ArrayList<>());
    }

    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, false));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));
    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 2).get(false); // triggers assertions as a side-effect

    subs = new EnumMap<>(Occur.class);
    for (Occur occur : Occur.values()) {
      subs.put(occur, new ArrayList<>());
    }

    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(42, true));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(12, false));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(30, true));
    subs.get(Occur.SHOULD).add(new FakeScorerSupplier(20, false));
    new Boolean2ScorerSupplier(null, subs, random().nextBoolean(), 3).get(false); // triggers assertions as a side-effect
  }

