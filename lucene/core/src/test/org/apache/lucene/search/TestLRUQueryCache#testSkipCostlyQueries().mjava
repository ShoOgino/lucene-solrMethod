  public void testSkipCostlyQueries() throws IOException {
    Directory dir = newDirectory();
    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);
    Document doc1 = new Document();
    doc1.add(new StringField("foo", "bar", Store.YES));
    doc1.add(new StringField("foo", "quux", Store.YES));
    Document doc2 = new Document();
    doc2.add(new StringField("foo", "bar", Store.YES));
    w.addDocuments(Arrays.asList(doc1, doc2));
    final IndexReader reader = w.getReader();
    final IndexSearcher searcher = newSearcher(reader);
    w.close();

    final LRUQueryCache queryCache = new LRUQueryCache(1000000, 10000000, context -> true, 1.5f);
    searcher.setQueryCache(queryCache);
    searcher.setQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);

    BooleanQuery.Builder bq = new BooleanQuery.Builder();
    bq.add(new TermQuery(new Term("foo", "bar")), Occur.FILTER);
    bq.add(new TermQuery(new Term("foo", "quux")), Occur.FILTER);

    assertEquals(Collections.emptySet(), new HashSet<>(queryCache.cachedQueries()));
    searcher.search(bq.build(), 1);
    // bar is not cached since its cost is 2 which is 2x the cost of the BooleanQuery
    assertEquals(Collections.singleton(new TermQuery(new Term("foo", "quux"))), new HashSet<>(queryCache.cachedQueries()));

    reader.close();
    w.close();
    dir.close();
  }

