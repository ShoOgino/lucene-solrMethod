  public void testErrorMessage() {
    // 45 states per vector from Lev2TParametricDescription
    final int length = (Operations.DEFAULT_MAX_DETERMINIZED_STATES / 45) + 10;
    final String value = randomRealisticMultiByteUnicode(length);

    FuzzyTermsEnum.FuzzyTermsException expected = expectThrows(FuzzyTermsEnum.FuzzyTermsException.class, () -> {
      new FuzzyQuery(new Term("field", value)).getTermsEnum(new Terms() {
        @Override
        public TermsEnum iterator() {
          return TermsEnum.EMPTY;
        }

        @Override
        public long size() {
          return 0;
        }

        @Override
        public long getSumTotalTermFreq() {
          throw new UnsupportedOperationException();
        }

        @Override
        public long getSumDocFreq() {
          throw new UnsupportedOperationException();
        }

        @Override
        public int getDocCount() {
          throw new UnsupportedOperationException();
        }

        @Override
        public boolean hasFreqs() {
          throw new UnsupportedOperationException();
        }

        @Override
        public boolean hasOffsets() {
          throw new UnsupportedOperationException();
        }

        @Override
        public boolean hasPositions() {
          throw new UnsupportedOperationException();
        }

        @Override
        public boolean hasPayloads() {
          throw new UnsupportedOperationException();
        }
      });
    });
    assertThat(expected.getMessage(), containsString(value));
  }

