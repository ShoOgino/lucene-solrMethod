  private static void assertAutomaton(LightAutomaton a) {
    a = BasicOperations.determinize(BasicOperations.removeDeadStates(a));

    // complement(complement(a)) = a
    LightAutomaton equivalent = BasicOperations.complementLight(BasicOperations.complementLight(a));
    assertTrue(BasicOperations.sameLanguage(a, equivalent));
    
    // a union a = a
    equivalent = BasicOperations.determinize(BasicOperations.removeDeadStates(BasicOperations.unionLight(a, a)));
    assertTrue(BasicOperations.sameLanguage(a, equivalent));
    
    // a intersect a = a
    equivalent = BasicOperations.determinize(BasicOperations.removeDeadStates(BasicOperations.intersectionLight(a, a)));
    assertTrue(BasicOperations.sameLanguage(a, equivalent));
    
    // a minus a = empty
    LightAutomaton empty = BasicOperations.minusLight(a, a);
    assertTrue(BasicOperations.isEmpty(empty));
    
    // as long as don't accept the empty string
    // then optional(a) - empty = a
    if (!BasicOperations.run(a, "")) {
      //System.out.println("test " + a);
      LightAutomaton optional = BasicOperations.optionalLight(a);
      //System.out.println("optional " + optional);
      equivalent = BasicOperations.minusLight(optional, BasicAutomata.makeEmptyStringLight());
      //System.out.println("equiv " + equivalent);
      assertTrue(BasicOperations.sameLanguage(a, equivalent));
    }
  } 

