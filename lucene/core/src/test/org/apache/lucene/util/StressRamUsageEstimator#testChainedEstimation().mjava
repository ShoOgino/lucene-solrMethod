  // This shows an easy stack overflow because we're counting recursively.
  @Ignore
  public void testChainedEstimation() {
    MemoryMXBean memoryMXBean = ManagementFactory.getMemoryMXBean();

    Random rnd = random();
    Entry first = new Entry();
    try {
      while (true) {
        // Check the current memory consumption and provide the estimate.
        long jvmUsed = memoryMXBean.getHeapMemoryUsage().getUsed(); 
        long estimated = RamUsageTester.sizeOf(first);
        System.out.println(String.format(Locale.ROOT, "%10d, %10d",
            jvmUsed, estimated));

        // Make a batch of objects.
        for (int i = 0; i < 5000; i++) {
          first.createNext(new byte[rnd.nextInt(1024)]);
        }
      }
    } catch (OutOfMemoryError e) {
      // Release and quit.
    }
  }

