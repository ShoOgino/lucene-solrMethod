  /** returns a common prefix length equal or lower than the current one */
  private int getRandomCommonPrefix(BKDRadixSelector.PathSlice inputSlice, int bytesPerDimension, int splitDim) throws IOException {
    byte[] pointsMax = getMax(inputSlice, bytesPerDimension, splitDim);
    byte[] pointsMin = getMin(inputSlice, bytesPerDimension, splitDim);
    int commonPrefixLength = FutureArrays.mismatch(pointsMin, 0, bytesPerDimension, pointsMax, 0, bytesPerDimension);
    if (commonPrefixLength == -1) {
      commonPrefixLength = bytesPerDimension;
    }
    return (random().nextBoolean()) ? commonPrefixLength : commonPrefixLength == 0 ? 0 : random().nextInt(commonPrefixLength);
  }

