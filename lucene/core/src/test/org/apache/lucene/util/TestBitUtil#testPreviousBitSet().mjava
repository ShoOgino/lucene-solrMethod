  public void testPreviousBitSet() {
    int numIterations = atLeast(1000);
    for (int i = 0; i < numIterations; i++) {
      long[] bits = buildRandomBits();
      int numLong = bits.length - 1;

      // Verify previousBitSet with countBitsUpTo for all bit indexes.
      for (int bitIndex = 0; bitIndex <= 64 * numLong; bitIndex++) {
        int previousIndex = BitUtil.previousBitSet(bits, numLong, bitIndex);
        if (previousIndex == -1) {
          assertEquals("No previous bit set, so expected bit count 0"
                  + " (i=" + i + " bitIndex=" + bitIndex + ")",
              0, BitUtil.countBitsUpTo(bits, numLong, bitIndex));
        } else {
          assertTrue("Expected previous bit set at previousIndex=" + previousIndex
                  + " (i=" + i + " bitIndex=" + bitIndex + ")",
              BitUtil.isBitSet(bits, numLong, previousIndex));
          int bitCount = BitUtil.countBitsUpTo(bits, numLong, Math.min(bitIndex + 1, numLong * Long.SIZE));
          int expectedPreviousBitCount = bitIndex < numLong * Long.SIZE && BitUtil.isBitSet(bits, numLong, bitIndex) ?
              bitCount - 1 : bitCount;
          assertEquals("Previous bit set at previousIndex=" + previousIndex
                  + " with current bitCount=" + bitCount
                  + " so expected previousBitCount=" + expectedPreviousBitCount
                  + " (i=" + i + " bitIndex=" + bitIndex + ")",
              expectedPreviousBitCount, BitUtil.countBitsUpTo(bits, numLong, previousIndex + 1));
        }
      }
    }
  }

