  public void testBinarySearch() throws Exception {
    // Create a node with 8 arcs spanning (z-A) and ensure it is encoded as a packed array
    // requiring binary search.
    List<String> letters = Arrays.asList("A", "E", "J", "K", "L", "O", "T", "z");
    FST<Object> fst = buildFST(letters, true, false);
    FST.Arc<Object> arc = fst.getFirstArc(new FST.Arc<>());
    arc = fst.readFirstTargetArc(arc, arc, fst.getBytesReader());
    for (int i = 0; i < letters.size(); i++) {
      assertEquals(i, Util.binarySearch(fst, arc, letters.get(i).charAt(0)));
    }
    // before the first
    assertEquals(-1, Util.binarySearch(fst, arc, ' '));
    // after the last
    assertEquals(-1 - letters.size(), Util.binarySearch(fst, arc, '~'));
    assertEquals(-2, Util.binarySearch(fst, arc, 'B'));
    assertEquals(-2, Util.binarySearch(fst, arc, 'C'));
    assertEquals(-7, Util.binarySearch(fst, arc, 'P'));
  }

