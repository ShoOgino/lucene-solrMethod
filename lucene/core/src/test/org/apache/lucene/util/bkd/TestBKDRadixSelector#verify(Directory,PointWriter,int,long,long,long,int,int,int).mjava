  private void verify(Directory dir, PointWriter points, int dimensions, long start, long end, long middle, int packedLength, int bytesPerDimensions, int sortedOnHeap) throws IOException{
    for (int splitDim =0; splitDim < dimensions; splitDim++) {
      PointWriter copy = copyPoints(dir, points, packedLength);
      PointWriter leftPointWriter = getRandomPointWriter(dir, middle - start, packedLength);
      PointWriter rightPointWriter = getRandomPointWriter(dir, end - middle, packedLength);
      BKDRadixSelector radixSelector = new BKDRadixSelector(dimensions, bytesPerDimensions, sortedOnHeap, dir, "test");
      byte[] partitionPoint = radixSelector.select(copy, leftPointWriter, rightPointWriter, start, end, middle, splitDim);
      leftPointWriter.close();
      rightPointWriter.close();
      byte[] max = getMax(leftPointWriter, middle - start, bytesPerDimensions, splitDim);
      byte[] min = getMin(rightPointWriter, end - middle, bytesPerDimensions, splitDim);
      int cmp = FutureArrays.compareUnsigned(max, 0, bytesPerDimensions, min, 0, bytesPerDimensions);
      assertTrue(cmp <= 0);
      if (cmp == 0) {
        int maxDocID = getMaxDocId(leftPointWriter, middle - start, bytesPerDimensions, splitDim, partitionPoint);
        int minDocId = getMinDocId(rightPointWriter, end - middle, bytesPerDimensions, splitDim, partitionPoint);
        assertTrue(minDocId >= maxDocID);
      }
      assertTrue(Arrays.equals(partitionPoint, min));
      leftPointWriter.destroy();
      rightPointWriter.destroy();
    }
    points.destroy();
  }

