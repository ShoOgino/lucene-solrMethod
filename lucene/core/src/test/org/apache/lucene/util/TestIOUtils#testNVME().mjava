  public void testNVME() throws Exception {
    assumeFalse("windows is not supported", Constants.WINDOWS);
    Path dir = createTempDir();
    dir = FilterPath.unwrap(dir).toRealPath();
    
    // fake ssd
    FileStore root = new MockFileStore(dir.toString() + " (/dev/nvme0n1p1)", "btrfs", "/dev/nvme0n1p1");
    // make a fake /dev/nvme0n1p1 for it
    Path devdir = dir.resolve("dev");
    Files.createDirectories(devdir);
    Files.createFile(devdir.resolve("nvme0n1p1"));
    // make a fake /sys/block/nvme0n1/queue/rotational file for it
    Path sysdir = dir.resolve("sys").resolve("block").resolve("nvme0n1").resolve("queue");
    Files.createDirectories(sysdir);
    try (OutputStream o = Files.newOutputStream(sysdir.resolve("rotational"))) {
      o.write("0\n".getBytes(StandardCharsets.US_ASCII));
    }
    // As test for the longest path match, add some other devices (that have no queue/rotational), too:
    Files.createFile(dir.resolve("sys").resolve("block").resolve("nvme0"));
    Files.createFile(dir.resolve("sys").resolve("block").resolve("dummy"));
    Files.createFile(dir.resolve("sys").resolve("block").resolve("nvm"));
    Map<String,FileStore> mappings = Collections.singletonMap(dir.toString(), root);
    FileSystem mockLinux = new MockLinuxFileSystemProvider(dir.getFileSystem(), mappings, dir).getFileSystem(null);
    
    Path mockPath = mockLinux.getPath(dir.toString());
    assertFalse(IOUtils.spinsLinux(mockPath));
  }

