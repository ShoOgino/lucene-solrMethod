  /** forms graph query */
  public void testMultiWordPhraseSynonymsBoolean() throws Exception {
    for (BooleanClause.Occur occur : new BooleanClause.Occur[] {BooleanClause.Occur.SHOULD, BooleanClause.Occur.MUST}) {
      Query syn1 = new PhraseQuery.Builder()
          .add(new Term("field", "guinea"))
          .add(new Term("field", "pig"))
          .build();
      Query syn2 = new TermQuery(new Term("field", "cavy"));
      GraphQuery expectedGraphQuery = new GraphQuery(syn1, syn2);
      QueryBuilder queryBuilder = new QueryBuilder(new MockSynonymAnalyzer());
      queryBuilder.setAutoGenerateMultiTermSynonymsPhraseQuery(true);
      assertEquals(expectedGraphQuery, queryBuilder.createBooleanQuery("field", "guinea pig", occur));

      BooleanQuery expectedBooleanQuery = new BooleanQuery.Builder()
          .add(expectedGraphQuery, occur)
          .add(new TermQuery(new Term("field", "story")), occur)
          .build();
      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery("field", "guinea pig story", occur));

      expectedBooleanQuery = new BooleanQuery.Builder()
          .add(new TermQuery(new Term("field", "the")), occur)
          .add(expectedGraphQuery, occur)
          .add(new TermQuery(new Term("field", "story")), occur)
          .build();
      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery("field", "the guinea pig story", occur));

      expectedBooleanQuery = new BooleanQuery.Builder()
          .add(new TermQuery(new Term("field", "the")), occur)
          .add(expectedGraphQuery, occur)
          .add(new TermQuery(new Term("field", "story")), occur)
          .add(expectedGraphQuery, occur)
          .build();
      assertEquals(expectedBooleanQuery, queryBuilder.createBooleanQuery("field", "the guinea pig story guinea pig", occur));
    }
  }

