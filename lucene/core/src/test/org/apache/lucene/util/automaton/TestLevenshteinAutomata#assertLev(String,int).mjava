  /**
   * Builds a DFA for some string, and checks all Lev automata
   * up to some maximum distance.
   */
  private void assertLev(String s, int maxDistance) {
    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);
    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);
    LightAutomaton automata[] = new LightAutomaton[maxDistance + 1];
    LightAutomaton tautomata[] = new LightAutomaton[maxDistance + 1];
    for (int n = 0; n < automata.length; n++) {
      automata[n] = builder.toLightAutomaton(n);
      tautomata[n] = tbuilder.toLightAutomaton(n);
      assertNotNull(automata[n]);
      assertNotNull(tautomata[n]);
      assertTrue(BasicOperations.isDeterministic(automata[n]));
      assertTrue(BasicOperations.isDeterministic(tautomata[n]));
      assertTrue(SpecialOperations.isFinite(automata[n]));
      assertTrue(SpecialOperations.isFinite(tautomata[n]));
      AutomatonTestUtil.assertNoDetachedStates(automata[n]);
      AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);
      // check that the dfa for n-1 accepts a subset of the dfa for n
      if (n > 0) {
        assertTrue(BasicOperations.subsetOf(automata[n-1], automata[n]));
        assertTrue(BasicOperations.subsetOf(automata[n-1], tautomata[n]));
        assertTrue(BasicOperations.subsetOf(tautomata[n-1], automata[n]));
        assertTrue(BasicOperations.subsetOf(tautomata[n-1], tautomata[n]));
        assertNotSame(automata[n-1], automata[n]);
      }
      // check that Lev(N) is a subset of LevT(N)
      assertTrue(BasicOperations.subsetOf(automata[n], tautomata[n]));
      // special checks for specific n
      switch(n) {
        case 0:
          // easy, matches the string itself
          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), automata[0]));
          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), tautomata[0]));
          break;
        case 1:
          // generate a lev1 naively, and check the accepted lang is the same.
          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));
          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));
          break;
        default:
          assertBruteForce(s, automata[n], n);
          assertBruteForceT(s, tautomata[n], n);
          break;
      }
    }
  }

