  public void testSymlinkSSD() throws Exception {
    assumeFalse("windows is not supported", Constants.WINDOWS);
    Path dir = createTempDir();
    dir = FilterPath.unwrap(dir).toRealPath();
    
    // fake SSD with a symlink mount (Ubuntu-like):
    Random rnd = random();
    String partitionUUID = new UUID(rnd.nextLong(), rnd.nextLong()).toString();
    FileStore root = new MockFileStore(dir.toString() + " (/dev/disk/by-uuid/"+partitionUUID+")", "btrfs", "/dev/disk/by-uuid/"+partitionUUID);
    // make a fake /dev/sda1 for it
    Path devdir = dir.resolve("dev");
    Files.createDirectories(devdir);
    Path deviceFile = devdir.resolve("sda1");
    Files.createFile(deviceFile);
    // create a symlink to the above device file
    Path symlinkdir = devdir.resolve("disk").resolve("by-uuid");
    Files.createDirectories(symlinkdir);
    try {
      Files.createSymbolicLink(symlinkdir.resolve(partitionUUID), deviceFile);
    } catch (UnsupportedOperationException | IOException e) {
      assumeNoException("test requires filesystem that supports symbolic links", e);
    }
    // make a fake /sys/block/sda/queue/rotational file for it
    Path sysdir = dir.resolve("sys").resolve("block").resolve("sda").resolve("queue");
    Files.createDirectories(sysdir);
    try (OutputStream o = Files.newOutputStream(sysdir.resolve("rotational"))) {
      o.write("0\n".getBytes(StandardCharsets.US_ASCII));
    }
    Map<String,FileStore> mappings = Collections.singletonMap(dir.toString(), root);
    FileSystem mockLinux = new MockLinuxFileSystemProvider(dir.getFileSystem(), mappings, dir).getFileSystem(null);
    
    Path mockPath = mockLinux.getPath(dir.toString());
    assertFalse(IOUtils.spinsLinux(mockPath));
  }

