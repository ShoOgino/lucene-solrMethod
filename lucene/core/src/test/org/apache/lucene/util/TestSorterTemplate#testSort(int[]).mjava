  void testSort(int[] intArr) {
    // we modify the array as a long[] and store the original ord in the first 32 bits
    // to be able to check stability
    final long[] arr = toLongsAndOrds(intArr);

    // use MergeSort as a reference
    // assertArrayEquals checks for sorting + stability
    // assertArrayEquals(toInts) checks for sorting only
    final long[] mergeSorted = Arrays.copyOf(arr, arr.length);
    new Last32BitsSorterTemplate(mergeSorted).mergeSort(0, arr.length - 1);

    if (arr.length < SLOW_SORT_THRESHOLD) {
      final long[] insertionSorted = Arrays.copyOf(arr, arr.length);
      new Last32BitsSorterTemplate(insertionSorted).insertionSort(0, arr.length - 1);
      assertArrayEquals(mergeSorted, insertionSorted);
      
      final long[] binarySorted = Arrays.copyOf(arr, arr.length);
      new Last32BitsSorterTemplate(binarySorted).binarySort(0, arr.length - 1);
      assertArrayEquals(mergeSorted, binarySorted);
    }

    final long[] quickSorted = Arrays.copyOf(arr, arr.length);
    new Last32BitsSorterTemplate(quickSorted).quickSort(0, arr.length - 1);
    assertArrayEquals(toInts(mergeSorted), toInts(quickSorted));

    final long[] timSorted = Arrays.copyOf(arr, arr.length);
    new Last32BitsSorterTemplate(timSorted).timSort(0, arr.length - 1);
    assertArrayEquals(mergeSorted, timSorted);
  }

