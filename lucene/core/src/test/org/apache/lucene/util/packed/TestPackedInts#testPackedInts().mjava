  public void testPackedInts() throws IOException {
    int num = atLeast(5);
    for (int iter = 0; iter < num; iter++) {
      for(int nbits=1;nbits<=64;nbits++) {
        final long maxValue = PackedInts.maxValue(nbits);
        final int valueCount = 100+random().nextInt(500);
        final Directory d = newDirectory();
        
        IndexOutput out = d.createOutput("out.bin", newIOContext(random()));
        PackedInts.Writer w = PackedInts.getWriter(
                                out, valueCount, nbits, random().nextFloat());
        final long startFp = out.getFilePointer();

        final int actualValueCount = random().nextBoolean() ? valueCount : _TestUtil.nextInt(random(), 0, valueCount);
        final long[] values = new long[valueCount];
        for(int i=0;i<actualValueCount;i++) {
          values[i] = _TestUtil.nextLong(random(), 0, maxValue);
          w.add(values[i]);
        }
        w.finish();
        final long fp = out.getFilePointer();
        out.close();

        // packed writers should only write longs
        assertEquals(0, (fp - startFp) % 8);
        // ensure that finish() added the (valueCount-actualValueCount) missing values
        final long bytes;
        switch (w.getFormat()) {
          case PackedInts.PACKED:
            bytes = (long) Math.ceil((double) valueCount * w.bitsPerValue / 64) << 3;
            break;
          case PackedInts.PACKED_SINGLE_BLOCK:
            final int valuesPerBlock = 64 / w.bitsPerValue;
            bytes = (long) Math.ceil((double) valueCount / valuesPerBlock) << 3;
            break;
          default:
            bytes = -1;
        }
        assertEquals(bytes, fp - startFp);

        {// test header
          IndexInput in = d.openInput("out.bin", newIOContext(random()));
          // header = codec header | bitsPerValue | valueCount | format
          CodecUtil.checkHeader(in, PackedInts.CODEC_NAME, PackedInts.VERSION_START, PackedInts.VERSION_CURRENT); // codec header
          assertEquals(w.bitsPerValue, in.readVInt());
          assertEquals(valueCount, in.readVInt());
          assertEquals(w.getFormat(), in.readVInt());
          assertEquals(startFp, in.getFilePointer());
          in.close();
        }

        {// test reader
          IndexInput in = d.openInput("out.bin", newIOContext(random()));
          PackedInts.Reader r = PackedInts.getReader(in);
          assertEquals(fp, in.getFilePointer());
          for(int i=0;i<valueCount;i++) {
            assertEquals("index=" + i + " valueCount="
                    + valueCount + " nbits=" + nbits + " for "
                    + r.getClass().getSimpleName(), values[i], r.get(i));
          }
          in.close();
        }
        { // test reader iterator next
          IndexInput in = d.openInput("out.bin", newIOContext(random()));
          PackedInts.ReaderIterator r = PackedInts.getReaderIterator(in);
          for(int i=0;i<valueCount;i++) {
            assertEquals("index=" + i + " valueCount="
                    + valueCount + " nbits=" + nbits + " for "
                    + r.getClass().getSimpleName(), values[i], r.next());
          }
          assertEquals(fp, in.getFilePointer());
          in.close();
        }
        { // test reader iterator next vs. advance
          IndexInput in = d.openInput("out.bin", newIOContext(random()));
          PackedInts.ReaderIterator intsEnum = PackedInts.getReaderIterator(in);
          for (int i = 0; i < valueCount; i += 
            1 + ((valueCount - i) <= 20 ? random().nextInt(valueCount - i)
              : random().nextInt(20))) {
            final String msg = "index=" + i + " valueCount="
                + valueCount + " nbits=" + nbits + " for "
                + intsEnum.getClass().getSimpleName();
            if (i - intsEnum.ord() == 1 && random().nextBoolean()) {
              assertEquals(msg, values[i], intsEnum.next());
            } else {
              assertEquals(msg, values[i], intsEnum.advance(i));
            }
            assertEquals(msg, i, intsEnum.ord());
          }
          if (intsEnum.ord() < valueCount - 1)
            assertEquals(values[valueCount - 1], intsEnum
                .advance(valueCount - 1));
          assertEquals(valueCount - 1, intsEnum.ord());
          assertEquals(fp, in.getFilePointer());
          in.close();
        }
        
        { // test direct reader get
          IndexInput in = d.openInput("out.bin", newIOContext(random()));
          PackedInts.Reader intsEnum = PackedInts.getDirectReader(in);
          for (int i = 0; i < valueCount; i++) {
            final String msg = "index=" + i + " valueCount="
                + valueCount + " nbits=" + nbits + " for "
                + intsEnum.getClass().getSimpleName();
            final int index = random().nextInt(valueCount);
            long value = intsEnum.get(index);
            assertEquals(msg, value, values[index]);
          }
          in.close();
        }
        d.close();
      }
    }
  }

