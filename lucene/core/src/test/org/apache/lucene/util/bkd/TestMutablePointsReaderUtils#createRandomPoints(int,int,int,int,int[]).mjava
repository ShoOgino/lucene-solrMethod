  private static Point[] createRandomPoints(int numDataDims, int numIndexdims, int bytesPerDim, int maxDoc, int[] commonPrefixLengths) {
    assertTrue(commonPrefixLengths.length == numDataDims);
    final int packedBytesLength = numDataDims * bytesPerDim;
    final int numPoints = TestUtil.nextInt(random(), 1, 100000);
    Point[] points = new Point[numPoints];
    if (random().nextInt(5) != 0) {
      for (int i = 0; i < numPoints; ++i) {
        byte[] value = new byte[packedBytesLength];
        random().nextBytes(value);
        points[i] = new Point(value, random().nextInt(maxDoc));
      }
      for (int i = 0; i < numDataDims; ++i) {
        commonPrefixLengths[i] = TestUtil.nextInt(random(), 0, bytesPerDim);
      }
      BytesRef firstValue = points[0].packedValue;
      for (int i = 1; i < points.length; ++i) {
        for (int dim = 0; dim < numDataDims; ++dim) {
          int offset = dim * bytesPerDim;
          BytesRef packedValue = points[i].packedValue;
          System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLengths[dim]);
        }
      }
    } else {
      //index dim are equal, data dims different
      byte[] indexDims = new byte[numIndexdims * bytesPerDim];
      random().nextBytes(indexDims);
      byte[] dataDims = new byte[(numDataDims - numIndexdims) * bytesPerDim];
      for (int i = 0; i < numPoints; ++i) {
        byte[] value = new byte[packedBytesLength];
        System.arraycopy(indexDims, 0, value, 0, numIndexdims * bytesPerDim);
        random().nextBytes(dataDims);
        System.arraycopy(dataDims, 0, value, numIndexdims * bytesPerDim, (numDataDims - numIndexdims) * bytesPerDim);
        points[i] = new Point(value, random().nextInt(maxDoc));
      }
      for (int i = 0; i < numIndexdims; ++i) {
        commonPrefixLengths[i] = bytesPerDim;
      }
      for (int i = numDataDims; i < numDataDims; ++i) {
        commonPrefixLengths[i] = TestUtil.nextInt(random(), 0, bytesPerDim);
      }
      BytesRef firstValue = points[0].packedValue;
      for (int i = 1; i < points.length; ++i) {
        for (int dim = numIndexdims; dim < numDataDims; ++dim) {
          int offset = dim * bytesPerDim;
          BytesRef packedValue = points[i].packedValue;
          System.arraycopy(firstValue.bytes, firstValue.offset + offset, packedValue.bytes, packedValue.offset + offset, commonPrefixLengths[dim]);
        }
      }
    }
    return points;
  }

