  public void testUpdateSingleDocWithThreads() throws IOException, BrokenBarrierException, InterruptedException {
    try (Directory dir = newDirectory();
         RandomIndexWriter writer = new RandomIndexWriter(random(), dir,
             newIndexWriterConfig().setMaxBufferedDocs(-1).setRAMBufferSizeMB(0.00001))) {
      Thread[] threads = new Thread[3 + random().nextInt(3)];
      AtomicInteger done = new AtomicInteger(0);
      CyclicBarrier barrier = new CyclicBarrier(threads.length + 1);
      Document doc = new Document();
      doc.add(new StringField("id", "1", Field.Store.NO));
      writer.updateDocument(new Term("id", "1"), doc);
      int itersPerThread = 100 + random().nextInt(2000);
      for (int i = 0; i < threads.length; i++) {
        threads[i] = new Thread(() -> {
          try {
            barrier.await();
            for (int iters = 0; iters < itersPerThread; iters++) {
              Document d = new Document();
              d.add(new StringField("id", "1", Field.Store.NO));
              writer.updateDocument(new Term("id", "1"), d);
            }
          } catch (Exception e) {
            throw new AssertionError(e);
          } finally {
            done.incrementAndGet();
          }
        });
        threads[i].start();
      }
      DirectoryReader open = DirectoryReader.open(writer.w);
      assertEquals(open.numDocs(), 1);
      barrier.await();
      try {
        do {
          DirectoryReader newReader = DirectoryReader.openIfChanged(open);
          if (newReader != null) {
            open.close();
            open = newReader;
          }
          assertEquals(open.numDocs(), 1);
        } while (done.get() < threads.length);
      } finally {
        open.close();
        for (int i = 0; i < threads.length; i++) {
          threads[i].join();
        }
      }
    }
  }

