  public void testUpdateShareValuesBinary() throws IOException {
    Counter counter = Counter.newCounter();
    boolean valueForThree = random().nextBoolean();
    DocValuesUpdate.BinaryDocValuesUpdate update =
        new DocValuesUpdate.BinaryDocValuesUpdate(new Term("id", "0"), "enabled", new BytesRef(""));
    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, update, Integer.MAX_VALUE);
    buffer.addUpdate(new Term("id", "1"), new BytesRef(""), Integer.MAX_VALUE);
    buffer.addUpdate(new Term("id", "2"), new BytesRef(""), Integer.MAX_VALUE);
    if (valueForThree) {
      buffer.addUpdate(new Term("id", "3"), new BytesRef(""), Integer.MAX_VALUE);
    } else {
      buffer.addNoValue(new Term("id", "3"), Integer.MAX_VALUE);
    }
    buffer.addUpdate(new Term("id", "4"), new BytesRef(""), Integer.MAX_VALUE);
    buffer.finish();
    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();
    FieldUpdatesBuffer.BufferedUpdate value;
    int count = 0;
    while ((value = iterator.next()) != null) {
      boolean hasValue = count != 3 || valueForThree;
      assertEquals("" + (count++), value.termValue.utf8ToString());
      assertEquals("id", value.termField);
      assertEquals(hasValue, value.hasValue);
      if (hasValue) {
        assertEquals(new BytesRef(""), value.binaryValue);
      } else {
        assertNull(value.binaryValue);
      }
      assertEquals(Integer.MAX_VALUE, value.docUpTo);
    }
    assertFalse(buffer.isNumeric());
  }

