  public void testBascis() throws IOException {
    Counter counter = Counter.newCounter();
    DocValuesUpdate.NumericDocValuesUpdate update =
        new DocValuesUpdate.NumericDocValuesUpdate(new Term("id", "1"), "age", 6);
    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, update, 15);
    buffer.addUpdate(new Term("id", "10"), 6, 15);
    assertTrue(buffer.hasSingleValue());
    buffer.addUpdate(new Term("id", "8"), 12, 15);
    assertFalse(buffer.hasSingleValue());
    buffer.addUpdate(new Term("some_other_field", "8"), 13, 17);
    assertFalse(buffer.hasSingleValue());
    buffer.addUpdate(new Term("id", "8"), 12, 16);
    assertFalse(buffer.hasSingleValue());
    assertTrue(buffer.isNumeric());
    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();
    FieldUpdatesBuffer.BufferedUpdate value = iterator.next();
    assertNotNull(value);
    assertEquals("id", value.termField);
    assertEquals("1", value.termValue.utf8ToString());
    assertEquals(6, value.numericValue);
    assertEquals(15, value.docUpTo);

    value = iterator.next();
    assertNotNull(value);
    assertEquals("id", value.termField);
    assertEquals("10", value.termValue.utf8ToString());
    assertEquals(6, value.numericValue);
    assertEquals(15, value.docUpTo);

    value = iterator.next();
    assertNotNull(value);
    assertEquals("id", value.termField);
    assertEquals("8", value.termValue.utf8ToString());
    assertEquals(12, value.numericValue);
    assertEquals(15, value.docUpTo);

    value = iterator.next();
    assertNotNull(value);
    assertEquals("some_other_field", value.termField);
    assertEquals("8", value.termValue.utf8ToString());
    assertEquals(13, value.numericValue);
    assertEquals(17, value.docUpTo);

    value = iterator.next();
    assertNotNull(value);
    assertEquals("id", value.termField);
    assertEquals("8", value.termValue.utf8ToString());
    assertEquals(12, value.numericValue);
    assertEquals(16, value.docUpTo);
    assertNull(iterator.next());
  }

