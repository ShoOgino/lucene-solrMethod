  /**
   * this test indexes random numbers within a range into a field and checks
   * their occurrences by searching for a number from that range selected at
   * random. All positions for that number are saved up front and compared to
   * the enums positions.
   */
  public void testRandomPositions() throws IOException {
    Directory dir = newDirectory();
    RandomIndexWriter writer = new RandomIndexWriter(random, dir,
        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));
    int numDocs = atLeast(47);
    int max = 1051;
    int term = random.nextInt(max);
    Integer[][] positionsInDoc = new Integer[numDocs][];
    FieldType customType = new FieldType(TextField.TYPE_UNSTORED);
    customType.setOmitNorms(true);
    for (int i = 0; i < numDocs; i++) {
      Document doc = new Document();
      ArrayList<Integer> positions = new ArrayList<Integer>();
      StringBuilder builder = new StringBuilder();
      int num = atLeast(131);
      for (int j = 0; j < num; j++) {
        int nextInt = random.nextInt(max);
        builder.append(nextInt).append(" ");
        if (nextInt == term) {
          positions.add(Integer.valueOf(j));
        }
      }
      if (positions.size() == 0) {
        builder.append(term);
        positions.add(num);
      }
      doc.add(newField(fieldName, builder.toString(), customType));
      positionsInDoc[i] = positions.toArray(new Integer[0]);
      writer.addDocument(doc);
    }

    IndexReader reader = writer.getReader();
    writer.close();

    int num = atLeast(13);
    for (int i = 0; i < num; i++) {
      BytesRef bytes = new BytesRef("" + term);
      IndexReaderContext topReaderContext = reader.getTopReaderContext();
      AtomicReaderContext[] leaves = topReaderContext.leaves();
      for (AtomicReaderContext atomicReaderContext : leaves) {
        DocsAndPositionsEnum docsAndPosEnum = getDocsAndPositions(
            atomicReaderContext.reader(), bytes, null);
        assertNotNull(docsAndPosEnum);
        int initDoc = 0;
        int maxDoc = atomicReaderContext.reader().maxDoc();
        // initially advance or do next doc
        if (random.nextBoolean()) {
          initDoc = docsAndPosEnum.nextDoc();
        } else {
          initDoc = docsAndPosEnum.advance(random.nextInt(maxDoc));
        }
        // now run through the scorer and check if all positions are there...
        do {
          int docID = docsAndPosEnum.docID();
          if (docID == DocIdSetIterator.NO_MORE_DOCS) {
            break;
          }
          Integer[] pos = positionsInDoc[atomicReaderContext.docBase + docID];
          assertEquals(pos.length, docsAndPosEnum.freq());
          // number of positions read should be random - don't read all of them
          // allways
          final int howMany = random.nextInt(20) == 0 ? pos.length
              - random.nextInt(pos.length) : pos.length;
          for (int j = 0; j < howMany; j++) {
            assertEquals("iteration: " + i + " initDoc: " + initDoc + " doc: "
                + docID + " base: " + atomicReaderContext.docBase
                + " positions: " + Arrays.toString(pos) /* TODO: + " usePayloads: "
                + usePayload*/, pos[j].intValue(), docsAndPosEnum.nextPosition());
          }

          if (random.nextInt(10) == 0) { // once is a while advance
            docsAndPosEnum
                .advance(docID + 1 + random.nextInt((maxDoc - docID)));
          }

        } while (docsAndPosEnum.nextDoc() != DocIdSetIterator.NO_MORE_DOCS);
      }

    }
    reader.close();
    dir.close();
  }

