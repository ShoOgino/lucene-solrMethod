  public void testStressUpdateSameDocumentWithMergeOnCommit() throws IOException, InterruptedException {
    try (Directory directory = newDirectory()) {
      try (RandomIndexWriter writer = new RandomIndexWriter(random(), directory, newIndexWriterConfig()
          .setMergePolicy(MERGE_ON_COMMIT_POLICY).setMaxCommitMergeWaitMillis(10 + random().nextInt(2000))
          .setSoftDeletesField("soft_delete")
          .setMergeScheduler(new ConcurrentMergeScheduler()))) {
        Document d1 = new Document();
        d1.add(new StringField("id", "1", Field.Store.NO));
        writer.updateDocument(new Term("id", "1"), d1);
        writer.commit();

        AtomicInteger iters = new AtomicInteger(100 + random().nextInt(TEST_NIGHTLY ? 5000 : 1000));
        AtomicBoolean done = new AtomicBoolean(false);
        Thread[] threads = new Thread[1 + random().nextInt(4)];
        for (int i = 0; i < threads.length; i++) {
          Thread t = new Thread(() -> {
            try {
              while (iters.decrementAndGet() > 0) {
                writer.updateDocument(new Term("id", "1"), d1);
              }
            } catch (Exception e) {
              throw new AssertionError(e);
            } finally {
              done.set(true);
            }

          });
          t.start();
          threads[i] = t;
        }
        try {
          while (done.get() == false) {
            if (random().nextBoolean()) {
              writer.commit();
            }
            try (DirectoryReader open = new SoftDeletesDirectoryReaderWrapper(DirectoryReader.open(directory), "___soft_deletes")) {
              assertEquals(1, open.numDocs());
            }
          }
        } finally {
          for (Thread t : threads) {
            t.join();
          }
        }
      }
    }
  }

