  /** 
   * checks the terms enum sequentially
   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums
   */
  public void assertTermsEnum(TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws Exception {
    BytesRef term;
    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());
    DocsAndPositionsEnum leftPositions = null;
    DocsAndPositionsEnum rightPositions = null;
    DocsEnum leftDocs = null;
    DocsEnum rightDocs = null;
    
    while ((term = leftTermsEnum.next()) != null) {
      assertEquals(info, term, rightTermsEnum.next());
      assertTermStats(leftTermsEnum, rightTermsEnum);
      if (deep) {
        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),
                                   rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));
        assertDocsAndPositionsEnum(leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),
                                   rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));

        assertPositionsSkipping(leftTermsEnum.docFreq(), 
                                leftPositions = leftTermsEnum.docsAndPositions(null, leftPositions, false),
                                rightPositions = rightTermsEnum.docsAndPositions(null, rightPositions, false));
        assertPositionsSkipping(leftTermsEnum.docFreq(), 
                                leftPositions = leftTermsEnum.docsAndPositions(randomBits, leftPositions, false),
                                rightPositions = rightTermsEnum.docsAndPositions(randomBits, rightPositions, false));

        // with freqs:
        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, true),
            rightDocs = rightTermsEnum.docs(null, rightDocs, true),
            true);
        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),
            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),
            true);

        // w/o freqs:
        assertDocsEnum(leftDocs = leftTermsEnum.docs(null, leftDocs, false),
            rightDocs = rightTermsEnum.docs(null, rightDocs, false),
            false);
        assertDocsEnum(leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),
            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),
            false);
        
        // with freqs:
        assertDocsSkipping(leftTermsEnum.docFreq(), 
            leftDocs = leftTermsEnum.docs(null, leftDocs, true),
            rightDocs = rightTermsEnum.docs(null, rightDocs, true),
            true);
        assertDocsSkipping(leftTermsEnum.docFreq(), 
            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, true),
            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, true),
            true);

        // w/o freqs:
        assertDocsSkipping(leftTermsEnum.docFreq(), 
            leftDocs = leftTermsEnum.docs(null, leftDocs, false),
            rightDocs = rightTermsEnum.docs(null, rightDocs, false),
            false);
        assertDocsSkipping(leftTermsEnum.docFreq(), 
            leftDocs = leftTermsEnum.docs(randomBits, leftDocs, false),
            rightDocs = rightTermsEnum.docs(randomBits, rightDocs, false),
            false);
      }
    }
    assertNull(info, rightTermsEnum.next());
  }

