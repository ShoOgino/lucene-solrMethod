  private void assertRandomAccessDV(String designation, List<Long> docValues) throws IOException {
    // Create corpus
    Path zeroPath = Paths.get(System.getProperty("java.io.tmpdir"),"plain_" + random().nextInt());
    Directory zeroDir = new MMapDirectory(zeroPath);
    IndexWriterConfig iwc = new IndexWriterConfig(new StandardAnalyzer());
    //iwc.setCodec(Codec.forName("Lucene70"));
    IndexWriter iw = new IndexWriter(zeroDir, iwc);

    for (int id = 0 ; id < docValues.size() ; id++) {
      Document doc = new Document();
      doc.add(new StringField("id", Integer.toString(id), Field.Store.YES));
      doc.add(new NumericDocValuesField("dv", docValues.get(id)));
      iw.addDocument(doc);
    }
    iw.flush();
    iw.commit();
    iw.forceMerge(1, true);
    iw.close();

    DirectoryReader dr = DirectoryReader.open(zeroDir);
    for (int id = 0 ; id < docValues.size() ; id++) {
      int readerIndex = dr.readerIndex(id);
      // We create a new reader each time as we want to test vBPV-skipping and not sequential iteration
      NumericDocValues numDV = dr.leaves().get(readerIndex).reader().getNumericDocValues("dv");
      assertTrue(designation + ": There should be a value for docID " + id, numDV.advanceExact(id));
      assertEquals(designation + ": The value for docID " + id + " should be as expected",
          docValues.get(id), Long.valueOf(numDV.longValue()));
    }
    dr.close();

    // Clean up
    deleteAndClose(zeroDir);
    Files.delete(zeroPath);
  }

