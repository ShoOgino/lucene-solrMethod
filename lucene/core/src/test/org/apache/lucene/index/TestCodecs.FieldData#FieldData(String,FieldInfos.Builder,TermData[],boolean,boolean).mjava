    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {
      this.omitTF = omitTF;
      this.storePayloads = storePayloads;
      // TODO: change this test to use all three
      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {

        @Override
        public boolean stored() { return false; }

        @Override
        public boolean tokenized() { return false; }

        @Override
        public boolean storeTermVectors() { return false; }

        @Override
        public boolean storeTermVectorOffsets() { return false; }

        @Override
        public boolean storeTermVectorPositions() { return false; }

        @Override
        public boolean storeTermVectorPayloads() { return false; }

        @Override
        public boolean omitNorms() { return false; }

        @Override
        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }

        @Override
        public DocValuesType docValueType() { return DocValuesType.NONE; }
      });
      if (storePayloads) {
        fieldInfo.setStorePayloads();
      }
      this.terms = terms;
      for(int i=0;i<terms.length;i++)
        terms[i].field = this;

      Arrays.sort(terms);
    }

