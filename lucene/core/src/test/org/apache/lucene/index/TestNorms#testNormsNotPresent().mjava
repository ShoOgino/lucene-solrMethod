  /**
   * this test randomly creates segments with or without norms but not omitting
   * norms. The similarity used doesn't write a norm value if writeNorms = false is
   * passed. This differs from omitNorm since norms are simply not written for this segment
   * while merging fills in default values based on the Norm {@link Type}
   */
  public void testNormsNotPresent() throws IOException {
    Directory dir = newFSDirectory(_TestUtil.getTempDir("TestNorms.testNormsNotPresent.1"));
    boolean firstWriteNorm = random().nextBoolean();
    buildIndex(dir, firstWriteNorm);

    Directory otherDir = newFSDirectory(_TestUtil.getTempDir("TestNorms.testNormsNotPresent.2"));
    boolean secondWriteNorm = random().nextBoolean();
    buildIndex(otherDir, secondWriteNorm);

    AtomicReader reader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(otherDir));
    FieldInfos fieldInfos = reader.getFieldInfos();
    FieldInfo fieldInfo = fieldInfos.fieldInfo(byteTestField);
    assertFalse(fieldInfo.omitsNorms());
    assertTrue(fieldInfo.isIndexed());
    if (secondWriteNorm) {
      assertTrue(fieldInfo.hasNorms());
    } else {
      assertFalse(fieldInfo.hasNorms());  
    }
    
    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT,
        new MockAnalyzer(random()));
    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);
    writer.addIndexes(reader);
    AtomicReader mergedReader = SlowCompositeReaderWrapper.wrap(writer.getReader());
    if (!firstWriteNorm && !secondWriteNorm) {
      DocValues normValues = mergedReader.normValues(byteTestField);
      assertNull(normValues);
      FieldInfo fi = mergedReader.getFieldInfos().fieldInfo(byteTestField);
      assertFalse(fi.omitsNorms());
      assertTrue(fi.isIndexed());
      assertFalse(fi.hasNorms());
    } else {
      FieldInfo fi = mergedReader.getFieldInfos().fieldInfo(byteTestField);
      assertFalse(fi.omitsNorms());
      assertTrue(fi.isIndexed());
      assertTrue(fi.hasNorms());
      
      DocValues normValues = mergedReader.normValues(byteTestField);
      assertNotNull(normValues);
      Source source = normValues.getSource();
      assertTrue(source.hasArray());
      assertEquals(Type.FIXED_INTS_8, normValues.getType());
      byte[] norms = (byte[]) source.getArray();
      for (int i = 0; i < mergedReader.maxDoc(); i++) {
        StoredDocument document = mergedReader.document(i);
        int expected = Integer.parseInt(document.get(byteTestField));
        assertEquals((byte) expected, norms[i]);
      }
    }
    mergedReader.close();
    reader.close();

    writer.close();
    dir.close();
    otherDir.close();
  }

