  /**
   * Tests timing out of TermsEnum iterations
   * @throws Exception on error
   */
  public void testExitableFilterIndexReader() throws Exception {
    Directory directory = newDirectory();
    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())));

    Document d1 = new Document();
    d1.add(newTextField("default", "one two", Field.Store.YES));
    writer.addDocument(d1);

    Document d2 = new Document();
    d2.add(newTextField("default", "one three", Field.Store.YES));
    writer.addDocument(d2);

    Document d3 = new Document();
    d3.add(newTextField("default", "ones two four", Field.Store.YES));
    writer.addDocument(d3);

    writer.commit();
    writer.close();

    DirectoryReader directoryReader;
    DirectoryReader exitableDirectoryReader;
    IndexReader reader;
    IndexSearcher searcher;

    Query query = new PrefixQuery(new Term("default", "o"));

    // Set a fairly high timeout value (10 seconds) and expect the query to complete in that time frame.
    // Not checking the validity of the result, all we are bothered about in this test is the timing out.
    directoryReader = DirectoryReader.open(directory);
    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(10000));
    reader = new TestReader(exitableDirectoryReader);
    searcher = new IndexSearcher(reader);
    searcher.search(query, 10);
    reader.close();
    exitableDirectoryReader.close();


    // Set a really low timeout value (1 millisecond) and expect an Exception
    directoryReader = DirectoryReader.open(directory);
    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(1));
    reader = new TestReader(exitableDirectoryReader);
    searcher = new IndexSearcher(reader);
    try {
      searcher.search(query, 10);
      fail("This query should have led to an ExitingReaderException!");
    } catch (ExitingReaderException ex) {
      // Do nothing, we expect this!
    } finally {
      reader.close();
      exitableDirectoryReader.close();
    }
   
    // Set maximum time out and expect the query to complete. 
    // Not checking the validity of the result, all we are bothered about in this test is the timing out.
    directoryReader = DirectoryReader.open(directory);
    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(Long.MAX_VALUE));
    reader = new TestReader(exitableDirectoryReader);
    searcher = new IndexSearcher(reader);
    searcher.search(query, 10);
    reader.close();
    exitableDirectoryReader.close();

    // Set a negative time allowed and expect the query to complete (should disable timeouts)
    // Not checking the validity of the result, all we are bothered about in this test is the timing out.
    directoryReader = DirectoryReader.open(directory);
    exitableDirectoryReader = new ExitableDirectoryReader(directoryReader, new QueryTimeoutImpl(-189034L));
    reader = new TestReader(exitableDirectoryReader);
    searcher = new IndexSearcher(reader);
    searcher.search(query, 10);
    reader.close();
    exitableDirectoryReader.close();

    directory.close();
  }

