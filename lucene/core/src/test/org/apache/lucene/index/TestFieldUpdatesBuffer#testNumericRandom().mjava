  public void testNumericRandom() throws IOException {
    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();
    int numUpdates = 1 + random().nextInt(1000);
    Counter counter = Counter.newCounter();
    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomNumericUpdate();
    updates.add(randomUpdate);
    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);
    for (int i = 0; i < numUpdates; i++) {
      randomUpdate = getRandomNumericUpdate();
      updates.add(randomUpdate);
      if (randomUpdate.hasValue) {
        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);
      } else {
        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);
      }
    }
    buffer.finish();
    DocValuesUpdate.NumericDocValuesUpdate lastUpdate = randomUpdate;
    boolean termsSorted = lastUpdate.hasValue && updates.stream()
        .allMatch(update -> update.field.equals(lastUpdate.field) &&
            update.hasValue && update.getValue() == lastUpdate.getValue());
    assertBufferUpdates(buffer, updates, termsSorted);
  }

