  public void testNumericRandom() throws IOException {
    List<DocValuesUpdate.NumericDocValuesUpdate> updates = new ArrayList<>();
    int numUpdates = 1 + random().nextInt(1000);
    Counter counter = Counter.newCounter();
    DocValuesUpdate.NumericDocValuesUpdate randomUpdate = getRandomUpdate(false);
    updates.add(randomUpdate);
    FieldUpdatesBuffer buffer = new FieldUpdatesBuffer(counter, randomUpdate, randomUpdate.docIDUpto);
    for (int i = 0; i < numUpdates; i++) {
      randomUpdate = getRandomUpdate(false);
      updates.add(randomUpdate);
      if (randomUpdate.hasValue) {
        buffer.addUpdate(randomUpdate.term, randomUpdate.getValue(), randomUpdate.docIDUpto);
      } else {
        buffer.addNoValue(randomUpdate.term, randomUpdate.docIDUpto);
      }
    }
    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();
    FieldUpdatesBuffer.BufferedUpdate value;

    int count = 0;
    long min = Long.MAX_VALUE;
    long max = Long.MIN_VALUE;
    while ((value = iterator.next()) != null) {
      long v = buffer.getNumericValue(count);
      min = Math.min(min, v);
      max = Math.max(max, v);
      randomUpdate = updates.get(count++);
      assertEquals(randomUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());
      assertEquals(randomUpdate.term.field, value.termField);
      assertEquals(randomUpdate.hasValue, value.hasValue);
      if (randomUpdate.hasValue) {
        assertEquals(randomUpdate.getValue(), value.numericValue);
        assertEquals(v, value.numericValue);
      } else {
        assertEquals(0, value.numericValue);
        assertEquals(0, v);
      }
      assertEquals(randomUpdate.docIDUpto, value.docUpTo);
    }
    assertEquals(max, buffer.getMaxNumeric());
    assertEquals(min, buffer.getMinNumeric());
    assertEquals(count, updates.size());
  }

