  public void testListAll() throws Exception {
    Directory dir = newDirectory();
    if (dir instanceof MockDirectoryWrapper) {
      // test lists files manually and tries to verify every .cfs it finds,
      // but a virus scanner could leave some trash.
      ((MockDirectoryWrapper)dir).setEnableVirusScanner(false);
    }
    // riw should sometimes create docvalues fields, etc
    RandomIndexWriter riw = new RandomIndexWriter(random(), dir);
    Document doc = new Document();
    // these fields should sometimes get term vectors, etc
    Field idField = newStringField("id", "", Field.Store.NO);
    Field bodyField = newTextField("body", "", Field.Store.NO);
    doc.add(idField);
    doc.add(bodyField);
    for (int i = 0; i < 100; i++) {
      idField.setStringValue(Integer.toString(i));
      bodyField.setStringValue(TestUtil.randomUnicodeString(random()));
      riw.addDocument(doc);
      if (random().nextInt(7) == 0) {
        riw.commit();
      }
    }
    riw.close();
    SegmentInfos infos = new SegmentInfos();
    infos.read(dir);
    for (String file : infos.files(dir, true)) {
      try (IndexInput in = dir.openInput(file, IOContext.DEFAULT)) {}
      if (file.endsWith(IndexFileNames.COMPOUND_FILE_EXTENSION)) {
        String segment = IndexFileNames.parseSegmentName(file);
        // warning: N^2
        boolean found = false;
        for (SegmentCommitInfo si : infos) {
          if (si.info.name.equals(segment)) {
            found = true;
            try (CompoundFileDirectory cfs = new CompoundFileDirectory(si.info.getId(), dir, file, IOContext.DEFAULT, false)) {
              for (String cfsFile : cfs.listAll()) {
                try (IndexInput cfsIn = cfs.openInput(cfsFile, IOContext.DEFAULT)) {}
              }
            }
          }
        }
        assertTrue(found);
      }
    }
    dir.close();
  }

