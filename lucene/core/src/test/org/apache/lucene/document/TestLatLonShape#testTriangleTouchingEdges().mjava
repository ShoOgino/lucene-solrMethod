  public void testTriangleTouchingEdges() {
    Polygon p = new Polygon(new double[] {0, 0, 1, 1, 0}, new double[] {0, 1, 1, 0, 0});
    Component2D polygon2D = Polygon2D.create(p);
    //3 shared points
    PointValues.Relation rel = polygon2D.relateTriangle(
        quantizeLon(0.5), quantizeLat(0),
        quantizeLon(1), quantizeLat(0.5),
        quantizeLon(0.5), quantizeLat(1));
    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rel);
    //2 shared points
    rel = polygon2D.relateTriangle(
        quantizeLon(0.5), quantizeLat(0),
        quantizeLon(1), quantizeLat(0.5),
        quantizeLon(0.5), quantizeLat(0.75));
    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rel);
    //1 shared point
    rel = polygon2D.relateTriangle(
        quantizeLon(0.5), quantizeLat(0.5),
        quantizeLon(0.5), quantizeLat(0),
        quantizeLon(0.75), quantizeLat(0.75));
    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rel);
    // 1 shared point but out
    rel = polygon2D.relateTriangle(
        quantizeLon(1), quantizeLat(0.5),
        quantizeLon(2), quantizeLat(0),
        quantizeLon(2), quantizeLat(2));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, rel);
    // 1 shared point but crossing
    rel = polygon2D.relateTriangle(
        quantizeLon(0.5), quantizeLat(0),
        quantizeLon(2), quantizeLat(0.5),
        quantizeLon(0.5), quantizeLat(1));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, rel);
    //share one edge
    rel = polygon2D.relateTriangle(
        quantizeLon(0), quantizeLat(0),
        quantizeLon(0), quantizeLat(1),
        quantizeLon(0.5), quantizeLat(0.5));
    assertEquals(PointValues.Relation.CELL_INSIDE_QUERY, rel);
    //share one edge outside
    rel = polygon2D.relateTriangle(
        quantizeLon(0), quantizeLat(1),
        quantizeLon(1.5), quantizeLat(1.5),
        quantizeLon(1), quantizeLat(1));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, rel);
  }

