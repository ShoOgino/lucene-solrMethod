  // this method is called in a spawned process:
  public static void main(final String... args) throws Exception {
    final String codecName = args[0];
    final String pfName = args[1];
    final String dvfName = args[2];
    final int numThreads = 14; // two times the modulo in switch statement below
    final ExecutorService pool = Executors.newFixedThreadPool(numThreads, new NamedThreadFactory("deadlockchecker"));
    final CyclicBarrier barrier = new CyclicBarrier(numThreads);
    IntStream.range(0, numThreads).forEach(taskNo -> pool.execute(() -> {
      try {
        barrier.await();
        switch (taskNo % 7) {
          case 0:
            Codec.getDefault();
            break;
          case 1:
            Codec.forName(codecName);
            break;
          case 2:
            PostingsFormat.forName(pfName);
            break;
          case 3:
            DocValuesFormat.forName(dvfName);
            break;
          case 4:
            Codec.availableCodecs();
            break;
          case 5:
            PostingsFormat.availablePostingsFormats();
            break;
          case 6:
            DocValuesFormat.availableDocValuesFormats();
            break;
          default:
            throw new AssertionError();
        }
      } catch (Throwable t) {
        synchronized(args) {
          System.err.println(Thread.currentThread().getName() + " failed to lookup codec service:");
          t.printStackTrace(System.err);
        }
        Runtime.getRuntime().halt(1); // signal failure to caller
      }
    }));
    pool.shutdown();
    while (!pool.awaitTermination(1, TimeUnit.MINUTES));
  }

