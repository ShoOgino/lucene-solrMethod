  public void tryDistribution(int sz, double alpha, int masknorm, int maskexc) throws Exception {
    Integer[] buff= new Integer[sz];
    int[] data = new int[sz];
    byte[] res = new byte[4+sz*8];      // loosely upperbound
    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();
    int i=0;
    for (; i<sz*alpha; ++i)
      buff[i]=gen.nextInt() & masknorm;
    for (; i<sz; ++i)
      buff[i]=gen.nextInt() & maskexc;
    Collections.shuffle(Arrays.asList(buff),gen);
    for (i=0; i<sz; ++i)
      data[i] = buff[i];

    int ensz = PForUtil.compress(data,sz,resBuffer);
    
    assert (ensz <= sz*8+4);  // must not exceed the loose upperbound

    int[] copy = new int[sz];
    PForUtil.decompress(resBuffer,copy);

//    println(getHex(data,sz)+"\n");
//    println(getHex(res,ensz)+"\n");
//    println(getHex(copy,sz)+"\n");

    assert cmp(data,sz,copy,sz)==true;
  }

