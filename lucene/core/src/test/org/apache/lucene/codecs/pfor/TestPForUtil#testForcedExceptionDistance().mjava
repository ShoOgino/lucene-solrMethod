  /**
   * Test correctness of forced exception.
   * the forced ones should exactly fit max chain 
   */
  public void testForcedExceptionDistance() throws Exception {
    initRandom();
    int sz=ForPostingsFormat.DEFAULT_BLOCK_SIZE;
    int[] data=new int[sz];
    byte[] res = new byte[sz*8];
    int[] copy = new int[sz];
    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();
    int numBits = gen.nextInt(5)+1;

    int i,j;
    int pace, ensz, header;
    int expect, got;

    // fill exception value with same pace, there should
    // be no forced exceptions.
    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);
    pace = 1<<numBits;
    for (i=0,j=0; i<sz; i+=pace) {
      int exc = gen.nextInt();
      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;
      j++;
    }
    header = PForUtil.compress(data,resBuffer);
    ensz = PForUtil.getEncodedSize(header);
    expect = j; 
    got = PForUtil.getExcNum(header);
    assert expect == got: expect+" expected but got "+got;

    // there should exactly one forced exception before each
    // exception when i>0
    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);
    pace = (1<<numBits)+1;
    for (i=0,j=0; i<sz; i+=pace) {
      int exc = gen.nextInt();
      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;
      j++;
    }
    header = PForUtil.compress(data,resBuffer);
    ensz = PForUtil.getEncodedSize(header);
    expect = 2*(j-1)+1; 
    got = PForUtil.getExcNum(header);
    assert expect == got: expect+" expected but got "+got;


    // two forced exception  
    createDistribution(data, sz, 1, MASK[numBits], MASK[numBits]);
    pace = (1<<numBits)*2+1;
    for (i=0,j=0; i<sz; i+=pace) {
      int exc = gen.nextInt();
      data[i] = (exc & 0xffff0000) == 0 ? exc | 0xffff0000 : exc;
      j++;
    }
    header = PForUtil.compress(data,resBuffer);
    ensz = PForUtil.getEncodedSize(header);
    expect = 3*(j-1)+1; 
    got = PForUtil.getExcNum(header);
    assert expect == got: expect+" expected but got "+got;

  }

