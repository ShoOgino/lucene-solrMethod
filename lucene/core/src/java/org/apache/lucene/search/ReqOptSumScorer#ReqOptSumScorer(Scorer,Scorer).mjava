  /** Construct a <code>ReqOptScorer</code>.
   * @param reqScorer The required scorer. This must match.
   * @param optScorer The optional scorer. This is used for scoring only.
   */
  public ReqOptSumScorer(
      Scorer reqScorer,
      Scorer optScorer) throws IOException
  {
    super(reqScorer.weight);
    assert reqScorer != null;
    assert optScorer != null;
    this.reqScorer = reqScorer;
    this.optScorer = optScorer;

    this.reqMaxScore = reqScorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);
    this.maxScorePropagator = new MaxScoreSumPropagator(Arrays.asList(reqScorer, optScorer));

    final TwoPhaseIterator reqTwoPhase = reqScorer.twoPhaseIterator();
    this.optTwoPhase = optScorer.twoPhaseIterator();
    final DocIdSetIterator reqApproximation;
    if (reqTwoPhase == null) {
      reqApproximation = reqScorer.iterator();
    } else {
      reqApproximation= reqTwoPhase.approximation();
    }
    if (optTwoPhase == null) {
      optApproximation = optScorer.iterator();
    } else {
      optApproximation= optTwoPhase.approximation();
    }

    approximation = new DocIdSetIterator() {

      private int nextCommonDoc(int reqDoc) throws IOException {
        int optDoc = optApproximation.docID();
        if (optDoc > reqDoc) {
          reqDoc = reqApproximation.advance(optDoc);
        }

        while (true) { // invariant: reqDoc >= optDoc
          if (reqDoc == optDoc) {
            return reqDoc;
          }

          optDoc = optApproximation.advance(reqDoc);
          if (optDoc == reqDoc) {
            return reqDoc;
          }
          reqDoc = reqApproximation.advance(optDoc);
        }
      }

      @Override
      public int nextDoc() throws IOException {
        int doc = reqApproximation.nextDoc();
        if (optIsRequired) {
          doc = nextCommonDoc(doc);
        }
        return doc;
      }

      @Override
      public int advance(int target) throws IOException {
        int doc = reqApproximation.advance(target);
        if (optIsRequired) {
          doc = nextCommonDoc(doc);
        }
        return doc;
      }

      @Override
      public int docID() {
        return reqApproximation.docID();
      }

      @Override
      public long cost() {
        return reqApproximation.cost();
      }

    };

    if (reqTwoPhase == null && optTwoPhase == null) {
      this.twoPhase = null;
    } else {
      this.twoPhase = new TwoPhaseIterator(approximation) {

        @Override
        public boolean matches() throws IOException {
          if (reqTwoPhase != null && reqTwoPhase.matches() == false) {
            return false;
          }
          if (optTwoPhase != null) {
            if (optIsRequired) {
              // The below condition is rare and can only happen if we transitioned to optIsRequired=true
              // after the opt approximation was advanced and before it was confirmed.
              if (reqScorer.docID() != optApproximation.docID()) {
                if (optApproximation.docID() < reqScorer.docID()) {
                  optApproximation.advance(reqScorer.docID());
                }
                if (reqScorer.docID() != optApproximation.docID()) {
                  return false;
                }
              }
              if (optTwoPhase.matches() == false) {
                // Advance the iterator to make it clear it doesn't match the current doc id
                optApproximation.nextDoc();
                return false;
              }
            } else if (optApproximation.docID() == reqScorer.docID() && optTwoPhase.matches() == false) {
              // Advance the iterator to make it clear it doesn't match the current doc id
              optApproximation.nextDoc();
            }
          }
          return true;
        }

        @Override
        public float matchCost() {
          float matchCost = 1;
          if (reqTwoPhase != null) {
            matchCost += reqTwoPhase.matchCost();
          }
          if (optTwoPhase != null) {
            matchCost += optTwoPhase.matchCost();
          }
          return matchCost;
        }
      };
    }
  }

