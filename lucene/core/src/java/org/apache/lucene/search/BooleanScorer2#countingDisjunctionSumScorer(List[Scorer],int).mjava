  private Scorer countingDisjunctionSumScorer(final List<Scorer> scorers,
      int minNrShouldMatch) throws IOException {
    // each scorer from the list counted as a single matcher
    if (minNrShouldMatch > 1) {
      return new MinShouldMatchSumScorer(weight, scorers, minNrShouldMatch) {
        @Override 
        public float score() throws IOException {
          coordinator.nrMatchers += super.nrMatchers;
          return super.score();
        }
      };
    } else {
      // we pass null for coord[] since we coordinate ourselves and override score()
      return new DisjunctionSumScorer(weight, scorers.toArray(new Scorer[scorers.size()]), null) {
        @Override 
        public float score() throws IOException {
          coordinator.nrMatchers += super.nrMatchers;
          return (float) super.score;
        }
      };
    }
  }

