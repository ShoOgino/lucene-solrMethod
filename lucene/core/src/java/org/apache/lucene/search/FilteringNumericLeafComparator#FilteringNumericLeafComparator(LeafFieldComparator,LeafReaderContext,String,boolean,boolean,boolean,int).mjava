  public FilteringNumericLeafComparator(LeafFieldComparator in, LeafReaderContext context, String field,
        boolean reverse, boolean singleSort, boolean hasTopValue, int bytesCount) throws IOException {
    this.in = in;
    this.pointValues = context.reader().getPointValues(field);
    this.reverse = reverse;
    this.singleSort = singleSort;
    this.hasTopValue = hasTopValue;
    this.maxDoc = context.reader().maxDoc();
    this.bytesCount = bytesCount;
    this.maxValueAsBytes = reverse == false ? new byte[bytesCount] : hasTopValue ? new byte[bytesCount] : null;
    this.minValueAsBytes = reverse ? new byte[bytesCount] : hasTopValue ? new byte[bytesCount] : null;

    // TODO: optimize a case when pointValues are missing only on this segment
    this.competitiveIterator = pointValues == null ? null : DocIdSetIterator.all(maxDoc);
    this.iteratorCost = maxDoc;
  }

