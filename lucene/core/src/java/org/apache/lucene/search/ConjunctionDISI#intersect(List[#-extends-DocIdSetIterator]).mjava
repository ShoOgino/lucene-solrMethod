  /** Create a conjunction over the provided iterators, taking advantage of
   *  {@link TwoPhaseIterator}. */
  public static ConjunctionDISI intersect(List<? extends DocIdSetIterator> iterators) {
    final List<DocIdSetIterator> allIterators = new ArrayList<>();
    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();
    for (DocIdSetIterator iterator : iterators) {
      if (iterator instanceof Scorer) {
        // if we have a scorer, check if it supports two-phase iteration
        TwoPhaseIterator twoPhaseIterator = ((Scorer) iterator).asTwoPhaseIterator();
        if (twoPhaseIterator != null) {
          // Note: 
          allIterators.add(twoPhaseIterator.approximation());
          twoPhaseIterators.add(twoPhaseIterator);
        } else {
          allIterators.add(iterator);
        }
      } else {
        // no approximation support, use the iterator as-is
        allIterators.add(iterator);
      }
    }

    if (twoPhaseIterators.isEmpty()) {
      return new ConjunctionDISI(allIterators);
    } else {
      return new TwoPhase(allIterators, twoPhaseIterators);
    }
  }

