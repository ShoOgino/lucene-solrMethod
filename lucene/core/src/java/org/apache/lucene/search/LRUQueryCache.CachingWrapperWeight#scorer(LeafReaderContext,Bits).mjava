    @Override
    public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
      if (context.ord == 0) {
        policy.onUse(getQuery());
      }
      DocIdSet docIdSet = get(in.getQuery(), context);
      if (docIdSet == null) {
        if (cacheEntryHasReasonableWorstCaseSize(ReaderUtil.getTopLevelContext(context).reader().maxDoc())
            && policy.shouldCache(in.getQuery(), context)) {
          final Scorer scorer = in.scorer(context, null);
          if (scorer == null) {
            docIdSet = DocIdSet.EMPTY;
          } else {
            docIdSet = cacheImpl(scorer, context.reader());
          }
          putIfAbsent(in.getQuery(), context, docIdSet);
        } else {
          return in.scorer(context, acceptDocs);
        }
      }

      assert docIdSet != null;
      if (docIdSet == DocIdSet.EMPTY) {
        return null;
      }
      final DocIdSetIterator disi = docIdSet.iterator();
      if (disi == null) {
        return null;
      }

      // we apply acceptDocs as an approximation
      if (acceptDocs == null) {
        return new ConstantScoreScorer(this, 0f, disi);
      } else {
        final TwoPhaseIterator twoPhaseView = new TwoPhaseIterator(disi) {
          @Override
          public boolean matches() throws IOException {
            final int doc = approximation.docID();
            return acceptDocs.get(doc);
          }
        };
        return new ConstantScoreScorer(this, 0f, twoPhaseView);
      }
    }

