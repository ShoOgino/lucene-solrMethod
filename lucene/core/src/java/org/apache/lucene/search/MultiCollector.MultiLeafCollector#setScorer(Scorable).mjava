    @Override
    public void setScorer(Scorable scorer) throws IOException {
      if (cacheScores) {
        scorer = new ScoreCachingWrappingScorer(scorer);
      }
      scorer = new FilterScorable(scorer) {
        @Override
        public void setMinCompetitiveScore(float minScore) {
          // Ignore calls to setMinCompetitiveScore so that if we wrap two
          // collectors and one of them wants to skip low-scoring hits, then
          // the other collector still sees all hits. We could try to reconcile
          // min scores and take the maximum min score across collectors, but
          // this is very unlikely to be helpful in practice.
        }

      };
      for (int i = 0; i < numCollectors; ++i) {
        final LeafCollector c = collectors[i];
        c.setScorer(scorer);
      }
    }

