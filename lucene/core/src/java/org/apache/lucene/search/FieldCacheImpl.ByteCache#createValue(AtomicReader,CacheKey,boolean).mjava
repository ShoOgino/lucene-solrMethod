    @Override
    protected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField)
        throws IOException {

      int maxDoc = reader.maxDoc();
      final byte[] values;

      NumericDocValues valuesIn = reader.getNumericDocValues(key.field);
      if (valuesIn != null) {
        // nocommit should we throw exc if parser isn't
        // null?  if setDocsWithField is true?
        values = new byte[maxDoc];
        for(int docID=0;docID<maxDoc;docID++) {
          values[docID] = (byte) valuesIn.get(docID);
        }
      } else {

        final ByteParser parser = (ByteParser) key.custom;
        if (parser == null) {
          // Confusing: must delegate to wrapper (vs simply
          // setting parser = DEFAULT_SHORT_PARSER) so cache
          // key includes DEFAULT_SHORT_PARSER:
          return wrapper.getBytes(reader, key.field, DEFAULT_BYTE_PARSER, setDocsWithField);
        }

        values = new byte[maxDoc];

        Uninvert u = new Uninvert() {
            private byte currentValue;

            @Override
            public void visitTerm(BytesRef term) {
              currentValue = parser.parseByte(term);
            }

            @Override
            public void visitDoc(int docID) {
              values[docID] = currentValue;
            }
          };

        u.uninvert(reader, key.field, setDocsWithField);

        if (setDocsWithField) {
          wrapper.setDocsWithField(reader, key.field, u.docsWithField);
        }
      }

      return new BytesFromArray(values);
    }

