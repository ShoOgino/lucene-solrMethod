    @Override
    public TopScorer topScorer(AtomicReaderContext context, boolean scoreDocsInOrder,
                               Bits acceptDocs) throws IOException {

      if (scoreDocsInOrder || minNrShouldMatch > 1) {
        // TODO: (LUCENE-4872) in some cases BooleanScorer may be faster for minNrShouldMatch
        // but the same is even true of pure conjunctions...
        return super.topScorer(context, scoreDocsInOrder, acceptDocs);
      }

      List<TopScorer> prohibited = new ArrayList<TopScorer>();
      List<TopScorer> optional = new ArrayList<TopScorer>();
      Iterator<BooleanClause> cIter = clauses.iterator();
      for (Weight w  : weights) {
        BooleanClause c =  cIter.next();
        TopScorer subScorer = w.topScorer(context, false, acceptDocs);
        if (subScorer == null) {
          if (c.isRequired()) {
            return null;
          }
        } else if (c.isRequired()) {
          // TODO: there are some cases where BooleanScorer
          // would handle conjunctions faster than
          // BooleanScorer2...
          return super.topScorer(context, scoreDocsInOrder, acceptDocs);
        } else if (c.isProhibited()) {
          prohibited.add(subScorer);
        } else {
          optional.add(subScorer);
        }
      }

      // Check if we can and should return a BooleanScorer
      return new BooleanScorer(this, disableCoord, minNrShouldMatch, optional, prohibited, maxCoord);
    }

