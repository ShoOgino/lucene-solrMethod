    @Override
    public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {
      collector.setScorer(scorer);
      DocIdSetIterator scorerIterator = twoPhase == null ? iterator : twoPhase.approximation();
      DocIdSetIterator collectorIterator = collector.competitiveIterator();
      // if possible filter scorerIterator to keep only competitive docs as defined by collector
      DocIdSetIterator filteredIterator = collectorIterator == null ? scorerIterator :
          ConjunctionDISI.intersectIterators(Arrays.asList(scorerIterator, collectorIterator));
      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {
        scoreAll(collector, filteredIterator, twoPhase, acceptDocs);
        return DocIdSetIterator.NO_MORE_DOCS;
      } else {
        int doc = scorer.docID();
        if (doc < min) {
          doc = scorerIterator.advance(min);
        }
        return scoreRange(collector, filteredIterator, twoPhase, acceptDocs, doc, max);
      }
    }

