  /**
   * Build a SpanSimilarity
   * @param query the SpanQuery to run
   * @param searcher the searcher
   * @param needsScores whether or not scores are required
   * @param weights an array of {@link org.apache.lucene.search.spans.SpanWeight}s to extract terms from
   * @return a SpanSimilarity, or null if there are no statistics to use
   * @throws IOException on error
   */
  public static SpanSimilarity build(SpanQuery query, IndexSearcher searcher, boolean needsScores, SpanWeight... weights) throws IOException {

    if (!needsScores)
      return new NonScoringSimilarity(query.getField());

    Map<Term, TermContext> contexts = new HashMap<>();
    for (SpanWeight w : weights) {
      w.extractTermContexts(contexts);
    }

    if (contexts.size() == 0)
      return null;

    TermStatistics[] stats = new TermStatistics[contexts.size()];
    int i = 0;
    for (Term term : contexts.keySet()) {
      stats[i] = searcher.termStatistics(term, contexts.get(term));
      i++;
    }

    return new ScoringSimilarity(query, searcher, stats);
  }

