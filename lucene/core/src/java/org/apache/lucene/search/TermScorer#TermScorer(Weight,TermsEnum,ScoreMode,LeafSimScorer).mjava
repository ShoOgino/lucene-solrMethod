  /**
   * Construct a <code>TermScorer</code>.
   *
   * @param weight
   *          The weight of the <code>Term</code> in the query.
   * @param te
   *          A {@link TermsEnum} positioned on the expected term.
   * @param docScorer
   *          A {@link LeafSimScorer} for the appropriate field.
   */
  TermScorer(Weight weight, TermsEnum te, ScoreMode scoreMode, LeafSimScorer docScorer) throws IOException {
    super(weight);
    this.docScorer = docScorer;
    if (scoreMode == ScoreMode.TOP_SCORES) {
      ImpactsEnum impactsEnum = te.impacts(docScorer.getSimScorer(), PostingsEnum.FREQS);
      postingsEnum = impactsEnum;
      iterator = new DocIdSetIterator() {

        int upTo = -1;
        float maxScore;

        private int advanceTarget(int target) throws IOException {
          if (minCompetitiveScore == 0) {
            // no potential for skipping
            return target;
          }

          if (target > upTo) {
            upTo = impactsEnum.advanceShallow(target);
            maxScore = impactsEnum.getMaxScore(upTo);
          }

          while (true) {
            assert upTo >= target;

            if (maxScore >= minCompetitiveScore) {
              return target;
            }

            if (upTo == NO_MORE_DOCS) {
              return NO_MORE_DOCS;
            }

            target = upTo + 1;

            upTo = impactsEnum.advanceShallow(target);
            maxScore = impactsEnum.getMaxScore(upTo);
          }
        }

        @Override
        public int advance(int target) throws IOException {
          return impactsEnum.advance(advanceTarget(target));
        }

        @Override
        public int nextDoc() throws IOException {
          return advance(impactsEnum.docID() + 1);
        }

        @Override
        public int docID() {
          return impactsEnum.docID();
        }

        @Override
        public long cost() {
          return impactsEnum.cost();
        }
      };
    } else {
      postingsEnum = te.postings(null, scoreMode.needsScores() ? PostingsEnum.FREQS : PostingsEnum.NONE);
      iterator = postingsEnum;
    }
  }

