  private Scorer opt(Collection<ScorerSupplier> optional, int minShouldMatch,
      boolean needsScores, long leadCost) throws IOException {
    if (optional.size() == 1) {
      return optional.iterator().next().get(leadCost);
    } else {
      final List<Scorer> optionalScorers = new ArrayList<>();
      for (ScorerSupplier scorer : optional) {
        optionalScorers.add(scorer.get(leadCost));
      }
      if (minShouldMatch > 1) {
        return new MinShouldMatchSumScorer(weight, optionalScorers, minShouldMatch);
      } else {
        return new DisjunctionSumScorer(weight, optionalScorers, needsScores);
      }
    }
  }

