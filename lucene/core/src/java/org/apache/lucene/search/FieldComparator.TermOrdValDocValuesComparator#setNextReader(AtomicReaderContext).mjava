    @Override
    public FieldComparator setNextReader(AtomicReaderContext context) throws IOException {
      final int docBase = context.docBase;

      final DocValues dv = context.reader().docValues(field);
      if (dv == null) {
        // This may mean entire segment had no docs with
        // this DV field; use default field value (empty
        // byte[]) in this case:
        termsIndex = DocValues.getDefaultSortedSource(DocValues.Type.BYTES_VAR_SORTED, context.reader().maxDoc());
      } else {
        termsIndex = dv.getSource().asSortedSource();
        if (termsIndex == null) {
          // This means segment has doc values, but they are
          // not able to provide a sorted source; consider
          // this a hard error:
          throw new IllegalStateException("DocValues exist for field \"" + field + "\", but not as a sorted source: type=" + dv.getSource().type() + " reader=" + context.reader());
        }
      }

      comp = termsIndex.getComparator();

      FieldComparator perSegComp = null;
      if (termsIndex.hasPackedDocToOrd()) {
        final PackedInts.Reader docToOrd = termsIndex.getDocToOrd();
        if (docToOrd.hasArray()) {
          final Object arr = docToOrd.getArray();
          assert arr != null;
          if (arr instanceof byte[]) {
            // 8 bit packed
            perSegComp = new ByteOrdComparator((byte[]) arr, termsIndex, docBase);
          } else if (arr instanceof short[]) {
            // 16 bit packed
            perSegComp = new ShortOrdComparator((short[]) arr, termsIndex, docBase);
          } else if (arr instanceof int[]) {
            // 32 bit packed
            perSegComp = new IntOrdComparator((int[]) arr, termsIndex, docBase);
          }
        }

        if (perSegComp == null) {
          perSegComp = new AnyPackedDocToOrdComparator(docToOrd, docBase);
        }
      } else {
        if (perSegComp == null) {
          perSegComp = new AnyOrdComparator(docBase);
        }
      }
        
      currentReaderGen++;
      if (bottomSlot != -1) {
        perSegComp.setBottom(bottomSlot);
      }

      return perSegComp;
    }

