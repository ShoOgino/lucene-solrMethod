    /**
     * Returns a filtered {@link Scorer} based on this strategy.
     * 
     * @param context
     *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.
     * @param scoreDocsInOrder
     *          specifies whether in-order scoring of documents is required. Note
     *          that if set to false (i.e., out-of-order scoring is required),
     *          this method can return whatever scoring mode it supports, as every
     *          in-order scorer is also an out-of-order one. However, an
     *          out-of-order scorer may not support {@link Scorer#nextDoc()}
     *          and/or {@link Scorer#advance(int)}, therefore it is recommended to
     *          request an in-order scorer if use of these methods is required.
     * @param topScorer
     *          if true, {@link Scorer#score(Collector)} will be called; if false,
     *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will
     *          be called.
     * @param weight the {@link FilteredQuery} {@link Weight} to create the filtered scorer.
     * @param docIdSet the filter {@link DocIdSet} to apply
     * @return a filtered scorer
     * 
     * @throws IOException if an {@link IOException} occurs
     */
    public abstract Scorer filteredScorer(AtomicReaderContext context,
        Weight weight, DocIdSet docIdSet) throws IOException;

