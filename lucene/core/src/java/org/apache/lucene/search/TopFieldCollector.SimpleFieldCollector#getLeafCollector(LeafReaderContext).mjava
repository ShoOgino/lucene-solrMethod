    @Override
    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {
      docBase = context.docBase;

      final LeafFieldComparator[] comparators = queue.getComparators(context);
      final int[] reverseMul = queue.getReverseMul();

      return new MultiComparatorLeafCollector(comparators, reverseMul, mayNeedScoresTwice) {

        @Override
        public void collect(int doc) throws IOException {
          float score = Float.NaN;
          if (trackMaxScore) {
            score = scorer.score();
            if (score > maxScore) {
              maxScore = score;
            }
          }

          ++totalHits;
          if (queueFull) {
            if (reverseMul * comparator.compareBottom(doc) <= 0) {
              // since docs are visited in doc Id order, if compare is 0, it means
              // this document is largest than anything else in the queue, and
              // therefore not competitive.
              return;
            }

            if (trackDocScores && !trackMaxScore) {
              score = scorer.score();
            }

            // This hit is competitive - replace bottom element in queue & adjustTop
            comparator.copy(bottom.slot, doc);
            updateBottom(doc, score);
            comparator.setBottom(bottom.slot);
          } else {
            // Startup transient: queue hasn't gathered numHits yet
            final int slot = totalHits - 1;

            if (trackDocScores && !trackMaxScore) {
              score = scorer.score();
            }

            // Copy hit into queue
            comparator.copy(slot, doc);
            add(slot, doc, score);
            if (queueFull) {
              comparator.setBottom(bottom.slot);
            }
          }
        }

      };
    }

