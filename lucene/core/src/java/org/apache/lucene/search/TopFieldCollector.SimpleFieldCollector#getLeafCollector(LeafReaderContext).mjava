    @Override
    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {
      docBase = context.docBase;

      final LeafFieldComparator[] comparators = queue.getComparators(context);
      final int[] reverseMul = queue.getReverseMul();
      final Sort indexSort = context.reader().getMetaData().getSort();
      final boolean canEarlyTerminate = trackTotalHits == false &&
          indexSort != null &&
          canEarlyTerminate(sort, indexSort);
      final int initialTotalHits = totalHits;

      return new MultiComparatorLeafCollector(comparators, reverseMul) {

        @Override
        public void collect(int doc) throws IOException {
          ++totalHits;
          if (queueFull) {
            if (reverseMul * comparator.compareBottom(doc) <= 0) {
              // since docs are visited in doc Id order, if compare is 0, it means
              // this document is largest than anything else in the queue, and
              // therefore not competitive.
              if (canEarlyTerminate) {
                // scale totalHits linearly based on the number of docs
                // and terminate collection
                totalHits += estimateRemainingHits(totalHits - initialTotalHits, doc, context.reader().maxDoc());
                earlyTerminated = true;
                throw new CollectionTerminatedException();
              } else {
                // just move to the next doc
                return;
              }
            }

            // This hit is competitive - replace bottom element in queue & adjustTop
            comparator.copy(bottom.slot, doc);
            updateBottom(doc);
            comparator.setBottom(bottom.slot);
          } else {
            // Startup transient: queue hasn't gathered numHits yet
            final int slot = totalHits - 1;

            // Copy hit into queue
            comparator.copy(slot, doc);
            add(slot, doc);
            if (queueFull) {
              comparator.setBottom(bottom.slot);
            }
          }
        }

      };
    }

