    @Override
    protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {
      if (context.ord == 0) {
        policy.onUse(getQuery());
      }
      DocIdSet docIdSet = get(in.getQuery(), context);
      if (docIdSet == null) {
        if (cacheEntryHasReasonableWorstCaseSize(ReaderUtil.getTopLevelContext(context).reader().maxDoc())
            && policy.shouldCache(in.getQuery(), context)) {
          final Scorer scorer = in.scorer(context, null);
          if (scorer == null) {
            docIdSet = DocIdSet.EMPTY;
          } else {
            docIdSet = cacheImpl(scorer, context.reader());
          }
          putIfAbsent(in.getQuery(), context, docIdSet);
        } else {
          return in.scorer(context, acceptDocs);
        }
      }

      assert docIdSet != null;
      if (docIdSet == DocIdSet.EMPTY) {
        return null;
      }
      final DocIdSetIterator approximation = docIdSet.iterator();
      if (approximation == null) {
        return null;
      }

      final DocIdSetIterator disi;
      final TwoPhaseIterator twoPhaseView;
      if (acceptDocs == null) {
        twoPhaseView = null;
        disi = approximation;
      } else {
        twoPhaseView = new TwoPhaseIterator(approximation) {
          @Override
          public boolean matches() throws IOException {
            final int doc = approximation.docID();
            return acceptDocs.get(doc);
          }
        };
        disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseView);
      }
      return new Scorer(this) {

        @Override
        public TwoPhaseIterator asTwoPhaseIterator() {
          return twoPhaseView;
        }

        @Override
        public float score() throws IOException {
          return 0f;
        }

        @Override
        public int freq() throws IOException {
          return 1;
        }

        @Override
        public int docID() {
          return disi.docID();
        }

        @Override
        public int nextDoc() throws IOException {
          return disi.nextDoc();
        }

        @Override
        public int advance(int target) throws IOException {
          return disi.advance(target);
        }

        @Override
        public long cost() {
          return disi.cost();
        }

      };
    }

