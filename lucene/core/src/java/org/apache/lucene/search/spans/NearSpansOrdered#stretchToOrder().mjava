  /** Order the subSpans within the same document by using nextStartPosition on all subSpans
   * after the first as little as necessary.
   * Return true when the subSpans could be ordered in this way,
   * otherwise at least one is exhausted in the current doc.
   */
  private boolean stretchToOrder() throws IOException {
    Spans prevSpans = subSpans.get(0);
    assert prevSpans.startPosition() != NO_MORE_POSITIONS : "prevSpans no start position "+prevSpans;
    assert prevSpans.endPosition() != NO_MORE_POSITIONS;
    for (int i = 1; i < subSpans.size(); i++) {
      Spans spans = subSpans.get(i);
      assert spans.startPosition() != NO_MORE_POSITIONS;
      assert spans.endPosition() != NO_MORE_POSITIONS;

      while (prevSpans.endPosition() > spans.startPosition()) { // while overlapping spans
        if (spans.nextStartPosition() == NO_MORE_POSITIONS) {
          return false;
        }
      }
      prevSpans = spans;
    }
    return true; // all subSpans ordered and non overlapping
  }

