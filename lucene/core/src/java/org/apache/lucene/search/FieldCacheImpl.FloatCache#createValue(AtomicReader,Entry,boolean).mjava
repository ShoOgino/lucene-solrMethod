    @Override
    protected Object createValue(AtomicReader reader, Entry entryKey, boolean setDocsWithField)
        throws IOException {
      FloatParser parser = (FloatParser) entryKey.custom;
      if (parser == null) {
        // Confusing: must delegate to wrapper (vs simply
        // setting parser =
        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER) so
        // cache key includes
        // DEFAULT_FLOAT_PARSER/NUMERIC_UTILS_FLOAT_PARSER:
        try {
          return wrapper.getFloats(reader, entryKey.field, DEFAULT_FLOAT_PARSER, setDocsWithField);
        } catch (NumberFormatException ne) {
          return wrapper.getFloats(reader, entryKey.field, NUMERIC_UTILS_FLOAT_PARSER, setDocsWithField);
        }
      }

      final FloatParser finalParser = parser;
      // nocommit how to avoid double alloc in numeric field
      // case ...
      final float[] values = new float[reader.maxDoc()];

      Uninvert u = new Uninvert() {
        private float currentValue;

        @Override
        public void visitTerm(BytesRef term) {
          currentValue = finalParser.parseFloat(term);
        }

        @Override
        public void visitDoc(int docID) {
          values[docID] = currentValue;
        }
      };

      u.uninvert(reader, entryKey.field, setDocsWithField);

      if (setDocsWithField) {
        wrapper.setDocsWithField(reader, entryKey.field, u.docsWithField);
      }

      return new FloatsFromArray(values);
    }

