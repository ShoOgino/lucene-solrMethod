  @Override
  public final Scorer scorer(LeafReaderContext context) throws IOException {
    final Bits matchingDocs = getMatchingDocs(context);
    if (matchingDocs == null || matchingDocs instanceof MatchNoBits) {
      return null;
    }
    final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());
    final TwoPhaseIterator twoPhase = new TwoPhaseIterator(approximation) {

      @Override
      public boolean matches() throws IOException {
        final int doc = approximation.docID();

        return matchingDocs.get(doc);
      }

      @Override
      public float matchCost() {
        return 10; // TODO: use some cost of matchingDocs
      }
    };

    return new ConstantScoreScorer(this, score(), twoPhase);
  }

