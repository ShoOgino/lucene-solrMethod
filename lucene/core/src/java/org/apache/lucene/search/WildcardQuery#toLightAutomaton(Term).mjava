  /**
   * Convert Lucene wildcard syntax into an automaton.
   * @lucene.internal
   */
  @SuppressWarnings("fallthrough")
  public static LightAutomaton toLightAutomaton(Term wildcardquery) {
    List<LightAutomaton> automata = new ArrayList<>();
    
    String wildcardText = wildcardquery.text();
    
    for (int i = 0; i < wildcardText.length();) {
      final int c = wildcardText.codePointAt(i);
      int length = Character.charCount(c);
      switch(c) {
        case WILDCARD_STRING: 
          automata.add(BasicAutomata.makeAnyStringLight());
          break;
        case WILDCARD_CHAR:
          automata.add(BasicAutomata.makeAnyCharLight());
          break;
        case WILDCARD_ESCAPE:
          // add the next codepoint instead, if it exists
          if (i + length < wildcardText.length()) {
            final int nextChar = wildcardText.codePointAt(i + length);
            length += Character.charCount(nextChar);
            automata.add(BasicAutomata.makeCharLight(nextChar));
            break;
          } // else fallthru, lenient parsing with a trailing \
        default:
          automata.add(BasicAutomata.makeCharLight(c));
      }
      i += length;
    }
    
    return BasicOperations.concatenateLight(automata);
  }

