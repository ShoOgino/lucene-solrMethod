  /** 
   * Expert: create a multidimensional range query for point values.
   *
   * @param field field name. must not be {@code null}.
   * @param lowerPoint lower portion of the range (inclusive).
   * @param upperPoint upper portion of the range (inclusive).
   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}
   */
  protected PointRangeQuery(String field, byte[][] lowerPoint, byte[][] upperPoint) {
    checkArgs(field, lowerPoint, upperPoint);
    this.field = field;
    if (lowerPoint.length == 0) {
      throw new IllegalArgumentException("lowerPoint has length of zero");
    }
    this.numDims = lowerPoint.length;

    if (upperPoint.length != numDims) {
      throw new IllegalArgumentException("lowerPoint has length=" + numDims + " but upperPoint has different length=" + upperPoint.length);
    }
    this.lowerPoint = lowerPoint;
    this.upperPoint = upperPoint;

    if (lowerPoint[0] == null) {
      throw new IllegalArgumentException("lowerPoint[0] is null");
    }
    this.bytesPerDim = lowerPoint[0].length;
    for (int i = 0; i < numDims; i++) {
      if (lowerPoint[i] == null) {
        throw new IllegalArgumentException("lowerPoint[" + i + "] is null");
      }
      if (upperPoint[i] == null) {
        throw new IllegalArgumentException("upperPoint[" + i + "] is null");
      }
      if (lowerPoint[i].length != bytesPerDim) {
        throw new IllegalArgumentException("all dimensions must have same bytes length, but saw " + bytesPerDim + " and " + lowerPoint[i].length);
      }
      if (upperPoint[i].length != bytesPerDim) {
        throw new IllegalArgumentException("all dimensions must have same bytes length, but saw " + bytesPerDim + " and " + upperPoint[i].length);
      }
    }
  }

