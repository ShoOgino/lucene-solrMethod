  /**
   * Returns {@link CollectionStatistics} for a field.
   * 
   * This can be overridden for example, to return a field's statistics
   * across a distributed collection.
   * @lucene.experimental
   */
  public CollectionStatistics collectionStatistics(String field) throws IOException {
    int docCount = 0;
    long sumTotalTermFreq = 0;
    long sumDocFreq = 0;

    assert field != null;

    for(LeafReaderContext ctx : reader.leaves()) {
      Terms terms = ctx.reader().fields().terms(field);
      if (terms != null) {
        int subDocCount = terms.getDocCount();
        if (subDocCount == -1) {
          docCount = -1;
        } else if (docCount != -1) {
          docCount += subDocCount;
        }
        long subSumDocFreq = terms.getSumDocFreq();
        if (subSumDocFreq == -1) {
          sumDocFreq = -1;
        } else if (sumDocFreq != -1) {
          sumDocFreq += subSumDocFreq;
        }
        long subSumTotalTermFreq = terms.getSumTotalTermFreq();
        if (subSumTotalTermFreq == -1) {
          sumTotalTermFreq = -1;
        } else if (sumTotalTermFreq != -1) {
          sumTotalTermFreq += subSumTotalTermFreq;
        }
      }
    }
    return new CollectionStatistics(field, reader.maxDoc(), docCount, sumTotalTermFreq, sumDocFreq);
  }

