    @Override
    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {
      return new RandomAccessWeight(this, boost) {
        @Override
        protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {
          final SortedSetDocValues fcsi = DocValues.getSortedSet(context.reader(), query.field);
          TermsEnum termsEnum = query.getTermsEnum(new Terms() {
            
            @Override
            public TermsEnum iterator() {
              return fcsi.termsEnum();
            }

            @Override
            public long getSumTotalTermFreq() {
              return -1;
            }

            @Override
            public long getSumDocFreq() {
              return -1;
            }

            @Override
            public int getDocCount() {
              return -1;
            }

            @Override
            public long size() {
              return -1;
            }

            @Override
            public boolean hasFreqs() {
              return false;
            }

            @Override
            public boolean hasOffsets() {
              return false;
            }

            @Override
            public boolean hasPositions() {
              return false;
            }
            
            @Override
            public boolean hasPayloads() {
              return false;
            }
          });
          
          assert termsEnum != null;
          if (termsEnum.next() == null) {
            // no matching terms
            return null;
          }
          // fill into a bitset
          // Cannot use FixedBitSet because we require long index (ord):
          final LongBitSet termSet = new LongBitSet(fcsi.getValueCount());
          do {
            long ord = termsEnum.ord();
            if (ord >= 0) {
              termSet.set(ord);
            }
          } while (termsEnum.next() != null);

          return new Bits() {

            @Override
            public boolean get(int doc) {
              try {
                if (doc > fcsi.docID()) {
                  fcsi.advance(doc);
                }
                if (doc == fcsi.docID()) {
                  for (long ord = fcsi.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = fcsi.nextOrd()) {
                    if (termSet.get(ord)) {
                      return true;
                    }
                  }
                }
                return false;
              } catch (IOException ioe) {
                throw new RuntimeException(ioe);
              }
            }

            @Override
            public int length() {
              return context.reader().maxDoc();
            }

          };
        }
      };
    }

