  /**
   * Score a candidate doc for all slop-valid position-combinations (matches) 
   * encountered while traversing/hopping the PhrasePositions.
   * <br> The score contribution of a match depends on the distance: 
   * <br> - highest score for distance=0 (exact match).
   * <br> - score gets lower as distance gets higher.
   * <br>Example: for query "a b"~2, a document "x a b a y" can be scored twice: 
   * once for "a b" (distance=0), and once for "b a" (distance=2).
   * <br>Possibly not all valid combinations are encountered, because for efficiency  
   * we always propagate the least PhrasePosition. This allows to base on 
   * PriorityQueue and move forward faster. 
   * As result, for example, document "a b c b a"
   * would score differently for queries "a b c"~4 and "c b a"~4, although 
   * they really are equivalent. 
   * Similarly, for doc "a b c b a f g", query "c b"~2 
   * would get same score as "g f"~2, although "c b"~2 could be matched twice.
   * We may want to fix this in the future (currently not, for performance reasons).
   */
  @Override
  protected float phraseFreq() throws IOException {
    int end = initPhrasePositions();
    //printPositions(System.err, "INIT DONE:");
    if (end==Integer.MIN_VALUE) {
      return 0.0f;
    }
    
    float freq = 0.0f;
    PhrasePositions pp = pq.pop();
    int matchLength = end - pp.position;
    int next = pq.size()>0 ? pq.top().position : pp.position;
    //printQueue(System.err, pp, "Bef Loop: next="+next+" mlen="+end+"-"+pp.position+"="+matchLength);
    while (pp.nextPosition() && (end=advanceRepeats(pp, end)) != Integer.MIN_VALUE)  {
      if (pp.position > next) {
        //printQueue(System.err, pp, "A: >next="+next+" matchLength="+matchLength);
        if (matchLength <= slop) {
          freq += docScorer.computeSlopFactor(matchLength); // score match
        }      
        pq.add(pp);
        pp = pq.pop();
        next = pq.size()>0 ? pq.top().position : pp.position;
        matchLength = end - pp.position;
        //printQueue(System.err, pp, "B: >next="+next+" matchLength="+matchLength);
      } else {
        int matchLength2 = end - pp.position;
        //printQueue(System.err, pp, "C: mlen2<mlen: next="+next+" matchLength="+matchLength+" matchLength2="+matchLength2);
        if (matchLength2 < matchLength) {
          matchLength = matchLength2;
        }
      }
    }
    if (matchLength <= slop) {
      freq += docScorer.computeSlopFactor(matchLength); // score match
    }    
    return freq;
  }

