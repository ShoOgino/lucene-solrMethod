  @Override
  public final FilteringLeafFieldComparator getLeafComparator(LeafReaderContext context) throws IOException {
    LeafFieldComparator inLeafComparator = in.getLeafComparator(context);
    Class<?> comparatorClass = inLeafComparator.getClass();
    if (comparatorClass == FieldComparator.LongComparator.class) {
      return new FilteringNumericLeafComparator.FilteringLongLeafComparator((FieldComparator.LongComparator) inLeafComparator, context,
          ((LongComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);
    } if (comparatorClass == FieldComparator.IntComparator.class) {
      return new FilteringNumericLeafComparator.FilteringIntLeafComparator((FieldComparator.IntComparator) inLeafComparator, context,
          ((IntComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);
    } else if (comparatorClass == FieldComparator.DoubleComparator.class) {
      return new FilteringNumericLeafComparator.FilteringDoubleLeafComparator((FieldComparator.DoubleComparator) inLeafComparator, context,
          ((DoubleComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);
    } else if (comparatorClass == FieldComparator.FloatComparator.class) {
      return new FilteringNumericLeafComparator.FilteringFloatLeafComparator((FieldComparator.FloatComparator) inLeafComparator, context,
          ((FloatComparator) inLeafComparator).field, reverse, singleSort, hasTopValue);
    } else {
      throw new IllegalStateException("Unexpected numeric class of ["+ comparatorClass + "] for [FieldComparator]!");
    }
  }

