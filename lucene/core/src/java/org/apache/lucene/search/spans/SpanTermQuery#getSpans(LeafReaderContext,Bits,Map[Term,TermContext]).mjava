  @Override
  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {
    TermContext termContext = termContexts.get(term);
    final TermState state;
    if (termContext == null) {
      // this happens with span-not query, as it doesn't include the NOT side in extractTerms()
      // so we seek to the term now in this segment..., this sucks because it's ugly mostly!
      final Terms terms = context.reader().terms(term.field());
      if (terms != null) {
        if (terms.hasPositions() == false) {
          throw new IllegalStateException("field \"" + term.field() + "\" was indexed without position data; cannot run SpanTermQuery (term=" + term.text() + ")");
        }

        final TermsEnum termsEnum = terms.iterator(null);
        if (termsEnum.seekExact(term.bytes())) {
          state = termsEnum.termState();
        } else {
          state = null;
        }
      } else {
        state = null;
      }
    } else {
      state = termContext.get(context.ord);
    }

    if (state == null) { // term is not present in that reader
      return null;
    }

    final TermsEnum termsEnum = context.reader().terms(term.field()).iterator(null);
    termsEnum.seekExact(term.bytes(), state);

    final PostingsEnum postings = termsEnum.postings(acceptDocs, null, PostingsEnum.PAYLOADS);
    return new TermSpans(postings, term);
  }

