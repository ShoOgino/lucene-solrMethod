  @Override
  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
    return new ConstantScoreWeight(this) {
      @Override
      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
        final Terms terms = context.reader().terms(query.field);
        if (terms == null) {
          // field does not exist
          return null;
        }

        final TermsEnum termsEnum = query.getTermsEnum(terms);
        assert termsEnum != null;

        BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());
        PostingsEnum docs = null;
        while (termsEnum.next() != null) {
          docs = termsEnum.postings(acceptDocs, docs, PostingsEnum.NONE);
          builder.or(docs);
        }
        final BitDocIdSet set = builder.build();
        if (set == null) {
          return null;
        }
        final DocIdSetIterator disi = set.iterator();
        if (disi == null) {
          return null;
        }
        return new ConstantScoreScorer(this, score(), disi);
      }
    };
  }

