  private void doMaybeRefresh() throws IOException {
    // it's ok to call lock() here (blocking) because we're supposed to get here
    // from either maybeRefreh() or maybeRefreshBlocking(), after the lock has
    // already been obtained. Doing that protects us from an accidental bug
    // where this method will be called outside the scope of refreshLock.
    // Per ReentrantLock's javadoc, calling lock() by the same thread more than
    // once is ok, as long as unlock() is called a matching number of times.
    refreshLock.lock();
    try {
      final G reference = acquire();
      try {
        G newReference = refreshIfNeeded(reference);
        if (newReference != null) {
          assert newReference != reference : "refreshIfNeeded should return null if refresh wasn't needed";
          boolean success = false;
          try {
            swapReference(newReference);
            success = true;
          } finally {
            if (!success) {
              release(newReference);
            }
          }
        }
      } finally {
        release(reference);
      }
      afterRefresh();
    } finally {
      refreshLock.unlock();
    }
  }

