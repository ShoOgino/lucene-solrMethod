  private static Automaton[] buildAutomata(int[] termText, int prefixLength, boolean transpositions, int maxEdits) {
    if (maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {
      throw new IllegalArgumentException("max edits must be 0.." + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + ", inclusive; got: " + maxEdits);
    }
    if (prefixLength < 0) {
      throw new IllegalArgumentException("prefixLength cannot be less than 0");
    }
    Automaton[] automata = new Automaton[maxEdits + 1];
    int termLength = termText.length;
    prefixLength = Math.min(prefixLength, termLength);
    String suffix = UnicodeUtil.newString(termText, prefixLength, termText.length - prefixLength);
    LevenshteinAutomata builder = new LevenshteinAutomata(suffix, transpositions);
    String prefix = UnicodeUtil.newString(termText, 0, prefixLength);
    for (int i = 0; i <= maxEdits; i++) {
      automata[i] = builder.toAutomaton(i, prefix);
    }
    return automata;
  }

