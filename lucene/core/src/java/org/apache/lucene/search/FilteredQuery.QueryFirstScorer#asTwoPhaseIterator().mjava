    @Override
    public TwoPhaseIterator asTwoPhaseIterator() {    
      TwoPhaseIterator inner = scorer.asTwoPhaseIterator();
      if (inner != null) {
        // we are like a simplified conjunction here, handle the nested case:
        return new TwoPhaseIterator() {
          @Override
          public DocIdSetIterator approximation() {
            return inner.approximation();
          }
          @Override
          public boolean matches() throws IOException {
            // check the approximation matches first, then check bits last.
            return inner.matches() && filterBits.get(scorer.docID());
          }
        };
      } else {
        // scorer doesnt have an approximation, just use it, to force bits applied last.
        return new TwoPhaseIterator() {
          @Override
          public DocIdSetIterator approximation() {
            return scorer;
          }
          
          @Override
          public boolean matches() throws IOException {
            return filterBits.get(scorer.docID());
          }
        };
      }
    }

