  @Override
  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
    return new Weight(this) {

      @Override
      public float getValueForNormalization() throws IOException {
        return 0f;
      }

      @Override
      public void normalize(float norm, float topLevelBoost) {}

      @Override
      public Explanation explain(LeafReaderContext context, int doc) throws IOException {
        final Scorer scorer = scorer(context, context.reader().getLiveDocs());
        final boolean match = (scorer != null && scorer.advance(doc) == doc);
        final String desc;
        if (match) {
          assert scorer.score() == 0f;
          desc = "Match on id " + doc;
        } else {
          desc = "No match on id " + doc;
        }
        return new ComplexExplanation(match, 0f, desc);
      }

      @Override
      public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {
        final DocIdSet set = getDocIdSet(context, acceptDocs);
        if (set == null) {
          return null;
        }
        final DocIdSetIterator iterator = set.iterator();
        if (iterator == null) {
          return null;
        }
        return new Scorer(this) {

          @Override
          public float score() throws IOException {
            return 0f;
          }

          @Override
          public int freq() throws IOException {
            return 1;
          }

          @Override
          public int docID() {
            return iterator.docID();
          }

          @Override
          public int nextDoc() throws IOException {
            return iterator.nextDoc();
          }

          @Override
          public int advance(int target) throws IOException {
            return iterator.advance(target);
          }

          @Override
          public long cost() {
            return iterator.cost();
          }
        };
      }

    };
  }

