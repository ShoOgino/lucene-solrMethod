  /**
   * Creates a DoubleValuesSource that is a function of another DoubleValuesSource
   */
  public static DoubleValuesSource function(DoubleValuesSource in, String description, DoubleUnaryOperator function) {
    return new DoubleValuesSource() {
      @Override
      public DoubleValues getValues(LeafReaderContext ctx, DoubleValues scores) throws IOException {
        DoubleValues inputs = in.getValues(ctx, scores);
        return new DoubleValues() {
          @Override
          public double doubleValue() throws IOException {
            return function.applyAsDouble(inputs.doubleValue());
          }

          @Override
          public boolean advanceExact(int doc) throws IOException {
            return inputs.advanceExact(doc);
          }
        };
      }

      @Override
      public boolean needsScores() {
        return in.needsScores();
      }

      @Override
      public Explanation explain(LeafReaderContext ctx, int docId, Explanation scoreExplanation) throws IOException {
        Explanation inner = in.explain(ctx, docId, scoreExplanation);
        return Explanation.match((float) function.applyAsDouble(inner.getValue()), description + ", computed from:", inner, scoreExplanation);
      }
    };
  }

