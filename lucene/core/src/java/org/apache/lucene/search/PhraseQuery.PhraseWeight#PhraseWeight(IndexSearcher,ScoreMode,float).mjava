    public PhraseWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost)
      throws IOException {
      super(PhraseQuery.this);
      final int[] positions = PhraseQuery.this.getPositions();
      if (positions.length < 2) {
        throw new IllegalStateException("PhraseWeight does not support less than 2 terms, call rewrite first");
      } else if (positions[0] != 0) {
        throw new IllegalStateException("PhraseWeight requires that the first position is 0, call rewrite first");
      }
      this.scoreMode = scoreMode;
      this.similarity = searcher.getSimilarity();
      final IndexReaderContext context = searcher.getTopReaderContext();
      states = new TermStates[terms.length];
      TermStatistics termStats[] = new TermStatistics[terms.length];
      int termUpTo = 0;
      for (int i = 0; i < terms.length; i++) {
        final Term term = terms[i];
        states[i] = TermStates.build(context, term, scoreMode.needsScores());
        if (scoreMode.needsScores()) {
          TermStatistics termStatistics = searcher.termStatistics(term, states[i]);
          if (termStatistics != null) {
            termStats[termUpTo++] = termStatistics;
          }
        }
      }
      if (termUpTo > 0) {
        stats = similarity.scorer(boost, searcher.collectionStatistics(field), Arrays.copyOf(termStats, termUpTo));
      } else {
        stats = null; // no terms at all, we won't use similarity
      }
    }

