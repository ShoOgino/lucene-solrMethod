  /**
   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of
   * length <code>prefixLength</code> with <code>term</code> and which have at most {@code maxEdits} edits.
   * <p>
   * After calling the constructor the enumeration is already pointing to the first 
   * valid term if such a term exists. 
   * 
   * @param terms Delivers terms.
   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}
   *              that contains information about competitive boosts during rewrite
   * @param term Pattern term.
   * @param maxEdits Maximum edit distance.
   * @param automata An array of levenshtein automata to match against terms,
   *                 see {@link #buildAutomata(String, int[], int, boolean, int)}
   * @throws IOException if there is a low-level IO error
   */
  public FuzzyTermsEnum(Terms terms, AttributeSource atts, Term term, int termLength,
      final int maxEdits, CompiledAutomaton[] automata) throws IOException {

    this.maxEdits = maxEdits;
    this.terms = terms;
    this.term = term;
    this.atts = atts;
    this.termLength = termLength;

    this.maxBoostAtt = atts.addAttribute(MaxNonCompetitiveBoostAttribute.class);
    this.boostAtt = atts.addAttribute(BoostAttribute.class);

    this.automata = automata;

    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();
    bottomTerm = maxBoostAtt.getCompetitiveTerm();
    bottomChanged(null);
  }

