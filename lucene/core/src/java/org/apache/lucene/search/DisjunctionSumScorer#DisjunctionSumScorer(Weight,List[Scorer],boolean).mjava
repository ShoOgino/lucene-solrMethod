  /** Construct a <code>DisjunctionScorer</code>.
   * @param weight The weight to be used.
   * @param subScorers Array of at least two subscorers.
   */
  DisjunctionSumScorer(Weight weight, List<Scorer> subScorers, boolean needsScores) throws IOException {
    super(weight, subScorers, needsScores);
    double maxScore = 0;
    for (Scorer scorer : subScorers) {
      maxScore += scorer.getMaxScore(DocIdSetIterator.NO_MORE_DOCS);
    }
    // The error of sums depends on the order in which values are summed up. In
    // order to avoid this issue, we compute an upper bound of the value that
    // the sum may take. If the max relative error is b, then it means that two
    // sums are always within 2*b of each other.
    double maxScoreRelativeErrorBound = MathUtil.sumRelativeErrorBound(subScorers.size());
    this.maxScore = (float) ((1.0 + 2 * maxScoreRelativeErrorBound) * maxScore);
  }

