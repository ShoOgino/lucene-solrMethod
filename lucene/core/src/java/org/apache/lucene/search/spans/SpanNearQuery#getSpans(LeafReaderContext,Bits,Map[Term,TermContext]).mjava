  @Override
  public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Map<Term,TermContext> termContexts) throws IOException {
    ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());

    for (SpanQuery seq : clauses) {
      Spans subSpan = seq.getSpans(context, acceptDocs, termContexts);
      if (subSpan != null) {
        subSpans.add(subSpan);
      } else {
        return null; // all required
      }
    }

    Terms terms = context.reader().terms(field);
    if (terms == null) {
      return null; // field does not exist
    }
    
    // all NearSpans require at least two subSpans
    return (! inOrder) ? new NearSpansUnordered(this, subSpans)
          : collectPayloads && terms.hasPayloads() ? new NearSpansPayloadOrdered(this, subSpans)
          : new NearSpansOrdered(this, subSpans);
  }

