  @Override
  public TwoPhaseIterator twoPhaseIterator() {
    return new TwoPhaseIterator(conjunction) {
      @Override
      public boolean matches() throws IOException {
        if (needsTotalHitCount == false && minCompetitiveScore > 0) {
          int minFreq = postings[0].postings.freq();
          for (int i = 1; i < postings.length; ++i) {
            minFreq = Math.min(postings[i].postings.freq(), minFreq);
          }
          if (docScorer.score(docID(), minFreq) < minCompetitiveScore) {
            // The maximum score we could get is less than the min competitive score
            return false;
          }
        }
        return phraseFreq() > 0;
      }

      @Override
      public float matchCost() {
        return matchCost;
      }
    };
  }

