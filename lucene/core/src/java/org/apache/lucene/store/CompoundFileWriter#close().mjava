  /**
   * Closes all resources and writes the entry table
   * 
   * @throws IllegalStateException
   *           if close() had been called before or if no file has been added to
   *           this object
   */
  @Override
  public void close() throws IOException {
    if (closed) {
      return;
    }
    IOException priorException = null;
    IndexOutput entryTableOut = null;
    // TODO this code should clean up after itself
    // (remove partial .cfs/.cfe)
    try {
      if (!pendingEntries.isEmpty() || outputTaken.get()) {
        throw new IllegalStateException("CFS has pending open files");
      }
      closed = true;
      // open the compound stream
      getOutput();
      assert dataOut != null;
      CodecUtil.writeFooter(dataOut);
    } catch (IOException e) {
      priorException = e;
    } finally {
      IOUtils.closeWhileHandlingException(priorException, dataOut);
    }
    try {
      entryTableOut = directory.createOutput(entryTableName, IOContext.DEFAULT);
      writeEntryTable(entries.values(), entryTableOut);
    } catch (IOException e) {
      priorException = e;
    } finally {
      IOUtils.closeWhileHandlingException(priorException, entryTableOut);
    }
  }

