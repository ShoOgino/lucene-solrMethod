  /** Helper method that reads CFS entries from an input stream */
  private static final Map<String, FileEntry> readEntries(
      IndexInputSlicer handle, Directory dir, String name) throws IOException {
    // read the first VInt. If it is negative, it's the version number
    // otherwise it's the count (pre-3.1 indexes)
    final IndexInput stream = handle.openFullSlice();
    final Map<String, FileEntry> mapping;
    boolean success = false;
    try {
      final int firstInt = stream.readVInt();
      if (firstInt == CompoundFileWriter.FORMAT_CURRENT) {
        IndexInput input = null;
        try {
          final String entriesFileName = IndexFileNames.segmentFileName(
                                                IndexFileNames.stripExtension(name), "",
                                                IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION);
          input = dir.openInput(entriesFileName, IOContext.READONCE);
          final int readInt = input.readInt(); // unused right now
          assert readInt == CompoundFileWriter.ENTRY_FORMAT_CURRENT;
          final int numEntries = input.readVInt();
          mapping = new HashMap<String, CompoundFileDirectory.FileEntry>(
              numEntries);
          for (int i = 0; i < numEntries; i++) {
            final FileEntry fileEntry = new FileEntry();
            final String id = input.readString();
            assert !mapping.containsKey(id): "id=" + id + " was written multiple times in the CFS";
            mapping.put(id, fileEntry);
            fileEntry.offset = input.readLong();
            fileEntry.length = input.readLong();
          }
          success = true;
          return mapping;
        } finally {
          IOUtils.close(input);
        }
      } else {
        throw new IndexFormatTooOldException(stream, firstInt, 
            CompoundFileWriter.FORMAT_CURRENT, CompoundFileWriter.FORMAT_CURRENT);
      }
    } finally {
      if (success) {
        IOUtils.close(stream);
      } else {
        IOUtils.closeWhileHandlingException(stream);
      }
    }
  }

