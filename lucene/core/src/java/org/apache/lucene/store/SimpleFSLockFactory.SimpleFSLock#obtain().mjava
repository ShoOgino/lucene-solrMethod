    @Override
    public synchronized boolean obtain() throws IOException {
      if (obtained) {
        // Our instance is already locked:
        throw new LockObtainFailedException("this lock instance was already obtained");
      }
      
      try {
        Files.createDirectories(lockDir);
        Files.createFile(lockFile);
        obtained = true;
      } catch (IOException ioe) {
        // On Windows, on concurrent createNewFile, the 2nd process gets "access denied".
        // In that case, the lock was not aquired successfully, so return false.
        // We record the failure reason here; the obtain with timeout (usually the
        // one calling us) will use this as "root cause" if it fails to get the lock.
        failureReason = ioe;
      }

      return obtained;
    }

