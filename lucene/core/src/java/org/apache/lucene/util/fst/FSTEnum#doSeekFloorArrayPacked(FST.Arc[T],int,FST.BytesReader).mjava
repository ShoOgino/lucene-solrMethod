  private FST.Arc<T> doSeekFloorArrayPacked(FST.Arc<T> arc, int targetLabel, final FST.BytesReader in) throws IOException {
    // Arcs are fixed array -- use binary search to find the target.
    int idx = Util.binarySearch(fst, arc, targetLabel);

    if (idx >= 0) {
      // Match -- recurse
      //System.out.println("  match!  arcIdx=" + idx);
      fst.readArcByIndex(arc, in, idx);
      assert arc.arcIdx() == idx;
      assert arc.label() == targetLabel: "arc.label=" + arc.label() + " vs targetLabel=" + targetLabel + " mid=" + idx;
      output[upto] = fst.outputs.add(output[upto-1], arc.output());
      if (targetLabel == FST.END_LABEL) {
        return null;
      }
      setCurrentLabel(arc.label());
      incr();
      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);
    } else if (idx == -1) {
      //System.out.println("  before first");
      // Very first arc is after our target
      // TODO: if each arc could somehow read the arc just
      // before, we can save this re-scan.  The ceil case
      // doesn't need this because it reads the next arc
      // instead:
      while(true) {
        // First, walk backwards until we find a first arc
        // that's before our target label:
        fst.readFirstTargetArc(getArc(upto-1), arc, fstReader);
        if (arc.label() < targetLabel) {
          // Then, scan forwards to the arc just before
          // the targetLabel:
          while(!arc.isLast() && fst.readNextArcLabel(arc, in) < targetLabel) {
            fst.readNextArc(arc, fstReader);
          }
          pushLast();
          return null;
        }
        upto--;
        if (upto == 0) {
          return null;
        }
        targetLabel = getTargetLabel();
        arc = getArc(upto);
      }
    } else {
      // There is a floor arc; idx will be {@code -1 - (floor + 1)}.
      fst.readArcByIndex(arc, in, -2 - idx);
      assert arc.isLast() || fst.readNextArcLabel(arc, in) > targetLabel;
      assert arc.label() < targetLabel: "arc.label=" + arc.label() + " vs targetLabel=" + targetLabel;
      pushLast();
      return null;
    }        
  }

