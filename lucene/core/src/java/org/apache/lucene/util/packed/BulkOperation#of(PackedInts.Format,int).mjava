  public static BulkOperation of(PackedInts.Format format, int bitsPerValue) {
    switch (format) {
    case PACKED:
      switch (bitsPerValue) {
      case 1:
        return PACKED_1;
      case 2:
        return PACKED_2;
      case 3:
        return PACKED_3;
      case 4:
        return PACKED_4;
      case 5:
        return PACKED_5;
      case 6:
        return PACKED_6;
      case 7:
        return PACKED_7;
      case 8:
        return PACKED_8;
      case 9:
        return PACKED_9;
      case 10:
        return PACKED_10;
      case 11:
        return PACKED_11;
      case 12:
        return PACKED_12;
      case 13:
        return PACKED_13;
      case 14:
        return PACKED_14;
      case 15:
        return PACKED_15;
      case 16:
        return PACKED_16;
      case 17:
        return PACKED_17;
      case 18:
        return PACKED_18;
      case 19:
        return PACKED_19;
      case 20:
        return PACKED_20;
      case 21:
        return PACKED_21;
      case 22:
        return PACKED_22;
      case 23:
        return PACKED_23;
      case 24:
        return PACKED_24;
      case 25:
        return PACKED_25;
      case 26:
        return PACKED_26;
      case 27:
        return PACKED_27;
      case 28:
        return PACKED_28;
      case 29:
        return PACKED_29;
      case 30:
        return PACKED_30;
      case 31:
        return PACKED_31;
      case 32:
        return PACKED_32;
      case 33:
        return PACKED_33;
      case 34:
        return PACKED_34;
      case 35:
        return PACKED_35;
      case 36:
        return PACKED_36;
      case 37:
        return PACKED_37;
      case 38:
        return PACKED_38;
      case 39:
        return PACKED_39;
      case 40:
        return PACKED_40;
      case 41:
        return PACKED_41;
      case 42:
        return PACKED_42;
      case 43:
        return PACKED_43;
      case 44:
        return PACKED_44;
      case 45:
        return PACKED_45;
      case 46:
        return PACKED_46;
      case 47:
        return PACKED_47;
      case 48:
        return PACKED_48;
      case 49:
        return PACKED_49;
      case 50:
        return PACKED_50;
      case 51:
        return PACKED_51;
      case 52:
        return PACKED_52;
      case 53:
        return PACKED_53;
      case 54:
        return PACKED_54;
      case 55:
        return PACKED_55;
      case 56:
        return PACKED_56;
      case 57:
        return PACKED_57;
      case 58:
        return PACKED_58;
      case 59:
        return PACKED_59;
      case 60:
        return PACKED_60;
      case 61:
        return PACKED_61;
      case 62:
        return PACKED_62;
      case 63:
        return PACKED_63;
      case 64:
        return PACKED_64;
      default:
        throw new AssertionError();
      }
    case PACKED_SINGLE_BLOCK:
      switch (bitsPerValue) {
      case 1:
        return PACKED_SINGLE_BLOCK_1;
      case 2:
        return PACKED_SINGLE_BLOCK_2;
      case 3:
        return PACKED_SINGLE_BLOCK_3;
      case 4:
        return PACKED_SINGLE_BLOCK_4;
      case 5:
        return PACKED_SINGLE_BLOCK_5;
      case 6:
        return PACKED_SINGLE_BLOCK_6;
      case 7:
        return PACKED_SINGLE_BLOCK_7;
      case 8:
        return PACKED_SINGLE_BLOCK_8;
      case 9:
        return PACKED_SINGLE_BLOCK_9;
      case 10:
        return PACKED_SINGLE_BLOCK_10;
      case 12:
        return PACKED_SINGLE_BLOCK_12;
      case 16:
        return PACKED_SINGLE_BLOCK_16;
      case 21:
        return PACKED_SINGLE_BLOCK_21;
      case 32:
        return PACKED_SINGLE_BLOCK_32;
      default:
        throw new AssertionError();
      }
    default:
      throw new AssertionError();
    }
  }

