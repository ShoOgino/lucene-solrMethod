    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;
      assert valuesOffset + iterations * valueCount() <= values.length;
      for (int i = 0; i < iterations; ++i) {
        final long byte0 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = byte0 >>> 3;
        final long byte1 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte0 & 7) << 2) | (byte1 >>> 6);
        values[valuesOffset++] = (byte1 >>> 1) & 31;
        final long byte2 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte1 & 1) << 4) | (byte2 >>> 4);
        final long byte3 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte2 & 15) << 1) | (byte3 >>> 7);
        values[valuesOffset++] = (byte3 >>> 2) & 31;
        final long byte4 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte3 & 3) << 3) | (byte4 >>> 5);
        values[valuesOffset++] = byte4 & 31;
        final long byte5 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = byte5 >>> 3;
        final long byte6 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte5 & 7) << 2) | (byte6 >>> 6);
        values[valuesOffset++] = (byte6 >>> 1) & 31;
        final long byte7 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte6 & 1) << 4) | (byte7 >>> 4);
        final long byte8 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte7 & 15) << 1) | (byte8 >>> 7);
        values[valuesOffset++] = (byte8 >>> 2) & 31;
        final long byte9 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte8 & 3) << 3) | (byte9 >>> 5);
        values[valuesOffset++] = byte9 & 31;
        final long byte10 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = byte10 >>> 3;
        final long byte11 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte10 & 7) << 2) | (byte11 >>> 6);
        values[valuesOffset++] = (byte11 >>> 1) & 31;
        final long byte12 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte11 & 1) << 4) | (byte12 >>> 4);
        final long byte13 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte12 & 15) << 1) | (byte13 >>> 7);
        values[valuesOffset++] = (byte13 >>> 2) & 31;
        final long byte14 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte13 & 3) << 3) | (byte14 >>> 5);
        values[valuesOffset++] = byte14 & 31;
        final long byte15 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = byte15 >>> 3;
        final long byte16 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte15 & 7) << 2) | (byte16 >>> 6);
        values[valuesOffset++] = (byte16 >>> 1) & 31;
        final long byte17 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte16 & 1) << 4) | (byte17 >>> 4);
        final long byte18 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte17 & 15) << 1) | (byte18 >>> 7);
        values[valuesOffset++] = (byte18 >>> 2) & 31;
        final long byte19 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte18 & 3) << 3) | (byte19 >>> 5);
        values[valuesOffset++] = byte19 & 31;
        final long byte20 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = byte20 >>> 3;
        final long byte21 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte20 & 7) << 2) | (byte21 >>> 6);
        values[valuesOffset++] = (byte21 >>> 1) & 31;
        final long byte22 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte21 & 1) << 4) | (byte22 >>> 4);
        final long byte23 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte22 & 15) << 1) | (byte23 >>> 7);
        values[valuesOffset++] = (byte23 >>> 2) & 31;
        final long byte24 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte23 & 3) << 3) | (byte24 >>> 5);
        values[valuesOffset++] = byte24 & 31;
        final long byte25 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = byte25 >>> 3;
        final long byte26 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte25 & 7) << 2) | (byte26 >>> 6);
        values[valuesOffset++] = (byte26 >>> 1) & 31;
        final long byte27 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte26 & 1) << 4) | (byte27 >>> 4);
        final long byte28 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte27 & 15) << 1) | (byte28 >>> 7);
        values[valuesOffset++] = (byte28 >>> 2) & 31;
        final long byte29 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte28 & 3) << 3) | (byte29 >>> 5);
        values[valuesOffset++] = byte29 & 31;
        final long byte30 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = byte30 >>> 3;
        final long byte31 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte30 & 7) << 2) | (byte31 >>> 6);
        values[valuesOffset++] = (byte31 >>> 1) & 31;
        final long byte32 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte31 & 1) << 4) | (byte32 >>> 4);
        final long byte33 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte32 & 15) << 1) | (byte33 >>> 7);
        values[valuesOffset++] = (byte33 >>> 2) & 31;
        final long byte34 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte33 & 3) << 3) | (byte34 >>> 5);
        values[valuesOffset++] = byte34 & 31;
        final long byte35 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = byte35 >>> 3;
        final long byte36 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte35 & 7) << 2) | (byte36 >>> 6);
        values[valuesOffset++] = (byte36 >>> 1) & 31;
        final long byte37 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte36 & 1) << 4) | (byte37 >>> 4);
        final long byte38 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte37 & 15) << 1) | (byte38 >>> 7);
        values[valuesOffset++] = (byte38 >>> 2) & 31;
        final long byte39 = blocks[blocksOffset++] & 0xFF;
        values[valuesOffset++] = ((byte38 & 3) << 3) | (byte39 >>> 5);
        values[valuesOffset++] = byte39 & 31;
      }
    }

