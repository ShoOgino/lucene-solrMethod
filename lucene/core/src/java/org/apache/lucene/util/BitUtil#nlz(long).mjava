  /** Returns the number of leading zero bits.
   */
  public static int nlz(long x) {
   int n = 0;
   // do the first step as a long
   int y = (int)(x>>>32);
   if (y==0) {n+=32; y = (int)(x); }
   if ((y & 0xFFFF0000) == 0) { n+=16; y<<=16; }
   if ((y & 0xFF000000) == 0) { n+=8; y<<=8; }
   return n + nlzTable[y >>> 24];
 /* implementation without table:
   if ((y & 0xF0000000) == 0) { n+=4; y<<=4; }
   if ((y & 0xC0000000) == 0) { n+=2; y<<=2; }
   if ((y & 0x80000000) == 0) { n+=1; y<<=1; }
   if ((y & 0x80000000) == 0) { n+=1;}
   return n;
  */
  }

