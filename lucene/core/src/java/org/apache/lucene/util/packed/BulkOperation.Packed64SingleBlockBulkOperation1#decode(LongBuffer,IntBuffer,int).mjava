    public void decode(LongBuffer blocks, IntBuffer values, int iterations) {
      assert blocks.position() + iterations * blocks() <= blocks.limit();
      assert values.position() + iterations * values() <= values.limit();
      for (int i = 0; i < iterations; ++i) {
        final long block = blocks.get();
        values.put((int) (block & 1L));
        values.put((int) ((block >>> 1) & 1L));
        values.put((int) ((block >>> 2) & 1L));
        values.put((int) ((block >>> 3) & 1L));
        values.put((int) ((block >>> 4) & 1L));
        values.put((int) ((block >>> 5) & 1L));
        values.put((int) ((block >>> 6) & 1L));
        values.put((int) ((block >>> 7) & 1L));
        values.put((int) ((block >>> 8) & 1L));
        values.put((int) ((block >>> 9) & 1L));
        values.put((int) ((block >>> 10) & 1L));
        values.put((int) ((block >>> 11) & 1L));
        values.put((int) ((block >>> 12) & 1L));
        values.put((int) ((block >>> 13) & 1L));
        values.put((int) ((block >>> 14) & 1L));
        values.put((int) ((block >>> 15) & 1L));
        values.put((int) ((block >>> 16) & 1L));
        values.put((int) ((block >>> 17) & 1L));
        values.put((int) ((block >>> 18) & 1L));
        values.put((int) ((block >>> 19) & 1L));
        values.put((int) ((block >>> 20) & 1L));
        values.put((int) ((block >>> 21) & 1L));
        values.put((int) ((block >>> 22) & 1L));
        values.put((int) ((block >>> 23) & 1L));
        values.put((int) ((block >>> 24) & 1L));
        values.put((int) ((block >>> 25) & 1L));
        values.put((int) ((block >>> 26) & 1L));
        values.put((int) ((block >>> 27) & 1L));
        values.put((int) ((block >>> 28) & 1L));
        values.put((int) ((block >>> 29) & 1L));
        values.put((int) ((block >>> 30) & 1L));
        values.put((int) ((block >>> 31) & 1L));
        values.put((int) ((block >>> 32) & 1L));
        values.put((int) ((block >>> 33) & 1L));
        values.put((int) ((block >>> 34) & 1L));
        values.put((int) ((block >>> 35) & 1L));
        values.put((int) ((block >>> 36) & 1L));
        values.put((int) ((block >>> 37) & 1L));
        values.put((int) ((block >>> 38) & 1L));
        values.put((int) ((block >>> 39) & 1L));
        values.put((int) ((block >>> 40) & 1L));
        values.put((int) ((block >>> 41) & 1L));
        values.put((int) ((block >>> 42) & 1L));
        values.put((int) ((block >>> 43) & 1L));
        values.put((int) ((block >>> 44) & 1L));
        values.put((int) ((block >>> 45) & 1L));
        values.put((int) ((block >>> 46) & 1L));
        values.put((int) ((block >>> 47) & 1L));
        values.put((int) ((block >>> 48) & 1L));
        values.put((int) ((block >>> 49) & 1L));
        values.put((int) ((block >>> 50) & 1L));
        values.put((int) ((block >>> 51) & 1L));
        values.put((int) ((block >>> 52) & 1L));
        values.put((int) ((block >>> 53) & 1L));
        values.put((int) ((block >>> 54) & 1L));
        values.put((int) ((block >>> 55) & 1L));
        values.put((int) ((block >>> 56) & 1L));
        values.put((int) ((block >>> 57) & 1L));
        values.put((int) ((block >>> 58) & 1L));
        values.put((int) ((block >>> 59) & 1L));
        values.put((int) ((block >>> 60) & 1L));
        values.put((int) ((block >>> 61) & 1L));
        values.put((int) ((block >>> 62) & 1L));
        values.put((int) (block >>> 63));
      }
    }

