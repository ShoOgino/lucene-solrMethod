  /**
   * Ensure that any writes to the given file is written to the storage device that contains it.
   * @param fileToSync the file to fsync
   * @param isDir if true, the given file is a directory (we open for read and ignore IOExceptions,
   *  because not all file systems and operating systems allow to fsync on a directory)
   */
  public static void fsync(File fileToSync, boolean isDir) throws IOException {
    IOException exc = null;
    
    // If the file is a directory we have to open read-only, for regular files we must open r/w for the fsync to have an effect.
    // See http://blog.httrack.com/blog/2013/11/15/everything-you-always-wanted-to-know-about-fsync/
    try (final FileChannel file = FileChannel.open(fileToSync.toPath(), isDir ? StandardOpenOption.READ : StandardOpenOption.WRITE)) {
      for (int retry = 0; retry < 5; retry++) {
        try {
          file.force(true);
          return;
        } catch (IOException ioe) {
          if (exc == null) {
            exc = ioe;
          }
          try {
            // Pause 5 msec
            Thread.sleep(5L);
          } catch (InterruptedException ie) {
            ThreadInterruptedException ex = new ThreadInterruptedException(ie);
            ex.addSuppressed(exc);
            throw ex;
          }
        }
      }
    } catch (IOException ioe) {
      if (exc == null) {
        exc = ioe;
      }
    }
    
    if (isDir) {
      assert (Constants.LINUX || Constants.MAC_OS_X) == false :
        "On Linux and MacOSX fsyncing a directory should not throw IOException, "+
        "we just don't want to rely on that in production (undocumented). Got: " + exc;
      // Ignore exception if it is a directory
      return;
    }
    
    // Throw original exception
    throw exc;
  }

