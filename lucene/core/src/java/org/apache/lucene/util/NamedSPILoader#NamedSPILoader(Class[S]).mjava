  public NamedSPILoader(Class<S> clazz) {
    this.clazz = clazz;
    final SPIClassIterator<S> loader = SPIClassIterator.get(clazz);
    final LinkedHashMap<String,S> services = new LinkedHashMap<String,S>();
    while (loader.hasNext()) {
      final Class<? extends S> c = loader.next();
      final S service;
      try {
        service = c.newInstance();
      } catch (InstantiationException ie) {
        throw new ServiceConfigurationError("Cannot instantiate SPI class: " + c.getName(), ie); 
      } catch (IllegalAccessException iae) {
        throw new ServiceConfigurationError("Cannot instantiate SPI class: " + c.getName(), iae); 
      }
      final String name = service.getName();
      // only add the first one for each name, later services will be ignored
      // this allows to place services before others in classpath to make 
      // them used instead of others
      if (!services.containsKey(name)) {
        assert checkServiceName(name);
        services.put(name, service);
      }
    }
    this.services = Collections.unmodifiableMap(services);
  }

