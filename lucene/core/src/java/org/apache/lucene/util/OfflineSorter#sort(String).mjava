  /** 
   * Sort input to a new temp file, returning its name.
   */
  public String sort(String inputFileName) throws IOException {
    
    sortInfo = new SortInfo();
    sortInfo.totalTime = System.currentTimeMillis();

    List<String> segments = new ArrayList<>();

    // So we can remove any partially written temp files on exception:
    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(dir);

    boolean success = false;
    try (ByteSequencesReader is = new ByteSequencesReader(dir.openInput(inputFileName, IOContext.READONCE))) {

      int lineCount;
      while ((lineCount = readPartition(is)) > 0) {
        segments.add(sortPartition(trackingDir));
        sortInfo.tempMergeFiles++;
        sortInfo.lineCount += lineCount;

        // Handle intermediate merges.
        if (segments.size() == maxTempFiles) {
          mergePartitions(trackingDir, segments);
        }
      }

      // Merge the partitions to the output file with a priority queue.
      if (segments.size() > 1) {     
        mergePartitions(trackingDir, segments);
      }

      String result;
      if (segments.isEmpty()) {
        try (IndexOutput out = trackingDir.createTempOutput(tempFileNamePrefix, "sort", IOContext.DEFAULT)) {
          result = out.getName();
        }
      } else {
        result = segments.get(0);
      }

      // We should be explicitly removing all intermediate files ourselves unless there is an exception:
      assert trackingDir.getCreatedFiles().size() == 1 && trackingDir.getCreatedFiles().contains(result);

      sortInfo.totalTime = (System.currentTimeMillis() - sortInfo.totalTime); 
      success = true;

      return result;

    } finally {
      if (success == false) {
        IOUtils.deleteFilesIgnoringExceptions(trackingDir, trackingDir.getCreatedFiles());
      }
    }
  }

