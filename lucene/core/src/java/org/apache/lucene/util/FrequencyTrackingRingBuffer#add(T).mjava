  /**
   * Add a new item to this ring buffer, potentially removing the oldest
   * entry from this buffer if it is already full.
   */
  public synchronized void add(T item) {
    // we need this method to be protected by a lock since it is important for
    // correctness that the ring buffer and the frequencies table have
    // consistent content
    if (item == null) {
      throw new IllegalArgumentException("null items are not supported");
    }
    assert ringBuffer.size() <= maxSize;
    if (ringBuffer.size() == maxSize) {
      // evict the oldest entry
      final T removed = ringBuffer.removeFirst();
      final int newFrequency = frequency(removed) - 1;
      if (newFrequency == 0) {
        // free for GC
        frequencies.remove(removed);
      } else {
        frequencies.put(removed, newFrequency);
      }
    }

    // add the new entry and update frequencies
    ringBuffer.addLast(item);
    frequencies.put(item, frequency(item) + 1);
  }

