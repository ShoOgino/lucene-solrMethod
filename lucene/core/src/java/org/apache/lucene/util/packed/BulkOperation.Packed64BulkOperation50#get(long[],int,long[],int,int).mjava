    public void get(long[] blocks, int bi, long[] values, int vi, int iterations) {
      assert bi + iterations * blocks() <= blocks.length;
      assert vi + iterations * values() <= values.length;
      for (int i = 0; i < iterations; ++i) {
        final long block0 = blocks[bi++];
        values[vi++] = block0 >>> 14;
        final long block1 = blocks[bi++];
        values[vi++] = ((block0 & 16383L) << 36) | (block1 >>> 28);
        final long block2 = blocks[bi++];
        values[vi++] = ((block1 & 268435455L) << 22) | (block2 >>> 42);
        final long block3 = blocks[bi++];
        values[vi++] = ((block2 & 4398046511103L) << 8) | (block3 >>> 56);
        values[vi++] = (block3 >>> 6) & 1125899906842623L;
        final long block4 = blocks[bi++];
        values[vi++] = ((block3 & 63L) << 44) | (block4 >>> 20);
        final long block5 = blocks[bi++];
        values[vi++] = ((block4 & 1048575L) << 30) | (block5 >>> 34);
        final long block6 = blocks[bi++];
        values[vi++] = ((block5 & 17179869183L) << 16) | (block6 >>> 48);
        final long block7 = blocks[bi++];
        values[vi++] = ((block6 & 281474976710655L) << 2) | (block7 >>> 62);
        values[vi++] = (block7 >>> 12) & 1125899906842623L;
        final long block8 = blocks[bi++];
        values[vi++] = ((block7 & 4095L) << 38) | (block8 >>> 26);
        final long block9 = blocks[bi++];
        values[vi++] = ((block8 & 67108863L) << 24) | (block9 >>> 40);
        final long block10 = blocks[bi++];
        values[vi++] = ((block9 & 1099511627775L) << 10) | (block10 >>> 54);
        values[vi++] = (block10 >>> 4) & 1125899906842623L;
        final long block11 = blocks[bi++];
        values[vi++] = ((block10 & 15L) << 46) | (block11 >>> 18);
        final long block12 = blocks[bi++];
        values[vi++] = ((block11 & 262143L) << 32) | (block12 >>> 32);
        final long block13 = blocks[bi++];
        values[vi++] = ((block12 & 4294967295L) << 18) | (block13 >>> 46);
        final long block14 = blocks[bi++];
        values[vi++] = ((block13 & 70368744177663L) << 4) | (block14 >>> 60);
        values[vi++] = (block14 >>> 10) & 1125899906842623L;
        final long block15 = blocks[bi++];
        values[vi++] = ((block14 & 1023L) << 40) | (block15 >>> 24);
        final long block16 = blocks[bi++];
        values[vi++] = ((block15 & 16777215L) << 26) | (block16 >>> 38);
        final long block17 = blocks[bi++];
        values[vi++] = ((block16 & 274877906943L) << 12) | (block17 >>> 52);
        values[vi++] = (block17 >>> 2) & 1125899906842623L;
        final long block18 = blocks[bi++];
        values[vi++] = ((block17 & 3L) << 48) | (block18 >>> 16);
        final long block19 = blocks[bi++];
        values[vi++] = ((block18 & 65535L) << 34) | (block19 >>> 30);
        final long block20 = blocks[bi++];
        values[vi++] = ((block19 & 1073741823L) << 20) | (block20 >>> 44);
        final long block21 = blocks[bi++];
        values[vi++] = ((block20 & 17592186044415L) << 6) | (block21 >>> 58);
        values[vi++] = (block21 >>> 8) & 1125899906842623L;
        final long block22 = blocks[bi++];
        values[vi++] = ((block21 & 255L) << 42) | (block22 >>> 22);
        final long block23 = blocks[bi++];
        values[vi++] = ((block22 & 4194303L) << 28) | (block23 >>> 36);
        final long block24 = blocks[bi++];
        values[vi++] = ((block23 & 68719476735L) << 14) | (block24 >>> 50);
        values[vi++] = block24 & 1125899906842623L;
      }
    }

