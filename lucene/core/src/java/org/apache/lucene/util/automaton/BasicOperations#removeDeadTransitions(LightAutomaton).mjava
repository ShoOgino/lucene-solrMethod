  /**
   * Removes transitions to dead states and calls {@link #reduce()}.
   * (A state is "dead" if no accept state is
   * reachable from it.)
   */
  public static LightAutomaton removeDeadTransitions(LightAutomaton a) {
    int numStates = a.getNumStates();
    BitSet liveSet = getLiveStates(a);

    int[] map = new int[numStates];

    LightAutomaton result = new LightAutomaton();
    //System.out.println("liveSet: " + liveSet + " numStates=" + numStates);
    for(int i=0;i<numStates;i++) {
      if (liveSet.get(i)) {
        map[i] = result.createState();
        result.setAccept(map[i], a.isAccept(i));
      }
    }

    LightAutomaton.Transition t = new LightAutomaton.Transition();

    for (int i=0;i<numStates;i++) {
      if (liveSet.get(i)) {
        int numTransitions = a.initTransition(i, t);
        // filter out transitions to dead states:
        for(int j=0;j<numTransitions;j++) {
          a.getNextTransition(t);
          if (liveSet.get(t.dest)) {
            result.addTransition(map[i], map[t.dest], t.min, t.max);
          }
        }
      }
    }

    // nocommit need test case for "accepts no strings"

    result.finish();
    return result;
  }

