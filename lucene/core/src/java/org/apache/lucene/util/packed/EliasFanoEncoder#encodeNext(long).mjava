  /** Call at most <code>numValues</code> times to encode a non decreasing sequence of non negative numbers.
   * @param x The next number to be encoded.
   * @throws IllegalStateException when called more than <code>numValues</code> times.
   * @throws IllegalArgumentException when:
   *         <ul>
   *         <li><code>x</code> is smaller than an earlier encoded value, or
   *         <li><code>x</code> is larger than <code>upperBound</code>.
   *         </ul>
   */
  public void encodeNext(long x) {
    if (numEncoded >= numValues) {
      throw new IllegalStateException("encodeNext called more than " + numValues + " times.");
    }
    if (lastEncoded > x) {
      throw new IllegalArgumentException(x + " smaller than previous " + lastEncoded);
    }
    if (x > upperBound) {
      throw new IllegalArgumentException(x + " larger than upperBound " + upperBound);
    }
    long highValue = x >>> numLowBits;
    encodeUpperBits(highValue);
    encodeLowerBits(x & lowerBitsMask);
    lastEncoded = x;
    // Add index entries:
    long indexValue = (currentEntryIndex + 1) * indexInterval;
    while (indexValue <= highValue) { 
      long afterZeroBitPosition = indexValue + numEncoded;
      packValue(afterZeroBitPosition, upperZeroBitPositionIndex, nIndexEntryBits, currentEntryIndex);
      currentEntryIndex += 1;
      indexValue += indexInterval;
    }
    numEncoded++;
  }

