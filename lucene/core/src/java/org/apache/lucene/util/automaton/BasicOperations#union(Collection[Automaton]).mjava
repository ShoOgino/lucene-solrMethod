  /**
   * Returns an automaton that accepts the union of the languages of the given
   * automata.
   * <p>
   * Complexity: linear in number of states.
   */
  public static Automaton union(Collection<Automaton> l) {
    Set<Integer> ids = new HashSet<>();
    for (Automaton a : l)
      ids.add(System.identityHashCode(a));
    boolean has_aliases = ids.size() != l.size();
    State s = new State();
    for (Automaton b : l) {
      if (BasicOperations.isEmpty(b)) continue;
      Automaton bb = b;
      if (has_aliases) bb = bb.cloneExpanded();
      else bb = bb.cloneExpandedIfRequired();
      s.addEpsilon(bb.initial);
    }
    Automaton a = new Automaton();
    a.initial = s;
    a.deterministic = false;
    //a.clearHashCode();
    a.clearNumberedStates();
    a.checkMinimizeAlways();
    return a;
  }

