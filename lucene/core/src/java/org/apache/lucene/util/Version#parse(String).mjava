  /**
   * Parse a version number of the form {@code "major.minor.bugfix.prerelease"}.
   *
   * Part {@code ".bugfix"} and part {@code ".prerelease"} are optional.
   * Note that this is forwards compatible: the parsed version does not have to exist as
   * a constant.
   */
  public static Version parse(String version) {
    String[] pieces = version.split("\\.");
    if (pieces.length < 2 || pieces.length > 4) {
      throw new IllegalArgumentException("Version is not in form major.minor.bugfix(.prerelease): " + version);
    }

    int major = Integer.parseInt(pieces[0]);
    int minor = Integer.parseInt(pieces[1]);
    int bugfix = 0;
    int prerelease = 0;
    if (pieces.length > 2) {
      bugfix = Integer.parseInt(pieces[2]);
    }
    if (pieces.length > 3) {
      prerelease = Integer.parseInt(pieces[3]);
      if (prerelease == 0) {
        throw new IllegalArgumentException("Invalid value " + prerelease + " for prerelease of version " + version +", should be 1 or 2");
      }
    }

    return new Version(major, minor, bugfix, prerelease);
  }

