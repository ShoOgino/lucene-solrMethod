  /**
   * Constructs a new <code>RunAutomaton</code> from a deterministic
   * <code>Automaton</code>.
   * 
   * @param a an automaton
   * @param maxDeterminizedStates maximum number of states that can be created
   *   while determinizing a
   */
  public RunAutomaton(Automaton a, int maxInterval, boolean tableize,
      int maxDeterminizedStates) {
    this.maxInterval = maxInterval;
    a = Operations.determinize(a, maxDeterminizedStates);
    this.automaton = a;
    points = a.getStartPoints();
    size = Math.max(1,a.getNumStates());
    accept = new boolean[size];
    transitions = new int[size * points.length];
    Arrays.fill(transitions, -1);
    for (int n=0;n<size;n++) {
      accept[n] = a.isAccept(n);
      for (int c = 0; c < points.length; c++) {
        int dest = a.step(n, points[c]);
        assert dest == -1 || dest < size;
        transitions[n * points.length + c] = dest;
      }
    }

    /*
     * Set alphabet table for optimal run performance.
     */
    if (tableize) {
      classmap = new int[maxInterval + 1];
      int i = 0;
      for (int j = 0; j <= maxInterval; j++) {
        if (i + 1 < points.length && j == points[i + 1]) {
          i++;
        }
        classmap[j] = i;
      }
    } else {
      classmap = null;
    }
  }

