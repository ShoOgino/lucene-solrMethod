  /**
   * Retrieve PackedInt data from the DataInput and return a packed int
   * structure based on it.
   *
   * @param in positioned at the beginning of a stored packed int structure.
   * @return a read only random access capable array of positive integers.
   * @throws IOException if the structure could not be retrieved.
   * @lucene.internal
   */
  public static Reader getReader(DataInput in) throws IOException {
    CodecUtil.checkHeader(in, CODEC_NAME, VERSION_START, VERSION_START);
    final int bitsPerValue = in.readVInt();
    assert bitsPerValue > 0 && bitsPerValue <= 64: "bitsPerValue=" + bitsPerValue;
    final int valueCount = in.readVInt();
    final int format = in.readVInt();

    switch (format) {
      case PACKED:
        switch (bitsPerValue) {
          case 8:
            return new Direct8(in, valueCount);
          case 16:
            return new Direct16(in, valueCount);
          case 24:
            return new Packed8ThreeBlocks(in, valueCount);
          case 32:
            return new Direct32(in, valueCount);
          case 48:
            return new Packed16ThreeBlocks(in, valueCount);
          case 64:
            return new Direct64(in, valueCount);
          default:
            return new Packed64(in, valueCount, bitsPerValue);
        }
      case PACKED_SINGLE_BLOCK:
        return Packed64SingleBlock.create(in, valueCount, bitsPerValue);
      default:
        throw new AssertionError("Unknwown Writer format: " + format);
    }
  }

