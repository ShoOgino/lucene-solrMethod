  /**
   * Returns whether the bit at given zero-based index is set.
   * <br>Example: bitIndex 66 means the third bit on the right of the second long.
   *
   * @param bits     The bits stored in an array of long for efficiency.
   * @param numLongs The number of longs in {@code bits} to consider.
   * @param bitIndex The bit zero-based index. It must be greater than or equal to 0,
   *                 and strictly less than {@code numLongs * Long.SIZE}.
   */
  public static boolean isBitSet(long[] bits, int numLongs, int bitIndex) {
    assert numLongs >= 0 && numLongs <= bits.length && bitIndex >= 0 && bitIndex < numLongs * Long.SIZE
        : "bitIndex=" + bitIndex + " numLongs=" + numLongs + " bits.length=" + bits.length;
    return (bits[bitIndex / Long.SIZE] & (1L << bitIndex)) != 0; // Shifts are mod 64.
  }

