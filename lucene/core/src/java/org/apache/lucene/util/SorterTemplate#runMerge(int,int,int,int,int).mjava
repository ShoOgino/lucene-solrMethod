  /** Sort out trivial cases and reduce the scope of the merge as much as
   *  possible before calling {@link #merge}/ */
  private void runMerge(int lo, int pivot, int hi, int len1, int len2) {
    if (len1 == 0 || len2 == 0) {
      return;
    }
    setPivot(pivot - 1);
    if (comparePivot(pivot) <= 0) {
      // all values from the first run are below all values from the 2nd run
      // this shortcut makes mergeSort run in linear time on sorted arrays
      return;
    }
    while (comparePivot(hi - 1) <= 0) {
      --hi;
      --len2;
    }
    setPivot(pivot);
    while (comparePivot(lo) >= 0) {
      ++lo;
      --len1;
    }
    if (len1 + len2 == 2) {
      assert len1 == len2;
      assert compare(lo, pivot) > 0;
      swap(pivot, lo);
      return;
    }
    merge(lo, pivot, hi, len1, len2);
  }

