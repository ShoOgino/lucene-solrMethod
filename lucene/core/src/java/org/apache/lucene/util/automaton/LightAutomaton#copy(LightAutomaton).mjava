  /** Copies over all states/transitions from other.  The states numbers
   *  are sequentially assigned (appended). */
  public void copy(LightAutomaton other) {

    int offset = getNumStates();
    /*
    int otherNumStates = other.getNumStates();
    for(int s=0;s<otherNumStates;s++) {
      createState();
      setAccept(offset+s, other.isAccept(s));
    }
    Transition t = new Transition();
    for(int s=0;s<otherNumStates;s++) {
      int count = other.initTransition(s, t);
      for(int i=0;i<count;i++) {
        other.getNextTransition(t);
        addTransition(offset + s, offset + t.dest, t.min, t.max);
      }
    }
    */

    // Bulk copy and then fixup the state pointers:
    int stateOffset = getNumStates();
    states = ArrayUtil.grow(states, nextState + other.nextState);
    System.arraycopy(other.states, 0, states, nextState, other.nextState);
    for(int i=0;i<other.nextState;i += 2) {
      if (states[nextState+i] != -1) {
        states[nextState+i] += nextTransition;
      }
      int state = i/2;
      if (other.isAccept(state)) {
        setAccept(stateOffset+state, true);
      }
    }
    nextState += other.nextState;

    // Bulk copy and then fixup dest for each transition:
    transitions = ArrayUtil.grow(transitions, nextTransition + other.nextTransition);
    System.arraycopy(other.transitions, 0, transitions, nextTransition, other.nextTransition);
    for(int i=0;i<other.nextTransition;i += 3) {
      transitions[nextTransition+i] += stateOffset;
    }
    nextTransition += other.nextTransition;

    if (other.deterministic == false) {
      deterministic = false;
    }
  }

