  /**
   * Recursive descend into an object.
   */
  private static long measureObjectSize(Object obj, Set<Object> seen) {
    if (obj == null) {
      return 0;
    }

    // skip if we have seen before
    if (seen.contains(obj)) {
      return 0;
    }

    // add to seen
    seen.add(obj);

    Class<?> clazz = obj.getClass();
    if (clazz.isArray()) {
      return measureArraySize(obj, seen);
    }

    long size = NUM_BYTES_OBJECT_HEADER;
    long innerSize = 0L;

    // walk type hierarchy
    while (clazz != null) {
      final Field[] fields = clazz.getDeclaredFields();
      for (final Field f : fields) {
        if (Modifier.isStatic(f.getModifiers())) {
          continue;
        }

        size = reflectFieldSize(size, f);
        
        if (!f.getType().isPrimitive()) {
          try {
            f.setAccessible(true);
            innerSize += measureObjectSize(f.get(obj), seen);
          } catch (IllegalAccessException ex) {
            // this should never happen as we enable setAccessible()!
            throw new RuntimeException("Cannot reflect instance field: " +
              f.getDeclaringClass().getName() + "#" + f.getName(), ex);
          }
        }
      }
      clazz = clazz.getSuperclass();
    }
    return alignObjectSize(size) + innerSize;
  }

