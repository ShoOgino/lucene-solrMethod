    @Override
    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
      assert blocksOffset + iterations * blockCount() <= blocks.length;
      assert valuesOffset + iterations * valueCount() <= values.length;
      for (int i = 0; i < iterations; ++i) {
        final long block0 = blocks[blocksOffset++];
        values[valuesOffset++] = block0 >>> 22;
        final long block1 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block0 & 4194303L) << 20) | (block1 >>> 44);
        values[valuesOffset++] = (block1 >>> 2) & 4398046511103L;
        final long block2 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block1 & 3L) << 40) | (block2 >>> 24);
        final long block3 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block2 & 16777215L) << 18) | (block3 >>> 46);
        values[valuesOffset++] = (block3 >>> 4) & 4398046511103L;
        final long block4 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block3 & 15L) << 38) | (block4 >>> 26);
        final long block5 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block4 & 67108863L) << 16) | (block5 >>> 48);
        values[valuesOffset++] = (block5 >>> 6) & 4398046511103L;
        final long block6 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block5 & 63L) << 36) | (block6 >>> 28);
        final long block7 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block6 & 268435455L) << 14) | (block7 >>> 50);
        values[valuesOffset++] = (block7 >>> 8) & 4398046511103L;
        final long block8 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block7 & 255L) << 34) | (block8 >>> 30);
        final long block9 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block8 & 1073741823L) << 12) | (block9 >>> 52);
        values[valuesOffset++] = (block9 >>> 10) & 4398046511103L;
        final long block10 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block9 & 1023L) << 32) | (block10 >>> 32);
        final long block11 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block10 & 4294967295L) << 10) | (block11 >>> 54);
        values[valuesOffset++] = (block11 >>> 12) & 4398046511103L;
        final long block12 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block11 & 4095L) << 30) | (block12 >>> 34);
        final long block13 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block12 & 17179869183L) << 8) | (block13 >>> 56);
        values[valuesOffset++] = (block13 >>> 14) & 4398046511103L;
        final long block14 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block13 & 16383L) << 28) | (block14 >>> 36);
        final long block15 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block14 & 68719476735L) << 6) | (block15 >>> 58);
        values[valuesOffset++] = (block15 >>> 16) & 4398046511103L;
        final long block16 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block15 & 65535L) << 26) | (block16 >>> 38);
        final long block17 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block16 & 274877906943L) << 4) | (block17 >>> 60);
        values[valuesOffset++] = (block17 >>> 18) & 4398046511103L;
        final long block18 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block17 & 262143L) << 24) | (block18 >>> 40);
        final long block19 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block18 & 1099511627775L) << 2) | (block19 >>> 62);
        values[valuesOffset++] = (block19 >>> 20) & 4398046511103L;
        final long block20 = blocks[blocksOffset++];
        values[valuesOffset++] = ((block19 & 1048575L) << 22) | (block20 >>> 42);
        values[valuesOffset++] = block20 & 4398046511103L;
      }
    }

