  /**
   * Removes transitions to dead states and calls {@link #reduce()}.
   * (A state is "dead" if no accept state is
   * reachable from it.)
   */
  public void removeDeadTransitions() {
    final State[] states = getNumberedStates();
    //clearHashCode();
    if (isSingleton()) return;
    State[] live = getLiveStates();

    BitSet liveSet = new BitSet(states.length);
    for (State s : live)
      liveSet.set(s.number);

    for (State s : states) {
      // filter out transitions to dead states:
      int upto = 0;
      for(int i=0;i<s.numTransitions;i++) {
        final Transition t = s.transitionsArray[i];
        if (liveSet.get(t.to.number)) {
          s.transitionsArray[upto++] = s.transitionsArray[i];
        }
      }
      s.numTransitions = upto;
    }
    for(int i=0;i<live.length;i++) {
      live[i].number = i;
    }
    if (live.length > 0) {
      setNumberedStates(live);
    } else {
      // sneaky corner case -- if machine accepts no strings
      clearNumberedStates();
    }
    reduce();
  }

