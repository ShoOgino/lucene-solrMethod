  /**
   * Get the rank (number of set bits up to right before the index) for the given index in O(1).
   * @param index offset in the originating bit set.
   * @return the rank for the index.
   */
  public int rank(long index) {
    final long cache = rankCache[((int) (index >>> LOWER_OVER_BITS))];
    // lower cache (absolute)
    long rank = cache >>> (Long.SIZE-LOWER_BITS);
    int startBitIndex = (int) (index & ~LOWER_OVER_MASK);
    // basic blocks (relative)
    if (startBitIndex < index-BASIC_OVER_SIZE) {
      rank += (cache >>> (BASIC_BITS*2)) & BASIC_MASK;
      startBitIndex += BASIC_OVER_SIZE;
      if (startBitIndex < index-BASIC_OVER_SIZE) {
        rank += (cache >>> BASIC_BITS) & BASIC_MASK;
        startBitIndex += BASIC_OVER_SIZE;
        if (startBitIndex < index-BASIC_OVER_SIZE) {
          rank += cache & BASIC_MASK;
          startBitIndex += BASIC_OVER_SIZE;
        }
      }
    }
    // long.bitcount (relative)
    while(startBitIndex < index-Long.SIZE) {
      rank += Long.bitCount(inner.getBits()[startBitIndex >>> 6]);
      startBitIndex += Long.SIZE;
    }
    // Single bits (relative)
    if (startBitIndex < index) {
/*      System.out.println(String.format(Locale.ENGLISH,
          "startBitIndex=%d, index=%d, getBits()[startBitIndex>>>6=%d]=%s, index-startBitIndex=%d, mask=%s",
          startBitIndex, index, startBitIndex>>>6, Long.toBinaryString(getBits()[startBitIndex>>>6]),
          index-startBitIndex, Long.toBinaryString(~(~1L << (index-startBitIndex-1)))));*/
      rank += Long.bitCount(inner.getBits()[startBitIndex >>> 6] & ~(~1L << (index-startBitIndex-1)));
    }
//    for (int i = startBitIndex ; i < index ; i++) {
//      rank += fastGet(i) ? 1 : 0;
//    }
    return (int) rank;
  }

