  /**
   * Return the deep size of an <code>array</code>, including
   * sub-objects if there are any.
   * 
   * @param seen A set of already seen objects. If <code>null</code> no references
   *      are followed and this method returns shallow size.
   */
  private static long measureArraySize(Object array, Set<Object> seen) {
    long size = NUM_BYTES_ARRAY_HEADER;
    final int len = Array.getLength(array);
    if (len > 0) {
      Class<?> arrayElementClazz = array.getClass().getComponentType();
      if (arrayElementClazz.isPrimitive()) {
        size += (long) len * primitiveSizes.get(arrayElementClazz);
      } else {
        size += (long) NUM_BYTES_OBJECT_REF * len;
        if (seen != null) {
          for (int i = 0; i < len; i++) {
            size += measureObjectSize(Array.get(array, i), seen);
          }
        }
      }
    }

    return alignObjectSize(size);
  }

