  /**
   * Set the bit at index <tt>i</tt>.
   */
  public void set(int i) {
    assert consistent(i);
    final int i4096 = i >>> 12;
    final Block block = blocks[i4096];
    final int i64 = i >>> 6;
    if (block == null) {
      blocks[i4096] = new Block(i);
      ++nonZeroLongCount;
      ramBytesUsed += Block.BASE_RAM_BYTES_USED;
    } else if ((block.index & (1L << i64)) != 0) {
      // in that case the sub 64-bits block we are interested in already exists,
      // we just need to set a bit in an existing long: the number of ones on
      // the right of i64 gives us the index of the long we need to update
      block.bits[Long.bitCount(block.index & ((1L << i64) - 1))] |= 1L << i; // shifts are mod 64 in java
    } else {
      // in that case we found a block of 4096 bits that has some values, but
      // the sub-block of 64 bits that we are interested in has no value yet,
      // so we need to insert a new long
      insertLong(block, i64, i);
    }
  }

