  /**
   * Copy <code>src[srcPos:srcPos+len]</code> into
   * <code>dest[destPos:destPos+len]</code> using at most <code>mem</code>
   * bytes.
   */
  public static void copy(Reader src, int srcPos, Mutable dest, int destPos, int len, int mem) {
    assert srcPos + len <= src.size();
    assert destPos + len <= dest.size();
    final int capacity = mem >>> 3;
    if (capacity == 0) {
      for (int i = 0; i < len; ++i) {
        dest.set(destPos++, src.get(srcPos++));
      }
    } else {
      // use bulk operations
      long[] buf = new long[Math.min(capacity, len)];
      int remaining = 0;
      while (len > 0) {
        final int read = src.get(srcPos, buf, remaining, Math.min(len, buf.length - remaining));
        assert read > 0;
        srcPos += read;
        len -= read;
        remaining += read;
        final int written = dest.set(destPos, buf, 0, remaining);
        assert written > 0;
        destPos += written;
        if (written < remaining) {
          System.arraycopy(buf, written, buf, 0, remaining - written);
        }
        remaining -= written;
      }
      while (remaining > 0) {
        final int written = dest.set(destPos, buf, 0, remaining);
        remaining -= written;
      }
    }
  }

