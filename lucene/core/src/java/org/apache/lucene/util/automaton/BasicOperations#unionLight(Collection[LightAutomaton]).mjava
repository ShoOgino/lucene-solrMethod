  /**
   * Returns an automaton that accepts the union of the languages of the given
   * automata.
   * <p>
   * Complexity: linear in number of states.
   */
  /*
  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {
    LightAutomaton result = new LightAutomaton();
    // Create initial node:
    result.createState();
    int stateOffset = 1;

    // First pass, adding all states epsilon transitions:
    LightAutomaton.Transition t = new LightAutomaton.Transition();
    for(LightAutomaton a : l) {
      int numStates = a.getNumStates();
      if (a.isAccept(0)) {
        // If any automaton accepts empty string, we do too:
        result.setAccept(0, true);
      }

      for(int s=0;s<numStates;s++) {
        int state = result.createState();
        result.setAccept(state, a.isAccept(s));
      }

      // Add epsilon transition from new initial state to this automaton's initial state:
      int numTransitions = a.initTransition(0, t);
      for(int i=0;i<numTransitions;i++) {
        a.getNextTransition(t);
        result.addTransition(0, stateOffset + t.dest, t.min, t.max);
      }

      stateOffset += numStates;
    }

    // Second pass, copying over all other transitions:
    stateOffset = 1;
    for(LightAutomaton a : l) {
      int numStates = a.getNumStates();
      for(int s=0;s<numStates;s++) {
        int numTransitions = a.initTransition(s, t);
        for(int i=0;i<numTransitions;i++) {
          a.getNextTransition(t);
          result.addTransition(stateOffset + s, stateOffset + t.dest, t.min, t.max);
        }
      }

      stateOffset += numStates;
    }

    result.finish();

    return result;
  }
  */

  public static LightAutomaton unionLight(Collection<LightAutomaton> l) {
    LightAutomaton result = new LightAutomaton();

    // Create initial state:
    result.createState();

    // Copy over all automata
    LightAutomaton.Transition t = new LightAutomaton.Transition();
    for(LightAutomaton a : l) {
      result.copy(a);
    }
    
    // Add epsilon transition from new initial state
    int stateOffset = 1;
    for(LightAutomaton a : l) {
      result.addEpsilon(0, stateOffset);
      stateOffset += a.getNumStates();
    }

    result.finish();

    return result;
  }

