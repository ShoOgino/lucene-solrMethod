    @Override
    public void decode(long[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {
      assert blocksOffset + iterations * blockCount() <= blocks.length;
      assert valuesOffset + iterations * valueCount() <= values.length;
      for (int i = 0; i < iterations; ++i) {
        final long block = blocks[blocksOffset++];
        values[valuesOffset++] = block & 1L;
        values[valuesOffset++] = (block >>> 1) & 1L;
        values[valuesOffset++] = (block >>> 2) & 1L;
        values[valuesOffset++] = (block >>> 3) & 1L;
        values[valuesOffset++] = (block >>> 4) & 1L;
        values[valuesOffset++] = (block >>> 5) & 1L;
        values[valuesOffset++] = (block >>> 6) & 1L;
        values[valuesOffset++] = (block >>> 7) & 1L;
        values[valuesOffset++] = (block >>> 8) & 1L;
        values[valuesOffset++] = (block >>> 9) & 1L;
        values[valuesOffset++] = (block >>> 10) & 1L;
        values[valuesOffset++] = (block >>> 11) & 1L;
        values[valuesOffset++] = (block >>> 12) & 1L;
        values[valuesOffset++] = (block >>> 13) & 1L;
        values[valuesOffset++] = (block >>> 14) & 1L;
        values[valuesOffset++] = (block >>> 15) & 1L;
        values[valuesOffset++] = (block >>> 16) & 1L;
        values[valuesOffset++] = (block >>> 17) & 1L;
        values[valuesOffset++] = (block >>> 18) & 1L;
        values[valuesOffset++] = (block >>> 19) & 1L;
        values[valuesOffset++] = (block >>> 20) & 1L;
        values[valuesOffset++] = (block >>> 21) & 1L;
        values[valuesOffset++] = (block >>> 22) & 1L;
        values[valuesOffset++] = (block >>> 23) & 1L;
        values[valuesOffset++] = (block >>> 24) & 1L;
        values[valuesOffset++] = (block >>> 25) & 1L;
        values[valuesOffset++] = (block >>> 26) & 1L;
        values[valuesOffset++] = (block >>> 27) & 1L;
        values[valuesOffset++] = (block >>> 28) & 1L;
        values[valuesOffset++] = (block >>> 29) & 1L;
        values[valuesOffset++] = (block >>> 30) & 1L;
        values[valuesOffset++] = (block >>> 31) & 1L;
        values[valuesOffset++] = (block >>> 32) & 1L;
        values[valuesOffset++] = (block >>> 33) & 1L;
        values[valuesOffset++] = (block >>> 34) & 1L;
        values[valuesOffset++] = (block >>> 35) & 1L;
        values[valuesOffset++] = (block >>> 36) & 1L;
        values[valuesOffset++] = (block >>> 37) & 1L;
        values[valuesOffset++] = (block >>> 38) & 1L;
        values[valuesOffset++] = (block >>> 39) & 1L;
        values[valuesOffset++] = (block >>> 40) & 1L;
        values[valuesOffset++] = (block >>> 41) & 1L;
        values[valuesOffset++] = (block >>> 42) & 1L;
        values[valuesOffset++] = (block >>> 43) & 1L;
        values[valuesOffset++] = (block >>> 44) & 1L;
        values[valuesOffset++] = (block >>> 45) & 1L;
        values[valuesOffset++] = (block >>> 46) & 1L;
        values[valuesOffset++] = (block >>> 47) & 1L;
        values[valuesOffset++] = (block >>> 48) & 1L;
        values[valuesOffset++] = (block >>> 49) & 1L;
        values[valuesOffset++] = (block >>> 50) & 1L;
        values[valuesOffset++] = (block >>> 51) & 1L;
        values[valuesOffset++] = (block >>> 52) & 1L;
        values[valuesOffset++] = (block >>> 53) & 1L;
        values[valuesOffset++] = (block >>> 54) & 1L;
        values[valuesOffset++] = (block >>> 55) & 1L;
        values[valuesOffset++] = (block >>> 56) & 1L;
        values[valuesOffset++] = (block >>> 57) & 1L;
        values[valuesOffset++] = (block >>> 58) & 1L;
        values[valuesOffset++] = (block >>> 59) & 1L;
        values[valuesOffset++] = (block >>> 60) & 1L;
        values[valuesOffset++] = (block >>> 61) & 1L;
        values[valuesOffset++] = (block >>> 62) & 1L;
        values[valuesOffset++] = block >>> 63;
      }
    }

