  /** 
   * Creates a minimum-should-match query from the query text.
   * <p>
   * @param field field name
   * @param queryText text to be passed to the analyzer
   * @param fraction of query terms {@code [0..1]} that should match 
   * @return {@code TermQuery} or {@code BooleanQuery}, based on the analysis 
   *         of {@code queryText}
   */
  public Query createMinShouldMatchQuery(String field, String queryText, float fraction) {
    if (Float.isNaN(fraction) || fraction < 0 || fraction > 1) {
      throw new IllegalArgumentException("fraction should be >= 0 and <= 1");
    }
    
    // TODO: wierd that BQ equals/rewrite/scorer doesn't handle this?
    if (fraction == 1) {
      return createBooleanQuery(field, queryText, BooleanClause.Occur.MUST);
    }
    
    Query query = createFieldQuery(analyzer, BooleanClause.Occur.SHOULD, field, queryText, false, 0);
    if (query instanceof BooleanQuery) {
      query = addMinShouldMatchToBoolean((BooleanQuery) query, fraction);
    } else if (query instanceof GraphQuery && ((GraphQuery) query).hasBoolean()) {
      // we have a graph query that has at least one boolean sub-query
      // re-build and set minimum should match on each boolean found
      List<Query> oldQueries = ((GraphQuery) query).getQueries();
      Query[] queries = new Query[oldQueries.size()];
      for (int i = 0; i < queries.length; i++) {
        Query oldQuery = oldQueries.get(i);
        if (oldQuery instanceof BooleanQuery) {
          queries[i] = addMinShouldMatchToBoolean((BooleanQuery) oldQuery, fraction);
        } else {
          queries[i] = oldQuery;
        }
      }

      query = new GraphQuery(queries);
    }
    return query;
  }

