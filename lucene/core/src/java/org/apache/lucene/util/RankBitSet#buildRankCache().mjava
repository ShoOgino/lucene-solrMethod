  /**
   * Must be called after bits has changed and before {@link #rank} is called.
   */
  public void buildRankCache() {
    rankCache = new long[(length() >>> LOWER_OVER_BITS)+1];
    long total = 0;
    int lower = 0 ;
    while (lower * LOWER_OVER_SIZE < length()) { // Full lower block processing
      final int origoWordIndex = (lower * LOWER_OVER_SIZE) >>> 6;
    // TODO: Some conditionals could be spared by checking once if all basic blocks are within size
      final long basic1 = origoWordIndex + BASIC_WORDS <= wlen ?
          BitUtil.pop_array(inner.getBits(), origoWordIndex, BASIC_WORDS) : 0;
      final long basic2 =  origoWordIndex + BASIC_WORDS*2 <= wlen ?
          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS, BASIC_WORDS) : 0;
      final long basic3 =  origoWordIndex + BASIC_WORDS*3 <= wlen ?
          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS *2, BASIC_WORDS) : 0;
      final long basic4 =  origoWordIndex + BASIC_WORDS*4 <= wlen ?
          BitUtil.pop_array(inner.getBits(), origoWordIndex + BASIC_WORDS *3, BASIC_WORDS) : 0;
      rankCache[lower] = total << (Long.SIZE-LOWER_BITS) |
           basic1 << (BASIC_BITS *2) |
           basic2 << BASIC_BITS |
           basic3;
      total += basic1 + basic2 + basic3 + basic4;
      lower++;
    }
  }

