  private FST.Arc<T> doSeekCeilArrayPacked(final FST.Arc<T> arc, final int targetLabel, final FST.BytesReader in) throws IOException {
    // The array is packed -- use binary search to find the target.

    int low = arc.arcIdx();
    int high = arc.numArcs() -1;
    int mid = 0;
    //System.out.println("do arc array low=" + low + " high=" + high + " targetLabel=" + targetLabel);
    boolean found = false;
    while (low <= high) {
      mid = (low + high) >>> 1;
      in.setPosition(arc.posArcsStart());
      in.skipBytes(arc.bytesPerArc() * mid + 1);
      final int midLabel = fst.readLabel(in);
      final int cmp = midLabel - targetLabel;
      //System.out.println("  cycle low=" + low + " high=" + high + " mid=" + mid + " midLabel=" + midLabel + " cmp=" + cmp);
      if (cmp < 0)
        low = mid + 1;
      else if (cmp > 0)
        high = mid - 1;
      else {
        found = true;
        break;
      }
    }

    // NOTE: this code is dup'd w/ the code below (in
    // the outer else clause):
    if (found) {
      // Match
      fst.readArcByIndex(arc, in, mid);
      assert arc.arcIdx() == mid;
      assert arc.label() == targetLabel: "arc.label=" + arc.label() + " vs targetLabel=" + targetLabel + " mid=" + mid;
      output[upto] = fst.outputs.add(output[upto-1], arc.output());
      if (targetLabel == FST.END_LABEL) {
        return null;
      }
      setCurrentLabel(arc.label());
      incr();
      return fst.readFirstTargetArc(arc, getArc(upto), fstReader);
    } else if (low == arc.numArcs()) {
      // Dead end
      fst.readArcByIndex(arc, in, arc.numArcs() - 1);
      assert arc.isLast();
      // Dead end (target is after the last arc);
      // rollback to last fork then push
      upto--;
      while(true) {
        if (upto == 0) {
          return null;
        }
        final FST.Arc<T> prevArc = getArc(upto);
        //System.out.println("  rollback upto=" + upto + " arc.label=" + prevArc.label + " isLast?=" + prevArc.isLast());
        if (!prevArc.isLast()) {
          fst.readNextArc(prevArc, fstReader);
          pushFirst();
          return null;
        }
        upto--;
      }
    } else {
      fst.readArcByIndex(arc, in, low);
      assert arc.label() > targetLabel;
      pushFirst();
      return null;
    }
  }

