  /** Generates a non-cryptographic globally unique id. */
  public static String randomId() {

    // NOTE: we don't use Java's UUID.randomUUID() implementation here because:
    //
    //   * It's overkill for our usage: it tries to be cryptographically
    //     secure, whereas for this use we don't care if someone can
    //     guess the IDs.
    //
    //   * It uses SecureRandom, which on Linux can easily take a long time
    //     (I saw ~ 10 seconds just running a Lucene test) when entropy
    //     harvesting is falling behind.
    //
    //   * It loses a few (6) bits to version and variant and it's not clear
    //     what impact that has on the period, whereas the simple ++ (mod 2^128)
    //     we use here is guaranteed to have the full period.

    String id;
    synchronized(idLock) {
      id = nextId.toString(16);
      nextId = nextId.add(BigInteger.ONE).and(idMask);
    }

    assert id.length() <= 32: "id=" + id;
    id = idPad.substring(id.length()) + id;

    return id;
  }

