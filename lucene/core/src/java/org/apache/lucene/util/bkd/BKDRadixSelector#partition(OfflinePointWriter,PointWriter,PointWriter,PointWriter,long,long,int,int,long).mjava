  private void partition(OfflinePointWriter points, PointWriter left, PointWriter right, PointWriter deltaPoints,
                           long from, long to, int dim, int bytePosition, long numDocsTiebreak) throws IOException {
    assert bytePosition == bytesSorted -1 || deltaPoints != null;
    long tiebreakCounter = 0;
    try (OfflinePointReader reader = points.getReader(from, to - from, offlineBuffer)) {
      while (reader.next()) {
        reader.packedValueWithDocId(bytesRef1);
        reader.packedValue(bytesRef2);
        int docID = reader.docID();
        int bucket;
        if (bytePosition < bytesPerDim) {
          bucket = bytesRef1.bytes[bytesRef1.offset + dim * bytesPerDim + bytePosition] & 0xff;
        } else {
          bucket = bytesRef1.bytes[bytesRef1.offset + packedBytesLength + bytePosition - bytesPerDim] & 0xff;
        }
        //int bucket = getBucket(bytesRef1, dim, thisCommonPrefix);
        if (bucket < this.partitionBucket[bytePosition]) {
          // to the left side
          left.append(bytesRef2, docID);
        } else if (bucket > this.partitionBucket[bytePosition]) {
          // to the right side
          right.append(bytesRef2, docID);
        } else {
          if (bytePosition == bytesSorted - 1) {
            if (tiebreakCounter < numDocsTiebreak) {
              left.append(bytesRef2, docID);
              tiebreakCounter++;
            } else {
              right.append(bytesRef2, docID);
            }
          } else {
            deltaPoints.append(bytesRef2, docID);
          }
        }
      }
    }
    //Delete original file
    points.destroy();
  }

