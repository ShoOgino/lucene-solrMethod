    public void encode(LongBuffer values, LongBuffer blocks, int iterations) {
      assert blocks.position() + iterations * blocks() <= blocks.limit();
      assert values.position() + iterations * values() <= values.limit();
      for (int i = 0; i < iterations; ++i) {
        blocks.put((values.get() << 12) | (values.get(values.position()) >>> 40));
        blocks.put((values.get() << 24) | (values.get(values.position()) >>> 28));
        blocks.put((values.get() << 36) | (values.get(values.position()) >>> 16));
        blocks.put((values.get() << 48) | (values.get(values.position()) >>> 4));
        blocks.put((values.get() << 60) | (values.get() << 8) | (values.get(values.position()) >>> 44));
        blocks.put((values.get() << 20) | (values.get(values.position()) >>> 32));
        blocks.put((values.get() << 32) | (values.get(values.position()) >>> 20));
        blocks.put((values.get() << 44) | (values.get(values.position()) >>> 8));
        blocks.put((values.get() << 56) | (values.get() << 4) | (values.get(values.position()) >>> 48));
        blocks.put((values.get() << 16) | (values.get(values.position()) >>> 36));
        blocks.put((values.get() << 28) | (values.get(values.position()) >>> 24));
        blocks.put((values.get() << 40) | (values.get(values.position()) >>> 12));
        blocks.put((values.get() << 52) | values.get());
      }
    }

