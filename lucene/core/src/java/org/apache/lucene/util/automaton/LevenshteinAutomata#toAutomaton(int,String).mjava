  public LightAutomaton toAutomaton(int n, String prefix) {
    assert prefix != null;
    if (n == 0) {
      return BasicAutomata.makeStringLight(prefix + UnicodeUtil.newString(word, 0, word.length));
    }
    
    if (n >= descriptions.length)
      return null;
    
    final int range = 2*n+1;
    ParametricDescription description = descriptions[n];
    // the number of states is based on the length of the word and n
    int numStates = description.size();

    LightAutomaton a = new LightAutomaton();
    int lastState;
    if (prefix != null) {
      // Insert prefix
      lastState = a.createState();
      for (int i = 0, cp = 0; i < prefix.length(); i += Character.charCount(cp)) {
        int state = a.createState();
        cp = prefix.codePointAt(i);
        a.addTransition(lastState, state, cp, cp);
        lastState = state;
      }
    } else {
      lastState = a.createState();
    }

    // nocommit why are so many dead states created here?

    int stateOffset = lastState;
    a.setAccept(lastState, description.isAccept(0));

    // create all states, and mark as accept states if appropriate
    for (int i = 1; i < numStates; i++) {
      int state = a.createState();
      a.setAccept(state, description.isAccept(i));
    }

    // create transitions from state to state
    for (int k = 0; k < numStates; k++) {
      final int xpos = description.getPosition(k);
      if (xpos < 0)
        continue;
      final int end = xpos + Math.min(word.length - xpos, range);
      
      for (int x = 0; x < alphabet.length; x++) {
        final int ch = alphabet[x];
        // get the characteristic vector at this position wrt ch
        final int cvec = getVector(ch, xpos, end);
        int dest = description.transition(k, xpos, cvec);
        if (dest >= 0) {
          // nocommit why do we create cycles in dead states?
          if (k != dest) {
            a.addTransition(stateOffset+k, stateOffset+dest, ch);
          }
        }
      }
      // add transitions for all other chars in unicode
      // by definition, their characteristic vectors are always 0,
      // because they do not exist in the input string.
      int dest = description.transition(k, xpos, 0); // by definition
      if (dest >= 0) {
        for (int r = 0; r < numRanges; r++) {
          // nocommit why do we create cycles in dead states?
          if (k != dest) {
            a.addTransition(stateOffset+k, stateOffset+dest, rangeLower[r], rangeUpper[r]);
          }
        }
      }
    }

    a.finish();
    assert a.isDeterministic();
    return a;
  }

