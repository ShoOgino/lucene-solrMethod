  /** Never returns null, but you should never call this if
   *  arc.isLast() is true. */
  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {

    // TODO: can't assert this because we call from readFirstArc
    // assert !flag(arc.flags, BIT_LAST_ARC);

    // this is a continuing arc in a fixed array
    if (arc.bytesPerArc != 0) {
      // arcs are in an array
      if (arc.arcIdx > Integer.MIN_VALUE) {
        arc.arcIdx++;
        assert arc.arcIdx < arc.numArcs;
        in.setPosition(arc.posArcsStart - arc.arcIdx * arc.bytesPerArc);
        arc.flags = in.readByte();
      } else {
        assert arc.nextArc <= arc.posArcsStart && arc.nextArc > arc.posArcsStart - arc.numArcs * arc.bytesPerArc;
        in.setPosition(arc.nextArc);
        arc.flags = in.readByte();
        while (flag(arc.flags, BIT_MISSING_ARC)) {
          // skip empty arcs
          arc.nextArc -= arc.bytesPerArc;
          in.skipBytes(arc.bytesPerArc - 1);
          arc.flags = in.readByte();
        }
      }
    } else {
      // arcs are packed
      in.setPosition(arc.nextArc);
      arc.flags = in.readByte();
    }
    arc.label = readLabel(in);

    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {
      arc.output = outputs.read(in);
    } else {
      arc.output = outputs.getNoOutput();
    }

    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {
      arc.nextFinalOutput = outputs.readFinalOutput(in);
    } else {
      arc.nextFinalOutput = outputs.getNoOutput();
    }

    if (arc.flag(BIT_STOP_NODE)) {
      if (arc.flag(BIT_FINAL_ARC)) {
        arc.target = FINAL_END_NODE;
      } else {
        arc.target = NON_FINAL_END_NODE;
      }
      if (arc.bytesPerArc == 0) {
        arc.nextArc = in.getPosition();
      } else {
        arc.nextArc -= arc.bytesPerArc;
      }
    } else if (arc.flag(BIT_TARGET_NEXT)) {
      arc.nextArc = in.getPosition();
      // TODO: would be nice to make this lazy -- maybe
      // caller doesn't need the target and is scanning arcs...
      if (!arc.flag(BIT_LAST_ARC)) {
        if (arc.bytesPerArc == 0) {
          // must scan
          seekToNextNode(in);
        } else {
          in.setPosition(arc.posArcsStart);
          in.skipBytes(arc.bytesPerArc * arc.numArcs);
        }
      }
      arc.target = in.getPosition();
    } else {
      arc.target = readUnpackedNodeTarget(in);
      if (arc.bytesPerArc > 0 && arc.arcIdx == Integer.MIN_VALUE) {
        // nextArc was pointing to *this* arc when we entered; advance to the next
        // if it is a missing arc, we will skip it later
        arc.nextArc -= arc.bytesPerArc;
      } else {
        // in list and fixed table encodings, the next arc always follows this one
        arc.nextArc = in.getPosition();
      }
    }
    return arc;
  }

