  /** Never returns null, but you should never call this if
   *  arc.isLast() is true. */
  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {

    // TODO: can't assert this because we call from readFirstArc
    // assert !flag(arc.flags, BIT_LAST_ARC);

    // this is a continuing arc in a fixed array
    if (arc.bytesPerArc() != 0) {
      // arcs are in an array
      if (arc.arcIdx() > Integer.MIN_VALUE) {
        arc.arcIdx++;
        assert arc.arcIdx < arc.numArcs;
        in.setPosition(arc.posArcsStart() - arc.arcIdx() * arc.bytesPerArc());
        arc.flags = in.readByte();
      } else {
        assert arc.nextArc() <= arc.posArcsStart() && arc.nextArc() > arc.posArcsStart() - arc.numArcs() * arc.bytesPerArc();
        in.setPosition(arc.nextArc());
        arc.flags = in.readByte();
        while (flag(arc.flags(), BIT_MISSING_ARC)) {
          // skip empty arcs
          arc.nextArc = arc.nextArc() - arc.bytesPerArc();
          in.skipBytes(arc.bytesPerArc() - 1);
          arc.flags = in.readByte();
        }
      }
    } else {
      // arcs are packed
      in.setPosition(arc.nextArc());
      arc.flags = in.readByte();
    }
    return readArc(arc, in);
  }

