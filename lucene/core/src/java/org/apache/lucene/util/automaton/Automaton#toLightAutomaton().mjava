  public LightAutomaton toLightAutomaton() {
    State[] states = getNumberedStates();

    LightAutomaton a = new LightAutomaton();
    //System.out.println("INITIAL: " + initial);

    // State numbers are nearly the same, except we must remap initial to state 0
    int[] oldToNew = new int[states.length];
    for(int i=0;i<states.length;i++) {
      oldToNew[i] = i;
    }

    oldToNew[initial.number] = 0;
    oldToNew[0] = initial.number;
    //System.out.println("initial.number=" + initial.number);

    // First pass creates all states
    for(int i=0;i<states.length;i++) {
      a.createState();
      a.setAccept(oldToNew[i], states[i].isAccept());
    }

    // Second pass carries over all transitions
    for(State state : states) {
      for(Transition t : state.getTransitions()) {
        assert t.getMax() >= t.getMin();
        a.addTransition(oldToNew[state.number], oldToNew[t.getDest().getNumber()], t.getMin(), t.getMax());
        //System.out.println("  add transtion " + oldToNew[state.number] + " -> " + oldToNew[t.getDest().getNumber()] + " min=" + (char) t.getMin() + " max=" + (char) t.getMax());
      }
    }
    // a.writeDot("/l/la/lucene/core/afterconvert.dot");
    a.finish();
    return a;
  }

