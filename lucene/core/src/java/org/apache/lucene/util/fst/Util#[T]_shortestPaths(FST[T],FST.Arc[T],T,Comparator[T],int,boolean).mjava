  /** Starting from node, find the top N min cost 
   *  completions to a final node.
   *
   *  <p>NOTE: you must share the outputs when you build the
   *  FST (pass doShare=true to {@link
   *  PositiveIntOutputs#getSingleton}). */
  public static <T> MinResult<T>[] shortestPaths(FST<T> fst, FST.Arc<T> fromNode, T startOutput, Comparator<T> comparator, int topN,
                                                 boolean allowEmptyString) throws IOException {
    TopNSearcher<T> searcher = new TopNSearcher<T>(fst, topN, comparator);

    // since this search is initialized with a single start node 
    // it is okay to start with an empty input path here
    searcher.addStartPaths(fromNode, startOutput, allowEmptyString, new IntsRef());
    return searcher.search();
  } 

