    public void decode(LongBuffer blocks, IntBuffer values, int iterations) {
      assert blocks.position() + iterations * blocks() <= blocks.limit();
      assert values.position() + iterations * values() <= values.limit();
      for (int i = 0; i < iterations; ++i) {
        final long block0 = blocks.get();
        values.put((int) (block0 >>> 62));
        values.put((int) ((block0 >>> 60) & 3L));
        values.put((int) ((block0 >>> 58) & 3L));
        values.put((int) ((block0 >>> 56) & 3L));
        values.put((int) ((block0 >>> 54) & 3L));
        values.put((int) ((block0 >>> 52) & 3L));
        values.put((int) ((block0 >>> 50) & 3L));
        values.put((int) ((block0 >>> 48) & 3L));
        values.put((int) ((block0 >>> 46) & 3L));
        values.put((int) ((block0 >>> 44) & 3L));
        values.put((int) ((block0 >>> 42) & 3L));
        values.put((int) ((block0 >>> 40) & 3L));
        values.put((int) ((block0 >>> 38) & 3L));
        values.put((int) ((block0 >>> 36) & 3L));
        values.put((int) ((block0 >>> 34) & 3L));
        values.put((int) ((block0 >>> 32) & 3L));
        values.put((int) ((block0 >>> 30) & 3L));
        values.put((int) ((block0 >>> 28) & 3L));
        values.put((int) ((block0 >>> 26) & 3L));
        values.put((int) ((block0 >>> 24) & 3L));
        values.put((int) ((block0 >>> 22) & 3L));
        values.put((int) ((block0 >>> 20) & 3L));
        values.put((int) ((block0 >>> 18) & 3L));
        values.put((int) ((block0 >>> 16) & 3L));
        values.put((int) ((block0 >>> 14) & 3L));
        values.put((int) ((block0 >>> 12) & 3L));
        values.put((int) ((block0 >>> 10) & 3L));
        values.put((int) ((block0 >>> 8) & 3L));
        values.put((int) ((block0 >>> 6) & 3L));
        values.put((int) ((block0 >>> 4) & 3L));
        values.put((int) ((block0 >>> 2) & 3L));
        values.put((int) (block0 & 3L));
      }
    }

