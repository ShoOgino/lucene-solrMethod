  private byte[] heapRadixSelect(HeapPointWriter points, int dim, int from, int to, int partitionPoint, int commonPrefix) {
    final int offset = dim * bytesPerDim + commonPrefix;
    new RadixSelector(bytesSorted - commonPrefix) {

      @Override
      protected void swap(int i, int j) {
        points.swap(i, j);
      }

      @Override
      protected int byteAt(int i, int k) {
        assert k >= 0;
        if (k + commonPrefix < bytesPerDim) {
          // dim bytes
          int block = i / points.valuesPerBlock;
          int index = i % points.valuesPerBlock;
          return points.blocks.get(block)[index * packedBytesLength + offset + k] & 0xff;
        } else {
          // doc id
          int s = 3 - (k + commonPrefix - bytesPerDim);
          return (points.docIDs[i] >>> (s * 8)) & 0xff;
        }
      }
    }.select(from, to, partitionPoint);

    byte[] partition = new byte[bytesPerDim];
    points.getPackedValueSlice(partitionPoint, bytesRef1);
    System.arraycopy(bytesRef1.bytes, bytesRef1.offset + dim * bytesPerDim, partition, 0, bytesPerDim);
    return partition;
  }

