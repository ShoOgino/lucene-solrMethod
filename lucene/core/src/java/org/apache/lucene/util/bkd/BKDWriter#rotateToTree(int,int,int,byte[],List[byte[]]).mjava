  private void rotateToTree(int nodeID, int offset, int numNodes, byte[] index, List<byte[]> leafBlockStartValues) {
    if (numNodes == 1) {
      // Leaf index node
      System.arraycopy(leafBlockStartValues.get(offset), 0, index, nodeID*(1+bytesPerDim)+1, bytesPerDim);
    } else if (numNodes > 1) {
      // Internal index node
      // numNodes + 1 is the number of leaves
      // -1 because there is one less inner node
      int leftHalf = getNumLeftLeafNodes(numNodes + 1) - 1;
      int rootOffset = offset + leftHalf;

      System.arraycopy(leafBlockStartValues.get(rootOffset), 0, index, nodeID*(1+bytesPerDim)+1, bytesPerDim);

      // Recurse left
      rotateToTree(2*nodeID, offset, leftHalf, index, leafBlockStartValues);
      // Recurse right
      rotateToTree(2*nodeID+1, rootOffset+1, numNodes-leftHalf-1, index, leafBlockStartValues);
    } else {
      assert numNodes == 0;
    }
  }

