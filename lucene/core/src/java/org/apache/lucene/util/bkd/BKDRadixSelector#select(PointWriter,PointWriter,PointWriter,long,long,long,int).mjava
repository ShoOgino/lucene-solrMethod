  /**
   *
   * Method to partition the input data. It returns the value of the dimension where
   * the split happens. The method destroys the original writer.
   *
   */
  public byte[] select(PointWriter points, PointWriter left, PointWriter right, long from, long to, long partitionPoint, int dim) throws IOException {
    checkArgs(from, to, partitionPoint);

    //If we are on heap then we just select on heap
    if (points instanceof HeapPointWriter) {
      return heapSelect((HeapPointWriter) points, left, right, dim, Math.toIntExact(from), Math.toIntExact(to),  Math.toIntExact(partitionPoint), 0);
    }

    //reset histogram
    for (int i = 0; i < bytesSorted; i++) {
      Arrays.fill(histogram[i], 0);
    }
    OfflinePointWriter offlinePointWriter = (OfflinePointWriter) points;

    //find common prefix, it does already set histogram values if needed
    int commonPrefix = findCommonPrefix(offlinePointWriter, from, to, dim);

    //if all equals we just partition the data
    if (commonPrefix ==  bytesSorted) {
      partition(offlinePointWriter, left,  right, null, from, to, dim, commonPrefix - 1, partitionPoint);
      return partitionPointFromCommonPrefix();
    }
    //let's rock'n'roll
    return buildHistogramAndPartition(offlinePointWriter, left, right, from, to, partitionPoint, 0, commonPrefix, dim);
  }

