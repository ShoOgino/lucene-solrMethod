    public ValueReader(Type type, int maxDocs, Comparator<BytesRef> comp) {
      super();
      this.type = type;
      Source docValuesArray = null;
      switch (type) {
      case FIXED_INTS_16:
        shorts = new short[maxDocs];
        docValuesArray = DocValuesArraySource.forType(type)
            .newFromArray(shorts);
        break;
      case FIXED_INTS_32:
        ints = new int[maxDocs];
        docValuesArray = DocValuesArraySource.forType(type).newFromArray(ints);
        break;
      case FIXED_INTS_64:
        longs = new long[maxDocs];
        docValuesArray = DocValuesArraySource.forType(type)
            .newFromArray(longs);
        break;
      case VAR_INTS:
        longs = new long[maxDocs];
        docValuesArray = new VarIntsArraySource(type, longs);
        break;
      case FIXED_INTS_8:
        bytes = new byte[maxDocs];
        docValuesArray = DocValuesArraySource.forType(type).newFromArray(bytes);
        break;
      case FLOAT_32:
        floats = new float[maxDocs];
        docValuesArray = DocValuesArraySource.forType(type)
            .newFromArray(floats);
        break;
      case FLOAT_64:
        doubles = new double[maxDocs];
        docValuesArray = DocValuesArraySource.forType(type).newFromArray(
            doubles);
        break;
      case BYTES_FIXED_DEREF:
      case BYTES_FIXED_SORTED:
      case BYTES_FIXED_STRAIGHT:
      case BYTES_VAR_DEREF:
      case BYTES_VAR_SORTED:
      case BYTES_VAR_STRAIGHT:
        assert comp != null;
        hash = new BytesRefHash();
        BytesSource bytesSource = new BytesSource(type, comp, maxDocs, hash);
        ints = bytesSource.docIdToEntry;
        source = bytesSource;
        scratch = new BytesRef();
        break;

      }
      if (docValuesArray != null) {
        assert source == null;
        this.source = docValuesArray;
      }
    }

