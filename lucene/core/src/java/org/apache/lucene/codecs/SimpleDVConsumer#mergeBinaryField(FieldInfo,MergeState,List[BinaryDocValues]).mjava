  // dead simple impl: codec can optimize
  public void mergeBinaryField(FieldInfo fieldInfo, MergeState mergeState, List<BinaryDocValues> toMerge) throws IOException {
    // first compute fixedLength and maxLength of live ones to be merged.
    // nocommit: messy, and can be simplified by using docValues.maxLength/fixedLength in many cases.
    boolean fixedLength = true;
    int maxLength = -1;
    BytesRef bytes = new BytesRef();
    for (int readerIDX=0;readerIDX<toMerge.size();readerIDX++) {
      AtomicReader reader = mergeState.readers.get(readerIDX);      
      int maxDoc = reader.maxDoc();
      Bits liveDocs = reader.getLiveDocs();
      BinaryDocValues values = toMerge.get(readerIDX);
      for (int i = 0; i < maxDoc; i++) {
        if (liveDocs == null || liveDocs.get(i)) {
          values.get(i, bytes);
          if (maxLength == -1) {
            maxLength = bytes.length;
          } else {
            fixedLength &= bytes.length == maxLength;
            maxLength = Math.max(bytes.length, maxLength);
          }
        }
        mergeState.checkAbort.work(300);
      }
    }
    // now we can merge
    assert maxLength >= 0; // could this happen (nothing to do?)
    BinaryDocValuesConsumer field = addBinaryField(fieldInfo, fixedLength, maxLength);
    field.merge(mergeState, toMerge);
  }

