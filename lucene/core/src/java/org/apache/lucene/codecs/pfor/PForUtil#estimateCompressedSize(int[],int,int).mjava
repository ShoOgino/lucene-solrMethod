  // loosely estimate int size of each compressed block, based on parameter b
  // ignore force exceptions
  static int estimateCompressedSize(final int[] data, int size, int numBits) {
    int totalBytes=(numBits*size+7)/8;   // always round to byte
    int excNum=0;
    int curExcBytes=1;
    for (int i=0; i<size; ++i) {
      if ((data[i] & ~MASK[numBits]) != 0) {   // exception
        excNum++;
        if (curExcBytes<2 && (data[i] & ~MASK[8]) != 0) { // exceed 1 byte exception
          curExcBytes=2;
        }
        if (curExcBytes<4 && (data[i] & ~MASK[16]) != 0) { // exceed 2 byte exception
          curExcBytes=4;
        }
      }
    }
    if (curExcBytes==2) {
      totalBytes=((totalBytes+1)/2)*2;  // round up to 2x bytes before filling exceptions
    }
    else if (curExcBytes==4) {
      totalBytes=((totalBytes+3)/4)*4;  // round up to 4x bytes
    }
    totalBytes+=excNum*curExcBytes;

    return totalBytes/4*4+HEADER_INT_SIZE;  // round up to ints
  }

