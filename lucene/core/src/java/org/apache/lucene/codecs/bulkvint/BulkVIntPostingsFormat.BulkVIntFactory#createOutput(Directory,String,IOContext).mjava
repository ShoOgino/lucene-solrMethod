    @Override
    public FixedIntBlockIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {
      return new FixedIntBlockIndexOutput(dir.createOutput(fileName, context), blockSize) {
        private final byte bytes[] = new byte[blockSize*5]; // header * max(Vint)
        
        @Override
        protected void flushBlock() throws IOException {
          int upto = 0;
          
          boolean allOnes = true;
          // encode ints
          for(int i=0;i<buffer.length;i++) {
            int j = buffer[i];
            if (j != 1) {
              allOnes = false;
            }
            while ((j & ~0x7F) != 0) {
              bytes[upto++] = (byte)((j & 0x7f) | 0x80);
              j >>>= 7;
            }
            bytes[upto++] = (byte)j;
          }
          
          if (allOnes) {
            // the most common int pattern (all 1's)
            // write a special header (numBytes=0) for this case.
            out.writeVInt(0);
          } else {
            // write header (length in bytes)
            out.writeVInt(upto);
          
            // write block
            out.writeBytes(bytes, 0, upto);
          }
        }
      };
    }

