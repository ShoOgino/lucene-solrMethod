  /**
   * Read the next block of data (<code>For</code> format).
   *
   * @param in        the input to use to read data
   * @param encoded   a buffer that can be used to store encoded data
   * @param decoded   where to write decoded data
   * @throws IOException
   */
  static void readBlock(IndexInput in, byte[] encoded, long[] decoded) throws IOException {
    final int numBits = in.readByte(); // no mask because should be <= 32
    final int encodedSize = in.readByte(); // no mask because should be <= 64
    assert numBits > 0 && numBits <= 32 : numBits;
    assert encodedSize > 0 && encodedSize <= BLOCK_SIZE / 2 : encodedSize; // because blocks are 64-bits and decoded values are 32-bits at most

    in.readBytes(encoded, 0, encodedSize << 3);

    final PackedInts.Decoder decoder = DECODERS[numBits];
    final int iters = ITERATIONS[numBits];
    assert iters * decoder.valueCount() == BLOCK_SIZE;
    assert iters * decoder.blockCount() == encodedSize;

    decoder.decode(encoded, 0, decoded, 0, iters);
  }

