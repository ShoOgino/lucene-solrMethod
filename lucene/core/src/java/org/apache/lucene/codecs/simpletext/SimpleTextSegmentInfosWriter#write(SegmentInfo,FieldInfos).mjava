  @Override
  public void write(SegmentInfo si, FieldInfos fis) throws IOException {
    assert si.getDelCount() <= si.docCount: "delCount=" + si.getDelCount() + " docCount=" + si.docCount + " segment=" + si.name;

    String fileName = IndexFileNames.segmentFileName(si.name, "", SimpleTextSegmentInfosFormat.SI_EXTENSION);
    // nocommit what IOCtx
    boolean success = false;
    IndexOutput output = si.dir.createOutput(fileName, new IOContext(new FlushInfo(0, 0)));

    try {
      BytesRef scratch = new BytesRef();
    
      SimpleTextUtil.write(output, SI_VERSION);
      SimpleTextUtil.write(output, si.getVersion(), scratch);
      SimpleTextUtil.writeNewline(output);
    
      SimpleTextUtil.write(output, SI_DOCCOUNT);
      SimpleTextUtil.write(output, Integer.toString(si.docCount), scratch);
      SimpleTextUtil.writeNewline(output);
    
      SimpleTextUtil.write(output, SI_DELCOUNT);
      SimpleTextUtil.write(output, Integer.toString(si.getDelCount()), scratch);
      SimpleTextUtil.writeNewline(output);
    
      SimpleTextUtil.write(output, SI_USECOMPOUND);
      SimpleTextUtil.write(output, Boolean.toString(si.getUseCompoundFile()), scratch);
      SimpleTextUtil.writeNewline(output);
    
      SimpleTextUtil.write(output, SI_DSOFFSET);
      SimpleTextUtil.write(output, Integer.toString(si.getDocStoreOffset()), scratch);
      SimpleTextUtil.writeNewline(output);
    
      SimpleTextUtil.write(output, SI_DSSEGMENT);
      SimpleTextUtil.write(output, si.getDocStoreSegment(), scratch);
      SimpleTextUtil.writeNewline(output);
    
      SimpleTextUtil.write(output, SI_DSCOMPOUND);
      SimpleTextUtil.write(output, Boolean.toString(si.getDocStoreIsCompoundFile()), scratch);
      SimpleTextUtil.writeNewline(output);
    
      SimpleTextUtil.write(output, SI_DELGEN);
      SimpleTextUtil.write(output, Long.toString(si.getDelGen()), scratch);
      SimpleTextUtil.writeNewline(output);
    
      Map<Integer,Long> normGen = si.getNormGen();
      int numNormGen = normGen == null ? 0 : normGen.size();
      SimpleTextUtil.write(output, SI_NUM_NORMGEN);
      SimpleTextUtil.write(output, Integer.toString(numNormGen), scratch);
      SimpleTextUtil.writeNewline(output);
    
      // nocommit no more:
      if (numNormGen > 0) {
        for (Entry<Integer,Long> entry : normGen.entrySet()) {
          SimpleTextUtil.write(output, SI_NORMGEN_KEY);
          SimpleTextUtil.write(output, Integer.toString(entry.getKey()), scratch);
          SimpleTextUtil.writeNewline(output);
        
          SimpleTextUtil.write(output, SI_NORMGEN_VALUE);
          SimpleTextUtil.write(output, Long.toString(entry.getValue()), scratch);
          SimpleTextUtil.writeNewline(output);
        }
      }
    
      Map<String,String> diagnostics = si.getDiagnostics();
      int numDiagnostics = diagnostics == null ? 0 : diagnostics.size();
      SimpleTextUtil.write(output, SI_NUM_DIAG);
      SimpleTextUtil.write(output, Integer.toString(numDiagnostics), scratch);
      SimpleTextUtil.writeNewline(output);
    
      if (numDiagnostics > 0) {
        for (Map.Entry<String,String> diagEntry : diagnostics.entrySet()) {
          SimpleTextUtil.write(output, SI_DIAG_KEY);
          SimpleTextUtil.write(output, diagEntry.getKey(), scratch);
          SimpleTextUtil.writeNewline(output);
        
          SimpleTextUtil.write(output, SI_DIAG_VALUE);
          SimpleTextUtil.write(output, diagEntry.getValue(), scratch);
          SimpleTextUtil.writeNewline(output);
        }
      }
      success = true;
    } finally {
      if (!success) {
        IOUtils.closeWhileHandlingException(output);
      } else {
        output.close();
      }
    }
  }

