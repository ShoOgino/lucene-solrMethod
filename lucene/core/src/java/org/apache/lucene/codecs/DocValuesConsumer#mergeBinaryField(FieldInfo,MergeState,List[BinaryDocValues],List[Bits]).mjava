  /**
   * Merges the binary docvalues from <code>toMerge</code>.
   * <p>
   * The default implementation calls {@link #addBinaryField}, passing
   * an Iterable that merges and filters deleted documents on the fly.
   */
  public void mergeBinaryField(FieldInfo fieldInfo, final MergeState mergeState, final List<BinaryDocValues> toMerge, final List<Bits> docsWithField) throws IOException {
    addBinaryField(fieldInfo,
                   new Iterable<BytesRef>() {
                     @Override
                     public Iterator<BytesRef> iterator() {

                       // We must make a new DocIDMerger for each iterator:
                       List<BinaryDocValuesSub> subs = new ArrayList<>();
                       assert mergeState.docMaps.length == toMerge.size();
                       for(int i=0;i<toMerge.size();i++) {
                         subs.add(new BinaryDocValuesSub(mergeState.docMaps[i], toMerge.get(i), docsWithField.get(i), mergeState.maxDocs[i]));
                       }

                       final DocIDMerger<BinaryDocValuesSub> docIDMerger = new DocIDMerger<>(subs, mergeState.segmentInfo.getIndexSort() != null);

                       return new Iterator<BytesRef>() {
                         BytesRef nextValue;
                         BytesRef nextPointer; // points to null if missing, or nextValue
                         boolean nextIsSet;

                         @Override
                         public boolean hasNext() {
                           return nextIsSet || setNext();
                         }

                         @Override
                         public void remove() {
                           throw new UnsupportedOperationException();
                         }

                         @Override
                         public BytesRef next() {
                           if (hasNext() == false) {
                             throw new NoSuchElementException();
                           }
                           assert nextIsSet;
                           nextIsSet = false;
                           return nextPointer;
                         }

                         private boolean setNext() {
                           while (true) {
                              BinaryDocValuesSub sub = docIDMerger.next();
                              if (sub == null) {
                                return false;
                              }
                              nextIsSet = true;
                              if (sub.docsWithField.get(sub.docID)) {
                                nextPointer = nextValue = sub.values.get(sub.docID);
                              } else {
                                nextPointer = null;
                              }
                              return true;
                             }
                           }
                       };
                     }
                   });
  }

