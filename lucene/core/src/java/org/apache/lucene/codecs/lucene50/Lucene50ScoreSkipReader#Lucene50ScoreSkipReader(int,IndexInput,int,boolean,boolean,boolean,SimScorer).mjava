  public Lucene50ScoreSkipReader(int version, IndexInput skipStream, int maxSkipLevels,
      boolean hasPos, boolean hasOffsets, boolean hasPayloads, SimScorer scorer) {
    super(version, skipStream, maxSkipLevels, hasPos, hasOffsets, hasPayloads);
    if (version < Lucene50PostingsFormat.VERSION_IMPACT_SKIP_DATA) {
      throw new IllegalStateException("Cannot skip based on scores if impacts are not indexed");
    }
    this.scorer = Objects.requireNonNull(scorer);
    this.maxScore = new float[maxSkipLevels];
    this.impacts = new byte[maxSkipLevels][];
    Arrays.fill(impacts, new byte[0]);
    this.impactsLength = new int[maxSkipLevels];
    this.globalMaxScore = scorer.score(Float.MAX_VALUE, 1);
  }

