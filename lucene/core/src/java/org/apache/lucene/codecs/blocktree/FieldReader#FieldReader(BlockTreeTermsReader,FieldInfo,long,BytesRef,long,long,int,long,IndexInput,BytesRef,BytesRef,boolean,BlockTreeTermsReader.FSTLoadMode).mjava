  FieldReader(BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,
              long indexStartFP, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm, boolean openedFromWriter, BlockTreeTermsReader.FSTLoadMode fstLoadMode) throws IOException {
    assert numTerms > 0;
    this.fieldInfo = fieldInfo;
    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals("id");
    this.parent = parent;
    this.numTerms = numTerms;
    this.sumTotalTermFreq = sumTotalTermFreq;
    this.sumDocFreq = sumDocFreq;
    this.docCount = docCount;
    this.indexStartFP = indexStartFP;
    this.rootCode = rootCode;
    this.minTerm = minTerm;
    this.maxTerm = maxTerm;
    // if (DEBUG) {
    //   System.out.println("BTTR: seg=" + segment + " field=" + fieldInfo.name + " rootBlockCode=" + rootCode + " divisor=" + indexDivisor);
    // }
    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;
    // Initialize FST offheap if index is MMapDirectory and
    // docCount != sumDocFreq implying field is not primary key
    if (indexIn != null) {
      switch (fstLoadMode) {
        case ON_HEAP:
          isFSTOffHeap = false;
          break;
        case OFF_HEAP:
          isFSTOffHeap = true;
          break;
        case OPTIMIZE_UPDATES_OFF_HEAP:
          isFSTOffHeap = ((this.docCount != this.sumDocFreq) || openedFromWriter == false);
          break;
        case AUTO:
          isFSTOffHeap = ((this.docCount != this.sumDocFreq) || openedFromWriter == false) && indexIn instanceof ByteBufferIndexInput;
          break;
        default:
          throw new IllegalStateException("unknown enum constant: " + fstLoadMode);
      }
      final IndexInput clone = indexIn.clone();
      clone.seek(indexStartFP);
      if (isFSTOffHeap) {
        index = new FST<>(clone, ByteSequenceOutputs.getSingleton(), new OffHeapFSTStore());
      } else {
        index = new FST<>(clone, ByteSequenceOutputs.getSingleton());
      }
      /*
        if (false) {
        final String dotFileName = segment + "_" + fieldInfo.name + ".dot";
        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));
        Util.toDot(index, w, false, false);
        System.out.println("FST INDEX: SAVED to " + dotFileName);
        w.close();
        }
      */
    } else {
      isFSTOffHeap = false;
      index = null;
    }
  }

