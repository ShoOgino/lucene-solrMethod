  @Override
  //
  // The return value will be the smaller one, when these two are 
  // 'comparable', i.e. every value in long[] fits the same ordering.
  //
  // NOTE: 
  // Only long[] is 'shared', byte[] and term stats simply act 
  // as 'attachment': when walking on the FST, if we see two byte[] on 
  // successive arcs, only the second byte[] is valid. 
  //
  // Therefore, during building, we always make sure that, for most nodes, 
  // the first output is 'pushed' one step towards root and reduced to 
  // be NO_OUTPUT, so that we get rid of the 'all zero' long[], and netly
  // get smaller amount of total outputs. 
  //
  // However, when decoding, terms might have to load redundant byte[] blob.
  //
  public TempMetaData common(TempMetaData t1, TempMetaData t2) {
    if (DEBUG) System.out.print("common("+t1+", "+t2+") = ");
    if (t1 == NO_OUTPUT || t2 == NO_OUTPUT) {
      if (DEBUG) System.out.println("ret:"+NO_OUTPUT);
      return NO_OUTPUT;
    }
    assert t1.longs.length == t2.longs.length;

    long[] longs1 = t1.longs, longs2 = t2.longs;
    int pos = 0;
    boolean smaller = true;
    TempMetaData ret;

    while (pos < longsSize && longs1[pos] == longs2[pos]) {
      pos++;
    }
    if (pos < longsSize) {
      // unequal
      smaller = (longs1[pos] < longs2[pos]);
      if (smaller) {
        // check whether strictly longs1 <= longs2 
        while (pos < longsSize && longs1[pos] <= longs2[pos]) {
          pos++;
        }
      } else {
        // check whether strictly longs1 >= longs2 
        while (pos < longsSize && longs1[pos] >= longs2[pos]) {
          pos++;
        }
      }
      if (pos < longsSize) {  // not fully 'comparable'
        ret = NO_OUTPUT;
      } else if (smaller) {
        ret = t1;
      } else {
        ret = t2;
      }
    } else {
      // equal, we won't check byte[] and docFreq
      ret = t1;
    }
    if (DEBUG) System.out.println("ret:"+ret);
    return ret;
  }

