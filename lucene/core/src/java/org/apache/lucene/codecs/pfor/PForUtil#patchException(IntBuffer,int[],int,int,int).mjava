  /**
   * Decode exception values base on the exception pointers in normal area,
   * and values in exception area.
   * As for current implementation, numInts is hardwired as 128, so the
   * tail of normal area is naturally aligned to 32 bits, and we don't need to
   * rewind intBuffer here.
   * However, the normal area may share a same int with exception area, 
   * when numFrameBits * numInts % 32 != 0,
   * In this case we should preprocess patch several heading exceptions, 
   * before calling this method.
   *
   * TODO: blockSize is hardewired to size==128 only
   */
  public static void patchException(IntBuffer intBuffer, int[] data, int excNum, int excFirstPos, int excBytes) {
    if (excFirstPos == -1) {
      return;
    }
    int curPos=excFirstPos;
    int i,j;

    if (excBytes == 1) { // each exception consumes 1 byte
      for (i=0; i+3<excNum; i+=4) {
        final int curInt = intBuffer.get();
        curPos = patch(data, curPos, (curInt) & MASK[8]);
        curPos = patch(data, curPos, (curInt >>> 8)  & MASK[8]);
        curPos = patch(data, curPos, (curInt >>> 16) & MASK[8]);
        curPos = patch(data, curPos, (curInt >>> 24) & MASK[8]);
      }
      if (i<excNum) {
        final int curInt = intBuffer.get();
        for (j=0; j<32 && i<excNum; j+=8,i++) {
          curPos = patch(data, curPos, (curInt >>> j) & MASK[8]);
        }
      }
    } else if (excBytes == 2) { // each exception consumes 2 bytes
      for (i=0; i+1<excNum; i+=2) {
        final int curInt = intBuffer.get();
        curPos = patch(data, curPos, (curInt) & MASK[16]);
        curPos = patch(data, curPos, (curInt >>> 16) & MASK[16]);
      }
      if (i<excNum) {
        final int curInt = intBuffer.get();
        curPos = patch(data, curPos, (curInt) & MASK[16]);
      }
    } else if (excBytes == 4) { // each exception consumes 4 bytes
      for (i=0; i<excNum; i++) {
        curPos = patch(data, curPos, intBuffer.get());
      }
    }
  }

