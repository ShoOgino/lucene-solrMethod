  @Override
  public void add(int docID, IndexableField value) throws IOException {
    assert docID >= 0;
    int ord = -1;
    int vSize = -1;
    switch (type) {
    case BYTES_FIXED_DEREF:
    case BYTES_FIXED_SORTED:
    case BYTES_FIXED_STRAIGHT:
      vSize = value.binaryValue().length;
      ord = hash.add(value.binaryValue());
      break;
    case BYTES_VAR_DEREF:
    case BYTES_VAR_SORTED:
    case BYTES_VAR_STRAIGHT:
      vSize = -1;
      ord = hash.add(value.binaryValue());
      break;
    case FIXED_INTS_16:
      vSize = 2;
      scratch.grow(2);
      DocValuesArraySource.copyShort(scratch, value.numericValue().shortValue());
      ord = hash.add(scratch);
      break;
    case FIXED_INTS_32:
      vSize = 4;
      scratch.grow(4);
      DocValuesArraySource.copyInt(scratch, value.numericValue().intValue());
      ord = hash.add(scratch);
      break;
    case FIXED_INTS_8:
      vSize = 1;
      scratch.grow(1); 
      scratch.bytes[scratch.offset] = value.numericValue().byteValue();
      scratch.length = 1;
      ord = hash.add(scratch);
      break;
    case FIXED_INTS_64:
      vSize = 8;
    case VAR_INTS:
      scratch.grow(8);
      DocValuesArraySource.copyLong(scratch, value.numericValue().longValue());
      ord = hash.add(scratch);
      break;
    case FLOAT_32:
      vSize = 4;
      scratch.grow(4);
      DocValuesArraySource.copyInt(scratch,
          Float.floatToRawIntBits(value.numericValue().floatValue()));
      ord = hash.add(scratch);
      break;
    case FLOAT_64:
      vSize = 8;
      scratch.grow(8);
      DocValuesArraySource.copyLong(scratch,
          Double.doubleToRawLongBits(value.numericValue().doubleValue()));
      ord = hash.add(scratch);
      break;

    }
    
    if (fixedSize == Integer.MIN_VALUE) {
      assert maxDocId == -1;
      fixedSize = vSize;
    } else {
      if (fixedSize != vSize) {
        throw new IllegalArgumentException("value size must be " + fixedSize + " but was: " + vSize);
      }
    }
    maxDocId = Math.max(docID, maxDocId);
    ords = grow(ords, docID);
    
    ords[docID] = (ord < 0 ? (-ord)-1 : ord) + 1;
  }

