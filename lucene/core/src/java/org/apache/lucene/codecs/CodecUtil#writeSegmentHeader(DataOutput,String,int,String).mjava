  /**
   * Writes a codec header for a per-segment, which records both a string to
   * identify the file, a version number, and the unique ID of the segment. 
   * This header can be parsed and validated with 
   * {@link #checkSegmentHeader(DataInput, String, int, int, String) checkSegmentHeader()}.
   * <p>
   * CodecSegmentHeader --&gt; CodecHeader,SegmentID
   * <ul>
   *    <li>CodecHeader --&gt; {@link #writeHeader}
   *    <li>SegmentID   --&gt; {@link DataOutput#writeString String}.
   *        Unique identifier for the segment.
   * </ul>
   * <p>
   * Note that the length of a segment header depends only upon the
   * name of the codec, so this length can be computed at any time
   * with {@link #headerLength(String)}.
   * 
   * @param out Output stream
   * @param codec String to identify this file. It should be simple ASCII, 
   *              less than 128 characters in length.
   * @param segmentID Unique identifier for the segment
   * @param version Version number
   * @throws IOException If there is an I/O error writing to the underlying medium.
   * @throws IllegalArgumentException If the codec name is not simple ASCII, or is more than 127 characters in length
   */
  // nocommit: fix javadocs, add segmentLength()
  public static void writeSegmentHeader(DataOutput out, String codec, int version, String segmentID) throws IOException {
    writeHeader(out, codec, version);
    // nocommit: improve encoding of this ID
    out.writeString(segmentID);
  }

