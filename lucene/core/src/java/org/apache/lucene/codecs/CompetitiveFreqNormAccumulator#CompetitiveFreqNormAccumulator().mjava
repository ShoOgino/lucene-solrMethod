  /** Sole constructor. */
  public CompetitiveFreqNormAccumulator() {
    maxFreqs = new int[256];
    Comparator<FreqAndNorm> comparator = new Comparator<CompetitiveFreqNormAccumulator.FreqAndNorm>() {
      @Override
      public int compare(FreqAndNorm o1, FreqAndNorm o2) {
        // greater freqs compare greater
        int cmp = Integer.compare(o1.freq, o2.freq);
        if (cmp == 0) {
          // greater norms compare lower
          cmp = Long.compareUnsigned(o2.norm, o1.norm);
        }
        return cmp;
      }
    };
    freqNormPairs = new TreeSet<>(comparator);
  }

