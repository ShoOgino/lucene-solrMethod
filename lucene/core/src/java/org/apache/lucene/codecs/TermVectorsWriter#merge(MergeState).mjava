  /** Merges in the term vectors from the readers in 
   *  <code>mergeState</code>. The default implementation skips
   *  over deleted documents, and uses {@link #startDocument(int)},
   *  {@link #startField(FieldInfo, int, boolean, boolean, boolean)}, 
   *  {@link #startTerm(BytesRef, int)}, {@link #addPosition(int, int, int, BytesRef)},
   *  and {@link #finish(FieldInfos, int)},
   *  returning the number of documents that were written.
   *  Implementations can override this method for more sophisticated
   *  merging (bulk-byte copying, etc). */
  public int merge(MergeState mergeState) throws IOException {
    int docCount = 0;
    int numReaders = mergeState.maxDocs.length;
    for (int i = 0; i < numReaders; i++) {
      int maxDoc = mergeState.maxDocs[i];
      Bits liveDocs = mergeState.liveDocs[i];
      TermVectorsReader termVectorsReader = mergeState.termVectorsReaders[i];
      if (termVectorsReader != null) {
        termVectorsReader.checkIntegrity();
      }

      for (int docID=0;docID<maxDoc;docID++) {
        if (liveDocs != null && !liveDocs.get(docID)) {
          // skip deleted docs
          continue;
        }
        // NOTE: it's very important to first assign to vectors then pass it to
        // termVectorsWriter.addAllDocVectors; see LUCENE-1282
        Fields vectors;
        if (termVectorsReader == null) {
          vectors = null;
        } else {
          vectors = termVectorsReader.get(docID);
        }
        addAllDocVectors(vectors, mergeState);
        docCount++;
        mergeState.checkAbort.work(300);
      }
    }
    finish(mergeState.mergeFieldInfos, docCount);
    return docCount;
  }

