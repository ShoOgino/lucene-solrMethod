  private SegmentInfo readSegmentInfo(String segmentName, Directory dir, int format, IndexInput input) throws IOException {
    // check that it is a format we can understand
    if (format > Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS) {
      throw new IndexFormatTooOldException(input, format,
                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);
    }
    if (format < Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {
      throw new IndexFormatTooNewException(input, format,
                                           Lucene3xSegmentInfosFormat.FORMAT_DIAGNOSTICS, Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE);
    }
    final String version;
    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {
      version = input.readString();
    } else {
      version = null;
    }

    // NOTE: we ignore this and use the incoming arg
    // instead, if it's non-null:
    final String name = input.readString();
    if (segmentName == null) {
      segmentName = name;
    }

    final int docCount = input.readInt();
    final long delGen = input.readLong();
    final int docStoreOffset = input.readInt();
    final String docStoreSegment;
    final boolean docStoreIsCompoundFile;
    if (docStoreOffset != -1) {
      docStoreSegment = input.readString();
      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;
    } else {
      docStoreSegment = name;
      docStoreIsCompoundFile = false;
    }

    // pre-4.0 indexes write a byte if there is a single norms file
    byte b = input.readByte();

    //System.out.println("version=" + version + " name=" + name + " docCount=" + docCount + " delGen=" + delGen + " dso=" + docStoreOffset + " dss=" + docStoreSegment + " dssCFs=" + docStoreIsCompoundFile + " b=" + b + " format=" + format);

    assert 1 == b : "expected 1 but was: "+ b + " format: " + format;
    final int numNormGen = input.readInt();
    final Map<Integer,Long> normGen;
    if (numNormGen == SegmentInfo.NO) {
      normGen = null;
    } else {
      normGen = new HashMap<Integer, Long>();
      for(int j=0;j<numNormGen;j++) {
        normGen.put(j, input.readLong());
      }
    }
    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;

    final int delCount = input.readInt();
    assert delCount <= docCount;

    final boolean hasProx = input.readByte() == 1;

    final Map<String,String> diagnostics = input.readStringStringMap();

    // nocommit unused...
    final int hasVectors;
    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {
      hasVectors = input.readByte();
    } else {
      hasVectors = -1;
    }

    final Set<String> files;
    if (format == Lucene3xSegmentInfosFormat.FORMAT_4X_UPGRADE) {
      files = input.readStringSet();
    } else {
      // Replicate logic from 3.x's SegmentInfo.files():
      files = new HashSet<String>();
      if (isCompoundFile) {
        files.add(IndexFileNames.segmentFileName(name, "", IndexFileNames.COMPOUND_FILE_EXTENSION));
      } else {
        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, "", "fnm"));
        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, "", "frq"));
        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, "", "prx"));
        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, "", "tis"));
        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, "", "tii"));
        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, "", "nrm"));
      }

      if (docStoreOffset != -1) {
        if (docStoreIsCompoundFile) {
          files.add(IndexFileNames.segmentFileName(docStoreSegment, "", "cfx"));
        } else {
          files.add(IndexFileNames.segmentFileName(docStoreSegment, "", "fdx"));
          files.add(IndexFileNames.segmentFileName(docStoreSegment, "", "fdt"));
          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, "", "tvx"));
          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, "", "tvf"));
          addIfExists(dir, files, IndexFileNames.segmentFileName(docStoreSegment, "", "tvd"));
        }
      } else if (!isCompoundFile) {
        files.add(IndexFileNames.segmentFileName(segmentName, "", "fdx"));
        files.add(IndexFileNames.segmentFileName(segmentName, "", "fdt"));
        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, "", "tvx"));
        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, "", "tvf"));
        addIfExists(dir, files, IndexFileNames.segmentFileName(segmentName, "", "tvd"));
      }

      if (normGen != null) {
        for(Map.Entry<Integer,Long> ent : normGen.entrySet()) {
          long gen = ent.getValue();
          if (gen >= SegmentInfo.YES) {
            // Definitely a separate norm file, with generation:
            files.add(IndexFileNames.fileNameFromGeneration(segmentName, "s" + ent.getKey(), gen));
          } else if (gen == SegmentInfo.NO) {
            // No seaprate norm
          } else {
            // nocommit -- i thought _X_N.sY files were pre-3.0...????
            assert false;
            /*
            System.out.println("FILES: " + Arrays.toString(dir.listAll()) + "; seg=" + segmentName);
            addIfExists(dir, files, IndexFileNames.fileNameFromGeneration(segmentName, "s" + ent.getKey(), gen));
            assert false: "gen=" + gen;
            */
          }
        }
      }
    }

    // nocommit we can use hasProx/hasVectors from the 3.x
    // si... if we can pass this to the other components...?

    SegmentInfo info = new SegmentInfo(dir, version, segmentName, docCount, docStoreOffset,
                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,
                                       delCount, null, diagnostics);
    info.setDelGen(delGen);
    info.setFiles(files);
    return info;
  }

