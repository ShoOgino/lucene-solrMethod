    /** Flush count terms starting at start "backwards", as a
     *  block. start is a negative offset from the end of the
     *  terms stack, ie bigger start means further back in
     *  the stack. */
    void flushTermsBlock(int start, int count) throws IOException {
      if (count == 0) {
        out.writeByte((byte) 0);
        return;
      }

      assert start <= pendingMetaData.size();
      assert count <= start;

      final int limit = pendingMetaData.size() - start + count;
      final int size = postingsWriter.longsSize();

      long[] lastLongs = new long[size];
      Arrays.fill(lastLongs, 0);
      for(int idx=limit-count; idx<limit; idx++) {
        PendingMetaData meta = pendingMetaData.get(idx);
        for (int pos = 0; pos < size; pos++) {
          assert meta.longs[pos] >= 0;
          bytesWriter3.writeVLong(meta.longs[pos] - lastLongs[pos]);
        }
        lastLongs = meta.longs;
        meta.bytesWriter.writeTo(bytesWriter3);
      }

      out.writeVInt((int) bytesWriter3.getFilePointer());
      bytesWriter3.writeTo(out);
      bytesWriter3.reset();

      // Remove the terms we just wrote:
      pendingMetaData.subList(limit-count, limit).clear();
    }

