    public void fromString(int ord, BytesRef ref, int offset) {
      switch (type) {
      case FIXED_INTS_16:
        assert shorts != null;
        shorts[ord] = Short.parseShort(readString(offset, ref));
        break;
      case FIXED_INTS_32:
        assert ints != null;
        ints[ord] = Integer.parseInt(readString(offset, ref));
        break;
      case FIXED_INTS_64:
      case VAR_INTS:
        assert longs != null;
        longs[ord] = Long.parseLong(readString(offset, ref));
        break;
      case FIXED_INTS_8:
        assert bytes != null;
        bytes[ord] = (byte) Integer.parseInt(readString(offset, ref));
        break;
      case FLOAT_32:
        assert floats != null;
        floats[ord] = Float.parseFloat(readString(offset, ref));
        break;
      case FLOAT_64:
        assert doubles != null;
        doubles[ord] = Double.parseDouble(readString(offset, ref));
        break;
      case BYTES_FIXED_DEREF:
      case BYTES_FIXED_SORTED:
      case BYTES_FIXED_STRAIGHT:
      case BYTES_VAR_DEREF:
      case BYTES_VAR_SORTED:
      case BYTES_VAR_STRAIGHT:
        scratch.bytes = ref.bytes;
        scratch.length = ref.length - offset;
        scratch.offset = ref.offset + offset;
        int key = hash.add(scratch);
        ints[ord] = key < 0 ? (-key) - 1 : key;
        break;
      }
    }

