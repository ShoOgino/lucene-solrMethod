  // dead simple impl: codec can optimize
  protected void mergeBinaryField(MergeState mergeState) throws IOException {
    // first compute fixedLength and maxLength of live ones to be merged.
    boolean fixedLength = true;
    int maxLength = -1;
    BytesRef bytes = new BytesRef();
    for (AtomicReader reader : mergeState.readers) {
      final int maxDoc = reader.maxDoc();
      final Bits liveDocs = reader.getLiveDocs();
      DocValues docValues = reader.docValues(mergeState.fieldInfo.name);
      final Source source;
      if (docValues == null) {
        source = DocValues.getDefaultSource(mergeState.fieldInfo.getDocValuesType());
      } else {
        source = docValues.getDirectSource();
      }
      for (int i = 0; i < maxDoc; i++) {
        if (liveDocs == null || liveDocs.get(i)) {
          source.getBytes(i, bytes);
          if (maxLength == -1) {
            maxLength = bytes.length;
          } else {
            fixedLength &= bytes.length == maxLength;
            maxLength = Math.max(bytes.length, maxLength);
          }
        }
        mergeState.checkAbort.work(300);
      }
    }
    // now we can merge
    assert maxLength >= 0; // could this happen (nothing to do?)
    BinaryDocValuesConsumer field = addBinaryField(mergeState.fieldInfo, fixedLength, maxLength);
    field.merge(mergeState);
  }

