  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, int missingCount) throws IOException {
    meta.writeVInt(count - missingCount);
    meta.writeByte(INDIRECT);
    meta.writeLong(data.getFilePointer());
    data.writeVInt(PackedInts.VERSION_CURRENT);
    data.writeVInt(BLOCK_SIZE);
    
    // write docs with value
    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);
    int doc = 0;
    for (Number n : values) {
      long v = n.longValue();
      if (v != 0) {
        writer.add(doc);
      }
      doc++;
    }
    writer.finish();
    
    // write actual values
    addNormsField(field, new Iterable<Number>() {
      @Override
      public Iterator<Number> iterator() {
        return new FilterIterator<Number,Number>(values.iterator()) {
          @Override
          protected boolean predicateFunction(Number value) {
            return value.longValue() != 0;
          }
        };
      }
    });
  }

