  /**
   * Creates a cache (jump table) for {@link IndexedDISI}.
   * If the cache has previously been created, the old cache is returned.
   * @param data   the slice to create a cache for.
   * @param offset same as the offset that will also be used for creating an {@link IndexedDISI}.
   * @param length same af the length that will also be used for creating an {@link IndexedDISI}.
   * @param name human readable designation, typically a field name. Used for debug, log and inspection.
   * @return a cache for the given slice+offset+length or null if not suitable for caching.
   */
  public IndexedDISICache getCache(IndexInput data, long offset, long length, String name) throws IOException {
    if (length < MIN_LENGTH_FOR_CACHING) {
      return null;
    }

    long key = offset + length;
    IndexedDISICache cache = disiPool.get(key);
    if (cache == null) {
      // TODO: Avoid overlapping builds of the same cache for performance reason
      cache = new IndexedDISICache(data.slice("docs", offset, length), name);
      disiPool.put(key, cache);
    }
    return cache;
  }

