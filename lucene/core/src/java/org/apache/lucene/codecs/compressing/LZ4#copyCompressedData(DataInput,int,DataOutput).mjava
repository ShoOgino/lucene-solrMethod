  /** Copy bytes from <code>in</code> to <code>out</code> where
   *  <code>in</code> is a LZ4-encoded stream. This method copies enough bytes
   *  so that <code>out</code> can be used later on to restore the first
   *  <code>length</code> bytes of the stream. This method always reads at
   *  least one byte from <code>in</code> so make sure not to call this method
   *  if <code>in</code> reached the end of the stream, even if
   *  <code>length=0</code>. */
  public static int copyCompressedData(DataInput in, int length, DataOutput out) throws IOException {
    int n = 0;
    do {
      // literals
      final byte token = in.readByte();
      out.writeByte(token);
      int literalLen = (token & 0xFF) >>> 4;
      if (literalLen == 0x0F) {
        byte len;
        while ((len = in.readByte()) == (byte) 0xFF) {
          literalLen += 0xFF;
          out.writeByte(len);
        }
        literalLen += len & 0xFF;
        out.writeByte(len);
      }
      out.copyBytes(in, literalLen);
      n += literalLen;
      if (n >= length) {
        break;
      }

      // matchs
      out.copyBytes(in, 2); // match dec
      int matchLen = token & 0x0F;
      if (matchLen == 0x0F) {
        byte len;
        while ((len = in.readByte()) == (byte) 0xFF) {
          matchLen += 0xFF;
          out.writeByte(len);
        }
        matchLen += len & 0xFF;
        out.writeByte(len);
      }
      matchLen += MIN_MATCH;
      n += matchLen;
    } while (n < length);
    return n;
  }

