  /** Add a new position & payload */
  @Override
  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {
    if (DEBUG) {
      System.out.println("FPW.addPosition pos=" + position + " posBufferUpto=" + posBufferUpto + (fieldHasPayloads ? " payloadByteUpto=" + payloadByteUpto: ""));
    }
    posDeltaBuffer[posBufferUpto] = position - lastPosition;
    if (fieldHasPayloads) {
      if (payload == null || payload.length == 0) {
        // no payload
        payloadLengthBuffer[posBufferUpto] = 0;
      } else {
        payloadLengthBuffer[posBufferUpto] = payload.length;
        if (payloadByteUpto + payload.length > payloadBytes.length) {
          payloadBytes = ArrayUtil.grow(payloadBytes, payloadByteUpto + payload.length);
        }
        System.arraycopy(payload.bytes, payload.offset, payloadBytes, payloadByteUpto, payload.length);
        payloadByteUpto += payload.length;
      }
    }

    if (fieldHasOffsets) {
      assert startOffset >= lastEndOffset;
      assert endOffset >= startOffset;
      offsetStartDeltaBuffer[posBufferUpto] = startOffset - lastEndOffset;
      offsetLengthBuffer[posBufferUpto] = endOffset - startOffset;
      lastEndOffset = endOffset;
    }
    
    posBufferUpto++;
    lastPosition = position;
    if (posBufferUpto == blockSize) {
      if (DEBUG) {
        System.out.println("  write pos bulk block @ fp=" + posOut.getFilePointer());
      }
      writeBlock(posDeltaLBuffer, posOut);

      if (fieldHasPayloads) {
        writeBlock(payloadLengthLBuffer, payOut);
        payOut.writeVInt(payloadByteUpto);
        payOut.writeBytes(payloadBytes, 0, payloadByteUpto);
        payloadByteUpto = 0;
      }
      if (fieldHasOffsets) {
        writeBlock(offsetStartDeltaLBuffer, payOut);
        writeBlock(offsetLengthLBuffer, payOut);
      }
      posBufferUpto = 0;
    }
  }

