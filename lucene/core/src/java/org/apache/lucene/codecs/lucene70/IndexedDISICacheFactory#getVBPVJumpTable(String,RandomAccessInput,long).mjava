  /**
   * Creates a cache (jump table) for variable bits per value numerics and returns it.
   * If the cache has previously been created, the old cache is returned.
   * @param name the name for the cache, typically the field name. Used as key for later retrieval.
   * @param slice the long values with varying bits per value.
   * @param valuesLength the length in bytes of the slice.
   * @return a jump table for the longs in the given slice or null if the structure is not suitable for caching.
   */
  VaryingBPVJumpTable getVBPVJumpTable(String name, RandomAccessInput slice, long valuesLength) throws IOException {
    VaryingBPVJumpTable jumpTable = vBPVPool.get(name);
    if (jumpTable == null) {
      // TODO: Avoid overlapping builds of the same jump table for performance reasons
      jumpTable = new VaryingBPVJumpTable(slice, name, valuesLength);
      vBPVPool.put(name, jumpTable);
    }
    return jumpTable;
  }

