  // encodes values as sparse array: keys[] and values[]
  // access is log(N) where N = keys.length (slow!)
  // so this is only appropriate as an exception table for patched, or when common value is 0 (wont be accessed by searching) 
  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, NormMap uniqueValues) throws IOException {
    int commonCount = uniqueValues.maxFreq();
    final long commonValue = uniqueValues.getDecodeTable()[uniqueValues.maxOrd()];
    
    meta.writeVInt(count - commonCount);
    meta.writeByte(INDIRECT);
    meta.writeLong(data.getFilePointer());
    
    // write docs with value
    writeDocsWithValue(values, commonValue);
    
    // write actual values
    writeNormsField(field, new Iterable<Number>() {
      @Override
      public Iterator<Number> iterator() {
        return new FilterIterator<Number,Number>(values.iterator()) {
          @Override
          protected boolean predicateFunction(Number value) {
            return value.longValue() != commonValue;
          }
        };
      }
    }, 1);
  }

