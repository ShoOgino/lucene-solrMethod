  // encodes only uncommon values in a sparse bitset
  // access is constant time, and the common case is predictable
  // exceptions nest either to CONST (if there are only 2 values), or INDIRECT (if there are > 2 values)
  private void addPatched(FieldInfo field, final Iterable<Number> values, int count, NormMap uniqueValues) throws IOException {
    final long decodeTable[] = uniqueValues.getDecodeTable();
    int commonCount = uniqueValues.maxFreq();
    final long commonValue = decodeTable[uniqueValues.maxOrd()];
    
    meta.writeVInt(count - commonCount);
    meta.writeByte(PATCHED);
    meta.writeLong(data.getFilePointer());
    
    // write docs with value
    writeDocsWithValue(values, commonValue);
    
    // write exceptions: only two cases make sense
    // bpv = 1 (folded into sparse bitset already)
    // bpv > 1 (add indirect exception table)
    meta.writeVInt(field.number);
    if (uniqueValues.size == 2) {
      // special case: implicit in bitset
      int otherOrd = uniqueValues.maxOrd() == 0 ? 1 : 0;
      addConstant(decodeTable[otherOrd]);
    } else {
      // exception table
      addIndirect(field, values, count, uniqueValues);
    }
  }

