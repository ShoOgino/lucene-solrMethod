  @Override
  public void addSortedSetField(FieldInfo field, Iterable<BytesRef> values, final Iterable<Number> docToOrdCount, final Iterable<Number> ords) throws IOException {
    meta.writeVInt(field.number);
    meta.writeByte(Lucene49DocValuesFormat.SORTED_SET);

    if (isSingleValued(docToOrdCount)) {
      meta.writeVInt(SORTED_SET_SINGLE_VALUED_SORTED);
      // The field is single-valued, we can encode it as SORTED
      addSortedField(field, values, new Iterable<Number>() {

        @Override
        public Iterator<Number> iterator() {
          final Iterator<Number> docToOrdCountIt = docToOrdCount.iterator();
          final Iterator<Number> ordsIt = ords.iterator();
          return new Iterator<Number>() {

            @Override
            public boolean hasNext() {
              assert ordsIt.hasNext() ? docToOrdCountIt.hasNext() : true;
              return docToOrdCountIt.hasNext();
            }

            @Override
            public Number next() {
              final Number ordCount = docToOrdCountIt.next();
              if (ordCount.longValue() == 0) {
                return MISSING_ORD;
              } else {
                assert ordCount.longValue() == 1;
                return ordsIt.next();
              }
            }

            @Override
            public void remove() {
              throw new UnsupportedOperationException();
            }

          };
        }

      });
      return;
    }

    meta.writeVInt(SORTED_SET_WITH_ADDRESSES);

    // write the ord -> byte[] as a binary field
    addTermsDict(field, values);

    // write the stream of ords as a numeric field
    // NOTE: we could return an iterator that delta-encodes these within a doc
    addNumericField(field, ords, false);

    // write the doc -> ord count as a absolute index to the stream
    meta.writeVInt(field.number);
    meta.writeByte(Lucene49DocValuesFormat.NUMERIC);
    meta.writeVInt(MONOTONIC_COMPRESSED);
    meta.writeLong(-1L);
    meta.writeLong(data.getFilePointer());
    meta.writeVLong(maxDoc);
    meta.writeVInt(PackedInts.VERSION_CURRENT);
    meta.writeVInt(BLOCK_SIZE);

    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);
    long addr = 0;
    writer.add(addr);
    for (Number v : docToOrdCount) {
      addr += v.longValue();
      writer.add(addr);
    }
    writer.finish();
    meta.writeLong(data.getFilePointer());
  }

