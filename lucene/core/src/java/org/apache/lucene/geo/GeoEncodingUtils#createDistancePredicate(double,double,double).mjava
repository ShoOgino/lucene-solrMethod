  /** Create a predicate that checks whether points are within a distance of a given point.
   *  It works by computing the bounding box around the circle that is defined
   *  by the given points/distance and splitting it into between 1024 and 4096
   *  smaller boxes (4096*0.75^2=2304 on average). Then for each sub box, it
   *  computes the relation between this box and the distance query. Finally at
   *  search time, it first computes the sub box that the point belongs to,
   *  most of the time, no distance computation will need to be performed since
   *  all points from the sub box will either be in or out of the circle.
   *  @lucene.internal */
  public static DistancePredicate createDistancePredicate(double lat, double lon, double radiusMeters) {
    final Rectangle boundingBox = Rectangle.fromPointDistance(lat, lon, radiusMeters);
    final int minLat = encodeLatitudeCeil(boundingBox.minLat);
    final int maxLat = encodeLatitude(boundingBox.maxLat);
    final int minLon = encodeLongitudeCeil(boundingBox.minLon);
    final int maxLon = encodeLongitude(boundingBox.maxLon);

    final int latShift, lonShift;
    final int latBase, lonBase;
    final int maxLatDelta, maxLonDelta;
    {
      long minLat2 = (long) minLat - Integer.MIN_VALUE;
      long maxLat2 = (long) maxLat - Integer.MIN_VALUE;
      latShift = computeShift(minLat2, maxLat2);
      latBase = (int) (minLat2 >>> latShift);
      maxLatDelta = (int) (maxLat2 >>> latShift) - latBase + 1;
      assert maxLatDelta > 0;
    }
    {
      long minLon2 = (long) minLon - Integer.MIN_VALUE;
      long maxLon2 = (long) maxLon - Integer.MIN_VALUE;
      if (boundingBox.crossesDateline()) {
        maxLon2 += 1L << 32; // wrap
      }
      lonShift = computeShift(minLon2, maxLon2);
      lonBase = (int) (minLon2 >>> lonShift);
      maxLonDelta = (int) (maxLon2 >>> lonShift) - lonBase + 1;
      assert maxLonDelta > 0;
    }

    final double axisLat = Rectangle.axisLat(lat, radiusMeters);
    final double distanceSortKey = GeoUtils.distanceQuerySortKey(radiusMeters);
    final byte[] relations = new byte[maxLatDelta * maxLonDelta];
    for (int i = 0; i < maxLatDelta; ++i) {
      for (int j = 0; j < maxLonDelta; ++j) {
        final int boxMinLat = ((latBase + i) << latShift) + Integer.MIN_VALUE;
        final int boxMinLon = ((lonBase + j) << lonShift) + Integer.MIN_VALUE;
        final int boxMaxLat = boxMinLat + (1 << latShift) - 1;
        final int boxMaxLon = boxMinLon + (1 << lonShift) - 1;

        relations[i * maxLonDelta + j] = (byte) GeoUtils.relate(
            decodeLatitude(boxMinLat), decodeLatitude(boxMaxLat),
            decodeLongitude(boxMinLon), decodeLongitude(boxMaxLon),
            lat, lon, distanceSortKey, axisLat).ordinal();
      }
    }

    return new DistancePredicate(
        latShift, lonShift,
        latBase, lonBase,
        maxLatDelta, maxLonDelta,
        relations,
        lat, lon, distanceSortKey);
  }

