    /** Returns true if the box crosses any edge in this edge subtree */
    boolean crossesBox(double minLat, double maxLat, double minLon, double maxLon, boolean includeBoundary) {
      // we just have to cross one edge to answer the question, so we descend the tree and return when we do.
      if (minLat <= max) {
        // we compute line intersections of every polygon edge with every box line.
        // if we find one, return true.
        // for each box line (AB):
        //   for each poly line (CD):
        //     intersects = orient(C,D,A) * orient(C,D,B) <= 0 && orient(A,B,C) * orient(A,B,D) <= 0
        double cy = lat1;
        double dy = lat2;
        double cx = lon1;
        double dx = lon2;

        // optimization: see if either end of the line segment is contained by the rectangle
        if (Rectangle.containsPoint(cy, cx, minLat, maxLat, minLon, maxLon) ||
            Rectangle.containsPoint(dy, dx, minLat, maxLat, minLon, maxLon)) {
          return true;
        }

        // optimization: see if the rectangle is outside of the "bounding box" of the polyline at all
        // if not, don't waste our time trying more complicated stuff
        boolean outside = (cy < minLat && dy < minLat) ||
            (cy > maxLat && dy > maxLat) ||
            (cx < minLon && dx < minLon) ||
            (cx > maxLon && dx > maxLon);

        if (outside == false) {
          if (includeBoundary == true &&
              lineCrossesLineWithBoundary(cx, cy, dx, dy, minLon, minLat, maxLon, minLat) ||
              lineCrossesLineWithBoundary(cx, cy, dx, dy, maxLon, minLat, maxLon, maxLat) ||
              lineCrossesLineWithBoundary(cx, cy, dx, dy, maxLon, maxLat, maxLon, minLat) ||
              lineCrossesLineWithBoundary(cx, cy, dx, dy, minLon, maxLat, minLon, minLat)) {
            // include boundaries: ensures box edges that terminate on the polygon are included
            return true;
          } else if (lineCrossesLine(cx, cy, dx, dy, minLon, minLat, maxLon, minLat) ||
              lineCrossesLine(cx, cy, dx, dy, maxLon, minLat, maxLon, maxLat) ||
              lineCrossesLine(cx, cy, dx, dy, maxLon, maxLat, maxLon, minLat) ||
              lineCrossesLine(cx, cy, dx, dy, minLon, maxLat, minLon, minLat)) {
            return true;
          }
        }

        if (left != null && left.crossesBox(minLat, maxLat, minLon, maxLon, includeBoundary)) {
          return true;
        }

        if (right != null && maxLat >= low && right.crossesBox(minLat, maxLat, minLon, maxLon, includeBoundary)) {
          return true;
        }
      }
      return false;
    }

