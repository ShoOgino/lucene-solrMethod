  /** Returns true if the point is contained within this polygon */
  public boolean contains(double latitude, double longitude) {
    // check bounding box
    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {
      return false;
    }
    /*
     * simple even-odd point in polygon computation
     *    1.  Determine if point is contained in the longitudinal range
     *    2.  Determine whether point crosses the edge by computing the latitudinal delta
     *        between the end-point of a parallel vector (originating at the point) and the
     *        y-component of the edge sink
     *
     * NOTE: Requires polygon point (x,y) order either clockwise or counter-clockwise
     */
    boolean inPoly = false;
    /*
     * Note: This is using a euclidean coordinate system which could result in
     * upwards of 110KM error at the equator.
     * TODO convert coordinates to cylindrical projection (e.g. mercator)
     */
    for (int i = 1; i < polyLats.length; i++) {
      if (polyLons[i] <= longitude && polyLons[i-1] >= longitude || polyLons[i-1] <= longitude && polyLons[i] >= longitude) {
        if (polyLats[i] + (longitude - polyLons[i]) / (polyLons[i-1] - polyLons[i]) * (polyLats[i-1] - polyLats[i]) <= latitude) {
          inPoly = !inPoly;
        }
      }
    }
    if (inPoly) {
      for (Polygon hole : holes) {
        if (hole.contains(latitude, longitude)) {
          return false;
        }
      }
      return true;
    } else {
      return false;
    }
  }

