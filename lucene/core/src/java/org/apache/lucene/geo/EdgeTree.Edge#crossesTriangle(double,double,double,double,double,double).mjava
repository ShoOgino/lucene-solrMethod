    /** Returns true if the triangle crosses any edge in this edge subtree */
    boolean crossesTriangle(double ax, double ay, double bx, double by, double cx, double cy) {
      // compute bounding box of triangle
      double minLat = StrictMath.min(StrictMath.min(ay, by), cy);
      double minLon = StrictMath.min(StrictMath.min(ax, bx), cx);
      double maxLat = StrictMath.max(StrictMath.max(ay, by), cy);
      double maxLon = StrictMath.max(StrictMath.max(ax, bx), cx);

      if (minLat <= max) {
        double dy = lat1;
        double ey = lat2;
        double dx = lon1;
        double ex = lon2;

        // optimization: see if the rectangle is outside of the "bounding box" of the polyline at all
        // if not, don't waste our time trying more complicated stuff
        boolean outside = (dy < minLat && ey < minLat) ||
            (dy > maxLat && ey > maxLat) ||
            (dx < minLon && ex < minLon) ||
            (dx > maxLon && ex > maxLon);

        if (dateline == false && outside == false) {
          // does triangle's first edge intersect polyline?
          // ax, ay -> bx, by
          if (lineCrossesLine(ax, ay, bx, by, dx, dy, ex, ey)) {
            return true;
          }

          // does triangle's second edge intersect polyline?
          // bx, by -> cx, cy
          if (lineCrossesLine(bx, by, cx, cy, dx, dy, ex, ey)) {
            return true;
          }

          // does triangle's third edge intersect polyline?
          // cx, cy -> ax, ay
          if (lineCrossesLine(cx, cy, ax, ay, dx, dy, ex, ey)) {
            return true;
          }
        }

        if (left != null) {
          if (left.crossesTriangle(ax, ay, bx, by, cx, cy)) {
            return true;
          }
        }

        if (right != null && maxLat >= low) {
          if (right.crossesTriangle(ax, ay, bx, by, cx, cy)) {
            return true;
          }
        }
      }
      return false;
    }

