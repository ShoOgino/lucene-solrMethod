    /** Returns true if the triangle crosses any edge in this edge subtree */
    boolean crossesTriangle(double ax, double ay, double bx, double by, double cx, double cy) {
      // compute min lat of triangle bounding box
      double triMinLat = StrictMath.min(StrictMath.min(ay, by), cy);
      if (triMinLat <= max) {
        double dy = lat1;
        double ey = lat2;
        double dx = lon1;
        double ex = lon2;

        // compute remaining bounding box of triangle
        double triMinLon = StrictMath.min(StrictMath.min(ax, bx), cx);
        double triMaxLat = StrictMath.max(StrictMath.max(ay, by), cy);
        double triMaxLon = StrictMath.max(StrictMath.max(ax, bx), cx);

        // optimization: see if the rectangle is outside of the "bounding box" of the polyline at all
        // if not, don't waste our time trying more complicated stuff
        boolean outside = (dy < triMinLat && ey < triMinLat) ||
            (dy > triMaxLat && ey > triMaxLat) ||
            (dx < triMinLon && ex < triMinLon) ||
            (dx > triMaxLon && ex > triMaxLon);

        if (outside == false) {
          if (lineCrossesLine(dx, dy, ex, ey, ax, ay, bx, by) ||
              lineCrossesLine(dx, dy, ex, ey, bx, by, cx, cy) ||
              lineCrossesLine(dx, dy, ex, ey, cx, cy, ax, ay)) {
            return true;
          }
        }

        if (left != null && left.crossesTriangle(ax, ay, bx, by, cx, cy)) {
          return true;
        }

        if (right != null && triMaxLat >= low && right.crossesTriangle(ax, ay, bx, by, cx, cy)) {
          return true;
        }
      }
      return false;
    }

