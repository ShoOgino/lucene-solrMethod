    /**
     * Publishes the flushed segment, segment private deletes (if any) and its
     * associated global delete (if present) to IndexWriter.  The actual
     * publishing operation is synced on IW -> BDS so that the {@link SegmentInfo}'s
     * delete generation is always GlobalPacket_deleteGeneration + 1
     */
    protected final void publishFlushedSegment(IndexWriter indexWriter, FlushedSegment newSegment, FrozenBufferedDeletes globalPacket)
        throws IOException {
      assert newSegment != null;
      assert newSegment.segmentInfo != null;
      final FrozenBufferedDeletes segmentDeletes = newSegment.segmentDeletes;
      //System.out.println("FLUSH: " + newSegment.segmentInfo.info.name);
      if (indexWriter.infoStream.isEnabled("DW")) {
          indexWriter.infoStream.message("DW", "publishFlushedSegment seg-private deletes=" + segmentDeletes);  
      }
      
      if (segmentDeletes != null && indexWriter.infoStream.isEnabled("DW")) {
          indexWriter.infoStream.message("DW", "flush: push buffered seg private deletes: " + segmentDeletes);
      }
      // now publish!
      indexWriter.publishFlushedSegment(newSegment.segmentInfo, segmentDeletes, globalPacket);
    }

