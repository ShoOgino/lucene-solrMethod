  /**
   * Test field norms.
   */
  private Status.FieldNormStatus testFieldNorms(FieldInfos fieldInfos, SegmentReader reader) {
    final Status.FieldNormStatus status = new Status.FieldNormStatus();

    try {
      // Test Field Norms
      if (infoStream != null) {
        infoStream.print("    test: field norms.........");
      }
      DocValues dv;
      for (FieldInfo info : fieldInfos) {
        if (reader.hasNorms(info.name)) {
          dv = reader.normValues(info.name);
          assert dv != null;
          if (dv.getSource().hasArray()) {
            Object array = dv.getSource().getArray();
            if (Array.getLength(array) != reader.maxDoc()) {
              throw new RuntimeException("norms for field: " + info.name + " are of the wrong size");
            }
          }
          if (!info.isIndexed || info.omitNorms) {
            throw new RuntimeException("field: " + info.name + " should omit norms but has them!");
          }
          ++status.totFields;
        } else {
          if (reader.normValues(info.name) != null) {
            throw new RuntimeException("field: " + info.name + " should omit norms but has them!");
          }
          if (info.normsPresent()) {
            throw new RuntimeException("field: " + info.name + " should have norms but omits them!");
          }
        }
      }

      msg("OK [" + status.totFields + " fields]");
    } catch (Throwable e) {
      msg("ERROR [" + String.valueOf(e.getMessage()) + "]");
      status.error = e;
      if (infoStream != null) {
        e.printStackTrace(infoStream);
      }
    }

    return status;
  }

