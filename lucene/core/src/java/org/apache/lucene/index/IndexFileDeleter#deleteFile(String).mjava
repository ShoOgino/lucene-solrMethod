  /** Returns true if the delete succeeded. Otherwise, the fileName is
   *  added to the deletable set so we will retry the delete later, and
   *  we return false. */
  private boolean deleteFile(String fileName) {
    assert locked();
    ensureOpen();
    try {
      if (infoStream.isEnabled("IFD")) {
        infoStream.message("IFD", "delete \"" + fileName + "\"");
      }
      directory.deleteFile(fileName);
      deletable.remove(fileName);
      return true;
    } catch (IOException e) {  // if delete fails

      // IndexWriter should only ask us to delete files it knows it wrote, so if we hit this, something is wrong!
      assert e instanceof NoSuchFileException == false: "file=" + fileName;
      assert e instanceof FileNotFoundException == false: "file=" + fileName;

      // Some operating systems (e.g. Windows) don't
      // permit a file to be deleted while it is opened
      // for read (e.g. by another process or thread). So
      // we assume that when a delete fails it is because
      // the file is open in another process, and queue
      // the file for subsequent deletion.

      if (infoStream.isEnabled("IFD")) {
        infoStream.message("IFD", "unable to remove file \"" + fileName + "\": " + e.toString() + "; Will re-try later.");
      }
      deletable.add(fileName);
      return false;
    }
  }

