  /** Create new SegmentReader sharing core from a previous
   *  SegmentReader and using the provided in-memory
   *  liveDocs.  Used by IndexWriter to provide a new NRT
   *  reader */
  SegmentReader(SegmentInfoPerCommit si, SegmentReader sr, Bits liveDocs, int numDocs) throws IOException {
    this.si = si;
    this.liveDocs = liveDocs;
    this.numDocs = numDocs;
    this.core = sr.core;
    core.incRef();
    
//    System.out.println("[" + Thread.currentThread().getName() + "] SR.init: sharing reader: " + sr + " for gens=" + sr.genDVProducers.keySet());
    
    // increment refCount of DocValuesProducers that are used by this reader
    boolean success = false;
    try {
      final Codec codec = si.info.getCodec();
      if (si.getFieldInfosGen() == -1) {
        fieldInfos = sr.fieldInfos;
      } else {
        fieldInfos = readFieldInfos(si);
      }
      
      if (fieldInfos.hasDocValues()) {
        final Directory dir = core.cfsReader != null ? core.cfsReader : si.info.dir;
        
        final DocValuesFormat dvFormat = codec.docValuesFormat();
        final Map<Long,List<FieldInfo>> genInfos = getGenInfos(si);
        
        for (Entry<Long,List<FieldInfo>> e : genInfos.entrySet()) {
          Long gen = e.getKey();
          List<FieldInfo> infos = e.getValue();
          RefCount<DocValuesProducer> dvp = genDVProducers.get(gen);
          if (dvp == null) {
            // check if this DVP gen is used by the given reader
            dvp = sr.genDVProducers.get(gen);
            if (dvp != null) {
              // gen used by given reader, incRef its DVP
              dvp.incRef();
//              System.out.println("[" + Thread.currentThread().getName() + "] SR.init: sharing DVP for gen=" + gen + " refCount=" + dvp.getRefCount());
            } else {
              // this gen is not used by given reader, initialize a new one
              dvp = newDocValuesProducer(si, IOContext.READ, dir, dvFormat, gen, infos);
//              System.out.println("[" + Thread.currentThread().getName() + "] SR.init: new DVP for gen=" + gen + " refCount=" + dvp.getRefCount());
            }
            assert dvp != null;
            genDVProducers.put(gen, dvp);
          }
          for (FieldInfo fi : infos) {
            dvProducers.put(fi.name, dvp.get());
          }
        }
      }
      success = true;
    } finally {
      if (!success) {
        doClose();
      }
    }
  }

