  private void validateIndexSortDVType(Sort indexSort, String fieldName, DocValuesType dvType) {
    for (SortField sortField : indexSort.getSort()) {
      if (sortField.getField().equals(fieldName)) {
        switch (dvType) {
          case NUMERIC:
            if (sortField.getType().equals(SortField.Type.INT) == false &&
                  sortField.getType().equals(SortField.Type.LONG) == false &&
                  sortField.getType().equals(SortField.Type.FLOAT) == false &&
                  sortField.getType().equals(SortField.Type.DOUBLE) == false) {
              throw new IllegalArgumentException("invalid doc value type:" + dvType + " for sortField:" + sortField);
            }
            break;

          case BINARY:
            throw new IllegalArgumentException("invalid doc value type:" + dvType + " for sortField:" + sortField);

          case SORTED:
            if (sortField.getType().equals(SortField.Type.STRING) == false) {
              throw new IllegalArgumentException("invalid doc value type:" + dvType + " for sortField:" + sortField);
            }
            break;

          case SORTED_NUMERIC:
            if (sortField instanceof SortedNumericSortField == false) {
              throw new IllegalArgumentException("invalid doc value type:" + dvType + " for sortField:" + sortField);
            }
            break;

          case SORTED_SET:
            if (sortField instanceof SortedSetSortField == false) {
              throw new IllegalArgumentException("invalid doc value type:" + dvType + " for sortField:" + sortField);
            }
            break;

          default:
            throw new IllegalArgumentException("invalid doc value type:" + dvType + " for sortField:" + sortField);
        }
        break;
      }
    }
  }

