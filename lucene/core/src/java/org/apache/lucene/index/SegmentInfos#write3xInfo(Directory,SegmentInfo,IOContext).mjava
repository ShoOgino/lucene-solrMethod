  @Deprecated
  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {

    // NOTE: this is NOT how 3.x is really written...
    String fileName = IndexFileNames.segmentFileName(si.name, "", Lucene3xSegmentInfoFormat.SI_EXTENSION);
    si.getFiles().add(fileName);

    //System.out.println("UPGRADE write " + fileName);
    boolean success = false;
    IndexOutput output = dir.createOutput(fileName, context);
    try {
      // we are about to write this SI in 3.x format, dropping all codec information, etc.
      // so it had better be a 3.x segment or you will get very confusing errors later.
      assert si.getCodec() instanceof Lucene3xCodec : "broken test, trying to mix preflex with other codecs";
      assert si.getDelCount() <= si.docCount: "delCount=" + si.getDelCount() + " docCount=" + si.docCount + " segment=" + si.name;
      // Write the Lucene version that created this segment, since 3.1
      output.writeString(si.getVersion());
      output.writeString(si.name);
      output.writeInt(si.docCount);
      output.writeLong(si.getDelGen());

      output.writeInt(si.getDocStoreOffset());
      if (si.getDocStoreOffset() != -1) {
        output.writeString(si.getDocStoreSegment());
        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));
      }
      // pre-4.0 indexes write a byte if there is a single norms file
      output.writeByte((byte) 1);

      Map<Integer,Long> normGen = si.getNormGen();
      if (normGen == null) {
        output.writeInt(SegmentInfo.NO);
      } else {
        output.writeInt(normGen.size());
        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {
          output.writeLong(entry.getValue());
        }
      }

      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));
      output.writeInt(si.getDelCount());
      // hasProx (lie):
      output.writeByte((byte) 1);
      output.writeStringStringMap(si.getDiagnostics());
      // hasVectors (lie):
      output.writeByte((byte) 1);
      output.writeStringSet(si.getFiles());

      success = true;
    } finally {
      if (!success) {
        IOUtils.closeWhileHandlingException(output);
        try {
          si.dir.deleteFile(fileName);
        } catch (Throwable t) {
          // Suppress so we keep throwing the original exception
        }
      } else {
        output.close();
      }
    }

    return fileName;
  }

