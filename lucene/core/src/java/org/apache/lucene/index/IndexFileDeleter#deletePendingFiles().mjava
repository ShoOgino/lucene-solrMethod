  public void deletePendingFiles() {
    assert locked();

    // Clone the set because it will change as we iterate:
    List<String> toDelete = new ArrayList<>(deletable);
    
    // First pass: delete any segments_N files.  We do these first to be certain stale commit points are removed
    // before we remove any files they reference.  If any delete of segments_N fails, we leave all other files
    // undeleted so index is never in a corrupt state:
    for (String fileName : toDelete) {
      RefCount rc = refCounts.get(fileName);
      if (rc != null && rc.count > 0) {
        // LUCENE-5904: should never happen!  This means we are about to pending-delete a referenced index file
        throw new IllegalStateException("file \"" + fileName + "\" is in pending delete set but has non-zero refCount=" + rc.count);
      } else if (fileName.startsWith(IndexFileNames.SEGMENTS)) {
        if (deleteFile(fileName) == false) {
          if (infoStream.isEnabled("IFD")) {
            infoStream.message("IFD", "failed to remove commit point \"" + fileName + "\"; skipping deletion of all other pending files");
          }
          return;
        }
      }
    }

    // Only delete other files if we were able to remove the segments_N files; this way we never
    // leave a corrupt commit in the index even in the presense of virus checkers:
    for(String fileName : toDelete) {
      if (fileName.startsWith(IndexFileNames.SEGMENTS) == false) {
        deleteFile(fileName);
      }
    }
  }

