  @Override
  public void flush(Map<String,InvertedDocEndConsumerPerField> fieldsToFlush, SegmentWriteState state) throws IOException {
    boolean success = false;
    SimpleDVConsumer normsConsumer = null;
    boolean anythingFlushed = false;
    try {
      if (state.fieldInfos.hasNorms()) {
        SimpleNormsFormat normsFormat = state.segmentInfo.getCodec().simpleNormsFormat();

        // nocommit change this to assert normsFormat != null
        if (normsFormat != null) {
          normsConsumer = normsFormat.normsConsumer(state);
        }

        for (FieldInfo fi : state.fieldInfos) {
          final NormsConsumerPerField toWrite = (NormsConsumerPerField) fieldsToFlush.get(fi.name);
          // we must check the final value of omitNorms for the fieldinfo, it could have 
          // changed for this field since the first time we added it.
          if (!fi.omitsNorms()) {
            if (toWrite != null && toWrite.initialized()) {
              anythingFlushed = true;
              final Type type = toWrite.flush(state, normsConsumer);
              assert fi.getNormType() == type;
            } else if (fi.isIndexed()) {
              anythingFlushed = true;
              assert fi.getNormType() == null: "got " + fi.getNormType() + "; field=" + fi.name;
            }
          }
        }
        if (normsConsumer != null) {
          
        }
      } 
      
      success = true;
      if (!anythingFlushed && consumer != null) {
        consumer.abort();
      }
    } finally {
      if (success) {
        IOUtils.close(consumer, normsConsumer);
      } else {
        IOUtils.closeWhileHandlingException(consumer, normsConsumer);
      }
    }
  }

