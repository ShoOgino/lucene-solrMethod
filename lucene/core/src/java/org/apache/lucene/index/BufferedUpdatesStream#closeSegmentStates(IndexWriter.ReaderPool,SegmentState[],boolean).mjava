  /** Close segment states previously opened with openSegmentStates. */
  public ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success) throws IOException {
    List<SegmentCommitInfo> allDeleted = null;
    long totDelCount = 0;
    final List<SegmentState> segmentStates = Arrays.asList(segStates);
    for (SegmentState segState : segmentStates) {
      if (success) {
        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;
        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();
        assert fullDelCount <= segState.rld.info.info.maxDoc();
        if (fullDelCount == segState.rld.info.info.maxDoc()) {
          if (allDeleted == null) {
            allDeleted = new ArrayList<>();
          }
          allDeleted.add(segState.reader.getSegmentInfo());
        }
      }
    }
    IOUtils.applyToAll(segmentStates, s -> s.finish(pool));
    if (infoStream.isEnabled("BD")) {
      infoStream.message("BD", "closeSegmentStates: " + totDelCount + " new deleted documents; pool " + updates.size() + " packets; bytesUsed=" + pool.ramBytesUsed());
    }

    return new ApplyDeletesResult(totDelCount > 0, allDeleted);      
  }

