  @Override
  public void processDocument() throws IOException {

    // How many indexed field names we've seen (collapses
    // multiple field instances by the same name):
    int fieldCount = 0;

    long fieldGen = nextFieldGen++;

    // NOTE: we need two passes here, in case there are
    // multi-valued fields, because we must process all
    // instances of a given field at once, since the
    // analyzer is free to reuse TokenStream across fields
    // (i.e., we cannot have more than one TokenStream
    // running "at once"):

    termsHash.startDocument();

    // Invert indexed fields:
    try {
      for (IndexableField field : docState.doc.indexableFields()) {
        IndexableFieldType fieldType = field.fieldType();
        PerField fp = getOrAddField(field.name(), fieldType, true);
        boolean first = fp.fieldGen != fieldGen;
        fp.invert(field, first);

        if (first) {
          fields[fieldCount++] = fp;
          fp.fieldGen = fieldGen;
        }
      }
    } finally {
      // Finish each field name seen in the document:
      for (int i=0;i<fieldCount;i++) {
        fields[i].finish();
      }
    }

    boolean success = false;
    try {
      termsHash.finishDocument();
      success = true;
    } finally {
      if (success == false) {
        // Must abort, on the possibility that on-disk term
        // vectors are now corrupt:
        docWriter.setAborting();
      }
    }

    // Add stored fields:
    // TODO: if these hit exc today ->>> corrumption!
    fillStoredFields(docState.docID);
    startStoredFields();

    // TODO: clean up this loop, it's complicated because dv exceptions are non-aborting,
    // but storedfields are. Its also bogus that docvalues are treated as stored fields...
    for (StorableField field : docState.doc.storableFields()) {
      final String fieldName = field.name();
      IndexableFieldType fieldType = field.fieldType();
      PerField fp = null;
      
      success = false;
      try {
        // TODO: make this non-aborting and change the test to confirm that!!!
        verifyFieldType(fieldName, fieldType);
        
        fp = getOrAddField(fieldName, fieldType, false);
        if (fieldType.stored()) {
          storedFieldsWriter.writeField(fp.fieldInfo, field);
        }
        success = true;
      } finally {
        if (!success) {
          docWriter.setAborting();
        }
      }
      
      success = false;
      try {
        DocValuesType dvType = fieldType.docValueType();
        if (dvType != null) {
          indexDocValue(fp, dvType, field);
        }
        success = true;
      } finally {
        if (!success) {
          // dv failed: so just try to bail on the current doc by calling finishDocument()...
          finishStoredFields();
        }
      }
    }

    finishStoredFields();
  }

