  /** Returns a single {@link InvertedFields} instance for this
   *  reader, merging fields/terms/docs/positions on the
   *  fly.  This method will return null if the reader 
   *  has no postings.
   *
   *  <p><b>NOTE</b>: this is a slow way to access postings.
   *  It's better to get the sub-readers (using {@link
   *  Gather}) and iterate through them
   *  yourself. */
  public static InvertedFields getFields(IndexReader r) throws IOException {
    if (r instanceof AtomicReader) {
      // already an atomic reader
      return ((AtomicReader) r).fields();
    }
    assert r instanceof CompositeReader;
    final IndexReader[] subs = ((CompositeReader) r).getSequentialSubReaders();
    if (subs.length == 0) {
      // no fields
      return null;
    } else {
      final List<InvertedFields> fields = new ArrayList<InvertedFields>();
      final List<ReaderUtil.Slice> slices = new ArrayList<ReaderUtil.Slice>();

      new ReaderUtil.Gather(r) {
        @Override
        protected void add(int base, AtomicReader r) throws IOException {
          final InvertedFields f = r.fields();
          if (f != null) {
            fields.add(f);
            slices.add(new ReaderUtil.Slice(base, r.maxDoc(), fields.size()-1));
          }
        }
      }.run();

      if (fields.isEmpty()) {
        return null;
      } else if (fields.size() == 1) {
        return fields.get(0);
      } else {
        return new MultiFields(fields.toArray(InvertedFields.EMPTY_ARRAY),
                                       slices.toArray(ReaderUtil.Slice.EMPTY_ARRAY));
      }
    }
  }

