  /**
   * Snapshots the last commit and returns it. Once a commit is 'snapshotted,' it is protected
   * from deletion (as long as this {@link IndexDeletionPolicy} is used). The
   * snapshot can be removed by calling {@link #release(IndexCommit)} followed
   * by a call to {@link IndexWriter#deleteUnusedFiles()}.
   *
   * <p>
   * <b>NOTE:</b> while the snapshot is held, the files it references will not
   * be deleted, which will consume additional disk space in your index. If you
   * take a snapshot at a particularly bad time (say just before you call
   * forceMerge) then in the worst case this could consume an extra 1X of your
   * total index size, until you release the snapshot.
   * 
   * @throws IllegalStateException
   *           if this index does not have any commits yet
   * @return the {@link IndexCommit} that was snapshotted.
   */
  public synchronized IndexCommit snapshot() throws IOException {
    if (lastCommit == null) {
      // No commit yet, eg this is a new IndexWriter:
      throw new IllegalStateException("No index commit to snapshot");
    }

    long gen = lastCommit.getGeneration();

    Integer refCount = refCounts.get(gen);
    int refCountInt;
    if (refCount == null) {
      indexCommits.put(gen, lastCommit);
      refCountInt = 0;
    } else {
      refCountInt = refCount.intValue();
    }

    refCounts.put(gen, refCountInt+1);

    return lastCommit;
  }

