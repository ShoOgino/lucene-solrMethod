  /**
   * Returns a new {@link ThreadState} iff any new state is available otherwise
   * <code>null</code>.
   * <p>
   * NOTE: the returned {@link ThreadState} is already locked iff non-
   * <code>null</code>.
   * 
   * @return a new {@link ThreadState} iff any new state is available otherwise
   *         <code>null</code>
   */
  private synchronized ThreadState newThreadState() {
    assert numThreadStatesActive <= threadStates.size();

    if (numThreadStatesActive == threadStates.size()) {
      threadStates.add(new ThreadState(null));
    } 

    ThreadState threadState = threadStates.get(numThreadStatesActive);
    threadState.lock(); // lock so nobody else will get this ThreadState
    boolean unlock = true;
    try {
      if (threadState.isActive()) {
        // unreleased thread states are deactivated during DW#close()
        numThreadStatesActive++; // increment will publish the ThreadState
        //System.out.println("activeCount=" + numThreadStatesActive);
        assert threadState.dwpt == null;
        unlock = false;
        return threadState;
      }
      // we are closed: unlock since the threadstate is not active anymore
      assert assertUnreleasedThreadStatesInactive();
      throw new AlreadyClosedException("this IndexWriter is closed");
    } finally {
      if (unlock) {
        // in any case make sure we unlock if we fail 
        threadState.unlock();
      }
    }
  }

