  /**
   * Identifies merges that we want to execute (synchronously) on commit. By default, do not synchronously merge on commit.
   *
   * Any merges returned here will make {@link IndexWriter#commit()} or {@link IndexWriter#prepareCommit()} block until
   * the merges complete or until {@link IndexWriterConfig#getMaxCommitMergeWaitSeconds()} have elapsed. This may be
   * used to merge small segments that have just been flushed as part of the commit, reducing the number of segments in
   * the commit. If a merge does not complete in the allotted time, it will continue to execute, but will not be reflected
   * in the commit.
   *
   * If a {@link OneMerge} in the returned {@link MergeSpecification} includes a segment already included in a registered
   * merge, then {@link IndexWriter#commit()} or {@link IndexWriter#prepareCommit()} will throw a {@link IllegalStateException}.
   * Use {@link MergeContext#getMergingSegments()} to determine which segments are currently registered to merge.
   *
   * @param mergeTrigger the event that triggered the merge (COMMIT or FULL_FLUSH).
   * @param segmentInfos the total set of segments in the index (while preparing the commit)
   * @param mergeContext the MergeContext to find the merges on, which should be used to determine which segments are
 *                     already in a registered merge (see {@link MergeContext#getMergingSegments()}).
   */
  public MergeSpecification findFullFlushMerges(MergeTrigger mergeTrigger, SegmentInfos segmentInfos, MergeContext mergeContext) throws IOException {
    return null;
  }

