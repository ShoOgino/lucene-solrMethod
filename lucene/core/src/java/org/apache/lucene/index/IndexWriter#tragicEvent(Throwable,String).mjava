  void tragicEvent(Throwable tragedy, String location) throws IOException {

    // unbox our internal AbortingException
    if (tragedy instanceof AbortingException) {
      tragedy = tragedy.getCause();
    }

    // This is not supposed to be tragic: IW is supposed to catch this and
    // ignore, because it means we asked the merge to abort:
    assert tragedy instanceof MergePolicy.MergeAbortedException == false;

    // We cannot hold IW's lock here else it can lead to deadlock:
    assert Thread.holdsLock(this) == false;

    // How can it be a tragedy when nothing happened?
    assert tragedy != null;

    if (infoStream.isEnabled("IW")) {
      infoStream.message("IW", "hit tragic " + tragedy.getClass().getSimpleName() + " inside " + location);
    }

    synchronized (this) {
      // It's possible you could have a really bad day
      if (this.tragedy != null) {
        // Another thread is already dealing / has dealt with the tragedy:
        IOUtils.reThrow(tragedy);
      }

      this.tragedy = tragedy;
    }

    // if we are already closed (e.g. called by rollback), this will be a no-op.
    if (shouldClose(false)) {
      rollbackInternal();
    }

    IOUtils.reThrow(tragedy);
  }

