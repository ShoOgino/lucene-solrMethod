  void tragicEvent(Throwable tragedy, String location) throws IOException {
    // unbox our internal AbortingException
    if (tragedy instanceof AbortingException) {
      tragedy = tragedy.getCause();
    }
    // We cannot hold IW's lock here else it can lead to deadlock:
    assert Thread.holdsLock(this) == false;

    // How can it be a tragedy when nothing happened?
    assert tragedy != null;

    if (infoStream.isEnabled("IW")) {
      infoStream.message("IW", "hit tragic " + tragedy.getClass().getSimpleName() + " inside " + location);
    }

    synchronized (this) {
      // it's possible you could have a really bad day
      if (this.tragedy == null) {
        this.tragedy = tragedy;
      }
    }

    // if we are already closed (e.g. called by rollback), this will be a no-op.
    synchronized(commitLock) {
      if (closing == false) {
        try {
          rollback();
        } catch (Throwable ignored) {
          // it would be confusing to addSuppressed here, it's unrelated to the disaster,
          // and it's possible our internal state is amiss anyway.
        }
      }
    }

    IOUtils.reThrow(tragedy);
  }

