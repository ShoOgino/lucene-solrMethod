  private void tragicEvent(Throwable tragedy, String location) {
    // We cannot hold IW's lock here else it can lead to deadlock:
    assert Thread.holdsLock(this) == false;

    if (infoStream.isEnabled("IW")) {
      infoStream.message("IW", "hit " + tragedy.getClass().getSimpleName() + " inside " + location);
    }
    synchronized (this) {
      // its possible you could have a really bad day
      if (this.tragedy == null) {
        this.tragedy = tragedy;
      }
    }
    // if we are already closed (e.g. called by rollback), this will be a no-op.
    synchronized(commitLock) {
      if (closing == false) {
        try {
          rollback();
        } catch (Throwable ignored) {
          // it would be confusing to addSuppressed here, its unrelated to the disaster,
          // and its possible our internal state is amiss anyway.
        }
      }
    }
    IOUtils.reThrowUnchecked(tragedy);
  }

