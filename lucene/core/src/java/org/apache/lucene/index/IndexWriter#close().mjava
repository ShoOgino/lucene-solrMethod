  /**
   * Closes all open resources and releases the write lock.
   * If there are running merges or uncommitted
   * changes:
   * <ul>
   *   <li> If config.matchVersion >= LUCENE_50 then the
   *        changes are silently discarded.
   *   <li> Otherwise, a RuntimeException is thrown to
   *        indicate what was lost, but the IndexWriter is
   *        still closed.
   * </ul>
   *
   * Use {@link #shutdown} if you want to flush, commit, and
   * wait for merges, before closing.
   * 
   * @throws IOException if there is a low-level IO error
   *   (the IndexWriter will still be closed)
   * @throws RuntimeException if config.matchVersion <
   *   LUCENE_50 and there were pending changes that were
   *   lost (the IndexWriter will still be closed)
   */
  @Override
  public void close() throws IOException {

    // If there are uncommitted changes, or still running
    // merges, we will in fact close, but we'll throw an
    // exception notifying the caller that they lost
    // changes, if IWC.matchVersion is < 5.0:
    boolean lostChanges = false;

    // Only check for lost changes if the version earlier than 5.0:
    if (config.getMatchVersion().onOrAfter(Version.LUCENE_50) == false) {
      lostChanges = hasUncommittedChanges();
      if (lostChanges == false) {
        synchronized(this) {
          if (pendingMerges.isEmpty() == false) {
            lostChanges = true;
          }
          if (runningMerges.isEmpty() == false) {
            lostChanges = true;
          }
        }
      }
    }

    // As long as there are no pending changes and no
    // running merges, we just rollback to close:
    rollback();

    if (lostChanges) {
      throw new RuntimeException("this writer is closed, but some pending changes or running merges were discarded; use shutdown to save pending changes and finish merges before closing");
    }
  }

