  /** Returns a TermsEnum that implements ord.  If the
   *  provided reader supports ord, we just return its
   *  TermsEnum; if it does not, we build a "private" terms
   *  index internally (WARNING: consumes RAM) and use that
   *  index to implement ord.  This also enables ord on top
   *  of a composite reader.  The returned TermsEnum is
   *  unpositioned.  This returns null if there are no terms.
   *
   *  <p><b>NOTE</b>: you must pass the same reader that was
   *  used when creating this class */
  public TermsEnum getOrdTermsEnum(AtomicReader reader) throws IOException {
    if (termInstances == 0) {
      return null;
    }
    if (indexedTermsArray == null) {
      //System.out.println("GET normal enum");
      final Fields fields = reader.fields();
      if (fields == null) {
        return null;
      }
      final Terms terms = fields.terms(field);
      if (terms == null) {
        return null;
      } else {
        return terms.iterator(null);
      }
    } else {
      //System.out.println("GET wrapped enum ordBase=" + ordBase);
      return new OrdWrappedTermsEnum(reader);
    }
  }

