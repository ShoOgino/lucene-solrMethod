  /** provides a merged view across multiple iterators */
  static Iterator<Term> mergedIterator(final List<Iterator<Term>> iterators) {
    return new Iterator<Term>() {
      Term current;
      TermMergeQueue queue = new TermMergeQueue(iterators.size());
      SubIterator[] top = new SubIterator[iterators.size()];
      int numTop;
      
      {
        int index = 0;
        for (Iterator<Term> iterator : iterators) {
          if (iterator.hasNext()) {
            SubIterator sub = new SubIterator();
            sub.current = iterator.next();
            sub.iterator = iterator;
            sub.index = index++;
            queue.add(sub);
          }
        }
      }
      
      public boolean hasNext() {
        if (queue.size() > 0) {
          return true;
        }
        
        for (int i = 0; i < numTop; i++) {
          if (top[i].iterator.hasNext()) {
            return true;
          }
        }
        return false;
      }
      
      public Term next() {
        // restore queue
        pushTop();
        
        // gather equal top fields
        if (queue.size() > 0) {
          pullTop();
        } else {
          current = null;
        }
        return current;
      }
      
      public void remove() {
        throw new UnsupportedOperationException();
      }
      
      private void pullTop() {
        // extract all subs from the queue that have the same top term
        assert numTop == 0;
        while (true) {
          top[numTop++] = queue.pop();
          if (queue.size() == 0
              || !(queue.top()).current.equals(top[0].current)) {
            break;
          }
        }
        current = top[0].current;
      }
      
      private void pushTop() {
        // call next() on each top, and put back into queue
        for (int i = 0; i < numTop; i++) {
          if (top[i].iterator.hasNext()) {
            top[i].current = top[i].iterator.next();
            queue.add(top[i]);
          } else {
            // no more terms
            top[i].current = null;
          }
        }
        numTop = 0;
      }
    };
  }

