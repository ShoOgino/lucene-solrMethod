  @Override
  public void processDocument(FieldInfos.Builder fieldInfos) throws IOException {

    consumer.startDocument();
    storedConsumer.startDocument();

    fieldCount = 0;

    final int thisFieldGen = fieldGen++;

    // Absorb any new fields first seen in this document.
    // Also absorb any changes to fields we had already
    // seen before (eg suddenly turning on norms or
    // vectors, etc.):

    for(IndexableField field : docState.doc.indexableFields()) {
      final String fieldName = field.name();
      IndexableFieldType ft = field.fieldType();

      DocFieldProcessorPerField fp = processField(fieldInfos, thisFieldGen, fieldName, ft);

      fp.addField(field);
    }

    for (StorableField field: docState.doc.storableFields()) {
      final String fieldName = field.name();
      IndexableFieldType ft = field.fieldType();
      FieldInfo fieldInfo = fieldInfos.addOrUpdate(fieldName, ft);
      storedConsumer.addField(docState.docID, field, fieldInfo);
    }

    // If we are writing vectors then we must visit
    // fields in sorted order so they are written in
    // sorted order.  TODO: we actually only need to
    // sort the subset of fields that have vectors
    // enabled; we could save [small amount of] CPU
    // here.
    ArrayUtil.introSort(fields, 0, fieldCount, fieldsComp);
    for(int i=0;i<fieldCount;i++) {
      final DocFieldProcessorPerField perField = fields[i];
      perField.consumer.processFields(perField.fields, perField.fieldCount);
    }
  }

