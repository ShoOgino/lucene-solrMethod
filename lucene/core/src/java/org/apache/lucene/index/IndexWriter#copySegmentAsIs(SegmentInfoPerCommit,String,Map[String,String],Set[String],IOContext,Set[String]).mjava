  /** Copies the segment files as-is into the IndexWriter's directory. */
  // nocommit: this gets insanely crazy: if there is any 3.x can we just open a reader and AddIndexes(Reader) ?!
  private SegmentInfoPerCommit copySegmentAsIs(SegmentInfoPerCommit info, String segName,
                                               Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context,
                                               Set<String> copiedFiles)
      throws IOException {
    // Determine if the doc store of this segment needs to be copied. It's
    // only relevant for segments that share doc store with others,
    // because the DS might have been copied already, in which case we
    // just want to update the DS name of this SegmentInfo.
    final String dsName = Lucene3xSegmentInfoFormat.getDocStoreSegment(info.info);
    assert dsName != null;
    final String newDsName;
    if (dsNames.containsKey(dsName)) {
      newDsName = dsNames.get(dsName);
    } else {
      dsNames.put(dsName, segName);
      newDsName = segName;
    }
    
    Set<String> codecDocStoreFiles = new HashSet<String>();
    final boolean hasSharedDocStore = Lucene3xSegmentInfoFormat.getDocStoreOffset(info.info) != -1;

    // copy the attributes map, we modify it for the preflex case
    final Map<String,String> attributes;
    if (info.info.attributes() == null) {
      attributes = new HashMap<String,String>();
    } else {
      attributes = new HashMap<String,String>(info.info.attributes());
    }
    if (hasSharedDocStore) {
      // only violate the codec this way if it's preflex &
      // shares doc stores
      // nocommit what to do....
      // cant we determine a file is a 3.x shared doc store file if hasSharedDocStore=true
      // and the segment prefix != info.info.name instead of this stuff?
      if (Lucene3xSegmentInfoFormat.getDocStoreIsCompoundFile(info.info)) {
        codecDocStoreFiles.add(IndexFileNames.segmentFileName(dsName, "", "cfx"));
      } else {
        codecDocStoreFiles.add(IndexFileNames.segmentFileName(dsName, "", "fdt"));
        codecDocStoreFiles.add(IndexFileNames.segmentFileName(dsName, "", "fdx"));
        codecDocStoreFiles.add(IndexFileNames.segmentFileName(dsName, "", "tvx"));
        codecDocStoreFiles.add(IndexFileNames.segmentFileName(dsName, "", "tvf"));
        codecDocStoreFiles.add(IndexFileNames.segmentFileName(dsName, "", "tvd"));
      }
      // change docStoreSegment to newDsName
      attributes.put(Lucene3xSegmentInfoFormat.DS_NAME_KEY, newDsName);
    }

    //System.out.println("copy seg=" + info.info.name + " version=" + info.info.getVersion());

    // Same SI as before but we change directory, name and docStoreSegment:
    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),
                                          info.info.getNormGen(), info.info.getUseCompoundFile(),
                                          info.info.getCodec(), info.info.getDiagnostics(), Collections.unmodifiableMap(attributes));
    SegmentInfoPerCommit newInfoPerCommit = new SegmentInfoPerCommit(newInfo, info.getDelCount(), info.getDelGen());

    Set<String> segFiles = new HashSet<String>();

    // Build up new segment's file names.  Must do this
    // before writing SegmentInfo:
    for (String file: info.files()) {
      final String newFileName;
      if (codecDocStoreFiles.contains(file)) {
        newFileName = newDsName + IndexFileNames.stripSegmentName(file);
      } else {
        newFileName = segName + IndexFileNames.stripSegmentName(file);
      }
      segFiles.add(newFileName);
    }
    newInfo.setFiles(segFiles);

    // We must rewrite the SI file because it references
    // segment name (its own name, if its 3.x, and doc
    // store segment name):
    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);
    try {
      newInfo.getCodec().segmentInfoFormat().getSegmentInfosWriter().write(trackingDir, newInfo, null, context);
    } catch (UnsupportedOperationException uoe) {
      // OK: 3x codec cannot write a new SI file;
      // SegmentInfos will write this on commit
    }

    final Collection<String> siFiles = trackingDir.getCreatedFiles();

    // Copy the segment's files
    for (String file: info.files()) {

      final String newFileName;
      if (codecDocStoreFiles.contains(file)) {
        newFileName = newDsName + IndexFileNames.stripSegmentName(file);
        if (dsFilesCopied.contains(newFileName)) {
          continue;
        }
        dsFilesCopied.add(newFileName);
      } else {
        newFileName = segName + IndexFileNames.stripSegmentName(file);
      }

      if (siFiles.contains(newFileName)) {
        // We already rewrote this above
        continue;
      }

      assert !directory.fileExists(newFileName): "file \"" + newFileName + "\" already exists; siFiles=" + siFiles;
      assert !copiedFiles.contains(file): "file \"" + file + "\" is being copied more than once";
      copiedFiles.add(file);
      info.info.dir.copy(directory, file, newFileName, context);
    }
    
    return newInfoPerCommit;
  }

