  /** Copies the segment files as-is into the IndexWriter's directory. */
  // TODO: this can be substantially simplified now that 3.x support/shared docstores is removed!
  private SegmentInfoPerCommit copySegmentAsIs(SegmentInfoPerCommit info, String segName,
                                               Map<String, String> dsNames, Set<String> dsFilesCopied, IOContext context,
                                               Set<String> copiedFiles)
      throws IOException {
    // Determine if the doc store of this segment needs to be copied. It's
    // only relevant for segments that share doc store with others,
    // because the DS might have been copied already, in which case we
    // just want to update the DS name of this SegmentInfo.
    final String dsName = info.info.name;
    assert dsName != null;
    final String newDsName;
    if (dsNames.containsKey(dsName)) {
      newDsName = dsNames.get(dsName);
    } else {
      dsNames.put(dsName, segName);
      newDsName = segName;
    }

    // note: we don't really need this fis (its copied), but we load it up
    // so we don't pass a null value to the si writer
    FieldInfos fis = getFieldInfos(info.info);
    
    final Map<String,String> attributes;
    // copy the attributes map, we might modify it below.
    // also we need to ensure its read-write, since we will invoke the SIwriter (which might want to set something).
    if (info.info.attributes() == null) {
      attributes = new HashMap<String,String>();
    } else {
      attributes = new HashMap<String,String>(info.info.attributes());
    }

    //System.out.println("copy seg=" + info.info.name + " version=" + info.info.getVersion());
    // Same SI as before but we change directory, name and docStoreSegment:
    SegmentInfo newInfo = new SegmentInfo(directory, info.info.getVersion(), segName, info.info.getDocCount(),
                                          info.info.getUseCompoundFile(),
                                          info.info.getCodec(), info.info.getDiagnostics(), attributes);
    SegmentInfoPerCommit newInfoPerCommit = new SegmentInfoPerCommit(newInfo, info.getDelCount(), info.getDelGen());

    Set<String> segFiles = new HashSet<String>();

    // Build up new segment's file names.  Must do this
    // before writing SegmentInfo:
    for (String file: info.files()) {
      final String newFileName;
      newFileName = segName + IndexFileNames.stripSegmentName(file);
      segFiles.add(newFileName);
    }
    newInfo.setFiles(segFiles);

    // We must rewrite the SI file because it references
    // segment name (its own name, if its 3.x, and doc
    // store segment name):
    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);
    try {
      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);
    } catch (UnsupportedOperationException uoe) {
      // OK: 3x codec cannot write a new SI file;
      // SegmentInfos will write this on commit
    }

    final Collection<String> siFiles = trackingDir.getCreatedFiles();

    // Copy the segment's files
    for (String file: info.files()) {

      final String newFileName = segName + IndexFileNames.stripSegmentName(file);

      if (siFiles.contains(newFileName)) {
        // We already rewrote this above
        continue;
      }

      assert !directory.fileExists(newFileName): "file \"" + newFileName + "\" already exists; siFiles=" + siFiles;
      assert !copiedFiles.contains(file): "file \"" + file + "\" is being copied more than once";
      copiedFiles.add(file);
      info.info.dir.copy(directory, file, newFileName, context);
    }
    
    return newInfoPerCommit;
  }

