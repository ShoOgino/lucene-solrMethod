    /**
     * Commit live docs changes for the segment readers for
     * the provided infos.
     *
     * @throws IOException If there is a low-level I/O error
     */
    public synchronized void commit(SegmentInfos infos) throws IOException {
      for (SegmentInfoPerCommit info : infos) {
        final ReadersAndLiveDocs rld = readerMap.get(info);
        if (rld != null) {
          assert rld.info == info;
          boolean hasFieldUpdates = rld.hasFieldUpdates(); // only reopen reader if there were field udpates
          if (rld.writeLiveDocs(directory)) {
            // Make sure we only write del docs and updates for a live segment:
            assert infoIsLive(info);

            // Must checkpoint w/ deleter, because we just
            // created new _X_N.del and field updates files.
            deleter.checkpoint(segmentInfos, false);
            
            // we wrote field updates, reopen the reader
            if (hasFieldUpdates) {
              rld.reopenReader(IOContext.READ);
            }
          }
        }
      }
    }

