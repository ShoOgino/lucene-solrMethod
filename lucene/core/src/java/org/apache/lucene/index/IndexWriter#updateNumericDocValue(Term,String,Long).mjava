  /**
   * Updates a document's NumericDocValue for <code>field</code> to the given
   * <code>value</code>. This method can be used to 'unset' a document's value
   * by passing {@code null} as the new value. Also, you can only update fields
   * that already exist in the index, not add new fields through this method.
   * 
   * <p>
   * <b>NOTE</b>: if this method hits an OutOfMemoryError you should immediately
   * close the writer. See <a href="#OOME">above</a> for details.
   * </p>
   * 
   * @param term
   *          the term to identify the document(s) to be updated
   * @param field
   *          field name of the NumericDocValues field
   * @param value
   *          new value for the field
   * @throws CorruptIndexException
   *           if the index is corrupt
   * @throws IOException
   *           if there is a low-level IO error
   */
  public void updateNumericDocValue(Term term, String field, Long value) throws IOException {
    ensureOpen();
    if (!globalFieldNumberMap.contains(field, DocValuesType.NUMERIC)) {
      throw new IllegalArgumentException("can only update existing numeric-docvalues fields!");
    }
    try {
      docWriter.updateNumericDocValue(term, field, value);
    } catch (OutOfMemoryError oom) {
      handleOOM(oom, "updateNumericDocValue");
    }
  }

