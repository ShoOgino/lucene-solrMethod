  /** Translates a frozen packet of delete term/query, or doc values
   *  updates, into their actual docIDs in the index, and applies the change.  This is a heavy
   *  operation and is done concurrently by incoming indexing threads. */

  public synchronized void apply(IndexWriter writer) throws IOException {
    if (applied.getCount() == 0) {
      // already done
      return;
    }

    long startNS = System.nanoTime();

    assert any();

    Set<SegmentCommitInfo> seenSegments = new HashSet<>();

    int iter = 0;
    int totalSegmentCount = 0;
    long totalDelCount = 0;

    // Optimistic concurrency: assume we are free to resolve the deletes against all current segments in the index, despite that
    // concurrent merges are running.  Once we are done, we check to see if a merge completed while we were running.  If so, we must retry
    // resolving against the newly merged segment(s).  Eventually no merge finishes while we were running and we are done.
    while (true) {
      String messagePrefix;
      if (iter == 0) {
        messagePrefix = "";
      } else {
        messagePrefix = "iter " + iter;
      }

      long iterStartNS = System.nanoTime();

      long mergeGenStart = writer.mergeFinishedGen.get();

      Set<String> delFiles = new HashSet<>();
      BufferedUpdatesStream.SegmentState[] segStates;

      synchronized (writer) {
        List<SegmentCommitInfo> infos = getInfosToApply(writer);
        if (infos == null) {
          break;
        }

        for (SegmentCommitInfo info : infos) {
          delFiles.addAll(info.files());
        }

        // Must open while holding IW lock so that e.g. segments are not merged
        // away, dropped from 100% deletions, etc., before we can open the readers
        segStates = writer.bufferedUpdatesStream.openSegmentStates(writer.readerPool, infos, seenSegments, delGen());

        if (segStates.length == 0) {

          if (infoStream.isEnabled("BD")) {
            infoStream.message("BD", "packet matches no segments");
          }
          
          break;
        }

        if (infoStream.isEnabled("BD")) {
          infoStream.message("BD", String.format(Locale.ROOT,
                                                 messagePrefix + "now apply del packet (%s) to %d segments, mergeGen %d",
                                                 this, segStates.length, mergeGenStart));
        }

        totalSegmentCount += segStates.length;

        // Important, else IFD may try to delete our files while we are still using them,
        // if e.g. a merge finishes on some of the segments we are resolving on:
        writer.deleter.incRef(delFiles);
      }

      boolean success = false;
      long delCount;
      try {
        // don't hold IW monitor lock here so threads are free concurrently resolve deletes/updates:
        delCount = apply(segStates);
        success = true;
      } finally {
        finishApply(writer, segStates, success, delFiles);
      }

      // Since we jus resolved some more deletes/updates, now is a good time to write them:
      writer.readerPool.writeSomeDocValuesUpdates();

      // It's OK to add this here, even if the while loop retries, because delCount only includes newly
      // deleted documents, on the segments we didn't already do in previous iterations:
      totalDelCount += delCount;

      if (infoStream.isEnabled("BD")) {
        infoStream.message("BD", String.format(Locale.ROOT,
                                               messagePrefix + "done apply del packet (%s) to %d segments; %d new deletes/updates; took %.3f sec",
                                               this, segStates.length, delCount, (System.nanoTime() - iterStartNS) / 1000000000.));
      }
      
      if (privateSegment != null) {
        // No need to retry for a segment-private packet: the merge that folds in our private segment already waits for all deletes to
        // be applied before it kicks off, so this private segment must already not be in the set of merging segments

        break;
      }

      // Must sync on writer here so that IW.mergeCommit is not running concurrently, so that if we exit, we know mergeCommit will succeed
      // in pulling all our delGens into a merge:
      synchronized (writer) {
        long mergeGenCur = writer.mergeFinishedGen.get();

        if (mergeGenCur == mergeGenStart) {

          // No merge finished while we were applying, so we are done!
          break;
        }
      }

      if (infoStream.isEnabled("BD")) {
        infoStream.message("BD", messagePrefix + "concurrent merges finished; move to next iter");
      }
        
      // A merge completed while we were running.  In this case, that merge may have picked up some of the updates we did, but not
      // necessarily all of them, so we cycle again, re-applying all our updates to the newly merged segment.

      iter++;
    }

    // Record that this packet is finished:
    writer.bufferedUpdatesStream.finished(this);

    if (infoStream.isEnabled("BD")) {
      String message = String.format(Locale.ROOT,
                                     "done apply del packet (%s) to %d segments; %d new deletes/updates; took %.3f sec",
                                     this, totalSegmentCount, totalDelCount, (System.nanoTime() - startNS) / 1000000000.);
      if (iter > 0) {
        message += "; " + (iter+1) + " iters due to concurrent merges";
      }
      message += "; " + writer.bufferedUpdatesStream.getPendingUpdatesCount() + " packets remain";
      infoStream.message("BD", message);
    }
  }

