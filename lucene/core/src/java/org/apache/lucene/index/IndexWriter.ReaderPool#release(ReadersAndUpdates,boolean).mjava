    public synchronized void release(ReadersAndUpdates rld, boolean assertInfoLive) throws IOException {

      // Matches incRef in get:
      rld.decRef();

      if (rld.refCount() == 0) {
        // This happens if the segment was just merged away, while a buffered deletes packet was still applying deletes/updates to it.
        assert readerMap.containsKey(rld.info) == false: "seg=" + rld.info + " has refCount 0 but still unexpectedly exists in the reader pool";
      } else {

        // Pool still holds a ref:
        assert rld.refCount() > 0: "refCount=" + rld.refCount() + " reader=" + rld.info;

        if (!poolReaders && rld.refCount() == 1 && readerMap.containsKey(rld.info)) {
          // This is the last ref to this RLD, and we're not
          // pooling, so remove it:
          if (rld.writeLiveDocs(directory)) {
            // Make sure we only write del docs for a live segment:
            assert assertInfoLive == false || assertInfoIsLive(rld.info);
            // Must checkpoint because we just
            // created new _X_N.del and field updates files;
            // don't call IW.checkpoint because that also
            // increments SIS.version, which we do not want to
            // do here: it was done previously (after we
            // invoked BDS.applyDeletes), whereas here all we
            // did was move the state to disk:
            checkpointNoSIS();
          }

          rld.writeFieldUpdates(directory, bufferedUpdatesStream.getCompletedDelGen(), infoStream);

          if (rld.getNumDVUpdates() == 0) {
            rld.dropReaders();
            readerMap.remove(rld.info);
          } else {
            // We are forced to pool this segment until its deletes fully apply (no delGen gaps)
          }
        }
      }
    }

