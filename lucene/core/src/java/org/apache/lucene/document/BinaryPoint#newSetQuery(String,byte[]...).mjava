  /**
   * Create a query matching any of the specified 1D values.  This is the points equivalent of {@code TermsQuery}.
   * 
   * @param field field name. must not be {@code null}.
   * @param valuesIn all values to match
   */
  public static Query newSetQuery(String field, byte[]... valuesIn) throws IOException {

    // Make sure all byte[] have the same length
    int bytesPerDim = -1;
    for(byte[] value : valuesIn) {
      if (bytesPerDim == -1) {
        bytesPerDim = value.length;
      } else if (value.length != bytesPerDim) {
        throw new IllegalArgumentException("all byte[] must be the same length, but saw " + bytesPerDim + " and " + value.length);
      }
    }

    if (bytesPerDim == -1) {
      // There are no points, and we cannot guess the bytesPerDim here, so we return an equivalent query:
      return new MatchNoDocsQuery();
    }

    // Don't unexpectedly change the user's incoming values array:
    byte[][] values = valuesIn.clone();

    Arrays.sort(values,
                new Comparator<byte[]>() {
                  @Override
                  public int compare(byte[] a, byte[] b) {
                    return StringHelper.compare(a.length, a, 0, b, 0);
                  }
                });

    final BytesRef value = new BytesRef(new byte[bytesPerDim]);
    
    return new PointInSetQuery(field, 1, bytesPerDim,
                               new BytesRefIterator() {

                                 int upto;

                                 @Override
                                 public BytesRef next() {
                                   if (upto == values.length) {
                                     return null;
                                   } else {
                                     value.bytes = values[upto];
                                     upto++;
                                     return value;
                                   }
                                 }
                               }) {
      @Override
      protected String toString(byte[] value) {
        return new BytesRef(value).toString();
      }
    };
  }

