    /** constructs the comparator based on the query type */
    RangeFieldComparator() {
      switch (queryType) {
        case INTERSECTS:
          predicate = this::intersects;
          break;
        case WITHIN:
          predicate = this::contains;
          break;
        case CONTAINS:
          predicate = this::within;
          break;
        case CROSSES:
          // crosses first checks intersection (disjoint automatic fails),
          // then ensures the query doesn't wholly contain the leaf:
          predicate = (byte[] leaf) -> this.intersects(leaf)
              && this.contains(leaf) == false;
          break;
        default:
          throw new IllegalArgumentException("invalid queryType [" + queryType + "] found.");
      }
    }

