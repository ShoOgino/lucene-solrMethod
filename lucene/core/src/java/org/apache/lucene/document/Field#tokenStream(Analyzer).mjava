  /**
   * {@inheritDoc}
   */
  public TokenStream tokenStream(Analyzer analyzer) throws IOException {
    if (!fieldType().indexed()) {
      return null;
    }

    final NumericType numericType = fieldType().numericType();
    if (numericType != null) {
      if (numericTokenStream == null) {
        // lazy init the TokenStream as it is heavy to instantiate
        // (attributes,...) if not needed (stored field loading)
        numericTokenStream = new NumericTokenStream(type.numericPrecisionStep());
        // initialize value in TokenStream
        final Number val = (Number) fieldsData;
        switch (numericType) {
        case INT:
          numericTokenStream.setIntValue(val.intValue());
          break;
        case LONG:
          numericTokenStream.setLongValue(val.longValue());
          break;
        case FLOAT:
          numericTokenStream.setFloatValue(val.floatValue());
          break;
        case DOUBLE:
          numericTokenStream.setDoubleValue(val.doubleValue());
          break;
        default:
          assert false : "Should never get here";
        }
      } else {
        // OK -- previously cached and we already updated if
        // setters were called.
      }

      return numericTokenStream;
    }

    if (!fieldType().tokenized()) {
      if (stringValue() == null) {
        throw new IllegalArgumentException("Non-Tokenized Fields must have a String value");
      }

      return new TokenStream() {
        CharTermAttribute termAttribute = addAttribute(CharTermAttribute.class);
        OffsetAttribute offsetAttribute = addAttribute(OffsetAttribute.class);
        boolean used;

        @Override
        public boolean incrementToken() throws IOException {
          if (used) {
            return false;
          }
          termAttribute.setEmpty().append(stringValue());
          offsetAttribute.setOffset(0, stringValue().length());
          used = true;
          return true;
        }

        @Override
        public void reset() throws IOException {
          used = false;
        }
      };
    }

    if (tokenStream != null) {
      return tokenStream;
    } else if (readerValue() != null) {
      return analyzer.tokenStream(name(), readerValue());
    } else if (stringValue() != null) {
      return analyzer.tokenStream(name(), new StringReader(stringValue()));
    }

    throw new IllegalArgumentException("Field must have either TokenStream, String, Reader or Number value");
  }

