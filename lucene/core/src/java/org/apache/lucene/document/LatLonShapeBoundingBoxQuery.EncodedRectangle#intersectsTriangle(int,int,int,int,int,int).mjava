    /**
     * Checks if the rectangle intersects the provided triangle
     **/
    boolean intersectsTriangle(int aX, int aY, int bX, int bY, int cX, int cY) {
      // 1. query contains any triangle points
      if (queryContainsPoint(aX, aY) || queryContainsPoint(bX, bY) || queryContainsPoint(cX, cY)) {
        return true;
      }

      // compute bounding box of triangle
      int tMinX = StrictMath.min(StrictMath.min(aX, bX), cX);
      int tMaxX = StrictMath.max(StrictMath.max(aX, bX), cX);
      int tMinY = StrictMath.min(StrictMath.min(aY, bY), cY);
      int tMaxY = StrictMath.max(StrictMath.max(aY, bY), cY);

      // 2. check bounding boxes are disjoint
      if (this.crossesDateline() == true) {
        if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, MIN_LON_ENCODED, this.maxX, this.minY, this.maxY)
            && boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, this.minX, MAX_LON_ENCODED, this.minY, this.maxY)) {
          return false;
        }
      } else if (tMaxX < minX || tMinX > maxX || tMinY > maxY || tMaxY < minY) {
        return false;
      }

      // 3. check triangle contains any query points
      if (Tessellator.pointInTriangle(minX, minY, aX, aY, bX, bY, cX, cY)) {
        return true;
      } else if (Tessellator.pointInTriangle(maxX, minY, aX, aY, bX, bY, cX, cY)) {
        return true;
      } else if (Tessellator.pointInTriangle(maxX, maxY, aX, aY, bX, bY, cX, cY)) {
        return true;
      } else if (Tessellator.pointInTriangle(minX, maxY, aX, aY, bX, bY, cX, cY)) {
        return true;
      }

      // 4. last ditch effort: check crossings
      if (queryIntersects(aX, aY, bX, bY, cX, cY)) {
        return true;
      }
      return false;
    }

