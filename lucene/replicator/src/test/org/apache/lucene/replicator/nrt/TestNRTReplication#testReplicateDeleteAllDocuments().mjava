  public void testReplicateDeleteAllDocuments() throws Exception {

    Node.globalStartNS = System.nanoTime();
    childTempDir = createTempDir("child");

    message("change thread name from " + Thread.currentThread().getName());
    Thread.currentThread().setName("main");
    
    Path primaryPath = createTempDir("primary");
    NodeProcess primary = startNode(-1, 0, primaryPath, true, -1);

    Path replicaPath = createTempDir("replica");
    NodeProcess replica = startNode(primary.tcpPort, 1, replicaPath, false, -1);

    // Tell primary current replicas:
    try (Connection c = new Connection(primary.tcpPort)) {
      c.out.writeByte(SimplePrimaryNode.CMD_SET_REPLICAS);
      c.out.writeVInt(1);
      c.out.writeVInt(replica.id);
      c.out.writeVInt(replica.tcpPort);
      c.flush();
      c.in.readByte();
    }

    // Index 10 docs into primary:
    LineFileDocs docs = new LineFileDocs(random());
    Connection primaryC = new Connection(primary.tcpPort);
    primaryC.out.writeByte(SimplePrimaryNode.CMD_INDEXING);
    for(int i=0;i<10;i++) {
      Document doc = docs.nextDoc();
      primary.addOrUpdateDocument(primaryC, doc, false);
    }

    // Nothing in replica index yet
    Connection replicaC = new Connection(replica.tcpPort);
    replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);
    replicaC.flush();
    long version1 = replicaC.in.readVLong();
    assertEquals(0L, version1);
    int hitCount = replicaC.in.readVInt();
    assertEquals(0, hitCount);

    // Refresh primary, which also pushes to replica:
    long primaryVersion1 = primary.flush(0);
    assertTrue(primaryVersion1 > 0);

    long version2;

    // Wait for replica to show the change
    while (true) {
      replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);
      replicaC.flush();
      version2 = replicaC.in.readVLong();
      hitCount = replicaC.in.readVInt();
      if (version2 == primaryVersion1) {
        assertEquals(10, hitCount);
        // good!
        break;
      }
      Thread.sleep(10);
    }

    // Delete all docs from primary
    if (random().nextBoolean()) {
      // Inefficiently:
      for(int id=0;id<10;id++) {
        primary.deleteDocument(primaryC, Integer.toString(id));
      }
    } else {
      // Efficiently:
      primary.deleteAllDocuments(primaryC);
    }

    // Replica still shows 10 docs:
    replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);
    replicaC.flush();
    long version3 = replicaC.in.readVLong();
    assertEquals(version2, version3);
    hitCount = replicaC.in.readVInt();
    assertEquals(10, hitCount);
    
    // Refresh primary, which also pushes to replica:
    long primaryVersion2 = primary.flush(0);
    assertTrue(primaryVersion2 > primaryVersion1);

    // Wait for replica to show the change
    long version4;
    while (true) {
      replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);
      replicaC.flush();
      version4 = replicaC.in.readVLong();
      hitCount = replicaC.in.readVInt();
      if (version4 == primaryVersion2) {
        assertTrue(version4 > version3);
        assertEquals(0, hitCount);
        // good!
        break;
      }
      Thread.sleep(10);
    }

    // Index 10 docs again:
    for(int i=0;i<10;i++) {
      Document doc = docs.nextDoc();
      primary.addOrUpdateDocument(primaryC, doc, false);
    }

    // Refresh primary, which also pushes to replica:
    long primaryVersion3 = primary.flush(0);
    assertTrue(primaryVersion3 > primaryVersion2);

    // Wait for replica to show the change
    while (true) {
      replicaC.out.writeByte(SimplePrimaryNode.CMD_SEARCH_ALL);
      replicaC.flush();
      long version5 = replicaC.in.readVLong();
      hitCount = replicaC.in.readVInt();
      if (version5 == primaryVersion3) {
        assertEquals(10, hitCount);
        assertTrue(version5 > version4);
        // good!
        break;
      }
      Thread.sleep(10);
    }

    replicaC.close();
    primaryC.close();

    replica.close();
    primary.close();
  }

