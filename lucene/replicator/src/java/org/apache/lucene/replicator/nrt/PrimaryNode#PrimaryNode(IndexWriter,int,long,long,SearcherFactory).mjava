  public PrimaryNode(IndexWriter writer, int id, long primaryGen, long forcePrimaryVersion, SearcherFactory searcherFactory) throws IOException {
    super(id, writer.getDirectory(), searcherFactory);
    message("top: now init primary");
    this.writer = writer;
    this.primaryGen = primaryGen;

    try {
      // So that when primary node's IndexWriter finishes a merge, but before it cuts over to the merged segment,
      // it copies it out to the replicas.  This ensures the whole system's NRT latency remains low even when a
      // large merge completes:
      writer.getConfig().setMergedSegmentWarmer(new PreCopyMergedSegmentWarmer(this));

      message("IWC:\n" + writer.getConfig());
      message("dir:\n" + writer.getDirectory());
      message("commitData: " + writer.getCommitData());

      // Record our primaryGen in the userData, and set initial version to 0:
      Map<String,String> commitData = new HashMap<>(writer.getCommitData());
      commitData.put(PRIMARY_GEN_KEY, Long.toString(primaryGen));
      if (commitData.get(VERSION_KEY) == null) {
        commitData.put(VERSION_KEY, "0");
        message("add initial commitData version=0");
      } else {
        message("keep current commitData version=" + commitData.get(VERSION_KEY));
      }
      writer.setCommitData(commitData, false);

      // We forcefully advance the SIS version to an unused future version.  This is necessary if the previous primary crashed and we are
      // starting up on an "older" index, else versions can be illegally reused but show different results:
      if (forcePrimaryVersion != -1) {
        message("now forcePrimaryVersion to version=" + forcePrimaryVersion);
        writer.advanceSegmentInfosVersion(forcePrimaryVersion);
      }

      mgr = new SearcherManager(writer, true, true, searcherFactory);
      setCurrentInfos(Collections.<String>emptySet());
      message("init: infos version=" + curInfos.getVersion());

      IndexSearcher s = mgr.acquire();
      try {
        message("init: marker hit count: " + s.search(new TermQuery(new Term("marker", "marker")), 1).totalHits);
      } finally {
        mgr.release(s);
      }

    } catch (Throwable t) {
      message("init: exception");
      t.printStackTrace(System.out);
      throw new RuntimeException(t);
    }
  }

