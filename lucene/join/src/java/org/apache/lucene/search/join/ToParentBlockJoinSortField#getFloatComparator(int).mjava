  private FieldComparator<?> getFloatComparator(int numHits) {
    return new FieldComparator.FloatComparator(numHits, getField(), (Float) missingValue) {
      @SuppressWarnings("deprecation")
      @Override
      protected NumericDocValues getNumericDocValues(LeafReaderContext context, String field) throws IOException {
        SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(context.reader(), field);
        final BlockJoinSelector.Type type = order
            ? BlockJoinSelector.Type.MAX
            : BlockJoinSelector.Type.MIN;
        final BitSet parents = parentFilter.getBitSet(context);
        final BitSet children = childFilter.getBitSet(context);
        if (children == null) {
          return DocValues.emptyNumeric();
        }
        return new FilterNumericDocValues(BlockJoinSelector.wrap(sortedNumeric, type, parents, children)) {
          @Override
          public long longValue() throws IOException {
            // undo the numericutils sortability
            return NumericUtils.sortableFloatBits((int) super.longValue());
          }
        };
      }
    };
  }

