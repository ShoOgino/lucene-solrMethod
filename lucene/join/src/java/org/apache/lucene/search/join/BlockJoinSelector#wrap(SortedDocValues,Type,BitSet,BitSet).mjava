  /** Wraps the provided {@link SortedDocValues} in order to only select
   *  one value per parent among its {@code children} using the configured
   *  {@code selection} type. */
  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {
    if (values.docID() != -1) {
      throw new IllegalArgumentException("values iterator was already consumed: values.docID=" + values.docID());
    }
    return new SortedDocValues() {

      private int ord;
      private int docID = -1;

      @Override
      public int docID() {
        return docID;
      }

      @Override
      public int nextDoc() throws IOException {
        assert docID != NO_MORE_DOCS;
        
        if (values.docID() == -1) {
          if (values.nextDoc() == NO_MORE_DOCS) {
            docID = NO_MORE_DOCS;
            return docID;
          }
        }

        if (values.docID() == NO_MORE_DOCS) {
          docID = NO_MORE_DOCS;
          return docID;
        }
        
        int nextParentDocID = parents.nextSetBit(values.docID());
        ord = values.ordValue();

        while (true) {
          int childDocID = values.nextDoc();
          assert childDocID != nextParentDocID;
          if (childDocID > nextParentDocID) {
            break;
          }
          if (children.get(childDocID) == false) {
            continue;
          }
          if (selection == Type.MIN) {
            ord = Math.min(ord, values.ordValue());
          } else if (selection == Type.MAX) {
            ord = Math.max(ord, values.ordValue());
          } else {
            throw new AssertionError();
          }
        }

        docID = nextParentDocID;
        return docID;
      }

      @Override
      public int advance(int target) throws IOException {
        if (target >= parents.length()) {
          docID = NO_MORE_DOCS;
          return docID;
        }
        if (target == 0) {
          assert docID() == -1;
          return nextDoc();
        }
        int prevParentDocID = parents.prevSetBit(target-1);
        values.advance(prevParentDocID+1);
        return nextDoc();
      }

      @Override
      public int ordValue() {
        return ord;
      }

      @Override
      public BytesRef lookupOrd(int ord) throws IOException {
        return values.lookupOrd(ord);
      }

      @Override
      public int getValueCount() {
        return values.getValueCount();
      }

      @Override
      public long cost() {
        return values.cost();
      }
    };
  }

