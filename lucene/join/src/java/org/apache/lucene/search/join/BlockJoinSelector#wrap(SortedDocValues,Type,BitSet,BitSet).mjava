  /** Wraps the provided {@link SortedDocValues} in order to only select
   *  one value per parent among its {@code children} using the configured
   *  {@code selection} type. */
  public static SortedDocValues wrap(final SortedDocValues values, Type selection, BitSet parents, BitSet children) {
    return new SortedDocValues() {

      @Override
      public int getOrd(int docID) {
        assert parents.get(docID) : "this selector may only be used on parent documents";

        if (docID == 0) {
          // no children
          return -1;
        }

        final int firstChild = parents.prevSetBit(docID - 1) + 1;

        int ord = -1;
        for (int child = children.nextSetBit(firstChild); child < docID; child = children.nextSetBit(child + 1)) {
          final int childOrd = values.getOrd(child);
          switch (selection) {
            case MIN:
              if (ord == -1) {
                ord = childOrd;
              } else if (childOrd != -1) {
                ord = Math.min(ord, childOrd);
              }
              break;
            case MAX:
              ord = Math.max(ord, childOrd);
              break;
            default:
              throw new AssertionError();
          }
        }
        return ord;
      }

      @Override
      public BytesRef lookupOrd(int ord) {
        return values.lookupOrd(ord);
      }

      @Override
      public int getValueCount() {
        return values.getValueCount();
      }

    };
  }

