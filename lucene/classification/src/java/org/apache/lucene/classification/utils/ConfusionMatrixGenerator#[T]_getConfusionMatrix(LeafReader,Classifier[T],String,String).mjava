  /**
   * get the {@link org.apache.lucene.classification.utils.ConfusionMatrixGenerator.ConfusionMatrix} of a given {@link Classifier},
   * generated on the given {@link LeafReader}, class and text fields.
   *
   * @param reader         the {@link LeafReader} containing the index used for creating the {@link Classifier}
   * @param classifier     the {@link Classifier} whose confusion matrix has to be generated
   * @param classFieldName the name of the Lucene field used as the classifier's output
   * @param textFieldName  the nome the Lucene field used as the classifier's input
   * @param <T>            the return type of the {@link ClassificationResult} returned by the given {@link Classifier}
   * @return a {@link org.apache.lucene.classification.utils.ConfusionMatrixGenerator.ConfusionMatrix}
   * @throws IOException if problems occurr while reading the index or using the classifier
   */
  public static <T> ConfusionMatrix getConfusionMatrix(LeafReader reader, Classifier<T> classifier, String classFieldName, String textFieldName) throws IOException {

    Map<String, Map<String, Long>> counts = new HashMap<>();

    for (int i = 0; i < reader.maxDoc(); i++) {
      StoredDocument doc = reader.document(i);
      String correctAnswer = doc.get(classFieldName);

      if (correctAnswer != null && correctAnswer.length() > 0) {

        ClassificationResult<T> result = classifier.assignClass(doc.get(textFieldName));
        T assignedClass = result.getAssignedClass();
        String classified = assignedClass instanceof BytesRef ? ((BytesRef) assignedClass).utf8ToString() : assignedClass.toString();

        Map<String, Long> stringLongMap = counts.get(correctAnswer);
        if (stringLongMap != null) {
          Long aLong = stringLongMap.get(classified);
          if (aLong != null) {
            stringLongMap.put(classified, aLong + 1);
          } else {
            stringLongMap.put(classified, 1l);
          }
        } else {
          stringLongMap = new HashMap<>();
          stringLongMap.put(classified, 1l);
          counts.put(correctAnswer, stringLongMap);
        }

      }
    }
    return new ConfusionMatrix(counts);
  }

