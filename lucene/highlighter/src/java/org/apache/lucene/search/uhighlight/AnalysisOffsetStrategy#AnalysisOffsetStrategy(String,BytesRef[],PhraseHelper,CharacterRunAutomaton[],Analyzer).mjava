  public AnalysisOffsetStrategy(String field, BytesRef[] extractedTerms, PhraseHelper phraseHelper, CharacterRunAutomaton[] automata, Analyzer analyzer) {
    super(field, extractedTerms, phraseHelper, automata);
    this.analyzer = analyzer;
    // Automata (Wildcards / MultiTermQuery):
    this.automata = automata;

    if (terms.length > 0 && !strictPhrases.hasPositionSensitivity()) {
      this.automata = convertTermsToAutomata(terms, automata);
      // clear the terms array now that we've moved them to be expressed as automata
      terms = ZERO_LEN_BYTES_REF_ARRAY;
    }

    if (terms.length > 0 || strictPhrases.willRewrite()) { //needs MemoryIndex
      // init MemoryIndex
      boolean storePayloads = strictPhrases.hasPositionSensitivity(); // might be needed
      memoryIndex = new MemoryIndex(true, storePayloads);//true==store offsets
      leafReader = (LeafReader) memoryIndex.createSearcher().getIndexReader();
      // preFilter for MemoryIndex
      preMemIndexFilterAutomaton = buildCombinedAutomaton(field, terms, this.automata, strictPhrases);
    } else {
      memoryIndex = null;
      leafReader = null;
      preMemIndexFilterAutomaton = null;
    }

  }

