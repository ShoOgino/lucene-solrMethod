    private void nextWhenMatchesIterator(OfMatchesIterator miOE) throws IOException {
      boolean isHead = miOE == pendingQueue.peek();
      MatchesIterator subMatches = miOE.matchesIterator.getSubMatches();
      if (subMatches != null) {
        // remove this miOE from the queue, add it's submatches, next() it, then re-enqueue it
        if (isHead) {
          pendingQueue.poll(); // remove
        }

        enqueueCachedMatches(subMatches);

        if (miOE.nextPosition()) {
          pendingQueue.add(miOE);
          assert pendingQueue.peek() != miOE; // miOE should follow cached entries
        }

      } else { // else has no subMatches.  It will stay enqueued.
        if (!isHead) {
          pendingQueue.add(miOE);
        } // else it's *already* in pendingQueue
      }
    }

