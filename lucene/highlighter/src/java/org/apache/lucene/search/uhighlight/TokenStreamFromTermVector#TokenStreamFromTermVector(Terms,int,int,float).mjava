  /**
   * Constructor.
   *
   * @param vector        Terms that contains the data for
   *                      creating the TokenStream. Must have positions and/or offsets.
   * @param filteredDocId The docID we will process.
   * @param offsetLength  Supply the character length of the text being uninverted, or a lower value if you don't want
   *                      to invert text beyond an offset (in so doing this will act as a filter).  If you don't
   *                      know the length, pass -1.  In conjunction with {@code loadFactor}, it's used to
   *                      determine how many buckets to create during uninversion.
   *                      It's also used to filter out tokens with a start offset exceeding this value.
   * @param loadFactor    The percent of tokens from the original terms (by position count) that are
   *                      expected to be inverted.  If they are filtered (e.g.
   *                      {@link org.apache.lucene.index.FilterLeafReader.FilterTerms})
   *                      then consider using less than 1.0 to avoid wasting space.
   *                      1.0 means all, 1/64th would suggest 1/64th of all tokens coming from vector.
   */
  TokenStreamFromTermVector(Terms vector, int filteredDocId, int offsetLength, float loadFactor) throws IOException {
    super();
    this.filteredDocId = filteredDocId;
    this.offsetLength = offsetLength == Integer.MAX_VALUE ? -1 : offsetLength;
    if (loadFactor <= 0f || loadFactor > 1f) {
      throw new IllegalArgumentException("loadFactor should be > 0 and <= 1");
    }
    this.loadFactor = loadFactor;
    assert !hasAttribute(PayloadAttribute.class) : "AttributeFactory shouldn't have payloads *yet*";
    if (!vector.hasPositions() && !vector.hasOffsets()) {
      throw new IllegalArgumentException("The term vector needs positions and/or offsets.");
    }
    assert vector.hasFreqs();
    this.vector = vector;
    termAttribute = addAttribute(CharTermAttribute.class);
    positionIncrementAttribute = addAttribute(PositionIncrementAttribute.class);
  }

