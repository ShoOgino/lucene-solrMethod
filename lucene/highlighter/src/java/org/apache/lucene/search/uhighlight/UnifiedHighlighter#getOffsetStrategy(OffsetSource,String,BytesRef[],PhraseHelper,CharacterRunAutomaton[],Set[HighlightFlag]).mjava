  protected FieldOffsetStrategy getOffsetStrategy(OffsetSource offsetSource, String field, BytesRef[] terms,
                                                  PhraseHelper phraseHelper, CharacterRunAutomaton[] automata,
                                                  Set<HighlightFlag> highlightFlags) {
    switch (offsetSource) {
      case ANALYSIS:
        if (!phraseHelper.hasPositionSensitivity() &&
            !highlightFlags.contains(HighlightFlag.PASSAGE_RELEVANCY_OVER_SPEED)) {
          //skip using a memory index since it's pure term filtering
          return new TokenStreamOffsetStrategy(field, terms, phraseHelper, automata, getIndexAnalyzer());
        } else {
          return new MemoryIndexOffsetStrategy(field, getFieldMatcher(field), terms, phraseHelper, automata, getIndexAnalyzer(),
              this::preMultiTermQueryRewrite);
        }
      case NONE_NEEDED:
        return NoOpOffsetStrategy.INSTANCE;
      case TERM_VECTORS:
        return new TermVectorOffsetStrategy(field, terms, phraseHelper, automata);
      case POSTINGS:
        return new PostingsOffsetStrategy(field, terms, phraseHelper, automata);
      case POSTINGS_WITH_TERM_VECTORS:
        return new PostingsWithTermVectorsOffsetStrategy(field, terms, phraseHelper, automata);
      default:
        throw new IllegalArgumentException("Unrecognized offset source " + offsetSource);
    }
  }

