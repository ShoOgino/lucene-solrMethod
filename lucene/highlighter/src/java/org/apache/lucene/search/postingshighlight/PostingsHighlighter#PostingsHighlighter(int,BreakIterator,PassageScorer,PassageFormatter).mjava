  /**
   * Creates a new highlighter with custom parameters.
   * @param maxLength maximum content size to process.
   * @param breakIterator used for finding passage
   *        boundaries; pass null to highlight the entire
   *        content as a single Passage.
   * @param scorer used for ranking passages.
   * @param formatter used for formatting passages into highlighted snippets.
   * @throws IllegalArgumentException if <code>maxLength</code> is negative or <code>Integer.MAX_VALUE</code>
   */
  public PostingsHighlighter(int maxLength, BreakIterator breakIterator, PassageScorer scorer, PassageFormatter formatter) {
    if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {
      // two reasons: no overflow problems in BreakIterator.preceding(offset+1),
      // our sentinel in the offsets queue uses this value to terminate.
      throw new IllegalArgumentException("maxLength must be < Integer.MAX_VALUE");
    }
    if (breakIterator == null) {
      breakIterator = new WholeBreakIterator();
    }
    if (scorer == null || formatter == null) {
      throw new NullPointerException();
    }
    this.maxLength = maxLength;
    this.breakIterator = breakIterator;
    this.scorer = scorer;
    this.formatter = formatter;
  }

