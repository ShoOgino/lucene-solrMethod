  public List<String> format(CharSequence value, List<Passage> passages, List<OffsetRange> ranges) {
    assert PassageSelector.sortedAndNonOverlapping(passages);
    assert PassageSelector.sortedAndNonOverlapping(ranges);
    assert ranges instanceof RandomAccess;

    if (ranges.isEmpty()) {
      return Collections.emptyList();
    }

    ArrayList<String> result = new ArrayList<>();
    StringBuilder buf = new StringBuilder();

    int rangeIndex = 0;
    OffsetRange range = ranges.get(rangeIndex);
    passageFormatting:
    for (Passage passage : passages) {
      // Move to the range of the current passage.
      while (passage.from >= range.to) {
        if (++rangeIndex == ranges.size()) {
          break passageFormatting;
        }
        range = ranges.get(rangeIndex);
      }

      assert range.from <= passage.from && range.to >= passage.to : range + " ? " + passage;

      buf.setLength(0);
      if (range.from < passage.from) {
        buf.append(ellipsis);
      }
      format(buf, value, passage);
      if (range.to > passage.to) {
        buf.append(ellipsis);
      }
      result.add(buf.toString());
    }
    return result;
  }

