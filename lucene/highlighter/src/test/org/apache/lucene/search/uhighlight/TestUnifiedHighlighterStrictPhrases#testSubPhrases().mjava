  public void testSubPhrases() throws IOException {
    indexWriter.addDocument(newDoc("alpha bravo charlie - charlie bravo alpha"));
    initReaderSearcherHighlighter();

    BooleanQuery query = new BooleanQuery.Builder()
        .add(newPhraseQuery("body", "alpha bravo charlie"), BooleanClause.Occur.MUST)
        .add(newPhraseQuery("body", "alpha bravo"), BooleanClause.Occur.MUST)
        .build();

    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);
    String[] snippets = highlighter.highlight("body", query, topDocs);

    assertArrayEquals(new String[]{"<b>alpha</b> <b>bravo</b> <b>charlie</b> - charlie bravo alpha"}, snippets);

    // test the Passage only has 3 matches.  We don't want duplicates from both PhraseQuery
    highlighter.setFormatter(new PassageFormatter() {
      @Override
      public Object format(Passage[] passages, String content) {
        return Arrays.toString(passages);
      }
    });
    assertArrayEquals(new String[]{"[Passage[0-41]{alpha[0-5],bravo[6-11],charlie[12-19]}score=3.931102]"},
        highlighter.highlight("body", query, topDocs));
  }

