  static UnifiedHighlighter randomUnifiedHighlighter(IndexSearcher searcher, Analyzer indexAnalyzer,
                                                             EnumSet<HighlightFlag> mandatoryFlags) {
    if (random().nextBoolean()) {
      return new UnifiedHighlighter(searcher, indexAnalyzer);
    } else {
      final UnifiedHighlighter uh = new UnifiedHighlighter(searcher, indexAnalyzer) {
        @Override
        protected Set<HighlightFlag> getFlags(String field) {
          final EnumSet<HighlightFlag> result = EnumSet.copyOf(mandatoryFlags);
          int r = random().nextInt();
          for (HighlightFlag highlightFlag : HighlightFlag.values()) {
            if (((1 << highlightFlag.ordinal()) & r) == 0) {
              result.add(highlightFlag);
            }
          }
          return result;
        }
      };
      uh.setCacheFieldValCharsThreshold(random().nextInt(100));
      if (random().nextBoolean()) {
        uh.setFieldMatcher(f -> true); // requireFieldMatch==false
      }
      return uh;
    }
  }

