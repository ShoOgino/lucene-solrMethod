  /** Tells the docWriter to close its currently open shared
   *  doc stores (stored fields & vectors files).
   *  Return value specifices whether new doc store files are compound or not.
   */
  private synchronized boolean flushDocStores() throws IOException {

    boolean useCompoundDocStore = false;

    String docStoreSegment;

    boolean success = false;
    try {
      docStoreSegment = docWriter.closeDocStore();
      success = true;
    } finally {
      if (!success && infoStream != null) {
        message("hit exception closing doc store segment");
      }
    }

    useCompoundDocStore = mergePolicy.useCompoundDocStore(segmentInfos);
      
    if (useCompoundDocStore && docStoreSegment != null && docWriter.closedFiles().size() != 0) {
      // Now build compound doc store file

      if (infoStream != null) {
        message("create compound file " + docStoreSegment + "." + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION);
      }

      success = false;

      final int numSegments = segmentInfos.size();
      final String compoundFileName = docStoreSegment + "." + IndexFileNames.COMPOUND_FILE_STORE_EXTENSION;

      try {
        CompoundFileWriter cfsWriter = new CompoundFileWriter(directory, compoundFileName);
        for (final String file :  docWriter.closedFiles() ) {
          cfsWriter.addFile(file);
        }
      
        // Perform the merge
        cfsWriter.close();
        success = true;

      } finally {
        if (!success) {
          if (infoStream != null)
            message("hit exception building compound file doc store for segment " + docStoreSegment);
          deleter.deleteFile(compoundFileName);
          docWriter.abort();
        }
      }

      for(int i=0;i<numSegments;i++) {
        SegmentInfo si = segmentInfos.info(i);
        if (si.getDocStoreOffset() != -1 &&
            si.getDocStoreSegment().equals(docStoreSegment))
          si.setDocStoreIsCompoundFile(true);
      }

      checkpoint();

      // In case the files we just merged into a CFS were
      // not previously checkpointed:
      deleter.deleteNewFiles(docWriter.closedFiles());
    }

    return useCompoundDocStore;
  }

