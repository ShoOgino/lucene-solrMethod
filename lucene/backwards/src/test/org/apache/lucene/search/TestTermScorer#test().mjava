    public void test() throws IOException {

        Term allTerm = new Term(FIELD, "all");
        TermQuery termQuery = new TermQuery(allTerm);

        Weight weight = termQuery.weight(indexSearcher);

        Scorer ts = weight.scorer(indexSearcher.getIndexReader(),
                                  true, true);

        //we have 2 documents with the term all in them, one document for all the other values
        final List docs = new ArrayList();
        //must call next first


        ts.score(new Collector() {
            private int base = 0;
            private Scorer scorer;
            @Override
            public void setScorer(Scorer scorer) throws IOException {
              this.scorer = scorer; 
            }

            @Override
            public void collect(int doc) throws IOException {
              float score = scorer.score();
              doc = doc + base;
              docs.add(new TestHit(doc, score));
              assertTrue("score " + score + " is not greater than 0", score > 0);
              assertTrue("Doc: " + doc + " does not equal 0 or doc does not equal 5",
                            doc == 0 || doc == 5);
            }
            @Override
            public void setNextReader(IndexReader reader, int docBase) {
              base = docBase;
            }
            @Override
            public boolean acceptsDocsOutOfOrder() {
              return true;
            }
        });
        assertTrue("docs Size: " + docs.size() + " is not: " + 2, docs.size() == 2);
        TestHit doc0 = (TestHit) docs.get(0);
        TestHit doc5 = (TestHit) docs.get(1);
        //The scores should be the same
        assertTrue(doc0.score + " does not equal: " + doc5.score, doc0.score == doc5.score);
        /*
        Score should be (based on Default Sim.:
        All floats are approximate
        tf = 1
        numDocs = 6
        docFreq(all) = 2
        idf = ln(6/3) + 1 = 1.693147
        idf ^ 2 = 2.8667
        boost = 1
        lengthNorm = 1 //there is 1 term in every document
        coord = 1
        sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667
        queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590

         score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69

        */
        assertTrue(doc0.score + " does not equal: " + 1.6931472f, doc0.score == 1.6931472f);
    }

