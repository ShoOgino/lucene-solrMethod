  public void testFreq() throws Exception {
    Directory dir = newDirectory();
    RandomIndexWriter w = new RandomIndexWriter(random(), dir);
    Document doc = new Document();
    // matches freq == 3
    doc.add(newTextField("field", "here comes the sun foo bar here comes another sun here comes shiny sun", Field.Store.NO));
    w.addDocument(doc);

    doc = new Document();
    // doesn't match
    doc.add(newTextField("field", "here comes the other sun", Field.Store.NO));
    w.addDocument(doc);
    IndexReader r = w.getReader();
    IndexSearcher s = newSearcher(r);

    TermAutomatonQuery q = new TermAutomatonQuery("field");
    int init = q.createState();
    int s1 = q.createState();
    q.addTransition(init, s1, "comes");
    int s2 = q.createState();
    q.addAnyTransition(s1, s2);
    int s3 = q.createState();
    q.setAccept(s3, true);
    q.addTransition(s2, s3, "sun");
    q.finish();

    s.search(q, new SimpleCollector() {
        private Scorer scorer;

        @Override
        public void setScorer(Scorer scorer) {
          this.scorer = scorer;
          while (scorer instanceof AssertingScorer) {
            scorer = ((AssertingScorer) scorer).getIn();
          }
        }

        @Override
        public void collect(int docID) throws IOException {
          assertEquals(3, scorer.freq());
        }
        
        @Override
        public boolean needsScores() {
          return true;
        }
      });

    w.close();
    r.close();
    dir.close();
  }

