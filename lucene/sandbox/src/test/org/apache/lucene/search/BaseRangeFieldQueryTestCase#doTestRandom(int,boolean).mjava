  private void doTestRandom(int count, boolean multiValued) throws Exception {
    int numDocs = atLeast(count);
    int dimensions = dimension();

    if (VERBOSE) {
      System.out.println("TEST: numDocs=" + numDocs);
    }

    Box[][] boxes = new Box[numDocs][];

    boolean haveRealDoc = true;

    nextdoc: for (int id=0; id<numDocs; ++id) {
      int x = random().nextInt(20);
      if (boxes[id] == null) {
        boxes[id] = new Box[] {nextBox(dimensions)};
      }
      if (x == 17) {
        // dome docs don't have a box:
        boxes[id][0].min[0] = Double.NaN;
        if (VERBOSE) {
          System.out.println("  id=" + id + " is missing");
        }
        continue;
      }

      if (multiValued == true && random().nextBoolean()) {
        // randomly add multi valued documents (up to 2 fields)
        int n = random().nextInt(2) + 1;
        boxes[id] = new Box[n];
        for (int i=0; i<n; ++i) {
          boxes[id][i] = nextBox(dimensions);
        }
      }

      if (id > 0 && x < 9 && haveRealDoc) {
        int oldID;
        int i=0;
        // don't step on missing boxes:
        while (true) {
          oldID = random().nextInt(id);
          if (Double.isNaN(boxes[oldID][0].min[0]) == false) {
            break;
          } else if (++i > id) {
            continue nextdoc;
          }
        }

        if (x == dimensions*2) {
          // Fully identical box (use first box in case current is multivalued but old is not)
          for (int d=0; d<dimensions; ++d) {
            boxes[id][0].min[d] = boxes[oldID][0].min[d];
            boxes[id][0].max[d] = boxes[oldID][0].max[d];
          }
          if (VERBOSE) {
            System.out.println("  id=" + id + " box=" + boxes[id] + " (same box as doc=" + oldID + ")");
          }
        } else {
          for (int m = 0, even = dimensions % 2; m < dimensions * 2; ++m) {
            if (x == m) {
              int d = (int)Math.floor(m/2);
              // current could be multivalue but old may not be, so use first box
              if (even == 0) {
                boxes[id][0].setVal(d, boxes[oldID][0].min[d]);
                if (VERBOSE) {
                  System.out.println("  id=" + id + " box=" + boxes[id] + " (same min[" + d + "] as doc=" + oldID + ")");
                }
              } else {
                boxes[id][0].setVal(d, boxes[oldID][0].max[d]);
                if (VERBOSE) {
                  System.out.println("  id=" + id + " box=" + boxes[id] + " (same max[" + d + "] as doc=" + oldID + ")");
                }
              }
            }
          }
        }
      }
    }
    verify(boxes);
  }

