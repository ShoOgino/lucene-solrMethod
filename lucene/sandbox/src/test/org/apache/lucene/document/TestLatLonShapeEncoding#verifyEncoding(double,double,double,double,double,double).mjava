  private void verifyEncoding(double alat, double alon, double blat, double blon, double clat, double clon) {
    int[] original = new int[]{GeoEncodingUtils.encodeLatitude(alat),
        GeoEncodingUtils.encodeLongitude(alon),
        GeoEncodingUtils.encodeLatitude(blat),
        GeoEncodingUtils.encodeLongitude(blon),
        GeoEncodingUtils.encodeLatitude(clat),
        GeoEncodingUtils.encodeLongitude(clon)};

    //quantize the triangle
    byte[] b = new byte[7 * LatLonShape.BYTES];
    LatLonShape.encodeTriangle(b, original[0], original[1], original[2], original[3], original[4], original[5]);
    int[] encoded = new int[6];
    LatLonShape.decodeTriangle(b, encoded);
    double[] encodedQuantize = new double[] {GeoEncodingUtils.decodeLatitude(encoded[0]),
        GeoEncodingUtils.decodeLongitude(encoded[1]),
        GeoEncodingUtils.decodeLatitude(encoded[2]),
        GeoEncodingUtils.decodeLongitude(encoded[3]),
        GeoEncodingUtils.decodeLatitude(encoded[4]),
        GeoEncodingUtils.decodeLongitude(encoded[5])};

    int orientation = GeoUtils.orient(original[1], original[0], original[3], original[2], original[5], original[4]);
    //quantize original
    double[] originalQuantize;
    //we need to change the orientation if CW
    if (orientation == -1) {
      originalQuantize = new double[] {GeoEncodingUtils.decodeLatitude(original[4]),
          GeoEncodingUtils.decodeLongitude(original[5]),
          GeoEncodingUtils.decodeLatitude(original[2]),
          GeoEncodingUtils.decodeLongitude(original[3]),
          GeoEncodingUtils.decodeLatitude(original[0]),
          GeoEncodingUtils.decodeLongitude(original[1])};
    } else {
      originalQuantize = new double[] {GeoEncodingUtils.decodeLatitude(original[0]),
          GeoEncodingUtils.decodeLongitude(original[1]),
          GeoEncodingUtils.decodeLatitude(original[2]),
          GeoEncodingUtils.decodeLongitude(original[3]),
          GeoEncodingUtils.decodeLatitude(original[4]),
          GeoEncodingUtils.decodeLongitude(original[5])};
    }

    for (int i =0; i < 100; i ++) {
      Polygon polygon = GeoTestUtil.nextPolygon();
      Polygon2D polygon2D = Polygon2D.create(polygon);
      PointValues.Relation originalRelation = polygon2D.relateTriangle(originalQuantize[1], originalQuantize[0], originalQuantize[3], originalQuantize[2], originalQuantize[5], originalQuantize[4]);
      PointValues.Relation encodedRelation = polygon2D.relateTriangle(encodedQuantize[1], encodedQuantize[0], encodedQuantize[3], encodedQuantize[2], encodedQuantize[5], encodedQuantize[4]);
      assertTrue(originalRelation == encodedRelation);
    }
  }

