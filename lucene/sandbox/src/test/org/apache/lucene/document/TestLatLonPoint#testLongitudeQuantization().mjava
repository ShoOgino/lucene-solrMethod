  /** 
   * step through some integers, ensuring they decode to their expected double values.
   * double values start at -180 and increase by LONGITUDE_DECODE for each integer.
   * check edge cases within the double range and a random doubles within the range too.
   */
  public void testLongitudeQuantization() throws Exception {
    Random random = random();
    for (int i = 0; i < 10000; i++) {
      int encoded = random.nextInt();
      double min = -180.0 + (encoded - (long)Integer.MIN_VALUE) * LatLonPoint.LONGITUDE_DECODE;
      double decoded = LatLonPoint.decodeLongitude(encoded);
      // should exactly equal expected value
      assertEquals(min, decoded, 0.0D);
      // should round-trip
      assertEquals(encoded, LatLonPoint.encodeLongitude(decoded));
      assertEquals(encoded, LatLonPoint.encodeLongitudeCeil(decoded));
      // test within the range
      if (i != Integer.MAX_VALUE) {
        // this is the next representable value
        // all double values between [min .. max) should encode to the current integer
        // all double values between (min .. max] should encodeCeil to the next integer.
        double max = min + LatLonPoint.LONGITUDE_DECODE;
        assertEquals(max, LatLonPoint.decodeLongitude(encoded+1), 0.0D);
        assertEquals(encoded+1, LatLonPoint.encodeLongitude(max));
        assertEquals(encoded+1, LatLonPoint.encodeLongitudeCeil(max));

        // first and last doubles in range that will be quantized
        double minEdge = Math.nextUp(min);
        double maxEdge = Math.nextDown(max);
        assertEquals(encoded,   LatLonPoint.encodeLongitude(minEdge));
        assertEquals(encoded+1, LatLonPoint.encodeLongitudeCeil(minEdge));
        assertEquals(encoded,   LatLonPoint.encodeLongitude(maxEdge));
        assertEquals(encoded+1, LatLonPoint.encodeLongitudeCeil(maxEdge));
        
        // check random values within the double range
        long minBits = NumericUtils.doubleToSortableLong(minEdge);
        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);
        for (int j = 0; j < 100; j++) {
          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));
          // round down
          assertEquals(encoded,   LatLonPoint.encodeLongitude(value));
          // round up
          assertEquals(encoded+1, LatLonPoint.encodeLongitudeCeil(value));
        }
      }
    }
  }

