  public void testTriangleTouchingEdges() {
    Polygon p = new Polygon(new double[] {0, 0, 1, 1, 0}, new double[] {0, 1, 1, 0, 0});
    Polygon2D polygon2D = Polygon2D.create(p);
    //3 shared points
    PointValues.Relation rel = polygon2D.relateTriangle(GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0.5)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(1)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0.5)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0.5)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(1)));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, rel);
    //2 shared points
    rel = polygon2D.relateTriangle(GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0.5)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(1)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0.5)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0.5)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0.75)));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, rel);
    //1 shared point
    rel = polygon2D.relateTriangle(
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0.5)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0.5)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0.5)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0.75)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0.75)));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, rel);
    // 1 shared point but out
    rel = polygon2D.relateTriangle(GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(1)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0.5)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(2)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(2)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(2)));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, rel);
    // 1 shared point but crossing
    rel = polygon2D.relateTriangle(GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0.5)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(2)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0.5)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0.5)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(1)));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, rel);
    //share one edge
    rel = polygon2D.relateTriangle(GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(1)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0.5)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(0.5)));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, rel);
    //share one edge outside
    rel = polygon2D.relateTriangle(GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(0)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(1)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(1.5)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(1.5)),
        GeoEncodingUtils.decodeLongitude(GeoEncodingUtils.encodeLongitude(1)),
        GeoEncodingUtils.decodeLatitude(GeoEncodingUtils.encodeLatitude(1)));
    assertEquals(PointValues.Relation.CELL_CROSSES_QUERY, rel);
  }

