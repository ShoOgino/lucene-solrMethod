  //[a,b,c] == [c,a,b] == [b,c,a] == [c,b,a] == [b,a,c] == [a,c,b]
  public void verifyEncodingPermutations(int ayEnc, int axEnc, int byEnc, int bxEnc, int cyEnc, int cxEnc) {
    //this is only valid when points are not co-planar
    assertTrue(GeoUtils.orient(ayEnc, axEnc, byEnc, bxEnc, cyEnc, cxEnc) != 0);
    byte[] b = new byte[7 * ShapeField.BYTES];
    //[a,b,c]
    ShapeField.encodeTriangle(b, ayEnc, axEnc, byEnc, bxEnc, cyEnc, cxEnc);
    int[] encodedABC = new int[6];
    ShapeField.decodeTriangle(b, encodedABC);
    //[c,a,b]
    ShapeField.encodeTriangle(b, cyEnc, cxEnc, ayEnc, axEnc, byEnc, bxEnc);
    int[] encodedCAB = new int[6];
    ShapeField.decodeTriangle(b, encodedCAB);
    assertTrue(Arrays.equals(encodedABC, encodedCAB));
    //[b,c,a]
    ShapeField.encodeTriangle(b, byEnc, bxEnc, cyEnc, cxEnc, ayEnc, axEnc);
    int[] encodedBCA = new int[6];
    ShapeField.decodeTriangle(b, encodedBCA);
    assertTrue(Arrays.equals(encodedABC, encodedBCA));
    //[c,b,a]
    ShapeField.encodeTriangle(b, cyEnc, cxEnc, byEnc, bxEnc, ayEnc, axEnc);
    int[] encodedCBA= new int[6];
    ShapeField.decodeTriangle(b, encodedCBA);
    assertTrue(Arrays.equals(encodedABC, encodedCBA));
    //[b,a,c]
    ShapeField.encodeTriangle(b, byEnc, bxEnc, ayEnc, axEnc, cyEnc, cxEnc);
    int[] encodedBAC= new int[6];
    ShapeField.decodeTriangle(b, encodedBAC);
    assertTrue(Arrays.equals(encodedABC, encodedBAC));
    //[a,c,b]
    ShapeField.encodeTriangle(b, ayEnc, axEnc, cyEnc, cxEnc, byEnc, bxEnc);
    int[] encodedACB= new int[6];
    ShapeField.decodeTriangle(b, encodedACB);
    assertTrue(Arrays.equals(encodedABC, encodedACB));
  }

