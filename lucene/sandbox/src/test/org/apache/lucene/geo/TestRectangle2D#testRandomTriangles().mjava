  public void testRandomTriangles() {
    Rectangle rectangle = GeoTestUtil.nextBox();
    Rectangle2D rectangle2D = Rectangle2D.create(rectangle);

    for (int i =0; i < 100; i++) {
      int ax = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());
      int ay = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());
      int bx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());
      int by = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());
      int cx = GeoEncodingUtils.encodeLongitude(GeoTestUtil.nextLongitude());
      int cy = GeoEncodingUtils.encodeLatitude(GeoTestUtil.nextLatitude());

      int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);
      int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);
      int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);
      int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);

      byte[] triangle = new byte[4 * BYTES];
      NumericUtils.intToSortableBytes(tMinY, triangle, 0);
      NumericUtils.intToSortableBytes(tMinX, triangle, BYTES);
      NumericUtils.intToSortableBytes(tMaxY, triangle, 2 * BYTES);
      NumericUtils.intToSortableBytes(tMaxX, triangle, 3 * BYTES);

      PointValues.Relation r;
      if (random().nextBoolean()) {
        r = rectangle2D.relateRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);
      } else {
        r = rectangle2D.intersectRangeBBox(BYTES, 0, triangle, 3 * BYTES, 2 * BYTES, triangle);
      }

      if (r == PointValues.Relation.CELL_OUTSIDE_QUERY) {
        assertFalse(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));
        assertFalse(rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy));
      }
      else if (rectangle2D.containsTriangle(ax, ay, bx, by , cx, cy)) {
        assertTrue(rectangle2D.intersectsTriangle(ax, ay, bx, by , cx, cy));
      }
    }
  }

