  @Override
  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {

    // I don't use RandomAccessWeight here: it's no good to approximate with "match all docs"; this is an inverted structure and should be
    // used in the first pass:

    return new ConstantScoreWeight(this) {

      @Override
      public Scorer scorer(LeafReaderContext context) throws IOException {
        LeafReader reader = context.reader();
        final SortedSetDocValues ssdv = reader.getSortedSetDocValues(field);
        if (ssdv == null) {
          // No docs in this segment had this field
          return null;
        }

        if (ssdv instanceof RangeTreeSortedSetDocValues == false) {
          throw new IllegalStateException("field \"" + field + "\" was not indexed with RangeTreeDocValuesFormat: got: " + ssdv);
        }
        RangeTreeSortedSetDocValues treeDV = (RangeTreeSortedSetDocValues) ssdv;
        RangeTreeReader tree = treeDV.getRangeTreeReader();

        /*
        for(int i=0;i<treeDV.getValueCount();i++) {
          System.out.println("  ord " + i + " -> " + treeDV.lookupOrd(i));
        }
        */

        // lower
        final long minOrdIncl;
        if (minValue == null) {
          minOrdIncl = 0;
        } else {
          long ord = ssdv.lookupTerm(minValue);
          if (ord >= 0) {
            // Exact match
            if (minInclusive) {
              minOrdIncl = ord;
            } else {
              minOrdIncl = ord+1;
            }
          } else {
            minOrdIncl = -ord-1;
          }
        }

        // upper
        final long maxOrdIncl;
        if (maxValue == null) {
          maxOrdIncl = Long.MAX_VALUE;
        } else {
          long ord = ssdv.lookupTerm(maxValue);
          if (ord >= 0) {
            // Exact match
            if (maxInclusive) {
              maxOrdIncl = ord;
            } else {
              maxOrdIncl = ord-1;
            }
          } else {
            maxOrdIncl = -ord-2;
          }
        }

        if (maxOrdIncl < minOrdIncl) {  
          // This can happen when the requested range lies entirely between 2 adjacent ords:
          return null;
        }

        //System.out.println(reader + ": ORD: " + minOrdIncl + "-" + maxOrdIncl + "; " + minValue + " - " + maxValue);
        
        // Just a "view" of only the ords from the SSDV, as an SNDV.  Maybe we
        // have this view implemented somewhere else already?  It's not so bad that
        // we are inefficient here (making 2 passes over the ords): this is only
        // used in at most 2 leaf cells (the boundary cells).
        SortedNumericDocValues ords = new SortedNumericDocValues() {

            private long[] ords = new long[2];
            private int count;

            @Override
            public void setDocument(int doc) {
              ssdv.setDocument(doc);
              long ord;
              count = 0;
              while ((ord = ssdv.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {
                if (count == ords.length) {
                  ords = ArrayUtil.grow(ords, count+1);
                }
                ords[count++] = ord;
              }
            }

            @Override
            public int count() {
              return count;
            }

            @Override
            public long valueAt(int index) {
              return ords[index];
            }
          };

        DocIdSet result = tree.intersect(minOrdIncl, maxOrdIncl, ords, context.reader().maxDoc());

        final DocIdSetIterator disi = result.iterator();

        return new ConstantScoreScorer(this, score(), disi);
      }
    };
  }

