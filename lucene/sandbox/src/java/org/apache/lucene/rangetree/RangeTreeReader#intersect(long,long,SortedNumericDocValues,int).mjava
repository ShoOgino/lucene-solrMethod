  public DocIdSet intersect(long minIncl, long maxIncl, SortedNumericDocValues sndv, int maxDoc) throws IOException {

    if (minIncl > maxIncl) {
      return DocIdSet.EMPTY;
    }

    if (minIncl > globalMaxValue || maxIncl < blockMinValues[0]) {
      return DocIdSet.EMPTY;
    }

    QueryState state = new QueryState(in.clone(), maxDoc,
                                      minIncl, maxIncl,
                                      sndv);

    int startBlockIncl = Arrays.binarySearch(blockMinValues, minIncl);
    if (startBlockIncl >= 0) {
      // There can be dups here, when the same value is added many
      // times.  Also, we need the first block whose min is < minIncl:
      while (startBlockIncl > 0 && blockMinValues[startBlockIncl] == minIncl) {
        startBlockIncl--;
      }
    } else {
      startBlockIncl = Math.max(-startBlockIncl-2, 0);
    }

    int endBlockIncl = Arrays.binarySearch(blockMinValues, maxIncl);
    if (endBlockIncl >= 0) {
      // There can be dups here, when the same value is added many
      // times.  Also, we need the first block whose max is > minIncl:
      while (endBlockIncl < blockMinValues.length-1 && blockMinValues[endBlockIncl] == maxIncl) {
        endBlockIncl++;
      }
    } else {
      endBlockIncl = Math.max(-endBlockIncl-2, 0);
    }

    assert startBlockIncl <= endBlockIncl;

    state.in.seek(blockFPs[startBlockIncl]);

    //System.out.println("startBlockIncl=" + startBlockIncl + " endBlockIncl=" + endBlockIncl);

    // Rough estimate of how many hits we'll see.  Note that in the degenerate case
    // (index same value many times) this could be a big over-estimate, but in the typical
    // case it's good:
    state.docs.grow(approxDocsPerBlock * (endBlockIncl - startBlockIncl + 1));

    int hitCount = 0;
    for (int block=startBlockIncl;block<=endBlockIncl;block++) {
      boolean doFilter = blockMinValues[block] <= minIncl || block == blockMinValues.length-1 || blockMinValues[block+1] >= maxIncl;
      //System.out.println("  block=" + block + " min=" + blockMinValues[block] + " doFilter=" + doFilter);

      int newCount;
      if (doFilter) {
        // We must filter each hit:
        newCount = addSome(state);
      } else {
        newCount = addAll(state);
      }

      hitCount += newCount;
    }

    // NOTE: hitCount is an over-estimate in the multi-valued case:
    return state.docs.build(hitCount);
  }

