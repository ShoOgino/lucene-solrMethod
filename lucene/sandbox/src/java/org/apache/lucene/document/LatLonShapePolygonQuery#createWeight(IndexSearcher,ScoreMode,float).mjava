  @Override
  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {
    final Rectangle box = Rectangle.fromPolygon(polygons);
    final byte minLat[] = new byte[Integer.BYTES];
    final byte maxLat[] = new byte[Integer.BYTES];
    final byte minLon[] = new byte[Integer.BYTES];
    final byte maxLon[] = new byte[Integer.BYTES];
    NumericUtils.intToSortableBytes(encodeLatitudeCeil(box.minLat), minLat, 0);
    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);
    NumericUtils.intToSortableBytes(encodeLongitudeCeil(box.minLon), minLon, 0);
    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);

    final Polygon2D polygon = Polygon2D.create(polygons);

    return new ConstantScoreWeight(this, boost) {

      private Relation relateRangeToQuery(byte[] minTriangle, byte[] maxTriangle) {
        // compute bounding box
        int minXOfs = 0;
        int minYOfs = 0;
        int maxXOfs = 0;
        int maxYOfs = 0;
        for (int d = 1; d < 3; ++d) {
          // check minX
          int aOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;
          int bOfs = (d * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;
          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {
            minXOfs = d;
          }
          // check maxX
          aOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;
          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {
            maxXOfs = d;
          }
          // check minY
          aOfs = minYOfs * 2 * LatLonPoint.BYTES;
          bOfs = d * 2 * LatLonPoint.BYTES;
          if (FutureArrays.compareUnsigned(minTriangle, bOfs, bOfs + LatLonPoint.BYTES, minTriangle, aOfs, aOfs + LatLonPoint.BYTES) < 0) {
            minYOfs = d;
          }
          // check maxY
          aOfs = maxYOfs * 2 * LatLonPoint.BYTES;
          if (FutureArrays.compareUnsigned(maxTriangle, bOfs, bOfs + LatLonPoint.BYTES, maxTriangle, aOfs, aOfs + LatLonPoint.BYTES) > 0) {
            maxYOfs = d;
          }
        }
        minXOfs = (minXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;
        maxXOfs = (maxXOfs * 2 * LatLonPoint.BYTES) + LatLonPoint.BYTES;
        minYOfs *= 2 * LatLonPoint.BYTES;
        maxYOfs *= 2 * LatLonPoint.BYTES;

        double minLat = GeoEncodingUtils.decodeLatitude(minTriangle, minYOfs);
        double minLon = GeoEncodingUtils.decodeLongitude(minTriangle, minXOfs);
        double maxLat = GeoEncodingUtils.decodeLatitude(maxTriangle, maxYOfs);
        double maxLon = GeoEncodingUtils.decodeLongitude(maxTriangle, maxXOfs);

        // check internal node against query
        return polygon.relate(minLat, maxLat, minLon, maxLon);
      }

      private boolean queryCrossesTriangle(byte[] t) {
        double ay = GeoEncodingUtils.decodeLatitude(t, 0);
        double ax = GeoEncodingUtils.decodeLongitude(t, LatLonPoint.BYTES);
        double by = GeoEncodingUtils.decodeLatitude(t, 2 * LatLonPoint.BYTES);
        double bx = GeoEncodingUtils.decodeLongitude(t, 3 * LatLonPoint.BYTES);
        double cy = GeoEncodingUtils.decodeLatitude(t, 4 * LatLonPoint.BYTES);
        double cx = GeoEncodingUtils.decodeLongitude(t, 5 * LatLonPoint.BYTES);
        return polygon.relateTriangle(ax, ay, bx, by, cx, cy) != Relation.CELL_OUTSIDE_QUERY;
      }

      private IntersectVisitor getIntersectVisitor(DocIdSetBuilder result) {
        return new IntersectVisitor() {

          DocIdSetBuilder.BulkAdder adder;

          @Override
          public void grow(int count) {
            adder = result.grow(count);
          }

          @Override
          public void visit(int docID) throws IOException {
            adder.add(docID);
          }

          @Override
          public void visit(int docID, byte[] t) throws IOException {
            if (queryCrossesTriangle(t)) {
              adder.add(docID);
            }
          }

          @Override
          public Relation compare(byte[] minTriangle, byte[] maxTriangle) {
            return relateRangeToQuery(minTriangle, maxTriangle);
          }
        };
      }

      @Override
      public ScorerSupplier scorerSupplier(LeafReaderContext context) throws IOException {
        LeafReader reader = context.reader();
        PointValues values = reader.getPointValues(field);
        if (values == null) {
          // No docs in this segment had any points fields
          return null;
        }
        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);
        if (fieldInfo == null) {
          // No docs in this segment indexed this field at all
          return null;
        }

        final Weight weight = this;
        return new ScorerSupplier() {
          final DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);
          final PointValues.IntersectVisitor visitor = getIntersectVisitor(result);
          long cost = -1;

          @Override
          public Scorer get(long leadCost) throws IOException {
            values.intersect(visitor);
            DocIdSetIterator iterator = result.build().iterator();
            return new ConstantScoreScorer(weight, score(), iterator);
          }

          @Override
          public long cost() {
            if (cost == -1) {
              // Computing the cost may be expensive, so only do it if necessary
              cost = values.estimatePointCount(visitor);
              assert cost >= 0;
            }
            return cost;
          }
        };
      }

      @Override
      public Scorer scorer(LeafReaderContext context) throws IOException {
        ScorerSupplier scorerSupplier = scorerSupplier(context);
        if (scorerSupplier == null) {
          return null;
        }
        return scorerSupplier.get(Long.MAX_VALUE);
      }

      @Override
      public boolean isCacheable(LeafReaderContext ctx) {
        return true;
      }
    };
  }

