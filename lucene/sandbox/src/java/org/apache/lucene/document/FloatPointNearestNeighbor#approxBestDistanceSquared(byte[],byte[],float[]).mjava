  private static double approxBestDistanceSquared(byte[] minPackedValue, byte[] maxPackedValue, float[] value) {
    boolean insideCell = true;
    float[] min = new float[value.length];
    float[] max = new float[value.length];
    double[] closest = new double[value.length];
    for (int i = 0, offset = 0 ; i < value.length ; ++i, offset += Float.BYTES) {
      min[i] = FloatPoint.decodeDimension(minPackedValue, offset);
      max[i] = FloatPoint.decodeDimension(maxPackedValue, offset);
      if (insideCell) {
        if (value[i] < min[i] || value[i] > max[i]) {
          insideCell = false;
        }
      }
      double minDiff = Math.abs((double)value[i] - (double)min[i]);
      double maxDiff = Math.abs((double)value[i] - (double)max[i]);
      closest[i] = minDiff < maxDiff ? minDiff : maxDiff;
    }
    if (insideCell) {
      return 0.0f;
    }
    double sumOfSquaredDiffs = 0.0d;
    for (int d = 0 ; d < value.length ; ++d) {
      sumOfSquaredDiffs += closest[d] * closest[d];
    }
    return sumOfSquaredDiffs;
  }

