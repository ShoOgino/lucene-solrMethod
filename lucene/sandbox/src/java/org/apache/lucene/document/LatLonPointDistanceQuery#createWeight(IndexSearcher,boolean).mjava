  @Override
  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {
    GeoRect box = GeoUtils.circleToBBox(longitude, latitude, radiusMeters);
    final GeoRect box1;
    final GeoRect box2;

    // crosses dateline: split
    if (box.maxLon < box.minLon) {
      box1 = new GeoRect(-180.0, box.maxLon, box.minLat, box.maxLat);
      box2 = new GeoRect(box.minLon, 180.0, box.minLat, box.maxLat);
    } else {
      box1 = box;
      box2 = null;
    }

    return new ConstantScoreWeight(this) {

      @Override
      public Scorer scorer(LeafReaderContext context) throws IOException {
        LeafReader reader = context.reader();
        PointValues values = reader.getPointValues();
        if (values == null) {
          // No docs in this segment had any points fields
          return null;
        }
        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);
        if (fieldInfo == null) {
          // No docs in this segment indexed this field at all
          return null;
        }
        LatLonPoint.checkCompatible(fieldInfo);
        
        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());
        values.intersect(field,
                         new IntersectVisitor() {
                           @Override
                           public void visit(int docID) {
                             result.add(docID);
                           }

                           @Override
                           public void visit(int docID, byte[] packedValue) {
                             assert packedValue.length == 8;
                             double lat = LatLonPoint.decodeLatitude(packedValue, 0);
                             double lon = LatLonPoint.decodeLongitude(packedValue, Integer.BYTES);
                             if (GeoDistanceUtils.haversin(latitude, longitude, lat, lon) <= radiusMeters) {
                               visit(docID);
                             }
                           }
                           
                           // algorithm: we create a bounding box (two bounding boxes if we cross the dateline).
                           // 1. check our bounding box(es) first. if the subtree is entirely outside of those, bail.
                           // 2. see if the subtree is fully contained. if the subtree is enormous along the x axis, wrapping half way around the world, etc: then this can't work, just go to step 3.
                           // 3. recurse naively.
                           @Override
                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {
                             double latMin = LatLonPoint.decodeLatitude(minPackedValue, 0);
                             double lonMin = LatLonPoint.decodeLongitude(minPackedValue, Integer.BYTES);
                             double latMax = LatLonPoint.decodeLatitude(maxPackedValue, 0);
                             double lonMax = LatLonPoint.decodeLongitude(maxPackedValue, Integer.BYTES);
                             
                             if ((latMax < box1.minLat || lonMax < box1.minLon || latMin > box1.maxLat || lonMin > box1.maxLon) && 
                                 (box2 == null || latMax < box2.minLat || lonMax < box2.minLon || latMin > box2.maxLat || lonMin > box2.maxLon)) {
                               // we are fully outside of bounding box(es), don't proceed any further.
                               return Relation.CELL_OUTSIDE_QUERY;
                             } else if (lonMax - longitude < 90 && longitude - lonMin < 90 &&
                                 GeoDistanceUtils.haversin(latitude, longitude, latMin, lonMin) <= radiusMeters &&
                                 GeoDistanceUtils.haversin(latitude, longitude, latMin, lonMax) <= radiusMeters &&
                                 GeoDistanceUtils.haversin(latitude, longitude, latMax, lonMin) <= radiusMeters &&
                                 GeoDistanceUtils.haversin(latitude, longitude, latMax, lonMax) <= radiusMeters) {
                               // we are fully enclosed, collect everything within this subtree
                               return Relation.CELL_INSIDE_QUERY;
                             } else {
                               // recurse: its inside our bounding box(es), but not fully, or it wraps around.
                               return Relation.CELL_CROSSES_QUERY;
                             }
                           }
                         });

        return new ConstantScoreScorer(this, score(), result.build().iterator());
      }
    };
  }

