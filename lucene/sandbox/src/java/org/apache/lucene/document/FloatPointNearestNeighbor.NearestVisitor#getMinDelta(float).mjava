    /**
     * Returns the minimum value that will change the given distance when added to it.
     * 
     * This value is calculated from the distance exponent reduced by (at most) 23,
     * the number of bits in a float mantissa. This is necessary when the result of
     * subtracting/adding the distance in a single dimension has an exponent that
     * differs significantly from that of the distance value. Without this fudge
     * factor (i.e. only subtracting/adding the distance), cells and values can be
     * inappropriately judged as outside the search radius.
     */
    private float getMinDelta(float distance) {
      int exponent = Float.floatToIntBits(distance) >> MANTISSA_BITS; // extract biased exponent (distance is positive)
      if (exponent == 0) {
        return Float.MIN_VALUE;
      } else {
        exponent = exponent <= MANTISSA_BITS ? 1 : exponent - MANTISSA_BITS; // Avoid underflow
        return Float.intBitsToFloat(exponent << MANTISSA_BITS);
      }
    }

