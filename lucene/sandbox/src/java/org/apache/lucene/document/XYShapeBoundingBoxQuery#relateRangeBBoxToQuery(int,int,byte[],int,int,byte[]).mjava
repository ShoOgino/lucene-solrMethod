  @Override
  protected PointValues.Relation relateRangeBBoxToQuery(int minXOffset, int minYOffset, byte[] minTriangle,
                                                        int maxXOffset, int maxYOffset, byte[] maxTriangle) {
    double minY = decode(NumericUtils.sortableBytesToInt(minTriangle, minYOffset));
    double minX = decode(NumericUtils.sortableBytesToInt(minTriangle, minXOffset));
    double maxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxYOffset));
    double maxX = decode(NumericUtils.sortableBytesToInt(maxTriangle, maxXOffset));
    // check internal node against query
    PointValues.Relation rel = rectangle2D.relate(minX, maxX, minY, maxY);
    // TODO: Check if this really helps
    if (queryRelation == QueryRelation.INTERSECTS && rel == PointValues.Relation.CELL_CROSSES_QUERY) {
      // for intersects we can restrict the conditions by using the inner box
      double innerMaxY = decode(NumericUtils.sortableBytesToInt(maxTriangle, minYOffset));
      if (rectangle2D.relate(minX, maxX, minY, innerMaxY) == PointValues.Relation.CELL_INSIDE_QUERY) {
        return PointValues.Relation.CELL_INSIDE_QUERY;
      }
      double innerMaX = decode(NumericUtils.sortableBytesToInt(maxTriangle, minXOffset));
      if (rectangle2D.relate(minX, innerMaX, minY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {
        return PointValues.Relation.CELL_INSIDE_QUERY;
      }
      double innerMinY = decode(NumericUtils.sortableBytesToInt(minTriangle, maxYOffset));
      if (rectangle2D.relate(minX, maxX, innerMinY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {
        return PointValues.Relation.CELL_INSIDE_QUERY;
      }
      double innerMinX = decode(NumericUtils.sortableBytesToInt(minTriangle, maxXOffset));
      if (rectangle2D.relate(innerMinX, maxX, minY, maxY) == PointValues.Relation.CELL_INSIDE_QUERY) {
        return PointValues.Relation.CELL_INSIDE_QUERY;
      }
    }
    return rel;
  }

