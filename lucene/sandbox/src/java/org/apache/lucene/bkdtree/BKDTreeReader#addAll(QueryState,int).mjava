  /** Fast path: this is called when the query rect fully encompasses all cells under this node. */
  private int addAll(QueryState state, int nodeID) throws IOException {
    //System.out.println("  addAll nodeID=" + nodeID);
    //long latRange = (long) cellLatMaxEnc - (long) cellLatMinEnc;
    //long lonRange = (long) cellLonMaxEnc - (long) cellLonMinEnc;

    if (nodeID >= leafNodeOffset) {
      //System.out.println("    leaf");

      /*
      System.out.println("A: " + BKDTreeWriter.decodeLat(cellLatMinEnc)
                         + " " + BKDTreeWriter.decodeLat(cellLatMaxEnc)
                         + " " + BKDTreeWriter.decodeLon(cellLonMinEnc)
                         + " " + BKDTreeWriter.decodeLon(cellLonMaxEnc));
      */

      // Leaf node
      long fp = leafBlockFPs[nodeID-leafNodeOffset];
      //System.out.println("    leaf nodeID=" + nodeID + " vs leafNodeOffset=" + leafNodeOffset + " fp=" + fp);
      if (fp == 0) {
        // Dead end node (adversary case):
        return 0;
      }
      state.in.seek(fp);
      
      //System.out.println("    seek to leafFP=" + fp);
      // How many points are stored in this leaf cell:
      int count = state.in.readVInt();
      state.docs.grow(count);
      for(int i=0;i<count;i++) {
        int docID = state.in.readInt();
        //System.out.println("  docID=" + docID);
        assert accept(state, docID);
        state.docs.add(docID);
      }

      return count;
    } else {
      int splitValue = splitValues[nodeID];

      if (splitValue == Integer.MAX_VALUE) {
        // Dead end node (adversary case):
        return 0;
      }

      //System.out.println("  splitValue=" + splitValue);

      //System.out.println("  addAll: inner");
      int count = addAll(state, 2*nodeID);
      count += addAll(state, 2*nodeID+1);
      //System.out.println("  addAll: return count=" + count);
      return count;
    }
  }

