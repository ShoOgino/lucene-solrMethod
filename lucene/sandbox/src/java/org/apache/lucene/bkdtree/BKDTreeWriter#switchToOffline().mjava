  /** If the current segment has too many points then we switchover to temp files / offline sort. */
  private void switchToOffline() throws IOException {

    // OfflineSorter isn't thread safe, but our own private tempDir works around this:
    tempDir = Files.createTempDirectory(OfflineSorter.defaultTempDir(), BKDTreeWriter.class.getSimpleName());

    // For each .add we just append to this input file, then in .finish we sort this input and resursively build the tree:
    tempInput = tempDir.resolve("in");
    writer = new OfflineSorter.ByteSequencesWriter(tempInput);
    for(int i=0;i<pointCount;i++) {
      scratchBytesOutput.reset(scratchBytes);
      scratchBytesOutput.writeInt(heapWriter.latEncs[i]);
      scratchBytesOutput.writeInt(heapWriter.lonEncs[i]);
      scratchBytesOutput.writeVInt(heapWriter.docIDs[i]);
      scratchBytesOutput.writeVLong(i);
      // TODO: can/should OfflineSorter optimize the fixed-width case?
      writer.write(scratchBytes, 0, scratchBytes.length);
    }

    heapWriter = null;
  }

