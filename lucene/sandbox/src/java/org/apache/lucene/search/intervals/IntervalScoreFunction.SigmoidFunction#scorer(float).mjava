    @Override
    public Similarity.SimScorer scorer(float weight) {
      return new Similarity.SimScorer() {
        @Override
        public float score(float freq, long norm) {
          // should be f^a / (f^a + k^a) but we rewrite it to
          // 1 - k^a / (f + k^a) to make sure it doesn't decrease
          // with f in spite of rounding
          return (float) (weight * (1.0f - pivotPa / (Math.pow(freq, a) + pivotPa)));
        }
      };
    }

