    @Override
    public IntervalIterator apply(IntervalIterator minuend, IntervalIterator subtrahend) {
      IntervalIterator notWithin = new IntervalIterator() {

        @Override
        public int docID() {
          return subtrahend.docID();
        }

        @Override
        public int nextDoc() throws IOException {
          positioned = false;
          return subtrahend.nextDoc();
        }

        @Override
        public int advance(int target) throws IOException {
          positioned = false;
          return subtrahend.advance(target);
        }

        @Override
        public long cost() {
          return subtrahend.cost();
        }

        boolean positioned = false;

        @Override
        public int start() {
          if (positioned == false)
            return -1;
          int start = subtrahend.start();
          return Math.max(0, start - positions);
        }

        @Override
        public int end() {
          if (positioned == false)
            return -1;
          int end = subtrahend.end();
          int newEnd = end + positions;
          if (newEnd < 0) // check for overflow
            return Integer.MAX_VALUE;
          return newEnd;
        }

        @Override
        public int gaps() {
          throw new UnsupportedOperationException();
        }

        @Override
        public int nextInterval() throws IOException {
          if (positioned == false) {
            positioned = true;
          }
          return subtrahend.nextInterval();
        }

        @Override
        public float matchCost() {
          return subtrahend.matchCost();
        }

      };
      return NON_OVERLAPPING.apply(minuend, notWithin);
    }

