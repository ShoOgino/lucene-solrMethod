  /**
   * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric
   * range of the bounding box. Those terms that pass the initial range filter are then compared against the
   * decoded min/max latitude and longitude values of the bounding box only if the range is not a "boundary" range
   * (e.g., a range that straddles the boundary of the bbox).
   * @param term term for candidate document
   * @return match status
   */
  @Override
  protected AcceptStatus accept(BytesRef term) {
    // validate value is in range
    while (currentUpperBound == null || term.compareTo(currentUpperBound) > 0) {
      if (rangeBounds.isEmpty()) {
        return AcceptStatus.END;
      }
      // peek next sub-range, only seek if the current term is smaller than next lower bound
      if (term.compareTo(rangeBounds.get(0).lower) < 0) {
        return AcceptStatus.NO_AND_SEEK;
      }
      // step forward to next range without seeking, as next lower range bound is less or equal current term
      nextRange();
    }

    // final-filter boundary ranges by bounding box
    if (currentRange.boundary) {
      final long val = NumericUtils.prefixCodedToLong(term);
      final double lon = GeoUtils.mortonUnhashLon(val);
      final double lat = GeoUtils.mortonUnhashLat(val);
      if (!GeoUtils.bboxContains(lon, lat, minLon, minLat, maxLon, maxLat)) {
        return AcceptStatus.NO;
      }
    }
    return AcceptStatus.YES;
  }

