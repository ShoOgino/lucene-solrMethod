  /**
   * Base implementation delegates to {@link #getFieldQuery(String,String,boolean)}.
   * This method may be overridden, for example, to return
   * a SpanNearQuery instead of a PhraseQuery.
   *
   * @exception org.apache.lucene.queryparser.classic.ParseException throw in overridden method to disallow
   */
  protected Query getFieldQuery(String field, String queryText, int slop)
        throws ParseException {
    Query query = getFieldQuery(field, queryText, true);

    if (query instanceof PhraseQuery) {
      query = addSlopToPhrase((PhraseQuery) query, slop);
    } else if (query instanceof MultiPhraseQuery) {
      MultiPhraseQuery mpq = (MultiPhraseQuery)query;
      
      if (slop != mpq.getSlop()) {
        query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();
      }
    } else if (query instanceof GraphQuery && ((GraphQuery) query).hasPhrase()) {
      // we have a graph query that has at least one phrase sub-query
      // re-build and set slop on all phrase queries
      List<Query> oldQueries = ((GraphQuery) query).getQueries();
      Query[] queries = new Query[oldQueries.size()];
      for (int i = 0; i < queries.length; i++) {
        Query oldQuery = oldQueries.get(i);
        if (oldQuery instanceof PhraseQuery) {
          queries[i] = addSlopToPhrase((PhraseQuery) oldQuery, slop);
        } else {
          queries[i] = oldQuery;
        }
      }

      query = new GraphQuery(queries);
    }

    return query;
  }

