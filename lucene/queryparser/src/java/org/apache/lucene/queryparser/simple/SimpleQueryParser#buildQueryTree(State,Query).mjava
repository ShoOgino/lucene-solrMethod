  // buildQueryTree should be called after a term, phrase, or subquery
  // is consumed to be added to our existing query tree
  // this method will only add to the existing tree if the branch contained in state is not null
  private void buildQueryTree(State state, Query branch) {
    if (branch != null) {
      // modify our branch to a BooleanQuery wrapper for not
      // this is necessary any time a term, phrase, or subquery is negated
      if (state.not % 2 == 1) {
        BooleanQuery.Builder nq = new BooleanQuery.Builder();
        nq.add(branch, BooleanClause.Occur.MUST_NOT);
        nq.add(new MatchAllDocsQuery(), BooleanClause.Occur.SHOULD);
        branch = nq.build();
      }

      // first term (or phrase or subquery) found and will begin our query tree
      if (state.top == null) {
        state.top = branch;
      } else {
        // more than one term (or phrase or subquery) found
        // set currentOperation to the default if no other operation is explicitly set
        if (state.currentOperation == null) {
          state.currentOperation = defaultOperator;
        }

        // operational change requiring a new parent node
        // this occurs if the previous operation is not the same as current operation
        // because the previous operation must be evaluated separately to preserve
        // the proper precedence and the current operation will take over as the top of the tree
        if (state.previousOperation != state.currentOperation) {
          BooleanQuery.Builder bq = new BooleanQuery.Builder();
          bq.add(state.top, state.currentOperation);
          state.top = bq.build();
        }

        // reset all of the state for reuse
        state.top = addClause((BooleanQuery) state.top, branch, state.currentOperation);
        state.previousOperation = state.currentOperation;
      }

      // reset the current operation as it was intended to be applied to
      // the incoming term (or phrase or subquery) even if branch was null
      // due to other possible errors
      state.currentOperation = null;
    }
  }

