  /**
   * Overrides super class, by passing terms through analyzer.
   * @exception ParseException
   */
  @Override
  protected Query getRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive)
      throws ParseException {
    // get Analyzer from superclass and tokenize the terms
    TokenStream source = null;
    CharTermAttribute termAtt = null;
    boolean multipleTokens = false;

    if (part1 != null) {
      // part1
      try {
        source = getAnalyzer().tokenStream(field, new StringReader(part1));
        termAtt = source.addAttribute(CharTermAttribute.class);
        source.reset();
        multipleTokens = false;


        if (source.incrementToken()) {
          part1 = termAtt.toString();
        }
        multipleTokens = source.incrementToken();
      } catch (IOException e) {
        // ignore
      }
      try {
        source.end();
        source.close();
      } catch (IOException e) {
        // ignore
      }
      if (multipleTokens) {
        throw new ParseException("Cannot build RangeQuery with analyzer " + getAnalyzer().getClass()
            + " - tokens were added to part1");
      }
    }

    if (part2 != null) {
      try {
        // part2
        source = getAnalyzer().tokenStream(field, new StringReader(part2));
        termAtt = source.addAttribute(CharTermAttribute.class);
        source.reset();
        if (source.incrementToken()) {
          part2 = termAtt.toString();
        }
        multipleTokens = source.incrementToken();
      } catch (IOException e) {
        // ignore
      }
      try {
        source.end();
        source.close();
      } catch (IOException e) {
        // ignore
      }
      if (multipleTokens) {
        throw new ParseException("Cannot build RangeQuery with analyzer " + getAnalyzer().getClass()
            + " - tokens were added to part2");
      }
    }
    return super.getRangeQuery(field, part1, part2, startInclusive, endInclusive);
  }

