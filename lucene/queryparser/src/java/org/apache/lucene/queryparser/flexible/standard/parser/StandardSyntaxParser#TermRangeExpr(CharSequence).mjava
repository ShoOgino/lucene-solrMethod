  final private TermRangeQueryNode TermRangeExpr(CharSequence field) throws ParseException {Token left, right;
  boolean leftInclusive = false;
  boolean rightInclusive = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RANGEIN_START:{
      jj_consume_token(RANGEIN_START);
leftInclusive = true;
      break;
      }
    case RANGEEX_START:{
      jj_consume_token(RANGEEX_START);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RANGE_GOOP:{
      jj_consume_token(RANGE_GOOP);
      break;
      }
    case RANGE_QUOTED:{
      jj_consume_token(RANGE_QUOTED);
      break;
      }
    case RANGE_TO:{
      jj_consume_token(RANGE_TO);
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
left = token;
    jj_consume_token(RANGE_TO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RANGE_GOOP:{
      jj_consume_token(RANGE_GOOP);
      break;
      }
    case RANGE_QUOTED:{
      jj_consume_token(RANGE_QUOTED);
      break;
      }
    case RANGE_TO:{
      jj_consume_token(RANGE_TO);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
right = token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case RANGEIN_END:{
      jj_consume_token(RANGEIN_END);
rightInclusive = true;
      break;
      }
    case RANGEEX_END:{
      jj_consume_token(RANGEEX_END);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (left.kind == RANGE_QUOTED) {
      left.image = left.image.substring(1, left.image.length() - 1);
    }
    if (right.kind == RANGE_QUOTED) {
      right.image = right.image.substring(1, right.image.length() - 1);
    }

    FieldQueryNode qLower = new FieldQueryNode(field,
      discardEscapeChar(left.image), left.beginColumn, left.endColumn);
    FieldQueryNode qUpper = new FieldQueryNode(field,
      discardEscapeChar(right.image), right.beginColumn, right.endColumn);

    {if ("" != null) return new TermRangeQueryNode(qLower, qUpper, leftInclusive, rightInclusive);}
    throw new Error("Missing return statement in function");
}

