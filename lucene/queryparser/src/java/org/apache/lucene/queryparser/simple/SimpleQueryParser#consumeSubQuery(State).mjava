  private void consumeSubQuery(State state) {
    assert (flags & PRECEDENCE_OPERATORS) != 0;
    int start = ++state.index;
    int precedence = 1;
    boolean escaped = false;

    while (state.index < state.length) {
      if (!escaped) {
        if (state.data[state.index] == '\\' && (flags & ESCAPE_OPERATOR) != 0) {
          // an escape character has been found so
          // whatever character is next will become
          // part of the subquery unless the escape
          // character is the last one in the data
          escaped = true;
          ++state.index;

          continue;
        } else if (state.data[state.index] == '(') {
          // increase the precedence as there is a
          // subquery in the current subquery
          ++precedence;
        } else if (state.data[state.index] == ')') {
          --precedence;

          if (precedence == 0) {
            // this should be the end of the subquery
            // all characters found will used for
            // creating the subquery
            break;
          }
        }
      }

      escaped = false;
      ++state.index;
    }

    if (state.index == state.length) {
      // a closing parenthesis was never found so the opening
      // parenthesis is considered extraneous and will be ignored
      state.index = start;
    } else if (state.index == start) {
      // a closing parenthesis was found immediately after the opening
      // parenthesis so the current operation is reset since it would
      // have been applied to this subquery
      state.currentOperation = null;

      ++state.index;
    } else {
      // a complete subquery has been found and is recursively parsed by
      // starting over with a new state object
      State subState = new State(state.data, state.buffer, start, state.index);
      parseSubQuery(subState);
      buildQueryTree(state, subState.top);

      ++state.index;
    }
  }

