  // TODO: Move to QueryParserTestBase once standard flexible parser gets this capability
  public void testOperatorsAndMultiWordSynonyms() throws Exception {
    Analyzer a = new MockSynonymAnalyzer();

    boolean oldSplitOnWhitespace = splitOnWhitespace;
    splitOnWhitespace = false;

    // Operators should interrupt multiword analysis of adjacent words if they associate
    assertQueryEquals("+guinea pig", a, "+guinea pig");
    assertQueryEquals("-guinea pig", a, "-guinea pig");
    assertQueryEquals("!guinea pig", a, "-guinea pig");
    assertQueryEquals("guinea* pig", a, "guinea* pig");
    assertQueryEquals("guinea? pig", a, "guinea? pig");
    assertQueryEquals("guinea~2 pig", a, "guinea~2 pig");
    assertQueryEquals("guinea^2 pig", a, "(guinea)^2.0 pig");

    assertQueryEquals("guinea +pig", a, "guinea +pig");
    assertQueryEquals("guinea -pig", a, "guinea -pig");
    assertQueryEquals("guinea !pig", a, "guinea -pig");
    assertQueryEquals("guinea pig*", a, "guinea pig*");
    assertQueryEquals("guinea pig?", a, "guinea pig?");
    assertQueryEquals("guinea pig~2", a, "guinea pig~2");
    assertQueryEquals("guinea pig^2", a, "guinea (pig)^2.0");

    assertQueryEquals("field:guinea pig", a, "guinea pig");
    assertQueryEquals("guinea field:pig", a, "guinea pig");

    assertQueryEquals("NOT guinea pig", a, "-guinea pig");
    assertQueryEquals("guinea NOT pig", a, "guinea -pig");

    assertQueryEquals("guinea pig AND dogs", a, "guinea +pig +Synonym(dog dogs)");
    assertQueryEquals("dogs AND guinea pig", a, "+Synonym(dog dogs) +guinea pig");
    assertQueryEquals("guinea pig && dogs", a, "guinea +pig +Synonym(dog dogs)");
    assertQueryEquals("dogs && guinea pig", a, "+Synonym(dog dogs) +guinea pig");

    assertQueryEquals("guinea pig OR dogs", a, "guinea pig Synonym(dog dogs)");
    assertQueryEquals("dogs OR guinea pig", a, "Synonym(dog dogs) guinea pig");
    assertQueryEquals("guinea pig || dogs", a, "guinea pig Synonym(dog dogs)");
    assertQueryEquals("dogs || guinea pig", a, "Synonym(dog dogs) guinea pig");

    assertQueryEquals("\"guinea\" pig", a, "guinea pig");
    assertQueryEquals("guinea \"pig\"", a, "guinea pig");

    assertQueryEquals("(guinea) pig", a, "guinea pig");
    assertQueryEquals("guinea (pig)", a, "guinea pig");

    assertQueryEquals("/guinea/ pig", a, "/guinea/ pig");
    assertQueryEquals("guinea /pig/", a, "guinea /pig/");

    // Operators should not interrupt multiword analysis if not don't associate
    assertQueryEquals("(guinea pig)", a, "(+guinea +pig) cavy");
    assertQueryEquals("+(guinea pig)", a, "+((+guinea +pig) cavy)");
    assertQueryEquals("-(guinea pig)", a, "-((+guinea +pig) cavy)");
    assertQueryEquals("!(guinea pig)", a, "-((+guinea +pig) cavy)");
    assertQueryEquals("NOT (guinea pig)", a, "-((+guinea +pig) cavy)");
    assertQueryEquals("(guinea pig)^2", a, "((+guinea +pig) cavy)^2.0");

    assertQueryEquals("field:(guinea pig)", a, "(+guinea +pig) cavy");

    assertQueryEquals("+small guinea pig", a, "+small (+guinea +pig) cavy");
    assertQueryEquals("-small guinea pig", a, "-small (+guinea +pig) cavy");
    assertQueryEquals("!small guinea pig", a, "-small (+guinea +pig) cavy");
    assertQueryEquals("NOT small guinea pig", a, "-small (+guinea +pig) cavy");
    assertQueryEquals("small* guinea pig", a, "small* (+guinea +pig) cavy");
    assertQueryEquals("small? guinea pig", a, "small? (+guinea +pig) cavy");
    assertQueryEquals("\"small\" guinea pig", a, "small (+guinea +pig) cavy");

    assertQueryEquals("guinea pig +running", a, "(+guinea +pig) cavy +running");
    assertQueryEquals("guinea pig -running", a, "(+guinea +pig) cavy -running");
    assertQueryEquals("guinea pig !running", a, "(+guinea +pig) cavy -running");
    assertQueryEquals("guinea pig NOT running", a, "(+guinea +pig) cavy -running");
    assertQueryEquals("guinea pig running*", a, "(+guinea +pig) cavy running*");
    assertQueryEquals("guinea pig running?", a, "(+guinea +pig) cavy running?");
    assertQueryEquals("guinea pig \"running\"", a, "(+guinea +pig) cavy running");

    assertQueryEquals("\"guinea pig\"~2", a, "spanOr([spanNear([guinea, pig], 0, true), cavy])");

    assertQueryEquals("field:\"guinea pig\"", a, "spanOr([spanNear([guinea, pig], 0, true), cavy])");

    splitOnWhitespace = oldSplitOnWhitespace;
  }

