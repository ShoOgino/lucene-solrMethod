  /**
   * Search an index with facets.
   * 
   * @param indexReader
   *            Reader over the search index.
   * @param taxo
   *            taxonomy reader.
   * @throws Exception
   *             on error (no detailed exception handling here for sample
   *             simplicity
   * @return facet results
   */
  public static List<FacetResult> searchWithFacets(IndexReader indexReader,
      TaxonomyReader taxo, FacetIndexingParams iParams) throws Exception {
    // prepare searcher to search against
    IndexSearcher searcher = new IndexSearcher(indexReader);

    // faceted search is working in 2 steps:
    // 1. collect matching documents
    // 2. aggregate facets for collected documents and
    // generate the requested faceted results from the aggregated facets

    // step 1: create a query for finding matching documents for which we
    // accumulate facets
    Query q = new TermQuery(new Term(SimpleUtils.TEXT, "Quis"));
    ExampleUtils.log("Query: " + q);

    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);

    // Faceted search parameters indicate which facets are we interested in
    List<FacetRequest> facetRequests = new ArrayList<FacetRequest>();
    facetRequests.add(new CountFacetRequest(new CategoryPath("5"), 10));
    facetRequests.add(new CountFacetRequest(new CategoryPath("5", "5"), 10));
    facetRequests.add(new CountFacetRequest(new CategoryPath("6", "2"), 10));
    FacetSearchParams facetSearchParams = new FacetSearchParams(facetRequests, iParams);

    // Facets collector is the simplest interface for faceted search.
    // It provides faceted search functions that are sufficient to many
    // application,
    // although it is insufficient for tight control on faceted search
    // behavior - in those
    // situations other, more low-level interfaces are available, as
    // demonstrated in other search examples.
    FacetsCollector facetsCollector = FacetsCollector.create(facetSearchParams, indexReader, taxo);

    // perform documents search and facets accumulation
    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));

    // Obtain facets results and print them
    List<FacetResult> res = facetsCollector.getFacetResults();

    int i = 0;
    for (FacetResult facetResult : res) {
      ExampleUtils.log("Res " + (i++) + ": " + facetResult);
    }
    return res;
  }

