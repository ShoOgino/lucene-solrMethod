  /**
   * Returns a new term vector entry representing the specified term, and optionally, positions.
   *
   * @param te - positioned terms iterator
   * @return term vector entry
   * @throws IOException - if there is a low level IO error.
   */
  static TermVectorEntry of(TermsEnum te) throws IOException {
    Objects.requireNonNull(te);

    String termText = BytesRefUtils.decode(te.term());

    List<TermVectorEntry.TermVectorPosition> tvPositions = new ArrayList<>();
    PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);
    pe.nextDoc();
    int freq = pe.freq();
    for (int i = 0; i < freq; i++) {
      int pos = pe.nextPosition();
      if (pos < 0) {
        // no position information available
        continue;
      }
      TermVectorPosition tvPos = TermVectorPosition.of(pos, pe);
      tvPositions.add(tvPos);
    }

    return new TermVectorEntry(termText, te.totalTermFreq(), tvPositions);
  }

