  @Override
  public Optional<SortField> getSortType(String name, String type, boolean reverse) {
    Objects.requireNonNull(name);
    Objects.requireNonNull(type);
    List<SortField> candidates = guessSortTypes(name);
    if (candidates.isEmpty()) {
      log.warn(String.format(Locale.ENGLISH, "No available sort types for: %s", name));
      return Optional.empty();
    }

    // TODO should be refactored...
    for (SortField sf : candidates) {
      if (sf instanceof SortedSetSortField) {
        return Optional.of(new SortedSetSortField(sf.getField(), reverse));
      } else if (sf instanceof SortedNumericSortField) {
        SortField.Type sfType = ((SortedNumericSortField) sf).getNumericType();
        if (sfType.name().equals(type)) {
          return Optional.of(new SortedNumericSortField(sf.getField(), sfType, reverse));
        }
      } else {
        SortField.Type sfType = sf.getType();
        if (sfType.name().equals(type)) {
          return Optional.of(new SortField(sf.getField(), sfType, reverse));
        }
      }
    }
    return Optional.empty();
  }

