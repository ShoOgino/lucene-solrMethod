  /**
   * Test comparing different polygon technologies using random
   * biased doubles.
   */
  @Test
  //@AwaitsFix(bugUrl="https://issues.apache.org/jira/browse/LUCENE-8245")
  @Repeat(iterations = 10)
  public void testComparePolygons() {
    final PlanetModel planetModel = randomPlanetModel();
    //Create polygon points using a reference point and a maximum distance to the point
    final GeoPoint referencePoint = getBiasedPoint(planetModel);
    final int n = random().nextInt(4) + 4;
    final List<GeoPoint> points = new ArrayList<>(n);
    final double maxDistance = random().nextDouble() *  Math.PI;
    for (int i = 0; i < n; i++) {
      while(true) {
        final double distance = BiasedNumbers.randomDoubleBetween(random(), 0, maxDistance);// random().nextDouble() * maxDistance;
        final double bearing = random().nextDouble() * 2 * Math.PI;
        GeoPoint p = planetModel.surfacePointOnBearing(referencePoint, distance, bearing);
        if (!contains(p, points)) {
          if (points.size() > 1 && Plane.arePointsCoplanar(points.get(points.size() -1), points.get(points.size() - 2), p)) {
            continue;
          }
          points.add(p);
          break;
        }
      }
    }
    //order points so we don't get crossing edges
    final List<GeoPoint> orderedPoints = orderPoints(points);
    //Comment out below to get clock-wise polygons
    if (random().nextBoolean() && random().nextBoolean()) {
      Collections.reverse(orderedPoints);
    }
    GeoPolygonFactory.PolygonDescription polygonDescription = new GeoPolygonFactory.PolygonDescription(orderedPoints);
    GeoPolygon polygon = null;
    try {
      polygon = GeoPolygonFactory.makeGeoPolygon(planetModel, polygonDescription);
    } catch(Exception e) {
      StringBuilder buffer = new StringBuilder("Polygon failed to build with an exception:\n");
      buffer.append(points.toString()+ "\n");
      buffer.append("WKT:" + getWKT(orderedPoints));
      buffer.append(e.toString());
      fail(buffer.toString());
    }
    if (polygon == null) {
      StringBuilder buffer = new StringBuilder("Polygon failed to build:\n");
      buffer.append(points.toString()+ "\n");
      buffer.append("WKT:" + getWKT(orderedPoints));
      fail(buffer.toString());
    }
    GeoPolygon largePolygon = null;
    try {
      largePolygon = GeoPolygonFactory.makeLargeGeoPolygon(planetModel, Collections.singletonList(polygonDescription));
    } catch(Exception e) {
      StringBuilder buffer = new StringBuilder("Large polygon failed to build with an exception:\n");
      buffer.append(points.toString()+ "\n");
      buffer.append("WKT:" + getWKT(orderedPoints));
      buffer.append(e.toString());
      fail(buffer.toString());
    }
    if (largePolygon == null) {
      StringBuilder buffer = new StringBuilder("Large polygon failed to build:\n");
      buffer.append(points.toString()+ "\n");
      buffer.append("WKT:" + getWKT(orderedPoints));
      fail(buffer.toString());
    }

    for(int i=0;i<100000;i++) {
      GeoPoint point = getBiasedPoint(planetModel);
      boolean withIn1 = polygon.isWithin(point);
      boolean withIn2 = largePolygon.isWithin(point);
      StringBuilder buffer = new StringBuilder();
      if (withIn1 != withIn2) {
        //NOTE: Sometimes we get errors when check point is near a polygon point.
        // For the time being, we filter this errors.
        double d1 = polygon.computeOutsideDistance(DistanceStyle.ARC, point);
        double d2  = largePolygon.computeOutsideDistance(DistanceStyle.ARC, point);
        if (d1 == 0 && d2 == 0) {
          continue;
        }
        buffer = buffer.append("\nStandard polygon: " + polygon.toString() +"\n");
        buffer = buffer.append("\nLarge polygon: " + largePolygon.toString() +"\n");
        buffer = buffer.append("\nPoint: " + point.toString() +"\n");
        buffer.append("\nWKT: " + getWKT(orderedPoints));
        buffer.append("\nWKT: POINT(" + toDegrees(point.getLongitude()) + " " + toDegrees(point.getLatitude()) + ")\n");
        buffer.append("normal polygon: " +withIn1 + "\n");
        buffer.append("large polygon: " + withIn2 + "\n");
      }
      assertTrue(buffer.toString(), withIn1 == withIn2);
    }
    //Not yet tested
//    for(int i=0;i<100;i++) {
//      GeoShape shape = randomGeoShape(randomShapeType(), planetModel);
//      int rel1 = polygon.getRelationship(shape);
//      int rel2 = largePolygon.getRelationship(shape);
//      StringBuilder buffer = new StringBuilder();
//      if (rel1 != rel2) {
//        buffer = buffer.append(polygon.toString() +"\n" + shape.toString() + "\n");
//        buffer.append("WKT: " + getWKT(orderedPoints) + "\n");
//        buffer.append("normal polygon: " + rel1 + "\n");
//        buffer.append("large polygon: " + rel2 + "\n");
//      }
//      assertTrue(buffer.toString(), rel1 == rel2);
//    }
  }

