  /**
   * Test for overlapping shapes. We build a shape that contains part of the
   * geoAreaShape, is disjoint to other part and contains a disjoint shape. We create
   * shapes  according the criteria. The resulting shape should OVERLAP
   * the geoAreaShape.
   */
  @Test
  @Repeat(iterations = 5)
  public void testRandomOverlaps() {
    PlanetModel planetModel = randomPlanetModel();
    int geoAreaShapeType = randomGeoAreaShapeType();
    int shapeType = randomShapeType();

    GeoShape shape = null;
    GeoAreaShape geoAreaShape = null;
    while (shape == null) {
      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);
      Constraints constraints = getEmptyConstraint();
      constraints.put(geoAreaShape,GeoArea.WITHIN);
      GeoAreaShape reference1 = randomGeoAreaShape(CONVEX_SIMPLE_POLYGON, planetModel, constraints);
      if (reference1 == null){
        continue;
      }
      constraints = getEmptyConstraint();
      constraints.put(geoAreaShape, GeoArea.WITHIN);
      constraints.put(reference1, GeoArea.DISJOINT);
      GeoAreaShape reference2 = randomGeoAreaShape(CONVEX_SIMPLE_POLYGON, planetModel, constraints);
      if (reference2 == null){
        continue;
      }
      constraints = getEmptyConstraint();
      constraints.put(geoAreaShape, GeoArea.DISJOINT);
      GeoAreaShape reference3 = randomGeoAreaShape(CONVEX_SIMPLE_POLYGON, planetModel, constraints);
      if (reference3 != null) {
        constraints = new Constraints();
        constraints.put(reference1, GeoArea.DISJOINT);
        constraints.put(reference2, GeoArea.CONTAINS);
        constraints.put(reference3, GeoArea.CONTAINS);
        shape = randomGeoShape(shapeType, planetModel, constraints);
      }
    }
    int rel = geoAreaShape.getRelationship(shape);
    assertEquals(GeoArea.OVERLAPS, rel);
    if (shape instanceof GeoArea) {
      rel = ((GeoArea)shape).getRelationship(geoAreaShape);
      assertEquals(GeoArea.OVERLAPS, rel);
    }
  }

