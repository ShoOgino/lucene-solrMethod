  /**
   * Test for within shapes. We build a shape WITHIN the geoAreaShape and create
   * shapes WITHIN that shape. The resulting shape should be WITHIN
   * to the geoAreaShape.
   *
   * Note that if the geoAreaShape is not concave the other shape must be not concave.
   */
  @Test
  @Repeat(iterations = 5)
  public void testRandomWithIn() {
    PlanetModel planetModel = randomPlanetModel();
    int geoAreaShapeType = randomGeoAreaShapeType();
    int shapeType =randomShapeType();
    int referenceShapeType = CONVEX_SIMPLE_POLYGON;
    if (!isConcave(geoAreaShapeType)){
      shapeType =randomConvexShapeType();
    }
    if(isConcave(shapeType)){//both concave
      referenceShapeType = CONCAVE_SIMPLE_POLYGON;
    }
    GeoShape shape = null;
    GeoAreaShape geoAreaShape = null;
    while (shape == null) {
      geoAreaShape = randomGeoAreaShape(geoAreaShapeType, planetModel);
      Constraints constraints = new Constraints();
      constraints.put(geoAreaShape, GeoArea.WITHIN);
      GeoAreaShape reference = randomGeoAreaShape(referenceShapeType, planetModel, constraints);
      if (reference != null) {
        constraints = new Constraints();
        constraints.put(reference, GeoArea.WITHIN);
        shape = randomGeoShape(shapeType, planetModel, constraints);
      }
    }
    int rel = geoAreaShape.getRelationship(shape);
    assertEquals(GeoArea.WITHIN, rel);
    if (shape instanceof GeoArea) {
      rel = ((GeoArea)shape).getRelationship(geoAreaShape);
      assertEquals(GeoArea.CONTAINS, rel);
    }
  }

