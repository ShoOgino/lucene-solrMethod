  /**
   * step through some integers, ensuring they decode to their expected double values.
   * double values start at -planetMax and increase by Geo3DUtil.DECODE for each integer.
   * check edge cases within the double range and random doubles within the range too.
   */
  public void testQuantization() throws Exception {
    Random random = random();
    for (int i = 0; i < 10000; i++) {
      int encoded = random.nextInt();
      if (encoded <= Geo3DUtil.MIN_ENCODED_VALUE) {
        continue;
      }
      if (encoded >= Geo3DUtil.MAX_ENCODED_VALUE) {
        continue;
      }
      double min = encoded * Geo3DUtil.DECODE;
      double decoded = Geo3DUtil.decodeValueFloor(encoded);
      // should exactly equal expected value
      assertEquals(min, decoded, 0.0D);
      // should round-trip
      assertEquals(encoded, Geo3DUtil.encodeValue(decoded));
      // test within the range
      if (encoded != Integer.MAX_VALUE) {
        // this is the next representable value
        // all double values between [min .. max) should encode to the current integer
        double max = min + Geo3DUtil.DECODE;
        assertEquals(max, Geo3DUtil.decodeValueFloor(encoded+1), 0.0D);
        assertEquals(encoded+1, Geo3DUtil.encodeValue(max));

        // first and last doubles in range that will be quantized
        double minEdge = Math.nextUp(min);
        double maxEdge = Math.nextDown(max);
        assertEquals(encoded, Geo3DUtil.encodeValue(minEdge));
        assertEquals(encoded, Geo3DUtil.encodeValue(maxEdge));

        // check random values within the double range
        long minBits = NumericUtils.doubleToSortableLong(minEdge);
        long maxBits = NumericUtils.doubleToSortableLong(maxEdge);
        for (int j = 0; j < 100; j++) {
          double value = NumericUtils.sortableLongToDouble(TestUtil.nextLong(random, minBits, maxBits));
          // round down
          assertEquals(encoded,   Geo3DUtil.encodeValue(value));
        }
      }
    }
  }

