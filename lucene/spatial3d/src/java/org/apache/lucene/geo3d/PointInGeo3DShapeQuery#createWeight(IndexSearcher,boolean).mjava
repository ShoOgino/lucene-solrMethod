  @Override
  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {

    // I don't use RandomAccessWeight here: it's no good to approximate with "match all docs"; this is an inverted structure and should be
    // used in the first pass:

    return new ConstantScoreWeight(this) {

      @Override
      public Scorer scorer(LeafReaderContext context) throws IOException {
        LeafReader reader = context.reader();
        PointValues values = reader.getPointValues();
        if (values == null) {
          return null;
        }

        /*
        XYZBounds bounds = new XYZBounds();
        shape.getBounds(bounds);

        final double planetMax = planetModel.getMaximumMagnitude();
        if (planetMax != treeDV.planetMax) {
          throw new IllegalStateException(planetModel + " is not the same one used during indexing: planetMax=" + planetMax + " vs indexing planetMax=" + treeDV.planetMax);
        }
        */

        /*
        GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel,
                                                      bounds.getMinimumX(),
                                                      bounds.getMaximumX(),
                                                      bounds.getMinimumY(),
                                                      bounds.getMaximumY(),
                                                      bounds.getMinimumZ(),
                                                      bounds.getMaximumZ());

        assert xyzSolid.getRelationship(shape) == GeoArea.WITHIN || xyzSolid.getRelationship(shape) == GeoArea.OVERLAPS: "expected WITHIN (1) or OVERLAPS (2) but got " + xyzSolid.getRelationship(shape) + "; shape="+shape+"; XYZSolid="+xyzSolid;
        */

        double planetMax = planetModel.getMaximumMagnitude();

        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc());

        values.intersect(field,
                         new IntersectVisitor() {

                           @Override
                           public void visit(int docID) {
                             result.add(docID);
                           }

                           @Override
                           public void visit(int docID, byte[] packedValue) {
                             assert packedValue.length == 12;
                             double x = Geo3DPoint.decodeDimension(planetModel, packedValue, 0);
                             double y = Geo3DPoint.decodeDimension(planetModel, packedValue, Integer.BYTES);
                             double z = Geo3DPoint.decodeDimension(planetModel, packedValue, 2 * Integer.BYTES);
                             if (shape.isWithin(x, y, z)) {
                               result.add(docID);
                             }
                           }

                           @Override
                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {
                             // Because the dimensional format operates in quantized (64 bit -> 32 bit) space, and the cell bounds
                             // here are inclusive, we need to extend the bounds to the largest un-quantized values that
                             // could quantize into these bounds.  The encoding (Geo3DUtil.encodeValue) does
                             // a Math.round from double to long, so e.g. 1.4 -> 1, and -1.4 -> -1:
                             double xMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 0));
                             double xMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 0));
                             double yMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 1 * Integer.BYTES));
                             double yMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 1 * Integer.BYTES));
                             double zMin = Geo3DUtil.decodeValueMin(planetMax, NumericUtils.sortableBytesToInt(minPackedValue, 2 * Integer.BYTES));
                             double zMax = Geo3DUtil.decodeValueMax(planetMax, NumericUtils.sortableBytesToInt(maxPackedValue, 2 * Integer.BYTES));

                             //System.out.println("  compare: x=" + cellXMin + "-" + cellXMax + " y=" + cellYMin + "-" + cellYMax + " z=" + cellZMin + "-" + cellZMax);
                             assert xMin <= xMax;
                             assert yMin <= yMax;
                             assert zMin <= zMax;

                             GeoArea xyzSolid = GeoAreaFactory.makeGeoArea(planetModel, xMin, xMax, yMin, yMax, zMin, zMax);

                             switch(xyzSolid.getRelationship(shape)) {
                             case GeoArea.CONTAINS:
                               // Shape fully contains the cell
                               //System.out.println("    inside");
                               return Relation.CELL_INSIDE_QUERY;
                             case GeoArea.OVERLAPS:
                               // They do overlap but neither contains the other:
                               //System.out.println("    crosses1");
                               return Relation.CELL_CROSSES_QUERY;
                             case GeoArea.WITHIN:
                               // Cell fully contains the shape:
                               //System.out.println("    crosses2");
                               // return Relation.SHAPE_INSIDE_CELL;
                               return Relation.CELL_CROSSES_QUERY;
                             case GeoArea.DISJOINT:
                               // They do not overlap at all
                               //System.out.println("    outside");
                               return Relation.CELL_OUTSIDE_QUERY;
                             default:
                               assert false;
                               return Relation.CELL_CROSSES_QUERY;
                             }
                           }
                         });

        return new ConstantScoreScorer(this, score(), result.build().iterator());
      }
    };
  }

