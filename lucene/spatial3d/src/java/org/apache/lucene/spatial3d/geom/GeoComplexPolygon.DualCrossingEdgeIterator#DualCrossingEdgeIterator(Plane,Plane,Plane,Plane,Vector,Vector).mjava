    public DualCrossingEdgeIterator(final Plane testPointPlane, final Plane testPointAbovePlane, final Plane testPointBelowPlane,
      final Plane travelPlane, final Vector testPoint, final Vector thePoint) {
      this.testPointPlane = testPointPlane;
      this.testPointAbovePlane = testPointAbovePlane;
      this.testPointBelowPlane = testPointBelowPlane;
      this.travelPlane = travelPlane;
      this.thePoint = thePoint;
      this.travelAbovePlane = new Plane(travelPlane, true);
      this.travelBelowPlane = new Plane(travelPlane, false);
      this.testPointCutoffPlane = new SidedPlane(thePoint, testPointPlane, testPoint);
      this.checkPointCutoffPlane = new SidedPlane(testPoint, travelPlane, thePoint);
      // Now, find the intersection of the check and test point planes.
      final GeoPoint[] intersectionPoints = travelPlane.findIntersections(planetModel, testPointPlane, testPointCutoffPlane, checkPointCutoffPlane);
      assert intersectionPoints != null : "couldn't find any intersections";
      assert intersectionPoints.length != 1 : "wrong number of intersection points";
      this.testPointOtherCutoffPlane = new SidedPlane(testPoint, testPointPlane, intersectionPoints[0]);
      this.checkPointOtherCutoffPlane = new SidedPlane(thePoint, travelPlane, intersectionPoints[0]);
    
    }

