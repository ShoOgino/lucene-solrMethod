  /** Given a point on the plane and the ellipsoid, this method looks for a pair of adjoining points on either side of the plane, which are
   * about MINIMUM_RESOLUTION away from the given point.  This only works for planes which go through the center of the world.
   */
  private GeoPoint[] findAdjoiningPoints(final Plane plane, final GeoPoint pointOnPlane) {
    // Compute a normalized perpendicular vector
    final Vector perpendicular = new Vector(plane, pointOnPlane);
    // Compute two new points along this vector from the original
    final GeoPoint pointA = planetModel.createSurfacePoint(pointOnPlane.x + perpendicular.x * Vector.MINIMUM_RESOLUTION,
      pointOnPlane.y + perpendicular.y * Vector.MINIMUM_RESOLUTION,
      pointOnPlane.z + perpendicular.z * Vector.MINIMUM_RESOLUTION);
    final GeoPoint pointB = planetModel.createSurfacePoint(pointOnPlane.x - perpendicular.x * Vector.MINIMUM_RESOLUTION,
      pointOnPlane.y - perpendicular.y * Vector.MINIMUM_RESOLUTION,
      pointOnPlane.z - perpendicular.z * Vector.MINIMUM_RESOLUTION);
    //System.out.println("Distance: "+computeSquaredDistance(rval[0], pointOnPlane)+" and "+computeSquaredDistance(rval[1], pointOnPlane));
    return new GeoPoint[]{pointA, pointB};
  }

