    /** Traverse the tree, finding all edges that intersect the provided value range.
     * @param edgeIterator provides the method to call for any encountered matching edge.
     *   Edges will not be invoked more than once.
     * @param minValue is the minimum value.
     * @param maxValue is the maximum value.
     * @return false if the traversal was aborted before completion.
     */
    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {
      // This is tricky because edges are duplicated in the tree (where they got split).
      // We need to eliminate those duplicate edges as we traverse.  This requires us to keep a set of edges we've seen.
      // Luckily, the number of edges we're likely to encounter in a real-world situation is small, so we can get away with it.
      return traverseEdges(rootNode, edgeIterator, minValue, maxValue, new HashSet<>());
    }

