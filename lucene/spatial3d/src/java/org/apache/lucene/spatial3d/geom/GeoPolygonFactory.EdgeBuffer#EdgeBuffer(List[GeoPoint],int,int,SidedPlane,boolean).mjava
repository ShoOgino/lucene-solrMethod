    /** Constructor.
      * @param pointList is the list of points.
      * @param startPlaneStartIndex is the index of the startPlane's starting point
      * @param startPlaneEndIndex is the index of the startPlane's ending point
      * @param startPlane is the starting plane
      * @param startPlaneIsInternal signals whether the startPlane is an internal edge
      */
    public EdgeBuffer(final List<GeoPoint> pointList, final int startPlaneStartIndex, final int startPlaneEndIndex, final SidedPlane startPlane, final boolean startPlaneIsInternal) {
      /*
      System.out.println("Initial points:");
      for (final GeoPoint p : pointList) {
        System.out.println(" "+p);
      }
      System.out.println("For start plane, the following points are in/out:");
      for (final GeoPoint p: pointList) {
        System.out.println(" "+p+" is: "+(startPlane.isWithin(p)?"in":"out"));
      }
      */
      
      final Edge startEdge = new Edge(pointList.get(startPlaneStartIndex), pointList.get(startPlaneEndIndex), startPlane, startPlaneIsInternal);
      // Fill in the EdgeBuffer by walking around creating more stuff
      Edge currentEdge = startEdge;
      int startIndex = startPlaneStartIndex;
      int endIndex = startPlaneEndIndex;
      boolean isInternal = startPlaneIsInternal;
      while (true) {
        // Compute the next edge
        startIndex = endIndex;
        endIndex++;
        if (endIndex >= pointList.size()) {
          endIndex -= pointList.size();
        }
        // Get the next point
        final GeoPoint newPoint = pointList.get(endIndex);
        // Build the new edge
        final boolean isNewPointWithin = currentEdge.plane.isWithin(newPoint);
        final SidedPlane newPlane = new SidedPlane(currentEdge.startPoint, isNewPointWithin, pointList.get(startIndex), newPoint);
        /*
        System.out.println("For next plane, the following points are in/out:");
        for (final GeoPoint p: pointList) {
          System.out.println(" "+p+" is: "+(newPlane.isWithin(p)?"in":"out"));
        }
        */
        final Edge newEdge = new Edge(pointList.get(startIndex), pointList.get(endIndex), newPlane, false);
        
        // Link it in
        previousEdges.put(newEdge, currentEdge);
        nextEdges.put(currentEdge, newEdge);
        edges.add(newEdge);
        currentEdge = newEdge;

        if (currentEdge.endPoint == startEdge.startPoint) {
          // We finish here.  Link the current edge to the start edge, and exit
          previousEdges.put(startEdge, currentEdge);
          nextEdges.put(currentEdge, startEdge);
          edges.add(startEdge);
          break;
        }
      }
      
      oneEdge = startEdge;
      
      // Verify the structure. 
      //verify();
    }

