  /** Read an object from a stream (for objects that need a PlanetModel).
   * @param planetModel is the planet model to use to deserialize the object.
   * @param inputStream is the input stream.
   * @return the deserialized object.
   */
  static SerializableObject readObject(final PlanetModel planetModel, final InputStream inputStream) throws IOException {
    // Read the class name
    final String className = readString(inputStream);
    try {
      // Look for the class
      final Class<?> clazz = Class.forName(className);
      // Look for the right constructor
      final Constructor<?> c = clazz.getDeclaredConstructor(PlanetModel.class, InputStream.class);
      // Invoke it
      final Object object = c.newInstance(planetModel, inputStream);
      // check whether caste will work
      if (!(object instanceof SerializableObject)) {
        throw new IOException("Object "+className+" does not implement SerializableObject");
      }
      return (SerializableObject)object;
    } catch (ClassNotFoundException e) {
      throw new IOException("Can't find class "+className+" for deserialization: "+e.getMessage(), e);
    } catch (InstantiationException e) {
      throw new IOException("Instantiation exception for class "+className+": "+e.getMessage(), e);
    } catch (IllegalAccessException e) {
      throw new IOException("Illegal access creating class "+className+": "+e.getMessage(), e);
    } catch (NoSuchMethodException e) {
      throw new IOException("No such method exception for class "+className+": "+e.getMessage(), e);
    } catch (InvocationTargetException e) {
      throw new IOException("Exception instantiating class "+className+": "+e.getMessage(), e);
    }
  }

