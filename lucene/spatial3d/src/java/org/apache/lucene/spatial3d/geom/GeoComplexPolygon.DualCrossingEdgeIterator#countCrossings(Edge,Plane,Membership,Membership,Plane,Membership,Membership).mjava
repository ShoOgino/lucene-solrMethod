    /** Find the intersections with a pair of envelope planes, and assess those intersections for duplication and for
      * whether they truly describe crossings.
      */
    private int countCrossings(final Edge edge,
      final Plane travelEnvelopePlane, final Membership travelEnvelopeBound1, final Membership travelEnvelopeBound2,
      final Plane testPointEnvelopePlane, final Membership testPointEnvelopeBound1, final Membership testPointEnvelopeBound2) {
      final GeoPoint[] travelIntersections = edge.plane.findIntersections(planetModel, travelEnvelopePlane, edge.startPlane, edge.endPlane, travelEnvelopeBound1, travelEnvelopeBound2);
      final GeoPoint[] testPointIntersections = edge.plane.findIntersections(planetModel, testPointEnvelopePlane, edge.startPlane, edge.endPlane, testPointEnvelopeBound1, testPointEnvelopeBound2);
      int crossings = 0;
      if (travelIntersections != null) {
        for (final GeoPoint intersection : travelIntersections) {
          // Make sure it's not a dup
          boolean notDup = true;
          if (testPointIntersections != null) {
            for (final GeoPoint otherIntersection : testPointIntersections) {
              if (intersection.isNumericallyIdentical(otherIntersection)) {
                //System.out.println("  Points "+intersection+" and "+otherIntersection+" are duplicates");
                notDup = false;
                break;
              }
            }
          }
          if (!notDup) {
            continue;
          }
          // It's unique, so assess it
          //System.out.println("  Assessing travel envelope intersection point "+intersection+"...");
          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;
        }
      }
      if (testPointIntersections != null) {
        for (final GeoPoint intersection : testPointIntersections) {
          // It's unique, so assess it
          //System.out.println("  Assessing testpoint envelope intersection point "+intersection+"...");
          crossings += edgeCrossesEnvelope(edge.plane, intersection)?1:0;
        }
      }
      return crossings;
    }

