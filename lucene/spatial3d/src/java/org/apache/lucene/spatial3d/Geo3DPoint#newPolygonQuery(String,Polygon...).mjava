  /** 
   * Create a query for matching a polygon.
   * <p>
   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.
   * @param field field name. must not be null.
   * @param polygons is the list of polygons to use to construct the query; must be at least one.
   * @return query matching points within this polygon
   */
  public static Query newPolygonQuery(final String field, final Polygon... polygons) {
    //System.err.println("Creating polygon...");
    if (polygons.length < 1) {
      throw new IllegalArgumentException("need at least one polygon");
    }
    final GeoShape shape;
    if (polygons.length == 1) {
      final GeoShape component = fromPolygon(polygons[0], false);
      if (component == null) {
        // Polygon is degenerate
        shape = new GeoCompositePolygon();
      } else {
        shape = component;
      }
    } else {
      final GeoCompositePolygon poly = new GeoCompositePolygon();
      for (final Polygon p : polygons) {
        final GeoPolygon component = fromPolygon(p, false);
        if (component != null) {
          poly.addShape(component);
        }
      }
      shape = poly;
    }
    //System.err.println("...done");
    return newShapeQuery(field, shape);
  }

