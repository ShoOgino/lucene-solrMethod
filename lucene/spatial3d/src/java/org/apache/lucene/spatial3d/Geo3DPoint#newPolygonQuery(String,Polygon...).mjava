  /** 
   * Create a query for matching a polygon.
   * <p>
   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.
   * @param field field name. must not be null.
   * @param polygons is the list of polygons to use to construct the query; must be at least one.
   * @return query matching points within this polygon
   */
  public static Query newPolygonQuery(final String field, final Polygon... polygons) {
    if (polygons.length < 1) {
      throw new IllegalArgumentException("need at least one polygon");
    }
    final GeoShape shape;
    if (polygons.length == 1) {
      shape = fromPolygon(polygons[0], false);
    } else {
      final GeoCompositePolygon poly = new GeoCompositePolygon();
      for (final Polygon p : polygons) {
        poly.addShape(fromPolygon(p, false));
      }
      shape = poly;
    }
    return newShapeQuery(field, shape);
  }

