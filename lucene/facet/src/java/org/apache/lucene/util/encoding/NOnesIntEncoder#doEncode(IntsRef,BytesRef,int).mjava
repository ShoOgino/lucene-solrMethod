  @Override
  protected void doEncode(IntsRef values, BytesRef buf, int upto) {
    // make sure the internal buffer is large enough
    if (values.length > internalBuffer.ints.length) {
      internalBuffer.grow(values.length);
    }
    
    int onesCounter = 0;
    for (int i = values.offset; i < upto; i++) {
      int value = values.ints[i];
      if (value == 1) {
        // every N 1's should be encoded as '2'
        if (++onesCounter == n) {
          internalBuffer.ints[internalBuffer.length++] = 2;
          onesCounter = 0;
        }
      } else {
        // there might have been 1's that we need to encode
        while (onesCounter > 0) {
          --onesCounter;
          internalBuffer.ints[internalBuffer.length++] = 1;
        }
        
        // encode value as value+1
        internalBuffer.ints[internalBuffer.length++] = value + 1;
      }
    }
    // there might have been 1's that we need to encode
    while (onesCounter > 0) {
      --onesCounter;
      internalBuffer.ints[internalBuffer.length++] = 1;
    }
    super.doEncode(internalBuffer, buf, internalBuffer.length);
  }

