  /**
   * writes a given byte[], with offset and length to the buffer. If the
   * buffer's empty space is insufficient, the buffer is doubled until it
   * could contain all the data.
   * 
   * @param b
   *            byte buffer, containing the source data to be written
   * @param off
   *            index from which data from the buffer b should be written
   * @param len
   *            number of bytes that should be written
   */
  @Override
  public void write(byte[] b, int off, int len) throws IOException {
    // If there's not enough space for the data
    int targetLength = index + len;
    if (targetLength >= buffer.length) {
      // Calculating the new required length of the array, keeping the array
      // size a power of 2 if it was initialized like that.
      int newlen = buffer.length;
      while ((newlen <<= 1) < targetLength) {}
      grow(newlen);
    }

    // Now that we have enough spare space, we could copy the rest of the
    // data
    System.arraycopy(b, off, buffer, index, len);

    // Updating the index to next available index.
    index += len;
  }

