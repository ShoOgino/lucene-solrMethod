  /**
   * Set the categories of the document builder from an {@link Iterable} of
   * {@link CategoryAttribute} objects.
   * 
   * @param categories
   *            An iterable of {@link CategoryAttribute} objects which holds
   *            the categories (facets) which will be added to the document at
   *            {@link #build(Document)}
   * @return This CategoryDocumentBuilder, to enable this one line call:
   *         {@code new} {@link #CategoryDocumentBuilder(TaxonomyWriter)}.
   *         {@link #setCategories(Iterable)}.{@link #build(Document)}.
   * @throws IOException If there is a low-level I/O error.
   */
  public CategoryDocumentBuilder setCategories(
      Iterable<CategoryAttribute> categories) throws IOException {
    fieldList.clear();
    if (categories == null) {
      return this;
    }

    // get field-name to a list of facets mapping as different facets could
    // be added to different category-lists on different fields
    fillCategoriesMap(categories);

    // creates a different stream for each different field
    for (Entry<String, List<CategoryAttribute>> e : categoriesMap
        .entrySet()) {
      // create a category attributes stream for the array of facets
      CategoryAttributesStream categoryAttributesStream = new CategoryAttributesStream(
          e.getValue());

      // Set a suitable {@link TokenStream} using
      // CategoryParentsStream, followed by CategoryListTokenizer and
      // CategoryTokenizer composition (the ordering of the last two is
      // not mandatory).
      CategoryParentsStream parentsStream = (CategoryParentsStream) getParentsStream(categoryAttributesStream);
      CategoryListTokenizer categoryListTokenizer = getCategoryListTokenizer(parentsStream);
      CategoryTokenizer stream = getCategoryTokenizer(categoryListTokenizer);

      // Finally creating a suitable field with stream and adding it to a
      // master field-list, used during the build process (see
      // super.build())
      FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);
      ft.setOmitNorms(true);
      fieldList.add(new Field(e.getKey(), stream, ft));
    }

    return this;
  }

