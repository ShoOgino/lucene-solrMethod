  // fetch top K for specific partition. 
  @Override
  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)
  throws IOException {
    TopKFacetResult res = null;
    int ordinal = taxonomyReader.getOrdinal(facetRequest.getCategoryPath());
    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {
      double value = 0;  
      if (isSelfPartition(ordinal, facetArrays, offset)) {
        int partitionSize = facetArrays.arrayLength;
        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);
      }
      
      // TODO (Facet): should initial value of "residue" depend on aggregator if not sum?
      MutableFacetResultNode parentResultNode = 
        new MutableFacetResultNode(ordinal, value);
      
      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);
      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);
      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);
      res.setHeap(heap);
    }
    return res;
  }

