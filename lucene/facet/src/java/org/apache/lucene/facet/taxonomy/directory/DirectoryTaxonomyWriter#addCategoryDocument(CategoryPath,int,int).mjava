  // Note that the methods calling addCategoryDocument() are synchornized,
  // so this method is effectively synchronized as well, but we'll add
  // synchronized to be on the safe side, and we can reuse class-local objects
  // instead of allocating them every time
  protected synchronized int addCategoryDocument(CategoryPath categoryPath,
                                                  int length, int parent)
      throws CorruptIndexException, IOException {
    // Before Lucene 2.9, position increments >=0 were supported, so we
    // added 1 to parent to allow the parent -1 (the parent of the root).
    // Unfortunately, starting with Lucene 2.9, after LUCENE-1542, this is
    // no longer enough, since 0 is not encoded consistently either (see
    // comment in SinglePositionTokenStream). But because we must be
    // backward-compatible with existing indexes, we can't just fix what
    // we write here (e.g., to write parent+2), and need to do a workaround
    // in the reader (which knows that anyway only category 0 has a parent
    // -1).    
    parentStream.set(parent+1);
    Document d = new Document();
    d.add(parentStreamField);

    fullPathField.setStringValue(categoryPath.toString(delimiter, length));
    d.add(fullPathField);

    // Note that we do no pass an Analyzer here because the fields that are
    // added to the Document are untokenized or contains their own TokenStream.
    // Therefore the IndexWriter's Analyzer has no effect.
    indexWriter.addDocument(d);
    int id = nextID++;

    addToCache(categoryPath, length, id);

    // also add to the parent array
    getParentArray().add(id, parent);

    return id;
  }

