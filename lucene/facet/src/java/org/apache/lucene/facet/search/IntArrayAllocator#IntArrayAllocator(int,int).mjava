  /**
   * Construct an allocator for counter arrays of length <CODE>length</CODE>,
   * keeping around a pool of up to <CODE>maxArrays</CODE> old arrays.
   * <P>
   * Note that the pool size only restricts the number of arrays that hang
   * around when not needed, but <I>not</I> the maximum number of arrays
   * that are allocated when actually is use: If a number of concurrent
   * threads ask for an allocation, all of them will get a counter array,
   * even if their number is greater than maxArrays. If an application wants
   * to limit the number of concurrent threads making allocations, it needs
   * to do so on its own - for example by blocking new threads until the
   * existing ones have finished.
   * <P>
   * In particular, when maxArrays=0, this object behaves as a trivial
   * allocator, always allocating a new array and never reusing an old one. 
   */
  public IntArrayAllocator(int length, int maxArrays) {
    super(maxArrays);
    this.length = length;
  }

