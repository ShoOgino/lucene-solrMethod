  /**
   * Search, collecting hits with a {@link Collector}, and
   * computing drill down and sideways counts.
   */
  public DrillSidewaysResult search(DrillDownQuery query,
                                    Collector hitCollector, FacetSearchParams fsp) throws IOException {

    Map<String,Integer> drillDownDims = query.getDims();

    if (drillDownDims.isEmpty()) {
      throw new IllegalArgumentException("there must be at least one drill-down");
    }

    BooleanQuery ddq = query.getBooleanQuery();
    BooleanClause[] clauses = ddq.getClauses();

    for(FacetRequest fr :  fsp.facetRequests) {
      if (fr.categoryPath.length == 0) {
        throw new IllegalArgumentException("all FacetRequests must have CategoryPath with length > 0");
      }
    }

    Query baseQuery;
    int startClause;
    if (clauses.length == drillDownDims.size()) {
      // TODO: we could optimize this pure-browse case by
      // making a custom scorer instead:
      baseQuery = new MatchAllDocsQuery();
      startClause = 0;
    } else {
      assert clauses.length == 1+drillDownDims.size();
      baseQuery = clauses[0].getQuery();
      startClause = 1;
    }

    Term[][] drillDownTerms = new Term[clauses.length-startClause][];
    for(int i=startClause;i<clauses.length;i++) {
      Query q = clauses[i].getQuery();
      assert q instanceof ConstantScoreQuery;
      q = ((ConstantScoreQuery) q).getQuery();
      assert q instanceof TermQuery || q instanceof BooleanQuery;
      if (q instanceof TermQuery) {
        drillDownTerms[i-startClause] = new Term[] {((TermQuery) q).getTerm()};
      } else {
        BooleanQuery q2 = (BooleanQuery) q;
        BooleanClause[] clauses2 = q2.getClauses();
        drillDownTerms[i-startClause] = new Term[clauses2.length];
        for(int j=0;j<clauses2.length;j++) {
          assert clauses2[j].getQuery() instanceof TermQuery;
          drillDownTerms[i-startClause][j] = ((TermQuery) clauses2[j].getQuery()).getTerm();
        }
      }
    }

    FacetsCollector drillDownCollector = FacetsCollector.create(getDrillDownAccumulator(fsp));

    FacetsCollector[] drillSidewaysCollectors = new FacetsCollector[drillDownDims.size()];

    int idx = 0;
    for(String dim : drillDownDims.keySet()) {
      FacetRequest drillSidewaysRequest = null;
      for(FacetRequest fr : fsp.facetRequests) {
        assert fr.categoryPath.length > 0;
        if (fr.categoryPath.components[0].equals(dim)) {
          if (drillSidewaysRequest != null) {
            throw new IllegalArgumentException("multiple FacetRequests for drill-sideways dimension \"" + dim + "\"");
          }
          drillSidewaysRequest = fr;
        }
      }
      if (drillSidewaysRequest == null) {
        throw new IllegalArgumentException("could not find FacetRequest for drill-sideways dimension \"" + dim + "\"");
      }
      drillSidewaysCollectors[idx++] = FacetsCollector.create(getDrillSidewaysAccumulator(dim, new FacetSearchParams(fsp.indexingParams, drillSidewaysRequest)));
    }

    DrillSidewaysQuery dsq = new DrillSidewaysQuery(baseQuery, drillDownCollector, drillSidewaysCollectors, drillDownTerms);

    searcher.search(dsq, hitCollector);

    List<FacetResult> drillDownResults = drillDownCollector.getFacetResults();

    List<FacetResult> mergedResults = new ArrayList<FacetResult>();
    for(int i=0;i<fsp.facetRequests.size();i++) {
      FacetRequest fr = fsp.facetRequests.get(i);
      assert fr.categoryPath.length > 0;
      Integer dimIndex = drillDownDims.get(fr.categoryPath.components[0]);
      if (dimIndex == null) {
        // Pure drill down dim (the current query didn't
        // drill down on this dim):
        mergedResults.add(drillDownResults.get(i));
      } else {
        // Drill sideways dim:
        List<FacetResult> sidewaysResult = drillSidewaysCollectors[dimIndex.intValue()].getFacetResults();

        assert sidewaysResult.size() == 1: "size=" + sidewaysResult.size();
        mergedResults.add(sidewaysResult.get(0));
      }
    }

    return new DrillSidewaysResult(mergedResults, null);
  }

