  /** Used when base query is highly constraining vs the
   *  drilldowns; in this case we just .next() on base and
   *  .advance() on the dims. */
  private void doBaseAdvanceScoring(Collector collector, DocsEnum[][] docsEnums, Collector[] sidewaysCollectors) throws IOException {
    //if (DEBUG) {
    //  System.out.println("  doBaseAdvanceScoring");
    //}
    int docID = baseScorer.docID();

    final int numDims = dims.length;

    nextDoc: while (docID != NO_MORE_DOCS) {
      int failedDim = -1;
      for(int dim=0;dim<numDims;dim++) {
        // TODO: should we sort this 2nd dimension of
        // docsEnums from most frequent to least?
        boolean found = false;
        for(DocsEnum docsEnum : docsEnums[dim]) {
          if (docsEnum == null) {
            continue;
          }
          if (docsEnum.docID() < docID) {
            docsEnum.advance(docID);
          }
          if (docsEnum.docID() == docID) {
            found = true;
            break;
          }
        }
        if (!found) {
          if (failedDim != -1) {
            // More than one dim fails on this document, so
            // it's neither a hit nor a near-miss; move to
            // next doc:
            docID = baseScorer.nextDoc();
            continue nextDoc;
          } else {
            failedDim = dim;
          }
        }
      }

      collectDocID = docID;

      // TODO: we could score on demand instead since we are
      // daat here:
      collectScore = baseScorer.score();

      if (failedDim == -1) {
        collectHit(collector, sidewaysCollectors);
      } else {
        collectNearMiss(sidewaysCollectors, failedDim);
      }

      docID = baseScorer.nextDoc();
    }
  }

