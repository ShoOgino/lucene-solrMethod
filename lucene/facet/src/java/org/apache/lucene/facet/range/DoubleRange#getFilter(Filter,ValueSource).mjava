  @Override
  public Filter getFilter(final Filter fastMatchFilter, final ValueSource valueSource) {
    return new Filter() {

      @Override
      public String toString(String field) {
        return "Filter(" + DoubleRange.this.toString() + ")";
      }

      @Override
      public DocIdSet getDocIdSet(LeafReaderContext context, final Bits acceptDocs) throws IOException {

        // TODO: this is just like ValueSourceScorer,
        // ValueSourceFilter (spatial),
        // ValueSourceRangeFilter (solr); also,
        // https://issues.apache.org/jira/browse/LUCENE-4251

        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);

        final int maxDoc = context.reader().maxDoc();

        final DocIdSet fastMatchDocs;
        if (fastMatchFilter != null) {
          fastMatchDocs = fastMatchFilter.getDocIdSet(context, null);
          if (fastMatchDocs == null) {
            // No documents match
            return null;
          }
        } else {
          fastMatchDocs = new DocIdSet() {
            @Override
            public long ramBytesUsed() {
              return 0;
            }
            @Override
            public DocIdSetIterator iterator() throws IOException {
              return DocIdSetIterator.all(maxDoc);
            }
          };
        }

        return new FilteredDocIdSet(fastMatchDocs) {
          @Override
          protected boolean match(int docID) {
            if (acceptDocs != null && acceptDocs.get(docID) == false) {
              return false;
            }
            return accept(values.doubleVal(docID));
          }
        };
      }
    };
  }

