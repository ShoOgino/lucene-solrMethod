  /**
   * Removes a &lt;key,value&gt; pair from the map and returns the mapped value,
   * or {@link Float#NaN} if the none existed.
   * 
   * @param key used to find the value to remove
   * @return the removed value or {@link Float#NaN} if none existed.
   */
  public float remove(int key) {
    int baseHashIndex = calcBaseHashIndex(key);
    int index = findForRemove(key, baseHashIndex);
    if (index != 0) {
      // If it is the first in the collision list, we should promote its
      // next colliding element.
      if (prev == 0) {
        baseHash[baseHashIndex] = next[index];
      }

      next[prev] = next[index];
      next[index] = firstEmpty;
      firstEmpty = index;
      --size;
      return values[index];
    }

    return Float.NaN;
  }

