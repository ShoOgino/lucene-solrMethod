  /**
   * Trim sub results to a given size.
   * <p>
   * Note: Although the {@link #getResidue()} is not guaranteed to be
   * accurate, it is worth fixing it, as possible, by taking under account the
   * trimmed sub-nodes.
   */
  public void trimSubResults(int size) {
    if (subResults == null || subResults.size() == 0) {
      return;
    }

    ArrayList<FacetResultNode> trimmed = new ArrayList<FacetResultNode>(size);
    for (int i = 0; i < subResults.size() && i < size; i++) {
      MutableFacetResultNode trimmedNode = toImpl(subResults.get(i));
      trimmedNode.trimSubResults(size);
      trimmed.add(trimmedNode);
    }
    
    /*
     * If we are trimming, it means Sampling is in effect and the extra
     * (over-sampled) results are being trimmed. Although the residue is not
     * guaranteed to be accurate for Sampling, we try our best to fix it.
     * The node's residue now will take under account the sub-nodes we're
     * trimming.
     */
    for (int i = size; i < subResults.size(); i++) {
      increaseResidue(subResults.get(i).getValue());
    }
    
    subResults = trimmed;
  }

