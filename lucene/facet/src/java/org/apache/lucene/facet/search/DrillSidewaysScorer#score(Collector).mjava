  @Override
  public void score(Collector collector) throws IOException {
    //if (DEBUG) {
    //  System.out.println("\nscore: reader=" + context.reader());
    //}
    //System.out.println("score r=" + context.reader());
    collector.setScorer(this);
    drillDownCollector.setScorer(this);
    drillDownCollector.setNextReader(context);
    for(DocsEnumsAndFreq dim : dims) {
      dim.sidewaysCollector.setScorer(this);
      dim.sidewaysCollector.setNextReader(context);
    }

    // TODO: if we ever allow null baseScorer ... it will
    // mean we DO score docs out of order ... hmm, or if we
    // change up the order of the conjuntions below
    assert baseScorer != null;

    // Position all scorers to their first matching doc:
    baseScorer.nextDoc();
    for(DocsEnumsAndFreq dim : dims) {
      for(DocsEnum docsEnum : dim.docsEnums) {
        if (docsEnum != null) {
          docsEnum.nextDoc();
        }
      }
    }

    final int numDims = dims.length;

    DocsEnum[][] docsEnums = new DocsEnum[numDims][];
    Collector[] sidewaysCollectors = new Collector[numDims];
    long drillDownCost = 0;
    for(int dim=0;dim<numDims;dim++) {
      docsEnums[dim] = dims[dim].docsEnums;
      sidewaysCollectors[dim] = dims[dim].sidewaysCollector;
      for(DocsEnum de : dims[dim].docsEnums) {
        if (de != null) {
          drillDownCost += de.cost();
        }
      }
    }

    long baseQueryCost = baseScorer.cost();

    /*
    System.out.println("\nbaseDocID=" + baseScorer.docID() + " est=" + estBaseHitCount);
    System.out.println("  maxDoc=" + context.reader().maxDoc());
    System.out.println("  maxFreq=" + maxFreq);
    System.out.println("  dims[0].freq=" + dims[0].freq);
    if (numDims > 1) {
      System.out.println("  dims[1].freq=" + dims[1].freq);
    }
    */

    //System.out.println("DS score " + scoreSubDocsAtOnce);
    if (!scoreSubDocsAtOnce) {
      if (baseQueryCost < drillDownCost/10) {
        //System.out.println("baseAdvance");
        doBaseAdvanceScoring(collector, docsEnums, sidewaysCollectors);
      } else if (numDims > 1 && (dims[1].maxFreq < baseQueryCost/10)) {
        //System.out.println("drillDownAdvance");
        doDrillDownAdvanceScoring(collector, docsEnums, sidewaysCollectors);
      } else {
        //System.out.println("union");
        doUnionScoring(collector, docsEnums, sidewaysCollectors);
      }
    } else {
      // TODO: we should fallback to BS2 ReqOptSum scorer here
      //System.out.println("baseAdvance");
      doBaseAdvanceScoring(collector, docsEnums, sidewaysCollectors);
    }
  }

