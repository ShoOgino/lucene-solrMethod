  /**
   * Construct an allocator for objects of a certain type, keeping around a
   * pool of up to <CODE>maxObjects</CODE> old objects.
   * <P>
   * Note that the pool size only restricts the number of objects that hang
   * around when not needed, but <I>not</I> the maximum number of objects
   * that are allocated when actually is use: If a number of concurrent
   * threads ask for an allocation, all of them will get an object, even if 
   * their number is greater than maxObjects. If an application wants to
   * limit the number of concurrent threads making allocations, it needs to
   * do so on its own - for example by blocking new threads until the
   * existing ones have finished. If more than maxObjects are freed, only
   * maxObjects of them will be kept in the pool - the rest will not and
   * will eventually be garbage-collected by Java.
   * <P>
   * In particular, when maxObjects=0, this object behaves as a trivial
   * allocator, always allocating a new array and never reusing an old one. 
   */
  public TemporaryObjectAllocator(int maxObjects) {
    this.maxObjects = maxObjects;
  }

