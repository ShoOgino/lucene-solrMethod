  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {

    TopOrdCountQueue q = null;

    int bottomCount = 0;

    int dimCount = 0;

    TopOrdCountQueue.OrdAndCount reuse = null;
    //System.out.println("getDim : " + ordRange.start + " - " + ordRange.end);
    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {
      //System.out.println("  ord=" + ord + " count=" + counts[ord]);
      if (counts[ord] > 0) {
        dimCount += counts[ord];
        if (counts[ord] > bottomCount) {
          if (reuse == null) {
            reuse = new TopOrdCountQueue.OrdAndCount();
          }
          reuse.ord = ord;
          reuse.count = counts[ord];
          if (q == null) {
            // Lazy init, so we don't create this for the
            // sparse case unnecessarily
            q = new TopOrdCountQueue(topN);
          }
          reuse = q.insertWithOverflow(reuse);
          if (q.size() == topN) {
            bottomCount = q.top().count;
          }
        }
      }
    }

    if (q == null) {
      return null;
    }

    BytesRef scratch = new BytesRef();

    LabelAndValue[] labelValues = new LabelAndValue[q.size()];
    for(int i=labelValues.length-1;i>=0;i--) {
      TopOrdCountQueue.OrdAndCount ordAndCount = q.pop();
      dv.lookupOrd(ordAndCount.ord, scratch);
      String s = scratch.utf8ToString();
      labelValues[i] = new LabelAndValue(s.substring(dim.length()+1, s.length()), ordAndCount.count);
    }

    return new SimpleFacetResult(new FacetLabel(dim), dimCount, labelValues);
  }

