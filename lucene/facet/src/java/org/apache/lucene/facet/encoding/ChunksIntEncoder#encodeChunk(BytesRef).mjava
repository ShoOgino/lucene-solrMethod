  /**
   * Encodes the values of the current chunk. First it writes the indicator, and
   * then it encodes the values outside the indicator.
   */
  protected void encodeChunk(BytesRef buf) {
    // ensure there's enough room in the buffer
    int maxBytesRequired = buf.length + 1 + encodeQueue.length * 4; /* indicator + at most 4 bytes per positive VInt */
    if (buf.bytes.length < maxBytesRequired) {
      buf.grow(maxBytesRequired);
    }
    
    buf.bytes[buf.length++] = ((byte) indicator);
    for (int i = 0; i < encodeQueue.length; i++) {
      // it is better if the encoding is inlined like so, and not e.g.
      // in a utility method
      int value = encodeQueue.ints[i];
      if ((value & ~0x7F) == 0) {
        buf.bytes[buf.length] = (byte) value;
        buf.length++;
      } else if ((value & ~0x3FFF) == 0) {
        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x3F80) >> 7));
        buf.bytes[buf.length + 1] = (byte) (value & 0x7F);
        buf.length += 2;
      } else if ((value & ~0x1FFFFF) == 0) {
        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x1FC000) >> 14));
        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x3F80) >> 7));
        buf.bytes[buf.length + 2] = (byte) (value & 0x7F);
        buf.length += 3;
      } else if ((value & ~0xFFFFFFF) == 0) {
        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xFE00000) >> 21));
        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x1FC000) >> 14));
        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x3F80) >> 7));
        buf.bytes[buf.length + 3] = (byte) (value & 0x7F);
        buf.length += 4;
      } else {
        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xF0000000) >> 28));
        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0xFE00000) >> 21));
        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x1FC000) >> 14));
        buf.bytes[buf.length + 3] = (byte) (0x80 | ((value & 0x3F80) >> 7));
        buf.bytes[buf.length + 4] = (byte) (value & 0x7F);
        buf.length += 5;
      }
    }
    
    ordinal = 0;
    indicator = 0;
    encodeQueue.length = 0;
  }

