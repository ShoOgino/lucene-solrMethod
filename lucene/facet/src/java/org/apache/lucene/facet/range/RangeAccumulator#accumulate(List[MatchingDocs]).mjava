  @Override
  public List<FacetResult> accumulate(List<MatchingDocs> matchingDocs) throws IOException {

    // TODO: test if this is faster (in the past it was
    // faster to do MachingDocs on the inside) ... see
    // patches on LUCENE-4965):
    List<FacetResult> results = new ArrayList<FacetResult>();
    for (FacetRequest req : searchParams.facetRequests) {
      RangeFacetRequest<?> rangeFR = (RangeFacetRequest<?>) req;
      int[] counts = new int[rangeFR.ranges.length];
      for (MatchingDocs hits : matchingDocs) {
        FunctionValues fv = rangeFR.getValues(hits.context);
        final int length = hits.bits.length();
        int doc = 0;
        while (doc < length && (doc = hits.bits.nextSetBit(doc)) != -1) {
          // Skip missing docs:
          if (!fv.exists(doc)) {
            ++doc;
            continue;
          }
          
          long v = fv.longVal(doc);

          // TODO: if all ranges are non-overlapping, we
          // should instead do a bin-search up front
          // (really, a specialized case of the interval
          // tree)
          // TODO: use interval tree instead of linear search:
          for (int j = 0; j < rangeFR.ranges.length; j++) {
            if (rangeFR.ranges[j].accept(v)) {
              counts[j]++;
            }
          }

          doc++;
        }
      }
      
      List<FacetResultNode> nodes = new ArrayList<FacetResultNode>(rangeFR.ranges.length);
      for (int j = 0; j < rangeFR.ranges.length; j++) {
        nodes.add(new RangeFacetResultNode(rangeFR.label, rangeFR.ranges[j], counts[j]));
      }
      
      FacetResultNode rootNode = new FacetResultNode(-1, 0);
      rootNode.label = rangeFR.categoryPath;
      rootNode.subResults = nodes;

      results.add(new FacetResult(req, rootNode, nodes.size()));
    }
    
    return results;
  }

