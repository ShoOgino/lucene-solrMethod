  /**
   * Iterate over the documents for this partition and fill the facet arrays with the correct
   * count/complement count/value.
   * @param docids
   * @param facetArrays
   * @param partition
   * @throws IOException
   */
  private final void fillArraysForPartition(ScoredDocIDs docids,
      FacetArrays facetArrays, int partition) throws IOException {
    
    if (isUsingComplements) {
      initArraysByTotalCounts(facetArrays, partition, docids.size());
    } else {
      facetArrays.free(); // to get a cleared array for this partition
    }

    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(
        facetArrays, partition);

    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {
      CategoryListIterator categoryList = entry.getKey();
      if (!categoryList.init()) {
        continue;
      }

      Aggregator categorator = entry.getValue();
      ScoredDocIDsIterator iterator = docids.iterator();
      while (iterator.next()) {
        int docID = iterator.getDocID();
        if (!categoryList.skipTo(docID)) {
          continue;
        }
        categorator.setNextDoc(docID, iterator.getScore());
        long ordinal;
        while ((ordinal = categoryList.nextCategory()) <= Integer.MAX_VALUE) {
          categorator.aggregate((int) ordinal);
        }
      }
    }
  }

