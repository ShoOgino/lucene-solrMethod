  /**
   * Iterate over the documents for this partition and fill the facet arrays with the correct
   * count/complement count/value.
   * @throws IOException If there is a low-level I/O error.
   */
  private final void fillArraysForPartition(ScoredDocIDs docids,
      FacetArrays facetArrays, int partition) throws IOException {
    
    if (isUsingComplements) {
      initArraysByTotalCounts(facetArrays, partition, docids.size());
    } else {
      facetArrays.free(); // to get a cleared array for this partition
    }

    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);

    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps
    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {
      CategoryListIterator categoryList = entry.getKey();
      if (!categoryList.init()) {
        continue;
      }

      Aggregator categorator = entry.getValue();
      ScoredDocIDsIterator iterator = docids.iterator();
      while (iterator.next()) {
        int docID = iterator.getDocID();
        categoryList.getOrdinals(docID, ordinals);
        if (ordinals.length == 0) {
          continue;
        }
        categorator.aggregate(docID, iterator.getScore(), ordinals);
      }
    }
  }

