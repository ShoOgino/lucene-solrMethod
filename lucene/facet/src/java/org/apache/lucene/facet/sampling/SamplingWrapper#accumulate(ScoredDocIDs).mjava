  @Override
  public List<FacetResult> accumulate(ScoredDocIDs docids) throws IOException {
    // Replacing the original searchParams with the over-sampled (and without statistics-compute)
    FacetSearchParams original = delegee.searchParams;
    boolean shouldOversample = sampler.samplingParams.shouldOverSample();
   
    if (shouldOversample) {
      delegee.searchParams = sampler.overSampledSearchParams(original);
    }
    
    SampleResult sampleSet = sampler.getSampleSet(docids);

    List<FacetResult> sampleRes = delegee.accumulate(sampleSet.docids);

    List<FacetResult> fixedRes = new ArrayList<FacetResult>();
    SampleFixer sampleFixer = sampler.samplingParams.getSampleFixer();
    
    for (FacetResult fres : sampleRes) {
      // for sure fres is not null because this is guaranteed by the delegee.
      PartitionsFacetResultsHandler frh = createFacetResultsHandler(fres.getFacetRequest());
      if (sampleFixer != null) {
        // fix the result of current request
        sampleFixer.fixResult(docids, fres, sampleSet.actualSampleRatio); 
        fres = frh.rearrangeFacetResult(fres); // let delegee's handler do any
      }
      
      if (shouldOversample) {
        // Using the sampler to trim the extra (over-sampled) results
        fres = sampler.trimResult(fres);
      }
      
      // final labeling if allowed (because labeling is a costly operation)
      frh.labelResult(fres);
      fixedRes.add(fres); // add to final results
    }

    if (shouldOversample) {
      delegee.searchParams = original; // Back to original params
    }
    
    return fixedRes; 
  }

