  @Test 
  public void testLongHashCodePrefix() {
    // First, repeat the tests of testLongHashCode() using longHashCode(-1)
    // just to make sure nothing was broken in this variant:
    
    // check that two empty paths are equal, even if they have different
    // capacities:
    CategoryPath p1 = new CategoryPath(0,0);
    CategoryPath p2 = new CategoryPath(1000,300);
    assertEquals(p1.longHashCode(-1), p2.longHashCode(-1));
    // If we make p2 different, it is no longer equals:
    p2.add("hi");
    assertEquals(false, p1.longHashCode(-1)==p2.longHashCode(-1));
    // Build two paths separately, and compare them
    p1.clear();
    p1.add("hello");
    p1.add("world");
    p2.clear();
    p2.add("hello");
    p2.add("world");
    assertEquals(p1.longHashCode(-1), p2.longHashCode(-1));
    // Check that comparison really don't look at old data which might
    // be stored in the array
    p1.clear();
    p1.add("averylongcategoryname");
    p1.clear();
    p1.add("hi");
    p2.clear();
    p2.add("hi");
    assertEquals(p1.longHashCode(-1), p2.longHashCode(-1));
    // Being of the same length is obviously not enough to be equal
    p1.clear();
    p1.add("hi");
    p2.clear();
    p2.add("hello");
    assertEquals(false, p1.longHashCode(-1)==p2.longHashCode(-1));
    p1.clear();
    p1.add("hi");
    p2.clear();
    p2.add("ho");
    assertEquals(false, p1.longHashCode(-1)==p2.longHashCode(-1));
    
    // Now move to testing prefixes:
    CategoryPath p = new CategoryPath();
    p.add("this");
    p.add("is");
    p.add("a");
    p.add("test");
    assertEquals(p.longHashCode(), p.longHashCode(4));
    assertEquals(new CategoryPath().longHashCode(), p.longHashCode(0));
    assertEquals(new CategoryPath(p, 1).longHashCode(), p.longHashCode(1));
    assertEquals(new CategoryPath(p, 2).longHashCode(), p.longHashCode(2));
    assertEquals(new CategoryPath(p, 3).longHashCode(), p.longHashCode(3));
  }

