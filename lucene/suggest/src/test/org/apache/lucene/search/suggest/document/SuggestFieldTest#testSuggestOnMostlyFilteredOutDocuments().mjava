  @Test
  public void testSuggestOnMostlyFilteredOutDocuments() throws Exception {
    Analyzer analyzer = new MockAnalyzer(random());
    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, "suggest_field"));
    int num = Math.min(1000, atLeast(10));
    Document document = new Document();
    for (int i = 0; i < num; i++) {
      document.add(newSuggestField("suggest_field", "abc_" + i, i));
      document.add(new IntField("filter_int_fld", i, Field.Store.NO));
      iw.addDocument(document);
      document.clear();

      if (usually()) {
        iw.commit();
      }
    }

    DirectoryReader reader = iw.getReader();
    SuggestIndexSearcher indexSearcher = new SuggestIndexSearcher(reader, analyzer);

    int topScore = num/2;
    QueryWrapperFilter filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange("filter_int_fld", 0, topScore, true, true));
    Filter filter = randomAccessFilter(filterWrapper);
    // if at most half of the top scoring documents have been filtered out
    // the search should be admissible for a single segment
    TopSuggestDocs suggest = indexSearcher.suggest("suggest_field", "abc_", num, filter);
    assertTrue(suggest.totalHits >= 1);
    assertThat(suggest.scoreLookupDocs()[0].key.toString(), equalTo("abc_" + topScore));
    assertThat(suggest.scoreLookupDocs()[0].score, equalTo((float) topScore));

    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange("filter_int_fld", 0, 0, true, true));
    filter = randomAccessFilter(filterWrapper);
    // if more than half of the top scoring documents have been filtered out
    // search is not admissible, so # of suggestions requested is num instead of 1
    suggest = indexSearcher.suggest("suggest_field", "abc_", num, filter);
    assertSuggestions(suggest, new Entry("abc_0", 0));

    filterWrapper = new QueryWrapperFilter(NumericRangeQuery.newIntRange("filter_int_fld", num - 1, num - 1, true, true));
    filter = randomAccessFilter(filterWrapper);
    // if only lower scoring documents are filtered out
    // search is admissible
    suggest = indexSearcher.suggest("suggest_field", "abc_", 1, filter);
    assertSuggestions(suggest, new Entry("abc_" + (num - 1), num - 1));

    reader.close();
    iw.close();
  }

