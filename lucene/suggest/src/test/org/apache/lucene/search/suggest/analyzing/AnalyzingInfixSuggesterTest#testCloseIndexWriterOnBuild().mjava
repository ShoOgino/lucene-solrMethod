  public void testCloseIndexWriterOnBuild() throws Exception {
    class MyAnalyzingInfixSuggester extends AnalyzingInfixSuggester {
      public MyAnalyzingInfixSuggester(Directory dir, Analyzer indexAnalyzer, Analyzer queryAnalyzer, 
                                       int minPrefixChars, boolean commitOnBuild, boolean allTermsRequired,
                                       boolean highlight, boolean closeIndexWriterOnBuild) throws IOException {
        super(dir, indexAnalyzer, queryAnalyzer, minPrefixChars, commitOnBuild, 
              allTermsRequired, highlight, closeIndexWriterOnBuild);
      }
      public IndexWriter getIndexWriter() {
        return writer;
      } 
      public SearcherManager getSearcherManager() {
        return searcherMgr;
      }
    }

    // After build(), when closeIndexWriterOnBuild = true: 
    // * The IndexWriter should be null 
    // * The SearcherManager should be non-null
    // * SearcherManager's IndexWriter reference should be closed 
    //   (as evidenced by maybeRefreshBlocking() throwing AlreadyClosedException)
    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);
    MyAnalyzingInfixSuggester suggester = new MyAnalyzingInfixSuggester(newDirectory(), a, a, 3, false,
        AnalyzingInfixSuggester.DEFAULT_ALL_TERMS_REQUIRED, AnalyzingInfixSuggester.DEFAULT_HIGHLIGHT, true);
    suggester.build(new InputArrayIterator(sharedInputs));
    assertNull(suggester.getIndexWriter());
    assertNotNull(suggester.getSearcherManager());
    expectThrows(AlreadyClosedException.class, () -> suggester.getSearcherManager().maybeRefreshBlocking());
    
    suggester.close();
    a.close();
  }

