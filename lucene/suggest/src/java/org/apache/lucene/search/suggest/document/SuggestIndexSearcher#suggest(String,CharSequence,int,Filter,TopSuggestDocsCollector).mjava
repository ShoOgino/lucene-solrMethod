  /**
   * Suggests at most <code>num</code> documents filtered by <code>filter</code>
   * that completes to <code>key</code> for a suggest <code>field</code>
   * <p>
   * Collect completions with {@link TopSuggestDocsCollector}
   * The completions are collected in order of the suggest <code>field</code> weight.
   * There can be more than one collection of the same document, if the <code>key</code>
   * matches multiple <code>field</code> values of the same document
   *
   * @throws java.lang.IllegalArgumentException if <code>filter</code> does not provide a random access
   *                                            interface or if <code>field</code> is not a {@link SuggestField}
   */
  public void suggest(String field, CharSequence key, int num, Filter filter, TopSuggestDocsCollector collector) throws IOException {
    // verify input
    if (field == null) {
      throw new IllegalArgumentException("'field' can not be null");
    }
    if (num <= 0) {
      throw new IllegalArgumentException("'num' should be > 0");
    }
    if (collector == null) {
      throw new IllegalArgumentException("'collector' can not be null");
    }

    // build query automaton
    CompletionAnalyzer analyzer;
    if (queryAnalyzer instanceof CompletionAnalyzer) {
      analyzer = (CompletionAnalyzer) queryAnalyzer;
    } else {
      analyzer = new CompletionAnalyzer(queryAnalyzer);
    }
    final Automaton automaton = analyzer.toAutomaton(field, key);

    // collect results
    for (LeafReaderContext context : getIndexReader().leaves()) {
      TopSuggestDocsCollector leafCollector = (TopSuggestDocsCollector) collector.getLeafCollector(context);
      LeafReader reader = context.reader();
      Terms terms = reader.terms(field);
      if (terms == null) {
        continue;
      }
      NRTSuggester suggester;
      if (terms instanceof CompletionTerms) {
        CompletionTerms completionTerms = (CompletionTerms) terms;
        suggester = completionTerms.suggester();
      } else {
        throw new IllegalArgumentException(field + " is not a SuggestField");
      }
      if (suggester == null) {
        // a segment can have a null suggester
        // i.e. no FST was built
        continue;
      }

      DocIdSet docIdSet = null;
      if (filter != null) {
        docIdSet = filter.getDocIdSet(context, reader.getLiveDocs());
        if (docIdSet == null) {
          // filter matches no docs in current leave
          continue;
        }
      }
      suggester.lookup(reader, automaton, num, docIdSet, leafCollector);
    }
  }

