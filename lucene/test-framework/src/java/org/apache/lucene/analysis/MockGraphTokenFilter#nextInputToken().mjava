  private TOKEN_POS nextInputToken() throws IOException {
    assert !end;
    if (DEBUG) {
      System.out.println("  call input.incr");
    }
    final boolean result = input.incrementToken();
    if (result) {
      final int posInc = posIncAtt.getPositionIncrement();
      final int posLength = posLengthAtt.getPositionLength();

      // NOTE: when posLength > 1, we have a hole... we
      // don't allow injected tokens to start or end
      // "inside" a hole, so we don't need to make up
      // offsets inside it

      assert inputPos != -1 || posInc > 0;
      inputPos += posInc;
      if (DEBUG) {
        System.out.println("    got token term=" + termAtt + " posLength=" + posLength + " posInc=" + posInc + " inputPos=" + inputPos);
      }
      final Position posData = positions.get(inputPos);
      if (posInc == 0) {
        assert posData.startOffset == offsetAtt.startOffset();
      } else {
        assert posData.startOffset == -1;
        posData.startOffset = offsetAtt.startOffset();
        if (DEBUG) {
          System.out.println("    record startOffset[" + inputPos + "]=" + posData.startOffset);
        }
      }

      final Position posEndData = positions.get(inputPos + posLength);
      if (posEndData.endOffset == -1) {
        // First time we are seeing a token that
        // arrives to this position: record the
        // endOffset
        posEndData.endOffset = offsetAtt.endOffset();
        if (DEBUG) {
          System.out.println("    record endOffset[" + (inputPos+posLength) + "]=" + posEndData.endOffset);
        }
      } else {
        // We've already seen a token arriving there;
        // make sure its endOffset is the same (NOTE:
        // some tokenizers, eg WDF, will fail
        // this...):
        assert posEndData.endOffset == offsetAtt.endOffset(): "posEndData.endOffset=" + posEndData.endOffset + " vs offsetAtt.endOffset()=" + offsetAtt.endOffset();
      }
      if (posInc == 0) {
        return TOKEN_POS.SAME;
      } else {
        return TOKEN_POS.NEXT;
      }
    } else {
      if (DEBUG) {
        System.out.println("    got END");
      }
      return TOKEN_POS.END;
    }
  }

