  public static void checkRandomData(Random random, Analyzer a, int iterations, int maxWordLength, boolean simple, boolean offsetsAreCorrect) throws IOException {
    long seed = random.nextLong();
    boolean useCharFilter = random.nextBoolean();
    checkRandomData(new Random(seed), a, iterations, maxWordLength, useCharFilter, simple, offsetsAreCorrect);
    // now test with multiple threads: note we do the EXACT same thing we did before in each thread,
    // so this should only really fail from another thread if its an actual thread problem
    int numThreads = _TestUtil.nextInt(random, 4, 8);
    AnalysisThread threads[] = new AnalysisThread[numThreads];
    for (int i = 0; i < threads.length; i++) {
      threads[i] = new AnalysisThread(seed, a, iterations, maxWordLength, useCharFilter, simple, offsetsAreCorrect);
    }
    for (int i = 0; i < threads.length; i++) {
      threads[i].start();
    }
    for (int i = 0; i < threads.length; i++) {
      try {
        threads[i].join();
      } catch (InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
    for (int i = 0; i < threads.length; i++) {
      if (threads[i].failed) {
        throw new RuntimeException("some thread(s) failed");
      }
    }
  }

