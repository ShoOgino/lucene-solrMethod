    @Override
    public void visit(int docID, byte[] packedValue) throws IOException {
      assert --docBudget >= 0 : "called add() more times than the last call to grow() reserved";

      // This method, to filter each doc's value, should only be invoked when the cell crosses the query shape:
      assert lastCompareResult == PointValues.Relation.CELL_CROSSES_QUERY;

      // This doc's packed value should be contained in the last cell passed to compare:
      for(int dim=0;dim<numDims;dim++) {
        assert StringHelper.compare(bytesPerDim, lastMinPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) <= 0: "dim=" + dim + " of " +  numDims + " value=" + new BytesRef(packedValue);
        assert StringHelper.compare(bytesPerDim, lastMaxPackedValue, dim*bytesPerDim, packedValue, dim*bytesPerDim) >= 0: "dim=" + dim + " of " +  numDims + " value=" + new BytesRef(packedValue);
      }

      // TODO: we should assert that this "matches" whatever relation the last call to compare had returned
      assert packedValue.length == numDims * bytesPerDim;
      if (numDims == 1) {
        int cmp = StringHelper.compare(bytesPerDim, lastDocValue, 0, packedValue, 0);
        if (cmp < 0) {
          // ok
        } else if (cmp == 0) {
          assert lastDocID <= docID: "doc ids are out of order when point values are the same!";
        } else {
          // out of order!
          assert false: "point values are out of order";
        }
        System.arraycopy(packedValue, 0, lastDocValue, 0, bytesPerDim);
      }
      in.visit(docID, packedValue);
    }

