  @Override
  public TwoPhaseIterator asTwoPhaseIterator() {
    final TwoPhaseIterator in = this.in.asTwoPhaseIterator();
    if (in == null) {
      return null;
    }
    final DocIdSetIterator inApproximation = in.approximation();
    assert inApproximation.docID() == doc;
    final DocIdSetIterator assertingApproximation = new DocIdSetIterator() {

      @Override
      public int docID() {
        return inApproximation.docID();
      }

      @Override
      public int nextDoc() throws IOException {
        assert state != IteratorState.FINISHED : "advance() called after NO_MORE_DOCS";
        final int nextDoc = inApproximation.nextDoc();
        assert nextDoc > doc : "backwards advance from: " + doc + " to: " + nextDoc;
        if (nextDoc == NO_MORE_DOCS) {
          state = IteratorState.FINISHED;
        } else {
          state = IteratorState.APPROXIMATING;
        }
        assert inApproximation.docID() == nextDoc;
        return nextDoc;
      }

      @Override
      public int advance(int target) throws IOException {
        assert state != IteratorState.FINISHED : "advance() called after NO_MORE_DOCS";
        assert target > doc : "target must be > docID(), got " + target + " <= " + doc;
        final int advanced = inApproximation.advance(target);
        assert advanced >= target : "backwards advance from: " + target + " to: " + advanced;
        if (advanced == NO_MORE_DOCS) {
          state = IteratorState.FINISHED;
        } else {
          state = IteratorState.APPROXIMATING;
        }
        assert inApproximation.docID() == advanced;
        return advanced;
      }

      @Override
      public long cost() {
        return inApproximation.cost();
      }

    };
    return new TwoPhaseIterator(assertingApproximation) {
      @Override
      public boolean matches() throws IOException {
        assert state == IteratorState.APPROXIMATING;
        final boolean matches = in.matches();
        if (matches) {
          assert AssertingScorer.this.in.docID() == inApproximation.docID() : "Approximation and scorer don't advance synchronously";
          doc = inApproximation.docID();
          state = IteratorState.ITERATING;
        }
        return matches;
      }
    };
  }

