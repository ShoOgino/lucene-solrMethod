  /**
   * returns new random term, that fits within the bounds of the corpus
   */
  static TermStatistics newTerm(Random random, CollectionStatistics corpus) {
    final long docFreq;
    if (random.nextBoolean()) {
      // rare term
      docFreq = 1;
    } else {
      // random specificity
      docFreq = TestUtil.nextLong(random, 1, corpus.docCount());
    }
    final long totalTermFreq;
    if (corpus.sumTotalTermFreq() == corpus.sumDocFreq()) {
      // omitTF
      totalTermFreq = docFreq;
    } else if (random.nextBoolean()) {
      // no repetition
      totalTermFreq = docFreq;
    } else {
      // random repetition: but can't require docs to have > 2B tokens
      long upperBound;
      try {
        upperBound = Math.min(corpus.sumTotalTermFreq(), Math.multiplyExact(docFreq, Integer.MAX_VALUE));
      } catch (ArithmeticException overflow) {
        upperBound = corpus.sumTotalTermFreq();
      }
      totalTermFreq = TestUtil.nextLong(random, docFreq, upperBound);
    }
    return new TermStatistics(TERM, docFreq, totalTermFreq);
  }

