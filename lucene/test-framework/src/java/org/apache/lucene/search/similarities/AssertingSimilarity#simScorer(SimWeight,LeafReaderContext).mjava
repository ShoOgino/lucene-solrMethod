  @Override
  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {
    assert weight != null;
    assert context != null;
    AssertingWeight assertingWeight = (AssertingWeight)weight;
    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);
    assert delegateScorer != null;

    return new SimScorer() {
      @Override
      public float score(int doc, float freq) throws IOException {
        // doc in bounds
        assert doc >= 0;
        assert doc < context.reader().maxDoc();
        // freq in bounds
        assert Float.isFinite(freq);
        assert freq > 0;
        // result in bounds
        float score = delegateScorer.score(doc, freq);
        assert Float.isFinite(score);
        assert score <= maxScore(freq);
        assert score >= 0;
        return score;
      }

      @Override
      public float maxScore(float maxFreq) {
        float maxScore = delegateScorer.maxScore(maxFreq);
        assert Float.isNaN(maxScore) == false;
        return maxScore;
      }

      @Override
      public Explanation explain(int doc, Explanation freq) throws IOException {
        // doc in bounds
        assert doc >= 0;
        assert doc < context.reader().maxDoc();
        // freq in bounds 
        assert freq != null;
        assert Float.isFinite(freq.getValue().floatValue());
        // result in bounds
        Explanation explanation = delegateScorer.explain(doc, freq);
        assert explanation != null;
        assert Float.isFinite(explanation.getValue().floatValue());
        // result matches score exactly
        assert explanation.getValue().floatValue() == delegateScorer.score(doc, freq.getValue().floatValue());
        return explanation;
      }
    };
  }

