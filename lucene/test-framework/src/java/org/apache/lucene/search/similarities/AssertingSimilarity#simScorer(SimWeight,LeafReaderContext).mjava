  @Override
  public SimScorer simScorer(SimWeight weight, LeafReaderContext context) throws IOException {
    assert weight != null;
    assert context != null;
    AssertingWeight assertingWeight = (AssertingWeight)weight;
    SimScorer delegateScorer = delegate.simScorer(assertingWeight.delegate, context);
    assert delegateScorer != null;

    return new SimScorer() {
      @Override
      public float score(int doc, float freq) throws IOException {
        // doc in bounds
        assert doc >= 0;
        assert doc < context.reader().maxDoc();
        // freq in bounds
        assert Float.isFinite(freq);
        assert freq > 0;
        // result in bounds
        float score = delegateScorer.score(doc, freq);
        assert Float.isFinite(score);
        // TODO: some tests have negative boosts today
        assert score >= 0 || assertingWeight.boost < 0;
        return score;
      }

      @Override
      public float computeSlopFactor(int distance) {
        // distance in bounds
        assert distance >= 0;
        // result in bounds
        float slopFactor = delegateScorer.computeSlopFactor(distance);
        assert Float.isFinite(slopFactor);
        assert slopFactor > 0;
        assert slopFactor <= 1;
        return slopFactor;
      }

      @Override
      public float computePayloadFactor(int doc, int start, int end, BytesRef payload) {
        // doc in bounds
        assert doc >= 0;
        assert doc < context.reader().maxDoc();
        // payload in bounds
        assert payload.isValid();
        // position range in bounds
        assert start >= 0;
        assert start != Spans.NO_MORE_POSITIONS;
        assert end > start;
        // result in bounds
        float payloadFactor = delegateScorer.computePayloadFactor(doc, start, end, payload);
        assert Float.isFinite(payloadFactor);
        assert payloadFactor >= 0;
        return payloadFactor;
      }

      @Override
      public Explanation explain(int doc, Explanation freq) throws IOException {
        // doc in bounds
        assert doc >= 0;
        assert doc < context.reader().maxDoc();
        // freq in bounds 
        assert freq != null;
        assert Float.isFinite(freq.getValue());
        // result in bounds
        Explanation explanation = delegateScorer.explain(doc, freq);
        assert explanation != null;
        assert Float.isFinite(explanation.getValue());
        // result matches score exactly
        assert explanation.getValue() == delegateScorer.score(doc, freq.getValue());
        return explanation;
      }
    };
  }

