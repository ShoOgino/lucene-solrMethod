  @BeforeClass
  public static void beforeClass() throws Exception {
    // without norms
    WITHOUT_NORM_DIR = newDirectory();
    RandomIndexWriter writer = new RandomIndexWriter(random(), WITHOUT_NORM_DIR);
    Document doc = new Document();
    doc.add(newTextField("field", "value", Field.Store.NO));
    writer.addDocument(doc);
    WITHOUT_NORM = getOnlyLeafReader(writer.getReader());
    writer.close();

    // with norms
    WITH_NORM_DIR = newDirectory();
    writer = new RandomIndexWriter(random(), WITH_NORM_DIR);
    doc = new Document();
    FieldType fieldType = new FieldType(TextField.TYPE_NOT_STORED);
    fieldType.setOmitNorms(true);
    doc.add(newField("field", "value", fieldType));
    writer.addDocument(doc);
    WITH_NORM_BASE = getOnlyLeafReader(writer.getReader());
    writer.close();
    
    // all possible norm values for the doc
    NORM_VALUES = new ArrayList<>();
    NORM_VALUES.add(WITHOUT_NORM);
    for (int i = 1; i < 256; i++) {
      final long value = i;
      NORM_VALUES.add(new FilterLeafReader(WITH_NORM_BASE) {
        @Override
        public CacheHelper getCoreCacheHelper() {
          return null;
        }

        @Override
        public CacheHelper getReaderCacheHelper() {
          return null;
        }

        @Override
        public NumericDocValues getNormValues(String field) throws IOException {
          if (field.equals("field")) {
            return new CannedNorm(value);
          } else {
            return super.getNormValues(field);
          }
        }
      });
    }
  }

