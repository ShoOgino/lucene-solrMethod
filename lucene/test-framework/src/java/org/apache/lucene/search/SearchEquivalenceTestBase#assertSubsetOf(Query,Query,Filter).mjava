  /**
   * Asserts that the documents returned by <code>q1</code>
   * are a subset of those returned by <code>q2</code>.
   * 
   * Both queries will be filtered by <code>filter</code>
   */
  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {
    // TODO: remove this randomness and just explicitly test the query N times always?
    if (filter != null) {
      int res = random().nextInt(3);
      if (res == 0) {
        // use FilteredQuery explicitly
        q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));
        q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));
        filter = null;
      } else if (res == 1) {
        // use BooleanQuery FILTER clause
        BooleanQuery bq1 = new BooleanQuery();
        bq1.add(q1, Occur.MUST);
        bq1.add(filter, Occur.FILTER);
        q1 = bq1;
        
        BooleanQuery bq2 = new BooleanQuery();
        bq2.add(q2, Occur.MUST);
        bq2.add(filter, Occur.FILTER);
        q2 = bq2;
        filter = null;
      } else {
        // do nothing, we use search(q, filter, int, ...) in this case.
      }
    }
    
    // not efficient, but simple!
    TopDocs td1 = s1.search(q1, filter, reader.maxDoc(), random().nextBoolean() ? Sort.INDEXORDER : Sort.RELEVANCE);
    TopDocs td2 = s2.search(q2, filter, reader.maxDoc(), random().nextBoolean() ? Sort.INDEXORDER : Sort.RELEVANCE);
    assertTrue(td1.totalHits <= td2.totalHits);
    
    // fill the superset into a bitset
    BitSet bitset = new BitSet();
    for (int i = 0; i < td2.scoreDocs.length; i++) {
      bitset.set(td2.scoreDocs[i].doc);
    }
    
    // check in the subset, that every bit was set by the super
    for (int i = 0; i < td1.scoreDocs.length; i++) {
      assertTrue(bitset.get(td1.scoreDocs[i].doc));
    }
  }

