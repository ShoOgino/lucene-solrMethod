  /**
   * Asserts that the documents returned by <code>q1</code>
   * are a subset of those returned by <code>q2</code>.
   * 
   * Both queries will be filtered by <code>filter</code>
   */
  protected void assertSubsetOf(Query q1, Query q2, Filter filter) throws Exception {
    // TRUNK ONLY: test both filter code paths
    if (filter != null && random().nextBoolean()) {
      final boolean q1RandomAccess = random().nextBoolean();
      final boolean q2RandomAccess = random().nextBoolean();
      q1 = new FilteredQuery(q1, filter) {
        @Override
        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {
          return q1RandomAccess;
        }
      };
      q2 = new FilteredQuery(q2, filter) {
        @Override
        protected boolean useRandomAccess(Bits bits, int firstFilterDoc) {
          return q2RandomAccess;
        }
      };
      filter = null;
    }
    
    // not efficient, but simple!
    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());
    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());
    assertTrue(td1.totalHits <= td2.totalHits);
    
    // fill the superset into a bitset
    BitSet bitset = new BitSet();
    for (int i = 0; i < td2.scoreDocs.length; i++) {
      bitset.set(td2.scoreDocs[i].doc);
    }
    
    // check in the subset, that every bit was set by the super
    for (int i = 0; i < td1.scoreDocs.length; i++) {
      assertTrue(bitset.get(td1.scoreDocs[i].doc));
    }
  }

