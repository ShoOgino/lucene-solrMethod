  // Make sure the FSDirectory impl properly "emulates" deletions on filesystems (Windows) with buggy deleteFile:
  public void testPendingDeletions() throws IOException {
    try (Directory dir = getDirectory(addVirusChecker(createTempDir()))) {
      assumeTrue("we can only install VirusCheckingFS on an FSDirectory", dir instanceof FSDirectory);
      FSDirectory fsDir = (FSDirectory) dir;

      // Keep trying until virus checker refuses to delete:
      final String fileName;
      while (true) {
        String candidate = TestUtil.randomSimpleString(random());
        if (candidate.length() == 0) {
          continue;
        }
        try (IndexOutput out = dir.createOutput(candidate, IOContext.DEFAULT)) {
        }
        fsDir.deleteFile(candidate);
        if (fsDir.checkPendingDeletions()) {
          // good: virus checker struck and prevented deletion of fileName
          fileName = candidate;
          break;
        }
      }

      // Make sure listAll does NOT include the file:
      assertFalse(Arrays.asList(fsDir.listAll()).contains(fileName));

      // Make sure fileLength claims it's deleted:
      expectThrows(NoSuchFileException.class, () -> {      
        fsDir.fileLength(fileName);
      });

      // Make sure rename fails:
      expectThrows(NoSuchFileException.class, () -> {      
        fsDir.renameFile(fileName, "file2");
      });

      // Make sure delete fails:
      expectThrows(NoSuchFileException.class, () -> {      
        fsDir.deleteFile(fileName);
      });

      expectThrows(NoSuchFileException.class, () -> {      
        fsDir.openInput(fileName, IOContext.DEFAULT);
      });

      if (random().nextBoolean()) {
        try (IndexOutput out = fsDir.createOutput(fileName + "z", IOContext.DEFAULT)) {
        }
        // Make sure we can rename onto the deleted file:
        fsDir.renameFile(fileName + "z", fileName);
      } else {
        // write the file again
        try (IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT)) {
        }
      }
      assertEquals(0, fsDir.fileLength(fileName));
      assertTrue(Arrays.asList(fsDir.listAll()).contains(fileName));
    }
  }

