  public PerThreadPKLookup(IndexReader r, String idFieldName) throws IOException {

    List<AtomicReaderContext> leaves = new ArrayList<>(r.leaves());

    // Larger segments are more likely to have the id, so we sort largest to smallest by numDocs:
    Collections.sort(leaves, new Comparator<AtomicReaderContext>() {
        @Override
        public int compare(AtomicReaderContext c1, AtomicReaderContext c2) {
          return c2.reader().numDocs() - c1.reader().numDocs();
        }
      });

    termsEnums = new TermsEnum[leaves.size()];
    docsEnums = new DocsEnum[leaves.size()];
    liveDocs = new Bits[leaves.size()];
    docBases = new int[leaves.size()];
    int numSegs = 0;
    boolean hasDeletions = false;
    for(int i=0;i<leaves.size();i++) {
      Fields fields = leaves.get(i).reader().fields();
      if (fields != null) {
        Terms terms = fields.terms(idFieldName);
        if (terms != null) {
          termsEnums[numSegs] = terms.iterator(null);
          assert termsEnums[numSegs] != null;
          docBases[numSegs] = leaves.get(i).docBase;
          liveDocs[numSegs] = leaves.get(i).reader().getLiveDocs();
          hasDeletions |= leaves.get(i).reader().hasDeletions();
          numSegs++;
        }
      }
    }
    this.numSegs = numSegs;
    this.hasDeletions = hasDeletions;
  }

