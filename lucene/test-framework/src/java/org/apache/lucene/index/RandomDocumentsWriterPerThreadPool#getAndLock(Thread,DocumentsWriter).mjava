  @Override
  ThreadState getAndLock(Thread requestingThread,
      DocumentsWriter documentsWriter) {
    ThreadState threadState = null;
    if (getActiveThreadState() == 0) {
      synchronized (this) {
        if (getActiveThreadState() == 0) {
          threadState = states[0] = newThreadState();
          return threadState;
        }
      }
    }
    assert getActiveThreadState() > 0;
    for (int i = 0; i < maxRetry; i++) {
      int ord = random.nextInt(getActiveThreadState());
      synchronized (this) {
        threadState = states[ord];
        assert threadState != null;
      }

      if (threadState.tryLock()) {
        return threadState;
      }
      if (random.nextInt(20) == 0) {
        break;
      }
    }
    /*
     * only try to create a new threadstate if we can not lock the randomly
     * selected state. this is important since some tests rely on a single
     * threadstate in the single threaded case. Eventually it would be nice if
     * we would not have this limitation but for now we just make sure we only
     * allocate one threadstate if indexing is single threaded
     */

    synchronized (this) {
      ThreadState newThreadState = newThreadState();
      if (newThreadState != null) { // did we get a new state?
        threadState = states[getActiveThreadState() - 1] = newThreadState;
        assert threadState.isHeldByCurrentThread();
        return threadState;
      }
      // if no new state is available lock the random one
    }
    assert threadState != null;
    threadState.lock();
    return threadState;
  }

