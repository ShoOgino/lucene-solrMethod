  @Override
  public PointsFormat pointsFormat() {
    return new AssertingPointsFormat(new PointsFormat() {
      @Override
      public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {

        // Randomize how BKDWriter chooses its splis:

        return new Lucene60PointsWriter(writeState, maxPointsInLeafNode, maxMBSortInHeap) {
          @Override
          public void writeField(FieldInfo fieldInfo, PointsReader reader) throws IOException {

            PointValues values = reader.getValues(fieldInfo.name);

            try (BKDWriter writer = new RandomlySplittingBKDWriter(writeState.segmentInfo.maxDoc(),
                                                                   writeState.directory,
                                                                   writeState.segmentInfo.name,
                                                                   fieldInfo.getPointDimensionCount(),
                                                                   fieldInfo.getPointIndexDimensionCount(),
                                                                   fieldInfo.getPointNumBytes(),
                                                                   maxPointsInLeafNode,
                                                                   maxMBSortInHeap,
                                                                   values.size(),
                                                                   bkdSplitRandomSeed ^ fieldInfo.name.hashCode())) {
                values.intersect(new IntersectVisitor() {
                    @Override
                    public void visit(int docID) {
                      throw new IllegalStateException();
                    }

                    public void visit(int docID, byte[] packedValue) throws IOException {
                      writer.add(packedValue, docID);
                    }

                    @Override
                    public PointValues.Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {
                      return PointValues.Relation.CELL_CROSSES_QUERY;
                    }
                  });

                // We could have 0 points on merge since all docs with dimensional fields may be deleted:
                if (writer.getPointCount() > 0) {
                  indexFPs.put(fieldInfo.name, writer.finish(dataOut));
                }
              }
          }
        };
      }

      @Override
      public PointsReader fieldsReader(SegmentReadState readState) throws IOException {
        return new Lucene60PointsReader(readState);
      }
    });
  }

