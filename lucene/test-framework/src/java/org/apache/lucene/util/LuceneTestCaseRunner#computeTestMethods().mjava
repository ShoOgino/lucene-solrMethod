  @Override
  protected List<FrameworkMethod> computeTestMethods() {
    if (testMethods != null)
      return testMethods;
    
    Random r = new Random(runnerSeed);
    
    LuceneTestCase.testClassesRun.add(getTestClass().getJavaClass().getSimpleName());
    testMethods = new ArrayList<FrameworkMethod>();
    for (Method m : getTestClass().getJavaClass().getMethods()) {
      // check if the current test's class has methods annotated with @Ignore
      final Ignore ignored = m.getAnnotation(Ignore.class);
      if (ignored != null && !m.getName().equals("alwaysIgnoredTestMethod")) {
        System.err.println("NOTE: Ignoring test method '" + m.getName() + "': " + ignored.value());
      }
      // add methods starting with "test"
      final int mod = m.getModifiers();
      if (m.getAnnotation(Test.class) != null ||
          (m.getName().startsWith("test") &&
              !Modifier.isAbstract(mod) &&
              m.getParameterTypes().length == 0 &&
              m.getReturnType() == Void.TYPE))
      {
        if (Modifier.isStatic(mod))
          throw new RuntimeException("Test methods must not be static.");
        testMethods.add(new FrameworkMethod(m));
      }
    }
    
    if (testMethods.isEmpty()) {
      throw new RuntimeException("No runnable methods!");
    }
    
    if (TEST_NIGHTLY == false) {
      removeAnnotatedTests(Nightly.class, "@nightly");
    }
    if (TEST_WEEKLY == false) {
      removeAnnotatedTests(Weekly.class, "@weekly");
    }
    if (TEST_SLOW == false) {
      removeAnnotatedTests(Slow.class, "@slow");
    }
    // sort the test methods first before shuffling them, so that the shuffle is consistent
    // across different implementations that might order the methods different originally.
    Collections.sort(testMethods, new Comparator<FrameworkMethod>() {
      @Override
      public int compare(FrameworkMethod f1, FrameworkMethod f2) {
        return f1.getName().compareTo(f2.getName());
      }
    });
    Collections.shuffle(testMethods, r);
    return testMethods;
  }

