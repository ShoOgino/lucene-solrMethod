  /** 
   * checks the terms enum sequentially
   * if deep is false, it does a 'shallow' test that doesnt go down to the docsenums
   */
  public void assertTermsEnumEquals(String info, IndexReader leftReader, TermsEnum leftTermsEnum, TermsEnum rightTermsEnum, boolean deep) throws IOException {
    BytesRef term;
    Bits randomBits = new RandomBits(leftReader.maxDoc(), random().nextDouble(), random());
    PostingsEnum leftPositions = null;
    PostingsEnum rightPositions = null;
    PostingsEnum leftDocs = null;
    PostingsEnum rightDocs = null;
    
    while ((term = leftTermsEnum.next()) != null) {
      assertEquals(info, term, rightTermsEnum.next());
      assertTermStatsEquals(info, leftTermsEnum, rightTermsEnum);
      if (deep) {
        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),
                                   rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));
        assertDocsAndPositionsEnumEquals(info, leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),
                                   rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));

        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), 
                                leftPositions = leftTermsEnum.postings(null, leftPositions, PostingsEnum.ALL),
                                rightPositions = rightTermsEnum.postings(null, rightPositions, PostingsEnum.ALL));
        assertPositionsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), 
                                leftPositions = leftTermsEnum.postings(randomBits, leftPositions, PostingsEnum.ALL),
            rightPositions = rightTermsEnum.postings(randomBits, rightPositions, PostingsEnum.ALL));

        // with freqs:
        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(null, leftDocs),
            rightDocs = rightTermsEnum.postings(null, rightDocs),
            true);
        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(randomBits, leftDocs),
            rightDocs = rightTermsEnum.postings(randomBits, rightDocs),
            true);

        // w/o freqs:
        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),
            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE),
            false);
        assertDocsEnumEquals(info, leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),
            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE),
            false);
        
        // with freqs:
        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), 
            leftDocs = leftTermsEnum.postings(null, leftDocs),
            rightDocs = rightTermsEnum.postings(null, rightDocs),
            true);
        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), 
            leftDocs = leftTermsEnum.postings(randomBits, leftDocs),
            rightDocs = rightTermsEnum.postings(randomBits, rightDocs),
            true);

        // w/o freqs:
        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), 
            leftDocs = leftTermsEnum.postings(null, leftDocs, PostingsEnum.NONE),
            rightDocs = rightTermsEnum.postings(null, rightDocs, PostingsEnum.NONE),
            false);
        assertDocsSkippingEquals(info, leftReader, leftTermsEnum.docFreq(), 
            leftDocs = leftTermsEnum.postings(randomBits, leftDocs, PostingsEnum.NONE),
            rightDocs = rightTermsEnum.postings(randomBits, rightDocs, PostingsEnum.NONE),
            false);
      }
    }
    assertNull(info, rightTermsEnum.next());
  }

