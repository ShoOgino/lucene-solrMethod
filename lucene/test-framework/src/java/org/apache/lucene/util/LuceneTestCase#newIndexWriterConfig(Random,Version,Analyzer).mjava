  /** create a new index writer config with random defaults using the specified random */
  public static IndexWriterConfig newIndexWriterConfig(Random r, Version v, Analyzer a) {
    IndexWriterConfig c = new IndexWriterConfig(v, a);
    c.setSimilarity(classEnvRule.similarity);
    if (VERBOSE) {
      // Even though TestRuleSetupAndRestoreClassEnv calls
      // InfoStream.setDefault, we do it again here so that
      // the PrintStreamInfoStream.messageID increments so
      // that when there are separate instances of
      // IndexWriter created we see "IW 0", "IW 1", "IW 2",
      // ... instead of just always "IW 0":
      c.setInfoStream(new TestRuleSetupAndRestoreClassEnv.ThreadNameFixingPrintStreamInfoStream(System.out));
    }

    if (r.nextBoolean()) {
      c.setMergeScheduler(new SerialMergeScheduler());
    } else if (rarely(r)) {
      int maxThreadCount = TestUtil.nextInt(random(), 1, 4);
      int maxMergeCount = TestUtil.nextInt(random(), maxThreadCount, maxThreadCount + 4);
      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();
      cms.setMaxMergesAndThreads(maxMergeCount, maxThreadCount);
      c.setMergeScheduler(cms);
    }
    if (r.nextBoolean()) {
      if (rarely(r)) {
        // crazy value
        c.setMaxBufferedDocs(TestUtil.nextInt(r, 2, 15));
      } else {
        // reasonable value
        c.setMaxBufferedDocs(TestUtil.nextInt(r, 16, 1000));
      }
    }
    if (r.nextBoolean()) {
      int maxNumThreadStates = rarely(r) ? TestUtil.nextInt(r, 5, 20) // crazy value
          : TestUtil.nextInt(r, 1, 4); // reasonable value

      Method setIndexerThreadPoolMethod = null;
      try {
        // Retrieve the package-private setIndexerThreadPool
        // method:
        for(Method m : IndexWriterConfig.class.getDeclaredMethods()) {
          if (m.getName().equals("setIndexerThreadPool")) {
            m.setAccessible(true);
            setIndexerThreadPoolMethod = m;
            break;
          }
        }
      } catch (Exception e) {
        // Should not happen?
        Rethrow.rethrow(e);
      }

      if (setIndexerThreadPoolMethod == null) {
        throw new RuntimeException("failed to lookup IndexWriterConfig.setIndexerThreadPool method");
      }

      try {
        if (rarely(r)) {
          Class<?> clazz = Class.forName("org.apache.lucene.index.RandomDocumentsWriterPerThreadPool");
          Constructor<?> ctor = clazz.getConstructor(int.class, Random.class);
          ctor.setAccessible(true);
          // random thread pool
          setIndexerThreadPoolMethod.invoke(c, ctor.newInstance(maxNumThreadStates, r));
        } else {
          // random thread pool
          c.setMaxThreadStates(maxNumThreadStates);
        }
      } catch (Exception e) {
        Rethrow.rethrow(e);
      }
    }

    c.setMergePolicy(newMergePolicy(r));

    if (rarely(r)) {
      c.setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(c.getInfoStream()));
    }
    c.setUseCompoundFile(r.nextBoolean());
    c.setReaderPooling(r.nextBoolean());
    c.setCheckIntegrityAtMerge(r.nextBoolean());
    return c;
  }

