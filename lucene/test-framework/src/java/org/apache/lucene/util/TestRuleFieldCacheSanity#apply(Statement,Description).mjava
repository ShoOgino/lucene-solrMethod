  @Override
  public Statement apply(final Statement s, final Description d) {
    return new Statement() {
      @Override
      public void evaluate() throws Throwable {
        s.evaluate();

        Throwable problem = null;
        try {
          // calling assertSaneFieldCaches here isn't as useful as having test
          // classes call it directly from the scope where the index readers
          // are used, because they could be gc'ed just before this tearDown
          // method is called.
          //
          // But it's better then nothing.
          //
          // If you are testing functionality that you know for a fact
          // "violates" FieldCache sanity, then you should either explicitly
          // call purgeFieldCache at the end of your test method, or refactor
          // your Test class so that the inconsistent FieldCache usages are
          // isolated in distinct test methods
          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());
        } catch (Throwable t) {
          problem = t;
        }

        FieldCache.DEFAULT.purgeAllCaches();

        if (problem != null) {
          Rethrow.rethrow(problem);
        }
      }
    };
  }  

