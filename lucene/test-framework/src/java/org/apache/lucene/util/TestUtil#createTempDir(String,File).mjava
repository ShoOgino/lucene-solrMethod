  /**
   * Returns a new and empty temporary folder, based on the given name. The folder will be
   * deleted at the end of the test suite. Failure to delete the temporary folder will cause
   * an exception (typically happens on Windows on unclosed file handles).
   */
  public static File createTempDir(String prefix, File parent) {
    if (prefix.length() < 3) {
      throw new IllegalArgumentException("The prefix must be at least 3 characters: " + prefix);
    }
    
    if (parent == null) {
      parent = tempDirectory();
    }

    if (!parent.exists()) {
      throw new RuntimeException("Parent location does not exist: " + parent.getAbsolutePath());
    }

    if (!parent.isDirectory()) {
      throw new RuntimeException("Parent location is not a folder: " + parent.getAbsolutePath());
    }

    if (!parent.canWrite()) {
      throw new RuntimeException("Parent folder not writeable: " + parent.getAbsolutePath());
    }

    // Always pull a long from master random. that way, the randomness of the test
    // is not affected by whether it initialized the counter (in genTempFile) or not.
    // note that the Random used by genTempFile is *not* the master Random, and therefore
    // does not affect the randomness of the test.
    int attempt = 0;
    File f;
    do {
      f = genTempFile(prefix + "_", "", parent);
    } while (!f.mkdir() && (attempt++) < GET_TEMP_DIR_RETRY_THRESHOLD);
    
    if (attempt > GET_TEMP_DIR_RETRY_THRESHOLD) {
      throw new RuntimeException(
          "Failed to get a temporary dir too many times, check your temp directory and consider manually cleaning it: "
            + parent.getAbsolutePath());
    }

    return maybeRemoveAfterSuite(f);
  }

