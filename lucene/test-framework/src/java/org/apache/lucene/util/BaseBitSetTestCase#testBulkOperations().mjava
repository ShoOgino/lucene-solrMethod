  /** Test the {@link BitSet#and}, {@link BitSet#or} and {@link BitSet#andNot} methods. */
  public void testBulkOperations() throws IOException {
    final int numBits = 1 + random().nextInt(100000);
    BitSet set1 = new JavaUtilBitSet(randomSet(numBits, 0), numBits);
    T set2 = copyOf(set1, numBits);
    final int iters = TEST_NIGHTLY ? 50 + random().nextInt(50) : 10 + random().nextInt(10);
    for (int i = 0; i < iters; ++i) {
      // make extreme percents more likely
      float percentSet2 = rarely() ? 0 : (float) Math.pow(random().nextDouble(), 2);
      if (random().nextBoolean()) {
        percentSet2 = 1 - percentSet2;
      }
      BitSet bulkSet = new JavaUtilBitSet(randomSet(numBits, percentSet2), numBits);
      // operations are sometimes specialized based on the impl, so randomize the impl
      final DocIdSet bulkSetCopy = randomCopy(bulkSet, numBits);
      // now randomize the operation
      if (bulkSetCopy.iterator() == null) {
        continue;
      }
      DocIdSetIterator it1 = bulkSetCopy.iterator();
      DocIdSetIterator it2 = bulkSetCopy.iterator();
      switch (random().nextInt(3)) {
        case 0:
          set1.or(it1);
          set2.or(it2);
          break;
        case 1:
          set1.and(it1);
          set2.and(it2);
          break;
        default:
          set1.andNot(it1);
          set2.andNot(it2);
          break;
      }
      assertEquals(set1, set2, numBits);
    }
  }

