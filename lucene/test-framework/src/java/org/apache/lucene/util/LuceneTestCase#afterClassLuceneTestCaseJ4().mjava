  @AfterClass
  public static void afterClassLuceneTestCaseJ4() {
    State oldState = state; // capture test execution state
    state = State.INITIAL; // set the state for subsequent tests
    
    Throwable problem = null;
    try {
      if (!testsFailed) {
        assertTrue("ensure your setUp() calls super.setUp() and your tearDown() calls super.tearDown()!!!", 
          oldState == State.INITIAL || oldState == State.TEARDOWN);
      }
    } catch (Throwable t) {
      if (problem == null) problem = t;
    }
    
    if (! "false".equals(TEST_CLEAN_THREADS)) {
      int rogueThreads = threadCleanup("test class");
      if (rogueThreads > 0) {
        // TODO: fail here once the leaks are fixed.
        System.err.println("RESOURCE LEAK: test class left " + rogueThreads + " thread(s) running");
      }
    }
    
    String codecDescription = Codec.getDefault().toString();
    Codec.setDefault(savedCodec);
    InfoStream.setDefault(savedInfoStream);
    Locale.setDefault(savedLocale);
    TimeZone.setDefault(savedTimeZone);
    System.clearProperty("solr.solr.home");
    System.clearProperty("solr.data.dir");
    
    try {
      // now look for unclosed resources
      if (!testsFailed) {
        checkResourcesAfterClass();
      }
    } catch (Throwable t) {
      if (problem == null) problem = t;
    }
    
    stores = null;

    try {
      // clear out any temp directories if we can
      if (!testsFailed) {
        clearTempDirectoriesAfterClass();
      }
    } catch (Throwable t) {
      if (problem == null) problem = t;
    }

    // if we had afterClass failures, get some debugging information
    if (problem != null) {
      reportPartialFailureInfo();      
    }
    
    // if verbose or tests failed, report some information back
    if (VERBOSE || testsFailed || problem != null) {
      printDebuggingInformation(codecDescription);
    }
    
    // reset seed
    random.setSeed(0L);
    random.initialized = false;
    
    if (problem != null) {
      throw new RuntimeException(problem);
    }
  }

