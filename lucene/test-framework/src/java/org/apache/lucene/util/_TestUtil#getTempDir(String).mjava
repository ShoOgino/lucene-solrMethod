  /**
   * Returns a temp directory, based on the given description. Creates the
   * directory.
   */
  public static File getTempDir(String desc) {
    if (desc.length() < 3) {
      throw new IllegalArgumentException("description must be at least 3 characters");
    }
    // always pull a long from master random. that way, the randomness of the test
    // is not affected by whether it initialized the counter (in genTempFile) or not.
    // note that the Random used by genTempFile is *not* the master Random, and therefore
    // does not affect the randomness of the test.
    final Random random = new Random(RandomizedContext.current().getRandom().nextLong());
    int attempt = 0;
    File f;
    do {
      f = genTempFile(random, desc, "tmp", LuceneTestCase.TEMP_DIR);
    } while (!f.mkdir() && (attempt++) < GET_TEMP_DIR_RETRY_THRESHOLD);
    
    if (attempt > GET_TEMP_DIR_RETRY_THRESHOLD) {
      throw new RuntimeException(
          "failed to get a temporary dir too many times. check your temp directory and consider manually cleaning it.");
    }
    
    LuceneTestCase.closeAfterSuite(new CloseableFile(f, LuceneTestCase.suiteFailureMarker));
    return f;
  }

