    public Page(File file, DocumentHeader header) {
      if (! file.getName().endsWith(".adoc")) {
        throw new RuntimeException(file + " has does not end in '.adoc' - this code can't be used");
      }
      
      this.file = file;
      this.title = header.getDocumentTitle().getMain();

      this.shortname = file.getName().replaceAll("\\.adoc$","");
      this.permalink = this.shortname + ".html";
      
      // TODO: do error checking if attribute metadata we care about is missing
      Map<String,Object> attrs = header.getAttributes();

      // TODO: SOLR-11541: we should eliminate these attributes
      // ...but for now at least be sure they are consistent
      if (attrs.containsKey("page-shortname")) {
        String explicit = (String) attrs.get("page-shortname");
        if (! shortname.equals(explicit)) {
          throw new RuntimeException(file + " ("+shortname+") has a mismatched page-shortname: " + explicit);
        }
      }
      if (attrs.containsKey("page-permalink")) {
        String explicit = (String) attrs.get("page-permalink");
        if (! permalink.equals(explicit)) {
          throw new RuntimeException(file + "("+permalink+") has a mismatched permalink: " + explicit);
        }
      }
      
      if (attrs.containsKey("page-children")) {
        String kidsString = ((String) attrs.get("page-children")).trim();
        this.kidShortnames = Collections.<String>unmodifiableList
          (Arrays.asList(kidsString.split(",\\s+")));
        this.mutableKids = new ArrayList<Page>(kidShortnames.size());
      } else {
        this.kidShortnames = Collections.<String>emptyList();
        this.mutableKids = Collections.<Page>emptyList();
      }
      this.kids = Collections.<Page>unmodifiableList(mutableKids);
    }

