  /**
   * Parses the given named list and builds a list of analysis phases form it. Expects a named list of the form:
   * <p/>
   * <pre><code>
   *  &lt;lst name="index"&gt;
   *      &lt;arr name="Tokenizer"&gt;
   *          &lt;str name="text"&gt;the_text&lt;/str&gt;
   *          &lt;str name="rawText"&gt;the_raw_text&lt;/str&gt; (optional)
   *          &lt;str name="type"&gt;the_type&lt;/str&gt;
   *          &lt;int name="start"&gt;1&lt;/str&gt;
   *          &lt;int name="end"&gt;3&lt;/str&gt;
   *          &lt;int name="position"&gt;1&lt;/str&gt;
   *          &lt;bool name="match"&gt;true | false&lt;/bool&gt; (optional)
   *      &lt;/arr&gt;
   *      &lt;arr name="Filter1"&gt;
   *          &lt;str name="text"&gt;the_text&lt;/str&gt;
   *          &lt;str name="rawText"&gt;the_raw_text&lt;/str&gt; (optional)
   *          &lt;str name="type"&gt;the_type&lt;/str&gt;
   *          &lt;int name="start"&gt;1&lt;/str&gt;
   *          &lt;int name="end"&gt;3&lt;/str&gt;
   *          &lt;int name="position"&gt;1&lt;/str&gt;
   *          &lt;bool name="match"&gt;true | false&lt;/bool&gt; (optional)
   *      &lt;/arr&gt;
   *      ...
   *  &lt;/lst&gt;
   * </code></pre>
   *
   * @param phaseNL The names list to parse.
   *
   * @return The built analysis phases list.
   */
  protected List<AnalysisPhase> buildPhases(NamedList<Object> phaseNL) {
    List<AnalysisPhase> phases = new ArrayList<AnalysisPhase>(phaseNL.size());
    for (Map.Entry<String, Object> phaseEntry : phaseNL) {
      AnalysisPhase phase = new AnalysisPhase(phaseEntry.getKey());
      List<NamedList> tokens = (List<NamedList>) phaseEntry.getValue();
      for (NamedList token : tokens) {
        TokenInfo tokenInfo = buildTokenInfo(token);
        phase.addTokenInfo(tokenInfo);
      }
      phases.add(phase);
    }
    return phases;
  }

