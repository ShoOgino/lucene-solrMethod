  void doTermEnum(int size) throws Exception {
    close();
    createIndex(size);
    req = lrf.makeRequest("q","*:*");

    TermIndex ti = new TermIndex(proto.field());
    NumberedTermsEnum te = ti.getEnumerator(req.getSearcher().getIndexReader());

    // iterate through first
    while(te.term() != null) te.next();
    assertEquals(size, te.getTermNumber());
    te.close();

    te = ti.getEnumerator(req.getSearcher().getIndexReader());

    Random r = new Random(size);
    // test seeking by term string
    for (int i=0; i<size*2+10; i++) {
      int rnum = r.nextInt(size+2);
      String s = t(rnum);
      BytesRef br = te.skipTo(new BytesRef(s));
      assertEquals(br != null, rnum < size);
      if (rnum < size) {
        assertEquals(rnum, te.pos);
        assertEquals(s, te.term().utf8ToString());
      } else {
        assertEquals(null, te.term());
        assertEquals(size, te.getTermNumber());
      }
    }

    // test seeking before term
    assertEquals(size>0, te.skipTo(new BytesRef("000")) != null);
    assertEquals(0, te.getTermNumber());
    if (size>0) {
      assertEquals(t(0), te.term().utf8ToString());
    } else {
      assertEquals(null, te.term());
    }

    if (size>0) {
      // test seeking by term number
      for (int i=0; i<size*2+10; i++) {
        int rnum = r.nextInt(size);
        String s = t(rnum);
        BytesRef br = te.skipTo(rnum);
        assertNotNull(br);
        assertEquals(rnum, te.pos);
        assertEquals(s, te.term().utf8ToString());
      }
    }
  }

