  public Map<Comparable,Doc> indexDocs(List<FldType> descriptor, Map<Comparable,Doc> model, int nDocs) throws Exception {
    if (model == null) {
      model = new LinkedHashMap<Comparable,Doc>();
    }

    // commit an average of 10 times for large sets, or 10% of the time for small sets
    int commitOneOutOf = Math.max(nDocs/10, 10);


    // find the max order (docid) and start from there
    int order = -1;
    for (Doc doc : model.values()) {
      order = Math.max(order, doc.order);
    }
    order++;

    for (int i=0; i<nDocs; i++) {
      Doc doc = createDoc(descriptor);
      doc.order = order++;
      updateJ(toJSON(doc), null);
      model.put(doc.id, doc);

      // commit 10% of the time
      if (random.nextInt(commitOneOutOf)==0) {
        assertU(commit());
      }

      // duplicate 10% of the docs
      if (random.nextInt(10)==0) {
        updateJ(toJSON(doc), null);
        model.put(doc.id, doc);        
      }
    }

    // optimize 10% of the time
    if (random.nextInt(10)==0) {
      assertU(optimize());
    } else {
      assertU(commit());
    }

    return model;
  }

