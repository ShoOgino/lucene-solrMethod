  /**
	 * @inheritDoc
	 * @see org.apache.lucene.analysis.TokenStream#next()
	 */
	public final Token next(Token in) throws IOException {
		StringBuilder termText = new StringBuilder(25);
		int startOffset = -1, firstPositionIncrement = -1, wordsMerged = 0;
		Token lastToken = null;
		for (Token token = input.next(in); token != null; token = input.next()) {
			termText.append(token.termBuffer(), 0, token.termLength());
			//current token ends with hyphen -> grab the next token and glue them together
			if (termText.charAt(termText.length() - 1) == '-') {
				wordsMerged++;
				//remove the hyphen
				termText.setLength(termText.length()-1);
				if (startOffset == -1) {
					startOffset = token.startOffset();
					firstPositionIncrement = token.getPositionIncrement();
				}
				lastToken = token;
			} else {
				//shortcut returns token
				if (wordsMerged == 0)
					return token;
				Token mergedToken = new Token(termText.toString(), startOffset, token.endOffset(), token.type());
				mergedToken.setPositionIncrement(firstPositionIncrement);
				return mergedToken;
			}
		}
		//last token ending with hyphen? - we know that we have only one token in
		//this situation, so we can safely return firstToken
		if (startOffset != -1)
			return lastToken;
		else
			return null; //end of token stream
	}

