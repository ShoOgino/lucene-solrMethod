  @Override
  public void handleResponses(ResponseBuilder rb, ShardRequest sreq) {
    if (!rb.doFacets) return;


    if ((sreq.purpose & ShardRequest.PURPOSE_GET_FACETS)!=0) {
      SimpleOrderedMap<List<NamedList<Object>>> tf = rb._pivots;
      if ( null == tf ) {
        tf = new SimpleOrderedMap<List<NamedList<Object>>>();
        rb._pivots = tf;
      }
      for (ShardResponse srsp: sreq.responses) {
        int shardNum = rb.getShardNum(srsp.getShard());

        NamedList facet_counts = (NamedList)srsp.getSolrResponse().getResponse().get("facet_counts");

        // handle facet trees from shards
        SimpleOrderedMap<List<NamedList<Object>>> shard_pivots = 
          (SimpleOrderedMap<List<NamedList<Object>>>)facet_counts.get( PIVOT_KEY );
        
        if ( shard_pivots != null ) {
          for (int j=0; j< shard_pivots.size(); j++) {
            // TODO -- accumulate the results from each shard
            // The following code worked to accumulate facets for an previous 
            // two level patch... it is here for reference till someone can upgrade
            /**
            String shard_tree_name = (String) shard_pivots.getName( j );
            SimpleOrderedMap<NamedList> shard_tree = (SimpleOrderedMap<NamedList>)shard_pivots.getVal( j );
            SimpleOrderedMap<NamedList> facet_tree = tf.get( shard_tree_name );
            if ( null == facet_tree) { 
              facet_tree = new SimpleOrderedMap<NamedList>(); 
              tf.add( shard_tree_name, facet_tree );
            }

            for( int o = 0; o < shard_tree.size() ; o++ ) {
              String shard_outer = (String) shard_tree.getName( o );
              NamedList shard_innerList = (NamedList) shard_tree.getVal( o );
              NamedList tree_innerList  = (NamedList) facet_tree.get( shard_outer );
              if ( null == tree_innerList ) { 
                tree_innerList = new NamedList();
                facet_tree.add( shard_outer, tree_innerList );
              }

              for ( int i = 0 ; i < shard_innerList.size() ; i++ ) {
                String shard_term = (String) shard_innerList.getName( i );
                long shard_count  = ((Number) shard_innerList.getVal(i)).longValue();
                int tree_idx      = tree_innerList.indexOf( shard_term, 0 );

                if ( -1 == tree_idx ) {
                  tree_innerList.add( shard_term, shard_count );
                } else {
                  long tree_count = ((Number) tree_innerList.getVal( tree_idx )).longValue();
                  tree_innerList.setVal( tree_idx, shard_count + tree_count );
                }
              } // innerList loop
            } // outer loop
              **/
          } // each tree loop
        }
      }
    } 
    return ;
  }

