  /**
   * Analyzes the given TokenStream, collecting the Tokens it produces.
   *
   * @param tokenStream TokenStream to analyze
   *
   * @return List of tokens produced from the TokenStream
   */
  private List<Token> analyzeTokenStream(TokenStream tokenStream) {
    List<Token> tokens = new ArrayList<Token>();

    // TODO change this API to support custom attributes
    TermAttribute termAtt = (TermAttribute) 
      tokenStream.addAttribute(TermAttribute.class);
    OffsetAttribute offsetAtt = (OffsetAttribute) 
      tokenStream.addAttribute(OffsetAttribute.class);
    TypeAttribute typeAtt = (TypeAttribute) 
      tokenStream.addAttribute(TypeAttribute.class);
    FlagsAttribute flagsAtt = (FlagsAttribute) 
      tokenStream.addAttribute(FlagsAttribute.class);
    PayloadAttribute payloadAtt = (PayloadAttribute) 
      tokenStream.addAttribute(PayloadAttribute.class);
    PositionIncrementAttribute posIncAtt = (PositionIncrementAttribute) 
      tokenStream.addAttribute(PositionIncrementAttribute.class);
    
    try {
      while (tokenStream.incrementToken()) {
        Token token = new Token();
        token.setTermBuffer(termAtt.termBuffer(), 0, termAtt.termLength());
        token.setOffset(offsetAtt.startOffset(), offsetAtt.endOffset());
        token.setType(typeAtt.type());
        token.setFlags(flagsAtt.getFlags());
        token.setPayload(payloadAtt.getPayload());
        token.setPositionIncrement(posIncAtt.getPositionIncrement());
        tokens.add((Token) token.clone());
      }
    } catch (IOException ioe) {
      throw new RuntimeException("Error occured while iterating over tokenstream", ioe);
    }

    return tokens;
  }

