    /**
     * Open a new stream using HttpClient
     */
    FastInputStream getStream() throws IOException {
      post = new PostMethod(masterUrl);
      //the method is command=filecontent
      post.addParameter(COMMAND, CMD_GET_FILE);
      //add the version to download. This is used to reserve the download
      post.addParameter(CMD_INDEX_VERSION, indexVersion.toString());
      if (isConf) {
        //set cf instead of file for config file
        post.addParameter(CONF_FILE_SHORT, fileName);
      } else {
        post.addParameter(FILE, fileName);
      }
      if (useInternal) {
        post.addParameter(COMPRESSION, "true");
      }
      if (useExternal) {
        post.setRequestHeader(new Header("Accept-Encoding", "gzip,deflate"));
      }
      //use checksum
      if (this.includeChecksum)
        post.addParameter(CHECKSUM, "true");
      //wt=filestream this is a custom protocol
      post.addParameter("wt", FILE_STREAM);
      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that
      // the server starts from the offset
      if (bytesDownloaded > 0) {
        post.addParameter(OFFSET, "" + bytesDownloaded);
      }
      myHttpClient.executeMethod(post);
      InputStream is = post.getResponseBodyAsStream();
      //wrap it using FastInputStream
      if (useInternal) {
        is = new InflaterInputStream(is);
      } else if (useExternal) {
        is = checkCompressed(post, is);
      }
      return new FastInputStream(is);
    }

