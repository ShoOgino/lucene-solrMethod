    void countTerms() throws IOException {
      si = FieldCache.DEFAULT.getTermsIndex(info.reader, fieldName);
      // SolrCore.log.info("reader= " + reader + "  FC=" + System.identityHashCode(si));

      if (prefix!=null) {
        BytesRef prefixRef = new BytesRef(prefix);
        startTermIndex = si.binarySearchLookup(prefixRef, tempBR);
        if (startTermIndex<0) startTermIndex=-startTermIndex-1;
        prefixRef.append(ByteUtils.bigTerm);
        // TODO: we could constrain the lower endpoint if we had a binarySearch method that allowed passing start/end
        endTermIndex = si.binarySearchLookup(prefixRef, tempBR);
        assert endTermIndex < 0;
        endTermIndex = -endTermIndex-1;
      } else {
        startTermIndex=0;
        endTermIndex=si.numOrd();
      }

      final int nTerms=endTermIndex-startTermIndex;
      if (nTerms>0) {
        // count collection array only needs to be as big as the number of terms we are
        // going to collect counts for.
        final int[] counts = this.counts = new int[nTerms];
        DocIdSet idSet = baseSet.getDocIdSet(info);
        DocIdSetIterator iter = idSet.iterator();


        ////
        PackedInts.Reader ordReader = si.getDocToOrd();
        int doc;

        if (ordReader instanceof Direct32) {
          int[] ords = ((Direct32)ordReader).getArray();
          if (prefix==null) {
            while ((doc = iter.nextDoc()) < DocIdSetIterator.NO_MORE_DOCS) {
              counts[ords[doc]]++;
            }
          } else {
            while ((doc = iter.nextDoc()) < DocIdSetIterator.NO_MORE_DOCS) {
              int term = ords[doc];
              int arrIdx = term-startTermIndex;
              if (arrIdx>=0 && arrIdx<nTerms) counts[arrIdx]++;
            }
          }
        } else if (ordReader instanceof Direct16) {
          short[] ords = ((Direct16)ordReader).getArray();
          if (prefix==null) {
            while ((doc = iter.nextDoc()) < DocIdSetIterator.NO_MORE_DOCS) {
              counts[ords[doc] & 0xffff]++;
            }
          } else {
            while ((doc = iter.nextDoc()) < DocIdSetIterator.NO_MORE_DOCS) {
              int term = ords[doc] & 0xffff;
              int arrIdx = term-startTermIndex;
              if (arrIdx>=0 && arrIdx<nTerms) counts[arrIdx]++;
            }
          }
        } else if (ordReader instanceof Direct8) {
          byte[] ords = ((Direct8)ordReader).getArray();
          if (prefix==null) {
            while ((doc = iter.nextDoc()) < DocIdSetIterator.NO_MORE_DOCS) {
              counts[ords[doc] & 0xff]++;
            }
          } else {
            while ((doc = iter.nextDoc()) < DocIdSetIterator.NO_MORE_DOCS) {
              int term = ords[doc] & 0xff;
              int arrIdx = term-startTermIndex;
              if (arrIdx>=0 && arrIdx<nTerms) counts[arrIdx]++;
            }
          }
        } else {
          if (prefix==null) {
            // specialized version when collecting counts for all terms
            while ((doc = iter.nextDoc()) < DocIdSetIterator.NO_MORE_DOCS) {
              counts[si.getOrd(doc)]++;
            }
          } else {
            // version that adjusts term numbers because we aren't collecting the full range
            while ((doc = iter.nextDoc()) < DocIdSetIterator.NO_MORE_DOCS) {
              int term = si.getOrd(doc);
              int arrIdx = term-startTermIndex;
              if (arrIdx>=0 && arrIdx<nTerms) counts[arrIdx]++;
            }
          }
        }

      }
    }

