    void countTerms() throws IOException {
      si = FieldCache.DEFAULT.getTermsIndex(reader, fieldName);
      // SolrCore.log.info("reader= " + reader + "  FC=" + System.identityHashCode(si));

      if (prefix!=null) {
        startTermIndex = si.binarySearchLookup(new BytesRef(prefix), tempBR);
        if (startTermIndex<0) startTermIndex=-startTermIndex-1;
        // find the end term.  \uffff isn't a legal unicode char, but only compareTo
        // is used, so it should be fine, and is guaranteed to be bigger than legal chars.
        // TODO: switch to binarySearch version that takes start/end in Java6
        endTermIndex = si.binarySearchLookup(new BytesRef(prefix+"\uffff\uffff\uffff\uffff"), tempBR);
        assert endTermIndex < 0;
        endTermIndex = -endTermIndex-1;
      } else {
        startTermIndex=0;
        endTermIndex=si.numOrd();
      }

      final int nTerms=endTermIndex-startTermIndex;
      if (nTerms>0) {
        // count collection array only needs to be as big as the number of terms we are
        // going to collect counts for.
        final int[] counts = this.counts = new int[nTerms];
        DocIdSet idSet = baseSet.getDocIdSet(reader);
        DocIdSetIterator iter = idSet.iterator();

        if (startTermIndex==0 && endTermIndex==si.numOrd()) {
          // specialized version when collecting counts for all terms
          int doc;
          while ((doc = iter.nextDoc()) < DocIdSetIterator.NO_MORE_DOCS) {
            counts[si.getOrd(doc)]++;
          }
        } else {
          // version that adjusts term numbers because we aren't collecting the full range
          int doc;
          while ((doc = iter.nextDoc()) < DocIdSetIterator.NO_MORE_DOCS) {
            int term = si.getOrd(doc);
            int arrIdx = term-startTermIndex;
            if (arrIdx>=0 && arrIdx<nTerms) counts[arrIdx]++;
          }
        }
      }
    }

