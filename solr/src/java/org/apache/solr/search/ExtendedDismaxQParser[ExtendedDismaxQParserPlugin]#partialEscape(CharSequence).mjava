  public static CharSequence partialEscape(CharSequence s) {
    StringBuilder sb = new StringBuilder();

    int len = s.length();
    for (int i = 0; i < len; i++) {
      char c = s.charAt(i);
      if (c == ':') {
        // look forward to make sure it's something that won't
        // cause a parse exception (something that won't be escaped... like
        // +,-,:, whitespace
        if (i+1<len && i>0) {
          char ch = s.charAt(i+1);
          if (!(Character.isWhitespace(ch) || ch=='+' || ch=='-' || ch==':')) {
            // OK, at this point the chars after the ':' will be fine.
            // now look back and try to determine if this is a fieldname
            // [+,-]? [letter,_] [letter digit,_,-,.]*
            // This won't cover *all* possible lucene fieldnames, but we should
            // only pick nice names to begin with
            int start, pos;
            for (start=i-1; start>=0; start--) {
              ch = s.charAt(start);
              if (Character.isWhitespace(ch)) break;
            }

            // skip whitespace
            pos = start+1;

            // skip leading + or -
            ch = s.charAt(pos);
            if (ch=='+' || ch=='-') {
              pos++;
            }

            // we don't need to explicitly check for end of string
            // since ':' will act as our sentinal

              // first char can't be '-' or '.'
              ch = s.charAt(pos++);
              if (Character.isJavaIdentifierPart(ch)) {

                for(;;) {
                  ch = s.charAt(pos++);
                  if (!(Character.isJavaIdentifierPart(ch) || ch=='-' || ch=='.')) {
                    break;
                  }
                }

                if (pos<=i) {
                  // OK, we got to the ':' and everything looked like a valid fieldname, so
                  // don't escape the ':'
                  sb.append(':');
                  continue;  // jump back to start of outer-most loop
                }

              }


          }
        }

        // we fell through to here, so we should escape this like other reserved chars.
        sb.append('\\');
      }
      else if (c == '\\' || c == '!' || c == '(' || c == ')' ||
          c == '^' || c == '[' || c == ']' ||
          c == '{'  || c == '}' || c == '~' || c == '*' || c == '?'
          )
      {
        sb.append('\\');
      }
      sb.append(c);
    }
    return sb;
  }

