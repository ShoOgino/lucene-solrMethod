    private DocList createSimpleResponse() {
      int docCount = numGroups;
      int docOffset = offset;    
      int docsToGather = getMax(docOffset, docCount, maxDoc);

      float maxScore = Float.NEGATIVE_INFINITY; 
      List<TopDocs> topDocsList = new ArrayList<TopDocs>();
      int numDocs = 0;
      for (SearchGroup group : collector.orderedGroups) {
        SearchGroupDocs groupDocs = collector2.groupMap.get(group.groupValue);
        
        TopDocsCollector collector = groupDocs.collector;
        int hits = collector.getTotalHits();

        int num = Math.min(docsPerGroup, hits - groupOffset); // how many docs are in this group
        if (num <= 0) continue;

        TopDocs topDocs = collector.topDocs(groupOffset, Math.min(docsPerGroup,docsToGather-numDocs));
        topDocsList.add(topDocs);
        numDocs += topDocs.scoreDocs.length;

        float score = topDocs.getMaxScore();
        maxScore = Math.max(maxScore, score);

        if (numDocs >= docsToGather) break;
      }
      assert numDocs <= docCount; // make sure we didn't gather too many
      
      int[] ids = new int[numDocs];
      float[] scores = needScores ? new float[numDocs] : null;
      int pos = 0;

      for (TopDocs topDocs : topDocsList) {
        for (ScoreDoc sd : topDocs.scoreDocs) {
          ids[pos] = sd.doc;
          if (scores != null) scores[pos] = sd.score;
          pos++;
        }
      }

      DocSlice docs = new DocSlice(docOffset, Math.max(0, ids.length - docOffset), ids, scores, getMatches(), maxScore);

      if (getDocList) {
        DocIterator iter = docs.iterator();
        while (iter.hasNext())
          idSet.add(iter.nextDoc());
      }

      return docs;
    }

