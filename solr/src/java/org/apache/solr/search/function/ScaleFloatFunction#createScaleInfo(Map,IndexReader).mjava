  private ScaleInfo createScaleInfo(Map context, IndexReader reader) throws IOException {
    IndexReader.ReaderContext ctx = ValueSource.readerToContext(context, reader);
    while (ctx.parent != null) ctx = ctx.parent;
    AtomicReaderContext[] leaves = ctx.leaves();
    if (ctx == null) leaves = new AtomicReaderContext[] {(AtomicReaderContext)ctx};

    float minVal = Float.POSITIVE_INFINITY;
    float maxVal = Float.NEGATIVE_INFINITY;

    for (AtomicReaderContext leaf : leaves) {
      int maxDoc = leaf.reader.maxDoc();
      DocValues vals =  source.getValues(context, leaf.reader);
      for (int i=0; i<maxDoc; i++) {

      float val = vals.floatVal(i);
      if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {
        // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN
        // which don't make sense to factor into the scale function
        continue;
      }
      if (val < minVal) {
        minVal = val;
      }
      if (val > maxVal) {
        maxVal = val;
      }
    }
    }

    if (minVal == Float.POSITIVE_INFINITY) {
    // must have been an empty index
      minVal = maxVal = 0;
    }

    ScaleInfo scaleInfo = new ScaleInfo();
    scaleInfo.minVal = minVal;
    scaleInfo.maxVal = maxVal;
    context.put(this.source, scaleInfo);
    return scaleInfo;
  }

