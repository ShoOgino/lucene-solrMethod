  /** Recursively wrap an IndexReader in SolrIndexReader instances.
   * @param in  the reader to wrap
   * @param parent the parent, if any (null if none)
   * @param base the docid offset in the parent (0 if top level)
   */
  public SolrIndexReader(IndexReader in, SolrIndexReader parent, int base) {
    super(in);
    assert(!(in instanceof SolrIndexReader));
    this.parent = parent;
    this.base = base;
    IndexReader subs[] = in.getSequentialSubReaders();
    if (subs != null) {
      subReaders = new SolrIndexReader[subs.length]; 
      int numLeaves = subs.length;
      leafOffsets = new int[numLeaves];
      int b=0;
      for (int i=0; i<subReaders.length; i++) {
        SolrIndexReader sir = subReaders[i] = new SolrIndexReader(subs[i], this, b);
        leafOffsets[i] = b;
        b += sir.maxDoc();
        IndexReader subLeaves[] = sir.leafReaders;
        numLeaves += subLeaves.length - 1;  // subtract 1 for the parent
      }
      leafReaders = getLeaves(numLeaves);
    } else {
      subReaders = null;
      leafReaders = new SolrIndexReader[]{this};
      leafOffsets = zeroIntArray;
    }
    topLevelContext = ReaderUtil.buildReaderContext(this);
  }

