  public TopDocs optimize(BooleanQuery original,
                          Searcher searcher,
                          int numHits,
                          Query[] queryOut,
                          Filter[] filterOut
                          )
    throws IOException {

    BooleanQuery query = new BooleanQuery();
    BooleanQuery filterQuery = null;

    for (BooleanClause c : (List<BooleanClause>)original.clauses()) {

/***
System.out.println("required="+c.required);
System.out.println("boost="+c.query.getBoost());
System.out.println("isTermQuery="+(c.query instanceof TermQuery));
if (c.query instanceof TermQuery) {
 System.out.println("term="+((TermQuery)c.query).getTerm());
 System.out.println("docFreq="+searcher.docFreq(((TermQuery)c.query).getTerm()));
}
***/
      Query q = c.getQuery();
      if (c.isRequired()                              // required
          && q.getBoost() == 0.0f           // boost is zero
          && q instanceof TermQuery         // TermQuery
          && (searcher.docFreq(((TermQuery)q).getTerm())
              / (float)searcher.maxDoc()) >= threshold) { // check threshold
        if (filterQuery == null)
          filterQuery = new BooleanQuery();
        filterQuery.add(q, BooleanClause.Occur.MUST);    // filter it
//System.out.println("WooHoo... qualified to be hoisted to a filter!");
      } else {
        query.add(c);                             // query it
      }
    }

    Filter filter = null;
    if (filterQuery != null) {
      synchronized (cache) {                      // check cache
        filter = (Filter)cache.get(filterQuery);
      }
      if (filter == null) {                       // miss
        filter = new CachingWrapperFilter(new QueryWrapperFilter(filterQuery)); // construct new entry
        synchronized (cache) {
          cache.put(filterQuery, filter);         // cache it
        }
      }        
    }

    // YCS: added code to pass out optimized query and filter
    // so they can be used with Hits
    if (queryOut != null && filterOut != null) {
      queryOut[0] = query; filterOut[0] = filter;
      return null;
    } else {
      return searcher.search(query, filter, numHits);
    }

  }

