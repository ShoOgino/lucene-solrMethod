  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {
    return new StringIndexDocValues(this, readerContext, field) {
      protected String toTerm(String readableValue) {
        // needed for frange queries to work properly
        return ft.toInternal(readableValue);
      }

      public float floatVal(int doc) {
        return (float)intVal(doc);
      }

      public int intVal(int doc) {
        int ord=termsIndex.getOrd(doc);
        return ord;
      }

      public long longVal(int doc) {
        return (long)intVal(doc);
      }

      public double doubleVal(int doc) {
        return (double)intVal(doc);
      }

      public String strVal(int doc) {
        int ord=termsIndex.getOrd(doc);
        if (ord == 0) {
          return null;
        } else {
          BytesRef br = termsIndex.lookup(ord, new BytesRef());
          CharArr spare = new CharArr();
          ft.indexedToReadable(br, spare);
          return spare.toString();
        }
      }

      public String toString(int doc) {
        return description() + '=' + intVal(doc);
      }
    };
  }

