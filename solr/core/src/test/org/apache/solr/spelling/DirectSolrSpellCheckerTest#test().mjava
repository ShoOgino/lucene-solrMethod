  @Test
  public void test() throws Exception {
    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();
    NamedList spellchecker = new NamedList();
    spellchecker.add("classname", DirectSolrSpellChecker.class.getName());
    spellchecker.add(SolrSpellChecker.FIELD, "teststop");
    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2); // we will try "fob"

    SolrCore core = h.getCore();
    checker.init(spellchecker, core);

    h.getCore().withSearcher(searcher -> {

      // check that 'fob' is corrected to 'foo'
      Collection<Token> tokens = queryConverter.convert("fob");
      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());
      SpellingResult result = checker.getSuggestions(spellOpts);
      assertNotNull("result shouldn't be null", result);
      Map<String, Integer> suggestions = result.get(tokens.iterator().next());
      assertFalse("suggestions shouldn't be empty", suggestions.isEmpty());
      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();
      assertEquals("foo", entry.getKey());
      assertFalse(entry.getValue() + " equals: " + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);

      // check that 'super' is *not* corrected
      spellOpts.tokens = queryConverter.convert("super");
      result = checker.getSuggestions(spellOpts);
      assertNotNull("result shouldn't be null", result);
      suggestions = result.get(spellOpts.tokens.iterator().next());
      assertNotNull("suggestions shouldn't be null", suggestions);
      assertTrue("suggestions should be empty", suggestions.isEmpty());
      return null;
    });
  }

