  @Test
  public void testEstimatedHitCounts() throws Exception {
    final String xpathPrefix = 
      "//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/";
    final SolrParams reusedParams = params
      (SpellCheckComponent.COMPONENT_NAME, "true",
       SpellCheckComponent.SPELLCHECK_DICT, "direct",
       SpellingParams.SPELLCHECK_COUNT, "1",   
       SpellingParams.SPELLCHECK_COLLATE, "true",
       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, "1",
       SpellingParams.SPELLCHECK_MAX_COLLATIONS, "1",
       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, "true",          
       "qt", "spellCheckCompRH");       

    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits
    assertQ(req(reusedParams, 
                CommonParams.Q, "teststop:metnoia")
            , xpathPrefix + "str[@name='collationQuery']='teststop:metanoia'"
            , xpathPrefix + "int[@name='hits']=6"        
            );

    // specifying 0 means "exact" same as default, but specifing a value greater 
    // then the total number of docs in the index should also result in it
    // "estimating" and getting exact number as well.
    for (String val : new String[] { "0", "30", "100", "10000" }) {
      assertQ(req(reusedParams,
                  CommonParams.Q, "teststop:metnoia",
                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)
              , xpathPrefix + "str[@name='collationQuery']='teststop:metanoia'"
              , xpathPrefix + "int[@name='hits']=6"        
              );
    }

    // values between 0 and the num docs in the index should not error, and should 
    // produce an estimate no more then the total number of docs
    final int iters = atLeast(10);
    for (int iter = 0; iter < iters; iter++) {
      final int val = TestUtil.nextInt(random(), 1, 17);
      assertQ(req(reusedParams,
                  CommonParams.Q, "teststop:metnoia",
                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, ""+val)
              , xpathPrefix + "str[@name='collationQuery']='teststop:metanoia'"
              , xpathPrefix + "int[@name='hits' and . <= 17 and 0 < .]"        
              );
    }

    // "everYother" appears in every other doc in the index, so "everother" 
    // should produce a "decent" aproximation of the number of hits (8)
    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS
    //
    // (we have to be kind of flexible with our definition of "decent"
    // since we're dealing with a fairly small index here)
    for (int val = 5; val <= 20; val++) {
      assertQ(req(reusedParams,
                  CommonParams.Q, "teststop:everother",
                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, ""+val)
              , xpathPrefix + "str[@name='collationQuery']='teststop:everyother'"
              , xpathPrefix + "int[@name='hits' and 6 <= . and . <= 10]"        
              );
    }

  } 

