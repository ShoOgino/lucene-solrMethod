  @Test
  public void test() throws Exception {
    ConjunctionSolrSpellChecker cssc = new ConjunctionSolrSpellChecker();
    @SuppressWarnings("unchecked")
    Class<StringDistance> sameDistance = (Class<StringDistance>) AVAILABLE_DISTANCES[random().nextInt(AVAILABLE_DISTANCES.length)];
    
    StringDistance sameDistance1 = sameDistance.getConstructor().newInstance();
    StringDistance sameDistance2 = sameDistance.getConstructor().newInstance();
    
    //NGramDistance defaults to 2, so we'll try 3 or 4 to ensure we have one that is not-equal.
    StringDistance differentDistance = new NGramDistance(3);
    if(sameDistance1.equals(differentDistance)) {
      differentDistance = new NGramDistance(4);
      if(sameDistance1.equals(differentDistance)) {
        fail("Cannot set up test.  2 NGramDistances with different gram sizes should not be equal.");
      }
    }
    Assert.assertEquals("The distance " + sameDistance + " does not properly implement equals.", sameDistance1, sameDistance2);
    
    
    MockSolrSpellChecker checker1 = new MockSolrSpellChecker(sameDistance1);
    MockSolrSpellChecker checker2 = new MockSolrSpellChecker(sameDistance2);
    MockSolrSpellChecker checker3 = new MockSolrSpellChecker(differentDistance);
    
    cssc.addChecker(checker1);
    cssc.addChecker(checker2);
    try {
      cssc.addChecker(checker3);
      fail("ConjunctionSolrSpellChecker should have thrown an exception about non-identical StringDistances.");
    } catch (IllegalArgumentException iae) {
      // correct behavior
    }
  }

