  /**
   * No indexDir location set
   */
  @Test
  @SuppressWarnings({"unchecked"})
  public void testRAMDirectory() throws Exception {
    FileBasedSpellChecker checker = new FileBasedSpellChecker();
    @SuppressWarnings({"rawtypes"})
    NamedList spellchecker = new NamedList();
    spellchecker.add("classname", FileBasedSpellChecker.class.getName());

    spellchecker.add(SolrSpellChecker.DICTIONARY_NAME, "external");
    spellchecker.add(AbstractLuceneSpellChecker.LOCATION, "spellings.txt");
    spellchecker.add(FileBasedSpellChecker.SOURCE_FILE_CHAR_ENCODING, "UTF-8");
    spellchecker.add(AbstractLuceneSpellChecker.FIELD, "teststop");
    spellchecker.add(SolrSpellChecker.FIELD_TYPE, "teststop");
    spellchecker.add(AbstractLuceneSpellChecker.SPELLCHECKER_ARG_NAME, spellchecker);

    SolrCore core = h.getCore();
    String dictName = checker.init(spellchecker, core);
    assertTrue(dictName + " is not equal to " + "external", dictName.equals("external") == true);
    checker.build(core, null);

    h.getCore().withSearcher(searcher -> {
      Collection<Token> tokens = queryConverter.convert("solar");
      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());
      SpellingResult result = checker.getSuggestions(spellOpts);
      assertTrue("result is null and it shouldn't be", result != null);
      //should be lowercased, b/c we are using a lowercasing analyzer
      Map<String, Integer> suggestions = result.get(tokens.iterator().next());
      assertTrue("suggestions Size: " + suggestions.size() + " is not: " + 1, suggestions.size() == 1);
      Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();
      assertTrue(entry.getKey() + " is not equal to " + "solr", entry.getKey().equals("solr") == true);
      assertTrue(entry.getValue() + " does not equal: " + SpellingResult.NO_FREQUENCY_INFO, entry.getValue() == SpellingResult.NO_FREQUENCY_INFO);


      spellOpts.tokens = queryConverter.convert("super");
      result = checker.getSuggestions(spellOpts);
      assertTrue("result is null and it shouldn't be", result != null);
      suggestions = result.get(spellOpts.tokens.iterator().next());
      assertTrue("suggestions size should be 0", suggestions.size()==0);
      return null;
    });
  }

