  private void testMaxQueryLength(Boolean limitQueryLength) throws Exception {

    DirectSolrSpellChecker checker = new DirectSolrSpellChecker();
    NamedList<Object> spellchecker = new NamedList<>();
    spellchecker.add("classname", DirectSolrSpellChecker.class.getName());
    spellchecker.add(SolrSpellChecker.FIELD, "teststop");
    spellchecker.add(DirectSolrSpellChecker.MINQUERYLENGTH, 2);

    // demonstrate that "anothar" is not corrected when maxQueryLength is set to a small number
    if (limitQueryLength) spellchecker.add(DirectSolrSpellChecker.MAXQUERYLENGTH, 4);

    SolrCore core = h.getCore();
    checker.init(spellchecker, core);

    h.getCore().withSearcher(searcher -> {
      Collection<Token> tokens = queryConverter.convert("anothar");
      SpellingOptions spellOpts = new SpellingOptions(tokens, searcher.getIndexReader());
      SpellingResult result = checker.getSuggestions(spellOpts);
      assertNotNull("result shouldn't be null", result);
      Map<String, Integer> suggestions = result.get(tokens.iterator().next());
      assertNotNull("suggestions shouldn't be null", suggestions);

      if (limitQueryLength) {
        assertTrue("suggestions should be empty", suggestions.isEmpty());
      } else {
        assertFalse("suggestions shouldn't be empty", suggestions.isEmpty());
        Map.Entry<String, Integer> entry = suggestions.entrySet().iterator().next();
        assertEquals("another", entry.getKey());
      }

      return null;
    });
  }

