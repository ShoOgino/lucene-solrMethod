  @Test
  public void testLongFields() {
    assertU(adoc("id", "1", "test_l_dv", "0"));
    assertU(adoc("id", "2", "test_l_dv", "1"));
    assertU(adoc("id", "3", "test_l_dv", "2"));
    assertU(adoc("id", "4", "test_l_dv", "3"));
    assertU(adoc("id", "5", "test_l_dv", "4"));
    assertU(adoc("id", "6", "test_l_dv", "5"));
    assertU(adoc("id", "7", "test_l_dv", "6"));
    assertU(adoc("id", "8", "test_l_dv", "7"));
    assertU(adoc("id", "9", "test_l_dv", "8"));
    assertU(adoc("id", "10"));
    assertU(adoc("id", "11", "test_l_dv", "10"));
    assertU(commit());

    assertIntervalQueriesNumeric("test_l_dv");
    assertU(adoc("id", "12", "test_l_dv", String.valueOf(Long.MAX_VALUE - 3)));
    assertU(adoc("id", "13", "test_l_dv", String.valueOf(Long.MAX_VALUE - 2)));
    assertU(adoc("id", "14", "test_l_dv", String.valueOf(Long.MAX_VALUE - 1)));
    assertU(adoc("id", "15", "test_l_dv", String.valueOf(Long.MAX_VALUE)));
    assertU(adoc("id", "16", "test_l_dv", String.valueOf(Long.MIN_VALUE)));
    assertU(commit());

    assertIntervalQuery("test_l_dv", "[0," + Integer.MAX_VALUE + "]", "10");
    assertIntervalQuery("test_l_dv", "(10," + Long.MAX_VALUE + "]", "4");
    assertIntervalQuery("test_l_dv", "[" + Long.MAX_VALUE + "," + Long.MAX_VALUE + "]", "1");
    assertIntervalQuery("test_l_dv", "[" + Long.MAX_VALUE + ",*]", "1");
    assertIntervalQuery("test_l_dv", "(" + Long.MAX_VALUE + ",*]", "0");
    assertIntervalQuery("test_l_dv", "(*, " + Long.MIN_VALUE + "]", "1");
    assertIntervalQuery("test_l_dv", "(*, " + Long.MIN_VALUE + ")", "0");
    assertIntervalQuery("test_l_dv", "(" + (Long.MAX_VALUE - 1) + ",*]", "1");
    assertIntervalQuery("test_l_dv", "[" + (Long.MAX_VALUE - 1) + ",*]", "2");
  }

