  @Test
  public void testOnMissingParams() {
    final Map<String,String[]> testParams = new HashMap<String,String[]>();
    final MacroExpander meSkipOnMissingParams = new MacroExpander(testParams);
    final MacroExpander meFailOnMissingParams = new MacroExpander(testParams, true);

    final String low = "50";
    final String high = "100";
    testParams.put("low", new String[]{ low });
    testParams.put("high", new String[]{ high });

    final String testQuery = "q=popularity:[ ${low} TO ${high} ]";

    //when params all present the expansion results match
    final String expandedQuery = "q=popularity:[ "+low+" TO "+high+" ]";
    assertEquals(expandedQuery, meSkipOnMissingParams.expand(testQuery));
    assertEquals(expandedQuery, meFailOnMissingParams.expand(testQuery));

    //when param(s) missing and have no default the expansion results differ
    final String expandedLow;
    final String expandedHigh;
    if (random().nextBoolean()) { // keep low
      expandedLow = low;
    } else {
      expandedLow = "";
      testParams.remove("low");
    }
    if (random().nextBoolean()) { // keep high
      expandedHigh = high;
    } else {
      expandedHigh = "";
      testParams.remove("high");
    }
    assertEquals("q=popularity:[ "+expandedLow+" TO "+expandedHigh+" ]",
        meSkipOnMissingParams.expand(testQuery));
    if (testParams.size() < 2) { // at least one of the two parameters missing
      assertEquals(null, meFailOnMissingParams.expand(testQuery));
    }
  }

