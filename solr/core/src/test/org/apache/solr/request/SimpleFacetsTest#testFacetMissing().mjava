  @Test
  public void testFacetMissing() {
    SolrParams commonParams = params("q", "foo_s:A", "rows", "0", "facet", "true", "facet.missing", "true");

    // with facet.limit!=0 and facet.missing=true
    assertQ(
        req(commonParams, "facet.field", "trait_s", "facet.limit", "1"),
        "//lst[@name='facet_counts']/lst[@name='facet_fields']",
        "//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='trait_s']",
        "*[count(//lst[@name='trait_s']/int)=2]",
        "//lst[@name='trait_s']/int[@name='Obnoxious'][.='2']",
        "//lst[@name='trait_s']/int[.='1']"
    );

    // with facet.limit=0 and facet.missing=true
    assertQ(
        req(commonParams, "facet.field", "trait_s", "facet.limit", "0"),
        "//lst[@name='facet_counts']/lst[@name='facet_fields']",
        "//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='trait_s']",
        "*[count(//lst[@name='trait_s']/int)=1]",
        "//lst[@name='trait_s']/int[.='1']"
    );

    // facet.method=enum
    assertQ(
        req(commonParams, "facet.field", "trait_s", "facet.limit", "0", "facet.method", "enum"),
        "//lst[@name='facet_counts']/lst[@name='facet_fields']",
        "//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='trait_s']",
        "*[count(//lst[@name='trait_s']/int)=1]",
        "//lst[@name='trait_s']/int[.='1']"
    );

    assertQ(
        req(commonParams, "facet.field", "trait_s", "facet.limit", "0", "facet.mincount", "1",
            "facet.method", "uif"),
        "//lst[@name='facet_counts']/lst[@name='facet_fields']",
        "//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='trait_s']",
        "*[count(//lst[@name='trait_s']/int)=1]",
        "//lst[@name='trait_s']/int[.='1']"
    );

    // facet.method=fcs
    assertQ(
        req(commonParams, "facet.field", "trait_s", "facet.limit", "0", "facet.method", "fcs"),
        "//lst[@name='facet_counts']/lst[@name='facet_fields']",
        "//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='trait_s']",
        "*[count(//lst[@name='trait_s']/int)=1]",
        "//lst[@name='trait_s']/int[.='1']"
    );

    // facet.missing=true on numeric field
    assertQ(
        req(commonParams, "facet.field", "range_facet_f", "facet.limit", "1", "facet.mincount", "1"),
        "//lst[@name='facet_counts']/lst[@name='facet_fields']",
        "//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='range_facet_f']",
        "*[count(//lst[@name='range_facet_f']/int)=2]",
        "//lst[@name='range_facet_f']/int[.='0']"
    );

    // facet.limit=0
    assertQ(
        req(commonParams, "facet.field", "range_facet_f", "facet.limit", "0", "facet.mincount", "1"),
        "//lst[@name='facet_counts']/lst[@name='facet_fields']",
        "//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='range_facet_f']",
        "*[count(//lst[@name='range_facet_f']/int)=1]",
        "//lst[@name='range_facet_f']/int[.='0']"
    );
  }

