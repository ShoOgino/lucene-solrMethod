  @Test
  @Slow
  public void testRandom() throws Exception {
    // All field values will be a number between 0 and cardinality
    int cardinality = 10000;
    // Fields to use for interval faceting
    String[] fields = new String[]{
        "test_s_dv", "test_i_dv", "test_l_dv", "test_f_dv", "test_d_dv", "test_dt_dv",
        "test_ss_dv", "test_is_dv", "test_fs_dv", "test_ls_dv", "test_ds_dv", "test_dts_dv", "test_s", "test_i", 
        "test_l", "test_f", "test_d", "test_dt", "test_ss", "test_is", "test_fs", "test_ls", "test_ds", "test_dts",
        "test_i_p", "test_is_p", "test_l_p", "test_ls_p", "test_f_p", "test_fs_p", "test_d_p", "test_ds_p", "test_dts_p"
        };
    for (int i = 0; i < atLeast(500); i++) {
      if (random().nextInt(50) == 0) {
        //have some empty docs
        assertU(adoc("id", String.valueOf(i)));
        continue;
      }

      if (random().nextInt(100) == 0 && i > 0) {
        //delete some docs
        assertU(delI(String.valueOf(i - 1)));
      }
      String[] docFields = new String[(random().nextInt(5)) * 12 + 14];
      docFields[0] = "id";
      docFields[1] = String.valueOf(i * (random().nextBoolean()?1:-1)); // in the queries we do positive and negative
      docFields[2] = "test_s";
      docFields[3] = String.valueOf(randomInt(cardinality));
      docFields[4] = "test_i";
      docFields[5] = String.valueOf(randomInt(cardinality));
      docFields[6] = "test_l";
      docFields[7] = String.valueOf(randomLong(cardinality));
      docFields[8] = "test_f";
      docFields[9] = String.valueOf(randomFloat(cardinality));
      docFields[10] = "test_d";
      docFields[11] = String.valueOf(raondomDouble(cardinality));
      docFields[12] = "test_dt";
      docFields[13] = dateFormat.format(new Date(randomMs(cardinality)));
      for (int j = 14; j < docFields.length; ) {
        docFields[j++] = "test_ss";
        docFields[j++] = String.valueOf(randomInt(cardinality));
        docFields[j++] = "test_is";
        docFields[j++] = String.valueOf(randomInt(cardinality));
        docFields[j++] = "test_ls";
        docFields[j++] = String.valueOf(randomLong(cardinality));
        docFields[j++] = "test_fs";
        docFields[j++] = String.valueOf(randomFloat(cardinality));
        docFields[j++] = "test_ds";
        docFields[j++] = String.valueOf(raondomDouble(cardinality));
        docFields[j++] = "test_dts";
        docFields[j++] = dateFormat.format(new Date(randomMs(cardinality)));
      }
      assertU(adoc(docFields));
      if (random().nextInt(50) == 0) {
        assertU(commit());
      }
    }
    assertU(commit());

    for (int i = 0; i < atLeast(10000); i++) {
      doTestQuery(cardinality, fields);
    }

  }

