  @Test
  public void testExamples() {
    final Map<String,String[]> testParams = new HashMap<String,String[]>();
    final MacroExpander me;
    // example behavior unaffected by absence or value of failOnMissingParams
    if (random().nextBoolean()) {
      me = new MacroExpander(testParams);
    } else {
      final boolean failOnMissingParams = random().nextBoolean();
      me = new MacroExpander(testParams, failOnMissingParams);
    }

    //default examples: https://cwiki.apache.org/confluence/display/solr/Parameter+Substitution
    // and http://yonik.com/solr-query-parameter-substitution/

    //using params
    String[] lowParams = {"50"};
    testParams.put("low",lowParams);
    String[] highParams = {"100"};
    testParams.put("high",highParams);

    String testQuery = "q=popularity:[ ${low} TO ${high} ]";

    assertEquals("q=popularity:[ 50 TO 100 ]", me.expand(testQuery));

    //using default values
    testQuery = "q=popularity:[ ${low:10} TO ${high:20} ]";
    assertEquals("q=popularity:[ 50 TO 100 ]", me.expand(testQuery));

    testParams.clear();
    assertEquals("q=popularity:[ 10 TO 20 ]", me.expand(testQuery));

    //multiple levels of substitutions
    testQuery = "q=${pop_query}";
    String[] popQueryParams = {"${pop_field}:[ ${low} TO ${high} ] AND inStock:true"};
    String[] popFieldParams = {"popularity"};
    testParams.put("low",lowParams);
    testParams.put("high",highParams);
    testParams.put("pop_query",popQueryParams);
    testParams.put("pop_field",popFieldParams);

    assertEquals("q=popularity:[ 50 TO 100 ] AND inStock:true", me.expand(testQuery));

    //end default examples
  }

