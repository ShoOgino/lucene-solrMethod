  @Test
  public void testUnbalanced() { // SOLR-13181
    final Map<String, String[]> request = Collections.singletonMap("answer", new String[]{ "42" });
    final MacroExpander meSkipOnMissingParams = new MacroExpander(request);
    final MacroExpander meFailOnMissingParams = new MacroExpander(request, true);
    assertEquals("${noClose", meSkipOnMissingParams.expand("${noClose"));
    assertEquals("42 ${noClose", meSkipOnMissingParams.expand("${answer} ${noClose"));
    assertEquals("42 ${noClose fooBar", meSkipOnMissingParams.expand("${answer} ${noClose fooBar"));
    assertNull(meFailOnMissingParams.expand("${noClose"));
    assertNull(meFailOnMissingParams.expand("${answer} ${noClose"));
    assertNull(meFailOnMissingParams.expand("${answer} ${noClose fooBar"));

    assertEquals("${${b}}", meSkipOnMissingParams.expand("${${b}}"));
    assertNull(meFailOnMissingParams.expand("${${b}}"));

    // Does not register as a syntax failure, although may subjectively look like it.
    //   Consequently, the expression is replaced with nothing in default mode.
    //   It'd be nice if there was a mode to leave un-resolved macros as-is when they don't resolve.
    assertEquals("preamble ", meSkipOnMissingParams.expand("preamble ${exp${bad}"));
    assertNull(meFailOnMissingParams.expand("preamble ${exp${bad}"));
  }

