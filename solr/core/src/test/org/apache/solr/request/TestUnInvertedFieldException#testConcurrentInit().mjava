  @Test
  public void testConcurrentInit() throws Exception {
    final SolrQueryRequest req = req("*:*");
    final SolrIndexSearcher searcher = req.getSearcher();

    List<Callable<UnInvertedField>> initCallables = new ArrayList<>();
    for (int i=0;i< TestUtil.nextInt(random(), 10, 30);i++) {
      initCallables.add(()-> UnInvertedField.getUnInvertedField(proto.field(), searcher));
    }

    final ThreadPoolExecutor pool  = new MDCAwareThreadPoolExecutor(3, 
        TestUtil.nextInt(random(), 3, 6), 10, TimeUnit.MILLISECONDS,
        new LinkedBlockingQueue<Runnable>(), new NamedThreadFactory(getClass().getSimpleName()));

    try {
      TestInjection.uifOutOfMemoryError = true;
      if (assertsAreEnabled) { // if they aren't, we check that injection is disabled in live
        List<Future<UnInvertedField>> futures = initCallables.stream().map((c) -> pool.submit(c))
            .collect(Collectors.toList());
        for (Future<UnInvertedField> uifuture : futures) {
          try {
            final UnInvertedField uif = uifuture.get();
          } catch (ExecutionException injection) {
            SolrException solrException = (SolrException) injection.getCause();
            assertEquals(ErrorCode.SERVER_ERROR.code, solrException.code());
            assertSame(solrException.getCause().getClass(), OutOfMemoryError.class);
          }
          assertNull(UnInvertedField.checkUnInvertedField(proto.field(), searcher));
        }
        TestInjection.uifOutOfMemoryError = false;
      }
      UnInvertedField prev = null;
      List<Future<UnInvertedField>> futures = initCallables.stream().map((c) -> pool.submit(c))
          .collect(Collectors.toList());
      for (Future<UnInvertedField> uifuture : futures) {
        final UnInvertedField uif = uifuture.get();
        assertNotNull(uif);
        assertSame(uif, UnInvertedField.checkUnInvertedField(proto.field(), searcher));
        if (prev != null) {
          assertSame(prev, uif);
        }
        assertEquals(numTerms, uif.numTerms());
        prev = uif;
      }
    } finally {
      pool.shutdownNow();
      req.close();
    }
  }

