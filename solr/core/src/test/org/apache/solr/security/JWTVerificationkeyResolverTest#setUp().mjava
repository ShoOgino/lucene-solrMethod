  @Before
  public void setUp() throws Exception {
    super.setUp();
    k1 = new KeyHolder("k1");
    k2 = new KeyHolder("k2");
    k3 = new KeyHolder("k3");
    k4 = new KeyHolder("k4");
    k5 = new KeyHolder("k5");

    when(firstJwkList.getJsonWebKeys()).thenReturn(asList(k1.getJwk(), k2.getJwk()));
    doAnswer(invocation -> {
      keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();
      System.out.println("Refresh called, next to return is " + keysToReturnFromSecondJwk);
      return null;
    }).when(secondJwkList).refresh();
    when(secondJwkList.getJsonWebKeys()).then(inv -> {
      if (keysToReturnFromSecondJwk == null)
        keysToReturnFromSecondJwk = (List<JsonWebKey>) refreshSequenceForSecondJwk.next();
      return keysToReturnFromSecondJwk;
    });
    when(httpsJwksFactory.createList(anyList())).thenReturn(asList(firstJwkList, secondJwkList));

    JWTIssuerConfig issuerConfig = new JWTIssuerConfig("primary").setIss("foo").setJwksUrl(asList("url1", "url2"));
    issuerConfig.setHttpsJwksFactory(httpsJwksFactory);
    resolver = new JWTVerificationkeyResolver(Arrays.asList(issuerConfig), true);

    assumeWorkingMockito();
  }

