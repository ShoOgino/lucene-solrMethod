  /*
   * RuleBasedAuthorizationPlugin handles requests differently based on whether the underlying handler implements
   * PermissionNameProvider or not.  If this test fails because UpdateRequestHandler stops implementing
   * PermissionNameProvider, or PropertiesRequestHandler starts to, then just change the handlers used here.
   */
  @Test
  public void testAllPermissionAllowsActionsWhenAssociatedRoleIsWildcard() {
    SolrRequestHandler handler = new UpdateRequestHandler();
    assertThat(handler, new IsInstanceOf(PermissionNameProvider.class));
    checkRules(makeMap("resource", "/update",
        "userPrincipal", "dev",
        "requestType", RequestType.UNKNOWN,
        "collectionRequests", "go",
        "handler", new UpdateRequestHandler(),
        "params", new MapSolrParams(singletonMap("key", "VAL2")))
        , STATUS_OK, (Map<String, Object>) Utils.fromJSONString( "{" +
            "    user-role:{" +
            "      dev:[dev_role]," +
            "      admin:[admin_role]}," +
            "    permissions:[" +
            "      {name:all, role:'*'}" +
            "]}"));

    handler = new PropertiesRequestHandler();
    assertThat(handler, new IsNot<>(new IsInstanceOf(PermissionNameProvider.class)));
    checkRules(makeMap("resource", "/admin/info/properties",
        "userPrincipal", "dev",
        "requestType", RequestType.UNKNOWN,
        "collectionRequests", "go",
        "handler", handler,
        "params", new MapSolrParams(emptyMap()))
        , STATUS_OK, (Map<String, Object>) Utils.fromJSONString( "{" +
            "    user-role:{" +
            "      dev:[dev_role]," +
            "      admin:[admin_role]}," +
            "    permissions:[" +
            "      {name:all, role:'*'}" +
            "]}"));
  }

