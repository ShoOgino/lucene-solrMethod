  public void test() throws Exception {
    String nodeName = "node_x_233";

    final MockPKIAuthenticationPlugin mock = new MockPKIAuthenticationPlugin(null, nodeName);
    LocalSolrQueryRequest localSolrQueryRequest = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {
      @Override
      public Principal getUserPrincipal() {
        return principal.get();
      }
    };
    PublicKey correctKey = CryptoKeys.deserializeX509PublicKey(mock.getPublicKey());
    mock.remoteKeys.put(nodeName, correctKey);

    principal.set(new BasicUserPrincipal("solr"));
    mock.solrRequestInfo = new SolrRequestInfo(localSolrQueryRequest, new SolrQueryResponse());
    request = new BasicHttpRequest("GET", "http://localhost:56565");
    mock.setHeader(request);
    header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));
    assertNotNull(header.get());
    assertTrue(header.get().getValue().startsWith(nodeName));
    mockReq = createMockRequest(header);
    filterChain = (servletRequest, servletResponse) -> wrappedRequestByFilter.set(servletRequest);


    run("solr", () -> {
      mock.doAuthenticate(mockReq, null, filterChain);
    });


    //test 2

    run(null, () -> {
      principal.set(null); // no user
      header.set(null);
      wrappedRequestByFilter.set(null);//
      request = new BasicHttpRequest("GET", "http://localhost:56565");
      mock.setHeader(request);
      assertNull(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));
      mock.doAuthenticate(mockReq, null, filterChain);
    });

    //test 3 . No user request . Request originated from Solr
    run("$", () -> {
      mock.solrRequestInfo = null;
      header.set(null);
      wrappedRequestByFilter.set(null);
      request = new BasicHttpRequest("GET", "http://localhost:56565");
      mock.setHeader(request);
      header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));
      assertNotNull(header.get());
      assertTrue(header.get().getValue().startsWith(nodeName));
      mock.doAuthenticate(mockReq, null, filterChain);
    });

    run("$", () -> {
      mock.solrRequestInfo = null;
      header.set(null);
      wrappedRequestByFilter.set(null);
      request = new BasicHttpRequest("GET", "http://localhost:56565");
      mock.setHeader(request);
      header.set(request.getFirstHeader(PKIAuthenticationPlugin.HEADER));
      assertNotNull(header.get());
      assertTrue(header.get().getValue().startsWith(nodeName));
      MockPKIAuthenticationPlugin mock1 = new MockPKIAuthenticationPlugin(null, nodeName) {
        int called = 0;

        @Override
        PublicKey getRemotePublicKey(String nodename) {
          try {
            return called == 0 ? new CryptoKeys.RSAKeyPair().getPublicKey() : correctKey;
          } finally {
            called++;
          }
        }
      };

      mock1.doAuthenticate(mockReq, null, filterChain);

    });

  }

