  @Test
  public void testBasicPermissions() {
    checkRules(makeMap("resource", "/update/json/docs",
        "httpMethod", "POST",
        "userPrincipal", "unknownuser",
        "collectionRequests", "freeforall",
        "handler", new UpdateRequestHandler())
        , STATUS_OK);

    checkRules(makeMap("resource", "/update/json/docs",
        "httpMethod", "POST",
        "userPrincipal", "tim",
        "collectionRequests", "mycoll",
        "handler", new UpdateRequestHandler())
        , STATUS_OK);

    checkRules(makeMap("resource", "/update/json/docs",
        "httpMethod", "POST",
        "collectionRequests", "mycoll",
        "handler", new UpdateRequestHandler())
        , PROMPT_FOR_CREDENTIALS);

    checkRules(makeMap("resource", "/schema",
        "userPrincipal", "somebody",
        "collectionRequests", "mycoll",
        "httpMethod", "POST",
        "handler", new SchemaHandler())
        , FORBIDDEN);

    checkRules(makeMap("resource", "/schema",
        "userPrincipal", "somebody",
        "collectionRequests", "mycoll",
        "httpMethod", "GET",
        "handler", new SchemaHandler())
        , STATUS_OK);

    checkRules(makeMap("resource", "/schema/fields",
        "userPrincipal", "somebody",
        "collectionRequests", "mycoll",
        "httpMethod", "GET",
        "handler", new SchemaHandler())
        , STATUS_OK);

    checkRules(makeMap("resource", "/schema",
        "userPrincipal", "somebody",
        "collectionRequests", "mycoll",
        "httpMethod", "POST",
        "handler", new SchemaHandler())
        , FORBIDDEN);

    checkRules(makeMap("resource", "/admin/collections",
        "userPrincipal", "tim",
        "requestType", RequestType.ADMIN,
        "collectionRequests", null,
        "httpMethod", "GET",
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "LIST")))
        , STATUS_OK);

    checkRules(makeMap("resource", "/admin/collections",
        "userPrincipal", null,
        "requestType", RequestType.ADMIN,
        "collectionRequests", null,
        "httpMethod", "GET",
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "LIST")))
        , STATUS_OK);

    checkRules(makeMap("resource", "/admin/collections",
        "userPrincipal", null,
        "requestType", RequestType.ADMIN,
        "collectionRequests", null,
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        , PROMPT_FOR_CREDENTIALS);

    checkRules(makeMap("resource", "/admin/collections",
        "userPrincipal", null,
        "requestType", RequestType.ADMIN,
        "collectionRequests", null,
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "RELOAD")))
        , PROMPT_FOR_CREDENTIALS);

    checkRules(makeMap("resource", "/admin/collections",
        "userPrincipal", "somebody",
        "requestType", RequestType.ADMIN,
        "collectionRequests", null,
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        , FORBIDDEN);

    checkRules(makeMap("resource", "/admin/collections",
        "userPrincipal", "tim",
        "requestType", RequestType.ADMIN,
        "collectionRequests", null,
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        , STATUS_OK);

    checkRules(makeMap("resource", "/select",
        "httpMethod", "GET",
        "handler", new SearchHandler(),
        "collectionRequests", singletonList(new CollectionRequest("mycoll")),
        "userPrincipal", "joe")
        , FORBIDDEN);

    setUserRole("cio", "su");
    addPermission("all", "su");

    checkRules(makeMap("resource", ReplicationHandler.PATH,
        "httpMethod", "POST",
        "userPrincipal", "tim",
        "handler", new ReplicationHandler(),
        "collectionRequests", singletonList(new CollectionRequest("mycoll")) )
        , FORBIDDEN);

    checkRules(makeMap("resource", ReplicationHandler.PATH,
        "httpMethod", "POST",
        "userPrincipal", "cio",
        "handler", new ReplicationHandler(),
        "collectionRequests", singletonList(new CollectionRequest("mycoll")) )
        , STATUS_OK);

    checkRules(makeMap("resource", "/admin/collections",
        "userPrincipal", "tim",
        "requestType", AuthorizationContext.RequestType.ADMIN,
        "collectionRequests", null,
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        , STATUS_OK);

    resetPermissionsAndRoles();
    addPermission("core-admin-edit", "su");
    addPermission("core-admin-read", "user");
    setUserRole("cio", "su");
    addPermission("all", "su");

    checkRules(makeMap("resource", "/admin/cores",
        "userPrincipal", null,
        "requestType", RequestType.ADMIN,
        "collectionRequests", null,
        "handler", new CoreAdminHandler(null),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        , PROMPT_FOR_CREDENTIALS);

    checkRules(makeMap("resource", "/admin/cores",
        "userPrincipal", "joe",
        "requestType", RequestType.ADMIN,
        "collectionRequests", null,
        "handler", new CoreAdminHandler(null),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        , FORBIDDEN);

    checkRules(makeMap("resource", "/admin/cores",
        "userPrincipal", "joe",
        "requestType", RequestType.ADMIN,
        "collectionRequests", null,
        "handler", new CoreAdminHandler(null),
        "params", new MapSolrParams(singletonMap("action", "STATUS")))
        , STATUS_OK);

    checkRules(makeMap("resource", "/admin/cores",
        "userPrincipal", "cio",
        "requestType", RequestType.ADMIN,
        "collectionRequests", null,
        "handler", new CoreAdminHandler(null),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        ,STATUS_OK);

    resetPermissionsAndRoles();
    addPermission("test-params", "admin", "/x", makeMap("key", Arrays.asList("REGEX:(?i)val1", "VAL2")));

    checkRules(makeMap("resource", "/x",
        "userPrincipal", null,
        "requestType", RequestType.UNKNOWN,
        "collectionRequests", "go",
        "handler", new DumpRequestHandler(),
        "params", new MapSolrParams(singletonMap("key", "VAL1")))
        , PROMPT_FOR_CREDENTIALS);

    checkRules(makeMap("resource", "/x",
        "userPrincipal", null,
        "requestType", RequestType.UNKNOWN,
        "collectionRequests", "go",
        "handler", new DumpRequestHandler(),
        "params", new MapSolrParams(singletonMap("key", "Val1")))
        , PROMPT_FOR_CREDENTIALS);

    checkRules(makeMap("resource", "/x",
        "userPrincipal", null,
        "requestType", RequestType.UNKNOWN,
        "collectionRequests", "go",
        "handler", new DumpRequestHandler(),
        "params", new MapSolrParams(singletonMap("key", "Val1")))
        , PROMPT_FOR_CREDENTIALS);

    checkRules(makeMap("resource", "/x",
        "userPrincipal", "joe",
        "requestType", RequestType.UNKNOWN,
        "collectionRequests", "go",
        "handler", new DumpRequestHandler(),
        "params", new MapSolrParams(singletonMap("key", "Val1")))
        , FORBIDDEN);

    checkRules(makeMap("resource", "/x",
        "userPrincipal", "joe",
        "requestType", RequestType.UNKNOWN,
        "collectionRequests", "go",
        "handler", new DumpRequestHandler(),
        "params", new MapSolrParams(singletonMap("key", "Val2")))
        , STATUS_OK);

    checkRules(makeMap("resource", "/x",
        "userPrincipal", "joe",
        "requestType", RequestType.UNKNOWN,
        "collectionRequests", "go",
        "handler", new DumpRequestHandler(),
        "params", new MapSolrParams(singletonMap("key", "VAL2")))
        , FORBIDDEN);

    Map<String, Object> customRules = (Map<String, Object>) Utils.fromJSONString(
        "{permissions:[" +
        "      {name:update, role:[admin_role,update_role]}," +
        "      {name:read, role:[admin_role,update_role,read_role]}" +
        "]}");

    clearUserRoles();
    setUserRole("admin", "admin_role");
    setUserRole("update", "update_role");
    setUserRole("solr", "read_role");

    checkRules(makeMap("resource", "/update",
        "userPrincipal", "solr",
        "requestType", RequestType.UNKNOWN,
        "collectionRequests", "go",
        "handler", new UpdateRequestHandler(),
        "params", new MapSolrParams(singletonMap("key", "VAL2")))
        , FORBIDDEN, customRules);
  }

