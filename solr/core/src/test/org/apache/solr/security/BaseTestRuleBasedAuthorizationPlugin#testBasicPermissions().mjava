  @Test
  public void testBasicPermissions() {
    checkRules(Map.of("resource", "/update/json/docs",
        "httpMethod", "POST",
        "userPrincipal", "unknownuser",
        "collectionRequests", "freeforall",
        "handler", new UpdateRequestHandler())
        , STATUS_OK);

    checkRules(Map.of("resource", "/update/json/docs",
        "httpMethod", "POST",
        "userPrincipal", "tim",
        "collectionRequests", "mycoll",
        "handler", new UpdateRequestHandler())
        , STATUS_OK);

    checkRules(Map.of("resource", "/update/json/docs",
        "httpMethod", "POST",
        "collectionRequests", "mycoll",
        "handler", new UpdateRequestHandler())
        , PROMPT_FOR_CREDENTIALS);

    checkRules(Map.of("resource", "/schema",
        "userPrincipal", "somebody",
        "collectionRequests", "mycoll",
        "httpMethod", "POST",
        "handler", new SchemaHandler())
        , FORBIDDEN);

    checkRules(Map.of("resource", "/schema",
        "userPrincipal", "somebody",
        "collectionRequests", "mycoll",
        "httpMethod", "GET",
        "handler", new SchemaHandler())
        , STATUS_OK);

    checkRules(Map.of("resource", "/schema/fields",
        "userPrincipal", "somebody",
        "collectionRequests", "mycoll",
        "httpMethod", "GET",
        "handler", new SchemaHandler())
        , STATUS_OK);

    checkRules(Map.of("resource", "/schema",
        "userPrincipal", "somebody",
        "collectionRequests", "mycoll",
        "httpMethod", "POST",
        "handler", new SchemaHandler())
        , FORBIDDEN);

    checkRules(Map.of("resource", "/admin/collections",
        "userPrincipal", "tim",
        "requestType", RequestType.ADMIN,
        "httpMethod", "GET",
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "LIST")))
        , STATUS_OK);

    checkRules(Map.of("resource", "/admin/collections",
        "requestType", RequestType.ADMIN,
        "httpMethod", "GET",
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "LIST")))
        , STATUS_OK);

    checkRules(Map.of("resource", "/admin/collections",
        "requestType", RequestType.ADMIN,
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        , PROMPT_FOR_CREDENTIALS);

    checkRules(Map.of("resource", "/admin/collections",
        "requestType", RequestType.ADMIN,
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "RELOAD")))
        , PROMPT_FOR_CREDENTIALS);

    checkRules(Map.of("resource", "/admin/collections",
        "userPrincipal", "somebody",
        "requestType", RequestType.ADMIN,
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        , FORBIDDEN);

    checkRules(Map.of("resource", "/admin/collections",
        "userPrincipal", "tim",
        "requestType", RequestType.ADMIN,
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        , STATUS_OK);

    checkRules(Map.of("resource", "/select",
        "httpMethod", "GET",
        "handler", new SearchHandler(),
        "collectionRequests", singletonList(new CollectionRequest("mycoll")),
        "userPrincipal", "joe")
        , FORBIDDEN);

    setUserRole("cio", "su");
    addPermission("all", "su");

    checkRules(Map.of("resource", ReplicationHandler.PATH,
        "httpMethod", "POST",
        "userPrincipal", "tim",
        "handler", new ReplicationHandler(),
        "collectionRequests", singletonList(new CollectionRequest("mycoll")) )
        , FORBIDDEN);

    checkRules(Map.of("resource", ReplicationHandler.PATH,
        "httpMethod", "POST",
        "userPrincipal", "cio",
        "handler", new ReplicationHandler(),
        "collectionRequests", singletonList(new CollectionRequest("mycoll")) )
        , STATUS_OK);

    checkRules(Map.of("resource", "/admin/collections",
        "userPrincipal", "tim",
        "requestType", AuthorizationContext.RequestType.ADMIN,
        "handler", new CollectionsHandler(),
        "params", new MapSolrParams(singletonMap("action", "CREATE")))
        , STATUS_OK);
  }

