  @SuppressWarnings("unchecked")
  @BeforeClass
  public static void setupClass() throws Exception {
    HdfsTestUtil.checkAssumptions();

    InetAddress loopback = InetAddress.getLoopbackAddress();
    Path securityJsonPath = TEST_PATH().resolve("security").resolve("hadoop_simple_auth_with_delegation.json");
    String securityJson = new String(Files.readAllBytes(securityJsonPath), Charset.defaultCharset());

    Map<String, Object> securityConfig = (Map<String, Object>)Utils.fromJSONString(securityJson);
    Map<String, Object> authConfig = (Map<String, Object>)securityConfig.get("authentication");
    Map<String,String> proxyUserConfigs = (Map<String,String>) authConfig
        .getOrDefault(HadoopAuthPlugin.PROXY_USER_CONFIGS, new HashMap<>());
    proxyUserConfigs.put("proxyuser.noGroups.hosts", "*");
    proxyUserConfigs.put("proxyuser.anyHostAnyUser.hosts", "*");
    proxyUserConfigs.put("proxyuser.anyHostAnyUser.groups", "*");
    proxyUserConfigs.put("proxyuser.wrongHost.hosts", DEAD_HOST_1);
    proxyUserConfigs.put("proxyuser.wrongHost.groups", "*");
    proxyUserConfigs.put("proxyuser.noHosts.groups", "*");
    proxyUserConfigs.put("proxyuser.localHostAnyGroup.hosts",
        loopback.getCanonicalHostName() + "," + loopback.getHostName() + "," + loopback.getHostAddress());
    proxyUserConfigs.put("proxyuser.localHostAnyGroup.groups", "*");
    proxyUserConfigs.put("proxyuser.bogusGroup.hosts", "*");
    proxyUserConfigs.put("proxyuser.bogusGroup.groups", "__some_bogus_group");
    proxyUserConfigs.put("proxyuser.anyHostUsersGroup.groups", ImpersonationUtil.getUsersFirstGroup());
    proxyUserConfigs.put("proxyuser.anyHostUsersGroup.hosts", "*");

    authConfig.put(HadoopAuthPlugin.PROXY_USER_CONFIGS, proxyUserConfigs);

    SolrRequestParsers.DEFAULT.setAddRequestHeadersToContext(true);
    System.setProperty("collectionsHandler", ImpersonatorCollectionsHandler.class.getName());

    configureCluster(NUM_SERVERS)// nodes
        .withSecurityJson(Utils.toJSONString(securityConfig))
        .addConfig("conf1", TEST_PATH().resolve("configsets").resolve("cloud-minimal").resolve("conf"))
        .configure();
  }

