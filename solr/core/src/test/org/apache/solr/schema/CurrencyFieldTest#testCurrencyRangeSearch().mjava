  @Test
  public void testCurrencyRangeSearch() throws Exception {
    for (int i = 1; i <= 10; i++) {
      assertU(adoc("id", "" + i, "amount", i + ",USD"));
    }

    assertU(commit());

    assertQ(req("fl", "*,score", "q",
            "amount:[2.00,USD TO 5.00,USD]"),
            "//*[@numFound='4']");

    assertQ(req("fl", "*,score", "q",
            "amount:[0.50,USD TO 1.00,USD]"),
            "//*[@numFound='1']");

    assertQ(req("fl", "*,score", "q",
            "amount:[24.00,USD TO 25.00,USD]"),
            "//*[@numFound='0']");

    // "GBP" currency code is 1/2 of a USD dollar, for testing.
    assertQ(req("fl", "*,score", "q",
            "amount:[0.50,GBP TO 1.00,GBP]"),
            "//*[@numFound='2']");

    // "EUR" currency code is 2.5X of a USD dollar, for testing.
    assertQ(req("fl", "*,score", "q",
            "amount:[24.00,EUR TO 25.00,EUR]"),
            "//*[@numFound='1']");

    // Slight asymmetric rate should work.
    assertQ(req("fl", "*,score", "q",
            "amount:[24.99,EUR TO 25.01,EUR]"),
            "//*[@numFound='1']");
    
    // Open ended ranges without currency
    assertQ(req("fl", "*,score", "q",
            "amount:[* TO *]"),
            "//*[@numFound='10']");
    
    // Open ended ranges with currency
    assertQ(req("fl", "*,score", "q",
            "amount:[*,EUR TO *,EUR]"),
            "//*[@numFound='10']");

    // Open ended start range without currency
    assertQ(req("fl", "*,score", "q",
            "amount:[* TO 5,USD]"),
            "//*[@numFound='5']");

    // Open ended start range with currency (currency for the * won't matter)
    assertQ(req("fl", "*,score", "q",
            "amount:[*,USD TO 5,USD]"),
            "//*[@numFound='5']");

    // Open ended end range
    assertQ(req("fl", "*,score", "q",
            "amount:[3 TO *]"),
            "//*[@numFound='8']");
}

