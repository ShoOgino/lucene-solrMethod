  public void testSimple() throws Exception {
    assertU(adoc("id","1", "whitespace_stxt", "how now brown cow ?", "whitespace_f_stxt", "aaa bbb"));
    assertU(adoc("id","2", "whitespace_stxt", "how now brown dog ?", "whitespace_f_stxt", "bbb aaa"));
    assertU(adoc("id","3", "whitespace_stxt", "how now brown cat ?", "whitespace_f_stxt", "xxx yyy"));
    assertU(adoc("id","4", "whitespace_stxt", "dog and cat"          /* no val for whitespace_f_stxt */));
                 
    assertU(commit());

    // search & sort
    // NOTE: even if the field is indexed=false, should still be able to sort on it
    for (String sortf : Arrays.asList("whitespace_stxt", "whitespace_nois_stxt", "whitespace_plain_str")) {
      assertQ(req("q", "whitespace_stxt:cat", "sort", sortf + " asc")
              , "//*[@numFound='2']"
              , "//result/doc[1]/str[@name='id'][.=4]"
              , "//result/doc[2]/str[@name='id'][.=3]"
              );
      assertQ(req("q", "whitespace_stxt:cat", "sort", sortf + " desc")
              , "//*[@numFound='2']"
              , "//result/doc[1]/str[@name='id'][.=3]"
              , "//result/doc[2]/str[@name='id'][.=4]"
              );
      assertQ(req("q", "whitespace_stxt:brown", "sort", sortf + " asc")
              , "//*[@numFound='3']"
              , "//result/doc[1]/str[@name='id'][.=3]"
              , "//result/doc[2]/str[@name='id'][.=1]"
              , "//result/doc[3]/str[@name='id'][.=2]"
              );
      assertQ(req("q", "whitespace_stxt:brown", "sort", sortf + " desc")
              , "//*[@numFound='3']"
              , "//result/doc[1]/str[@name='id'][.=2]"
              , "//result/doc[2]/str[@name='id'][.=1]"
              , "//result/doc[3]/str[@name='id'][.=3]"
              );
      
      // we should still be able to search if docValues="false" (but sort on a diff field)
      assertQ(req("q","whitespace_nodv_stxt:cat", "sort", sortf + " asc")
              , "//*[@numFound='2']"
              , "//result/doc[1]/str[@name='id'][.=4]"
              , "//result/doc[2]/str[@name='id'][.=3]"
              );
    }
    
    // attempting to sort on docValues="false" field should give an error...
    assertQEx("attempting to sort on docValues=false field should give an error",
              "when docValues=\"false\"",
              req("q","*:*", "sort", "whitespace_nodv_stxt asc"),
              ErrorCode.BAD_REQUEST);

    // sortMissing - whitespace_f_stxt copyField to whitespace_l_stxt
    assertQ(req("q","*:*", "sort", "whitespace_f_stxt asc")
            , "//*[@numFound='4']"
            , "//result/doc[1]/str[@name='id'][.=4]"
            , "//result/doc[2]/str[@name='id'][.=1]"
            , "//result/doc[3]/str[@name='id'][.=2]"
            , "//result/doc[4]/str[@name='id'][.=3]"
            );    
    assertQ(req("q","*:*", "sort", "whitespace_f_stxt desc")
            , "//*[@numFound='4']"
            , "//result/doc[1]/str[@name='id'][.=4]"
            , "//result/doc[2]/str[@name='id'][.=3]"
            , "//result/doc[3]/str[@name='id'][.=2]"
            , "//result/doc[4]/str[@name='id'][.=1]"
            );    
    assertQ(req("q","*:*", "sort", "whitespace_l_stxt asc")
            , "//*[@numFound='4']"
            , "//result/doc[1]/str[@name='id'][.=1]"
            , "//result/doc[2]/str[@name='id'][.=2]"
            , "//result/doc[3]/str[@name='id'][.=3]"
            , "//result/doc[4]/str[@name='id'][.=4]"
            );    
    assertQ(req("q","*:*", "sort", "whitespace_l_stxt desc")
            , "//*[@numFound='4']"
            , "//result/doc[1]/str[@name='id'][.=3]"
            , "//result/doc[2]/str[@name='id'][.=2]"
            , "//result/doc[3]/str[@name='id'][.=1]"
            , "//result/doc[4]/str[@name='id'][.=4]"
            );
  }

