  private void doTestIntPointFunctionQuery(String field, String type) throws Exception {
    for (int i = 9; i >= 0; i--) {
      assertU(adoc("id", String.valueOf(i), field, String.valueOf(i)));
    }
    assertU(commit());
    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof PointField);
    
    assertQ(req("q", "*:*", "fl", "id, " + field, "sort", "product(-1," + field + ") asc"), 
        "//*[@numFound='10']",
        "//result/doc[1]/" + type + "[@name='" + field + "'][.='9']",
        "//result/doc[2]/" + type + "[@name='" + field + "'][.='8']",
        "//result/doc[3]/" + type + "[@name='" + field + "'][.='7']",
        "//result/doc[10]/" + type + "[@name='" + field + "'][.='0']");
    
    assertQ(req("q", "*:*", "fl", "id, " + field + ", product(-1," + field + ")", "sort", "id asc"), 
        "//*[@numFound='10']",
        "//result/doc[1]/float[@name='product(-1," + field + ")'][.='-0.0']",
        "//result/doc[2]/float[@name='product(-1," + field + ")'][.='-1.0']",
        "//result/doc[3]/float[@name='product(-1," + field + ")'][.='-2.0']",
        "//result/doc[10]/float[@name='product(-1," + field + ")'][.='-9.0']");
    
    assertQ(req("q", "*:*", "fl", "id, " + field + ", field(" + field + ")", "sort", "id asc"), 
        "//*[@numFound='10']",
        "//result/doc[1]/" + type + "[@name='field(" + field + ")'][.='0']",
        "//result/doc[2]/" + type + "[@name='field(" + field + ")'][.='1']",
        "//result/doc[3]/" + type + "[@name='field(" + field + ")'][.='2']",
        "//result/doc[10]/" + type + "[@name='field(" + field + ")'][.='9']");
    
  }

