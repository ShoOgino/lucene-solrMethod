  private void doTestIntPointFieldExactQuery(String field, boolean testLong) throws Exception {
    for (int i=0; i < 10; i++) {
      assertU(adoc("id", String.valueOf(i), field, String.valueOf(i+1)));
    }
    assertU(commit());
    for (int i = 0; i < 10; i++) {
      assertQ(req("q", field + ":"+(i+1), "fl", "id, " + field), 
          "//*[@numFound='1']");
    }
    
    for (int i = 0; i < 10; i++) {
      assertQ(req("q", field + ":" + (i+1) + " OR " + field + ":" + ((i+1)%10 + 1)), "//*[@numFound='2']");
    }
    
    assertU(adoc("id", String.valueOf(Integer.MAX_VALUE), field, String.valueOf(Integer.MAX_VALUE)));
    assertU(commit());
    assertQ(req("q", field + ":"+Integer.MAX_VALUE, "fl", "id, " + field), 
        "//*[@numFound='1']");
    
    if (testLong) {
      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {
        assertU(adoc("id", String.valueOf(i), field, String.valueOf(i+1)));
      }
      assertU(commit());
      for (long i = (long)Integer.MAX_VALUE; i < (long)Integer.MAX_VALUE + 10; i++) {
        assertQ(req("q", field + ":"+(i+1), "fl", "id, " + field), 
            "//*[@numFound='1']");
      }
      assertU(adoc("id", String.valueOf(Long.MAX_VALUE), field, String.valueOf(Long.MAX_VALUE)));
      assertU(commit());
      assertQ(req("q", field + ":"+Long.MAX_VALUE, "fl", "id, " + field), 
          "//*[@numFound='1']");
    }
    
    clearIndex();
    assertU(commit());
  }

