  private void doTestFloatPointFunctionQuery(String dvFieldName, String nonDvFieldName, String type) throws Exception {
    for (int i = 9; i >= 0; i--) {
      assertU(adoc("id", String.valueOf(i), dvFieldName, String.format(Locale.ROOT, "%f", (float)i*1.1), nonDvFieldName, String.format(Locale.ROOT, "%f", (float)i*1.1)));
    }
    assertU(commit());
    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).hasDocValues());
    assertTrue(h.getCore().getLatestSchema().getField(dvFieldName).getType() instanceof PointField);
    assertQ(req("q", "*:*", "fl", "id, " + dvFieldName, "sort", "product(-1," + dvFieldName + ") asc"), 
        "//*[@numFound='10']",
        "//result/doc[1]/" + type + "[@name='" + dvFieldName + "'][.='9.9']",
        "//result/doc[2]/" + type + "[@name='" + dvFieldName + "'][.='8.8']",
        "//result/doc[3]/" + type + "[@name='" + dvFieldName + "'][.='7.7']",
        "//result/doc[10]/" + type + "[@name='" + dvFieldName + "'][.='0.0']");
    
    assertQ(req("q", "*:*", "fl", "id, " + dvFieldName + ", product(-1," + dvFieldName + ")", "sort", "id asc"), 
        "//*[@numFound='10']",
        "//result/doc[1]/float[@name='product(-1," + dvFieldName + ")'][.='-0.0']",
        "//result/doc[2]/float[@name='product(-1," + dvFieldName + ")'][.='-1.1']",
        "//result/doc[3]/float[@name='product(-1," + dvFieldName + ")'][.='-2.2']",
        "//result/doc[10]/float[@name='product(-1," + dvFieldName + ")'][.='-9.9']");
    
    assertQ(req("q", "*:*", "fl", "id, " + dvFieldName + ", field(" + dvFieldName + ")", "sort", "id asc"), 
        "//*[@numFound='10']",
        "//result/doc[1]/" + type + "[@name='field(" + dvFieldName + ")'][.='0.0']",
        "//result/doc[2]/" + type + "[@name='field(" + dvFieldName + ")'][.='1.1']",
        "//result/doc[3]/" + type + "[@name='field(" + dvFieldName + ")'][.='2.2']",
        "//result/doc[10]/" + type + "[@name='field(" + dvFieldName + ")'][.='9.9']");
    
    assertFalse(h.getCore().getLatestSchema().getField(nonDvFieldName).hasDocValues());
    assertTrue(h.getCore().getLatestSchema().getField(nonDvFieldName).getType() instanceof PointField);

    assertQEx("Expecting Exception", 
        "sort param could not be parsed as a query", 
        req("q", "*:*", "fl", "id, " + nonDvFieldName, "sort", "product(-1," + nonDvFieldName + ") asc"), 
        SolrException.ErrorCode.BAD_REQUEST);
  }

