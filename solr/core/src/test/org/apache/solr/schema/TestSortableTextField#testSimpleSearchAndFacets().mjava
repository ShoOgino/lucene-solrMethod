  public void testSimpleSearchAndFacets() throws Exception {
    assertU(adoc("id","1", "whitespace_stxt", "how now brown cow ?"));
    assertU(adoc("id","2", "whitespace_stxt", "how now brown cow ?"));
    assertU(adoc("id","3", "whitespace_stxt", "holy cow !"));
    assertU(adoc("id","4", "whitespace_stxt", "dog and cat"));
    
    assertU(commit());

    // NOTE: even if the field is indexed=false, should still be able to facet on it
    for (String facet : Arrays.asList("whitespace_stxt", "whitespace_nois_stxt",
                                      "whitespace_m_stxt", "whitespace_plain_str")) {
      for (String search : Arrays.asList("whitespace_stxt", "whitespace_nodv_stxt",
                                         "whitespace_m_stxt", "whitespace_plain_txt")) {
        // facet.field
        final String fpre = "//lst[@name='facet_fields']/lst[@name='"+facet+"']/";
        assertQ(req("q", search + ":cow", "rows", "0", 
                    "facet.field", facet, "facet", "true")
                , "//*[@numFound='3']"
                , fpre + "int[@name='how now brown cow ?'][.=2]"
                , fpre + "int[@name='holy cow !'][.=1]"
                , fpre + "int[@name='dog and cat'][.=0]"
                );
        
        // json facet
        final String jpre = "//lst[@name='facets']/lst[@name='x']/arr[@name='buckets']/";
        assertQ(req("q", search + ":cow", "rows", "0", 
                    "json.facet", "{x:{ type: terms, field:'" + facet + "', mincount:0 }}")
                , "//*[@numFound='3']"
                , jpre + "lst[str[@name='val'][.='how now brown cow ?']][long[@name='count'][.=2]]"
                , jpre + "lst[str[@name='val'][.='holy cow !']][long[@name='count'][.=1]]"
                , jpre + "lst[str[@name='val'][.='dog and cat']][long[@name='count'][.=0]]"
                );
        
      }
    }
  }

