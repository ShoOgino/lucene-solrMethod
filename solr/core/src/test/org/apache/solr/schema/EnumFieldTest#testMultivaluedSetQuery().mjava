  @Test
  public void testMultivaluedSetQuery() throws Exception {
    assumeFalse("Skipping testing of EnumFieldType without docValues, which is unsupported.",
        System.getProperty("solr.tests.EnumFieldType").equals("solr.EnumFieldType")
            && System.getProperty("solr.tests.numeric.dv").equals("false"));
    assumeFalse("Skipping testing of unindexed EnumField without docValues, which is unsupported.",
        System.getProperty("solr.tests.EnumFieldType").equals("solr.EnumField")
            && System.getProperty("solr.tests.EnumFieldTest.indexed").equals("false")
            && System.getProperty("solr.tests.numeric.dv").equals("false"));

    clearIndex();

    SchemaField sf = h.getCore().getLatestSchema().getField(MV_FIELD_NAME);
    Set<String> enumStrs = ((AbstractEnumField)sf.getType()).getEnumMapping().enumStringToIntMap.keySet();
    assertTrue(enumStrs.size() > SolrQueryParser.TERMS_QUERY_THRESHOLD);

    Iterator<String> enumStrIter = enumStrs.iterator();
    String prevEnumStr = "x18"; // wrap around
    for (int i = 0 ; enumStrIter.hasNext() ; ++i) {
      String thisEnumStr = enumStrIter.next();
      assertU(adoc("id", "" + i, MV_FIELD_NAME, thisEnumStr, MV_FIELD_NAME, prevEnumStr));
      prevEnumStr = thisEnumStr; 
    }
    assertU(commit());

    StringBuilder builder = new StringBuilder(MV_FIELD_NAME + ":(");
    enumStrs.forEach(v -> builder.append(v.replace(" ", "\\ ")).append(' '));
    builder.append(')');

    if (sf.indexed()) { // SolrQueryParser should also be generating a TermInSetQuery if indexed
      String setQuery = sf.getType().getSetQuery(null, sf, enumStrs).toString();
      if (sf.getType() instanceof EnumField) { // Trie field TermInSetQuery non-XML chars serialize with "#XX;" syntax
        Pattern nonXMLCharPattern = Pattern.compile("[\u0000-\u0008\u000B\u000C\u000E-\u0019]");
        StringBuffer munged = new StringBuffer();
        Matcher matcher = nonXMLCharPattern.matcher(setQuery);
        while (matcher.find()) {
          matcher.appendReplacement(munged, "#" + (int)matcher.group(0).charAt(0) + ";");
        }
        matcher.appendTail(munged);
        setQuery = munged.toString();
      }
      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, "q", "*:*", "fq", builder.toString(),
          "fl", "id," + MV_FIELD_NAME, "rows", "" + enumStrs.size(), "indent", "on"),
          "//*[@numFound='" + enumStrs.size() + "']",
          "//*[@name='parsed_filter_queries']/str[normalize-space(.)=normalize-space('TermInSetQuery(" + setQuery + ")')]");  // fix [\r\n] problems
    } else {
      // Won't use TermInSetQuery if the field is not indexed, but should match the same docs
      assertQ(req(CommonParams.DEBUG, CommonParams.QUERY, "q", "*:*", "fq", builder.toString(), "fl", "id," + MV_FIELD_NAME, "indent", "on"),
          "//*[@numFound='" + enumStrs.size() + "']");
    }
  }

