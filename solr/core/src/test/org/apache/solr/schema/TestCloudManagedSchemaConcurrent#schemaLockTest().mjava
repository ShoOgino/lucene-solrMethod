  private void schemaLockTest() throws Exception {

    // First, add a bunch of fields via PUT and POST, as well as copyFields,
    // but do it fast enough and verify shards' schemas after all of them are added
    int numFields = 5;
    Info info = new Info("Thread");

    for (int i = 0; i <= numFields ; ++i) {
      // System.err.println("###ITERATION: " + i);
      RestTestHarness publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
      PostFieldThread postFieldThread = new PostFieldThread(publisher, info);
      postFieldThread.start();

      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
      PutFieldThread putFieldThread = new PutFieldThread(publisher, info);
      putFieldThread.start();

      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
      PostDynamicFieldThread postDynamicFieldThread = new PostDynamicFieldThread(publisher, info);
      postDynamicFieldThread.start();

      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
      PutDynamicFieldThread putDynamicFieldThread = new PutDynamicFieldThread(publisher, info);
      putDynamicFieldThread.start();

      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
      PostFieldTypeThread postFieldTypeThread = new PostFieldTypeThread(publisher, info);
      postFieldTypeThread.start();

      publisher = restTestHarnesses.get(r.nextInt(restTestHarnesses.size()));
      PutFieldTypeThread putFieldTypeThread = new PutFieldTypeThread(publisher, info);
      putFieldTypeThread.start();

      postFieldThread.join();
      putFieldThread.join();
      postDynamicFieldThread.join();
      putDynamicFieldThread.join();
      postFieldTypeThread.join();
      putFieldTypeThread.join();

      String[] expectedAddFields = getExpectedFieldResponses(info);
      String[] expectedAddFieldTypes = getExpectedFieldTypeResponses(info);
      String[] expectedAddDynamicFields = getExpectedDynamicFieldResponses(info);

      boolean success = false;
      long maxTimeoutMillis = 100000;
      long startTime = System.nanoTime();
      String request = null;
      String response = null;
      String result = null;

      while ( ! success
          && TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutMillis) {
        Thread.sleep(10);

        // int j = 0;
        for (RestTestHarness client : restTestHarnesses) {
          // System.err.println("###CHECKING HARNESS: " + j++ + " for iteration: " + i);

          // verify addFieldPuts and addFieldPosts
          request = "/schema/fields?wt=xml";
          response = client.query(request);
          //System.err.println("###RESPONSE: " + response);
          result = BaseTestHarness.validateXPath(response, expectedAddFields);
          
          if (result != null) {
            // System.err.println("###FAILURE!");
            break;
          }

          // verify addDynamicFieldPuts and addDynamicFieldPosts
          request = "/schema/dynamicfields?wt=xml";
          response = client.query(request);
          //System.err.println("###RESPONSE: " + response);
          result = BaseTestHarness.validateXPath(response, expectedAddDynamicFields);

          if (result != null) {
            // System.err.println("###FAILURE!");
            break;
          }

          request = "/schema/fieldtypes?wt=xml";
          response = client.query(request);
          //System.err.println("###RESPONSE: " + response);
          result = BaseTestHarness.validateXPath(response, expectedAddFieldTypes);

          if (result != null) {
            // System.err.println("###FAILURE!");
            break;
          }

        }
        success = (result == null);
      }
      if ( ! success) {
        String msg = "QUERY FAILED: xpath=" + result + "  request=" + request + "  response=" + response;
        log.error(msg);
        fail(msg);
      }
    }
  }

