  private void testMultiValuedDatePointFieldsAtomicUpdates(String field) throws Exception {
    List<String> datesList = getRandomLongs(3, false, MAX_DATE_EPOCH_MILLIS)
        .stream().map(millis -> Instant.ofEpochMilli(millis).toString()).collect(Collectors.toList());
    String[] dates = datesList.toArray(new String[datesList.size()]);
    assertU(adoc(sdoc("id", "1", field, dates[0])));
    assertU(commit());

    assertQ(req("q", "id:1"),
        "//result/doc[1]/arr[@name='" + field + "']/date[.='" + dates[0] + "']",
        "count(//result/doc[1]/arr[@name='" + field + "']/date)=1");

    assertU(adoc(sdoc("id", "1", field, ImmutableMap.of("add", dates[1]))));
    assertU(commit());

    assertQ(req("q", "id:1"),
        "//result/doc[1]/arr[@name='" + field + "']/date[.='" + dates[0] + "']",
        "//result/doc[1]/arr[@name='" + field + "']/date[.='" + dates[1] + "']",
        "count(//result/doc[1]/arr[@name='" + field + "']/date)=2");

    assertU(adoc(sdoc("id", "1", field, ImmutableMap.of("remove", dates[0]))));
    assertU(commit());

    assertQ(req("q", "id:1"),
        "//result/doc[1]/arr[@name='" + field + "']/date[.='" + dates[1] + "']",
        "count(//result/doc[1]/arr[@name='" + field + "']/date)=1");

    assertU(adoc(sdoc("id", "1", field, ImmutableMap.of("set", datesList))));
    assertU(commit());

    assertQ(req("q", "id:1"),
        "//result/doc[1]/arr[@name='" + field + "']/date[.='" + dates[0] + "']",
        "//result/doc[1]/arr[@name='" + field + "']/date[.='" + dates[1] + "']",
        "//result/doc[1]/arr[@name='" + field + "']/date[.='" + dates[2] + "']",
        "count(//result/doc[1]/arr[@name='" + field + "']/date)=3");

    assertU(adoc(sdoc("id", "1", field, ImmutableMap.of("removeregex", ".*"))));
    assertU(commit());

    assertQ(req("q", "id:1"),
        "count(//result/doc[1]/arr[@name='" + field + "']/date)=0");

  }

