  @Test
  public void testMultivaluedEnumSort() throws Exception {
    assumeFalse("Skipping testing of EnumFieldType without docValues, which is unsupported.",
        System.getProperty("solr.tests.EnumFieldType").equals("solr.EnumFieldType")
            && System.getProperty("solr.tests.numeric.dv").equals("false"));
    assumeFalse("Skipping testing of sorting over multivalued EnumField - see SOLR-11193",
        System.getProperty("solr.tests.EnumFieldType").equals("solr.EnumField"));

    clearIndex();
    assertU(adoc("id", "0", MV_FIELD_NAME, "Not Available"));                // Single value
    assertU(adoc("id", "1", MV_FIELD_NAME, "Not Available", MV_FIELD_NAME, "Critical"));
    assertU(adoc("id", "2", MV_FIELD_NAME, "Not Available", MV_FIELD_NAME, "Critical"));
    assertU(adoc("id", "3"));                                                // No values
    assertU(adoc("id", "4"));                                                // No values
    assertU(adoc("id", "5", MV_FIELD_NAME, "Low", MV_FIELD_NAME, "Medium"));
    assertU(adoc("id", "6", MV_FIELD_NAME, "Low", MV_FIELD_NAME, "Medium"));
    assertU(adoc("id", "7", MV_FIELD_NAME, "Low", MV_FIELD_NAME, "Medium"));
    assertU(adoc("id", "8", MV_FIELD_NAME, "Low", MV_FIELD_NAME, "Critical"));
    assertU(adoc("id", "9", MV_FIELD_NAME, "Medium"));                       // Single value
    assertU(adoc("id", "10", MV_FIELD_NAME, "Medium", MV_FIELD_NAME, "High"));
    assertU(adoc("id", "11", MV_FIELD_NAME, "Medium", MV_FIELD_NAME, "High"));
    assertU(adoc("id", "12", MV_FIELD_NAME, "High", MV_FIELD_NAME, "Critical"));
    assertU(adoc("id", "13", MV_FIELD_NAME, "High", MV_FIELD_NAME, "High")); // Two of same value
    assertU(adoc("id", "14", MV_FIELD_NAME, "Critical", MV_FIELD_NAME, "Medium", MV_FIELD_NAME, "Not Available"));

    assertU(commit());

    assertQ(req("fl", "id," + MV_FIELD_NAME, "q", "*:*", "sort", "field(" + MV_FIELD_NAME + ",min) desc", "indent","on"),
        "//doc[1]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='Critical'",
        "//doc[2]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='High'",
        "//doc[3]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='Medium'",
        "//doc[6]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='Low'",
        "//doc[10]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='Not Available'");

    //sort ascending - empty values will be first
    assertQ(req("fl", "id," + MV_FIELD_NAME, "q", "*:*", "sort", "field(" + MV_FIELD_NAME + ",min) asc", "indent", "on"),
        "//doc[3]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='Not Available'");

    //q for not empty docs
    assertQ(req("fl", "id," + MV_FIELD_NAME, 
        "q", MV_FIELD_NAME + ":[* TO *]" , "sort", "field(" + MV_FIELD_NAME + ",'min') asc", 
        "rows","15", "indent","on"),
        "//doc[1]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='Not Available'",
        "//doc[5]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='Low'",
        "//doc[9]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='Medium'",
        "//doc[10]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='High'",
        "//doc[12]/arr[@name='" + MV_FIELD_NAME + "']/str/text()='Critical'");
  }

