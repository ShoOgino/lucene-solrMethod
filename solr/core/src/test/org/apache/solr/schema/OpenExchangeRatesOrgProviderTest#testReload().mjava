  @SuppressForbidden(reason = "Needs currentTimeMillis to construct rates file contents")
  @Test
  public void testReload() {
    // reminder: interval is in minutes
    mockParams.put(OpenExchangeRatesOrgProvider.PARAM_REFRESH_INTERVAL, "100");
    oerp.init(mockParams);
    oerp.inform(loader);

    // reminder: timestamp is in seconds
    assertEquals(HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());

    // modify the timestamp to be "current" then fetch a rate and ensure no reload
    final long currentTimestamp = System.currentTimeMillis() / 1000;
    oerp.rates.setTimestamp(currentTimestamp);
    assertEquals(81.29D, oerp.getExchangeRate("USD", "JPY"), 0.0D);    
    assertEquals(currentTimestamp, oerp.rates.getTimestamp());

    // roll back clock on timestamp and ensure rate fetch does reload
    oerp.rates.setTimestamp(currentTimestamp - (101 * 60));
    assertEquals(81.29D, oerp.getExchangeRate("USD", "JPY"), 0.0D);    
    assertEquals("timestamp wasn't reset to hardcoded value, indicating no reload",
                 HARDCODED_TEST_TIMESTAMP, oerp.rates.getTimestamp());

  }

