  @Test
  public void testDatePointFieldMultiValuedRangeFacet() throws Exception {
    String docValuesField = "number_p_dt_mv_dv";
    SchemaField dvSchemaField = h.getCore().getLatestSchema().getField(docValuesField);
    assertTrue(dvSchemaField.multiValued());
    assertTrue(dvSchemaField.hasDocValues());
    assertTrue(dvSchemaField.getType() instanceof PointField);
    
    String nonDocValuesField = "number_p_dt_mv";
    SchemaField nonDvSchemaField = h.getCore().getLatestSchema().getField(nonDocValuesField);
    assertTrue(nonDvSchemaField.multiValued());
    assertFalse(nonDvSchemaField.hasDocValues());
    assertTrue(nonDvSchemaField.getType() instanceof PointField);

    int numValues = 20 * RANDOM_MULTIPLIER;
    int numBuckets = numValues / 2;
    List<Long> values;
    List<PosVal<Long>> sortedValues;
    long min, max;
    do {
      values = getRandomLongs(numValues, false, MAX_DATE_EPOCH_MILLIS);
      sortedValues = toAscendingPosVals(values, true);
      min = sortedValues.get(0).val;
      max = sortedValues.get(sortedValues.size() - 1).val;
    } while (max > MAX_DATE_EPOCH_MILLIS || min < MIN_DATE_EPOCH_MILLIS);
    long initialGap = BigInteger.valueOf(max).subtract(BigInteger.valueOf(min))
        .divide(BigInteger.valueOf(numBuckets)).longValueExact();
    DateGapCeiling gap = new DateGapCeiling(BigInteger.valueOf(max + initialGap).subtract(BigInteger.valueOf(min)) // padding for rounding
        .divide(BigInteger.valueOf(numBuckets)).longValueExact());
    List<Set<Integer>> docIdBucket = new ArrayList<>(numBuckets);
    for (int i = 0 ; i < numBuckets ; ++i) {
      docIdBucket.add(new HashSet<>());
    }
    int bucketNum = 0;
    long minBucketVal = min;
    // System.err.println("min:" + Instant.ofEpochMilli(min) + "   max: " + Instant.ofEpochMilli(max) + "   gap: " + gap);
    // System.err.println("bucketNum: " + bucketNum + "   minBucketVal: " + Instant.ofEpochMilli(minBucketVal));
    for (PosVal<Long> value : sortedValues) {
      // System.err.println("value: " + Instant.ofEpochMilli(value.val));
      while (value.val >= gap.addTo(minBucketVal)) {
        ++bucketNum;
        minBucketVal = gap.addTo(minBucketVal);
        // System.err.println("bucketNum: " + bucketNum + "   minBucketVal: " + Instant.ofEpochMilli(minBucketVal));
      }
      docIdBucket.get(bucketNum).add(value.pos / 2); // each doc gets two consecutive values 
    }
    for (int i = 0 ; i < numValues ; i += 2) {
      assertU(adoc("id", String.valueOf(i / 2),
          docValuesField, Instant.ofEpochMilli(values.get(i)).toString(),
          docValuesField, Instant.ofEpochMilli(values.get(i + 1)).toString(),
          nonDocValuesField, Instant.ofEpochMilli(values.get(i)).toString(),
          nonDocValuesField, Instant.ofEpochMilli(values.get(i + 1)).toString()));
    }
    assertU(commit());

    String minDate = Instant.ofEpochMilli(min).toString();
    String maxDate = Instant.ofEpochMilli(max).toString();
    String[] testStrings = new String[numBuckets + 1];
    testStrings[numBuckets] = "//*[@numFound='" + (numValues / 2) + "']";
    minBucketVal = min;
    for (int i = 0 ; i < numBuckets ; minBucketVal = gap.addTo(minBucketVal), ++i) {
      testStrings[i] = "//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='" + docValuesField
          + "']/lst[@name='counts']/int[@name='" + Instant.ofEpochMilli(minBucketVal) 
          + "'][.='" + docIdBucket.get(i).size() + "']";
    }

    assertQ(req("q", "*:*", "facet", "true", "facet.range", docValuesField,
        "facet.range.start", minDate, "facet.range.end", maxDate,
        "facet.range.gap", gap.toString(), "indent", "on"),
        testStrings);
    assertQ(req("q", "*:*", "facet", "true", "facet.range", docValuesField,
        "facet.range.start", minDate, "facet.range.end", maxDate,
        "facet.range.gap", gap.toString(), "facet.range.method", "dv", "indent", "on"),
        testStrings);

    minBucketVal = min;
    for (int i = 0 ; i < numBuckets ; minBucketVal = gap.addTo(minBucketVal), ++i) {
      testStrings[i] = "//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='" + nonDocValuesField
          + "']/lst[@name='counts']/int[@name='" + Instant.ofEpochMilli(minBucketVal)
          + "'][.='" + docIdBucket.get(i).size() + "']";
    }
    // Range Faceting with method = filter should work
    assertQ(req("q", "*:*", "facet", "true", "facet.range", nonDocValuesField,
        "facet.range.start", minDate, "facet.range.end", maxDate,
        "facet.range.gap", gap.toString(), "facet.range.method", "filter", "indent", "on"),
        testStrings);
    // this should actually use filter method instead of dv
    assertQ(req("q", "*:*", "facet", "true", "facet.range", nonDocValuesField,
        "facet.range.start", minDate, "facet.range.end", maxDate,
        "facet.range.gap", gap.toString(), "facet.range.method", "dv", "indent", "on"),
        testStrings);
  }

