  /** Tests the ability to do basic queries (without scoring, just match-only) on
   *  float docvalues fields that are not inverted (indexed "forward" only)
   */
  @Test
  public void testFloatDocValuesMatch() throws Exception {
    assertU(adoc("id", "1", "floatdv", "2"));
    assertU(adoc("id", "2", "floatdv", "-5"));
    assertU(adoc("id", "3", "floatdv", "3.0", "floatdv", "-1.3", "floatdv", "2.2"));
    assertU(adoc("id", "4", "floatdv", "3"));
    assertU(adoc("id", "5", "floatdv", "-0.5"));
    assertU(commit());
    
    // float: termquery
    assertQ(req("q", "floatdv:3", "sort", "id asc"),
        "//*[@numFound='2']",
        "//result/doc[1]/str[@name='id'][.=3]",
        "//result/doc[2]/str[@name='id'][.=4]"
    );
    
    // float: rangequery
    assertQ(req("q", "floatdv:[-1 TO 2.5]", "sort", "id asc"),
            "//*[@numFound='3']",
            "//result/doc[1]/str[@name='id'][.=1]",
            "//result/doc[2]/str[@name='id'][.=3]",
            "//result/doc[3]/str[@name='id'][.=5]"
    );

    // (neg) float: rangequery
    assertQ(req("q", "floatdv:[-6 TO -4]", "sort", "id asc"),
            "//*[@numFound='1']",
            "//result/doc[1]/str[@name='id'][.=2]"
            );
    
    // (neg) float: termquery
    assertQ(req("q", "floatdv:\"-5\"", "sort", "id asc"),
            "//*[@numFound='1']",
            "//result/doc[1]/str[@name='id'][.=2]"
            );
  }

