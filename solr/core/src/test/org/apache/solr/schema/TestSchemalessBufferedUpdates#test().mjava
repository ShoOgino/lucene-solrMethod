  @Test
  public void test() throws Exception {
    DirectUpdateHandler2.commitOnClose = false;
    final Semaphore logReplay = new Semaphore(0);
    final Semaphore logReplayFinish = new Semaphore(0);
    UpdateLog.testing_logReplayHook = () -> {
      try {
        assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));
      } catch (Exception e) {
        throw new RuntimeException(e);
      }
    };
    UpdateLog.testing_logReplayFinishHook = logReplayFinish::release;

    SolrQueryRequest req = req();
    UpdateHandler uhandler = req.getCore().getUpdateHandler();
    UpdateLog ulog = uhandler.getUpdateLog();

    try {
      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());

      // Invalid date will be normalized by ParseDateField URP
      updateJ(jsonAdd(processAdd(sdoc("id","1", "f_dt","2017-01-04"))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));
      assertU(commit());
      assertJQ(req("q", "*:*"), "/response/numFound==1");

      ulog.bufferUpdates();
      assertEquals(UpdateLog.State.BUFFERING, ulog.getState());

      // If the ParseDateField URP isn't ahead of the DUP, then the date won't be normalized in the buffered tlog entry,
      // and the doc won't be indexed on the replaying replica - a warning is logged as follows:
      // WARN [...] o.a.s.u.UpdateLog REYPLAY_ERR: IOException reading log
      //            org.apache.solr.common.SolrException: Invalid Date String:'2017-01-05'
      //              at org.apache.solr.util.DateMathParser.parseMath(DateMathParser.java:234)
      //              at org.apache.solr.schema.TrieField.createField(TrieField.java:725) [...]
      updateJ(jsonAdd(processAdd(sdoc("id","2", "f_dt","2017-01-05"))), params(DISTRIB_UPDATE_PARAM,FROM_LEADER));

      Future<UpdateLog.RecoveryInfo> rinfoFuture = ulog.applyBufferedUpdates();

      assertTrue(rinfoFuture != null);

      assertEquals(UpdateLog.State.APPLYING_BUFFERED, ulog.getState());

      logReplay.release(1000);

      UpdateLog.RecoveryInfo rinfo = rinfoFuture.get();
      assertEquals(UpdateLog.State.ACTIVE, ulog.getState());

      assertU(commit());
      assertJQ(req("q", "*:*"), "/response/numFound==2");
    } finally {
      DirectUpdateHandler2.commitOnClose = true;
      UpdateLog.testing_logReplayHook = null;
      UpdateLog.testing_logReplayFinishHook = null;
      req().close();
    }
  }

