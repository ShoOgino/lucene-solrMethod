  public void testMaxCharsSort() throws Exception {
    assertU(adoc("id","1", "whitespace_stxt", "aaa bbb ccc ddd"));
    assertU(adoc("id","2", "whitespace_stxt", "aaa bbb xxx yyy"));
    assertU(adoc("id","3", "whitespace_stxt", "aaa bbb ccc xxx"));
    assertU(adoc("id","4", "whitespace_stxt", "aaa"));
    assertU(commit());

    // all terms should be searchable in all fields, even if the docvalues are limited
    for (String searchF : Arrays.asList("whitespace_stxt", "whitespace_plain_txt",
                                        "whitespace_max3_stxt", "whitespace_max6_stxt",
                                        "whitespace_max0_stxt", "whitespace_maxNeg_stxt")) {
      //  maxChars of 0 or neg should be equivilent to no max at all
      for (String sortF : Arrays.asList("whitespace_stxt", "whitespace_plain_str", 
                                        "whitespace_max0_stxt", "whitespace_maxNeg_stxt")) {
        
        assertQ(req("q", searchF + ":ccc", "sort", sortF + " desc, id asc")
                , "//*[@numFound='2']"
                , "//result/doc[1]/str[@name='id'][.=3]"
                , "//result/doc[2]/str[@name='id'][.=1]"
                );
        
        assertQ(req("q", searchF + ":ccc", "sort", sortF + " asc, id desc")
                , "//*[@numFound='2']"
                , "//result/doc[1]/str[@name='id'][.=1]"
                , "//result/doc[2]/str[@name='id'][.=3]"
                );
      }
    }
    
    // sorting on a maxChars limited fields should force tie breaker
    for (String dir : Arrays.asList("asc", "desc")) {
      // for max3, dir shouldn't matter - should always tie..
      assertQ(req("q", "*:*", "sort", "whitespace_max3_stxt "+dir+", id desc") // max3, id desc
              , "//*[@numFound='4']"
              , "//result/doc[1]/str[@name='id'][.=4]"
              , "//result/doc[2]/str[@name='id'][.=3]"
              , "//result/doc[3]/str[@name='id'][.=2]"
              , "//result/doc[4]/str[@name='id'][.=1]"
              );
      assertQ(req("q", "*:*", "sort", "whitespace_max3_stxt "+dir+", id asc") // max3, id desc
              , "//*[@numFound='4']"
              , "//result/doc[1]/str[@name='id'][.=1]"
              , "//result/doc[2]/str[@name='id'][.=2]"
              , "//result/doc[3]/str[@name='id'][.=3]"
              , "//result/doc[4]/str[@name='id'][.=4]"
              );
    }
    assertQ(req("q", "*:*", "sort", "whitespace_max6_stxt asc, id desc") // max6 asc, id desc
            , "//*[@numFound='4']"
            , "//result/doc[1]/str[@name='id'][.=4]" // no tiebreaker needed
            , "//result/doc[2]/str[@name='id'][.=3]"
            , "//result/doc[3]/str[@name='id'][.=2]"
            , "//result/doc[4]/str[@name='id'][.=1]"
            );
    assertQ(req("q", "*:*", "sort", "whitespace_max6_stxt asc, id asc") // max6 asc, id desc
            , "//*[@numFound='4']"
            , "//result/doc[1]/str[@name='id'][.=4]" // no tiebreaker needed
            , "//result/doc[2]/str[@name='id'][.=1]"
            , "//result/doc[3]/str[@name='id'][.=2]"
            , "//result/doc[4]/str[@name='id'][.=3]"
            );
    assertQ(req("q", "*:*", "sort", "whitespace_max6_stxt desc, id desc") // max6 desc, id desc
            , "//*[@numFound='4']"
            , "//result/doc[1]/str[@name='id'][.=3]"
            , "//result/doc[2]/str[@name='id'][.=2]"
            , "//result/doc[3]/str[@name='id'][.=1]"
            , "//result/doc[4]/str[@name='id'][.=4]" // no tiebreaker needed
            );
    assertQ(req("q", "*:*", "sort", "whitespace_max6_stxt desc, id asc") // max6 desc, id desc
            , "//*[@numFound='4']"
            , "//result/doc[1]/str[@name='id'][.=1]"
            , "//result/doc[2]/str[@name='id'][.=2]"
            , "//result/doc[3]/str[@name='id'][.=3]"
            , "//result/doc[4]/str[@name='id'][.=4]" // no tiebreaker needed
            );
    
    // sanity check that the default max is working....
    assertU(adoc("id","5", "whitespace_stxt", BIG_CONST + " aaa zzz"));
    assertU(adoc("id","6", "whitespace_stxt", BIG_CONST + " bbb zzz "));
    assertU(commit());
    // for these fields, the tie breaker should be the only thing that matters, regardless of direction...
    for (String sortF : Arrays.asList("whitespace_stxt", "whitespace_nois_stxt")) {
      for (String dir : Arrays.asList("asc", "desc")) {
        assertQ(req("q", "whitespace_stxt:zzz", "sort", sortF + " " + dir + ", id asc")
                , "//*[@numFound='2']"
                , "//result/doc[1]/str[@name='id'][.=5]"
                , "//result/doc[2]/str[@name='id'][.=6]"
                );
        assertQ(req("q", "whitespace_stxt:zzz", "sort", sortF + " " + dir + ", id desc")
                , "//*[@numFound='2']"
                , "//result/doc[1]/str[@name='id'][.=6]"
                , "//result/doc[2]/str[@name='id'][.=5]"
                );
      }
    }
  }

