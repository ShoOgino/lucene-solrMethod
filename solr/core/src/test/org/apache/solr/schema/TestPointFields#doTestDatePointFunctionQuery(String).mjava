  private void doTestDatePointFunctionQuery(String field) throws Exception {
    assertTrue(h.getCore().getLatestSchema().getField(field).getType() instanceof DatePointField);
    int numVals = 10 * RANDOM_MULTIPLIER;
    List<Long> values = getRandomLongs(numVals, false, MAX_DATE_EPOCH_MILLIS);

    String assertNumFound = "//*[@numFound='" + numVals + "']";
    String[] idAscXpathChecks = new String[numVals + 1];
    String[] idAscNegXpathChecks = new String[numVals + 1];

    idAscXpathChecks[0] = assertNumFound;
    idAscNegXpathChecks[0] = assertNumFound;
    for (int i = 0 ; i < values.size() ; ++i) {
      assertU(adoc("id", Character.valueOf((char)('A' + i)).toString(), field, Instant.ofEpochMilli(values.get(i)).toString()));
      // reminder: xpath array indexes start at 1
      idAscXpathChecks[i + 1] = "//result/doc[" + (1 + i) + "]/date[@name='field(" + field 
          + ")'][.='" + Instant.ofEpochMilli(values.get(i)) + "']";
      idAscNegXpathChecks[i + 1] = "//result/doc[" + (1 + i) + "]/float[@name='product(-1,ms(" + field + "))'][.='"
          + (-1.0f * (float)values.get(i)) + "']";
    }
    assertU(commit());
    assertQ(req("q", "*:*", "fl", "id, " + field + ", field(" + field + ")", "rows", String.valueOf(numVals), "sort", "id asc"),
        idAscXpathChecks);
    assertQ(req("q", "*:*", "fl", "id, " + field + ", product(-1,ms(" + field + "))", "rows", String.valueOf(numVals), "sort", "id asc"),
        idAscNegXpathChecks);

    List<PosVal<Long>> ascNegPosVals
        = toAscendingPosVals(values.stream().map(v -> -v).collect(Collectors.toList()), true);
    String[] ascNegXpathChecks = new String[numVals + 1];
    ascNegXpathChecks[0] = assertNumFound;
    for (int i = 0 ; i < ascNegPosVals.size() ; ++i) {
      PosVal<Long> posVal = ascNegPosVals.get(i);
      ascNegXpathChecks[i + 1] = "//result/doc[" + (1 + i) + "]/date[@name='" + field
          + "'][.='" + Instant.ofEpochMilli(values.get(posVal.pos)) + "']";
    }
    assertQ(req("q", "*:*", "fl", "id, " + field, "rows", String.valueOf(numVals), "sort", "product(-1,ms(" + field + ")) asc"),
        ascNegXpathChecks);

    clearIndex();
    assertU(adoc("id", "1", field, "1995-12-31T10:59:59Z"));
    assertU(adoc("id", "2", field, "1996-12-31T10:59:59Z"));
    assertU(commit());
    assertQ(req("q", field + ":[* TO *]", "fl", "id, " + field), 
        "//*[@numFound='2']");
    assertQ(req("q", field + ":{* TO *}", "fl", "id, " + field), 
        "//*[@numFound='2']");
  }

