  /** Tests the ability to do basic queries (without scoring, just match-only) on
   *  string docvalues fields that are not inverted (indexed "forward" only)
   */
  public void testStringDocValuesMatch() throws Exception {
    assertU(adoc("id", "1", "stringdv", "b"));
    assertU(adoc("id", "2", "stringdv", "a"));
    assertU(adoc("id", "3", "stringdv", "c"));
    assertU(adoc("id", "4", "stringdv", "car"));
    assertU(adoc("id", "5", "stringdv", "dog", "stringdv", "cat"));
    assertU(commit());
    
    // string: termquery
    assertQ(req("q", "stringdv:car", "sort", "id asc"),
        "//*[@numFound='1']",
        "//result/doc[1]/str[@name='id'][.=4]"
    );
    
    // string: range query
    assertQ(req("q", "stringdv:[b TO d]", "sort", "id asc"),
        "//*[@numFound='4']",
        "//result/doc[1]/str[@name='id'][.=1]",
        "//result/doc[2]/str[@name='id'][.=3]",
        "//result/doc[3]/str[@name='id'][.=4]",
        "//result/doc[4]/str[@name='id'][.=5]"
    );
    
    // string: prefix query
    assertQ(req("q", "stringdv:c*", "sort", "id asc"),
        "//*[@numFound='3']",
        "//result/doc[1]/str[@name='id'][.=3]",
        "//result/doc[2]/str[@name='id'][.=4]",
        "//result/doc[3]/str[@name='id'][.=5]"
    );
    
    // string: wildcard query
    assertQ(req("q", "stringdv:c?r", "sort", "id asc"),
        "//*[@numFound='1']",
        "//result/doc[1]/str[@name='id'][.=4]"
    );
    
    // string: regexp query
    assertQ(req("q", "stringdv:/c[a-b]r/", "sort", "id asc"),
        "//*[@numFound='1']",
        "//result/doc[1]/str[@name='id'][.=4]"
    );
  }

