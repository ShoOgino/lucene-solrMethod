  @Test
  public void testEnumRangeSearch() throws Exception {
    assumeFalse("Skipping testing of EnumFieldType without docValues, which is unsupported.",
        System.getProperty("solr.tests.EnumFieldType").equals("solr.EnumFieldType")
            && System.getProperty("solr.tests.numeric.dv").equals("false"));
    assumeFalse("Skipping testing of unindexed EnumField without docValues, which is unsupported.",
        System.getProperty("solr.tests.EnumFieldType").equals("solr.EnumField")
            && System.getProperty("solr.tests.EnumFieldTest.indexed").equals("false")
            && System.getProperty("solr.tests.numeric.dv").equals("false"));

    clearIndex();

    assertU(adoc("id", "0", FIELD_NAME, "Not Available"));
    assertU(adoc("id", "1", FIELD_NAME, "Not Available"));
    assertU(adoc("id", "2", FIELD_NAME, "Not Available"));
    assertU(adoc("id", "3", FIELD_NAME, "Not Available"));
    assertU(adoc("id", "4", FIELD_NAME, "Not Available"));
    assertU(adoc("id", "5", FIELD_NAME, "Low"));
    assertU(adoc("id", "6", FIELD_NAME, "Low"));
    assertU(adoc("id", "7", FIELD_NAME, "Low"));
    assertU(adoc("id", "8", FIELD_NAME, "Low"));
    assertU(adoc("id", "9", FIELD_NAME, "Medium"));
    assertU(adoc("id", "10", FIELD_NAME, "Medium"));
    assertU(adoc("id", "11", FIELD_NAME, "Medium"));
    assertU(adoc("id", "12", FIELD_NAME, "High"));
    assertU(adoc("id", "13", FIELD_NAME, "High"));
    assertU(adoc("id", "14", FIELD_NAME, "Critical"));

    // two docs w/o values
    for (int i = 20; i <= 21; i++) {
      assertU(adoc("id", "" + i));
    }

    assertU(commit());

    //range with the same value
    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":[\"Not Available\" TO \"Not Available\"]"),
            "//*[@numFound='5']");

    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":[\"Not Available\" TO Critical]"),
            "//*[@numFound='15']");

    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":[Low TO High]"),
            "//*[@numFound='9']");

    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":[High TO Low]"),
            "//*[@numFound='0']");

    //with int values
    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":[High TO 11]"),
            "//*[@numFound='3']");
    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":[3 TO Critical]"),
            "//*[@numFound='3']");
    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":[3 TO 11]"),
            "//*[@numFound='3']");

    //exclusive
    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":{Low TO High]"),
            "//*[@numFound='5']");
    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":[Low TO High}"),
            "//*[@numFound='7']");
    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":{Low TO High}"),
            "//*[@numFound='3']");

    //all docs
    assertQ(req("fl", "" + FIELD_NAME, "q", "*:*"),
        "//*[@numFound='17']");

    //all docs with values
    assertQ(req("fl", "" + FIELD_NAME, "q", FIELD_NAME + ":[* TO *]"),
            "//*[@numFound='15']");

    //empty docs
    assertQ(req("fl", "" + FIELD_NAME, "q", "-" + FIELD_NAME + ":[* TO *]"),
            "//*[@numFound='2']");
  }

