  private void testPointMultiValuedFunctionQuery(String nonDocValuesField, String docValuesField, String type, String[] numbers) throws Exception {
    assert numbers != null && numbers.length == 20;
    for (int i = 0; i < 10; i++) {
      assertU(adoc("id", String.valueOf(i), docValuesField, numbers[i], docValuesField, numbers[i+10], 
          nonDocValuesField, numbers[i], nonDocValuesField, numbers[i+10]));
    }
    assertU(commit());
    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).hasDocValues());
    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).multiValued());
    assertTrue(h.getCore().getLatestSchema().getField(docValuesField).getType() instanceof PointField);
    String function = "field(" + docValuesField + ", min)";
    
    assertQ(req("q", "*:*", "fl", "id, " + function), 
        "//*[@numFound='10']",
        "//result/doc[1]/" + type + "[@name='" + function + "'][.='" + numbers[0] + "']",
        "//result/doc[2]/" + type + "[@name='" + function + "'][.='" + numbers[1] + "']",
        "//result/doc[3]/" + type + "[@name='" + function + "'][.='" + numbers[2] + "']",
        "//result/doc[10]/" + type + "[@name='" + function + "'][.='" + numbers[9] + "']");
    
//    if (dvIsRandomAccessOrds(docValuesField)) {
//      function = "field(" + docValuesField + ", max)";
//      assertQ(req("q", "*:*", "fl", "id, " + function), 
//          "//*[@numFound='10']",
//          "//result/doc[1]/int[@name='" + function + "'][.='10']",
//          "//result/doc[2]/int[@name='" + function + "'][.='11']",
//          "//result/doc[3]/int[@name='" + function + "'][.='12']",
//          "//result/doc[10]/int[@name='" + function + "'][.='19']");
//    }
    
    assertFalse(h.getCore().getLatestSchema().getField(nonDocValuesField).hasDocValues());
    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).multiValued());
    assertTrue(h.getCore().getLatestSchema().getField(nonDocValuesField).getType() instanceof PointField);

    function = "field(" + nonDocValuesField + ",min)";
    
    assertQEx("Expecting Exception", 
        "sort param could not be parsed as a query", 
        req("q", "*:*", "fl", "id", "sort", function + " desc"), 
        SolrException.ErrorCode.BAD_REQUEST);
    
    assertQEx("Expecting Exception", 
        "docValues='true' is required to select 'min' value from multivalued field (" + nonDocValuesField + ") at query time", 
        req("q", "*:*", "fl", "id, " + function), 
        SolrException.ErrorCode.BAD_REQUEST);
    
    function = "field(" + docValuesField + ",foo)";
    assertQEx("Expecting Exception", 
        "Multi-Valued field selector 'foo' not supported", 
        req("q", "*:*", "fl", "id, " + function), 
        SolrException.ErrorCode.BAD_REQUEST);
  }

