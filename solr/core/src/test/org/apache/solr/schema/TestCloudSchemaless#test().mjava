  @Test
  @ShardsFixed(num = 8)
  // 12-Jun-2018 @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 04-May-2018
  public void test() throws Exception {
    setupRestTestHarnesses();

    // First, add a bunch of documents in a single update with the same new field.
    // This tests that the replicas properly handle schema additions.

    int slices =  getCommonCloudSolrClient().getZkStateReader().getClusterState()
      .getCollection("collection1").getActiveSlices().size();
    int trials = 50;
    // generate enough docs so that we can expect at least a doc per slice
    int numDocsPerTrial = (int)(slices * (Math.log(slices) + 1));
    SolrClient randomClient = clients.get(random().nextInt(clients.size()));
    int docNumber = 0;
    for (int i = 0; i < trials; ++i) {
      List<SolrInputDocument> docs = new ArrayList<>();
      for (int j =0; j < numDocsPerTrial; ++j) {
        SolrInputDocument doc = new SolrInputDocument();
        doc.addField("id", Long.toHexString(Double.doubleToLongBits(random().nextDouble())));
        doc.addField("newTestFieldInt" + docNumber++, "123");
        doc.addField("constantField", "3.14159");
        docs.add(doc);
      }

      randomClient.add(docs);
    }
    randomClient.commit();

    String [] expectedFields = getExpectedFieldResponses(docNumber);
    // Check that all the fields were added
    forAllRestTestHarnesses(client -> {
      try {
        String request = "/schema/fields?wt=xml";
        String response = client.query(request);
        String result = BaseTestHarness.validateXPath(response, expectedFields);
        if (result != null) {
          String msg = "QUERY FAILED: xpath=" + result + "  request=" + request + "  response=" + response;
          log.error(msg);
          fail(msg);
        }
      } catch (Exception ex) {
        fail("Caught exception: "+ex);
      }
    });

    // Now, let's ensure that writing the same field with two different types fails
    int failTrials = 50;
    for (int i = 0; i < failTrials; ++i) {
      SolrInputDocument intDoc = new SolrInputDocument();
      intDoc.addField("id", Long.toHexString(Double.doubleToLongBits(random().nextDouble())));
      intDoc.addField("longOrDateField" + i, "123");

      SolrInputDocument dateDoc = new SolrInputDocument();
      dateDoc.addField("id", Long.toHexString(Double.doubleToLongBits(random().nextDouble())));
      dateDoc.addField("longOrDateField" + i, "1995-12-31T23:59:59Z");

      // randomize the order of the docs
      List<SolrInputDocument> docs = random().nextBoolean()? Arrays.asList(intDoc, dateDoc): Arrays.asList(dateDoc, intDoc);

      SolrException ex = expectThrows(SolrException.class,  () -> {
        randomClient.add(docs);
        randomClient.commit();
      });
      assertEquals(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(ex.code()));

      ex = expectThrows(SolrException.class,  () -> {
        CloudSolrClient cloudSolrClient = getCommonCloudSolrClient();
        cloudSolrClient.add(docs);
        cloudSolrClient.commit();
      });
      assertEquals(ErrorCode.BAD_REQUEST, ErrorCode.getErrorCode(ex.code()));
    }
  }

