  @Test
  public void testFloatAndDoubleRangeQueryRandom() throws Exception {

    String fieldName[] = new String[] {"floatdv", "doubledv"};
    
    Number largestNegative[] = new Number[] {0f-Float.MIN_NORMAL, 0f-Double.MIN_NORMAL};
    Number smallestPositive[] = new Number[] {Float.MIN_NORMAL, Double.MIN_NORMAL};
    Number positiveInfinity[] = new Number[] {Float.POSITIVE_INFINITY, Double.POSITIVE_INFINITY};
    Number negativeInfinity[] = new Number[] {Float.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY};
    Number largestValue[] = new Number[] {Float.MAX_VALUE, Double.MAX_VALUE};
    Number zero[] = new Number[] {0f, 0d};
    Function<Supplier<Number>,Number> noNaN = (next)
        -> { Number num; while (String.valueOf(num = next.get()).equals("NaN")); return num; };
    List<Supplier<Number>> nextRandNoNaN = Arrays.asList(
        () -> noNaN.apply(() -> Float.intBitsToFloat(random().nextInt())),
        () -> noNaN.apply(() -> Double.longBitsToDouble(random().nextLong())));
    List<Function<Number,Long>> toSortableLong = Arrays.asList(
        (num) -> (long)NumericUtils.floatToSortableInt(num.floatValue()),
        (num) -> NumericUtils.doubleToSortableLong(num.doubleValue()));

    // Number minusZero[] = new Number[] {-0f, -0d}; // -0 == 0, so we should not treat them differently (and we should not guarantee that sign is preserved... we should be able to index both as 0)

    for (int i=0; i<fieldName.length; i++) {
      assertU(delQ("*:*"));
      commit();

      Number specialValues[] = new Number[] {largestNegative[i], smallestPositive[i], negativeInfinity[i], 
          largestValue[i], positiveInfinity[i], zero[i]};

      List<Number> values = new ArrayList<>();
      int numDocs = 1 + random().nextInt(10);
      for (int j=0; j<numDocs; j++) {
        
        if (random().nextInt(100) < 5) { // Add a boundary value with 5% probability
          values.add(specialValues[random().nextInt(specialValues.length)]);
        } else 
        {
          if (fieldName[i].equals("floatdv")) { // Add random values with 95% probability
            values.add(Float.intBitsToFloat(random().nextInt()));
          } else {
            values.add(Double.longBitsToDouble(random().nextLong()));
          }
        }
      }
      // Indexing
      for (int j=0; j<values.size(); j++) {
        assertU(adoc("id", String.valueOf(j+1), fieldName[i], String.valueOf(values.get(j))));
      }
      assertU(commit());

      log.info("Indexed values: "+values);
      // Querying
      int numQueries = 10000;
      for (int j=0; j<numQueries; j++) {
        boolean minInclusive = random().nextBoolean();
        boolean maxInclusive = random().nextBoolean();

        Number minVal, maxVal;
        String min = String.valueOf(minVal = nextRandNoNaN.get(i).get());
        String max = String.valueOf(maxVal = nextRandNoNaN.get(i).get());

        // randomly use boundary values for min, 15% of the time
        int r = random().nextInt(100);
        if (r<5) {
          minVal = negativeInfinity[i]; min = "*";
        } else if (r<10) {
          minVal = specialValues[random().nextInt(specialValues.length)]; min = String.valueOf(minVal);
        } else if (r<15) {
          minVal = values.get(random().nextInt(values.size())); min = String.valueOf(minVal);
        }

        // randomly use boundary values for max, 15% of the time
        r = random().nextInt(100);
        if (r<5) {
          maxVal = positiveInfinity[i]; max = "*";
        } else if (r<10) {
            maxVal = specialValues[random().nextInt(specialValues.length)]; max = String.valueOf(maxVal);
        } else if (r<15) {
          // Don't pick a NaN for the range query
          Number tmp = values.get(random().nextInt(values.size()));
          if (!Double.isNaN(tmp.doubleValue()) && !Float.isNaN(tmp.floatValue())) {
            maxVal = tmp; max = String.valueOf(maxVal);
          }
        }

        List<String> tests = new ArrayList<>();
        int counter = 0;
        
        for (int k=0; k<values.size(); k++) {
          Number val = values.get(k);
          long valSortable = toSortableLong.get(i).apply(val);
          long minSortable = toSortableLong.get(i).apply(minVal);
          long maxSortable = toSortableLong.get(i).apply(maxVal);
          
          if((minInclusive && minSortable<=valSortable || !minInclusive && minSortable<valSortable) &&
              (maxInclusive && maxSortable>=valSortable || !maxInclusive && maxSortable>valSortable)) {
            counter++;
            tests.add("//result/doc["+counter+"]/str[@name='id'][.="+(k+1)+"]");
            tests.add("//result/doc["+counter+"]/float[@name='score'][.=1.0]");
          }
        }

        tests.add(0, "//*[@numFound='"+counter+"']");

        String testsArr[] = new String[tests.size()];
        for (int k=0; k<tests.size(); k++) {
          testsArr[k] = tests.get(k);
        }
        log.info("Expected: "+tests);
        assertQ(req("q", fieldName[i] + ":" + (minInclusive? '[': '{') + min + " TO " + max + (maxInclusive? ']': '}'),
                         "sort", "id_i asc", "fl", "id,"+fieldName[i]+",score"),
            testsArr);
      }
    }
  }

