  @Test
  public void testParsers() throws Exception {
    PreAnalyzedField paf = new PreAnalyzedField();
    // use Simple format
    HashMap<String,String> args = new HashMap<>();
    args.put(PreAnalyzedField.PARSER_IMPL, SimplePreAnalyzedParser.class.getName());
    paf.init(h.getCore().getLatestSchema(), args);
    {
      Field f = (Field)paf.fromString(field, valid[0]);
    }

    // use JSON format
    args.put(PreAnalyzedField.PARSER_IMPL, JsonPreAnalyzedParser.class.getName());
    paf.init(h.getCore().getLatestSchema(), args);
    expectThrows(Exception.class, () -> paf.fromString(field, valid[0]));

    byte[] deadbeef = new byte[]{(byte)0xd, (byte)0xe, (byte)0xa, (byte)0xd, (byte)0xb, (byte)0xe, (byte)0xe, (byte)0xf};
    PreAnalyzedParser parser = new JsonPreAnalyzedParser();

    {
      Field f = (Field)paf.fromString(field, jsonValid);
      assertEquals(jsonValid, parser.toFormattedString(f));
    }
  }

