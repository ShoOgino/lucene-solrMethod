  @Test
  public void testAggErrors() {
    ignoreException("aggregation");

    SolrException e = expectThrows(SolrException.class, () -> {
      h.query(req("q", "*:*", "json.facet", "{bleh:'div(2,4)'}"));
    });
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    assertThat(e.getMessage(),
        containsString("Expected multi-doc aggregation from 'div' but got per-doc function in input ('div(2,4)"));

    e = expectThrows(SolrException.class, () -> {
      h.query(req("q", "*:*", "json.facet", "{b:'agg(div(2,4))'}"));
    });
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    assertThat(e.getMessage(),
        containsString("Expected multi-doc aggregation from 'div' but got per-doc function in input ('agg(div(2,4))"));

    e = expectThrows(SolrException.class, () -> {
      h.query(req("q", "*:*", "json.facet", "{b:'agg(bleh(2,4))'}"));
    });
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    assertThat(e.getMessage(),
        containsString("Unknown aggregation 'bleh' in input ('agg(bleh(2,4))"));

    e = expectThrows(SolrException.class, () -> {
      h.query(req("q", "*:*", "json.facet", "{b:'bleh(2,4)'}"));
    });
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    assertThat(e.getMessage(),
        containsString("Unknown aggregation 'bleh' in input ('bleh(2,4)"));

    resetExceptionIgnores();
  }

