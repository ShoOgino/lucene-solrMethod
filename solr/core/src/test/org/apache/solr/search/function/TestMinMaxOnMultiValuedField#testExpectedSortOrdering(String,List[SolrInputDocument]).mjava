  /**
   * Given a sort clause, and a list of documents in sorted order, this method will clear the index 
   * and then add the documents in a random order (to ensure the index insertion order is not a factor) 
   * and then validate that a <code>*:*</code> query returns the documents in the original order.
   *
   * @see #buildMultiValueSortedDocuments
   * @see #clearIndex
   */   
  private void testExpectedSortOrdering(final String sort,
                                        final List<SolrInputDocument> sortedDocs) {
    clearIndex();

    // shuffle a copy of the doc list (to ensure index order isn't linked to uniqueKey order)
    List<SolrInputDocument> randOrderedDocs = new ArrayList<>(sortedDocs);
    Collections.shuffle(randOrderedDocs, random());

    for (SolrInputDocument doc : randOrderedDocs) {
      assertU(adoc(doc));
    }
    assertU(commit());

    // now use the original sorted docs to build up the expected sort order as a list of xpath
    List<String> xpaths = new ArrayList<>(sortedDocs.size() + 1);
    xpaths.add("//result[@numFound='"+sortedDocs.size()+"']");
    int seq = 0;
    for (SolrInputDocument doc : sortedDocs) {
      xpaths.add("//result/doc["+(++seq)+"]/str[@name='id']='"+doc.getFieldValue("id")+"'");
    }
    assertQ(req("q", "*:*", "rows", "" + sortedDocs.size(), "sort", sort),
            xpaths.toArray(new String[xpaths.size()]));
  }

