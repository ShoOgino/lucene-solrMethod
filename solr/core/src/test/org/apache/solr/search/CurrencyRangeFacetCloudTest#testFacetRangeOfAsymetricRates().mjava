  public void testFacetRangeOfAsymetricRates() throws Exception {
    // facet.range: exchange rates relative to EUR...
    //
    // because of the asymetric echange rate, the counts for these buckets will be different
    // then if we just converted the EUR values to USD
    for (boolean use_mincount : Arrays.asList(true, false)) {
      final SolrQuery solrQuery = new SolrQuery("q", "*:*", "rows", "0", "facet", "true", "facet.range", FIELD,
                                                "facet.mincount", (use_mincount ? "3" : "0"),
                                                "f." + FIELD + ".facet.range.start", "8,EUR",
                                                "f." + FIELD + ".facet.range.gap", "2,EUR",
                                                "f." + FIELD + ".facet.range.end", "22,EUR",
                                                "f." + FIELD + ".facet.range.other", "all");
      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);
      try {
        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());
        @SuppressWarnings({"rawtypes"})
        final List<RangeFacet> range_facets = rsp.getFacetRanges();
        assertEquals(1, range_facets.size());
        @SuppressWarnings({"rawtypes"})
        final RangeFacet result = range_facets.get(0);
        assertEquals(FIELD, result.getName());
        assertEquals("8.00,EUR", result.getStart());
        assertEquals("2.00,EUR", result.getGap());
        assertEquals("22.00,EUR", result.getEnd());
        assertEquals(6, result.getBefore());
        assertEquals(3, result.getAfter());
        assertEquals(6, result.getBetween());
        
        @SuppressWarnings({"unchecked"})
        List<RangeFacet.Count> counts = result.getCounts();
        if (use_mincount) {
          assertEquals(2, counts.size());
          for (int i = 0; i < 2; i++) {
            RangeFacet.Count bucket = counts.get(i);
            assertEquals((12 + (i * 2)) + ".00,EUR", bucket.getValue());
            assertEquals("bucket #" + i, 3, bucket.getCount());
          }
        } else {
          assertEquals(7, counts.size());
          for (int i = 0; i < 7; i++) {
            RangeFacet.Count bucket = counts.get(i);
            assertEquals((8 + (i * 2)) + ".00,EUR", bucket.getValue());
            assertEquals("bucket #" + i, (i == 2 || i == 3) ? 3 : 0, bucket.getCount());
          }
        }
      } catch (AssertionError|RuntimeException ae) {
        throw new AssertionError(solrQuery.toString() + " -> " + rsp.toString() + " ===> " + ae.getMessage(), ae);
      }
    }
  }

