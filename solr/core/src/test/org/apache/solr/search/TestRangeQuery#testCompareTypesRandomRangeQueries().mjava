  public void testCompareTypesRandomRangeQueries() throws Exception {
    int cardinality = 10000;
    Map<NumberType,String[]> types = new HashMap<>(); //single and multivalued field types
    Map<NumberType,String[]> typesMv = new HashMap<>(); // multivalued field types only
    types.put(NumberType.INTEGER, new String[]{"ti", "ti_dv", "ti_ni_dv", "i_p", "i_ni_p", "i_ndv_p", "tis", "tis_dv", "tis_ni_dv", "is_p", "is_ni_p", "is_ndv_p"});
    types.put(NumberType.LONG, new String[]{"tl", "tl_dv", "tl_ni_dv", "l_p", "l_ni_p", "l_ndv_p", "tls", "tls_dv", "tls_ni_dv", "ls_p", "ls_ni_p", "ls_ndv_p"});
    types.put(NumberType.FLOAT, new String[]{"tf", "tf_dv", "tf_ni_dv", "f_p", "f_ni_p", "f_ndv_p", "tfs", "tfs_dv", "tfs_ni_dv", "fs_p", "fs_ni_p", "fs_ndv_p"});
    types.put(NumberType.DOUBLE, new String[]{"td", "td_dv", "td_ni_dv", "d_p", "d_ni_p", "d_ndv_p", "tds", "tds_dv", "tds_ni_dv", "ds_p", "ds_ni_p", "ds_ndv_p"});
    types.put(NumberType.DATE, new String[]{"tdt", "tdt_dv", "tdt_ni_dv", "dt_p", "dt_ni_p", "dt_ndv_p", "tdts", "tdts_dv", "tdts_ni_dv", "dts_p", "dts_ni_p", "dts_ndv_p"});
    typesMv.put(NumberType.INTEGER, new String[]{"tis", "tis_dv", "tis_ni_dv", "is_p", "is_ni_p", "is_ndv_p"});
    typesMv.put(NumberType.LONG, new String[]{"tls", "tls_dv", "tls_ni_dv", "ls_p", "ls_ni_p", "ls_ndv_p"});
    typesMv.put(NumberType.FLOAT, new String[]{"tfs", "tfs_dv", "tfs_ni_dv", "fs_p", "fs_ni_p", "fs_ndv_p"});
    typesMv.put(NumberType.DOUBLE, new String[]{"tds", "tds_dv", "tds_ni_dv", "ds_p", "ds_ni_p", "ds_ndv_p"});
    typesMv.put(NumberType.DATE, new String[]{"tdts", "tdts_dv", "tdts_ni_dv", "dts_p", "dts_ni_p", "dts_ndv_p"});

    for (int i = 0; i < atLeast(500); i++) {
      if (random().nextInt(50) == 0) {
        //have some empty docs
        assertU(adoc("id", String.valueOf(i)));
        continue;
      }

      if (random().nextInt(100) == 0 && i > 0) {
        //delete some docs
        assertU(delI(String.valueOf(i - 1)));
      }
      SolrInputDocument document = new SolrInputDocument();
      document.setField("id", i);
      for (Map.Entry<NumberType,String[]> entry:types.entrySet()) {
        NumberType type = entry.getKey();
        String val = null;
        List<String> vals = null;
        switch (type) {
          case DATE:
            val = randomDate(cardinality);
            vals = getRandomDates(random().nextInt(10), cardinality);
            break;
          case DOUBLE:
            val = String.valueOf(randomDouble(cardinality));
            vals = toStringList(getRandomDoubles(random().nextInt(10), cardinality));
            break;
          case FLOAT:
            val = String.valueOf(randomFloat(cardinality));
            vals = toStringList(getRandomFloats(random().nextInt(10), cardinality));
            break;
          case INTEGER:
            val = String.valueOf(randomInt(cardinality));
            vals = toStringList(getRandomInts(random().nextInt(10), cardinality));
            break;
          case LONG:
            val = String.valueOf(randomLong(cardinality));
            vals = toStringList(getRandomLongs(random().nextInt(10), cardinality));
            break;
          default:
            throw new AssertionError();

        }
        // SingleValue
        for (String fieldSuffix:entry.getValue()) {
          document.setField("field_sv_" + fieldSuffix, val);
        }
        //  MultiValue
        for (String fieldSuffix:typesMv.get(type)) {
          for (String value:vals) {
            document.addField("field_mv_" + fieldSuffix, value);
          }
        }
      }

      assertU(adoc(document));
      if (random().nextInt(50) == 0) {
        assertU(commit());
      }
    }
    assertU(commit());

    String[][] possibleTypes = new String[types.size()][];
    types.values().toArray(possibleTypes);
    String[][] possibleTypesMv = new String[typesMv.size()][];
    typesMv.values().toArray(possibleTypesMv);
    for (int i = 0; i < atLeast(1000); i++) {
      doTestQuery(cardinality, false, pickRandom(possibleTypes));
      doTestQuery(cardinality, true, pickRandom(possibleTypesMv));
    }
  }

