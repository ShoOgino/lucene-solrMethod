  /**
   * Verifies that the popularity &amp; relatedness values containined in a single SKG bucket 
   * match the expected values based on the facet field &amp; bucket value, as well the existing 
   * filterParams.
   * 
   * @see #assertFacetSKGsAreCorrect
   */
  private void verifySKGResults(String facetKey, TermFacet facet, SolrParams filterParams,
                                String fieldVal, NamedList<Object> bucket)
    throws SolrServerException, IOException {

    final String bucketQ = facet.field+":"+fieldVal;
    @SuppressWarnings({"unchecked"})
    final NamedList<Object> skgBucket = (NamedList<Object>) bucket.get("skg");
    assertNotNull(facetKey + "/bucket:" + bucket.toString(), skgBucket);

    // TODO: make this more efficient?
    // ideally we'd do a single query w/4 facet.queries, one for each count
    // but formatting the queries is a pain, currently we leverage the accumulated fq's
    final long fgSize = getNumFound(SolrParams.wrapAppended(params("_trace", "fgSize",
                                                                   "rows","0",
                                                                   "q","{!query v=$fore}"),
                                                            filterParams));
    final long bgSize = getNumFound(params("_trace", "bgSize",
                                           "rows","0",
                                           "q", filterParams.get("back")));
    
    final long fgCount = getNumFound(SolrParams.wrapAppended(params("_trace", "fgCount",
                                                                   "rows","0",
                                                                    "q","{!query v=$fore}",
                                                                    "fq", bucketQ),
                                                             filterParams));
    final long bgCount = getNumFound(params("_trace", "bgCount",
                                            "rows","0",
                                            "q", bucketQ,
                                            "fq", filterParams.get("back")));

    assertEquals(facetKey + "/bucket:" + bucket + " => fgPop should be: " + fgCount + " / " + bgSize,
                 roundTo5Digits((double) fgCount / bgSize),
                 skgBucket.get("foreground_popularity"));
    assertEquals(facetKey + "/bucket:" + bucket + " => bgPop should be: " + bgCount + " / " + bgSize,
                 roundTo5Digits((double) bgCount / bgSize),
                 skgBucket.get("background_popularity"));
    assertEquals(facetKey + "/bucket:" + bucket + " => relatedness is wrong",
                 roundTo5Digits(computeRelatedness(fgCount, fgSize, bgCount, bgSize)),
                 skgBucket.get("relatedness"));
    
  }

