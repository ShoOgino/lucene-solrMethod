  @Test
  public void testOtherErrorCases() throws Exception {
    Client client = Client.localClient();
    client.deleteByQuery("*:*", null);
    indexSimple(client);

    // test for sort
    assertQEx("Should fail as sort is of type list",
        "Expected string/map for 'sort', received ArrayList=[count desc]",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,sort:[\"count desc\"]}}"),
        SolrException.ErrorCode.BAD_REQUEST);


    assertQEx("Should fail as facet is not of type map",
        "Expected Map for 'facet', received ArrayList=[{}]",
        req("q", "*:*", "rows", "0", "json.facet", "[{}]"), SolrException.ErrorCode.BAD_REQUEST);

    // range facets
    assertQEx("Should fail as 'other' is of type Map",
        "Expected list of string or comma separated string values for 'other', " +
            "received LinkedHashMap={} , path=facet/f",
        req("q", "*:*", "json.facet", "{f:{type:range, field:num_d, start:10, end:12, gap:1, other:{}}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    assertQEx("Should fail as 'include' is of type Map",
        "Expected list of string or comma separated string values for 'include', " +
            "received LinkedHashMap={} , path=facet/f",
        req("q", "*:*", "json.facet", "{f:{type:range, field:num_d, start:10, end:12, gap:1, include:{}}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    // missing start parameter
    assertQEx("Should Fail with missing field error",
        "Missing required parameter: 'start' , path=facet/f",
        req("q", "*:*", "json.facet", "{f:{type:range, field:num_d}}"), SolrException.ErrorCode.BAD_REQUEST);

    // missing end parameter
    assertQEx("Should Fail with missing field error",
        "Missing required parameter: 'end' , path=facet/f",
        req("q", "*:*", "json.facet", "{f:{type:range, field:num_d, start:10}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    // missing gap parameter
    assertQEx("Should Fail with missing field error",
        "Missing required parameter: 'gap' , path=facet/f",
        req("q", "*:*", "json.facet", "{f:{type:range, field:num_d, start:10, end:12}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    // invalid value for facet field
    assertQEx("Should Fail as args is of type long",
        "Expected string/map for facet field, received Long=2 , path=facet/facet",
        req("q", "*:*", "rows", "0", "json.facet.facet.field", "2"), SolrException.ErrorCode.BAD_REQUEST);

    // invalid value for facet query
    assertQEx("Should Fail as args is of type long for query",
        "Expected string/map for facet query, received Long=2 , path=facet/facet",
        req("q", "*:*", "rows", "0", "json.facet.facet.query", "2"), SolrException.ErrorCode.BAD_REQUEST);

    // valid facet field
    assertQ("Should pass as this is valid query",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s}}"));

    // invalid perSeg
    assertQEx("Should fail as perSeg is not of type boolean",
        "Expected boolean type for param 'perSeg' but got Long = 2 , path=facet/cat_s",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,perSeg:2}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    assertQEx("Should fail as sort is invalid",
        "Invalid sort option 'bleh' for field 'cat_s'",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,sort:bleh}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    assertQEx("Should fail as sort order is invalid",
        "Unknown Sort direction 'bleh'",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,sort:{count: bleh}}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    // test for prelim_sort
    assertQEx("Should fail as prelim_sort is invalid",
        "Invalid prelim_sort option 'bleh' for field 'cat_s'",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,prelim_sort:bleh}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    assertQEx("Should fail as prelim_sort map is invalid",
        "Invalid prelim_sort option '{bleh=desc}' for field 'cat_s'",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,prelim_sort:{bleh:desc}}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    // with nested facet
    assertQEx("Should fail as prelim_sort is invalid",
        "Invalid sort option 'bleh' for field 'id'",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,sort:bleh,facet:" +
            "{bleh:\"unique(cat_s)\",id:{type:terms,field:id,sort:bleh}}}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    assertQ("Should pass as sort is proper",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,sort:bleh,facet:" +
            "{bleh:\"unique(cat_s)\",id:{type:terms,field:id,sort:{bleh:desc},facet:{bleh:\"unique(id)\"}}}}}")
    );
  }

