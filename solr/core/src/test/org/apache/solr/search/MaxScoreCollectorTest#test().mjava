  public void test() throws IOException {
    MaxScoreCollector collector = new MaxScoreCollector();
    DummyScorer scorer = new DummyScorer();
    collector.setScorer(scorer);
    assertEquals(Float.NaN, collector.getMaxScore(), 0f);
    assertEquals(0f, scorer.minCompetitiveScore, 0f);
    
    collector.collect(0);
    assertEquals(Float.MIN_VALUE, collector.getMaxScore(), 0f);
    assertEquals(0f, scorer.minCompetitiveScore, 0f);
    
    scorer.nextScore = 1f;
    collector.collect(0);
    assertEquals(1f, collector.getMaxScore(), 0f);
    assertEquals(Math.nextUp(1f), scorer.minCompetitiveScore, 0f);

    scorer.nextScore = 0f;
    collector.collect(0);
    assertEquals(1f, collector.getMaxScore(), 0f);
    assertEquals(Math.nextUp(1f), scorer.minCompetitiveScore, 0f);
    
    scorer.nextScore = -1f;
    collector.collect(0);
    assertEquals(1f, collector.getMaxScore(), 0f);
    assertEquals(Math.nextUp(1f), scorer.minCompetitiveScore, 0f);
    
    scorer.nextScore = Float.MAX_VALUE;
    collector.collect(0);
    assertEquals(Float.MAX_VALUE, collector.getMaxScore(), 0f);
    assertEquals(Float.POSITIVE_INFINITY, scorer.minCompetitiveScore, 0f);
    
    scorer.nextScore = Float.POSITIVE_INFINITY;
    collector.collect(0);
    assertEquals(Float.POSITIVE_INFINITY, collector.getMaxScore(), 0f);
    assertEquals(Float.POSITIVE_INFINITY, scorer.minCompetitiveScore, 0f);
    
    
    scorer.nextScore = Float.NaN;
    collector.collect(0);
    assertEquals(Float.NaN, collector.getMaxScore(), 0f);
    assertEquals(Float.NaN, scorer.minCompetitiveScore, 0f);
  }

