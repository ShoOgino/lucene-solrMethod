  public void testJsonFacetRangeOfAsymetricRates() throws Exception {
    // json.facet: exchange rates relative to EUR (same as testFacetRangeOfAsymetricRates)
    //
    // because of the asymetric echange rate, the counts for these buckets will be different
    // then if we just converted the EUR values to USD
    for (boolean use_mincount : Arrays.asList(true, false)) {
      final SolrQuery solrQuery = new SolrQuery("q", "*:*", "rows", "0", "json.facet",
                                                "{ foo:{ type:range, field:"+FIELD+", start:'8,EUR', " +
                                                "        mincount:"+(use_mincount ? 3 : 0)+", " +
                                                "        gap:'2,EUR', end:'22,EUR', other:all}}");
      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);
      try {
        assertEquals(NUM_DOCS, rsp.getResults().getNumFound());
        
        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get("facets")).get("foo");
        
        assertEqualsHACK("before", 6L, ((NamedList)foo.get("before")).get("count"));
        assertEqualsHACK("after", 3L, ((NamedList)foo.get("after")).get("count"));
        assertEqualsHACK("between", 6L, ((NamedList)foo.get("between")).get("count"));
        
        final List<NamedList> buckets = (List<NamedList>) foo.get("buckets");
        
        if (use_mincount) {
          assertEquals(2, buckets.size());
          for (int i = 0; i < 2; i++) {
            NamedList bucket = buckets.get(i);
            assertEquals((12 + (i * 2)) + ".00,EUR", bucket.get("val"));
            assertEqualsHACK("bucket #" + i, 3L, bucket.get("count"));
          }
        } else {
          assertEquals(7, buckets.size());
          for (int i = 0; i < 7; i++) {
            NamedList bucket = buckets.get(i);
            assertEquals((8 + (i * 2)) + ".00,EUR", bucket.get("val"));
            assertEqualsHACK("bucket #" + i, (i == 2 || i == 3) ? 3L : 0L, bucket.get("count"));
          }
        }
      } catch (AssertionError|RuntimeException ae) {
        throw new AssertionError(solrQuery.toString() + " -> " + rsp.toString() + " ===> " + ae.getMessage(), ae);
      }
    }
  }

