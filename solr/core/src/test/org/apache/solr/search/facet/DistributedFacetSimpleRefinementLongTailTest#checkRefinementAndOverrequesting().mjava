  private void checkRefinementAndOverrequesting() throws Exception {
    // // distributed queries // //
    
    { // w/o refinement, the default overrequest isn't enough to find the long 'tail' *OR* the correct count for 'bbb0'...
      List<NamedList> foo_buckets = (List<NamedList>)
        ((NamedList<NamedList>)
         queryServer( params( "q", "*:*", "shards", getShardsString(), "json.facet",
                              "{ foo: { type:terms, refine:none, limit:6, field:foo_s } }"
                              ) ).getResponse().get("facets")).get("foo").get("buckets");
      assertEquals(6, foo_buckets.size());
      for (int i = 0; i < 5; i++) {
        NamedList bucket = foo_buckets.get(i);
        assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("aaa"));
        assertEquals(bucket.toString(), 300L, bucket.get("count"));
      }
      
      // this will be short the "+1" fo the doc added to shard2...
      NamedList bucket = foo_buckets.get(5);
      assertTrue(bucket.toString(), bucket.get("val").equals("bbb0")); // 'tail' is missed
      assertEquals(bucket.toString(), 100L, bucket.get("count")); // will not include the "+1" for the doc added to shard2
    }
    
    // even if we enable refinement, we still won't find the long 'tail' ...
    // regardless of wether we use either the default overrequest, or disable overrequesting...
    for (String over : Arrays.asList( "", "overrequest:0,")) { 
      List<NamedList> foo_buckets = (List<NamedList>)
        ((NamedList<NamedList>)
         queryServer( params( "q", "*:*", "shards", getShardsString(), "json.facet",
                              "{ foo: { type:terms, refine:simple, limit:6, "+ over +" field:foo_s, facet:{ " + ALL_STATS_JSON + 
                              "  bar: { type:terms, refine:simple, limit:6, "+ over +" field:bar_s, facet:{"+ALL_STATS_JSON+"}}}}}"
                              ) ).getResponse().get("facets")).get("foo").get("buckets");
      assertEquals(6, foo_buckets.size());
      for (int i = 0; i < 5; i++) {
        NamedList bucket = foo_buckets.get(i);
        assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("aaa"));
        assertEquals(bucket.toString(), 300L, bucket.get("count"));
      }
      // ...but it should have correctly asked shard2 to refine bbb0
      NamedList bucket = foo_buckets.get(5);
      assertTrue(bucket.toString(), bucket.get("val").equals("bbb0"));
      assertEquals(bucket.toString(), 101L, bucket.get("count"));
      // ...and the status under bbb0 should be correct to include the refinement
      assertEquals(ALL_STATS.size() + 3, bucket.size()); // val,count,facet
      assertEquals(-2L, bucket.get("min"));                                         // this min only exists on shard2
      assertEquals(1L, bucket.get("max"));
      // assertEquals(101L, bucket.get("num_values")); // TODO: SOLR-11695
      // assertEquals(0L, bucket.get("missing")); // TODO: SOLR-11695
      assertEquals(48.0D, bucket.get("sum"));
      assertEquals(0.475247524752475D, (double) bucket.get("avg"), 0.1E-7);
      assertEquals(54.0D, (double) bucket.get("sumsq"), 0.1E-7);
      // assertEquals(0.55846323792D, bucket.getStddev(), 0.1E-7); // TODO: SOLR-11725
      assertEquals(0.55569169111D, (double) bucket.get("stddev"), 0.1E-7); // json.facet is using the "uncorrected stddev"
    }


    // with a limit==6, we have to "overrequest >= 20" in order to ensure that 'tail' is included in the top 6
    // this is because of how the "simple" refinement process works: the "top buckets" are determined based
    // on the info available in the first pass request.
    //
    // Even though 'tail' is returned in the top6 for shard2, the cummulative total for 'bbb0' from shard0 and shard1 is
    // high enough that the simple facet refinement ignores 'tail' because it assumes 'bbb0's final total will be greater.
    //
    // Meanwhile, for the sub-facet on 'bar', a limit==6 means we should correctly find 'tailB' as the top sub-term of 'tail',
    // regardless of how much overrequest is used (or even if we don't have any refinement) since it's always in the top6...
    for (String bar_opts : Arrays.asList( "refine:none,",
                                          "refine:simple,",
                                          "refine:none,   overrequest:0,",
                                          "refine:simple, overrequest:0," )) {


      List<NamedList> buckets = (List<NamedList>)
        ((NamedList<NamedList>)
         queryServer( params( "q", "*:*", "shards", getShardsString(), "json.facet",
                              "{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ " +
                              "  bar: { type:terms, limit:6, " + bar_opts + " field:bar_s }}}}"
                              ) ).getResponse().get("facets")).get("foo").get("buckets");
      
      assertEquals(6, buckets.size());
      for (int i = 0; i < 5; i++) {
        NamedList bucket = buckets.get(i);
        assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("aaa"));
        assertEquals(bucket.toString(), 300L, bucket.get("count"));
      }
    
      NamedList bucket = buckets.get(5);
      assertEquals(bucket.toString(), "tail", bucket.get("val"));
      assertEquals(bucket.toString(), 135L, bucket.get("count"));
      // check the sub buckets
      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get("bar").get("buckets");
      assertEquals(6, buckets.size());
      bucket = buckets.get(0);
      assertEquals(bucket.toString(), "tailB", bucket.get("val"));
      assertEquals(bucket.toString(), 17L, bucket.get("count"));
      for (int i = 1; i < 6; i++) { // ccc(0-4)
        bucket = buckets.get(i);
        assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("ccc"));
        assertEquals(bucket.toString(), 14L, bucket.get("count"));
      }
    }
    
    // if we lower the limit on the sub-bucket to '5', overrequesting of at least 1 should still ensure 
    // that we get the correct top5 including "tailB" -- even w/o refinement
    for (String bar_opts : Arrays.asList( "refine:none,",
                                          "refine:simple,",
                                          "refine:none,   overrequest:1,",
                                          "refine:simple, overrequest:1," )) {
      
      List<NamedList> buckets = (List<NamedList>)
        ((NamedList<NamedList>)
         queryServer( params( "q", "*:*", "shards", getShardsString(), "json.facet",
                              "{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ " +
                              "  bar: { type:terms, limit:5, " + bar_opts + " field:bar_s }}}}"
                              ) ).getResponse().get("facets")).get("foo").get("buckets");
      
      assertEquals(6, buckets.size());
      for (int i = 0; i < 5; i++) {
        NamedList bucket = buckets.get(i);
        assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("aaa"));
        assertEquals(bucket.toString(), 300L, bucket.get("count"));
      }
      NamedList bucket = buckets.get(5);
      assertEquals(bucket.toString(), "tail", bucket.get("val"));
      assertEquals(bucket.toString(), 135L, bucket.get("count"));
      // check the sub buckets
      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get("bar").get("buckets");
      assertEquals(5, buckets.size());
      bucket = buckets.get(0);
      assertEquals(bucket.toString(), "tailB", bucket.get("val"));
      assertEquals(bucket.toString(), 17L, bucket.get("count"));
      for (int i = 1; i < 5; i++) { // ccc(0-3)
        bucket = buckets.get(i);
        assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("ccc"));
        assertEquals(bucket.toString(), 14L, bucket.get("count"));
      }
    }
    
    // however: with a lower sub-facet limit==5, and overrequesting disabled, 
    // we're going to miss out on tailB even if we have refinement
    for (String bar_opts : Arrays.asList( "refine:none,   overrequest:0,",
                                          "refine:simple, overrequest:0," )) {
      
      List<NamedList> buckets = (List<NamedList>)
        ((NamedList<NamedList>)
         queryServer( params( "q", "*:*", "shards", getShardsString(), "json.facet",
                              "{ foo: { type:terms, limit:6, overrequest:20, refine:simple, field:foo_s, facet:{ " +
                              "  bar: { type:terms, limit:5, " + bar_opts + " field:bar_s }}}}"
                              ) ).getResponse().get("facets")).get("foo").get("buckets");

      assertEquals(6, buckets.size());
      for (int i = 0; i < 5; i++) {
        NamedList bucket = buckets.get(i);
        assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("aaa"));
        assertEquals(bucket.toString(), 300L, bucket.get("count"));
      }
      NamedList bucket = buckets.get(5);
      assertEquals(bucket.toString(), "tail", bucket.get("val"));
      assertEquals(bucket.toString(), 135L, bucket.get("count"));
      // check the sub buckets
      buckets = ((NamedList<NamedList<List<NamedList>>>) bucket).get("bar").get("buckets");
      assertEquals(5, buckets.size());
      for (int i = 0; i < 5; i++) { // ccc(0-4)
        bucket = buckets.get(i);
        assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("ccc"));
        assertEquals(bucket.toString(), 14L, bucket.get("count"));
      }
    }
    
  }

