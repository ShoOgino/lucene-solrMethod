  /** 
   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output 
   * based on the equivalent filters generated from the original TermFacet.
   */
  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,
                                           final Map<String,TermFacet> expected,
                                           final SolrParams baseParams,
                                           @SuppressWarnings({"rawtypes"})final NamedList actualFacetResponse) throws SolrServerException, IOException {

    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {
      final String facetKey = entry.getKey();
      final TermFacet facet = entry.getValue();
      @SuppressWarnings({"rawtypes"})
      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);
      assertNotNull(facetKey + " key missing from: " + actualFacetResponse, results);
      @SuppressWarnings({"unchecked", "rawtypes"})
      final List<NamedList> buckets = (List<NamedList>) results.get("buckets");
      assertNotNull(facetKey + " has null buckets: " + actualFacetResponse, buckets);

      if (buckets.isEmpty()) {
        // should only happen if the baseParams query does not match any docs with our field X
        final long docsWithField = getRandClient(random()).query
          (facet.applyValueConstraintAndDomain(baseParams, facetKey, "[* TO *]")).getResults().getNumFound();
        assertEquals(facetKey + " has no buckets, but docs in query exist with field: " + facet.field,
                     0, docsWithField);
      }
      
      for (@SuppressWarnings({"rawtypes"})NamedList bucket : buckets) {
        final long count = ((Number) bucket.get("count")).longValue();
        final String fieldVal = bucket.get("val").toString(); // int or stringified int

        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)
        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);

        // check the count for this bucket
        assertEquals(facetKey + ": " + verifyParams,
                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());

        if (maxBucketsToCheck.decrementAndGet() <= 0) {
          return;
        }
        
        // recursively check subFacets
        if (! facet.subFacets.isEmpty()) {
          assertFacetCountsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);
        }
      }
    }
    assertTrue("facets have unexpected keys left over: " + actualFacetResponse,
               // should alwasy be a count, maybe a 'val' if we're a subfacet
               (actualFacetResponse.size() == expected.size() + 1) ||
               (actualFacetResponse.size() == expected.size() + 2));
  }

