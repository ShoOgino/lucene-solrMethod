  public void test() throws Exception {

    // seed some docs & segments
    int numDocs = atLeast(1);
    for (int i = 1; i <= numDocs; i++) {
      // NOTE: starting at "1", we'll use id=0 later
      assertU(adoc("id", ""+i));
      if (random().nextBoolean()) {
        assertU(commit());
      }
    }
    assertU(commit());

    // seed a single query into the cache
    assertQ(req("*:*"), "//*[@numFound='"+numDocs+"']");

    final SolrQueryRequest baseReq = req("q","foo");
    try {
      // we make no index changes in this block, so the searcher should always be the same
      // NOTE: we *have* to call getSearcher() in advance, it's a delayed binding
      final SolrIndexSearcher expectedSearcher = getMainSearcher(baseReq);

      assertU(commit());
      assertSearcherHasNotChanged(expectedSearcher);

      assertU(commit("openSearcher","true"));
      assertSearcherHasNotChanged(expectedSearcher);

      assertU(commit("softCommit","true"));
      assertSearcherHasNotChanged(expectedSearcher);

      assertU(commit("softCommit","true","openSearcher","true"));
      assertSearcherHasNotChanged(expectedSearcher);

      assertU(delQ("id:match_no_documents"));
      assertU(commit());
      assertSearcherHasNotChanged(expectedSearcher);

      assertU(delI("0")); // no doc has this id, yet
      assertU(commit());
      assertSearcherHasNotChanged(expectedSearcher);

    } finally {
      baseReq.close();
    }

    // now do a variety of things that *should* always garuntee a new searcher
    SolrQueryRequest beforeReq;

    beforeReq = req("q","foo");
    try {
      // NOTE: we *have* to call getSearcher() in advance: delayed binding
      SolrIndexSearcher before = getMainSearcher(beforeReq);

      assertU(delI("1"));
      assertU(commit());
      assertSearcherHasChanged(before);
    } finally {
      beforeReq.close();
    }
    
    beforeReq = req("q","foo");
    try {
      // NOTE: we *have* to call getSearcher() in advance: delayed binding
      SolrIndexSearcher before = getMainSearcher(beforeReq);

      assertU(adoc("id", "0"));
      assertU(commit());
      assertSearcherHasChanged(before);
    } finally {
      beforeReq.close();
    }

    beforeReq = req("q","foo");
    try {
      // NOTE: we *have* to call getSearcher() in advance: delayed binding
      SolrIndexSearcher before = getMainSearcher(beforeReq);

      assertU(delQ("id:[0 TO 5]"));
      assertU(commit());
      assertSearcherHasChanged(before);
    } finally {
      beforeReq.close();
    }

    beforeReq = req("q","foo");
    try {
      // NOTE: we *have* to call getSearcher() in advance: delayed binding
      SolrIndexSearcher before = getMainSearcher(beforeReq);

      // create a new field & add it.
      assertTrue("schema not mutable", beforeReq.getSchema().isMutable());
      ManagedIndexSchema oldSchema = (ManagedIndexSchema) beforeReq.getSchema();
      SchemaField newField = oldSchema.newField
        ("hoss", "string", Collections.<String,Object>emptyMap());
      IndexSchema newSchema = oldSchema.addField(newField);
      h.getCore().setLatestSchema(newSchema);

      // sanity check, later asserts assume this
      assertNotSame(oldSchema, newSchema); 

      // the schema has changed - but nothing has requested a new Searcher yet
      assertSearcherHasNotChanged(before);

      // only now should we get a new searcher...
      assertU(commit("softCommit","true","openSearcher","true"));
      assertSearcherHasChanged(before);

      // sanity that opening the new searcher was useful to get new schema...
      SolrQueryRequest afterReq = req("q","foo");
      try {
        assertSame(newSchema, afterReq.getSchema());
        assertSame(newSchema, getMainSearcher(afterReq).getSchema());
      } finally {
        afterReq.close();
      }

    } finally {
      beforeReq.close();
    }

  }

