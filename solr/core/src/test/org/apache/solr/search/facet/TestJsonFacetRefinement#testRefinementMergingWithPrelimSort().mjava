  /** 
   * When <code>prelim_sort</code> is used, all 'top bucket' choices for refinement should still be based on
   * it, not the <code>sort</code> param, so this test is just some sanity checks that the presence of the 
   * these params doesn't break anything in the refine / logic.
   */
  @Test
  public void testRefinementMergingWithPrelimSort() throws Exception {

    doTestRefine("{x : { type:terms, field:X, limit:2, refine:true, prelim_sort:'count desc', sort:'y asc'," +
                 "       facet:{ y:'sum(y_i)' } } }",
                 // shard0 response
                 "{x: {buckets:[{val:x1, count:5, y:73}, {val:x2, count:3, y:13}], more:true } }",
                 // shard1 response
                 "{x: {buckets:[{val:x2, count:4, y:4}, {val:x3, count:2, y:22}], more:true } }",
                 // shard0 expected refinement info
                 null,
                 // shard1 expected refinement info
                 "=={x:{_l:[x1]}}");

    // same test as above, but shard1 indicates it doesn't have any more results,
    // so there shouldn't be any refinement
    doTestRefine("{x : { type:terms, field:X, limit:2, refine:true, prelim_sort:'count desc', sort:'y asc'," +
                 "       facet:{ y:'sum(y_i)' } } }",
                 // shard0 response
                 "{x: {buckets:[{val:x1, count:5, y:73}, {val:x2, count:3, y:13}], more:true } }",
                 // shard1 response
                 "{x: {buckets:[{val:x2, count:4, y:4}, {val:x3, count:2, y:22}] } }",
                 // shard0 expected refinement info
                 null,
                 // shard1 expected refinement info
                 null);
  }

