  /** 
   * Tests sort order of min/max realtive to other docs w/o any values.
   * @param fieldname The field to test
   * @param negative a "negative" value for this field (ie: in a function context, is less then the "0")
   * @param positive a "positive" value for this field (ie: in a function context, is more then the "0")
   */
  protected void testSimpleSort(final String fieldname,
                                @SuppressWarnings({"rawtypes"})final Comparable negative,
                                @SuppressWarnings({"rawtypes"})final Comparable positive) {
    clearIndex();

    int numDocsExpected = 1;
    for (int i = 1; i < 4; i++) { // pos docids
      if (random().nextBoolean()) {
        assertU(adoc(sdoc("id",i))); // fieldname doesn't exist
        numDocsExpected++;
      }
    }
    
    assertU(adoc(sdoc("id", "0",
                      fieldname, negative,
                      fieldname, positive)));
    
    for (int i = 1; i < 4; i++) { // neg docids
      if (random().nextBoolean()) {
        assertU(adoc(sdoc("id",-i))); // fieldname doesn't exist
        numDocsExpected++;
      }
    }
    assertU(commit());

    // need to wrap with "def" until SOLR-8005 is resolved
    assertDocWithValsIsFirst(numDocsExpected, "def(field("+fieldname+",min),0) asc");
    assertDocWithValsIsLast(numDocsExpected,  "def(field("+fieldname+",min),0) desc");
    
    assertDocWithValsIsFirst(numDocsExpected, "def(field("+fieldname+",max),0) desc");
    assertDocWithValsIsLast(numDocsExpected,  "def(field("+fieldname+",max),0) asc");

    // def wrapper shouldn't be needed since it's already part of another function
    assertDocWithValsIsFirst(numDocsExpected, "sum(32,field("+fieldname+",max)) desc");
    assertDocWithValsIsLast(numDocsExpected,  "sum(32,field("+fieldname+",max)) asc");
    
    assertDocWithValsIsFirst(numDocsExpected, "sum(32,field("+fieldname+",min)) asc");
    assertDocWithValsIsLast(numDocsExpected,  "sum(32,field("+fieldname+",min)) desc");
  }

