  public void testNestedJoinDomain() throws Exception {
    Client client = Client.localClient();

    client.deleteByQuery("*:*", null);
    client.add(sdoc("id", "1", "1_s", "A", "2_s", "A", "3_s", "C", "y_s", "B", "x_t", "x   z", "z_t", "  2 3"), null);
    client.add(sdoc("id", "2", "1_s", "B", "2_s", "A", "3_s", "B", "y_s", "B", "x_t", "x y  ", "z_t", "1   3"), null);
    client.add(sdoc("id", "3", "1_s", "C", "2_s", "A", "3_s", "#", "y_s", "A", "x_t", "  y z", "z_t", "1 2  "), null);
    client.add(sdoc("id", "4", "1_s", "A", "2_s", "B", "3_s", "C", "y_s", "A", "x_t", "    z", "z_t", "    3"), null);
    client.add(sdoc("id", "5", "1_s", "B", "2_s", "_", "3_s", "B", "y_s", "C", "x_t", "x    ", "z_t", "1   3"), null);
    client.add(sdoc("id", "6", "1_s", "C", "2_s", "B", "3_s", "A", "y_s", "C", "x_t", "x y z", "z_t", "1    "), null);
    client.commit();

    assertJQ(req("q", "x_t:x", "rows", "0", // NOTE q - only x=x in base set (1,2,5,6)
                 "json.facet", ""
                 + "{x: { type: terms, field: 'x_t', "
                 + "      domain: { join: { from:'1_s', to:'2_s' } },"
                 //                y1 & y2 are the same facet, with *similar* child facet z1/z2 ...
                 + "      facet: { y1: { type: terms, field: 'y_s', "
                 //                               z1 & z2 are same field, diff join...
                 + "                     facet: { z1: { type: terms, field: 'z_t', "
                 + "                                    domain: { join: { from:'2_s', to:'3_s' } } } } },"
                 + "               y2: { type: terms, field: 'y_s', "
                 //                               z1 & z2 are same field, diff join...
                 + "                     facet: { z2: { type: terms, field: 'z_t', "
                 + "                                    domain: { join: { from:'3_s', to:'1_s' } } } } } } } }")
             , "facets=={count:4, "
             + "x:{ buckets:[" // joined 1->2: doc5 drops out, counts: z=4, x=3, y=3 
             + "   { val:z, count:4, " // x=z (docs 1,3,4,6) y terms: A=2, B=1, C=1
             + "     y1 : { buckets:[ " // z1 joins 2->3...
             + "             { val:A, count:2, " // A in docs(3,4), joins (A,B) -> docs(2,5,6)
             + "               z1: { buckets:[{ val:'1', count:3 }, { val:'3', count:2 }] } }, "
             + "             { val:B, count:1, " // B in doc1, joins A -> doc6
             + "               z1: { buckets:[{ val:'1', count:1 }] } }, "
             + "             { val:C, count:1, " // C in doc6, joins B -> docs(2,5)
             + "               z1: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } } "
             + "          ] }, "
             + "     y2 : { buckets:[ " // z2 joins 3->1...
             + "             { val:A, count:2, " // A in docs(3,4), joins C -> docs(3,6)
             + "               z2: { buckets:[{ val:'1', count:2 }, { val:'2', count:1 }] } }, "
             + "             { val:B, count:1, " // B in doc1, joins C -> docs(3,6)
             + "               z2: { buckets:[{ val:'1', count:2 }, { val:'2', count:1 }] } }, "
             + "             { val:C, count:1, " // C in doc6, joins A -> docs(1,4)
             + "               z2: { buckets:[{ val:'3', count:2 }, { val:'2', count:1 }] } } "
             + "          ] } }, "
             + "   { val:x, count:3, " // x=x (docs 1,2,!5,6) y terms: B=2, C=1 
             + "     y1 : { buckets:[ " // z1 joins 2->3...
             + "             { val:B, count:2, " // B in docs(1,2), joins A -> doc6
             + "               z1: { buckets:[{ val:'1', count:1 }] } }, "
             + "             { val:C, count:1, " // C in doc6, joins B -> docs(2,5)
             + "               z1: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } } "
             + "          ] }, "
             + "     y2 : { buckets:[ " // z2 joins 3->1...
             + "             { val:B, count:2, " // B in docs(1,2), joins C,B -> docs(2,3,5,6)
             + "               z2: { buckets:[{ val:'1', count:4 }, { val:'3', count:2 }, { val:'2', count:1 }] } }, "
             + "             { val:C, count:1, " // C in doc6, joins A -> docs(1,4)
             + "               z2: { buckets:[{ val:'3', count:2 }, { val:'2', count:1 }] } } "
             + "          ] } }, "
             + "   { val:y, count:3, " // x=y (docs 2,3,6) y terms: A=1, B=1, C=1 
             + "     y1 : { buckets:[ " // z1 joins 2->3...
             + "             { val:A, count:1, " // A in doc3, joins A -> doc6
             + "               z1: { buckets:[{ val:'1', count:1 }] } }, "
             + "             { val:B, count:1, " // B in doc2, joins A -> doc6
             + "               z1: { buckets:[{ val:'1', count:1 }] } }, "
             + "             { val:C, count:1, " // C in doc6, joins B -> docs(2,5)
             + "               z1: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } } "
             + "          ] }, "
             + "     y2 : { buckets:[ " // z2 joins 3->1...
             + "             { val:A, count:1, " // A in doc3, joins # -> empty set
             + "               z2: { buckets:[ ] } }, "
             + "             { val:B, count:1, " // B in doc2, joins B -> docs(2,5)
             + "               z2: { buckets:[{ val:'1', count:2 }, { val:'3', count:2 }] } }, "
             + "             { val:C, count:1, " // C in doc6, joins A -> docs(1,4)
             + "               z2: { buckets:[{ val:'3', count:2 }, { val:'2', count:1 }] } } "
             + "          ]}  }"
             + "   ]}}"
             );
  }

