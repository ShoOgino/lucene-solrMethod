  public void testEveryIsolatedSortFieldOnSingleGroup() throws Exception {
    
    for (String sortField : ALL_SORT_FIELD_NAMES) {
      for (String dir : Arrays.asList(" asc", " desc")) {
        
        final String sort = sortField + dir + ", id" + dir; // need id for tie breaker
        final String q = random().nextBoolean() ? "*:*" : CursorPagingTest.buildRandomQuery();

        final SolrParams sortedP = params("q", q, "rows", "1",
                                          "sort", sort);
                                        
        final QueryResponse sortedRsp = SOLR.query(sortedP);

        // random data -- might be no docs matching our query
        if (0 != sortedRsp.getResults().getNumFound()) {
          final SolrDocument firstDoc = sortedRsp.getResults().get(0);

          // check forced array resizing starting from 1
          for (String p : Arrays.asList("{!collapse field=", "{!collapse size='1' field=")) {
            for (String fq : Arrays.asList
                   (p + "same_for_all_docs sort='"+sort+"'}",
                    // nullPolicy=expand shouldn't change anything since every doc has field
                    p + "same_for_all_docs sort='"+sort+"' nullPolicy=expand}",
                    // a field in no docs with nullPolicy=collapse should have same effect as
                    // collapsing on a field in every doc
                    p + "not_in_any_docs sort='"+sort+"' nullPolicy=collapse}")) {
              final SolrParams collapseP = params("q", q, "rows", "1", "fq", fq);
              
              // since every doc is in the same group, collapse query should return exactly one doc
              final QueryResponse collapseRsp = SOLR.query(collapseP);
              assertEquals("collapse should have produced exactly one doc: " + collapseP,
                           1, collapseRsp.getResults().getNumFound());
              final SolrDocument groupHead = collapseRsp.getResults().get(0);
              
              // the group head from the collapse query should match the first doc of a simple sort
              assertEquals(sortedP + " => " + firstDoc + " :VS: " + collapseP + " => " + groupHead,
                           firstDoc.getFieldValue("id"), groupHead.getFieldValue("id"));
            }
          }
        }
      }
    }
  }

