  @Test
  public void testGetPutCompute() throws Exception {
    Map<String, SummaryStatistics> getPutRatio = new HashMap<>();
    Map<String, SummaryStatistics> computeRatio = new HashMap<>();
    Map<String, SummaryStatistics> getPutTime = new HashMap<>();
    Map<String, SummaryStatistics> computeTime = new HashMap<>();
    // warm-up
    int threads = 10;
    for (int i = 0; i < 10; i++) {
      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, false);
      doTestGetPutCompute(new HashMap<String, SummaryStatistics>(), new HashMap<String, SummaryStatistics>(), threads, true);
    }
    for (int i = 0; i < 100; i++) {
      doTestGetPutCompute(getPutRatio, getPutTime, threads, false);
      doTestGetPutCompute(computeRatio, computeTime, threads, true);
    }
    computeRatio.forEach((type, computeStats) -> {
      SummaryStatistics getPutStats = getPutRatio.get(type);
      assertGreaterThanOrEqual( "Compute ratio should be higher or equal to get/put ratio", computeStats.getMean(), getPutStats.getMean(), 0.0001);
    });
  }

