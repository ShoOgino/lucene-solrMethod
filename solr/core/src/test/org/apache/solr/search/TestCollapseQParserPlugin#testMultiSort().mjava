  public void testMultiSort() throws Exception {
    assertU(adoc("id", "1", "group_s", "group1", "test_ti", "5", "test_tl", "10"));
    assertU(commit());
    assertU(adoc("id", "2", "group_s", "group1", "test_ti", "5", "test_tl", "1000"));
    assertU(adoc("id", "3", "group_s", "group1", "test_ti", "5", "test_tl", "1000"));
    assertU(adoc("id", "4", "group_s", "group1", "test_ti", "10", "test_tl", "100"));
    //
    assertU(adoc("id", "5", "group_s", "group2", "test_ti", "5", "test_tl", "10", "term_s", "YYYY"));
    assertU(commit());
    assertU(adoc("id", "6", "group_s", "group2", "test_ti", "5", "test_tl","1000"));
    assertU(adoc("id", "7", "group_s", "group2", "test_ti", "5", "test_tl","1000", "term_s", "XXXX"));
    assertU(adoc("id", "8", "group_s", "group2", "test_ti", "10","test_tl", "100"));
    assertU(commit());
    
    ModifiableSolrParams params;
    
    // group heads are selected using the same sort that is then applied to the final groups
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort=$sort}");
    params.add("sort", "test_ti asc, test_tl desc, id desc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/float[@name='id'][.='7.0']"
            ,"//result/doc[2]/float[@name='id'][.='3.0']"
            );
    
    // group heads are selected using a complex sort, simpler sort used for final groups
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='test_ti asc, test_tl desc, id desc'}");
    params.add("sort", "id asc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/float[@name='id'][.='3.0']"
            ,"//result/doc[2]/float[@name='id'][.='7.0']"
            );

    // diff up the sort directions, only first clause matters with our data
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='test_ti desc, test_tl asc, id asc'}");
    params.add("sort", "id desc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/float[@name='id'][.='8.0']"
            ,"//result/doc[2]/float[@name='id'][.='4.0']"
            );
    
    // tie broken by index order
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='test_tl desc'}");
    params.add("sort", "id desc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/float[@name='id'][.='6.0']"
            ,"//result/doc[2]/float[@name='id'][.='2.0']"
            );

    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)
    params = new ModifiableSolrParams();
    params.add("q", "*:* term_s:YYYY");
    params.add("fq", "{!collapse field=group_s sort='score desc, test_tl desc, test_ti asc, id asc'}");
    params.add("sort", "score asc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/float[@name='id'][.='2.0']"
            ,"//result/doc[2]/float[@name='id'][.='5.0']"
            );

    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic
    params = new ModifiableSolrParams();
    params.add("q", "*:* term_s:YYYY");
    params.add("fq", "{!collapse field=group_s sort='score desc, test_tl desc, test_ti asc, id asc'}");
    params.add("sort", "id desc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/float[@name='id'][.='5.0']"
            ,"//result/doc[2]/float[@name='id'][.='2.0']"
            );
    
    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='term_s desc, test_tl asc'}");
    params.add("sort", "id asc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/float[@name='id'][.='1.0']"
            ,"//result/doc[2]/float[@name='id'][.='5.0']"
            );

    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='term_s asc, test_tl asc'}");
    params.add("sort", "id asc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/float[@name='id'][.='1.0']"
            ,"//result/doc[2]/float[@name='id'][.='7.0']"
            );

    // collapse on int field
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=test_ti sort='term_s asc, group_s asc'}");
    params.add("sort", "id asc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/float[@name='id'][.='4.0']"
            ,"//result/doc[2]/float[@name='id'][.='7.0']"
            );
    
    // collapse on term_s (very sparse) with nullPolicy=collapse
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=term_s nullPolicy=collapse sort='test_ti asc, test_tl desc, id asc'}");
    params.add("sort", "test_tl asc, id asc");
    assertQ(req(params)
            , "*[count(//doc)=3]"
            ,"//result/doc[1]/float[@name='id'][.='5.0']"
            ,"//result/doc[2]/float[@name='id'][.='2.0']"
            ,"//result/doc[3]/float[@name='id'][.='7.0']"
            );
    
    // sort local param + elevation
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='term_s desc, test_tl asc'}");
    params.add("sort", "test_tl asc");
    params.add("qt", "/elevate");
    params.add("forceElevation", "true");
    params.add("elevateIds", "4.0");
    assertQ(req(params),
            "*[count(//doc)=2]",
            "//result/doc[1]/float[@name='id'][.='4.0']",
            "//result/doc[2]/float[@name='id'][.='5.0']");
    //
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='term_s desc, test_tl asc'}");
    params.add("sort", "test_tl asc");
    params.add("qt", "/elevate");
    params.add("forceElevation", "true");
    params.add("elevateIds", "7.0");
    assertQ(req(params),
            "*[count(//doc)=2]",
            "//result/doc[1]/float[@name='id'][.='7.0']",
            "//result/doc[2]/float[@name='id'][.='1.0']");

  }

