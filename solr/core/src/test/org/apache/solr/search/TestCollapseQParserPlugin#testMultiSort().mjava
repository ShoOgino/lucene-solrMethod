  public void testMultiSort() throws Exception {
    assertU(adoc("id", "1", "group_s", "group1", "test_i", "5", "test_l", "10"));
    assertU(commit());
    assertU(adoc("id", "2", "group_s", "group1", "test_i", "5", "test_l", "1000"));
    assertU(adoc("id", "3", "group_s", "group1", "test_i", "5", "test_l", "1000"));
    assertU(adoc("id", "4", "group_s", "group1", "test_i", "10", "test_l", "100"));
    //
    assertU(adoc("id", "5", "group_s", "group2", "test_i", "5", "test_l", "10", "term_s", "YYYY"));
    assertU(commit());
    assertU(adoc("id", "6", "group_s", "group2", "test_i", "5", "test_l","1000"));
    assertU(adoc("id", "7", "group_s", "group2", "test_i", "5", "test_l","1000", "term_s", "XXXX"));
    assertU(adoc("id", "8", "group_s", "group2", "test_i", "10","test_l", "100"));
    assertU(commit());
    
    ModifiableSolrParams params;
    
    // group heads are selected using the same sort that is then applied to the final groups
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort=$sort}");
    params.add("sort", "test_i asc, test_l desc, id_i desc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/str[@name='id'][.='7']"
            ,"//result/doc[2]/str[@name='id'][.='3']"
            );
    
    // group heads are selected using a complex sort, simpler sort used for final groups
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='test_i asc, test_l desc, id_i desc'}");
    params.add("sort", "id_i asc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/str[@name='id'][.='3']"
            ,"//result/doc[2]/str[@name='id'][.='7']"
            );

    // diff up the sort directions, only first clause matters with our data
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='test_i desc, test_l asc, id_i asc'}");
    params.add("sort", "id_i desc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/str[@name='id'][.='8']"
            ,"//result/doc[2]/str[@name='id'][.='4']"
            );
    
    // tie broken by index order
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='test_l desc'}");
    params.add("sort", "id_i desc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/str[@name='id'][.='6']"
            ,"//result/doc[2]/str[@name='id'][.='2']"
            );

    // score, then tiebreakers; note top level sort by score ASCENDING (just for weirdness)
    params = new ModifiableSolrParams();
    params.add("q", "*:* term_s:YYYY");
    params.add("fq", "{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id_i asc'}");
    params.add("sort", "score asc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/str[@name='id'][.='2']"
            ,"//result/doc[2]/str[@name='id'][.='5']"
            );

    // score, then tiebreakers; note no score in top level sort/fl to check needsScores logic
    params = new ModifiableSolrParams();
    params.add("q", "*:* term_s:YYYY");
    params.add("fq", "{!collapse field=group_s sort='score desc, test_l desc, test_i asc, id_i asc'}");
    params.add("sort", "id_i desc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/str[@name='id'][.='5']"
            ,"//result/doc[2]/str[@name='id'][.='2']"
            );
    
    // term_s desc -- term_s is missing from many docs, and uses sortMissingLast=true
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='term_s desc, test_l asc'}");
    params.add("sort", "id_i asc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/str[@name='id'][.='1']"
            ,"//result/doc[2]/str[@name='id'][.='5']"
            );

    // term_s asc -- term_s is missing from many docs, and uses sortMissingLast=true
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='term_s asc, test_l asc'}");
    params.add("sort", "id_i asc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/str[@name='id'][.='1']"
            ,"//result/doc[2]/str[@name='id'][.='7']"
            );

    // collapse on int field
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=test_i sort='term_s asc, group_s asc'}");
    params.add("sort", "id_i asc");
    assertQ(req(params)
            , "*[count(//doc)=2]"
            ,"//result/doc[1]/str[@name='id'][.='4']"
            ,"//result/doc[2]/str[@name='id'][.='7']"
            );
    
    // collapse on term_s (very sparse) with nullPolicy=collapse
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=term_s nullPolicy=collapse sort='test_i asc, test_l desc, id_i asc'}");
    params.add("sort", "test_l asc, id_i asc");
    assertQ(req(params)
            , "*[count(//doc)=3]"
            ,"//result/doc[1]/str[@name='id'][.='5']"
            ,"//result/doc[2]/str[@name='id'][.='2']"
            ,"//result/doc[3]/str[@name='id'][.='7']"
            );
    
    // sort local param + elevation
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='term_s desc, test_l asc'}");
    params.add("sort", "test_l asc");
    params.add("qt", "/elevate");
    params.add("forceElevation", "true");
    params.add("elevateIds", "4");
    assertQ(req(params),
            "*[count(//doc)=2]",
            "//result/doc[1]/str[@name='id'][.='4']",
            "//result/doc[2]/str[@name='id'][.='5']");
    //
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field=group_s sort='term_s desc, test_l asc'}");
    params.add("sort", "test_l asc");
    params.add("qt", "/elevate");
    params.add("forceElevation", "true");
    params.add("elevateIds", "7");
    assertQ(req(params),
            "*[count(//doc)=2]",
            "//result/doc[1]/str[@name='id'][.='7']",
            "//result/doc[2]/str[@name='id'][.='1']");

  }

