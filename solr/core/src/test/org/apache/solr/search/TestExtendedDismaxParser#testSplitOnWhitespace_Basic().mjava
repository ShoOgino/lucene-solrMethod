  @Test
  public void testSplitOnWhitespace_Basic() throws Exception {
    // The "text_sw" field has synonyms loaded from synonyms.txt

    // retrieve the single document containing literal "wifi"
    assertJQ(req("qf","text_sw title", "defType","edismax", "q","wifi", "sow","true")
        , "/response/numFound==1"
        , "/response/docs/[0]/id=='72'"
    );

    // trigger the "wi fi => wifi" synonym
    assertJQ(req("qf", "text_sw title", "defType","edismax", "q","wi fi", "sow","false")
        , "/response/numFound==1"
        , "/response/docs/[0]/id=='72'"
    );
    assertJQ(req("qf", "text_sw title", "defType","edismax", "q","wi fi", "sow","true")
        , "/response/numFound==0"
    );
    assertJQ(req("qf","text_sw title", "defType","edismax", "q","wi fi") // default sow=true
        , "/response/numFound==0"
    );

    assertJQ(req("qf","text_sw title", "q","{!edismax sow=false}wi fi")
        , "/response/numFound==1"
        , "/response/docs/[0]/id=='72'"
    );
    assertJQ(req("df", "text_sw title", "q","{!edismax sow=true}wi fi")
        , "/response/numFound==0"
    );
    assertJQ(req("df", "text_sw title", "q", "{!edismax}wi fi") // default sow=true
        , "/response/numFound==0"
    );

    assertQ(req("qf", "name title", 
                "q", "barking curds of stigma",
                "defType", "edismax",
                "sow", "false",
                "debugQuery", "true"),
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:barking | title:barking))')]",
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:curds | title:curds))')]",
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:of | title:of))')]",
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:stigma | title:stigma))')]"
    );
    assertQ(req("qf", "name title",
        "q", "barking curds of stigma",
        "defType", "edismax",
        "sow", "true",
        "debugQuery", "true"),
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:barking | title:barking))')]",
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:curds | title:curds))')]",
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:of | title:of))')]",
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:stigma | title:stigma))')]"
    );
    assertQ(req("qf", "name title",
        "q", "barking curds of stigma",
        "defType", "edismax",
        "debugQuery", "true"), // Default sow=true
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:barking | title:barking))')]",
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:curds | title:curds))')]",
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:of | title:of))')]",
        "//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((name:stigma | title:stigma))')]"
    );
  }

