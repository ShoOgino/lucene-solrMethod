  /**
   * Test standard query parsers registered in {@link org.apache.solr.search.QParserPlugin#standardPlugins}
   * have NAME field which is final, static, and matches the registered name.
   */
  @Test
  public void testRegisteredName() throws Exception {
    List<String> notStatic = new ArrayList<>(QParserPlugin.standardPlugins.size());
    List<String> notFinal = new ArrayList<>(QParserPlugin.standardPlugins.size());
    List<String> mismatch = new ArrayList<>(QParserPlugin.standardPlugins.size());

    for (Map.Entry<String, QParserPlugin> pair : QParserPlugin.standardPlugins.entrySet()) {
      String regName = pair.getKey();
      Class<? extends QParserPlugin> clazz = pair.getValue().getClass();;

      Field nameField = clazz.getField(FIELD_NAME);
      int modifiers = nameField.getModifiers();
      if (!Modifier.isFinal(modifiers)) {
        notFinal.add(clazz.getName());
      }
      if (!Modifier.isStatic(modifiers)) {
        notStatic.add(clazz.getName());
      } else if (! regName.equals(nameField.get(null))) {
        mismatch.add(regName +" != "+ nameField.get(null) +"("+ clazz.getName() +")");
      }
    }

    assertTrue("All standard QParsers must have final NAME, broken: " + notFinal, 
               notFinal.isEmpty());
    assertTrue("All standard QParsers must have static NAME, broken: " + notStatic, 
               notStatic.isEmpty());
    assertTrue("All standard QParsers must be registered using NAME, broken: " + mismatch, 
               mismatch.isEmpty());

    assertTrue("DEFAULT_QTYPE is not in the standard set of registered names: " + 
               QParserPlugin.DEFAULT_QTYPE,
        QParserPlugin.standardPlugins.keySet().contains(QParserPlugin.DEFAULT_QTYPE));

  }

