  private void testRptWithGeometryField(String fieldName) throws Exception {
    assertU(adoc("id", "0", fieldName, "ENVELOPE(-10, 20, 15, 10)"));
    assertU(adoc("id", "1", fieldName, "BUFFER(POINT(-10 15), 5)"));//circle at top-left corner
    assertU(optimize("maxSegments", "1"));// one segment.
    assertU(commit());

    // Search to the edge but not quite touching the indexed envelope of id=0.  It requires geom validation to
    //  eliminate id=0.  id=1 is found and doesn't require validation.  cache=false means no query cache.
    final SolrQueryRequest sameReq = req(
        "q", "{!cache=false field f=" + fieldName + "}Intersects(ENVELOPE(-20, -10.0001, 30, 15.0001))",
        "sort", "id asc");
    assertJQ(sameReq, "/response/numFound==1", "/response/docs/[0]/id=='1'");

    // The tricky thing is verifying the cache works correctly...

    MetricsMap cacheMetrics = (MetricsMap) ((SolrMetricManager.GaugeWrapper)h.getCore().getCoreMetricManager().getRegistry().getMetrics().get("CACHE.searcher.perSegSpatialFieldCache_" + fieldName)).getGauge();
    assertEquals("1", cacheMetrics.getValue().get("cumulative_inserts").toString());
    assertEquals("0", cacheMetrics.getValue().get("cumulative_hits").toString());

    // Repeat the query earlier
    assertJQ(sameReq, "/response/numFound==1", "/response/docs/[0]/id=='1'");
    assertEquals("1", cacheMetrics.getValue().get("cumulative_hits").toString());

    assertEquals("1 segment",
        1, getSearcher().getRawReader().leaves().size());
    // Get key of first leaf reader -- this one contains the match for sure.
    Object leafKey1 = getFirstLeafReaderKey();

    // add new segment
    assertU(adoc("id", "3"));

    assertU(commit()); // sometimes merges (to one seg), sometimes won't

    // can still find the same document
    assertJQ(sameReq, "/response/numFound==1", "/response/docs/[0]/id=='1'");

    // When there are new segments, we accumulate another hit. This tests the cache was not blown away on commit.
    // Checking equality for the first reader's cache key indicates whether the cache should still be valid.
    Object leafKey2 = getFirstLeafReaderKey();
    assertEquals(leafKey1.equals(leafKey2) ? "2" : "1", cacheMetrics.getValue().get("cumulative_hits").toString());


    // Now try to see if heatmaps work:
    assertJQ(req("q", "*:*", "facet", "true", FacetParams.FACET_HEATMAP, fieldName, "json.nl", "map"),
        "/facet_counts/facet_heatmaps/" + fieldName + "/minX==-180.0");

  }

