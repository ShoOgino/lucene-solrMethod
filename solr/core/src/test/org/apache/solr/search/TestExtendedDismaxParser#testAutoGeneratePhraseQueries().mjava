  public void testAutoGeneratePhraseQueries() throws Exception {
    ModifiableSolrParams noSowParams = new ModifiableSolrParams();
    noSowParams.add("df", "text");
    ModifiableSolrParams sowFalseParams = new ModifiableSolrParams();
    sowFalseParams.add("sow", "false");
    sowFalseParams.add("df", "text");
    ModifiableSolrParams sowTrueParams = new ModifiableSolrParams();
    sowTrueParams.add("sow", "true");
    sowTrueParams.add("df", "text");

    // From synonyms.txt:
    //
    //     crow blackbird, grackle

    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {
      try (SolrQueryRequest req = req(params)) {
        QParser qParser = QParser.getParser("text:grackle", "edismax", req); // "text" has autoGeneratePhraseQueries="true"
        Query q = qParser.getQuery();
        assertEquals("+(text:\"crow blackbird\" text:grackl)", q.toString());
      }
    }
    try (SolrQueryRequest req = req(sowTrueParams)) {
      QParser qParser = QParser.getParser("text:grackle", "edismax", req);
      Query q = qParser.getQuery();
      assertEquals("+spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])", q.toString());
    }
    for (SolrParams params : Arrays.asList(noSowParams, sowTrueParams, sowFalseParams)) {
      try (SolrQueryRequest req = req(params)) {
        QParser qParser = QParser.getParser("text_sw:grackle", "edismax", req); // "text_sw" doesn't specify autoGeneratePhraseQueries => default false
        Query q = qParser.getQuery();
        assertEquals("+((+text_sw:crow +text_sw:blackbird) text_sw:grackl)", q.toString());
      }
    }

    Stream.of(noSowParams, sowTrueParams, sowFalseParams).forEach(p->p.add("qf", "text text_sw"));

    for (SolrParams params : Arrays.asList(noSowParams, sowFalseParams)) {
      try (SolrQueryRequest req = req(params)) {
        QParser qParser = QParser.getParser("grackle", "edismax", req);
        Query q = qParser.getQuery();
        assertEquals("+((text:\"crow blackbird\" text:grackl)"
                + " | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))",
            q.toString());

        qParser = QParser.getParser("grackle wi fi", "edismax", req);
        q = qParser.getQuery();
        assertEquals("+(((text:\"crow blackbird\" text:grackl) text:wifi)"
                + " | (((+text_sw:crow +text_sw:blackbird) text_sw:grackl) text_sw:wifi))",
            q.toString());
      }
    }
    
    try (SolrQueryRequest req = req(sowTrueParams)) {
      QParser qParser = QParser.getParser("grackle", "edismax", req);
      Query q = qParser.getQuery();
      assertEquals("+(spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])"
              + " | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl))",
          q.toString());

      qParser = QParser.getParser("grackle wi fi", "edismax", req);
      q = qParser.getQuery();
      assertEquals("+((spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])"
              + " | ((+text_sw:crow +text_sw:blackbird) text_sw:grackl)) (text:wi | text_sw:wi) (text:fi | text_sw:fi))",
          q.toString());
    }
  }

