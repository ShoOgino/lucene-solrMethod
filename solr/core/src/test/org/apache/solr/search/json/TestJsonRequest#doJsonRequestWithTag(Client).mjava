  public static void doJsonRequestWithTag(Client client) throws Exception {
    addDocs(client);

    try {
      client.testJQ( params("json","{" +
          " query : '*:*'," +
          " filter : { \"RCAT\" : \"cat_s:A OR ignore_exception\" }" + // without the pound, the tag would be interpreted as a query type
          "}", "json.facet", "{" +
          "categories:{ type:terms, field:cat_s, domain:{excludeTags:\"RCAT\"} }  " +
          "}"), "facets=={ count:2, " +
          " categories:{ buckets:[ {val:B, count:3}, {val:A, count:2} ]  }" +
          "}"
      );
      fail("no # no tag");
    } catch (Exception e) {
      // This is just the current mode of failure.  It's fine if it fails a different way (with a 400 error) in the future.
      assertTrue(e.getMessage().contains("expect a json object"));
    }

    final String taggedQ = "{" +
            " \"#RCAT\" : " + (random().nextBoolean() ? 
                "{" +
                "     term : {" +
                "       f : cat_s," +
                "       v : A" +
                "     } " +
                "   } " 
            : "\"cat_s:A\"")+
            " } ";
    boolean queryAndFilter = random().nextBoolean() ;
    client.testJQ(params("json", "{" +
        " query :" + ( queryAndFilter ? " '*:*', filter : " : "")
        + (!queryAndFilter || random().nextBoolean() ? taggedQ : "["+taggedQ+"]" )+
        "}", "json.facet", "{" +
        "categories:{ type:terms, field:cat_s, domain:{excludeTags:\"RCAT\"} }  " +
        "}"), "facets=={ count:2, " +
        " categories:{ buckets:[ {val:B, count:3}, {val:A, count:2} ]  }" +
        "}"
    );

    client.testJQ( params("json","{" +
        " query : '*:*'," +
        " filter : {" +
        "  term : {" +
        "   f : cat_s," +
        "   v : A" +
        "  } " +
        " } " +
        "}", "json.facet", "{" +
        "categories:{ type:terms, field:cat_s"
        +( random().nextBoolean() ? ", domain:{excludeTags:\"RCAT\"} ": " ")
        + "}  " +
        "}"), "facets=={ count:2, " +
        " categories:{ buckets:[ {val:A, count:2} ] }" +
        "}"
    );

    client.testJQ( params("json","{" +
        " query : '*:*'," +
        " filter : {" +
        "   \"#RCAT\" : {" +
        "     term : {" +
        "       f : cat_s," +
        "       v : A" +
        "     } " +
        "   } " +
        " } " +
        "}", "json.facet", "{" +
        "categories:{ type:terms, field:cat_s }  " +
        "}"), "facets=={ count:2, " +
        " categories:{ buckets:[ {val:A, count:2} ] }" +
        "}"
    );

    boolean multiTag = random().nextBoolean();
    client.testJQ(params("json", "{" +
            " query : '*:*'," +
            " filter : [" +
            "{ \"#RCAT"+(multiTag ? ",RCATSECONDTAG":"") + "\" :  \"cat_s:A\" }," +
            "{ \"#RWHERE\" : {" +
            "     term : {" +
            "       f : where_s," +
            "       v : NY" +
            "     } " +
            "   }" +
            "}]}"
        , "json.facet", "{" +
            "categories:{ type:terms, field:cat_s, domain:{excludeTags:\"RCAT\"} }  " +
            "countries:{ type:terms, field:where_s, domain:{excludeTags:\"RWHERE\"} }  " +
            "ids:{ type:terms, field:id, domain:{excludeTags:[\""+ (multiTag ? "RCATSECONDTAG":"RCAT")+ "\", \"RWHERE\"]} }  " +
            "}"), "facets==" + "{\n" +
        "    \"count\":1,\n" +
        "    \"categories\":{\n" +
        "      \"buckets\":[{\n" +
        "          \"val\":\"A\",\n" +
        "          \"count\":1},\n" +
        "        {\n" +
        "          \"val\":\"B\",\n" +
        "          \"count\":1}]},\n" +
        "    \"countries\":{\n" +
        "      \"buckets\":[{\n" +
        "          \"val\":\"NJ\",\n" +
        "          \"count\":1},\n" +
        "        {\n" +
        "          \"val\":\"NY\",\n" +
        "          \"count\":1}]},\n" +
        "    \"ids\":{\n" +
        "      \"buckets\":[{\n" +
        "          \"val\":\"1\",\n" +
        "          \"count\":1},\n" +
        "        {\n" +
        "          \"val\":\"2\",\n" +
        "          \"count\":1},\n" +
        "        {\n" +
        "          \"val\":\"3\",\n" +
        "          \"count\":1},\n" +
        "        {\n" +
        "          \"val\":\"4\",\n" +
        "          \"count\":1},\n" +
        "        {\n" +
        "          \"val\":\"5\",\n" +
        "          \"count\":1},\n" +
        "        {\n" +
        "          \"val\":\"6\",\n" +
        "          \"count\":1}]}}}"
    );
  }

