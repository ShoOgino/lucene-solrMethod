  @Test
  public void testRangeFacetsErrorCases() throws Exception {
    Client client = Client.localClient();
    client.deleteByQuery("*:*", null);
    indexSimple(client);

    SolrParams params = params("q", "*:*", "rows", "0");

    // invalid format for ranges
    SolrException ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i,start:-10,end:10,gap:2," +
            "ranges:[{key:\"0-200\", to:200}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertEquals("Cannot set gap/start/end and ranges params together", ex.getMessage());

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:bleh}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertTrue(ex.getMessage().contains("Expected List for ranges but got String"));

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[bleh]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertTrue(ex.getMessage().contains("Expected Map for range but got String"));

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{from:0, to:200, inclusive_to:bleh}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertTrue(ex.getMessage().contains("Expected boolean type for param 'inclusive_to' but got String"));

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{from:0, to:200, inclusive_from:bleh}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertTrue(ex.getMessage().contains("Expected boolean type for param 'inclusive_from' but got String"));

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{from:bleh, to:200}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertEquals("Can't parse value bleh for field: num_i", ex.getMessage());

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{from:0, to:bleh}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertEquals("Can't parse value bleh for field: num_i", ex.getMessage());

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{from:200, to:0}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertEquals("'from' is higher than 'to' in range for key: [200,0)", ex.getMessage());

    // with old format
    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{range:\"\"}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertTrue(ex.getMessage().contains("empty facet range"));

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{range:\"bl\"}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertTrue(ex.getMessage().contains("Invalid start character b in facet range bl"));

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{range:\"(bl\"}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertTrue(ex.getMessage().contains("Invalid end character l in facet range (bl"));

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{range:\"(bleh,12)\"}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertEquals("Can't parse value bleh for field: num_i", ex.getMessage());

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{range:\"(12,bleh)\"}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertEquals("Can't parse value bleh for field: num_i", ex.getMessage());

    ex = expectThrows(SolrException.class,
        () -> h.query(req(params, "json.facet", "{price:{type :range, field : num_i," +
            "ranges:[{range:\"(200,12)\"}]}}"))
    );
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());
    assertEquals("'start' is higher than 'end' in range for key: (200,12)", ex.getMessage());
  }

