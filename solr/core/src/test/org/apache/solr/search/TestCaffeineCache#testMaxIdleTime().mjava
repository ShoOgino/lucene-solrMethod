  @Test
  public void testMaxIdleTime() throws Exception {
    int IDLE_TIME_SEC = 5;
    CountDownLatch removed = new CountDownLatch(1);
    AtomicReference<RemovalCause> removalCause = new AtomicReference<>();
    CaffeineCache<String, String> cache = new CaffeineCache<>() {
      @Override
      public void onRemoval(String key, String value, RemovalCause cause) {
        super.onRemoval(key, value, cause);
        removalCause.set(cause);
        removed.countDown();
      }
    };
    Map<String, String> params = new HashMap<>();
    params.put("size", "6");
    params.put("maxIdleTime", "" + IDLE_TIME_SEC);
    cache.init(params, null, new NoOpRegenerator());

    cache.put("foo", "bar");
    assertEquals("bar", cache.get("foo"));
    // sleep for at least the idle time before inserting other entries
    // the eviction is piggy-backed on put()
    Thread.sleep(TimeUnit.SECONDS.toMillis(IDLE_TIME_SEC * 2));
    cache.put("abc", "xyz");
    boolean await = removed.await(30, TimeUnit.SECONDS);
    assertTrue("did not expire entry in in time", await);
    assertEquals(RemovalCause.EXPIRED, removalCause.get());
    assertNull(cache.get("foo"));
  }

