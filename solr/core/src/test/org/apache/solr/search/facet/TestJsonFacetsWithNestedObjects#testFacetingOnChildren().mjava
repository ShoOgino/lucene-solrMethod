  /**
   * Example from http://yonik.com/solr-nested-objects/
   * Now lets say we’re displaying the top sci-fi and fantasy books,
   * and we want to find out who reviews the most books out of our selection.
   * Since our root implicit facet bucket (formed by the query and filters)
   * consists of parent documents (books),
   * we need to switch the facet domain to the children for the author facet.
   *
   * Note that regardless of which direction we are mapping
   * (parents to children or children to parents),
   * we provide a query that defines the complete set of parents in the index.
   * In these examples, the parent filter is “type_s:book”.
   */
  @Test
  public void testFacetingOnChildren() throws Exception {
    final Client client = Client.localClient();
    ModifiableSolrParams p = params("rows","10");
    client.testJQ(params(p, "q", "cat_s:(sci-fi OR fantasy)", "fl", "id", "fl" , "title_t"
        , "json.facet", "{" +
            "  top_reviewers: {" +
            "    type:terms," +
            "    field:author_s," +
            "    domain: { blockChildren : \"type_s:book\" }" +
            "  }" +
            "}"
        )
        , "response=={numFound:2,start:0,'numFoundExact':true,docs:[" +
            "      {id:book1," +
            "        title_t:\"The Way of Kings\"}," +
            "      {id:book2," +
            "        title_t:\"Snow Crash\"}]}"
        , "facets=={ count:2," +
            "top_reviewers:{buckets:[ {val:dan,     count:2}," +
            "                         {val:yonik,   count:2}," +
            "                         {val:mary,    count:1} ]}}"
    );
  }

