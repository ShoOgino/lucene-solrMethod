  private void testCollapseQueries(String group, String hint, boolean numeric) throws Exception {

    String[] doc = {"id","1", "term_s", "YYYY", group, "1", "test_i", "5", "test_l", "10", "test_f", "2000"};
    assertU(adoc(doc));
    assertU(commit());
    String[] doc1 = {"id","2", "term_s","YYYY", group, "1", "test_i", "50", "test_l", "100", "test_f", "200"};
    assertU(adoc(doc1));



    String[] doc2 = {"id","3", "term_s", "YYYY", "test_i", "5000", "test_l", "100", "test_f", "200"};
    assertU(adoc(doc2));
    assertU(commit());
    String[] doc3 = {"id","4", "term_s", "YYYY", "test_i", "500", "test_l", "1000", "test_f", "2000"};
    assertU(adoc(doc3));


    String[] doc4 = {"id","5", "term_s", "YYYY", group, "2", "test_i", "4", "test_l", "10", "test_f", "2000"};
    assertU(adoc(doc4));
    assertU(commit());
    String[] doc5 = {"id","6", "term_s","YYYY", group, "2", "test_i", "10", "test_l", "100", "test_f", "200"};
    assertU(adoc(doc5));
    assertU(commit());

    String[] doc6 = {"id","7", "term_s", "YYYY", group, "1", "test_i", "8", "test_l", "50", "test_f", "300"};
    assertU(adoc(doc6));
    assertU(commit());


    //Test collapse by score and following sort by score
    ModifiableSolrParams params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+""+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    assertQ(req(params, "indent", "on"), "*[count(//doc)=2]",
                       "//result/doc[1]/str[@name='id'][.='2']",
                       "//result/doc[2]/str[@name='id'][.='6']"
        );


    // SOLR-5544 test ordering with empty sort param
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" nullPolicy=expand min=test_f"+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("sort","");
    assertQ(req(params), "*[count(//doc)=4]",
        "//result/doc[1]/str[@name='id'][.='3']",
        "//result/doc[2]/str[@name='id'][.='4']",
        "//result/doc[3]/str[@name='id'][.='2']",
        "//result/doc[4]/str[@name='id'][.='6']"
    );

    // Test value source collapse criteria
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" nullPolicy=collapse min=field(test_i)"+hint+"}");
    params.add("sort", "test_i desc");
    assertQ(req(params), "*[count(//doc)=3]",
        "//result/doc[1]/str[@name='id'][.='4']",
        "//result/doc[2]/str[@name='id'][.='1']",
        "//result/doc[3]/str[@name='id'][.='5']"
    );

    // Test value source collapse criteria with cscore function
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" nullPolicy=collapse min=cscore()"+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    assertQ(req(params), "*[count(//doc)=3]",
        "//result/doc[1]/str[@name='id'][.='4']",
        "//result/doc[2]/str[@name='id'][.='1']",
        "//result/doc[3]/str[@name='id'][.='5']"
    );
    
    // Test value source collapse criteria with cscore function but no top level score sort
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" nullPolicy=collapse min=cscore()"+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("fl", "id");
    params.add("sort", "id_i desc");
    assertQ(req(params), "*[count(//doc)=3]",
        "//result/doc[1]/str[@name='id'][.='5']",
        "//result/doc[2]/str[@name='id'][.='4']",
        "//result/doc[3]/str[@name='id'][.='1']"
    );

    // Test value source collapse criteria with compound cscore function
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" nullPolicy=collapse min=sum(cscore(),field(test_i))"+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    assertQ(req(params), "*[count(//doc)=3]",
        "//result/doc[1]/str[@name='id'][.='4']",
        "//result/doc[2]/str[@name='id'][.='1']",
        "//result/doc[3]/str[@name='id'][.='5']"
    );

    //Test collapse by score with elevation

    params = new ModifiableSolrParams();
    params.add("q", "YYYY");
    params.add("fq", "{!collapse field="+group+" nullPolicy=collapse"+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("qf", "term_s");
    params.add("qt", "/elevate");
    assertQ(req(params), "*[count(//doc)=4]",
                         "//result/doc[1]/str[@name='id'][.='1']",
                         "//result/doc[2]/str[@name='id'][.='2']",
                         "//result/doc[3]/str[@name='id'][.='3']",
                         "//result/doc[4]/str[@name='id'][.='6']");

    //Test SOLR-5773 with score collapse criteria
    // try both default & sort localparams as alternate ways to ask for max score
    for (String maxscore : new String[] {"  ", " sort='score desc' "}) {
      params = new ModifiableSolrParams();
      params.add("q", "YYYY");
      params.add("fq", "{!collapse field="+group + maxscore + " nullPolicy=collapse"+hint+"}");
      params.add("defType", "edismax");
      params.add("bf", "field(test_i)");
      params.add("qf", "term_s");
      params.add("qt", "/elevate");
      params.add("elevateIds", "1,5");
      assertQ(req(params), "*[count(//doc)=3]",
              "//result/doc[1]/str[@name='id'][.='1']",
              "//result/doc[2]/str[@name='id'][.='5']",
              "//result/doc[3]/str[@name='id'][.='3']");
    }
    
    //Test SOLR-5773 with max field collapse criteria
    // try both max & sort localparams as alternate ways to ask for max group head
    for (String max : new String[] {" max=test_i ", " sort='test_i desc' "}) {
      params = new ModifiableSolrParams();
      params.add("q", "YYYY");
      params.add("fq", "{!collapse field=" + group + max + "nullPolicy=collapse"+hint+"}");
      params.add("defType", "edismax");
      params.add("bf", "field(test_i)");
      params.add("qf", "term_s");
      params.add("qt", "/elevate");
      params.add("elevateIds", "1,5");
      assertQ(req(params), "*[count(//doc)=3]",
              "//result/doc[1]/str[@name='id'][.='1']",
              "//result/doc[2]/str[@name='id'][.='5']",
              "//result/doc[3]/str[@name='id'][.='3']");
    }
    
    //Test SOLR-5773 with min field collapse criteria
    // try both min & sort localparams as alternate ways to ask for min group head
    for (String min : new String[] {" min=test_i ", " sort='test_i asc' "}) {
      params = new ModifiableSolrParams();
      params.add("q", "YYYY");
      params.add("fq", "{!collapse field=" + group + min + "nullPolicy=collapse"+hint+"}");
      params.add("defType", "edismax");
      params.add("bf", "field(test_i)");
      params.add("qf", "term_s");
      params.add("qt", "/elevate");
      params.add("elevateIds", "1,5");
      assertQ(req(params), "*[count(//doc)=3]",
              "//result/doc[1]/str[@name='id'][.='1']",
              "//result/doc[2]/str[@name='id'][.='5']",
              "//result/doc[3]/str[@name='id'][.='4']");
    }
    
    //Test SOLR-5773 elevating documents with null group
    params = new ModifiableSolrParams();
    params.add("q", "YYYY");
    params.add("fq", "{!collapse field="+group+""+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("qf", "term_s");
    params.add("qt", "/elevate");
    params.add("elevateIds", "3,4");
    assertQ(req(params), "*[count(//doc)=4]",
        "//result/doc[1]/str[@name='id'][.='3']",
        "//result/doc[2]/str[@name='id'][.='4']",
        "//result/doc[3]/str[@name='id'][.='2']",
        "//result/doc[4]/str[@name='id'][.='6']");


    // Non trivial sort local param for picking group head
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" nullPolicy=collapse sort='term_s asc, test_i asc' "+hint+"}");
    params.add("sort", "id_i desc");
    assertQ(req(params),
            "*[count(//doc)=3]",
            "//result/doc[1]/str[@name='id'][.='5']",
            "//result/doc[2]/str[@name='id'][.='4']",
            "//result/doc[3]/str[@name='id'][.='1']"
    );
    // 
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" nullPolicy=collapse sort='term_s asc, test_i desc' "+hint+"}");
    params.add("sort", "id_i desc");
    assertQ(req(params),
            "*[count(//doc)=3]",
            "//result/doc[1]/str[@name='id'][.='6']",
            "//result/doc[2]/str[@name='id'][.='3']",
            "//result/doc[3]/str[@name='id'][.='2']"
    );
    


    // Test collapse by min int field and top level sort
    // try both min & sort localparams as alternate ways to ask for min group head
    for (String min : new String[] {" min=test_i ", " sort='test_i asc' "}) {
      params = new ModifiableSolrParams();
      params.add("q", "*:*");
      params.add("fq", "{!collapse field="+group + min + hint+"}");
      params.add("sort", "id_i desc");
      assertQ(req(params),
              "*[count(//doc)=2]",
              "//result/doc[1]/str[@name='id'][.='5']",
              "//result/doc[2]/str[@name='id'][.='1']");

      params = new ModifiableSolrParams();
      params.add("q", "*:*");
      params.add("fq", "{!collapse field="+group + min + hint+"}");
      params.add("sort", "id_i asc");
      assertQ(req(params),
              "*[count(//doc)=2]",
              "//result/doc[1]/str[@name='id'][.='1']",
              "//result/doc[2]/str[@name='id'][.='5']");
      
      params = new ModifiableSolrParams();
      params.add("q", "*:*");
      params.add("fq", "{!collapse field="+group + min + hint+"}");
      params.add("sort", "test_l asc,id_i desc");
      assertQ(req(params),
              "*[count(//doc)=2]",
              "//result/doc[1]/str[@name='id'][.='5']",
              "//result/doc[2]/str[@name='id'][.='1']");

      params = new ModifiableSolrParams();
      params.add("q", "*:*");
      params.add("fq", "{!collapse field="+group + min + hint+"}");
      params.add("sort", "score desc,id_i asc");
      params.add("defType", "edismax");
      params.add("bf", "field(id_i)");
      assertQ(req(params),
              "*[count(//doc)=2]",
              "//result/doc[1]/str[@name='id'][.='5']",
              "//result/doc[2]/str[@name='id'][.='1']");
    }


    //Test collapse by max int field
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" max=test_i"+hint+"}");
    params.add("sort", "test_i asc");
    assertQ(req(params), "*[count(//doc)=2]",
                         "//result/doc[1]/str[@name='id'][.='6']",
                         "//result/doc[2]/str[@name='id'][.='2']"
        );

    try {
      //Test collapse by min long field
      params = new ModifiableSolrParams();
      params.add("q", "*:*");
      params.add("fq", "{!collapse field="+group+" min=test_l"+hint+"}");
      params.add("sort", "test_i desc");
      assertQ(req(params), "*[count(//doc)=2]",
          "//result/doc[1]/str[@name='id'][.='1']",
          "//result/doc[2]/str[@name='id'][.='5']");


      //Test collapse by max long field
      params = new ModifiableSolrParams();
      params.add("q", "*:*");
      params.add("fq", "{!collapse field="+group+" max=test_l"+hint+"}");
      params.add("sort", "test_i desc");
      assertQ(req(params), "*[count(//doc)=2]",
                           "//result/doc[1]/str[@name='id'][.='2']",
                           "//result/doc[2]/str[@name='id'][.='6']");
    } catch (Exception e) {
      if(!numeric) {
        throw e;
      }
    }


    //Test collapse by min float field
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" min=test_f"+hint+"}");
    params.add("sort", "test_i desc");
    assertQ(req(params), "*[count(//doc)=2]",
                         "//result/doc[1]/str[@name='id'][.='2']",
                         "//result/doc[2]/str[@name='id'][.='6']");

    //Test collapse by min float field
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" max=test_f"+hint+"}");
    params.add("sort", "test_i asc");
    assertQ(req(params), "*[count(//doc)=2]",
                         "//result/doc[1]/str[@name='id'][.='5']",
                         "//result/doc[2]/str[@name='id'][.='1']");

    //Test collapse by min float field sort by score
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" max=test_f"+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(id_i)");
    params.add("fl", "score, id");
    params.add("facet","true");
    params.add("fq", "{!tag=test}term_s:YYYY");
    params.add("facet.field", "{!ex=test}term_s");

    assertQ(req(params), "*[count(//doc)=2]",
        "//result/doc[1]/str[@name='id'][.='5']",
        "//result/doc[2]/str[@name='id'][.='1']");
    
    // Test collapse using selector field in no docs
    // tie selector in all of these cases
    for (String selector : new String[] {
        " min=bogus_i ", " sort='bogus_i asc' ",
        " max=bogus_i ", " sort='bogus_i desc' ",
        " min=bogus_tf ", " sort='bogus_tf asc' ",
        " max=bogus_tf ", " sort='bogus_tf desc' ",
        " sort='bogus_td asc' ", " sort='bogus_td desc' ",
        " sort='bogus_s asc' ", " sort='bogus_s desc' ", 
      }) {
      params = new ModifiableSolrParams();
      params.add("q", "*:*");
      params.add("fq", "{!collapse field="+group + selector + hint+"}");
      params.add("sort", group + " asc");
      assertQ(req(params),
              "*[count(//doc)=2]",
              // since selector is bogus, group head is undefined
              // (should be index order, but don't make absolute assumptions: segments may be re-ordered)
              // key assertion is that there is one doc from each group & groups are in order
              "//result/doc[1]/*[@name='"+group+"'][starts-with(.,'1')]",
              "//result/doc[2]/*[@name='"+group+"'][starts-with(.,'2')]");
    }
    
    // attempting to use cscore() in sort local param should fail
    assertQEx("expected error trying to sort on a function that includes cscore()",
              req(params("q", "{!func}sub(sub(test_l,1000),id_i)",
                         "fq", "{!collapse field="+group+" sort='abs(cscore()) asc, id_i asc'}",
                         "sort", "score asc")),
              SolrException.ErrorCode.BAD_REQUEST);
    
    // multiple params for picking groupHead should all fail
    for (String bad : new String[] {
        "{!collapse field="+group+" min=test_f max=test_f}",
        "{!collapse field="+group+" min=test_f sort='test_f asc'}",
        "{!collapse field="+group+" max=test_f sort='test_f asc'}" }) {
      assertQEx("Expected error: " + bad, req(params("q", "*:*", "fq", bad)),
                SolrException.ErrorCode.BAD_REQUEST);
    }

    // multiple params for picking groupHead should work as long as only one is non-null
    // sort used
    for (SolrParams collapse : new SolrParams[] {
        // these should all be equally valid
        params("fq", "{!collapse field="+group+" nullPolicy=collapse sort='test_i asc'"+hint+"}"),
        params("fq", "{!collapse field="+group+" nullPolicy=collapse min='' sort='test_i asc'"+hint+"}"),
        params("fq", "{!collapse field="+group+" nullPolicy=collapse max='' sort='test_i asc'"+hint+"}"),
        params("fq", "{!collapse field="+group+" nullPolicy=collapse min=$x sort='test_i asc'"+hint+"}"),
        params("fq", "{!collapse field="+group+" nullPolicy=collapse min=$x sort='test_i asc'"+hint+"}",
               "x",""),
      }) {
      
      assertQ(req(collapse, "q", "*:*", "sort", "test_i desc"),
              "*[count(//doc)=3]",
              "//result/doc[1]/str[@name='id'][.='4']",
              "//result/doc[2]/str[@name='id'][.='1']",
              "//result/doc[3]/str[@name='id'][.='5']");
    }
    

    //Test nullPolicy expand
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" max=test_f nullPolicy=expand"+hint+"}");
    params.add("sort", "id_i desc");
    assertQ(req(params), "*[count(//doc)=4]",
        "//result/doc[1]/str[@name='id'][.='5']",
        "//result/doc[2]/str[@name='id'][.='4']",
        "//result/doc[3]/str[@name='id'][.='3']",
        "//result/doc[4]/str[@name='id'][.='1']");

    //Test nullPolicy collapse
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+" max=test_f nullPolicy=collapse"+hint+"}");
    params.add("sort", "id_i desc");
    assertQ(req(params), "*[count(//doc)=3]",
        "//result/doc[1]/str[@name='id'][.='5']",
        "//result/doc[2]/str[@name='id'][.='4']",
        "//result/doc[3]/str[@name='id'][.='1']");


    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+hint+"}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("fq","{!tag=test_i}id:5");
    params.add("facet","true");
    params.add("facet.field","{!ex=test_i}test_i");
    params.add("facet.mincount", "1");
    assertQ(req(params), "*[count(//doc)=1]", "*[count(//lst[@name='facet_fields']/lst[@name='test_i']/int)=2]");

    // SOLR-5230 - ensure CollapsingFieldValueCollector.finish() is called
    params = new ModifiableSolrParams();
    params.add("q", "*:*");
    params.add("fq", "{!collapse field="+group+hint+"}");
    params.add("group", "true");
    params.add("group.field", "id");
    assertQ(req(params), "*[count(//doc)=2]");


    // delete the elevated docs, confirm collapsing still works
    assertU(delI("1"));
    assertU(delI("2"));
    assertU(commit());
    params = new ModifiableSolrParams();
    params.add("q", "YYYY");
    params.add("fq", "{!collapse field="+group+hint+" nullPolicy=collapse}");
    params.add("defType", "edismax");
    params.add("bf", "field(test_i)");
    params.add("qf", "term_s");
    params.add("qt", "/elevate");
    assertQ(req(params), "*[count(//doc)=3]",
                         "//result/doc[1]/str[@name='id'][.='3']",
                         "//result/doc[2]/str[@name='id'][.='6']",
                         "//result/doc[3]/str[@name='id'][.='7']");


  }

