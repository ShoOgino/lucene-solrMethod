  @Test
  public void testRetrievePayloads() throws Exception {
    clearIndex();

    int numDocs = 100 + random().nextInt(100);
    int numLocations = 1000 + random().nextInt(2000);
    for (int docNum = 0 ; docNum < numDocs ; ++docNum) {
      StringBuilder amountsBuilder = new StringBuilder();
      for (int location = 1 ; location <= numLocations ; ++location) {
        String amount = "" + location + '.' + random().nextInt(100);
        amountsBuilder.append(location).append('|').append(amount).append(' ');
      }
      assertU(adoc("id","" + docNum,
                   "default_amount_f", "" + (10000 + random().nextInt(10000)) + ".0",
                   "amounts_dpf", amountsBuilder.toString()));
    }
    assertU(commit());
    assertJQ(req("q","*:*",
        "fl","id,location:$locationId,amount:$amount",
        "sort","$amount asc",
        "amount","payload(amounts_dpf,$locationId,default_amount_f)",
        "locationId",""+(1+random().nextInt(numLocations)),
        "wt","json"),
        "/response/numFound==" + numDocs);
  }

