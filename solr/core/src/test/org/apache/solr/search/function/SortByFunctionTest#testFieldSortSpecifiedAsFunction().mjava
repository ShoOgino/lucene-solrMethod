  /**
   * Sort by function normally compares the double value, but if a function is specified that identifies
   * a single field, we should use the underlying field's SortField to save of a lot of type converstion 
   * (and RAM), and keep the sort precision as high as possible
   *
   * @see #getFieldFunctionClausesToTest
   */
  public void testFieldSortSpecifiedAsFunction() throws Exception {
    final long A = Long.MIN_VALUE;
    final long B = A + 1L;
    final long C = B + 1L;
    
    final long Z = Long.MAX_VALUE;
    final long Y = Z - 1L;
    final long X = Y - 1L;
    
    // test is predicated on the idea that if long -> double converstion is happening under the hood
    // then we lose precision in sorting; so lets sanity check that our JVM isn't doing something wacky
    // in converstion that violates the principle of the test
    
    assertEquals("WTF? small longs cast to double aren't equivilent?",
                 (double)A, (double)B, 0.0D);
    assertEquals("WTF? small longs cast to double aren't equivilent?",
                 (double)A, (double)C, 0.0D);
    
    assertEquals("WTF? big longs cast to double aren't equivilent?",
                 (double)Z, (double)Y, 0.0D);
    assertEquals("WTF? big longs cast to double aren't equivilent?",
                 (double)Z, (double)X, 0.0D);
    
    int docId = 0;
    for (int i = 0; i < 3; i++) {
      assertU(adoc(sdoc("id", ++docId, "primary_tl1", X, "secondary_tl1", i,
                        "multi_l_dv", X, "multi_l_dv", A)));
      assertU(adoc(sdoc("id", ++docId, "primary_tl1", Y, "secondary_tl1", i,
                        "multi_l_dv", Y, "multi_l_dv", B)));
      assertU(adoc(sdoc("id", ++docId, "primary_tl1", Z, "secondary_tl1", i,
                        "multi_l_dv", Z, "multi_l_dv", C)));
    }
    assertU(commit());

    // all of these sorts should result in the exact same order
    // min/max of a field is tested in TestSortByMinMaxFunction
    for (String primarySort : getFieldFunctionClausesToTest()) {

      assertQ(req("q", "*:*",
                  "sort", primarySort + " asc, secondary_tl1 asc")
              , "//*[@numFound='9']"
              //
              , "//result/doc[1]/long[@name='primary_tl1'][.='"+X+"']"
              , "//result/doc[1]/long[@name='secondary_tl1'][.='0']"
              , "//result/doc[2]/long[@name='primary_tl1'][.='"+X+"']"
              , "//result/doc[2]/long[@name='secondary_tl1'][.='1']"
              , "//result/doc[3]/long[@name='primary_tl1'][.='"+X+"']"
              , "//result/doc[3]/long[@name='secondary_tl1'][.='2']"
              //
              , "//result/doc[4]/long[@name='primary_tl1'][.='"+Y+"']"
              , "//result/doc[4]/long[@name='secondary_tl1'][.='0']"
              , "//result/doc[5]/long[@name='primary_tl1'][.='"+Y+"']"
              , "//result/doc[5]/long[@name='secondary_tl1'][.='1']"
              , "//result/doc[6]/long[@name='primary_tl1'][.='"+Y+"']"
              , "//result/doc[6]/long[@name='secondary_tl1'][.='2']"
              //
              , "//result/doc[7]/long[@name='primary_tl1'][.='"+Z+"']"
              , "//result/doc[7]/long[@name='secondary_tl1'][.='0']"
              , "//result/doc[8]/long[@name='primary_tl1'][.='"+Z+"']"
              , "//result/doc[8]/long[@name='secondary_tl1'][.='1']"
              , "//result/doc[9]/long[@name='primary_tl1'][.='"+Z+"']"
              , "//result/doc[9]/long[@name='secondary_tl1'][.='2']"
              );
    }
  }

