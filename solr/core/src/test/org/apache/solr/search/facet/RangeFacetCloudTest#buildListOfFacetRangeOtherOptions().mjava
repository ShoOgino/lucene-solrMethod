  /** 
   * Helper for seeding the re-used static struct, and asserting no one changes the Enum w/o updating this test
   *
   * @see #assertBeforeAfterBetween 
   * @see #formatFacetRangeOther
   * @see #OTHERS
   */
  private static final List<EnumSet<FacetRangeOther>> buildListOfFacetRangeOtherOptions() {
    assertEquals("If someone adds to FacetRangeOther this method (and bulk of test) needs updated",
                 5, EnumSet.allOf(FacetRangeOther.class).size());
    
    // we're not overly concerned about testing *EVERY* permutation,
    // we just want to make sure we test multiple code paths (some, all, "ALL", none)
    //
    // NOTE: Don't mix "ALL" or "NONE" with other options so we don't have to make assertBeforeAfterBetween
    // overly complicated
    ArrayList<EnumSet<FacetRangeOther>> results = new ArrayList<>(5);
    results.add(EnumSet.of(FacetRangeOther.ALL));
    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER, FacetRangeOther.BETWEEN));
    results.add(EnumSet.of(FacetRangeOther.BEFORE, FacetRangeOther.AFTER));
    results.add(EnumSet.of(FacetRangeOther.BETWEEN));
    results.add(EnumSet.of(FacetRangeOther.NONE));
    return results;
  }

