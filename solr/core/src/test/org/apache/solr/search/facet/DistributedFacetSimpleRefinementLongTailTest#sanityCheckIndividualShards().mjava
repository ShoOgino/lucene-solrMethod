  @SuppressWarnings({"unchecked", "rawtypes"})
  private void sanityCheckIndividualShards() throws Exception {
    // sanity check that our expectations about each shard (non-distrib) are correct

    SolrParams req = params( "q", "*:*", "distrib", "false", "json.facet",
                             " { foo:{ type:terms, limit:10, field:foo_s, facet:{ bar:{ type:terms, limit:10, field:bar_s }}}}");

    List<NamedList>[] shardFooBuckets = new List[clients.size()];
    for (int i = 0; i < clients.size(); i++) {
      shardFooBuckets[i] = (List<NamedList>)
        ((NamedList<NamedList>)clients.get(i).query( req ).getResponse().get("facets")).get("foo").get("buckets");
    }

    // top 5 same on all shards
    for (int i = 0; i < 3; i++) {
      assertEquals(10, shardFooBuckets[i].size());
      for (int j = 0; j < 5; j++) {
        NamedList bucket = shardFooBuckets[i].get(j);
        assertEquals(bucket.toString(), "aaa"+j, bucket.get("val"));
        assertEquals(bucket.toString(), 100L, bucket.get("count"));
      }
    }
    // top 6-10 same on shard0 & shard1
    for (int i = 0; i < 2; i++) {
      for (int j = 5; j < 10; j++) {
        NamedList bucket = shardFooBuckets[i].get(j);
        assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("bbb"));
        assertEquals(bucket.toString(), 50L, bucket.get("count"));
      }
    }

    // 6-10 on shard2
    assertEquals("junkA", shardFooBuckets[2].get(5).get("val"));
    assertEquals(50L, shardFooBuckets[2].get(5).get("count"));
    assertEquals("tail", shardFooBuckets[2].get(6).get("val"));
    assertEquals(45L, shardFooBuckets[2].get(6).get("count"));
    for (int j = 7; j < 10; j++) {
      NamedList bucket = shardFooBuckets[2].get(j);
      assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("ZZZ"));
      assertEquals(bucket.toString(), 1L, bucket.get("count"));
    }
    
    // check 'bar' sub buckets on "tail" from shard2
    { List<NamedList> bar_buckets = (List<NamedList>)  ((NamedList<NamedList>) shardFooBuckets[2].get(6).get("bar")).get("buckets");
      assertEquals(6, bar_buckets.size());
      for (int j = 0; j < 5; j++) {
        NamedList bucket = bar_buckets.get(j);
        assertTrue(bucket.toString(), bucket.get("val").toString().startsWith("junkB"));
        assertEquals(bucket.toString(), 8L, bucket.get("count"));
      }
      NamedList bucket = bar_buckets.get(5);
      assertEquals("tailB", bucket.get("val"));
      assertEquals(5L, bucket.get("count"));
    }
  }

