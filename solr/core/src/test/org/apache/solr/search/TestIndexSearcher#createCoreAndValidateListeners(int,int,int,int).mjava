  private void createCoreAndValidateListeners(int numTimesCalled, int numTimesCalledFirstSearcher,
      int numTimesCalledAfterGetSearcher, int numTimesCalledFirstSearcherAfterGetSearcher) throws Exception {
    CoreContainer cores = h.getCoreContainer();
    CoreDescriptor cd = h.getCore().getCoreDescriptor();
    SolrCore newCore = null;
    // reset counters
    MockSearcherListener.numberOfTimesCalled = new AtomicInteger();
    MockSearcherListener.numberOfTimesCalledFirstSearcher = new AtomicInteger();
    
    try {
      // Create a new core, this should call all the firstSearcherListeners
      newCore = cores.create("core1", cd.getInstanceDir(), ImmutableMap.of("config", "solrconfig-searcher-listeners1.xml"));
      
      //validate that the new core was created with the correct solrconfig
      assertNotNull(newCore.getSearchComponent("mock"));
      assertEquals(MockSearchComponent.class, newCore.getSearchComponent("mock").getClass());
      assertFalse(newCore.getSolrConfig().useColdSearcher);
      
      doQuery(newCore);
      
      assertEquals(numTimesCalled, MockSearcherListener.numberOfTimesCalled.get());
      assertEquals(numTimesCalledFirstSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());
      
      addDummyDoc(newCore);
      
      // Open a new searcher, this should call the newSearcherListeners
      Future<?>[] future = new Future[1];
      newCore.getSearcher(true, false, future);
      future[0].get();
      
      assertEquals(numTimesCalledAfterGetSearcher, MockSearcherListener.numberOfTimesCalled.get());
      assertEquals(numTimesCalledFirstSearcherAfterGetSearcher, MockSearcherListener.numberOfTimesCalledFirstSearcher.get());
      
    } finally {
      if (newCore != null) {
        cores.unload("core1");
      }
    }
  }

