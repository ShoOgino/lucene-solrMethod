  @Test
  public void testTermsMethodEquivalency() {
    // Run queries with a variety of 'method' and postfilter options.
    final TermsParams[] methods = new TermsParams[] {
        new TermsParams("termsFilter", true),
        new TermsParams("termsFilter", false),
        new TermsParams("booleanQuery", true),
        new TermsParams("booleanQuery", false),
        new TermsParams("automaton", true),
        new TermsParams("automaton", false),
        new TermsParams("docValuesTermsFilter", true),
        new TermsParams("docValuesTermsFilter", false),
        new TermsParams("docValuesTermsFilterTopLevel", true),
        new TermsParams("docValuesTermsFilterTopLevel", false),
        new TermsParams("docValuesTermsFilterPerSegment", true),
        new TermsParams("docValuesTermsFilterPerSegment", false)
    };

    for (TermsParams method : methods) {
      // Single-valued field, single term value
      ModifiableSolrParams params = new ModifiableSolrParams();
      params.add("q", method.buildQuery("author_s", "Robert Jordan"));
      params.add("sort", "id asc");
      assertQ(req(params, "indent", "on"), "*[count(//doc)=2]",
          "//result/doc[1]/str[@name='id'][.='2']",
          "//result/doc[2]/str[@name='id'][.='3']"
      );

      // Single-valued field, multiple term values
      params = new ModifiableSolrParams();
      params.add("q", method.buildQuery("author_s", "Robert Jordan,Isaac Asimov"));
      params.add("sort", "id asc");
      assertQ(req(params, "indent", "on"), "*[count(//doc)=3]",
          "//result/doc[1]/str[@name='id'][.='2']",
          "//result/doc[2]/str[@name='id'][.='3']",
          "//result/doc[3]/str[@name='id'][.='7']"
      );

      // Multi-valued field, single term value
      params = new ModifiableSolrParams();
      params.add("q", method.buildQuery("cat_s", "childrens"));
      params.add("sort", "id asc");
      assertQ(req(params, "indent", "on"), "*[count(//doc)=2]",
          "//result/doc[1]/str[@name='id'][.='2']",
          "//result/doc[2]/str[@name='id'][.='3']"
      );

      // Multi-valued field, multiple term values
      params = new ModifiableSolrParams();
      params.add("q", method.buildQuery("cat_s", "childrens,scifi"));
      params.add("sort", "id asc");
      assertQ(req(params, "indent", "on"), "*[count(//doc)=5]",
          "//result/doc[1]/str[@name='id'][.='2']",
          "//result/doc[2]/str[@name='id'][.='3']",
          "//result/doc[3]/str[@name='id'][.='5']",
          "//result/doc[4]/str[@name='id'][.='6']",
          "//result/doc[5]/str[@name='id'][.='7']"
      );

      // Numeric field
      params = new ModifiableSolrParams();
      params.add("q", method.buildQuery("pubyear_i", "2009"));
      params.add("sort", "id asc");

      // Test schema randomizes between Trie and Point.  "terms" is supported for "trie" but not "Point"
      final String numericFieldType = System.getProperty("solr.tests.IntegerFieldType");
      if (numericFieldType.contains("Point")) {
        assertQEx("Expected 'terms' query on PointField to fail", req(params, "indent", "on"), 400);
      } else {
        assertQ(req(params, "indent", "on"), "*[count(//doc)=1]", "//result/doc[1]/str[@name='id'][.='1']");
      }
    }
  }

