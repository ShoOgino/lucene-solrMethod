  /** 
   * Given a few explicit "structures" of requests, test many permutations of various params/options.
   * This is more complex then {@link #testBespoke} but should still be easier to trace/debug then 
   * a pure random monstrosity.
   */
  public void testBespokeStructures() throws Exception {
    // we don't need to test every field, just make sure we test enough fields to hit every suffix..
    final int maxFacetFieldNum = Collections.max(Arrays.asList(MULTI_STR_FIELD_SUFFIXES.length,
                                                               MULTI_INT_FIELD_SUFFIXES.length,
                                                               SOLO_STR_FIELD_SUFFIXES.length,
                                                               SOLO_INT_FIELD_SUFFIXES.length));
    
    for (int facetFieldNum = 0; facetFieldNum < maxFacetFieldNum; facetFieldNum++) {
      for (String facetFieldName : Arrays.asList(soloStrField(facetFieldNum), multiStrField(facetFieldNum))) {
        for (int limit : Arrays.asList(10, -1)) {
          for (String sort : Arrays.asList("count desc", "skg desc", "index asc")) {
            for (Boolean refine : Arrays.asList(false, true)) {
              { // 1 additional (non-SKG / non-sweeping) stat
                final TermFacet xxx = new TermFacet(facetFieldName, map("limit", limit,
                                                                        "overrequest", 0,
                                                                        "sort", sort,
                                                                        "refine", refine));
                xxx.subFacets.put("sum", new SumFacet(soloIntField(3)));
                final Map<String,TermFacet> facets = new LinkedHashMap<>();
                facets.put("xxx1", xxx);
                assertFacetSKGsAreConsistent(facets,
                                             buildORQuery(multiStrField(11) + ":55",
                                                          multiStrField(0) + ":46"),
                                             multiStrField(5)+":9", "*:*");
              }
              { // multiple SKGs
                final TermFacet xxx = new TermFacet(facetFieldName, map("limit", limit,
                                                                        "overrequest", 0,
                                                                        "sort", sort,
                                                                        "refine", refine));
                xxx.subFacets.put("skg2", new RelatednessFacet(multiStrField(2)+":9", "*:*"));
                final Map<String,TermFacet> facets = new LinkedHashMap<>();
                facets.put("xxx2", xxx);
                assertFacetSKGsAreConsistent(facets,
                                             buildORQuery(multiStrField(11) + ":55",
                                                          multiStrField(0) + ":46"),
                                             multiStrField(5)+":9", "*:*");
              }
              { // multiple SKGs and a multiple non-SKG / non-sweeping stats
                final TermFacet xxx = new TermFacet(facetFieldName, map("limit", limit,
                                                                        "overrequest", 0,
                                                                        "sort", sort,
                                                                        "refine", refine));
                xxx.subFacets.put("minAAA", new SumFacet(soloIntField(3)));
                xxx.subFacets.put("skg2", new RelatednessFacet(multiStrField(2)+":9", "*:*"));
                xxx.subFacets.put("minBBB", new SumFacet(soloIntField(2)));
                final Map<String,TermFacet> facets = new LinkedHashMap<>();
                facets.put("xxx3", xxx);
                assertFacetSKGsAreConsistent(facets,
                                             buildORQuery(multiStrField(11) + ":55",
                                                          multiStrField(0) + ":46"),
                                             multiStrField(5)+":9", "*:*");
              }
            }
          }
        }
      }
    }
  }

