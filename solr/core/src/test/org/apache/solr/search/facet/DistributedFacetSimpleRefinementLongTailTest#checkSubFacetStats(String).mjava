  private void checkSubFacetStats(String extraJson) throws Exception {
    String commonJson = "type: terms, " + extraJson;
    @SuppressWarnings({"unchecked", "rawtypes"})
    NamedList<NamedList> all_facets = (NamedList) queryServer
      ( params( "q", "*:*", "shards", getShardsString(), "rows" , "0", "json.facet",
                "{ foo : { " + commonJson + " field: foo_s, facet: { " +
                ALL_STATS_JSON + " bar: { " + commonJson + " field: bar_s, facet: { " + ALL_STATS_JSON +
                // under bar, in addition to "ALL" simple stats, we also ask for skg...
                ", skg : 'relatedness($skg_fore,$skg_back)' } } } } }",
                "skg_fore", STAT_FIELD+":[0 TO 40]", "skg_back", STAT_FIELD+":[-10000 TO 10000]"
      ) ).getResponse().get("facets");
    
    assertNotNull(all_facets);

    @SuppressWarnings({"unchecked", "rawtypes"})
    List<NamedList> foo_buckets = (List) (all_facets.get("foo")).get("buckets");

    @SuppressWarnings({"rawtypes"})
    NamedList aaa0_Bucket = foo_buckets.get(0);
    assertEquals(ALL_STATS.size() + 3, aaa0_Bucket.size()); // val,count,facet
    assertEquals("aaa0", aaa0_Bucket.get("val"));
    assertEquals(300L, aaa0_Bucket.get("count"));
    assertEquals(-99L, aaa0_Bucket.get("min"));
    assertEquals(693L, aaa0_Bucket.get("max"));
    assertEquals(300L, aaa0_Bucket.get("countvals"));
    assertEquals(0L, aaa0_Bucket.get("missing"));
    assertEquals(34650.0D, aaa0_Bucket.get("sum"));
    assertEquals(483.70000000000016D, (double)aaa0_Bucket.get("percentile"), 0.1E-7);
    assertEquals(115.5D, (double) aaa0_Bucket.get("avg"), 0.1E-7);
    assertEquals(1.674585E7D, (double) aaa0_Bucket.get("sumsq"), 0.1E-7);
    assertEquals(206.4493184076D, (double) aaa0_Bucket.get("stddev"), 0.1E-7);
    assertEquals(42621.32107023412D, (double) aaa0_Bucket.get("variance"), 0.1E-7);
    assertEquals(284L, aaa0_Bucket.get("unique"));
    assertEquals(284L, aaa0_Bucket.get("hll"));

    @SuppressWarnings({"rawtypes"})
    NamedList tail_Bucket = foo_buckets.get(5);
    assertEquals(ALL_STATS.size() + 3, tail_Bucket.size()); // val,count,facet
    assertEquals("tail", tail_Bucket.get("val"));
    assertEquals(135L, tail_Bucket.get("count"));
    assertEquals(0L, tail_Bucket.get("min"));
    assertEquals(44L, tail_Bucket.get("max"));
    assertEquals(90L, tail_Bucket.get("countvals"));
    assertEquals(40.0D, tail_Bucket.get("percentile"));
    assertEquals(45L, tail_Bucket.get("missing"));
    assertEquals(1980.0D, tail_Bucket.get("sum"));
    assertEquals(22.0D, (double) tail_Bucket.get("avg"), 0.1E-7);
    assertEquals(58740.0D, (double) tail_Bucket.get("sumsq"), 0.1E-7);
    assertEquals(13.0599310011D, (double) tail_Bucket.get("stddev"), 0.1E-7);
    assertEquals(170.5617977535D, (double) tail_Bucket.get("variance"), 0.1E-7);
    assertEquals(45L, tail_Bucket.get("unique"));
    assertEquals(45L, tail_Bucket.get("hll"));

    @SuppressWarnings({"unchecked", "rawtypes"})
    List<NamedList> tail_bar_buckets = (List) ((NamedList)tail_Bucket.get("bar")).get("buckets");
   
    @SuppressWarnings({"rawtypes"})
    NamedList tailB_Bucket = tail_bar_buckets.get(0);
    assertEquals(ALL_STATS.size() + 3, tailB_Bucket.size()); // val,count,skg ... NO SUB FACETS
    assertEquals("tailB", tailB_Bucket.get("val"));
    assertEquals(17L, tailB_Bucket.get("count"));
    assertEquals(35L, tailB_Bucket.get("min"));
    assertEquals(40L, tailB_Bucket.get("max"));
    assertEquals(12L, tailB_Bucket.get("countvals"));
    assertEquals(39.9D, tailB_Bucket.get("percentile"));
    assertEquals(5L, tailB_Bucket.get("missing"));
    assertEquals(450.0D, tailB_Bucket.get("sum"));
    assertEquals(37.5D, (double) tailB_Bucket.get("avg"), 0.1E-7);
    assertEquals(16910.0D, (double) tailB_Bucket.get("sumsq"), 0.1E-7);
    assertEquals(1.78376517D, (double) tailB_Bucket.get("stddev"), 0.1E-7);
    assertEquals(3.1818181817D, (double) tailB_Bucket.get("variance"), 0.1E-7);
    assertEquals(6L, tailB_Bucket.get("unique"));
    assertEquals(6L, tailB_Bucket.get("hll"));

    // check the SKG stats on our tailB bucket
    @SuppressWarnings({"rawtypes"})
    NamedList tailB_skg = (NamedList) tailB_Bucket.get("skg");
    assertEquals(tailB_skg.toString(),
                 3, tailB_skg.size()); 
    assertEquals(0.19990D,    tailB_skg.get("relatedness"));
    assertEquals(0.00334D,    tailB_skg.get("foreground_popularity"));
    assertEquals(0.00334D,    tailB_skg.get("background_popularity"));
    //assertEquals(12L,       tailB_skg.get("foreground_count"));
    //assertEquals(82L,       tailB_skg.get("foreground_size"));
    //assertEquals(12L,       tailB_skg.get("background_count"));
    //assertEquals(3591L,     tailB_skg.get("background_size"));
  }

