  public void testRandom() throws Exception {

    Comparable[] vals = new Comparable[TestUtil.nextInt(random(), 1, 17)];

    // random ints
    for (int i = 0; i < vals.length; i++) {
      vals[i] = random().nextInt();
    }
    testSimpleValues("val_tis_dv", int.class, vals);
    testSimpleValues("val_is_p", int.class, vals);
    testSimpleValues("val_tis_ni_dv", int.class, vals);
    testSimpleValues("val_is_ni_p", int.class, vals);

    // random longs
    for (int i = 0; i < vals.length; i++) {
      vals[i] = random().nextLong();
    }
    testSimpleValues("val_tls_dv", long.class, vals);
    testSimpleValues("val_ls_p", long.class, vals);
    testSimpleValues("val_tls_ni_dv", long.class, vals);
    testSimpleValues("val_ls_ni_p", long.class, vals);
    
    // random floats
    for (int i = 0; i < vals.length; i++) {
      // Random.nextFloat is lame
      Float f = Float.NaN;
      while (f.isNaN()) {
        f = Float.intBitsToFloat(random().nextInt());
      }
      vals[i] = f;
    }
    testSimpleValues("val_tfs_dv", float.class, vals);
    testSimpleValues("val_fs_p", float.class, vals);
    testSimpleValues("val_tfs_ni_dv", float.class, vals);
    testSimpleValues("val_fs_ni_p", float.class, vals);
    
    // random doubles
    for (int i = 0; i < vals.length; i++) {
      // Random.nextDouble is lame
      Double d = Double.NaN;
      while (d.isNaN()) {
        d = Double.longBitsToDouble(random().nextLong());
      }
      vals[i] = d;
    }
    testSimpleValues("val_tds_dv", double.class, vals);
    testSimpleValues("val_ds_p", double.class, vals);
    testSimpleValues("val_tds_ni_dv", double.class, vals);
    testSimpleValues("val_ds_ni_p", double.class, vals);

  }

