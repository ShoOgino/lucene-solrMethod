  private static Object[] buildRandomSortObjects(SortSpec ss) {
    List<SchemaField> fields = ss.getSchemaFields();
    assertNotNull(fields);
    Object[] results = new Object[fields.size()];
    for (int i = 0; i < results.length; i++) {
      SchemaField sf = fields.get(i);
      if (null == sf) {
        // score or function
        results[i] = (Float) random().nextFloat() * random().nextInt(); break;
      } else if (0 == _TestUtil.nextInt(random(), 0, 7)) {
        // emulate missing value for doc
        results[i] = null;
      } else {
        final String fieldName = sf.getName();
        assertNotNull(fieldName);

        // Note: In some cases we build a human readable version of the sort value and then 
        // unmarshall it into the raw, real, sort values that are expected by the FieldTypes.
        // In other cases we just build the raw value to begin with because it's easier

        Object val = null;
        if (fieldName.equals("id")) {
          val = sf.getType().unmarshalSortValue(_TestUtil.randomSimpleString(random()));
        } else if (fieldName.startsWith("str")) {
          val = sf.getType().unmarshalSortValue(_TestUtil.randomRealisticUnicodeString(random()));
        } else if (fieldName.startsWith("bin")) {
          byte[] randBytes = new byte[_TestUtil.nextInt(random(), 1, 50)];
          random().nextBytes(randBytes);
          val = new BytesRef(randBytes);
        } else if (fieldName.startsWith("int")) {
          val = (Integer) random().nextInt();
        } else if (fieldName.startsWith("long")) {
          val = (Long) random().nextLong();
        } else if (fieldName.startsWith("float")) {
          val = (Float) random().nextFloat() * random().nextInt(); break;
        } else if (fieldName.startsWith("double")) {
          val = (Double) random().nextDouble() * random().nextInt(); break;
        } else {
          fail("fell through the rabbit hole, new field in schema? = " + fieldName);
        }
        
        results[i] = val;

      }
    }
    return results;
  }

