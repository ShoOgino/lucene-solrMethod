  @Test
  public void test() {
    clearIndex();

    String[] should_matches = new String[] {
        "{!payload_check f=vals_dpi v=A payloads=1}",
        "{!payload_check f=vals_dpi v=B payloads=2}",
        "{!payload_check f=vals_dpi v=C payloads=3}",
        "{!payload_check f=vals_dpi payloads='1 2'}A B",
        // "{!payload_check f=vals_dpi payloads='1 2.0'}A B",  // ideally this should pass, but IntegerEncoder can't handle "2.0"
        "{!payload_check f=vals_dpi payloads='1 2 3'}A B C",

        "{!payload_check f=vals_dpf payloads='1 2'}one two",
        "{!payload_check f=vals_dpf payloads='1 2.0'}one two", // shows that FloatEncoder can handle "1"

        "{!payload_check f=vals_dps payloads='NOUN VERB'}cat jumped"
    };

    String[] should_not_matches = new String[] {
        "{!payload_check f=vals_dpi v=A payloads=2}",
        "{!payload_check f=vals_dpi payloads='1 2'}B C",
        "{!payload_check f=vals_dpi payloads='1 2 3'}A B",
        "{!payload_check f=vals_dpi payloads='1 2'}A B C",
        "{!payload_check f=vals_dpf payloads='1 2.0'}two three",
        "{!payload_check f=vals_dps payloads='VERB NOUN'}cat jumped"
    };

    for(String should_match : should_matches) {
      assertQ(should_match, req("fl","*,score", "q", should_match), "//result[@numFound='1']");
    }

    for(String should_not_match : should_not_matches) {
      assertQ(should_not_match, req("fl","*,score", "q", should_not_match), "//result[@numFound='0']");
    }
  }

