  // in rare circumstances, two logs can be left uncapped (lacking a commit at the end signifying that all the content in the log was committed)
  @Test
  public void testRecoveryMultipleLogs() throws Exception {
    try {
      TestInjection.skipIndexWriterCommitOnClose = true;
      final Semaphore logReplay = new Semaphore(0);
      final Semaphore logReplayFinish = new Semaphore(0);

      UpdateLog.testing_logReplayHook = () -> {
        try {
          assertTrue(logReplay.tryAcquire(TIMEOUT, TimeUnit.SECONDS));
        } catch (Exception e) {
          throw new RuntimeException(e);
        }
      };

      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();

      String logDir = h.getCore().getUpdateHandler().getUpdateLog().getLogDir();

      clearIndex();
      assertU(commit());

      assertU(adoc("id","AAAAAA"));
      assertU(adoc("id","BBBBBB"));
      assertU(adoc("id","CCCCCC"));

      h.close();
      String[] files = HdfsUpdateLog.getLogList(fs, new Path(logDir));
      Arrays.sort(files);
      String fname = files[files.length-1];

      try(FSDataOutputStream dos = fs.append(new Path(logDir, files[files.length-1]))) {
        dos.writeLong(0xffffffffffffffffL);
        dos.writeChars("This should be appended to a good log file, representing a bad partially written record.");
      }

      try(FSDataInputStream dis = fs.open(new Path(logDir, files[files.length-1]))) {
        byte[] content = new byte[dis.available()];
        dis.readFully(content);

        // Now make a newer log file with just the IDs changed.  NOTE: this may not work if log format changes too much!
        findReplace("AAAAAA".getBytes(StandardCharsets.UTF_8), "aaaaaa".getBytes(StandardCharsets.UTF_8), content);
        findReplace("BBBBBB".getBytes(StandardCharsets.UTF_8), "bbbbbb".getBytes(StandardCharsets.UTF_8), content);
        findReplace("CCCCCC".getBytes(StandardCharsets.UTF_8), "cccccc".getBytes(StandardCharsets.UTF_8), content);

        // WARNING... assumes format of .00000n where n is less than 9
        long logNumber = Long.parseLong(fname.substring(fname.lastIndexOf(".") + 1));
        String fname2 = String.format(Locale.ROOT,
            UpdateLog.LOG_FILENAME_PATTERN,
            UpdateLog.TLOG_NAME,
            logNumber + 1);

        try(FSDataOutputStream dos = fs.create(new Path(logDir, fname2), (short)1)) {
          dos.write(content);
        }
      }

      logReplay.release(1000);
      logReplayFinish.drainPermits();
      ignoreException("OutOfBoundsException");  // this is what the corrupted log currently produces... subject to change.
      createCore();
      assertTrue(logReplayFinish.tryAcquire(TIMEOUT, TimeUnit.SECONDS));
      resetExceptionIgnores();
      assertJQ(req("q","*:*") ,"/response/numFound==6");

    } finally {
      UpdateLog.testing_logReplayHook = null;
      UpdateLog.testing_logReplayFinishHook = null;
    }
  }

