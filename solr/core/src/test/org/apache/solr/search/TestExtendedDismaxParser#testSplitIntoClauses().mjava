    /**
     * Repeating some of test cases as direct calls to splitIntoClauses
     */
    @Test
    public void testSplitIntoClauses() throws Exception {
        String query = "(\"foo\nfoo\")";
        SolrQueryRequest request = req("q", query,
                "qf", "cat_s",
                "defType", "edismax");
        ExtendedDismaxQParser parser = new ExtendedDismaxQParser(query, null, request.getParams(), request);
        List<ExtendedDismaxQParser.Clause> clauses = parser.splitIntoClauses(query, false);
        Assert.assertEquals(3, clauses.size());
        assertClause(clauses.get(0), "\\(", false, true);
        assertClause(clauses.get(1), "foo\nfoo", true, false);
        assertClause(clauses.get(2), "\\)", false, true);

        query = "cat_s:[\"foo\nfoo\" TO \"foo\nfoo\"]";
        request = req("q", query,
                "qf", "cat_s",
                "defType", "edismax");
        parser = new ExtendedDismaxQParser(query, null, request.getParams(), request);
        clauses = parser.splitIntoClauses(query, false);
        Assert.assertEquals(5, clauses.size());
        assertClause(clauses.get(0), "\\[", false, true, "cat_s");
        assertClause(clauses.get(1), "foo\nfoo", true, false);
        assertClause(clauses.get(2), "TO", true, false);
        assertClause(clauses.get(3), "foo\nfoo", true, false);
        assertClause(clauses.get(4), "\\]", false, true);

        query = "cat_s:[ \"foo\nfoo\" TO \"foo\nfoo\"]";
        request = req("q", query,
                "qf", "cat_s",
                "defType", "edismax");
        parser = new ExtendedDismaxQParser(query, null, request.getParams(), request);
        clauses = parser.splitIntoClauses(query, false);
        Assert.assertEquals(5, clauses.size());
        assertClause(clauses.get(0), "\\[", true, true, "cat_s");
        assertClause(clauses.get(1), "foo\nfoo", true, false);
        assertClause(clauses.get(2), "TO", true, false);
        assertClause(clauses.get(3), "foo\nfoo", true, false);
        assertClause(clauses.get(4), "\\]", false, true);

        String allReservedCharacters = "!():^[]{}~*?\"+-\\|&/";
        // the backslash needs to be manually escaped (the query parser sees the raw backslash as an escape the subsequent
        // character)
        query = allReservedCharacters.replace("\\", "\\\\");

        request = req("q", query,
                "qf", "name",
                "mm", "100%",
                "defType", "edismax");

        parser = new ExtendedDismaxQParser(query, null, request.getParams(), request);
        clauses = parser.splitIntoClauses(query, false);
        Assert.assertEquals(1, clauses.size());
        assertClause(clauses.get(0), "\\!\\(\\)\\:\\^\\[\\]\\{\\}\\~\\*\\?\\\"\\+\\-\\\\\\|\\&\\/", false, true);

        query = "foo/";
        request = req("q", query,
                "qf", "name",
                "mm", "100%",
                "defType", "edismax");

        parser = new ExtendedDismaxQParser(query, null, request.getParams(), request);
        clauses = parser.splitIntoClauses(query, false);
        Assert.assertEquals(1, clauses.size());
        assertClause(clauses.get(0), "foo\\/", false, true);
    }

