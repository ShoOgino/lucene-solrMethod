  @Test
  public void testJsonRangeFacetWithSubFacet() throws Exception {

    // range facet, with terms facet nested under using limit=2 w/overrequest disabled
    // filter out the first 5 docs (by id) which should ensure that regardless of sharding:
    //  - x2 being the top term for the 1st range bucket
    //  - x0 being the top term for the 2nd range bucket
    //  - the 2nd term in each bucket may vary based on shard/doc placement, but the count will always be '1'
    // ...and in many cases (based on the shard/doc placement) this will require refinement to backfill the top terms
    final String filter = "id_i1:["+VALUES.size()+" TO *]";

    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet
    for (boolean use_domain : Arrays.asList(true, false)) {
      final String domain = use_domain ? "domain: { filter:'" + filter + "'}," : "";

      // both of these options should produce same results since hardened:false is default
      final String end = random().nextBoolean() ? "end:'20,EUR'" : "end:'15,EUR'";
        
      
      final SolrQuery solrQuery = new SolrQuery("q", (use_domain ? "*:*" : filter),
                                                "rows", "0", "json.facet",
                                                "{ bar:{ type:range, field:"+FIELD+", " + domain + 
                                                "        start:'0,EUR', gap:'10,EUR', "+end+", other:all " +
                                                "        facet: { foo:{ type:terms, field:x_s, " +
                                                "                       refine:true, limit:2, overrequest:0" +
                                                " } } } }");
      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);
      try {
        // this top level result count sanity check that should vary based on how we are filtering our facets...
        assertEquals(use_domain ? 15 : 10, rsp.getResults().getNumFound());

        final NamedList<Object> bar = ((NamedList<NamedList<Object>>)rsp.getResponse().get("facets")).get("bar");
        final List<NamedList<Object>> bar_buckets = (List<NamedList<Object>>) bar.get("buckets");
        final NamedList<Object> before = (NamedList<Object>) bar.get("before");
        final NamedList<Object> between = (NamedList<Object>) bar.get("between");
        final NamedList<Object> after = (NamedList<Object>) bar.get("after");
        
        // sanity check our high level expectations...
        assertEquals("bar num buckets", 2, bar_buckets.size());
        assertEqualsHACK("before count", 0L, before.get("count"));
        assertEqualsHACK("between count", 8L, between.get("count"));
        assertEqualsHACK("after count", 2L, after.get("count"));
        
        // drill into the various buckets...
        
        // before should have no subfacets since it's empty...
        assertNull("before has foo???", before.get("foo"));
        
        // our 2 range buckets & their sub facets...
        for (int i = 0; i < 2; i++) {
          final NamedList<Object> bucket = bar_buckets.get(i);
          assertEquals((i * 10) + ".00,EUR", bucket.get("val"));
          assertEqualsHACK("bucket #" + i, 4L, bucket.get("count"));
          final List<NamedList<Object>> foo_buckets = ((NamedList<List<NamedList<Object>>>)bucket.get("foo")).get("buckets");
          assertEquals("bucket #" + i + " foo num buckets", 2, foo_buckets.size());
          assertEquals("bucket #" + i + " foo top term", (0==i ? "x2" : "x0"), foo_buckets.get(0).get("val"));
          assertEqualsHACK("bucket #" + i + " foo top count", 2, foo_buckets.get(0).get("count"));
          // NOTE: we can't make any assertions about the 2nd val..
          // our limit + randomized sharding could result in either remaining term being picked.
          // but for eiter term, the count should be exactly the same...
          assertEqualsHACK("bucket #" + i + " foo 2nd count", 1, foo_buckets.get(1).get("count"));
        }
        
        { // between...
          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)between.get("foo")).get("buckets");
          assertEquals("between num buckets", 2, buckets.size());
          // the counts should both be 3, and the term order should break the tie...
          assertEquals("between bucket top", "x0", buckets.get(0).get("val"));
          assertEqualsHACK("between bucket top count", 3L, buckets.get(0).get("count"));
          assertEquals("between bucket 2nd", "x2", buckets.get(1).get("val"));
          assertEqualsHACK("between bucket 2nd count", 3L, buckets.get(1).get("count"));
        }
        
        { // after...
          final List<NamedList<Object>> buckets = ((NamedList<List<NamedList<Object>>>)after.get("foo")).get("buckets");
          assertEquals("after num buckets", 2, buckets.size());
          // the counts should both be 1, and the term order should break the tie...
          assertEquals("after bucket top", "x1", buckets.get(0).get("val"));
          assertEqualsHACK("after bucket top count", 1L, buckets.get(0).get("count"));
          assertEquals("after bucket 2nd", "x2", buckets.get(1).get("val"));
          assertEqualsHACK("after bucket 2nd count", 1L, buckets.get(1).get("count"));
        }
        
      } catch (AssertionError|RuntimeException ae) {
        throw new AssertionError(solrQuery.toString() + " -> " + rsp.toString() + " ===> " + ae.getMessage(), ae);
      }
    }
  }

