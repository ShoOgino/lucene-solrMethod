    /**
     * picks a random value for the "overrequest" param, biased in favor of interesting test cases.
     * <p>
     * <b>NOTE:</b> due to variations in overrequest behavior betewen <code>metod:enum<code> and other 
     * processors (see <a href="https://issues.apache.org/jira/browse/SOLR-14595">SOLR-14595</a>) this 
     * method takes in the "sort" param and returns a constant value of <code>0</code> if the sort is 
     * <code>index asc</code> to ensure that the set of candidate buckets considered during merging 
     * (and refinement) is consistent regardless of what processor is used (and/or what sort is used 
     * on the parent facet)
     * </p>
     *
     * @return a number to specify in the request, or null to specify nothing (trigger default behavior)
     * @see #UNIQUE_FIELD_VALS
     * @see <a href="https://issues.apache.org/jira/browse/SOLR-14595">SOLR-14595</a>
     */
    public static Integer randomOverrequestParam(final Random r, final String sort) {

      if ("index asc".equals(sort)) {
        return 0; // test work around for SOLR-14595
      }
      
      switch(r.nextInt(10)) {
        case 0:
        case 1:
        case 2:
        case 3:
          return 0; // 40% of the time, disable overrequest to better stress refinement
        case 4:
        case 5:
          return r.nextInt(UNIQUE_FIELD_VALS); // 20% ask for less them what's needed
        case 6:
          return r.nextInt(Integer.MAX_VALUE); // 10%: completley random value, statisticaly more then enough
        default: break;
      }
      // else.... either leave param unspecified (or redundently specify the -1 default)
      return r.nextBoolean() ? null : -1;
    }

