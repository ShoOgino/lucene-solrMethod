  @Test
  public void testForNotSupportedCases() {
    String[] doc = {"id","3", "term_s", "YYYY", "test_ii", "5000", "test_l", "100", "test_f", "200",
                    "not_indexed_sS", "zzz", "indexed_s_not_uninvert", "zzz"};
    assertU(adoc(doc));
    assertU(commit());

    // collapsing on multivalued field
    assertQEx("Should Fail with Bad Request", "Collapsing not supported on multivalued fields",
        req("q","*:*", "fq","{!collapse field=test_ii}"), SolrException.ErrorCode.BAD_REQUEST);

    // collapsing on unknown field
    assertQEx("Should Fail with Bad Request", "org.apache.solr.search.SyntaxError: undefined field: \"bleh\"",
        req("q","*:*", "fq","{!collapse field=bleh}"), SolrException.ErrorCode.BAD_REQUEST);

    // if a field is uninvertible=false, it should behave the same as a field that is indexed=false ...
    for (String f : Arrays.asList("not_indexed_sS", "indexed_s_not_uninvert")) {
      { // this currently propogates up the low level DocValues error in the common case...
        Exception e = expectThrows(RuntimeException.class, IllegalStateException.class,
                                    () -> h.query(req(params("q", "*:*",
                                                             "fq", "{!collapse field="+f+"}"))));
        assertTrue("unexpected Message: " + e.getMessage(),
                   e.getMessage().contains("Re-index with correct docvalues type"));
      }
      { // ... but in the case of hint=top_fc a bare NPE gets propogated up (SOLR-12979)...
        expectThrows(RuntimeException.class, NullPointerException.class, 
                     () -> h.query(req(params("q", "*:*",
                                              "fq", "{!collapse field="+f+" hint=top_fc}"))));
      }
      
    }
  }

