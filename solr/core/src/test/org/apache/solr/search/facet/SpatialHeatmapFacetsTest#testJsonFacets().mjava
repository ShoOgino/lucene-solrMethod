  /** Tests JSON Facet module implementation of heatmaps. */
  @SuppressWarnings("unchecked")
  @Test
  public void testJsonFacets() throws Exception {
    /*
    THIS IS THE MOSTLY SAME CODE as above with tweaks to request it using the JSON Facet approach.
      Near-duplication is sad; not clear if one test doing both is better -- would be awkward
     */
    handle.clear();
    handle.put("QTime", SKIPVAL);
    handle.put("timestamp", SKIPVAL);
    handle.put("maxScore", SKIPVAL);

    SolrParams baseParams = params("q", "*:*", "rows", "0");

    final String testBox = "[\"50 50\" TO \"180 90\"]";//top-right somewhere on edge (whatever)

    // ------ Index data

    index("id", "0", FIELD, "ENVELOPE(100, 120, 80, 40)");// on right side
    index("id", "1", FIELD, "ENVELOPE(-120, -110, 80, 20)");// on left side (outside heatmap)
    index("id", "3", FIELD, "POINT(70 60)");//just left of BOX 0
    index("id", "4", FIELD, "POINT(91 89)");//just outside box 0 (above it) near pole,

    commit();

    //----- Test gridLevel derivation
    try {
      query(params(baseParams, "json.facet", "{f1:{type:heatmap, f:" + FIELD + ", geom:'" + testBox + "', distErr:0}}"));
      fail();
    } catch (SolrException e) {
      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    }
    try {
      query(params(baseParams, "json.facet", "{f1:{type:heatmap, f:" + FIELD + ", geom:'" + testBox + "', distErrPct:0}}"));
      fail();
    } catch (SolrException e) {
      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, e.code());
    }
    // Monkeying with these params changes the gridLevel in different directions. We don't test the exact
    // computation here; that's not _that_ relevant, and is Lucene spatial's job (not Solr) any way.
    assertEquals(7, getHmObj(query(params(baseParams,
        "json.facet", "{f1:{type:heatmap, f:" + FIELD + ", geom:'" + testBox + "'}}"))).get("gridLevel"));//default
    assertEquals(3, getHmObj(query(params(baseParams,
        "json.facet", "{f1:{type:heatmap, f:" + FIELD + ", geom:'" + testBox + "', gridLevel:3}}"))).get("gridLevel"));
    assertEquals(2, getHmObj(query(params(baseParams,
        "json.facet", "{f1:{type:heatmap, f:" + FIELD + ", geom:'" + testBox + "', distErr:100}}"))).get("gridLevel"));
    //TODO test impact of distance units
    assertEquals(9, getHmObj(query(params(baseParams,
        "json.facet", "{f1:{type:heatmap, f:" + FIELD + ", geom:'" + testBox + "', distErrPct:0.05}}"))).get("gridLevel"));
    assertEquals(6, getHmObj(query(params(baseParams,
        "json.facet", "{f1:{type:heatmap, f:" + FIELD + ", distErrPct:0.10}}"))).get("gridLevel"));

    // ----- Search
    // this test simply has some 0's, nulls, 1's and a 2 in there.
    @SuppressWarnings({"rawtypes"})
    NamedList hmObj = getHmObj(query(params(baseParams,
        "json.facet", "{f1:{type:heatmap, f:" + FIELD + " geom:'[\"50 20\" TO \"180 90\"]', gridLevel:4}}")));
    List<List<Integer>> counts = (List<List<Integer>>) hmObj.get("counts_ints2D");
    List<List<Integer>> expectedCounts1 = Arrays.asList(
        Arrays.asList(0, 0, 2, 1, 0, 0),
        Arrays.asList(0, 0, 1, 1, 0, 0),
        Arrays.asList(0, 1, 1, 1, 0, 0),
        Arrays.asList(0, 0, 1, 1, 0, 0),
        Arrays.asList(0, 0, 1, 1, 0, 0),
        null,
        null
    );
    assertEquals( expectedCounts1, counts);

    // now this time we add a filter query and exclude it
    QueryResponse response = query(params(baseParams,
        "fq", "{!tag=excludeme}id:0", // filter to only be id:0
        "json.facet", "{f1:{type:heatmap, excludeTags:['excludeme'], f:" + FIELD + ", geom:'[\"50 20\" TO \"180 90\"]', gridLevel:4}}"));

    assertEquals(1, response.getResults().getNumFound());// because of our 'fq'
    hmObj = getHmObj(response);
    counts = (List<List<Integer>>) hmObj.get("counts_ints2D");
    assertEquals( expectedCounts1, counts);

    {
      // impractical example but nonetheless encloses the points of both doc3 and doc4 (both of which are points)
      final String jsonHeatmap = "facet:{hm:{type:heatmap, f:" + FIELD + ", geom:'MULTIPOINT(70 60, 91 89)', distErrPct:0.2}}";
      response = query(params(baseParams,
          "json.facet", "{" +
              "q1:{type:query, q:'id:3', " + jsonHeatmap + " }, " +
              "q2:{type:query, q:'id:4', " + jsonHeatmap + " } " +
              "}"));
      {
        @SuppressWarnings({"rawtypes"})
        final NamedList q1Res = (NamedList) response.getResponse().findRecursive("facets", "q1");
        assertEquals("1", q1Res.get("count").toString());
        @SuppressWarnings({"rawtypes"})
        final NamedList q2Res = (NamedList) response.getResponse().findRecursive("facets", "q2");
        assertEquals("1", q2Res.get("count").toString());
        // essentially, these will differ only in the heatmap counts but otherwise will be the same
        assertNotNull(compare(q1Res, q2Res, flags, handle));
      }
    }

    // test using a circle input shape
    hmObj = getHmObj(query(params(baseParams,
        "json.facet", "{f1:{type:heatmap, f:" + FIELD + ", geom:'BUFFER(POINT(110 40), 7)', gridLevel:7}}")));
    counts = (List<List<Integer>>) hmObj.get("counts_ints2D");
    assertEquals(
        Arrays.asList(
            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0
            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0
            Arrays.asList(0, 1, 1, 1, 1, 1, 1, 0),//curved; we have a 0
            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),
            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),
            Arrays.asList(1, 1, 1, 1, 1, 1, 1, 1),
            null, null, null, null, null//no data here (below edge of rect 0)
        ),
        counts
    );

    // Search in no-where ville and get null counts
    assertNull(getHmObj(query(params(baseParams,
        "json.facet", "{f1:{type:heatmap, f:" + FIELD + ", geom:'ENVELOPE(0, 10, -80, -90)'}}"))).get("counts_ints2D"));

    Object v = getHmObj(query(params(baseParams,
        "json.facet", "{f1:{type:heatmap, f:" + FIELD + ", format:png }}"))).get("counts_png");
    assertTrue(v instanceof byte[]);
    //simply test we can read the image
    assertNotNull(FacetHeatmap.PngHelper.readImage((byte[]) v));
    //good enough for this test method
  }

