  @Test
  public void testOptimisticLocking() throws Exception {
    clearIndex();
    assertU(commit());

    long version = addAndGetVersion(sdoc("id","1") , null);
    long version2;

    try {
      // try version added directly on doc
      version2 = addAndGetVersion(sdoc("id","1", "_version_", Long.toString(version-1)), null);
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    try {
      // try version added as a parameter on the request
      version2 = addAndGetVersion(sdoc("id","1"), params("_version_", Long.toString(version-1)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    try {
      // try an add specifying a negative version
      version2 = addAndGetVersion(sdoc("id","1"), params("_version_", Long.toString(-version)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    try {
      // try an add with a greater version
      version2 = addAndGetVersion(sdoc("id","1"), params("_version_", Long.toString(version+random().nextInt(1000)+1)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    //
    // deletes
    //

    try {
      // try a delete with version on the request
      version2 = deleteAndGetVersion("1", params("_version_", Long.toString(version-1)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    try {
      // try a delete with a negative version
      version2 = deleteAndGetVersion("1", params("_version_", Long.toString(-version)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    try {
      // try a delete with a greater version
      version2 = deleteAndGetVersion("1", params("_version_", Long.toString(version+random().nextInt(1000)+1)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    try {
      // try a delete of a document that doesn't exist, specifying a specific version
      version2 = deleteAndGetVersion("I_do_not_exist", params("_version_", Long.toString(version)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    // try a delete of a document that doesn't exist, specifying that it should not
    version2 = deleteAndGetVersion("I_do_not_exist", params("_version_", Long.toString(-1)));
    assertTrue(version2 < 0);

    // overwrite the document
    version2 = addAndGetVersion(sdoc("id","1", "_version_", Long.toString(version)), null);
    assertTrue(version2 > version);

    try {
      // overwriting the previous version should now fail
      version2 = addAndGetVersion(sdoc("id","1"), params("_version_", Long.toString(version)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    try {
      // deleting the previous version should now fail
      version2 = deleteAndGetVersion("1", params("_version_", Long.toString(version)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    version = version2;

    // deleting the current version should work
    version2 = deleteAndGetVersion("1", params("_version_", Long.toString(version)));

    try {
      // overwriting the previous existing doc should now fail (since it was deleted)
      version2 = addAndGetVersion(sdoc("id","1"), params("_version_", Long.toString(version)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    try {
      // deleting the previous existing doc should now fail (since it was deleted)
      version2 = deleteAndGetVersion("1", params("_version_", Long.toString(version)));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    // overwriting a negative version should work
    version2 = addAndGetVersion(sdoc("id","1"), params("_version_", Long.toString(-(version-1))));
    assertTrue(version2 > version);
    version = version2;

    // sanity test that we see the right version via rtg
    assertJQ(req("qt","/get","id","1")
        ,"=={'doc':{'id':'1','_version_':" + version + "}}"
    );
  }

