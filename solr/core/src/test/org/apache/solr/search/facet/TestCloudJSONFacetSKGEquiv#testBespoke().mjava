  /** 
   * Test some small, hand crafted, but non-trivial queries that are
   * easier to trace/debug then a pure random monstrosity.
   * (ie: if something obvious gets broken, this test may fail faster and in a more obvious way then testRandom)
   */
  public void testBespoke() throws Exception {
    { // two trivial single level facets
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      facets.put("str", new TermFacet(multiStrField(9), UNIQUE_FIELD_VALS, 0, null, null));
      facets.put("int", new TermFacet(multiIntField(9), UNIQUE_FIELD_VALS, 0, null, null));
      assertFacetSKGsAreConsistent(facets, multiStrField(7)+":11", multiStrField(5)+":9", "*:*");
    }
    
    { // trivial single level facet w/sorting on skg and refinement explicitly disabled
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      facets.put("xxx", new TermFacet(multiStrField(9), UNIQUE_FIELD_VALS, 0, "skg desc", false));
      assertFacetSKGsAreConsistent(facets, multiStrField(7)+":11", multiStrField(5)+":9", "*:*");
    }
    
    { // trivial single level facet w/ perSeg
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      facets.put("xxx", new TermFacet(multiStrField(9),
                                      map("perSeg", true)));
      
      assertFacetSKGsAreConsistent(facets, multiStrField(7)+":11", multiStrField(5)+":9", "*:*");
    }
    
    { // trivial single level facet w/ prefix 
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      facets.put("xxx", new TermFacet(multiStrField(9),
                                      map("prefix", "2")));
      
      
      assertFacetSKGsAreConsistent(facets, multiStrField(7)+":11", multiStrField(5)+":9", "*:*");
    }
    
    { // trivial single level facet w/ 2 diff ways to request "limit = (effectively) Infinite"
      // to sanity check refinement of buckets missing from other shard in both cases
      
      // NOTE that these two queries & facets *should* effectively identical given that the
      // very large limit value is big enough no shard will ever return that may terms,
      // but the "limit=-1" case it actaully triggers slightly different code paths
      // because it causes FacetField.returnsPartial() to be "true"
      for (int limit : new int[] { 999999999, -1 }) {
        Map<String,TermFacet> facets = new LinkedHashMap<>();
        facets.put("top_facet_limit__" + limit, new TermFacet(multiStrField(9), limit, 0, "skg desc", true));
        assertFacetSKGsAreConsistent(facets, multiStrField(7)+":11", multiStrField(5)+":9", "*:*");
      }
    }
    
    { // multi-valued facet field w/infinite limit and an extra (non-SKG / non-sweeping) stat
      final TermFacet xxx = new TermFacet(multiStrField(12), -1, 0, "count asc", false);
      xxx.subFacets.put("sum", new SumFacet(multiIntField(4)));
      final Map<String,TermFacet> facets = new LinkedHashMap<>();
      facets.put("xxx", xxx);
      assertFacetSKGsAreConsistent(facets,
                                   buildORQuery(multiStrField(13) + ":26",
                                                multiStrField(6) + ":33",
                                                multiStrField(9) + ":24"),
                                   buildORQuery(multiStrField(4) + ":27",
                                                multiStrField(12) + ":18",
                                                multiStrField(2) + ":28",
                                                multiStrField(13) + ":50"),
                                   "*:*");
    }
  }

