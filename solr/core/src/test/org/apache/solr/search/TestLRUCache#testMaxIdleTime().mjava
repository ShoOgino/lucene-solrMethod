  @Test
  public void testMaxIdleTime() throws Exception {
    int IDLE_TIME_SEC = 600;
    long IDLE_TIME_NS = TimeUnit.NANOSECONDS.convert(IDLE_TIME_SEC, TimeUnit.SECONDS);
    LRUCache<String, Accountable> cache = new LRUCache<>();
    cache.initializeMetrics(metricManager, registry, "foo", scope);
    Map<String, String> params = new HashMap<>();
    params.put("size", "6");
    params.put("maxIdleTime", "" + IDLE_TIME_SEC);
    CacheRegenerator cr = new NoOpRegenerator();
    Object o = cache.init(params, null, cr);
    cache.setSyntheticEntries(true);
    for (int i = 0; i < 4; i++) {
      cache.put("" + i, new Accountable() {
        @Override
        public long ramBytesUsed() {
          return 1024 * 1024;
        }
      });
    }
    // no evictions yet
    assertEquals(4, cache.size());
    long currentTime = TimeSource.NANO_TIME.getEpochTimeNs();
    cache.putCacheValue("4", new LRUCache.CacheValue<>(new Accountable() {
      @Override
      public long ramBytesUsed() {
        return 0;
      }
    }, currentTime - IDLE_TIME_NS * 2));
    assertEquals(4, cache.size());
    assertNull(cache.get("4"));
    Map<String, Object> stats = cache.getMetricsMap().getValue();
    assertEquals(1, ((Number)stats.get("evictionsIdleTime")).intValue());
  }

