  public void testCyclicAliasing() throws Exception {
    try {
      ignoreException(".*Field aliases lead to a cycle.*");
      try {
        h.query(req("defType","edismax", "q","blarg", "qf","who", "f.who.qf","name","f.name.qf","who"));
        fail("Simple cyclic alising not detected");
      } catch (SolrException e) {
        assertTrue(e.getCause().getMessage().contains("Field aliases lead to a cycle"));
      }
      
      try {
        h.query(req("defType","edismax", "q","blarg", "qf","who", "f.who.qf","name","f.name.qf","myalias", "f.myalias.qf","who"));
        fail("Cyclic alising not detected");
      } catch (SolrException e) {
        assertTrue(e.getCause().getMessage().contains("Field aliases lead to a cycle"));
      }
      
      try {
        h.query(req("defType","edismax", "q","blarg", "qf","field1", "f.field1.qf","field2 field3","f.field2.qf","field4 field5", "f.field4.qf","field5", "f.field5.qf","field6", "f.field3.qf","field6"));
      } catch (SolrException e) {
        assertFalse("This is not cyclic alising", e.getCause().getMessage().contains("Field aliases lead to a cycle"));
        assertTrue(e.getCause().getMessage().contains("not a valid field name"));
      }
      
      try {
        h.query(req("defType","edismax", "q","blarg", "qf","field1", "f.field1.qf","field2 field3", "f.field2.qf","field4 field5", "f.field4.qf","field5", "f.field5.qf","field4"));
        fail("Cyclic alising not detected");
      } catch (SolrException e) {
        assertTrue(e.getCause().getMessage().contains("Field aliases lead to a cycle"));
      }
      
      try {
        h.query(req("defType","edismax", "q","who:(Zapp Pig)", "qf","text", "f.who.qf","name","f.name.qf","myalias", "f.myalias.qf","who"));
        fail("Cyclic alising not detected");
      } catch (SolrException e) {
        assertTrue(e.getCause().getMessage().contains("Field aliases lead to a cycle"));
      }
    } finally {
      resetExceptionIgnores();
    }
  }

