  /** 
   * Sanity check that our method of varying the <code>{@value RelatednessAgg#SWEEP_COLLECTION}</code> in conjunction with the
   * <code>method</code> params works and can be verified by inspecting the debug output of basic requests.
   */
  public void testWhiteboxSanitySweepDebug() throws Exception {
    // NOTE: json.facet debugging output can be wonky, particularly when dealing with cloud
    // so for these queries we keep it simple:
    // - only one "top" facet per request
    // - no refinement
    // even with those constraints in place, a single facet can (may/sometimes?) produce multiple debug
    // blocks - aparently due to shard merging? So...
    // - only inspect the "first" debug NamedList in the results
    //
    
    final SolrParams baseParams = params("rows","0",
                                         "debug","true", // SOLR-14451
                                         // *:* is the only "safe" query for this test,
                                         // to ensure we always have at least one bucket for every facet
                                         // so we can be confident in getting the debug we expect...
                                         "q", "*:*",
                                         "fore", multiStrField(7)+":11",
                                         "back", "*:*");
    
    // simple individual facet that sorts on an skg stat...
    //
    // all results we test should be the same even if there is another 'skg_extra' stat,
    // it shouldn't be involved in the sweeping at all.
    for (Facet extra : Arrays.asList(null,  new RelatednessFacet(multiStrField(2)+":9", null))) {
      // choose a single value string so we know both 'dv' (sweep) and 'dvhash' (no sweep) can be specified
      final TermFacet f = new TermFacet(soloStrField(9), 10, 0, "skg desc", null);
      if (null != extra) {
        f.subFacets.put("skg_extra", extra);
      }
      final Map<String,TermFacet> facets = new LinkedHashMap<>();
      facets.put("str", f);
        
      final SolrParams facetParams
        = SolrParams.wrapDefaults(params("method_val", "dv",
                                         "json.facet", Facet.toJSONFacetParamValue(facets)),
                                  baseParams);
      
      // both default sweep option and explicit sweep should give same results...
      for (SolrParams sweepParams : Arrays.asList(params(),
                                                  params("sweep_key", RelatednessAgg.SWEEP_COLLECTION,
                                                         "sweep_val", "true"))) {
        final SolrParams params = SolrParams.wrapDefaults(sweepParams, facetParams);
        
        final NamedList<Object> debug = getFacetDebug(params);
        assertEquals(FacetFieldProcessorByArrayDV.class.getSimpleName(), debug.get("processor"));
        @SuppressWarnings("unchecked")
        final NamedList<Object> sweep_debug = (NamedList<Object>) debug.get(SWEEP_COLLECTION_DEBUG_KEY);
        assertNotNull(sweep_debug);
        assertEquals("count", sweep_debug.get("base"));
        assertEquals(Arrays.asList("skg!fg","skg!bg"), sweep_debug.get("accs"));
        assertEquals(Arrays.asList("skg"), sweep_debug.get("mapped"));
      }
      { // 'dv' will always *try* to sweep, but disabling on stat should mean debug is mostly empty...
        final SolrParams params = SolrParams.wrapDefaults(params("sweep_key", RelatednessAgg.SWEEP_COLLECTION,
                                                                 "sweep_val", "false"),
                                                          facetParams);
        final NamedList<Object> debug = getFacetDebug(params);
        assertEquals(FacetFieldProcessorByArrayDV.class.getSimpleName(), debug.get("processor"));
        @SuppressWarnings("unchecked")
        final NamedList<Object> sweep_debug = (NamedList<Object>) debug.get(SWEEP_COLLECTION_DEBUG_KEY);
        assertNotNull(sweep_debug);
        assertEquals("count", sweep_debug.get("base"));
        assertEquals(Collections.emptyList(), sweep_debug.get("accs"));
        assertEquals(Collections.emptyList(), sweep_debug.get("mapped"));
      }
      { // if we override 'dv' with 'hashdv' which doesn't sweep, our sweep debug should be empty,
        // even if the skg stat does ask for sweeping explicitly...
        final SolrParams params = SolrParams.wrapDefaults(params("method_val", "dvhash",
                                                                 "sweep_key", RelatednessAgg.SWEEP_COLLECTION,
                                                                 "sweep_val", "true"),
                                                          facetParams);
        final NamedList<Object> debug = getFacetDebug(params);
        assertEquals(FacetFieldProcessorByHashDV.class.getSimpleName(), debug.get("processor"));
        assertNull(debug.get(SWEEP_COLLECTION_DEBUG_KEY));
      }
    }

    // simple facet that sorts on an skg stat but uses prelim_sort on count
    //
    // all results we test should be the same even if there is another 'skg_extra' stat,
    // neither skg should be involved in the sweeping at all.
    for (Facet extra : Arrays.asList(null,  new RelatednessFacet(multiStrField(2)+":9", null))) {
      // choose a single value string so we know both 'dv' (sweep) and 'dvhash' (no sweep) can be specified
      final TermFacet f = new TermFacet(soloStrField(9), map("limit", 3, "overrequest", 0,
                                                             "sort", "skg desc",
                                                             "prelim_sort", "count asc"));
      if (null != extra) {
        f.subFacets.put("skg_extra", extra);
      }
      final Map<String,TermFacet> facets = new LinkedHashMap<>();
      facets.put("str", f);
        
      final SolrParams facetParams
        = SolrParams.wrapDefaults(params("method_val", "dv",
                                         "json.facet", Facet.toJSONFacetParamValue(facets)),
                                  baseParams);

      // default sweep as well as any explicit sweep=true/false values should give same results: no sweeping
      for (SolrParams sweepParams : Arrays.asList(params(),
                                                  params("sweep_key", RelatednessAgg.SWEEP_COLLECTION,
                                                         "sweep_val", "false"),
                                                  params("sweep_key", RelatednessAgg.SWEEP_COLLECTION,
                                                         "sweep_val", "true"))) {
        final SolrParams params = SolrParams.wrapDefaults(sweepParams, facetParams);
        
        final NamedList<Object> debug = getFacetDebug(params);
        assertEquals(FacetFieldProcessorByArrayDV.class.getSimpleName(), debug.get("processor"));
        @SuppressWarnings("unchecked")
        final NamedList<Object> sweep_debug = (NamedList<Object>) debug.get(SWEEP_COLLECTION_DEBUG_KEY);
        assertNotNull(sweep_debug);
        assertEquals("count", sweep_debug.get("base"));
        assertEquals(Collections.emptyList(), sweep_debug.get("accs"));
        assertEquals(Collections.emptyList(), sweep_debug.get("mapped"));
      }
    }
    
    { // single facet with infinite limit + multiple skgs...
      // this should trigger MultiAcc collection, causing sweeping on both skg functions
      //
      // all results we test should be the same even if there is another 'min' stat,
      // in each term facet.  it shouldn't affect the sweeping/MultiAcc at all.
      for (Facet extra : Arrays.asList(null,  new SumFacet(multiIntField(2)))) {
        final Map<String,TermFacet> facets = new LinkedHashMap<>();
        final TermFacet facet = new TermFacet(soloStrField(9), -1, 0, "skg2 desc", null);
        facet.subFacets.put("skg2", new RelatednessFacet(multiStrField(2)+":9", null));
        if (null != extra) {
          facet.subFacets.put("sum", extra);
        }
        facets.put("str", facet);
        final SolrParams facetParams
          = SolrParams.wrapDefaults(params("method_val", "dv",
                                           "json.facet", Facet.toJSONFacetParamValue(facets)),
                                    baseParams);
        
        // both default sweep option and explicit sweep should give same results...
        for (SolrParams sweepParams : Arrays.asList(params(),
                                                    params("sweep_key", RelatednessAgg.SWEEP_COLLECTION,
                                                           "sweep_val", "true"))) {
          final SolrParams params = SolrParams.wrapDefaults(sweepParams, facetParams);
          
          final NamedList<Object> debug = getFacetDebug(params);
          assertEquals(FacetFieldProcessorByArrayDV.class.getSimpleName(), debug.get("processor"));
          @SuppressWarnings("unchecked")
          final NamedList<Object> sweep_debug = (NamedList<Object>) debug.get(SWEEP_COLLECTION_DEBUG_KEY);
          assertNotNull(sweep_debug);
          assertEquals("count", sweep_debug.get("base"));
          assertEquals(Arrays.asList("skg!fg","skg!bg","skg2!fg","skg2!bg"), sweep_debug.get("accs"));
          assertEquals(Arrays.asList("skg","skg2"), sweep_debug.get("mapped"));
        }
      }
    }
    
    // nested facets that both sort on an skg stat
    // (set limit + overrequest tiny to keep multishard response managable)
    //
    // all results we test should be the same even if there is another 'skg_extra' stat,
    // in each term facet.  they shouldn't be involved in the sweeping at all.
    for (Facet extra : Arrays.asList(null,  new RelatednessFacet(multiStrField(2)+":9", null))) {
      // choose single value strings so we know both 'dv' (sweep) and 'dvhash' (no sweep) can be specified
      // choose 'id' for the parent facet so we are garunteed some child facets
      final TermFacet parent = new TermFacet("id", 1, 0, "skg desc", false);
      final TermFacet child = new TermFacet(soloStrField(7), 1, 0, "skg desc", false);
      parent.subFacets.put("child", child);
      if (null != extra) {
        parent.subFacets.put("skg_extra", extra);
        child.subFacets.put("skg_extra", extra);
      }
      final Map<String,TermFacet> facets = new LinkedHashMap<>();
      facets.put("parent", parent);
        
      final SolrParams facetParams
        = SolrParams.wrapDefaults(params("method_val", "dv",
                                         "json.facet", Facet.toJSONFacetParamValue(facets)),
                                  baseParams);
      // both default sweep option and explicit sweep should give same results...
      for (SolrParams sweepParams : Arrays.asList(params(),
                                                  params("sweep_key", RelatednessAgg.SWEEP_COLLECTION,
                                                         "sweep_val", "true"))) {
        final SolrParams params = SolrParams.wrapDefaults(sweepParams, facetParams);
        
        final NamedList<Object> parentDebug = getFacetDebug(params);
        assertEquals("id", parentDebug.get("field"));
        assertNotNull(parentDebug.get("sub-facet"));
        // may be multiples from diff shards, just use first one
        @SuppressWarnings("unchecked")
        final NamedList<Object> childDebug = ((List<NamedList<Object>>)parentDebug.get("sub-facet")).get(0);
        assertEquals(soloStrField(7), childDebug.get("field"));

        // these should all be true for both the parent and the child debug..
        for (NamedList<Object> debug : Arrays.asList(parentDebug, childDebug)) {
          assertEquals(FacetFieldProcessorByArrayDV.class.getSimpleName(), debug.get("processor"));
          @SuppressWarnings("unchecked")
          final NamedList<Object> sweep_debug = (NamedList<Object>) debug.get(SWEEP_COLLECTION_DEBUG_KEY);
          assertNotNull(sweep_debug);
          assertEquals("count", sweep_debug.get("base"));
          assertEquals(Arrays.asList("skg!fg","skg!bg"), sweep_debug.get("accs"));
          assertEquals(Arrays.asList("skg"), sweep_debug.get("mapped"));
        }
      }
    }
  }

