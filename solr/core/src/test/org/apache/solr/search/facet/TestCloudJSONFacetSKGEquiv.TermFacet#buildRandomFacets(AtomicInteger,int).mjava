    /** 
     * recursive helper method for building random facets
     *
     * @param keyCounter used to ensure every generated facet has a unique key name
     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. 
     */
    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {
      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'
      Map<String,TermFacet> results = new LinkedHashMap<>();
      for (int i = 0; i < numFacets; i++) {
        if (keyCounter.get() < 3) { // a hard limit on the total number of facets (regardless of depth) to reduce OOM risk

          final TermFacet facet = TermFacet.buildRandom();
          
          results.put("facet_" + keyCounter.incrementAndGet(), facet);
          if (0 < maxDepth) {
            // if we're going wide, don't go deep
            final int nextMaxDepth = Math.max(0, maxDepth - numFacets);
            facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));
          }
          
          // we get one implicit RelatednessFacet automatically,
          // randomly add 1 or 2 more ... 3/5th chance of being '0'
          final int numExtraSKGStats = Math.max(0, TestUtil.nextInt(random(), -2, 2)); 
          for (int skgId = 0; skgId < numExtraSKGStats; skgId++) {
            // sometimes we overwrite the trivial defualt "skg" with this one...
            final String key = (0 == skgId && 0 == TestUtil.nextInt(random(), 0, 5)) ? "skg" : "skg" + skgId;
            facet.subFacets.put(key, RelatednessFacet.buildRandom());
          }

          if (1 == TestUtil.nextInt(random(), 0, 4)) {
            // occasionally add in a non-SKG related stat...
            facet.subFacets.put("sum", SumFacet.buildRandom());
          }
        }
      }
      return results;
    }

