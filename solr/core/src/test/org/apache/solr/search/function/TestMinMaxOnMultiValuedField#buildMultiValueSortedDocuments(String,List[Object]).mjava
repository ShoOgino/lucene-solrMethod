  /**
   * Given a (multivalued) field name and an (ascending) sorted list of values, this method will generate a List of Solr Documents of the same size such that:
   * <ul>
   *  <li>For each non-null value in the original list, the corrisponding document in the result will have that value in the specified field.</li>
   *  <li>For each null value in the original list, the corrisponding document in teh result will have <em>NO</em> values in the specified field.</li>
   *  <li>If a document has a value in the field, then some random number of values that come <em>after</em> that value in the original list may also be included in the specified field.</li>
   *  <li>Every document in the result will have a randomly asssigned 'id', unique realitive to all other documents in the result.</li>
   * </ul>
   */
  private static final List<SolrInputDocument> buildMultiValueSortedDocuments(final String f,
                                                                              final List<Object> vals) {
    // build a list of docIds that we can shuffle (so the id order doesn't match the value order)
    List<Integer> ids = new ArrayList<>(vals.size());
    for (int i = 0; i < vals.size(); i++) {
      ids.add(i+1);
    }
    Collections.shuffle(ids, random());
    
    final List<SolrInputDocument> docs = new ArrayList<>(vals.size());
    for (int i = 0; i < vals.size(); i++) {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("id", ids.get(i));
      Object primaryValue = vals.get(i);
      if (null != primaryValue) {
        doc.addField(f, primaryValue);
        final int extraValCount = random().nextInt(vals.size() - i);
        for (int j = 0; j < extraValCount; j++) {
          Object extraVal = vals.get(TestUtil.nextInt(random(), i+1, vals.size() - 1));
          if (null != extraVal) {
            doc.addField(f, extraVal);
          }
        }
      }
      docs.add(doc);
    }
    return docs;
  }

