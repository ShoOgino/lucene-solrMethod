  private void doTestGetPutCompute(Map<String, SummaryStatistics> ratioStats, Map<String, SummaryStatistics> timeStats, int numThreads, boolean useCompute) throws Exception {
    for (Class<? extends SolrCache> clazz : IMPLS) {
      SolrMetricManager metricManager = new SolrMetricManager();
      SolrCache<String, String> cache = clazz.getDeclaredConstructor().newInstance();
      Map<String, String> params = new HashMap<>();
      params.put("size", "" + NUM_KEYS);
      CacheRegenerator cr = new NoOpRegenerator();
      Object o = cache.init(params, null, cr);
      cache.setState(SolrCache.State.LIVE);
      cache.initializeMetrics(new SolrMetricsContext(metricManager, "foo", "bar"), "foo");
      AtomicBoolean stop = new AtomicBoolean();
      SummaryStatistics perImplRatio = ratioStats.computeIfAbsent(clazz.getSimpleName(), c -> new SummaryStatistics());
      SummaryStatistics perImplTime = timeStats.computeIfAbsent(clazz.getSimpleName(), c -> new SummaryStatistics());
      CountDownLatch startLatch = new CountDownLatch(1);
      CountDownLatch stopLatch = new CountDownLatch(numThreads * NUM_KEYS);
      List<Thread> runners = new ArrayList<>();
      for (int i = 0; i < numThreads; i++) {
        Thread t = new Thread(() -> {
          try {
            startLatch.await();
            int ik = 0;
            while (!stop.get()) {
              String key = keys[ik % NUM_KEYS];
              ik++;
              if (useCompute) {
                String value = cache.computeIfAbsent(key, k -> VALUE);
                assertNotNull(value);
              } else {
                String value = cache.get(key);
                if (value == null) {
                  // increase a likelihood of context switch
                  Thread.yield();
                  cache.put(key, VALUE);
                }
              }
              Thread.yield();
              stopLatch.countDown();
            }
          } catch (InterruptedException e) {
            fail(e.toString());
            return;
          }
        });
        t.start();
        runners.add(t);
      }
      // fire them up
      long startTime = System.nanoTime();
      startLatch.countDown();
      stopLatch.await();
      stop.set(true);
      for (Thread t : runners) {
        t.join();
      }
      long stopTime = System.nanoTime();
      Map<String, Object> metrics = cache.getSolrMetricsContext().getMetricsSnapshot();
      perImplRatio.addValue(
          Double.parseDouble(String.valueOf(metrics.get("CACHE.foo.hitratio"))));
      perImplTime.addValue((double)(stopTime - startTime));
      cache.close();
    }
  }

