  @Test
  public void testDomainErrors() throws Exception {
    Client client = Client.localClient();
    client.deleteByQuery("*:*", null);
    indexSimple(client);

    // using assertQEx so that, status code and error message can be asserted
    assertQEx("Should Fail as filter with qparser in domain becomes null",
        "QParser yields null, perhaps unresolved parameter reference in: {!query v=$NOfilt}",
        req("q", "*:*", "json.facet", "{cat_s:{type:terms,field:cat_s,domain:{filter:'{!query v=$NOfilt}'}}}"),
        SolrException.ErrorCode.BAD_REQUEST
    );

    assertQEx("Should Fail as filter in domain becomes null",
        "QParser yields null, perhaps unresolved parameter reference in: {!v=$NOfilt}",
        req("q", "*:*", "json.facet", "{cat_s:{type:terms,field:cat_s,domain:{filter:'{!v=$NOfilt}'}}}"),
        SolrException.ErrorCode.BAD_REQUEST
    );

    // when domain type is invalid
    assertQEx("Should Fail as domain not of type map",
        "Expected Map for 'domain', received String=bleh , path=facet/cat_s",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,domain:bleh}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    // when domain = null, should not throw exception
    assertQ("Should pass as no domain is specified",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s}}"));

    // when blockChildren or blockParent is passed but not of string
    assertQEx("Should Fail as blockChildren is of type map",
        "Expected string type for param 'blockChildren' but got LinkedHashMap = {} , path=facet/cat_s",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,domain:{blockChildren:{}}}}"),
        SolrException.ErrorCode.BAD_REQUEST);

    assertQEx("Should Fail as blockParent is of type map",
        "Expected string type for param 'blockParent' but got LinkedHashMap = {} , path=facet/cat_s",
        req("q", "*:*", "rows", "0", "json.facet", "{cat_s:{type:terms,field:cat_s,domain:{blockParent:{}}}}"),
        SolrException.ErrorCode.BAD_REQUEST);

  }

