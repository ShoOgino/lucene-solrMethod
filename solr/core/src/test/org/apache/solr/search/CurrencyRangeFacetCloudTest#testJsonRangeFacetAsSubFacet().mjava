  @Test
  public void testJsonRangeFacetAsSubFacet() throws Exception {

    // limit=1, overrequest=1, with refinement enabled
    // filter out the first 5 docs (by id), which should ensure that 'x2' is the top bucket overall...
    //   ...except in some rare sharding cases where it doesn't make it into the top 2 terms.
    // 
    // So the filter also explicitly accepts all 'x2' docs -- ensuring we have enough matches containing that term for it
    // to be enough of a candidate in phase#1, but for many shard arrangements it won't be returned by all shards resulting
    // in refinement being neccessary to get the x_s:x2 sub-shard ranges from shard(s) where x_s:x2 is only tied for the
    // (shard local) top term count and would lose the (index order) tie breaker with x_s:x0 or x_s:x1
    final String filter = "id_i1:["+VALUES.size()+" TO *] OR x_s:x2";

    // the *facet* results should be the same regardless of wether we filter via fq, or using a domain filter on the top facet
    for (boolean use_domain : Arrays.asList(true, false)) {
      final String domain = use_domain ? "domain: { filter:'" + filter + "'}," : "";
      final SolrQuery solrQuery = new SolrQuery("q", (use_domain ? "*:*" : filter),
                                                "rows", "0", "json.facet",
                                                "{ foo:{ type:terms, field:x_s, refine:true, limit:1, overrequest:1, " + domain +
                                                "        facet: { bar:{ type:range, field:"+FIELD+", other:all, " +
                                                "                       start:'8,EUR', gap:'2,EUR', end:'22,EUR' }} } }");
      final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);
      try {
        // this top level result count sanity check that should vary based on how we are filtering our facets...
        assertEquals(use_domain ? 15 : 11, rsp.getResults().getNumFound());
        
        @SuppressWarnings({"unchecked"})
        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get("facets")).get("foo");
        
        // sanity check...
        // because of the facet limit, foo should only have 1 bucket
        // because of the fq, the val should be "x2" and the count=5
        @SuppressWarnings({"unchecked"})
        final List<NamedList<Object>> foo_buckets = (List<NamedList<Object>>) foo.get("buckets");
        assertEquals(1, foo_buckets.size());
        assertEquals("x2", foo_buckets.get(0).get("val"));
        assertEquals("foo bucket count", 5L, foo_buckets.get(0).get("count"));
        
        @SuppressWarnings({"unchecked"})
        final NamedList<Object> bar = (NamedList<Object>)foo_buckets.get(0).get("bar");
        
        // these are the 'x2' specific counts, based on our fq...
        
        assertEquals("before", 2L, ((NamedList)bar.get("before")).get("count"));
        assertEquals("after", 1L, ((NamedList)bar.get("after")).get("count"));
        assertEquals("between", 2L, ((NamedList)bar.get("between")).get("count"));
        
        @SuppressWarnings({"unchecked", "rawtypes"})
        final List<NamedList> buckets = (List<NamedList>) bar.get("buckets");
        assertEquals(7, buckets.size());
        for (int i = 0; i < 7; i++) {
          @SuppressWarnings({"rawtypes"})
          NamedList bucket = buckets.get(i);
          assertEquals((8 + (i * 2)) + ".00,EUR", bucket.get("val"));
          // 12,EUR & 15,EUR are the 2 values that align with x2 docs
          assertEquals("bucket #" + i, (i == 2 || i == 3) ? 1L : 0L, bucket.get("count"));
        }
      } catch (AssertionError|RuntimeException ae) {
        throw new AssertionError(solrQuery.toString() + " -> " + rsp.toString() + " ===> " + ae.getMessage(), ae);
      }
    }
  }

