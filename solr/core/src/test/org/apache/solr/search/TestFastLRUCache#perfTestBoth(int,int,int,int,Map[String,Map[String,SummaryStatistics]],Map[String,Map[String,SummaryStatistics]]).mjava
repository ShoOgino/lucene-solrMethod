  void perfTestBoth(int maxThreads, int numGets, int cacheSize, int maxKey,
                    Map<String, Map<String, SummaryStatistics>> timeStats,
                    Map<String, Map<String, SummaryStatistics>> hitStats) {
    for (int nThreads = 1 ; nThreads <= maxThreads; nThreads++) {
      String testKey = "threads=" + nThreads + ",gets=" + numGets + ",size=" + cacheSize + ",maxKey=" + maxKey;
      System.err.println(testKey);
      for (int i = 0; i < NUM_RUNS; i++) {
        double[] data = cachePerfTest(new LRUCache(), nThreads, numGets, cacheSize, maxKey);
        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())
            .computeIfAbsent("LRUCache", k -> new SummaryStatistics())
            .addValue(data[0]);
        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())
            .computeIfAbsent("LRUCache", k -> new SummaryStatistics())
            .addValue(data[1]);
        data = cachePerfTest(new CaffeineCache(), nThreads, numGets, cacheSize, maxKey);
        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())
            .computeIfAbsent("CaffeineCache", k -> new SummaryStatistics())
            .addValue(data[0]);
        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())
            .computeIfAbsent("CaffeineCache", k -> new SummaryStatistics())
            .addValue(data[1]);
        data = cachePerfTest(new FastLRUCache(), nThreads, numGets, cacheSize, maxKey);
        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())
            .computeIfAbsent("FastLRUCache", k -> new SummaryStatistics())
            .addValue(data[0]);
        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())
            .computeIfAbsent("FastLRUCache", k -> new SummaryStatistics())
            .addValue(data[1]);
      }
    }
  }

