  @Test
  public void testRandomRangeQueries() throws Exception {
    String handler="";
    final String[] fields = {"foo_s","foo_i","foo_l","foo_f","foo_d"
            ,"foo_ti","foo_tl","foo_tf","foo_td"
    };
    final int l=5;
    final int u=25;


    createIndex(15, new DocProcessor() {
      @Override
      public void process(SolrInputDocument doc) {
        addInt(doc, l,u, fields);
      }
    });
    assertU(commit());
    
    // fields that a normal range query will work correctly on
    String[] norm_fields = {
            "foo_i","foo_l","foo_f","foo_d"
            ,"foo_ti","foo_tl","foo_tf","foo_td"

    };
    
    // fields that a value source range query should work on
    String[] frange_fields = {"foo_i","foo_l","foo_f","foo_d"};

    for (int i=0; i<1000; i++) {
      int lower = l + r.nextInt(u-l+10)-5;
      int upper = lower + r.nextInt(u+5-lower);
      boolean lowerMissing = r.nextInt(10)==1;
      boolean upperMissing = r.nextInt(10)==1;
      boolean inclusive = lowerMissing || upperMissing || r.nextBoolean();

      // lower=2; upper=2; inclusive=true;      
      // inclusive=true; lowerMissing=true; upperMissing=true;    

      List<String> qs = new ArrayList<>();
      for (String field : norm_fields) {
        String q = field + ':' + (inclusive?'[':'{')
                + (lowerMissing?"*":lower)
                + " TO "
                + (upperMissing?"*":upper)
                + (inclusive?']':'}');
        qs.add(q);
      }
      for (String field : frange_fields) {
        String q = "{!frange v="+field
                + (lowerMissing?"":(" l="+lower))
                + (upperMissing?"":(" u="+upper))
                + (inclusive?"":" incl=false")
                + (inclusive?"":" incu=false")
                + "}";
        qs.add(q);
      }

      SolrQueryResponse last=null;
      for (String q : qs) {
        // System.out.println("QUERY="+q);
        SolrQueryRequest req = req("q",q,"rows","1000");
        SolrQueryResponse qr = h.queryAndResponse(handler, req);
        if (last != null) {
          // we only test if the same docs matched since some queries will include factors like idf, etc.
          DocList rA = ((ResultContext)qr.getValues().get("response")).docs;
          DocList rB = ((ResultContext)last.getValues().get("response")).docs;
          sameDocs( rA, rB );
        }
        req.close();
        last = qr;
      }
    }
  }

