  @Test
  public void testRandomRangeQueries() throws Exception {
    String handler="";
    final String[] fields = {"foo_s","foo_i","foo_l","foo_f","foo_d",
                             "foo_ti","foo_tl","foo_tf","foo_td" };
    
    // NOTE: foo_s supports ranges, but for the arrays below we are only
    // interested in fields that support *equivilent* ranges -- strings
    // are not ordered the same as ints/longs, so we can't test the ranges
    // for equivilence across diff fields.
    //
    // fields that a normal range query will work correctly on
    String[] norm_fields = {"foo_i","foo_l","foo_f","foo_d",
                            "foo_ti","foo_tl","foo_tf","foo_td" };
    // fields that a value source range query should work on
    String[] frange_fields = {"foo_i","foo_l","foo_f","foo_d"};

    final int l= -1 * atLeast(50);
    final int u= atLeast(250);

    // sometimes a very small index, sometimes a very large index
    final int numDocs = random().nextBoolean() ? random().nextInt(50) : atLeast(1000);
    createIndex(numDocs, new DocProcessor() {
      @Override
      public void process(SolrInputDocument doc) {
        // 10% of the docs have missing values
        if (random().nextInt(10)!=0) addInt(doc, l,u, fields);
      }
    });
    assertU(commit());

    final int numIters = atLeast(1000);
    for (int i=0; i < numIters; i++) {
      int lower = TestUtil.nextInt(random(), 2 * l, u);
      int upper = TestUtil.nextInt(random(), lower, 2 * u);
      boolean lowerMissing = random().nextInt(10)==1;
      boolean upperMissing = random().nextInt(10)==1;
      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();

      // lower=2; upper=2; inclusive=true;      
      // inclusive=true; lowerMissing=true; upperMissing=true;    

      List<String> qs = new ArrayList<>();
      for (String field : norm_fields) {
        String q = field + ':' + (inclusive?'[':'{')
                + (lowerMissing?"*":lower)
                + " TO "
                + (upperMissing?"*":upper)
                + (inclusive?']':'}');
        qs.add(q);
      }
      for (String field : frange_fields) {
        String q = "{!frange v="+field
                + (lowerMissing?"":(" l="+lower))
                + (upperMissing?"":(" u="+upper))
                + (inclusive?"":" incl=false")
                + (inclusive?"":" incu=false")
                + "}";
        qs.add(q);
      }
      String lastQ = null;
      SolrQueryResponse last=null;
      for (String q : qs) {
        // System.out.println("QUERY="+q);
        SolrQueryRequest req = req("q",q,"rows",""+numDocs);
        SolrQueryResponse qr = h.queryAndResponse(handler, req);
        if (last != null) {
          // we only test if the same docs matched since some queries will include factors like idf, etc.
          DocList rA = ((ResultContext)qr.getResponse()).getDocList();
          DocList rB = ((ResultContext)last.getResponse()).getDocList();
          sameDocs(q + " vs " + lastQ, rA, rB );
        }
        req.close();
        last = qr;
        lastQ = q;
      }
    }

    // now build some random queries (against *any* field) and validate that using it in a DBQ changes
    // the index by the expected number of docs
    long numDocsLeftInIndex = numDocs;
    final int numDBQs= atLeast(10);
    for (int i=0; i < numDBQs; i++) {
      int lower = TestUtil.nextInt(random(), 2 * l, u);
      int upper = TestUtil.nextInt(random(), lower, 2 * u);
      boolean lowerMissing = random().nextInt(10)==1;
      boolean upperMissing = random().nextInt(10)==1;
      boolean inclusive = lowerMissing || upperMissing || random().nextBoolean();
      
      String dbq = null;
      if (random().nextBoolean()) { // regular range
        String field = fields[random().nextInt(fields.length)];
        dbq = field + ':' + (inclusive?'[':'{')
          + (lowerMissing?"*":lower)
          + " TO "
          + (upperMissing?"*":upper)
          + (inclusive?']':'}');
       } else { // frange
        String field = frange_fields[random().nextInt(frange_fields.length)];
        dbq = "{!frange v="+field
          + (lowerMissing?"":(" l="+lower))
          + (upperMissing?"":(" u="+upper))
          + (inclusive?"":" incl=false")
          + (inclusive?"":" incu=false")
          + "}";
      }
      try (SolrQueryRequest req = req("q",dbq,"rows","0")) {
        SolrQueryResponse qr = h.queryAndResponse(handler, req);
        numDocsLeftInIndex -= ((ResultContext)qr.getResponse()).getDocList().matches();
      }
      assertU(delQ(dbq));
      assertU(commit());
      try (SolrQueryRequest req = req("q","*:*","rows","0","_trace_after_dbq",dbq)) {
        SolrQueryResponse qr = h.queryAndResponse(handler, req);
        final long allDocsFound = ((ResultContext)qr.getResponse()).getDocList().matches();
        assertEquals(dbq, numDocsLeftInIndex, allDocsFound);
      }
    }
  }

