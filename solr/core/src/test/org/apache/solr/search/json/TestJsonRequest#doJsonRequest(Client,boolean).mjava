  public static void doJsonRequest(Client client, boolean isDistrib) throws Exception {
    addDocs(client);

    // test json param
    client.testJQ( params("json","{query:'cat_s:A'}")
        , "response/numFound==2"
    );

    // invalid value
    SolrException ex = expectThrows(SolrException.class, () -> client.testJQ(params("q", "*:*", "json", "5")));
    assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());

    // this is to verify other json params are not affected
    client.testJQ( params("q", "cat_s:A", "json.limit", "1"),
        "response/numFound==2"
    );

    // test multiple json params
    client.testJQ( params("json","{query:'cat_s:A'}", "json","{filter:'where_s:NY'}")
        , "response/numFound==1"
    );

    // test multiple json params with one being zero length
    client.testJQ( params("json","{query:'cat_s:A'}", "json","{filter:'where_s:NY'}", "json","")
        , "response/numFound==1"
    );

    // test multiple json params with one being a comment
    client.testJQ( params("json","{query:'cat_s:A'}", "json","{filter:'where_s:NY'}", "json","/* */")
        , "response/numFound==1"
    );

    // test merging multi-valued params into list
    client.testJQ( params("json","{query:'*:*'}", "json","{filter:'where_s:NY'}", "json","{filter:'cat_s:A'}")
        , "response/numFound==1"
    );

    // test merging multi-valued params into list, second value is already list
    client.testJQ( params("json","{query:'*:*'}", "json","{filter:'where_s:NY'}", "json","{filter:['cat_s:A']}")
        , "response/numFound==1"
    );

    // test merging multi-valued params into list, first value is already list
    client.testJQ( params("json","{query:'*:*'}", "json","{filter:['where_s:NY']}", "json","{filter:'cat_s:A'}")
        , "response/numFound==1"
    );

    // test merging multi-valued params into list, both values are already list
    client.testJQ( params("json","{query:'*:*'}", "json","{filter:['where_s:NY']}", "json","{filter:['cat_s:A']}")
        , "response/numFound==1"
    );

    // test inserting and merging with paths
    client.testJQ( params("json.query","'*:*'", "json.filter","'where_s:NY'", "json.filter","'cat_s:A'")
        , "response/numFound==1"
    );

    // test inserting and merging with paths with an empty string and a comment
    client.testJQ( params("json.query","'*:*'", "json.filter","'where_s:NY'", "json.filter","'cat_s:A'", "json.filter","", "json.filter","/* */")
        , "response/numFound==1"
    );

    // test overwriting of non-multivalued params
    client.testJQ( params("json.query","'foo_s:NONE'", "json.filter","'where_s:NY'", "json.filter","'cat_s:A'", "json.query","'*:*'")
        , "response/numFound==1"
    );

    // normal parameter specified in the params block, including numeric params cast back to string
    client.testJQ( params("json","{params:{q:'*:*', fq:['cat_s:A','where_s:NY'], start:0, rows:5, fl:id}}")
        , "response/docs==[{id:'1'}]"
    );
    client.testJQ( params("json","{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:id, sort:'where_s asc'}}")
        , "response/numFound==2"
        , "response/docs==[{id:'4'}]"
    );
    client.testJQ( params("json","{params:{q:'*:*', fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5'], sort:'where_s asc'}}")
        , "response/numFound==2"
        , "response/docs==[{id:'4', x:5.5}]"
    );
    // test merge params
    client.testJQ( params("json","{params:{q:'*:*'}}", "json","{params:{fq:['cat_s:A','where_s:(NY OR NJ)'], start:0, rows:1, fl:[id,'x:5.5']}}", "json","{params:{sort:'where_s asc'}}")
        , "response/numFound==2"
        , "response/docs==[{id:'4', x:5.5}]"
    );


    // test offset/limit/sort/fields
    client.testJQ( params("json.query","'*:*'",  "json.offset","1", "json.limit","2", "json.sort","'id desc'", "json.fields","'id'")
        , "response/docs==[{id:'5'},{id:'4'}]"
    );
    // test offset/limit/sort/fields, multi-valued json.fields
    client.testJQ( params("json.query","'*:*'",  "json.offset","1", "json.limit","2", "json.sort","'id desc'", "json.fields","'id'", "json.fields","'x:5.5'")
        , "response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]"
    );
    // test offset/limit/sort/fields, overwriting non-multivalued params
    client.testJQ( params("json.query","'*:*'",  "json.offset","17", "json.offset","1", "json.limit","42", "json.limit","2", "json.sort","'id asc'", "json.sort","'id desc'", "json.fields","'id'", "json.fields","'x:5.5'")
        , "response/docs==[{id:'5', x:5.5},{id:'4', x:5.5}]"
    );



    // test templating before parsing JSON
    client.testJQ( params("json","${OPENBRACE} query:'cat_s:A' ${CLOSEBRACE}", "json","${OPENBRACE} filter:'where_s:NY'${CLOSEBRACE}",  "OPENBRACE","{", "CLOSEBRACE","}")
        , "response/numFound==1"
    );

    // test templating with params defined in the JSON itself!  Do we want to keep this functionality?
    client.testJQ( params("json","{params:{V1:A,V2:NY}, query:'cat_s:${V1}'}", "json","{filter:'where_s:${V2}'}")
        , "response/numFound==1"
    );


    //
    // with body
    //
    client.testJQ(params(CommonParams.STREAM_BODY, "{query:'cat_s:A'}", "stream.contentType", "application/json")
        , "response/numFound==2"
    );

    // test body in conjunction with query params
    client.testJQ(params(CommonParams.STREAM_BODY, "{query:'cat_s:A'}", "stream.contentType", "application/json", "json.filter", "'where_s:NY'")
        , "response/numFound==1"
    );

    // test that json body in params come "after" (will overwrite)
    client.testJQ(params(CommonParams.STREAM_BODY, "{query:'*:*', filter:'where_s:NY'}", "stream.contentType", "application/json", "json","{query:'cat_s:A'}")
        , "response/numFound==1"
    );

    // test that json.x params come after body
    client.testJQ(params(CommonParams.STREAM_BODY, "{query:'*:*', filter:'where_s:NY'}", "stream.contentType", "application/json", "json.query","'cat_s:A'")
        , "response/numFound==1"
    );


    // test facet with json body
    client.testJQ(params(CommonParams.STREAM_BODY, "{query:'*:*', facet:{x:'unique(where_s)'}}", "stream.contentType", "application/json")
        , "facets=={count:6,x:2}"
    );

    // test facet with json body, insert additional facets via query parameter
    client.testJQ(params(CommonParams.STREAM_BODY, "{query:'*:*', facet:{x:'unique(where_s)'}}", "stream.contentType", "application/json", "json.facet.y","{terms:{field:where_s}}", "json.facet.z","'unique(where_s)'")
        , "facets=={count:6,x:2, y:{buckets:[{val:NJ,count:3},{val:NY,count:2}]}, z:2}"
    );

    // test debug
    client.testJQ( params("json","{query:'cat_s:A'}", "json.filter","'where_s:NY'", "debug","true")
        , "debug/json=={query:'cat_s:A', filter:'where_s:NY'}"
    );

    // test query dsl
    client.testJQ( params("json", "{'query':'{!lucene}id:1'}")
        , "response/numFound==1"
    );

    client.testJQ( params("json", "{" +
            "  'query': {" +
            "    'bool' : {" +
            "      'should' : [" +
            "        {'lucene' : {'query' : 'id:1'}}," +
            "        'id:2'" +
            "      ]" +
            "    }" +
            "  }" +
            "}")
        , "response/numFound==2"
    );

    client.testJQ( params("json", "{" +
            "  'query': {" +
            "    'bool' : {" +
            "      'should' : [" +
            "        {'#MYTAG' : 'id:1'}," +  // tagged query (the tag should do nothing here)
            "        'id:2'" +
            "      ]" +
            "    }" +
            "  }" +
            "}")
        , "response/numFound==2"
    );

    client.testJQ( params("json", "{   " +
            " query : {" +
            "  boost : {" +
            "   query : {" +
            "    lucene : {      " +
            "     df : cat_s,      " +
            "     query : A     " +
            "    }" +
            "   },   " +
            "   b : 1.5 " +
            "  }  " +
            " } " +
            "}")
        , "response/numFound==2"
    );

    client.testJQ( params("json","{ " +
            " query : {" +
            "  bool : {" +
            "   must : {" +
            "    lucene : {" +
            "     q.op : AND," +
            "     df : cat_s," +
            "     query : A" +
            "    }" +
            "   }" +
            "   must_not : {'#NOT':{lucene : {query:'id: 1'}}}" +  // testing tagging syntax at the same time (the tag should do nothing here)
            "  }" +
            " }" +
            "}")
        , "response/numFound==1"
    );

    client.testJQ( params("json","{ " +
            " query : {" +
            "  bool : {" +
            "   must : {" +
            "    lucene : {" +
            "     q.op : AND," +
            "     df : cat_s," +
            "     query : A" +
            "    }" +
            "   }" +
            "   must_not : [{lucene : {query:'id: 1'}}]" +
            "  }" +
            " }" +
            "}")
        , "response/numFound==1"
    );

    assertCatANot1(client, "must");
    
    testFilterCachingLocally(client);

    client.testJQ( params("json","{" +
            " query : '*:*'," +
            " filter : {" +
            "  collapse : {" +
            "   field : cat_s" +
            "  } " +
            " } " +
            "}")
        , isDistrib ? "" : "response/numFound==2"
    );

    client.testJQ( params("json","{" +
            " query : {" +
            "  edismax : {" +
            "   query : 'A'," +
            "   qf : 'cat_s'," +
            "   bq : {" +
            "    edismax : {" +
            "     query : 'NJ'" +
            "     qf : 'where_s'" +
            "    }" +
            "   }" +
            "  }" +
            " }, " +
            " fields : id" +
            "}")
        , "response/numFound==2", isDistrib? "" : "response/docs==[{id:'4'},{id:'1'}]"
    );

    client.testJQ( params("json","{" +
            " query : {" +
            "  edismax : {" +
            "   query : 'A'," +
            "   qf : 'cat_s'," +
            "   bq : {" +
            "    edismax : {" +
            "     query : 'NY'" +
            "     qf : 'where_s'" +
            "    }" +
            "   }" +
            "  }" +
            " }, " +
            " fields : id" +
            "}")
        , "response/numFound==2", isDistrib? "" : "response/docs==[{id:'1'},{id:'4'}]"
    );

    client.testJQ( params("json","{" +
            " query : {" +
            "  dismax : {" +
            "   query : 'A NJ'" +
            "   qf : 'cat_s^0.1 where_s^100'" +
            "  } " +
            " }, " +
            " filter : '-id:2'," +
            " fields : id" +
            "}")
        , "response/numFound==3", isDistrib? "" : "response/docs==[{id:'4'},{id:'5'},{id:'1'}]"
    );

    client.testJQ( params("json","{" +
            " query : {" +
            "  dismax : {" +
            "   query : 'A NJ'" +
            "   qf : ['cat_s^100', 'where_s^0.1']" +
            "  } " +
            " }, " +
            " filter : '-id:2'," +
            " fields : id" +
            "}")
        , "response/numFound==3", isDistrib? "" :  "response/docs==[{id:'4'},{id:'1'},{id:'5'}]"
    );

    try {
      client.testJQ(params("json", "{query:{'lucene':'foo_s:ignore_exception'}}"));  // TODO: this seems like a reasonable capability that we would want to support in the future.  It should be OK to make this pass.
      fail();
    } catch (Exception e) {
      assertTrue(e.getMessage().contains("foo_s"));
    }

    try {
      // test failure on unknown parameter
      client.testJQ(params("json", "{query:'cat_s:A', foobar_ignore_exception:5}")
          , "response/numFound==2"
      );
      fail();
    } catch (Exception e) {
      assertTrue(e.getMessage().contains("foobar"));
    }

  }

