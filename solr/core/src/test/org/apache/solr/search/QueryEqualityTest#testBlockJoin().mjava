  public void testBlockJoin() throws Exception {
    assertQueryEquals("parent", "{!parent which=foo_s:parent}dude",
        "{!parent which=foo_s:parent}dude");
    assertQueryEquals("child", "{!child of=foo_s:parent}dude",
        "{!child of=foo_s:parent}dude");
    // zero query case 
    assertQueryEquals(null, "{!parent which=foo_s:parent}",
        "{!parent which=foo_s:parent}");
    assertQueryEquals(null, "{!child of=foo_s:parent}",
        "{!child of=foo_s:parent}");
    assertQueryEquals(null, "{!parent which='+*:* -foo_s:parent'}",
        "{!child of=foo_s:parent}");
    
    final SolrQueryRequest req = req(
        "fq","bar_s:baz","fq","{!tag=fqban}bar_s:ban",
        "ffq","bar_s:baz","ffq","{!tag=ffqban}bar_s:ban");
    try {
    assertQueryEquals("filters", req,
        "{!parent which=foo_s:parent param=$fq}foo_s:bar",
        "{!parent which=foo_s:parent param=$ffq}foo_s:bar" // differently named params
        );
    assertQueryEquals("filters", req,
        "{!parent which=foo_s:parent param=$fq excludeTags=fqban}foo_s:bar",
        "{!parent which=foo_s:parent param=$ffq excludeTags=ffqban}foo_s:bar" // differently named params
        );
    
    QueryUtils.checkUnequal(// parent filter is not an equal to child
        QParser.getParser("{!child of=foo_s:parent}", req).getQuery(),
        QParser.getParser("{!parent which=foo_s:parent}", req).getQuery());
    
    } finally {
      req.close();
    }
  }

