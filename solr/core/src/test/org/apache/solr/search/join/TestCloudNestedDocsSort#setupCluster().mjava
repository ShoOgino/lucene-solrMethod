  @BeforeClass
  public static void setupCluster() throws Exception {
    final int numVals = atLeast(10);
    for (int i=0; i < numVals; i++) {
      vals.add(""+Integer.toString(random().nextInt(1000000), Character.MAX_RADIX));
    }
    
    final Path configDir = Paths.get(TEST_HOME(), "collection1", "conf");

    String configName = "solrCloudCollectionConfig";
    int nodeCount = 5;
    configureCluster(nodeCount)
       .addConfig(configName, configDir)
       .configure();
    
    int shards = 2;
    int replicas = 2 ;
    CollectionAdminRequest.createCollection("collection1", configName, shards, replicas)
        .withProperty("config", "solrconfig-minimal.xml")
        .withProperty("schema", "schema.xml")
        .process(cluster.getSolrClient());

    client = cluster.getSolrClient();
    client.setDefaultCollection("collection1");
    
    ZkStateReader zkStateReader = client.getZkStateReader();
    AbstractDistribZkTestBase.waitForRecoveriesToFinish("collection1", zkStateReader, true, true, 30);
    
    {
      int id = 42;
      final List<SolrInputDocument> docs = new ArrayList<>();
      final int parentsNum = atLeast(20);
          ;
      for (int i=0; i<parentsNum || (matchingParent==null ||matchingChild==null); i++) {
        final String parentTieVal = "" + random().nextInt(5);
        final String parentId = ""+(id++);
        final SolrInputDocument parent = new SolrInputDocument("id", parentId,
            "type_s", "parent",
            "parentTie_s1", parentTieVal,
            "parent_id_s1", parentId
            );
        final List<String> parentFilter = addValsField(parent, "parentFilter_s");
        final int kids = usually() ? atLeast(20) : 0;
        for(int c = 0; c< kids; c++){
          SolrInputDocument child = new SolrInputDocument("id", ""+(id++),
              "type_s", "child",
              "parentTie_s1", parentTieVal,
              "parent_id_s1", parentId);
          child.addField("parentFilter_s", parentFilter);
          if (usually()) {
            child.addField( "val_s1", Integer.toString(random().nextInt(1000), Character.MAX_RADIX)+"" );
          }
          final List<String> chVals = addValsField(child, "childFilter_s");
          parent.addChildDocument(child );

          // let's pickup at least matching child
          final boolean canPickMatchingChild = !chVals.isEmpty() && !parentFilter.isEmpty();
          final boolean haveNtPickedMatchingChild = matchingParent==null ||matchingChild==null;
          if (canPickMatchingChild && haveNtPickedMatchingChild && usually()) {
            matchingParent = (String) parentFilter.iterator().next();
            matchingChild = (String) chVals.iterator().next();
          }
        }
        maxDocs += parent.getChildDocumentCount()+1;
        docs.add(parent);
      }
      // don't add parents in increasing uniqueKey order
      Collections.shuffle(docs, random());
      client.add(docs);
      client.commit();
    }
  }

