  /** @see #testSortedSubFacetRefinementWhenParentOnlyReturnedByOneShard */
  @AwaitsFix(bugUrl="https://issues.apache.org/jira/browse/SOLR-12556")
  @Test
  public void testSortedSubFacetRefinementWhenParentOnlyReturnedByOneShardProcessEmpty() throws Exception {
    final int numDocs = initSomeDocsWhere1ShardHasOnlyParentFacetField();
    final Client client = servers.getClient(random().nextInt());
    final List<SolrClient> clients = client.getClientProvider().all();
    final int numClients = clients.size();
    
    assertTrue(numClients >= 3); // we only use 2, but assert at least 3 to also test empty shard
    final SolrClient c0 = clients.get(0);
    final SolrClient c1 = clients.get(1);
    
    // if we do the same request as testSortedSubFacetRefinementWhenParentOnlyReturnedByOneShard,
    // but with processEmpty:true, then ideally we should get the same buckets & counts as before,
    // but the debug info should indicate that every shard contributed to every bucket (either initially,
    // or during refinement)
    //
    // The problem comes in with how "empty" bucket lists are dealt with...
    // - child debug counts never get higher then '2' because even with the forced "_l" refinement of
    //   the parent buckets against the "empty" shards we don't explicitly ask those shards to
    //   evaluate the child buckets
    // - perhaps we should reconsider the value of "_l" ?
    //   - why aren't we just specifying all the buckets (and child buckets) chosen in phase#1 using "_p" ?
    //   - or at the very least, if the purpose of "_l" is to give other buckets a chance to "bubble up"
    //     in phase#2, then shouldn't a "_l" refinement requests still include the buckets choosen in
    //     phase#1, and request that the shard fill them in in addition to returning its own top buckets?
    client.testJQ(params("q", "*:*", "rows", "0", "json.facet", "{"
                         + "processEmpty:true,"
                         + "parent:{ type:terms, field:parent_s, limit:2, overrequest:0, refine:true, facet:{"
                         + "  processEmpty:true,"
                         + "  debug:'debug(numShards)',"
                         + "  child:{ type:terms, field:child_s, limit:2, overrequest:0, refine: true,"
                         + "          facet:{ processEmpty:true, debug:'debug(numShards)' } }"
                         + "} } }")
                  , "facets=={ count: "+numDocs+","
                  + "  parent:{ buckets:[ "
                  + "    { val:pY, count: 24,"
                  + "      debug:"+numClients+", "
                  + "      child:{ buckets:[ "
                  + "                   {val:c1,count:3, debug:"+numClients+"},"
                  + "                   {val:c0,count:1, debug:"+numClients+"},"
                  + "      ] } },"
                  + "    { val:pX, count: 13,"
                  + "      debug:"+numClients+", "
                  + "      child:{ buckets:[ "
                  + "                   {val:c0,count:2, debug:"+numClients+"},"
                  + "                   {val:c1,count:1, debug:"+numClients+"},"
                  + "      ] } },"
                  + "  ] } }"
                  );
  }

