  public void testSimpleRangeFacetsOfSymetricRates() throws Exception {
    for (boolean use_mincount : Arrays.asList(true, false)) {
    
      // exchange rates relative to USD...
      //
      // for all of these permutations, the numDocs in each bucket that we get back should be the same
      // (regardless of the any asymetric echanges ranges, or the currency used for the 'gap') because the
      // start & end are always in USD.
      //
      // NOTE:
      //  - 0,1,2 are the *input* start,gap,end
      //  - 3,4,5 are the *normalized* start,gap,end expected in the response
      for (List<String> args : Arrays.asList(// default currency is USD
                                             Arrays.asList("4", "1.00", "11.0",
                                                           "4.00,USD", "1.00,USD", "11.00,USD"),
                                             // explicit USD
                                             Arrays.asList("4,USD", "1,USD", "11,USD",
                                                           "4.00,USD", "1.00,USD", "11.00,USD"),
                                             // Gap can be in diff currency (but start/end must currently match)
                                             Arrays.asList("4.00,USD", "000.50,GBP", "11,USD",
                                                           "4.00,USD", ".50,GBP", "11.00,USD"),
                                             Arrays.asList("4.00,USD", "2,EUR", "11,USD",
                                                           "4.00,USD", "2.00,EUR", "11.00,USD"))) {
        
        assertEquals(6, args.size()); // sanity check
        
        // first let's check facet.range
        SolrQuery solrQuery = new SolrQuery("q", "*:*", "rows", "0", "facet", "true", "facet.range", FIELD,
                                            "facet.mincount", (use_mincount ? "3" : "0"),
                                            "f." + FIELD + ".facet.range.start", args.get(0),
                                            "f." + FIELD + ".facet.range.gap", args.get(1),
                                            "f." + FIELD + ".facet.range.end", args.get(2),
                                            "f." + FIELD + ".facet.range.other", "all");
        QueryResponse rsp = cluster.getSolrClient().query(solrQuery);
        try {
          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());
          
          final String start = args.get(3);
          final String gap = args.get(4);
          final String end = args.get(5);
          
          final List<RangeFacet> range_facets = rsp.getFacetRanges();
          assertEquals(1, range_facets.size());
          final RangeFacet result = range_facets.get(0);
          assertEquals(FIELD, result.getName());
          assertEquals(start, result.getStart());
          assertEquals(gap, result.getGap());
          assertEquals(end, result.getEnd());
          assertEquals(3, result.getBefore());
          assertEquals(3, result.getAfter());
          assertEquals(9, result.getBetween());
          
          List<RangeFacet.Count> counts = result.getCounts();
          if (use_mincount) {
            assertEquals(3, counts.size());
            for (int i = 0; i < 3; i++) {
              RangeFacet.Count bucket = counts.get(i);
              assertEquals((4 + (i * 3)) + ".00,USD", bucket.getValue());
              assertEquals("bucket #" + i, 3, bucket.getCount());
            }
          } else {
            assertEquals(7, counts.size());
            for (int i = 0; i < 7; i++) {
              RangeFacet.Count bucket = counts.get(i);
              assertEquals((4 + i) + ".00,USD", bucket.getValue());
              assertEquals("bucket #" + i, (i == 0 || i == 3 || i == 6) ? 3 : 0, bucket.getCount());
            }
          }
        } catch (AssertionError|RuntimeException ae) {
          throw new AssertionError(solrQuery.toString() + " -> " + rsp.toString() + " ===> " + ae.getMessage(), ae);
        }

        // same basic logic, w/json.facet
        solrQuery = new SolrQuery("q", "*:*", "rows", "0", "json.facet",
                                  "{ foo:{ type:range, field:"+FIELD+", mincount:"+(use_mincount ? 3 : 0)+", " +
                                  "        start:'"+args.get(0)+"', gap:'"+args.get(1)+"', end:'"+args.get(2)+"', other:all}}");
        rsp = cluster.getSolrClient().query(solrQuery);
        try {
          assertEquals(NUM_DOCS, rsp.getResults().getNumFound());
          
          final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get("facets")).get("foo");
          
          assertEqualsHACK("before", 3L, ((NamedList)foo.get("before")).get("count"));
          assertEqualsHACK("after", 3L, ((NamedList)foo.get("after")).get("count"));
          assertEqualsHACK("between", 9L, ((NamedList)foo.get("between")).get("count"));
          
          final List<NamedList> buckets = (List<NamedList>) foo.get("buckets");
          
          if (use_mincount) {
            assertEquals(3, buckets.size());
            for (int i = 0; i < 3; i++) {
              NamedList bucket = buckets.get(i);
              assertEquals((4 + (3 * i)) + ".00,USD", bucket.get("val"));
              assertEqualsHACK("bucket #" + i, 3L, bucket.get("count"));
            }
          } else {
            assertEquals(7, buckets.size());
            for (int i = 0; i < 7; i++) {
              NamedList bucket = buckets.get(i);
              assertEquals((4 + i) + ".00,USD", bucket.get("val"));
              assertEqualsHACK("bucket #" + i, (i == 0 || i == 3 || i == 6) ? 3L : 0L, bucket.get("count"));
            }
          }
        } catch (AssertionError|RuntimeException ae) {
          throw new AssertionError(solrQuery.toString() + " -> " + rsp.toString() + " ===> " + ae.getMessage(), ae);
        }
      }
    }
  }

