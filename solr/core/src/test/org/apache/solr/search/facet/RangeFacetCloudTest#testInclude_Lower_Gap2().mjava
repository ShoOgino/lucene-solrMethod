  public void testInclude_Lower_Gap2() throws Exception {
    for (boolean doSubFacet : Arrays.asList(false, true)) {
      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);
      final CharSequence subFacet = makeSubFacet(subFacetLimit);
      for (EnumSet<FacetRangeOther> other : OTHERS) {
        final String otherStr = formatFacetRangeOther(other);
        for (String include : Arrays.asList(", include:lower", "")) { // same behavior
          final SolrQuery solrQuery = new SolrQuery
            ("q", "*:*", "rows", "0", "json.facet",
             "{ foo:{ type:range, field:"+INT_FIELD+" start:0, end:5, gap:2"+otherStr+include+subFacet+" } }");
        
          final QueryResponse rsp = cluster.getSolrClient().query(solrQuery);
          try {
            @SuppressWarnings({"unchecked"})
            final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get("facets")).get("foo");
            @SuppressWarnings({"unchecked"})
            final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get("buckets");
            
            assertEquals("num buckets", 3, buckets.size());
            assertBucket("bucket#0", 0, modelVals(0,1), subFacetLimit, buckets.get(0));
            assertBucket("bucket#1", 2, modelVals(2,3), subFacetLimit, buckets.get(1));
            assertBucket("bucket#2", 4, modelVals(4,5), subFacetLimit, buckets.get(2));
            
            assertBeforeAfterBetween(other, emptyVals(), emptyVals(), modelVals(0,5), subFacetLimit, foo);
            
          } catch (AssertionError|RuntimeException ae) {
            throw new AssertionError(solrQuery.toString() + " -> " + rsp.toString() + " ===> " + ae.getMessage(), ae);
          }
        }
      }
    }
  }

