  /**
   * Given a (multivalued) field name and an (ascending) sorted list of values, this method uses {@link #buildMultiValueSortedDocuments} to generate and test multiple function &amp; sort permutations ...
   * <ul>
   *  <li><code>f asc</code> (implicitly min)</li>
   *  <li><code>field(f,min) asc</code></li>
   *  <li><code>field(f,min) desc</code></li>
   *  <li><code>f desc</code> (implicitly max)</li>
   *  <li><code>field(f,max) desc</code></li>
   *  <li><code>field(f,max) asc</code></li>
   * </ul>
   *
   * <p>
   * <b>NOTE:</b> if the sortedValues includes "null" then the field must <em>NOT</em> use <code>sortMissingFirst</code> or <code>sortMissingLast</code></b>
   * </p>
   *
   * @param f the field to test
   * @param trieFieldHack if this param and {@link #NUMERIC_POINTS_SYSPROP} are both true, then the <code>field(f,min|max)</code> functions will be wrapped in <code>def(...,0)</code> and the implicit <code>f asc|desc</code> syntax will not be tested -- see SOLR-8005 for the reason.
   * @param sortedValues the values to use when building the docs and validating the sort
   *
   * @see #buildMultiValueSortedDocuments
   * @see #testExpectedSortOrdering(String,List)
   * @see #clearIndex
   */
  private void testExpectedSortOrdering(final String f, boolean trieFieldHack,
                                        Object... sortedValues) {

    SchemaField sf = h.getCore().getLatestSchema().getField(f);
    assertFalse("this utility method does not work with fields that are sortMissingFirst|Last: " + f,
                sf.sortMissingFirst() || sf.sortMissingLast());
    
    // make a copy we can re-order later
    final List<Object> vals = new ArrayList<Object>(sortedValues.length);
    Collections.addAll(vals, sortedValues);
      
    String minFunc = "field("+f+",min)";
    String maxFunc = "field("+f+",max)";

    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) {
      // we don't need to mess with this hack at all if we're using all point numerics
      trieFieldHack = false;
    }

    if (trieFieldHack // SOLR-8005
        // if this line of code stops compiling, then trie fields have been removed from solr
        // and the entire trieFieldHack param should be removed from this method (and callers)
        && null != TrieField.class) {
      
      // the SOLR-8005 hack is only needed if/when a doc has no value...
      trieFieldHack = false; // assume we're safe
      for (Object val : vals) {
        if (null == val) { // we're not safe
          trieFieldHack = true;
          break;
        }
      }
    }
    if (trieFieldHack) {
      // if we've made it this far, and we still need the hack, we have to wrap our
      // functions with a default...
      minFunc = "def(" + minFunc + ",0)";
      maxFunc = "def(" + maxFunc + ",0)";
      // and we can't test implicit min/max default behavior...
    }
    
    // // // // min
    
    final List<SolrInputDocument> min_asc = buildMultiValueSortedDocuments(f, vals);
    
    // explicit min + asc
    testExpectedSortOrdering(minFunc + " asc", min_asc);
    // implicit: asc -> min
    if (!trieFieldHack) testExpectedSortOrdering(f + " asc", min_asc);
    
    final List<SolrInputDocument> min_desc = new ArrayList<>(min_asc);
    Collections.reverse(min_desc);
    
    // explicit min + desc
    testExpectedSortOrdering(minFunc + " desc", min_desc);

    // // // // max
    Collections.reverse(vals);
    
    final List<SolrInputDocument> max_desc = buildMultiValueSortedDocuments(f, vals);

    // explicit: max + desc
    testExpectedSortOrdering(maxFunc +" desc", max_desc);
    // implicit: desc -> max
    if (!trieFieldHack) testExpectedSortOrdering(f + " desc", max_desc); 
    
    final List<SolrInputDocument> max_asc = new ArrayList<>(max_desc);
    Collections.reverse(max_asc);
    
    // explicit max + asc
    testExpectedSortOrdering(maxFunc + " asc", max_asc);
  }

