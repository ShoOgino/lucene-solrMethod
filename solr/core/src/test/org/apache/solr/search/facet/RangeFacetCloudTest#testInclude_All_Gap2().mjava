  /**
   * This test will also sanity check that mincount is working properly 
   */
  public void testInclude_All_Gap2() throws Exception {
    for (boolean doSubFacet : Arrays.asList(false, true)) {
      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);
      final CharSequence subFacet = makeSubFacet(subFacetLimit);
      for (EnumSet<FacetRangeOther> other : OTHERS) {
        final String otherStr = formatFacetRangeOther(other);
        for (String include : Arrays.asList(", include:'edge,lower,upper,outer'",
                                            ", include:[edge,lower,upper,outer]",
                                            ", include:all")) { // same

          // we also want to sanity check that mincount doesn't bork anything,
          // so we're going to do the query twice:
          // 1) no mincount, keep track of which bucket has the highest count & what it was
          // 2) use that value as the mincount, assert that the other bucket isn't returned
          long mincount_to_use = -1;
          Object expected_mincount_bucket_val = null; // HACK: use null to mean neither in case of tie

          // initial query, no mincount...
          SolrQuery solrQuery = new SolrQuery
            ("q", "*:*", "rows", "0", "json.facet",
             // exclude a single low/high value from our ranges
             "{ foo:{ type:range, field:"+INT_FIELD+", start:1, end:4, gap:2"+otherStr+include+subFacet+" } }");
          
          QueryResponse rsp = cluster.getSolrClient().query(solrQuery);
          try {
            final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get("facets")).get("foo");
            final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get("buckets");
            
            assertEquals("num buckets", 2, buckets.size());
            
            assertBucket("bucket#0", 1, modelVals(1,3), subFacetLimit, buckets.get(0));
            assertBucket("bucket#1", 3, modelVals(3,5), subFacetLimit, buckets.get(1));
            
            assertBeforeAfterBetween(other, modelVals(0,1), modelVals(5), modelVals(1,5), subFacetLimit, foo);

            // if we've made it this far, then our buckets match the model
            // now use our buckets to pick a mincount to use based on the MIN(+1) count seen
            long count0 = ((Number)buckets.get(0).get("count")).longValue();
            long count1 = ((Number)buckets.get(1).get("count")).longValue();
            
            mincount_to_use = 1 + Math.min(count0, count1);
            if (count0 > count1) {
              expected_mincount_bucket_val = buckets.get(0).get("val");
            } else if (count1 > count0) {
              expected_mincount_bucket_val = buckets.get(1).get("val");
            }

          } catch (AssertionError|RuntimeException ae) {
            throw new AssertionError(solrQuery.toString() + " -> " + rsp.toString() + " ===> " + ae.getMessage(), ae);
          }

          // second query, using mincount...
          solrQuery = new SolrQuery
            ("q", "*:*", "rows", "0", "json.facet",
             // exclude a single low/high value from our ranges, 
             "{ foo:{ type:range, field:"+INT_FIELD+", mincount:" + mincount_to_use +
             ", start:1, end:4, gap:2"+otherStr+include+subFacet+" } }");
          
          rsp = cluster.getSolrClient().query(solrQuery);
          try {
            final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get("facets")).get("foo");
            final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get("buckets");

            if (null == expected_mincount_bucket_val) {
              assertEquals("num buckets", 0, buckets.size());
            } else {
              assertEquals("num buckets", 1, buckets.size());
              final Object actualBucket = buckets.get(0);
              if (expected_mincount_bucket_val.equals(1)) {
                assertBucket("bucket#0(0)", 1, modelVals(1,3), subFacetLimit, actualBucket);
              } else {
                assertBucket("bucket#0(1)", 3, modelVals(3,5), subFacetLimit, actualBucket);
              }
            }
            
            // regardless of mincount, the before/after/between special buckets should always be returned
            assertBeforeAfterBetween(other, modelVals(0,1), modelVals(5), modelVals(1,5), subFacetLimit, foo);

          } catch (AssertionError|RuntimeException ae) {
            throw new AssertionError(solrQuery.toString() + " -> " + rsp.toString() + " ===> " + ae.getMessage(), ae);
          }
        }
      }
    }
  }

