  /**
   * Given a <code>fieldPrefix</code> and a list of sorted values which may <em>not</em> contain null, this method tests that sortMissingLast and sortMissingFirst fields using those prefixes sort correctly when {@link #buildMultiValueSortedDocuments} is used to generate documents containing these values <em>and</em> an additional document with no values in the field.
   *
   * <p>
   * Permutations tested:
   * </p>
   * <ul>
   *  <li><code>fieldPrefix</code> + <code>"_missf_s_dv"</code> asc</li>
   *  <li><code>fieldPrefix</code> + <code>"_missf_s_dv"</code> desc</li>
   *  <li><code>fieldPrefix</code> + <code>"_missl_s_dv"</code> asc</li>
   *  <li><code>fieldPrefix</code> + <code>"_missl_s_dv"</code> desc</li>
   * </ul>
   *
   * @see #buildMultiValueSortedDocuments
   * @see #testExpectedSortOrdering(String,List)
   */
  private void testSortMissingMinMax(final String fieldPrefix,
                                     Object... sortedValues) {

    for (Object obj : sortedValues) { // sanity check
      assertNotNull("this helper method can't be used with 'null' values", obj);
    }
    
    for (String suffix : Arrays.asList("_missf_s_dv", "_missl_s_dv")) {

      final String f = fieldPrefix + suffix;
      final boolean first = f.contains("missf");
    
      final List<Object> asc_vals = new ArrayList<>(sortedValues.length + 1);
      Collections.addAll(asc_vals, sortedValues);
      final List<Object> desc_vals = new ArrayList<>(sortedValues.length + 1);
      Collections.addAll(desc_vals, sortedValues);
      Collections.reverse(desc_vals);
      
      asc_vals.add(first ? 0 : sortedValues.length, null);
      desc_vals.add(first ? 0 : sortedValues.length, null);
      
      testExpectedSortOrdering(f + " asc", buildMultiValueSortedDocuments(f, asc_vals));
      testExpectedSortOrdering(f + " desc", buildMultiValueSortedDocuments(f, desc_vals));
    }
  }

