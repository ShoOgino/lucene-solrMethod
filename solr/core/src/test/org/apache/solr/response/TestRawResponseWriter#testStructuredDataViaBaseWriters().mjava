  /**
   * When no real ContentStream is specified, each base writer should be used for formatting
   */
  public void testStructuredDataViaBaseWriters() throws IOException {
    SolrQueryResponse rsp = new SolrQueryResponse();
    // Don't send a ContentStream back, this will fall back to the configured base writer.
    // But abuse the CONTENT key to ensure writer is also checking type
    rsp.add(RawResponseWriter.CONTENT, "test");
    rsp.add("foo", "bar");

    // check Content-Type against each writer 
    assertEquals("application/xml; charset=UTF-8", writerNoBase.getContentType(req(), rsp));
    assertEquals("application/xml; charset=UTF-8", writerXmlBase.getContentType(req(), rsp));
    assertEquals("application/json; charset=UTF-8", writerJsonBase.getContentType(req(), rsp));
    assertEquals("application/octet-stream",  writerBinBase.getContentType(req(), rsp));

    // check response against each writer

    // xml & none (default behavior same as XML)
    String xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n<str name=\"content\">test</str><str name=\"foo\">bar</str>\n</response>\n";
    StringWriter xmlSout = new StringWriter();
    writerXmlBase.write(xmlSout, req(), rsp);
    assertEquals(xml, xmlSout.toString());
    ByteArrayOutputStream xmlBout = new ByteArrayOutputStream();
    writerXmlBase.write(xmlBout, req(), rsp);
    assertEquals(xml, xmlBout.toString(StandardCharsets.UTF_8.toString()));
    //
    StringWriter noneSout = new StringWriter();
    writerNoBase.write(noneSout, req(), rsp);
    assertEquals(xml, noneSout.toString());
    ByteArrayOutputStream noneBout = new ByteArrayOutputStream();
    writerNoBase.write(noneBout, req(), rsp);
    assertEquals(xml, noneBout.toString(StandardCharsets.UTF_8.toString()));

    // json
    String json = "{\"content\":\"test\",\"foo\":\"bar\"}\n";
    StringWriter jsonSout = new StringWriter();
    writerJsonBase.write(jsonSout, req(), rsp);
    assertEquals(json, jsonSout.toString());
    ByteArrayOutputStream jsonBout = new ByteArrayOutputStream();
    writerJsonBase.write(jsonBout, req(), rsp);
    assertEquals(json, jsonBout.toString(StandardCharsets.UTF_8.toString()));

    // javabin
    ByteArrayOutputStream bytes = new ByteArrayOutputStream();
    writerBinBase.write(bytes, req(), rsp);
    BinaryResponseParser parser = new BinaryResponseParser();
    NamedList<Object> out = parser.processResponse
      (new ByteArrayInputStream(bytes.toByteArray()), /* encoding irelevent */ null);
    assertEquals(RawResponseWriter.CONTENT, out.getName(0));
    assertEquals("test", out.getVal(0));
    assertEquals("foo", out.getName(1));
    assertEquals("bar", out.getVal(1));

  }

