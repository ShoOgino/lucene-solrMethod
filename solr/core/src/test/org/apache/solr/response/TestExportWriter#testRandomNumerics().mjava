  /**
   * This test doesn't validate the correctness of results, it just compares the response of the same request
   * when asking for Trie fields vs Point fields. Can be removed once Trie fields are no longer supported
   */
  @Test
  @SuppressForbidden(reason="using new Date(time) to create random dates")
  public void testRandomNumerics() throws Exception {
    assertU(delQ("*:*"));
    assertU(commit());
    List<String> trieFields = new ArrayList<String>();
    List<String> pointFields = new ArrayList<String>();
    for (String mv:new String[]{"s", ""}) {
      for (String indexed:new String[]{"_ni", ""}) {
        for (String type:new String[]{"i", "l", "f", "d", "dt"}) {
          String field = "number_" + type + mv + indexed;
          SchemaField sf = h.getCore().getLatestSchema().getField(field + "_t");
          assertTrue(sf.hasDocValues());
          assertTrue(sf.getType().getNumberType() != null);
          assertFalse(sf.getType().isPointField());
          
          sf = h.getCore().getLatestSchema().getField(field + "_p");
          assertTrue(sf.hasDocValues());
          assertTrue(sf.getType().getNumberType() != null);
          assertTrue(sf.getType().isPointField());
          
          trieFields.add(field + "_t");
          pointFields.add(field + "_p");
        }
      }
    }
    for (int i = 0; i < atLeast(100); i++) {
      if (random().nextInt(20) == 0) {
        //have some empty docs
        assertU(adoc("id", String.valueOf(i)));
        continue;
      }

      if (random().nextInt(20) == 0 && i > 0) {
        //delete some docs
        assertU(delI(String.valueOf(i - 1)));
      }
      
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("id", String.valueOf(i));
      addInt(doc, random().nextInt(), false);
      addLong(doc, random().nextLong(), false);
      addFloat(doc, random().nextFloat() * 3000 * (random().nextBoolean()?1:-1), false);
      addDouble(doc, random().nextDouble() * 3000 * (random().nextBoolean()?1:-1), false);
      addDate(doc, new Date(), false);

      // MV need to be unique in order to be the same in Trie vs Points
      Set<Integer> ints = new HashSet<>();
      Set<Long> longs = new HashSet<>();
      Set<Float> floats = new HashSet<>();
      Set<Double> doubles = new HashSet<>();
      Set<Date> dates = new HashSet<>();
      for (int j=0; j < random().nextInt(20); j++) {
        ints.add(random().nextInt());
        longs.add(random().nextLong());
        floats.add(random().nextFloat() * 3000 * (random().nextBoolean()?1:-1));
        doubles.add(random().nextDouble() * 3000 * (random().nextBoolean()?1:-1));
        dates.add(new Date(System.currentTimeMillis() + random().nextInt()));
      }
      ints.stream().forEach((val)->addInt(doc, val, true));
      longs.stream().forEach((val)->addLong(doc, val, true));
      floats.stream().forEach((val)->addFloat(doc, val, true));
      doubles.stream().forEach((val)->addDouble(doc, val, true));
      dates.stream().forEach((val)->addDate(doc, val, true));
      
      assertU(adoc(doc));
      if (random().nextInt(20) == 0) {
        assertU(commit());
      }
    }
    assertU(commit());
    doTestQuery("id:1", trieFields, pointFields);
    doTestQuery("*:*", trieFields, pointFields);
    doTestQuery("id:[0 TO 2]", trieFields, pointFields);// "id" field is really a string, this is not a numeric range query
    doTestQuery("id:[0 TO 9]", trieFields, pointFields);
    doTestQuery("id:DOES_NOT_EXIST", trieFields, pointFields);
  }

