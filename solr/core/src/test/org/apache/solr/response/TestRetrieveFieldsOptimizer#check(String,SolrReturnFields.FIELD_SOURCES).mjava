  // This checks a couple of things:
  // 1> we got all the values from the place we expected.
  // 2> all the values we expect are actually returned.
  //
  // NOTE: multiValued fields are _NOT_ fetched from docValues by design so we don't have to worry about set semantics
  //
  private void check(String flIn, SolrReturnFields.FIELD_SOURCES source) throws Exception {
    Set<String> setDedupe = new HashSet<>(Arrays.asList(flIn.split(",")));
    String fl = String.join(",", setDedupe);

    SolrCore core = h.getCore();

    SolrQueryRequest req = lrf.makeRequest("q", "*:*", CommonParams.FL, fl);
    SolrQueryResponse rsp = h.queryAndResponse("", req);

    BinaryQueryResponseWriter writer = (BinaryQueryResponseWriter) core.getQueryResponseWriter("javabin");
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    writer.write(baos, req, rsp);

    // This is really the main point!
    assertEquals("We didn't get the values from the expected places! ",
        source, ((SolrReturnFields) rsp.returnFields).getFieldSources());

    NamedList res;
    try (JavaBinCodec jbc = new JavaBinCodec()) {
      res = (NamedList) jbc.unmarshal(new ByteArrayInputStream(baos.toByteArray()));
    }
    SolrDocumentList docs = (SolrDocumentList) res.get("response");
    for (Object doc : docs) {
      SolrDocument sdoc = (SolrDocument) doc;
      // Check that every (and only) the fields in the fl param were fetched and the values are as expected.
      // Since each doc has the same fields, we don't need to find the special doc.
      String[] requestedFields = fl.split(",");
      assertEquals("Should have exactly as many fields as requested, ", sdoc.getFieldNames().size(), requestedFields.length);

      String id = (String) sdoc.get(idNotStoredDv);
      if (id == null) {
        id = (String) sdoc.get(idStoredNotDv);
      }
      Map<String, List<String>> expected = allFieldValuesInput.get(id);
      for (String field : requestedFields) {
        Object[] docVals = sdoc.getFieldValues(field).toArray();
        RetrieveField testField = fieldsHolder.getTestField(field);
        List<String> expectedVals = expected.get(field);
        assertEquals("Returned fields should have the expected number of entries", docVals.length, expectedVals.size());
        for (int idx = 0; idx < docVals.length; ++idx) {
          assertEquals("Values should be identical and exactly in order. ", expectedVals.get(idx), testField.getValAsString(docVals[idx]));
        }
      }

    }
    req.close();
  }

