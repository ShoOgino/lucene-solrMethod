  @SuppressWarnings("serial")
  @Test
  public void test() throws Exception {
    int peopleMultiplier = atLeast(1);
    int deptMultiplier = atLeast(1);
    
    createIndex(people, peopleMultiplier, depts, deptMultiplier);
    
    Random random1 = random();
    
    final ModifiableSolrParams params = params(
        new String[]{"q","name_s:dave", "indent","true",
            "fl","*,depts:[subquery "+((random1.nextBoolean() ? "" : "separator=,"))+"]",
            "rows","" + peopleMultiplier,
            "depts.q","{!terms f=dept_id_s v=$row.dept_ss_dv "+((random1.nextBoolean() ? "" : "separator=,"))+"}",
            "depts.fl","text_t"+(differentUniqueId?",id:notid":""),
            "depts.sort", "dept_id_i desc",
            "depts.indent","true",
            "depts.collection","departments",
            differentUniqueId ? "depts.distrib.singlePass":"notnecessary","true",
            "depts.rows",""+(deptMultiplier*2),
            "depts.logParamsList","q,fl,rows,row.dept_ss_dv",
            random().nextBoolean()?"depts.wt":"whatever",anyWt(),
            random().nextBoolean()?"wt":"whatever",anyWt()});

    final SolrDocumentList hits;
    {
      final QueryRequest qr = new QueryRequest(params);
      final QueryResponse  rsp = new QueryResponse();
      rsp.setResponse(cluster.getSolrClient().request(qr, people+","+depts));
      hits = rsp.getResults();
      
      assertEquals(peopleMultiplier, hits.getNumFound());
      
      int engineerCount = 0;
      int supportCount = 0;
      
      for (int res : new int [] {0, (peopleMultiplier-1) /2, peopleMultiplier-1}) {
        SolrDocument doc = hits.get(res);
        assertEquals("dave", doc.getFieldValue("name_s_dv"));
        SolrDocumentList relDepts = (SolrDocumentList) doc.getFieldValue("depts");
        assertEquals("dave works in both depts "+rsp,
            deptMultiplier * 2, relDepts.getNumFound());
        for (int deptN = 0 ; deptN < relDepts.getNumFound(); deptN++ ) {
          SolrDocument deptDoc = relDepts.get(deptN);
          String actual = (String) deptDoc.get("text_t");
          assertTrue(deptDoc + "should be either "+engineering +" or "+support,
              (engineering.equals(actual) && ++engineerCount>0) || 
                   (support.equals(actual) && ++supportCount>0));
        }
      }
      assertEquals(hits.toString(), engineerCount, supportCount); 
    }

    params.set("wt", "json");
    final URL node = new URL(cluster.getRandomJetty(random()).getBaseUrl().toString()
     +"/"+people+"/select"+params.toQueryString());

    try(final InputStream jsonResponse = node.openStream()){
      final ByteArrayOutputStream outBuffer = new ByteArrayOutputStream();
      IOUtils.copy(jsonResponse, outBuffer);

      final Object expected = ((SolrDocumentList) hits.get(0).getFieldValue("depts")).get(0).get("text_t");
      final String err = JSONTestUtil.match("/response/docs/[0]/depts/docs/[0]/text_t"
          ,outBuffer.toString(Charset.forName("UTF-8").toString()),
          "\""+expected+"\"");
      assertNull(err,err);
    }
    
  }

