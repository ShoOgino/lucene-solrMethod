  List<String> getValsForField() {
    List<String> valsAsStrings = new ArrayList<>();
    switch (testFieldType.getSolrTypeClass()) {
      case "solr.TrieIntField":
      case "solr.TrieLongField":
      case "solr.IntPointField":
      case "solr.LongPointField":
        valsAsStrings.add(Integer.toString(random().nextInt(10_000)));
        if (schemaField.multiValued() == false) break;
        for (int idx = 0; idx < random().nextInt(5); ++idx) {
          valsAsStrings.add(Integer.toString(random().nextInt(10_000)));
        }
        break;

      case "solr.TrieFloatField":
      case "solr.TrieDoubleField":
      case "solr.FloatPointField":
      case "solr.DoublePointField":
        valsAsStrings.add(Float.toString(random().nextFloat()));
        if (schemaField.multiValued() == false) break;
        for (int idx = 0; idx < random().nextInt(5); ++idx) {
          valsAsStrings.add(Float.toString(random().nextFloat()));
        }
        break;

      case "solr.TrieDateField":
      case "solr.DatePointField":
        valsAsStrings.add(randDate());
        if (schemaField.multiValued() == false) break;
        for (int idx = 0; idx < random().nextInt(5); ++idx) {
          valsAsStrings.add(randDate());
        }
        break;

      case "solr.StrField":
        valsAsStrings.add(randString());
        if (schemaField.multiValued() == false) break;
        for (int idx = 0; idx < random().nextInt(5); ++idx) {
          valsAsStrings.add(randString());
        }
        break;

      case "solr.BoolField":
        valsAsStrings.add(Boolean.toString(random().nextBoolean()));
        if (schemaField.multiValued() == false) break;
        for (int idx = 0; idx < random().nextInt(5); ++idx) {
          valsAsStrings.add(Boolean.toString(random().nextBoolean()));
        }
        break;

      default:
        fail("Found no case for field " + name + " type " + type);
        break;
    }
    // There are tricky cases with multiValued fields that are sometimes fetched from docValues that obey set
    // semantics so be sure we include at least one duplicate in a multValued field sometimes
    if (random().nextBoolean() && valsAsStrings.size() > 1) {
      valsAsStrings.add(valsAsStrings.get(random().nextInt(valsAsStrings.size())));

    }

    return valsAsStrings;
  }

