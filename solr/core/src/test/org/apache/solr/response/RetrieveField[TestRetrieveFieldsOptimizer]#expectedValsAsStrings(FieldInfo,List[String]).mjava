  void expectedValsAsStrings(final FieldInfo info, List<String> valsAsStrings) {
    if (schemaField.stored() || schemaField.multiValued() == false) {
      return ;
    }

    switch (info.getDocValuesType()) {
      case NONE: // These three types are single values, just return.
      case NUMERIC:
      case BINARY: // here for completeness, really doesn't make sense.
        return;

      case SORTED_NUMERIC: // Can have multiple, identical values. This was a surprise to me.
        break;

      case SORTED_SET: // Obey set semantics.
      case SORTED:
        Set<String> uniq = new TreeSet<>(valsAsStrings);
        valsAsStrings.clear();
        valsAsStrings.addAll(uniq);
        break;
    }

    // Now order them if string-based comparison isn't reasonable
    switch (testFieldType.getSolrTypeClass()) {
      case "solr.TrieIntField":
      case "solr.TrieLongField":

        Collections.sort(valsAsStrings, Comparator.comparingInt(Integer::parseInt));
        break;
      case "solr.IntPointField":
      case "solr.LongPointField":
        Collections.sort(valsAsStrings, Comparator.comparingLong(Long::parseLong));
        break;

      case "solr.TrieFloatField":
      case "solr.FloatPointField":
      case "solr.TrieDoubleField":
      case "solr.DoublePointField":
        Collections.sort(valsAsStrings, Comparator.comparingDouble(Double::parseDouble));
        break;

      case "solr.TrieDateField":
      case "solr.DatePointField":
      case "solr.StrField":
      case "solr.BoolField":
        Collections.sort(valsAsStrings);
        break;

      default:
        fail("Found no case for field " + name + " type " + type);
        break;
    }
  }

