  @Test
  public void testThreeLevel() throws Exception {
    List<String> asserts =  new ArrayList<>();
    // dave works in both dept, get his coworkers from both
    for (String dept : new String[] {"Engineering", "Support"}) { //dept_id_s_dv">Engineering
      
      ArrayList<Object> deptWorkers = Collections.list(
          new StringTokenizer( h.query(req(
              "q","dept_ss_dv:"+dept ,//dept_id_i_dv
             "wt","csv",
             "csv.header","false",
             "fl","name_s_dv",
             "rows",""+peopleMultiplier*3, // dave has three coworkers in two depts
             "sort", "id desc"
           ))));
     // System.out.println(deptWorkers);
      
      // looping dave clones
      for (int p : new int []{1, peopleMultiplier}) {
        // looping dept clones
        for (int d : new int []{1, deptMultiplier}) {
          // looping coworkers
          int wPos = 1;
          for (Object mate : deptWorkers) {
            // (/response/result/doc/str[@name='name_s_dv'][.='dave']/..)[1]
            //  /result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='Engineering']/..
            //  /result[@name='neighbours']/doc/str[@name='name_s_dv'][.='tina']
            asserts.add("((/response/result/doc/str[@name='name_s_dv'][.='dave']/..)["+p+"]"+
              "/result[@name='subq1']/doc/str[@name='dept_id_s_dv'][.='"+dept+"']/..)["+ d +"]"+
              "/result[@name='neighbours']/doc[" + wPos + "]/str[@name='name_s_dv'][.='"+ mate+"']");
            wPos ++; 
          }
          
        }
      }
    }
    //System.out.println(asserts);
    assertQ("dave works at both dept with other folks",
  //  System.out.println(h.query( 
        req(new String[]{"q","name_s:dave", "indent","true",
        "fl","name_s_dv,subq1:[subquery]", 
        "rows","" + peopleMultiplier,
        "subq1.q","{!terms f=dept_id_s v=$row.dept_ss_dv}", 
        "subq1.fl","text_t,dept_id_s_dv,neighbours:[subquery]",
        "subq1.indent","true",
        "subq1.rows",""+(deptMultiplier*2),
        "subq1.neighbours.q",//flipping via numbers 
        random().nextBoolean() ?
          "{!terms f=dept_ss_dv v=$row.dept_id_s_dv}"
        : "{!terms f=dept_is v=$row.dept_id_i_dv}",
        "subq1.neighbours.fl", "name_s_dv" ,
        "subq1.neighbours.rows", ""+peopleMultiplier*3},
        "subq1.neighbours.sort", "id desc")//,
       ,asserts.toArray(new String[]{})
    //        ) 
    );
  
  }

