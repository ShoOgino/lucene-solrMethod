  @SuppressWarnings({"unchecked", "rawtypes"})
  private void checkFetchSources(SolrReturnFields.FIELD_SOURCES source) throws Exception {
    String flAll = fieldsHolder.allFields.stream()
        .map(RetrieveField::getName) // This will call testField.getName()
        .collect(Collectors.joining(","));

    List<RetrieveField> toCheck = new ArrayList<>();
    String idField = idNotStoredDv + ",";
    switch (source) {
      case ALL_FROM_DV:
        toCheck = new ArrayList(fieldsHolder.dvNotStoredFields);
        break;
      case ALL_FROM_STORED:
        idField = idStoredNotDv + ",";
        toCheck = new ArrayList(fieldsHolder.storedNotDvFields);
        break;
      case MIXED_SOURCES:
        toCheck = new ArrayList(fieldsHolder.allFields);
        break;
      default:
        fail("Value passed to checkFetchSources unknown: " + source.toString());
    }

    // MultiValued fields are _always_ read from stored data.
    toCheck.removeAll(fieldsHolder.multiValuedFields);

    // At this point, toCheck should be only singleValued fields. Adding in even a single multiValued field should
    // read stuff from stored.
    String fl = idField + toCheck.stream()
        .map(RetrieveField::getName) // This will call testField.getName()
        .collect(Collectors.joining(","));

    // Even a single multiValued and stored field should cause stored fields to be visited.

    List<Integer> shuffled = Arrays.asList(0, 1, 2);
    Collections.shuffle(shuffled, random());
    for (int which : shuffled) {
      switch (which) {
        case 0:
          check(fl, source);
          break;

        case 1:
          check(flAll, MIXED_SOURCES);
          break;

        case 2:
          List<RetrieveField> toCheckPlusMv = new ArrayList<>(toCheck);
          toCheckPlusMv.add(fieldsHolder.storedMvFields.get(random().nextInt(fieldsHolder.storedMvFields.size())));

          String flWithMv = idField + toCheckPlusMv.stream()
              .map(RetrieveField::getName) // This will call testField.getName()
              .collect(Collectors.joining(","));
          if (source == ALL_FROM_STORED) {
            check(flWithMv, ALL_FROM_STORED);
          } else {
            check(flWithMv, MIXED_SOURCES);
          }
          break;
        default:
          fail("Your shuffling should be between 0 and 2, inclusive. It was: " + which);
      }
    }
  }

