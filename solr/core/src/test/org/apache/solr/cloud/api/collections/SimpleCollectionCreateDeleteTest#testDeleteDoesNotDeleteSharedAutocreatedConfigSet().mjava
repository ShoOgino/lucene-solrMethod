    @Test
    @ShardsFixed(num = 1)
    public void testDeleteDoesNotDeleteSharedAutocreatedConfigSet() throws Exception {
        String collectionNameInitial = "SimpleCollectionCreateDeleteTest.initialCollection";
        CollectionAdminRequest.Create createInitial = CollectionAdminRequest.createCollection(collectionNameInitial, 1, 1);

        NamedList<Object> requestInitial = createInitial.process(cloudClient).getResponse();

        if (requestInitial.get("success") != null) {
            // collection exists now
            assertTrue(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + "/" + collectionNameInitial, false));

            String configName = cloudClient.getZkStateReader().readConfigName(collectionNameInitial);

            // config for this collection is '.AUTOCREATED', and exists globally
            assertTrue(configName.endsWith(".AUTOCREATED"));
            assertTrue(cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));

            // create a second collection, sharing the same configSet
            String collectionNameWithSharedConfig = "SimpleCollectionCreateDeleteTest.collectionSharingAutocreatedConfigSet";
            CollectionAdminRequest.Create createWithSharedConfig = CollectionAdminRequest.createCollection(collectionNameWithSharedConfig, configName, 1, 1);

            NamedList<Object> requestWithSharedConfig = createWithSharedConfig.process(cloudClient).getResponse();
            assertTrue("The collection with shared config set should have been created", requestWithSharedConfig.get("success") != null);
            assertTrue("The new collection should exist after a successful creation", cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + "/" + collectionNameWithSharedConfig, false));

            String configNameOfSecondCollection = cloudClient.getZkStateReader().readConfigName(collectionNameWithSharedConfig);

            assertEquals("Both collections should be using the same config", configName, configNameOfSecondCollection);

            // delete the initial collection - the config set should stay, since it is shared with the other collection
            CollectionAdminRequest.Delete deleteInitialCollection = CollectionAdminRequest.deleteCollection(collectionNameInitial);
            cloudClient.request(deleteInitialCollection);

            // initial collection has been deleted
            assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + "/" + collectionNameInitial, false));
            // ... but not its autocreated config set, since it is shared with another collection
            assertTrue("The auto-created config set should NOT have been deleted. Another collection is using it.", cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));

            // delete the second collection - the config set should now be deleted, since it is no longer shared any other collection
            CollectionAdminRequest.Delete deleteSecondCollection = CollectionAdminRequest.deleteCollection(collectionNameWithSharedConfig);
            cloudClient.request(deleteSecondCollection);

            // the collection has been deleted
            assertFalse(cloudClient.getZkStateReader().getZkClient().exists(ZkStateReader.COLLECTIONS_ZKNODE + "/" + collectionNameWithSharedConfig, false));
            // ... and the config set is now also deleted - once it doesn't get referenced by any collection
            assertFalse("The auto-created config set should have been deleted now. No collection is referencing it.", cloudClient.getZkStateReader().getConfigManager().listConfigs().contains(configName));
        }
    }

