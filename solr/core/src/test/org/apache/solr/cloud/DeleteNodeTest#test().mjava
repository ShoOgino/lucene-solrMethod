  @Test
  public void test() throws Exception {
    cluster.waitForAllNodes(5000);
    CloudSolrClient cloudClient = cluster.getSolrClient();
    String coll = "deletenodetest_coll";
    ClusterState state = cloudClient.getZkStateReader().getClusterState();
    Set<String> liveNodes = state.getLiveNodes();
    ArrayList<String> l = new ArrayList<>(liveNodes);
    Collections.shuffle(l, random());
    CollectionAdminRequest.Create create = pickRandom(
        CollectionAdminRequest.createCollection(coll, "conf1", 5, 2, 0, 0),
        CollectionAdminRequest.createCollection(coll, "conf1", 5, 1, 1, 0),
        CollectionAdminRequest.createCollection(coll, "conf1", 5, 0, 1, 1),
        // check RF=1
        CollectionAdminRequest.createCollection(coll, "conf1", 5, 1, 0, 0),
        CollectionAdminRequest.createCollection(coll, "conf1", 5, 0, 1, 0)
        );
    create.setCreateNodeSet(StrUtils.join(l, ',')).setMaxShardsPerNode(3);
    cloudClient.request(create);
    state = cloudClient.getZkStateReader().getClusterState();
    String node2bdecommissioned = l.get(0);
    // check what replicas are on the node, and whether the call should fail
    boolean shouldFail = false;
    DocCollection docColl = state.getCollection(coll);
    log.info("#### DocCollection: " + docColl);
    List<Replica> replicas = docColl.getReplicas(node2bdecommissioned);
    if (replicas != null) {
      for (Replica replica : replicas) {
        String shard = docColl.getShardId(node2bdecommissioned, replica.getStr(ZkStateReader.CORE_NAME_PROP));
        Slice slice = docColl.getSlice(shard);
        boolean hasOtherNonPullReplicas = false;
        for (Replica r: slice.getReplicas()) {
          if (!r.getName().equals(replica.getName()) &&
              !r.getNodeName().equals(node2bdecommissioned) &&
              r.getType() != Replica.Type.PULL) {
            hasOtherNonPullReplicas = true;
            break;
          }
        }
        if (!hasOtherNonPullReplicas) {
          shouldFail = true;
          break;
        }
      }
    }
    new CollectionAdminRequest.DeleteNode(node2bdecommissioned).processAsync("003", cloudClient);
    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus("003");
    CollectionAdminRequest.RequestStatusResponse rsp = null;
    for (int i = 0; i < 200; i++) {
      rsp = requestStatus.process(cloudClient);
      if (rsp.getRequestStatus() == RequestStatusState.FAILED || rsp.getRequestStatus() == RequestStatusState.COMPLETED) {
        break;
      }
      Thread.sleep(50);
    }
    log.info("####### DocCollection after: " + cloudClient.getZkStateReader().getClusterState().getCollection(coll));
    if (shouldFail) {
      assertTrue(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);
    } else {
      assertFalse(String.valueOf(rsp), rsp.getRequestStatus() == RequestStatusState.FAILED);
    }
  }

