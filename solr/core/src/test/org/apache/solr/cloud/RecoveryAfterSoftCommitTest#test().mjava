  @Test
  public void test() throws Exception {
    // flush twice
    for (int i=0; i<4; i++) {
      SolrInputDocument document = new SolrInputDocument();
      document.addField("id", String.valueOf(i));
      document.addField("a_t", "text_" + i);
      cloudClient.add(document);
    }

    // soft-commit so searchers are open on un-committed but flushed segment files
    AbstractUpdateRequest request = new UpdateRequest().setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true, true);
    cloudClient.request(request);

    Replica notLeader = ensureAllReplicasAreActive(DEFAULT_COLLECTION, "shard1", 1, 2, 30).get(0);
    // ok, now introduce a network partition between the leader and the replica
    SocketProxy proxy = getProxyForReplica(notLeader);

    proxy.close();

    // add more than 100 docs so that peer sync cannot be used for recovery
    for (int i=5; i<115; i++) {
      SolrInputDocument document = new SolrInputDocument();
      document.addField("id", String.valueOf(i));
      document.addField("a_t", "text_" + i);
      cloudClient.add(document);
    }

    // Have the partition last at least 1 sec
    // While this gives the impression that recovery is timing related, this is
    // really only
    // to give time for the state to be written to ZK before the test completes.
    // In other words,
    // without a brief pause, the test finishes so quickly that it doesn't give
    // time for the recovery process to kick-in
    Thread.sleep(2000L);

    proxy.reopen();

    List<Replica> notLeaders =
        ensureAllReplicasAreActive(DEFAULT_COLLECTION, "shard1", 1, 2, 30);
  }

