  @Test
  public void test() throws Exception {

    CollectionAdminRequest.createCollection("collection1", "conf", 2, 1).process(cluster.getSolrClient());
    CollectionAdminRequest.createCollection("collection2", "conf", 1, 1).process(cluster.getSolrClient());
    waitForState("Expected collection1 to be created with 2 shards and 1 replica", "collection1", clusterShape(2, 1));
    waitForState("Expected collection2 to be created with 1 shard and 1 replica", "collection2", clusterShape(1, 1));

    new UpdateRequest()
        .add("id", "6", "a_t", "humpty dumpy sat on a wall")
        .add("id", "7", "a_t", "humpty dumpy3 sat on a walls")
        .add("id", "8", "a_t", "humpty dumpy2 sat on a walled")
        .commit(cluster.getSolrClient(), "collection1");

    new UpdateRequest()
        .add("id", "9", "a_t", "humpty dumpy sat on a wall")
        .add("id", "10", "a_t", "humpty dumpy3 sat on a walls")
        .commit(cluster.getSolrClient(), "collection2");

    CollectionAdminRequest.createAlias("testalias", "collection1").process(cluster.getSolrClient());

    // ensure that the alias has been registered
    assertEquals("collection1",
        new CollectionAdminRequest.ListAliases().process(cluster.getSolrClient()).getAliases().get("testalias"));

    // search for alias
    searchSeveralWays("testalias", new SolrQuery("*:*"), 3);

    // Use a comma delimited list, one of which is an alias
    searchSeveralWays("testalias,collection2", new SolrQuery("*:*"), 5);

    // create alias, collection2 first because it's not on every node
    CollectionAdminRequest.createAlias("testalias", "collection2,collection1").process(cluster.getSolrClient());

    searchSeveralWays("testalias", new SolrQuery("*:*"), 5);

    // update alias
    CollectionAdminRequest.createAlias("testalias", "collection2").process(cluster.getSolrClient());

    searchSeveralWays("testalias", new SolrQuery("*:*"), 2);

    // set alias to two collections
    CollectionAdminRequest.createAlias("testalias", "collection1,collection2").process(cluster.getSolrClient());
    searchSeveralWays("testalias", new SolrQuery("*:*"), 5);

    // alias pointing to alias (one level of indirection is supported; more than that is not (may or may not work)
    // TODO dubious; remove?
    CollectionAdminRequest.createAlias("testalias2", "testalias").process(cluster.getSolrClient());
    searchSeveralWays("testalias2", new SolrQuery("*:*"), 5);

    // Test 2 aliases pointing to the same collection
    CollectionAdminRequest.createAlias("testalias", "collection2").process(cluster.getSolrClient());
    CollectionAdminRequest.createAlias("testalias2", "collection2").process(cluster.getSolrClient());

    // add one document to testalias, thus to collection2
    new UpdateRequest()
        .add("id", "11", "a_t", "humpty dumpy4 sat on a walls")
        .commit(cluster.getSolrClient(), "testalias"); // thus gets added to collection2

    searchSeveralWays("testalias", new SolrQuery("*:*"), 3);

    CollectionAdminRequest.createAlias("testalias", "collection2,collection1").process(cluster.getSolrClient());

    searchSeveralWays("testalias", new SolrQuery("*:*"), 6);

    // add one document to testalias, which will route to collection2 because it's the first
    new UpdateRequest()
        .add("id", "12", "a_t", "humpty dumpy5 sat on a walls")
        .commit(cluster.getSolrClient(), "testalias"); // thus gets added to collection2
    searchSeveralWays("collection2", new SolrQuery("*:*"), 4);

    CollectionAdminRequest.deleteAlias("testalias").process(cluster.getSolrClient());
    CollectionAdminRequest.deleteAlias("testalias2").process(cluster.getSolrClient());

    SolrException e = expectThrows(SolrException.class, () -> {
      SolrQuery q = new SolrQuery("*:*");
      q.set("collection", "testalias");
      cluster.getSolrClient().query(q);
    });
    assertTrue("Unexpected exception message: " + e.getMessage(), e.getMessage().contains("Collection not found: testalias"));
  }

