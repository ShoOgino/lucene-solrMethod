  @Test
  @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 17-Mar-2018
  public void testInactiveShardCleanup() throws Exception {
    String collection1 = getClass().getSimpleName() + "_collection1";
    CollectionAdminRequest.Create create1 = CollectionAdminRequest.createCollection(collection1,
        "conf", 1, 1);

    create1.process(solrClient);
    CloudTestUtils.waitForState(cloudManager, "failed to create " + collection1, collection1,
        CloudTestUtils.clusterShape(1, 1));

    // also create a very stale lock
    Map<String, Object> lockData = new HashMap<>();
    lockData.put(ZkStateReader.STATE_TIMESTAMP_PROP, String.valueOf(cloudManager.getTimeSource().getEpochTimeNs() -
        TimeUnit.NANOSECONDS.convert(48, TimeUnit.HOURS)));
    String staleLockName = collection1 + "/staleShard-splitting";
    cloudManager.getDistribStateManager().makePath(ZkStateReader.COLLECTIONS_ZKNODE + "/" +
        staleLockName, Utils.toJSON(lockData), CreateMode.EPHEMERAL, true);

    // expect two events - one for a very stale lock, one for the cleanup
    triggerFired = new CountDownLatch(2);

    String setListenerCommand = "{" +
        "'set-listener' : " +
        "{" +
        "'name' : 'foo'," +
        "'trigger' : '" + AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + "'," +
        "'stage' : ['STARTED','ABORTED','SUCCEEDED','FAILED']," +
        "'beforeAction' : 'inactive_shard_plan'," +
        "'afterAction' : 'inactive_shard_plan'," +
        "'class' : '" + CapturingTriggerListener.class.getName() + "'" +
        "}" +
        "}";
    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    String setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : '" + AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + "'," +
        "'event' : 'scheduled'," +
        "'startTime' : 'NOW+10SECONDS'," +
        "'every' : '+2SECONDS'," +
        "'enabled' : true," +
        "'actions' : [{'name' : 'inactive_shard_plan', 'class' : 'solr.InactiveShardPlanAction', 'ttl' : '20'}," +
        "{'name' : 'execute_plan', 'class' : '" + ExecutePlanAction.class.getName() + "'}," +
        "{'name' : 'test', 'class' : '" + TestTriggerAction.class.getName() + "'}]" +
        "}}";
    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");


    boolean await = listenerCreated.await(10, TimeUnit.SECONDS);
    assertTrue("listener not created in time", await);

    CollectionAdminRequest.SplitShard split1 = CollectionAdminRequest.splitShard(collection1)
        .setShardName("shard1");
    split1.process(solrClient);
    CloudTestUtils.waitForState(cloudManager, "failed to split " + collection1, collection1,
        CloudTestUtils.clusterShape(3, 1, true, true));


    await = triggerFired.await(90, TimeUnit.SECONDS);
    assertTrue("cleanup action didn't run", await);

    // cleanup should have occurred
    assertFalse("no events captured!", listenerEvents.isEmpty());
    List<CapturedEvent> events = new ArrayList<>(listenerEvents.get("foo"));
    listenerEvents.clear();

    assertFalse(events.isEmpty());
    CapturedEvent ce = null;
    CapturedEvent staleLock = null;
    for (CapturedEvent e : events) {
      if (e.stage != TriggerEventProcessorStage.AFTER_ACTION) {
        continue;
      }
      Map<String, Object> plan = (Map<String, Object>)e.context.get("properties.inactive_shard_plan");
      if (plan == null) {
        continue;
      }
      if (plan.containsKey("cleanup")) {
        ce = e;
      }
      // capture only the first
      if (plan.containsKey("staleLocks") && staleLock == null) {
        staleLock = e;
      }
    }
    assertNotNull("missing cleanup event: " + events, ce);
    assertNotNull("missing staleLocks event: " + events, staleLock);

    Map<String, Object> map = (Map<String, Object>)ce.context.get("properties.inactive_shard_plan");
    assertNotNull(map);

    Map<String, List<String>> inactive = (Map<String, List<String>>)map.get("inactive");
    assertEquals(1, inactive.size());
    assertNotNull(inactive.get(collection1));
    Map<String, List<String>> cleanup = (Map<String, List<String>>)map.get("cleanup");
    assertEquals(1, cleanup.size());
    assertNotNull(cleanup.get(collection1));

    map = (Map<String, Object>)staleLock.context.get("properties.inactive_shard_plan");
    assertNotNull(map);
    Map<String, Map<String, Object>> locks = (Map<String, Map<String, Object>>)map.get("staleLocks");
    assertNotNull(locks);
    assertTrue("missing stale lock data: " + locks + "\nevents: " + events, locks.containsKey(staleLockName));

    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();

    CloudTestUtils.clusterShape(2, 1).matches(state.getLiveNodes(), state.getCollection(collection1));
  }

