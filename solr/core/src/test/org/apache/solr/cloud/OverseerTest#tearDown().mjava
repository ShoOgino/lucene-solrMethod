  @After
  public void tearDown() throws Exception {
    testDone = true;
    
    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory("closeThreadPool"));
  
    for (ZkController zkController : zkControllers) {
      customThreadPool.submit( () -> zkController.close());
    }

    for (HttpShardHandlerFactory httpShardHandlerFactory : httpShardHandlerFactorys) {
      customThreadPool.submit( () -> httpShardHandlerFactory.close());
    }

    for (UpdateShardHandler updateShardHandler : updateShardHandlers) {
      customThreadPool.submit( () -> updateShardHandler.close());
    }
    
    for (SolrClient solrClient : solrClients) {
      customThreadPool.submit( () -> IOUtils.closeQuietly(solrClient));
    }

    for (ZkStateReader reader : readers) {
      customThreadPool.submit( () -> reader.close());
    }
    
    for (SolrZkClient solrZkClient : zkClients) {
      customThreadPool.submit( () -> IOUtils.closeQuietly(solrZkClient));
    }
    
    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);
    
    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory("closeThreadPool"));

    
    for (Overseer overseer : overseers) {
      customThreadPool.submit( () -> overseer.close());
    }

    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);
    
    overseers.clear();
    zkControllers.clear();
    httpShardHandlerFactorys.clear();
    updateShardHandlers.clear();
    solrClients.clear();
    readers.clear();
    zkClients.clear();
    
    server.tryCleanSolrZkNode();
    server.makeSolrZkNode();
    
    super.tearDown();
  }

