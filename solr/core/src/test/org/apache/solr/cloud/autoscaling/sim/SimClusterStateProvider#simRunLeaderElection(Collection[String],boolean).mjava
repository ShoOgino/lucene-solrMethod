  /**
   * Simulate running a shard leader election. This operation is a no-op if a leader already exists.
   * If a new leader is elected the cluster state is saved.
   * @param collections list of affected collections
   * @param saveClusterState if true then save cluster state regardless of changes.
   */
  private void simRunLeaderElection(Collection<String> collections, boolean saveClusterState) throws Exception {
    ensureNotClosed();
    if (saveClusterState) {
      lock.lockInterruptibly();
      try {
        collectionsStatesRef.set(null);
      } finally {
        lock.unlock();
      }
    }
    ClusterState state = getClusterState();
    state.forEachCollection(dc -> {
      if (!collections.contains(dc.getName())) {
        return;
      }
      dc.getSlices().forEach(s -> {
        if (s.getState() == Slice.State.INACTIVE) {
          log.trace("-- slice state is {}, skip leader election {} / {}", s.getState(), dc.getName(), s.getName());
          return;
        }
        if (s.getState() != Slice.State.ACTIVE) {
          log.trace("-- slice state is {}, but I will run leader election {} / {}", s.getState(), dc.getName(), s.getName());
        }
        if (s.getLeader() != null) {
          log.trace("-- already has leader {} / {}", dc.getName(), s.getName());
          return;
        }
        if (s.getReplicas().isEmpty()) {
          log.trace("-- no replicas in {} / {}", dc.getName(), s.getName());
          return;
        }
        log.trace("-- submit leader election for {} / {}", dc.getName(), s.getName());
        cloudManager.submit(() -> {
          simRunLeaderElection(dc.getName(), s, saveClusterState);
          return true;
        });
      });
    });
  }

