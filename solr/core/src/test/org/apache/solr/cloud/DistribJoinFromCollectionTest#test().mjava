  @Test
  public void test() throws Exception {
    // create a collection holding data for the "to" side of the JOIN
    String toColl = "to_2x2";
    createCollection(toColl, 2, 2, 2);
    ensureAllReplicasAreActive(toColl, "shard1", 2, 2, 30);
    ensureAllReplicasAreActive(toColl, "shard2", 2, 2, 30);

    // get the set of nodes where replicas for the "to" collection exist
    Set<String> nodeSet = new HashSet<>();
    ClusterState cs = cloudClient.getZkStateReader().getClusterState();
    for (Slice slice : cs.getActiveSlices(toColl))
      for (Replica replica : slice.getReplicas())
        nodeSet.add(replica.getNodeName());
    assertTrue(nodeSet.size() > 0);

    // deploy the "from" collection to all nodes where the "to" collection exists
    String fromColl = "from_1x2";
    createCollection(null, fromColl, 1, nodeSet.size(), 1, null, StringUtils.join(nodeSet,","));
    ensureAllReplicasAreActive(fromColl, "shard1", 1, nodeSet.size(), 30);

    // both to and from collections are up and active, index some docs ...
    Integer toDocId = indexDoc(toColl, 1001, "a", null, "b");
    indexDoc(fromColl, 2001, "a", "c", null);

    Thread.sleep(1000); // so the commits fire

    // verify the join with fromIndex works
    String joinQ = "{!join from=join_s fromIndex="+fromColl+" to=join_s}match_s:c";
    QueryRequest qr = new QueryRequest(params("collection", toColl, "q", joinQ, "fl", "id,get_s"));
    QueryResponse rsp = new QueryResponse(cloudClient.request(qr), cloudClient);
    SolrDocumentList hits = rsp.getResults();
    assertTrue("Expected 1 doc", hits.getNumFound() == 1);
    SolrDocument doc = hits.get(0);
    assertEquals(toDocId, doc.getFirstValue("id"));
    assertEquals("b", doc.getFirstValue("get_s"));

    // create an alias for the fromIndex and then query through the alias
    String alias = fromColl+"Alias";
    CollectionAdminRequest.CreateAlias request = new CollectionAdminRequest.CreateAlias();
    request.setAliasName(alias);
    request.setAliasedCollections(fromColl);
    request.process(cloudClient);

    joinQ = "{!join from=join_s fromIndex="+alias+" to=join_s}match_s:c";
    qr = new QueryRequest(params("collection", toColl, "q", joinQ, "fl", "id,get_s"));
    rsp = new QueryResponse(cloudClient.request(qr), cloudClient);
    hits = rsp.getResults();
    assertTrue("Expected 1 doc", hits.getNumFound() == 1);
    doc = hits.get(0);
    assertEquals(toDocId, doc.getFirstValue("id"));
    assertEquals("b", doc.getFirstValue("get_s"));

    // verify join doesn't work if no match in the "from" index
    joinQ = "{!join from=join_s fromIndex="+fromColl+" to=join_s}match_s:d";
    qr = new QueryRequest(params("collection", toColl, "q", joinQ, "fl", "id,get_s"));
    rsp = new QueryResponse(cloudClient.request(qr), cloudClient);
    hits = rsp.getResults();
    assertTrue("Expected no hits", hits.getNumFound() == 0);

    log.info("DistribJoinFromCollectionTest logic complete ... deleting the " + toColl + " and " + fromColl + " collections");

    // try to clean up
    for (String c : new String[]{ toColl, fromColl }) {
      try {
        CollectionAdminRequest.Delete req = new CollectionAdminRequest.Delete()
                .setCollectionName(c);
        req.process(cloudClient);
      } catch (Exception e) {
        // don't fail the test
        log.warn("Could not delete collection {} after test completed due to: "+e, c);
      }
    }

    log.info("DistribJoinFromCollectionTest succeeded ... shutting down now!");
  }

