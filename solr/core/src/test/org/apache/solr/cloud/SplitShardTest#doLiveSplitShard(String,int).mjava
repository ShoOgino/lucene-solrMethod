  void doLiveSplitShard(String collectionName, int repFactor) throws Exception {
    final CloudSolrClient client = createCollection(collectionName, repFactor);

    final AtomicBoolean doIndex = new AtomicBoolean(true);
    final AtomicInteger docsIndexed = new AtomicInteger();
    Thread indexThread = null;
    try {
      // start indexing client before we initiate a shard split
      indexThread = new Thread(() -> {
        while (doIndex.get()) {
          try {
            // Thread.sleep(10);  // uncomment this to cap indexing rate at 100 docs per second...
            int currDoc = docsIndexed.get();

            // Try all docs in the same update request
            UpdateRequest updateReq = new UpdateRequest();
            updateReq.add(sdoc("id", "doc_" + currDoc));
            UpdateResponse ursp = updateReq.commit(client, collectionName);
            assertEquals(0, ursp.getStatus());  // for now, don't accept any failures
            if (ursp.getStatus() == 0) {
              docsIndexed.incrementAndGet();
            }
          } catch (Exception e) {
            fail(e.getMessage());
            break;
          }
        }
      });
      indexThread.start();

      Thread.sleep(100);  // wait for a few docs to be indexed before invoking split
      int docCount = docsIndexed.get();

      CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(collectionName)
          .setShardName("shard1");
      splitShard.process(client);
      waitForState("Timed out waiting for sub shards to be active.",
          collectionName, activeClusterShape(2, 3*repFactor));  // 2 repFactor for the new split shards, 1 repFactor for old replicas

      // make sure that docs were able to be indexed during the split
      assertTrue(docsIndexed.get() > docCount);

      Thread.sleep(100);  // wait for a few more docs to be indexed after split

    } finally {
      // shut down the indexer
      doIndex.set(false);
      if (indexThread != null) {
        indexThread.join();
      }
    }

    assertTrue(docsIndexed.get() > 0);

    long numDocs = getNumDocs(client);
    if (numDocs != docsIndexed.get()) {
      // Find out what docs are missing.
      for (int i = 0; i < docsIndexed.get(); i++) {
        String id = "doc_" + i;
        long cloudClientDocs = client.query(new SolrQuery("id:" + id)).getResults().getNumFound();
        if (cloudClientDocs != 1) {
          log.error("MISSING DOCUMENT " + id);
        }
      }
    }

    assertEquals("Documents are missing!", docsIndexed.get(), numDocs);
    log.info("Number of documents indexed and queried : " + numDocs);
  }

