  protected static void testVariousDeletes(SolrClient client) throws Exception {
    assertNotNull("client not initialized", client);

    // 2 docs, one on each shard
    final String docId1 = S_ONE_PRE + "42";
    final String docId2 = S_TWO_PRE + "666";
    
    UpdateResponse rsp = null;
    
    // add 1 doc to each shard
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true"),
                 doc(f("id", docId1), f("foo_i", "2001")),
                 doc(f("id", docId2), f("foo_i", "1976"))).process(client);
    assertEquals(0, rsp.getStatus());

    // attempt to delete individual doc id(s) that should fail because of oportunistic concurrency constraints
    for (String id : new String[] { docId1, docId2 }) {
      rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                          "commit", "true")).deleteById(id, -1L).process(client);
      assertEquals(0, rsp.getStatus());
      assertUpdateTolerantErrors("failed oportunistic concurrent delId="+id, rsp,
                                 delIErr(id));
    }
    
    // multiple failed deletes from the same shard (via oportunistic concurrent w/ bogus ids)
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true")
                 ).deleteById(S_ONE_PRE + "X", +1L).deleteById(S_ONE_PRE + "Y", +1L).process(client);
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantErrors("failed oportunistic concurrent delete by id for 2 bogus docs", rsp,
                               delIErr(S_ONE_PRE + "X"), delIErr(S_ONE_PRE + "Y"));
    assertQueryDocIds(client, true, docId1, docId2);
    
    // multiple failed deletes from the diff shards due to oportunistic concurrency constraints
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true")).deleteById(docId2, -1L).deleteById(docId1, -1L).process(client);
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantErrors("failed oportunistic concurrent delete by id for 2 docs", rsp,
                               delIErr(docId1), delIErr(docId2));
    assertQueryDocIds(client, true, docId1, docId2);

    // deleteByQuery using malformed query (fail)
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true")).deleteByQuery("bogus_field:foo").process(client);
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantErrors("failed oportunistic concurrent delete by query", rsp,
                               delQErr("bogus_field:foo"));
    assertQueryDocIds(client, true, docId1, docId2);

    // mix 2 deleteByQuery, one malformed (fail), one that doesn't match anything (ok)
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true")
                 ).deleteByQuery("bogus_field:foo").deleteByQuery("foo_i:23").process(client);
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantErrors("failed oportunistic concurrent delete by query", rsp,
                               delQErr("bogus_field:foo"));
    assertQueryDocIds(client, true, docId1, docId2);
    
    // mix 2 deleteById using _version_=-1, one for real doc1 (fail), one for bogus id (ok)
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true")
                 ).deleteById(docId1, -1L).deleteById("bogus", -1L).process(client);
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantErrors("failed oportunistic concurrent delete by id: exists", rsp,
                               delIErr(docId1));
    assertQueryDocIds(client, true, docId1, docId2);
    
    // mix 2 deleteById using _version_=1, one for real doc1 (ok, deleted), one for bogus id (fail)
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true")
                 ).deleteById(docId1, +1L).deleteById("bogusId", +1L).process(client);
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantErrors("failed oportunistic concurrent delete by id: bogus", rsp,
                               delIErr("bogusId"));
    assertQueryDocIds(client, false, docId1);
    assertQueryDocIds(client, true, docId2);
    
    // mix 2 deleteByQuery, one malformed (fail), one that alctaully removes some docs (ok)
    assertQueryDocIds(client, true, docId2);
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true")
                 ).deleteByQuery("bogus_field:foo").deleteByQuery("foo_i:1976").process(client);
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantErrors("failed oportunistic concurrent delete by query", rsp,
                               delQErr("bogus_field:foo"));
    assertQueryDocIds(client, false, docId2);

  }

