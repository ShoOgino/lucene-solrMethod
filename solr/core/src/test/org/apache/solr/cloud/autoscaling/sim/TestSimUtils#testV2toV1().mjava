  @Test
  public void testV2toV1() throws Exception {
    // valid patterns

    V2Request req = new V2Request.Builder("/c/myCollection")
        .withMethod(SolrRequest.METHOD.POST)
        .withPayload("{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}")
        .withParams(params("foo", "bar"))
        .build();
    SolrParams params = SimUtils.v2AdminRequestToV1Params(req);
    assertEquals("/admin/collections", params.get("path"));
    assertEquals("myCollection", params.get("collection"));
    assertEquals("bar", params.get("foo"));
    assertEquals("addreplica", params.get("action"));
    assertEquals("shard2", params.get("shard"));
    assertEquals("node1:1234", params.get("node"));
    assertEquals("TLOG", params.get("type"));

    req = new V2Request.Builder("/c/myCollection/shards/shard1")
        .withMethod(SolrRequest.METHOD.POST)
        .withPayload("{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}")
        .build();
    params = SimUtils.v2AdminRequestToV1Params(req);
    assertEquals("/admin/collections", params.get("path"));
    assertEquals("myCollection", params.get("collection"));
    // XXX should path parameters override the payload, or the other way around?
    assertEquals("shard1", params.get("shard"));

    req = new V2Request.Builder("/c/myCollection/shards/shard1/core_node5")
        .withMethod(SolrRequest.METHOD.POST)
        .withPayload("{'deletereplica':{}}")
        .build();
    params = SimUtils.v2AdminRequestToV1Params(req);
    assertEquals("/admin/collections", params.get("path"));
    assertEquals("myCollection", params.get("collection"));
    // XXX should path parameters override the payload, or the other way around?
    assertEquals("shard1", params.get("shard"));
    assertEquals("core_node5", params.get("replica"));

    // invalid patterns
    req = new V2Request.Builder("/invalid/myCollection")
        .withMethod(SolrRequest.METHOD.POST)
        .withPayload("{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}")
        .withParams(params("foo", "bar"))
        .build();
    try {
      params = SimUtils.v2AdminRequestToV1Params(req);
    } catch (UnsupportedOperationException e) {
      // expected
      assertTrue(e.toString(), e.toString().contains("request path"));
    }

    req = new V2Request.Builder("/collections/myCollection/foobar/xyz")
        .withMethod(SolrRequest.METHOD.POST)
        .withPayload("{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}")
        .withParams(params("foo", "bar"))
        .build();
    try {
      params = SimUtils.v2AdminRequestToV1Params(req);
    } catch (UnsupportedOperationException e) {
      // expected
      assertTrue(e.toString(), e.toString().contains("expected 'shards'"));
    }
  }

