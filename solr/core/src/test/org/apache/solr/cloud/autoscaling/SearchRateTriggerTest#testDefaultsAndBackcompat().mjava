  @Test
  public void testDefaultsAndBackcompat() throws Exception {
    Map<String, Object> props = new HashMap<>();
    props.put("rate", 1.0);
    props.put("collection", "test");
    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();
    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();
    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient());
    try (SearchRateTrigger trigger = new SearchRateTrigger("search_rate_trigger2")) {
      trigger.configure(loader, cloudManager, props);
      Map<String, Object> config = trigger.getConfig();
      Set<String> collections = (Set<String>)config.get(SearchRateTrigger.COLLECTIONS_PROP);
      assertEquals(collections.toString(), 1, collections.size());
      assertEquals("test", collections.iterator().next());
      assertEquals("#ANY", config.get(AutoScalingParams.SHARD));
      assertEquals("#ANY", config.get(AutoScalingParams.NODE));
      assertEquals(1.0, config.get(SearchRateTrigger.ABOVE_RATE_PROP));
      assertEquals(-1.0, config.get(SearchRateTrigger.BELOW_RATE_PROP));
      assertEquals(SearchRateTrigger.DEFAULT_METRIC, config.get(SearchRateTrigger.METRIC_PROP));
      assertEquals(SearchRateTrigger.DEFAULT_MAX_OPS, config.get(SearchRateTrigger.MAX_OPS_PROP));
      assertNull(config.get(SearchRateTrigger.MIN_REPLICAS_PROP));
      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, config.get(SearchRateTrigger.ABOVE_OP_PROP));
      assertEquals(CollectionParams.CollectionAction.MOVEREPLICA, config.get(SearchRateTrigger.ABOVE_NODE_OP_PROP));
      assertEquals(CollectionParams.CollectionAction.DELETEREPLICA, config.get(SearchRateTrigger.BELOW_OP_PROP));
      assertNull(config.get(SearchRateTrigger.BELOW_NODE_OP_PROP));
    }
  }

