  @Test
  public void testReadWriteCached() throws InterruptedException, IOException {
    CollectionProperties collectionProps = new CollectionProperties(zkClient());
    final CollectionPropsWatcher w = new CollectionPropsWatcher() {
      @Override
      public boolean onStateChanged(Map<String,String> collectionProperties) {
        log.info("collection properties changed. Now: {}",  collectionProperties);
        return false;
      }
    };
    
    cluster.getSolrClient().getZkStateReader().registerCollectionPropsWatcher(collectionName, w);
    
    collectionProps.setCollectionProperty(collectionName, "property1", "value1");
    collectionProps.setCollectionProperty(collectionName, "property2", "value2");
    waitForValue("property1", "value1", 5000);
    waitForValue("property2", "value2", 5000);
    
    collectionProps.setCollectionProperty(collectionName, "property1", "value1"); // no change
    checkValue("property1", "value1");

    collectionProps.setCollectionProperty(collectionName, "property1", null);
    collectionProps.setCollectionProperty(collectionName, "property2", "newValue");
    waitForValue("property1", null, 5000);
    waitForValue("property2", "newValue", 5000);
    
    collectionProps.setCollectionProperty(collectionName, "property2", null);
    waitForValue("property2", null, 5000);
    
    collectionProps.setCollectionProperty(collectionName, "property2", null); // no change
    checkValue("property2", null);
    
    cluster.getSolrClient().getZkStateReader().removeCollectionPropsWatcher(collectionName, w);
    
    collectionProps.setCollectionProperty(collectionName, "property1", "value1");
    checkValue("property1", "value1"); //Should be no cache, so the change should take effect immediately
  }

