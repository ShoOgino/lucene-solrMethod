  @Test
  public void testReadWriteCached() throws InterruptedException, IOException {
    CollectionProperties collectionProps = new CollectionProperties(zkClient());

    // NOTE: Using a semaphore to ensure we wait for Watcher to fire before proceeding with
    // test logic, to prevent triggering SOLR-13678
    final Semaphore sawExpectedProps = new Semaphore(0);
    final AtomicReference<Map<String,String>> expectedProps
      = new AtomicReference<Map<String,String>>(null);
    
    final CollectionPropsWatcher w = new CollectionPropsWatcher() {
      @Override
      public boolean onStateChanged(Map<String,String> collectionProperties) {
        log.info("collection properties changed. Now: {}",  collectionProperties);
        final Map<String,String> expected = expectedProps.get();
        if (expected != null && expected.equals(collectionProperties)) {
          log.info("...new props match expected");
          sawExpectedProps.release();
        }
        return false;
      }
    };
    
    cluster.getSolrClient().getZkStateReader().registerCollectionPropsWatcher(collectionName, w);
    
    collectionProps.setCollectionProperty(collectionName, "property1", "value1");
    collectionProps.setCollectionProperty(collectionName, "property2", "value2");
    waitForValue("property1", "value1", 5000);
    waitForValue("property2", "value2", 5000);

    // HACK: don't let our watcher be removed until we're sure it's "up to date"
    // with the final prop values expected below...
    expectedProps.set(new HashMap<>());

    collectionProps.setCollectionProperty(collectionName, "property1", "value1"); // no change
    checkValue("property1", "value1");

    collectionProps.setCollectionProperty(collectionName, "property1", null);
    collectionProps.setCollectionProperty(collectionName, "property2", "newValue");
    waitForValue("property1", null, 5000);
    waitForValue("property2", "newValue", 5000);
    
    collectionProps.setCollectionProperty(collectionName, "property2", null);
    waitForValue("property2", null, 5000);
    
    collectionProps.setCollectionProperty(collectionName, "property2", null); // no change
    checkValue("property2", null);

    assertTrue("Gave up waitng an excessive amount of time for watcher to see final expected props",
               sawExpectedProps.tryAcquire(1, 120, TimeUnit.SECONDS));
    cluster.getSolrClient().getZkStateReader().removeCollectionPropsWatcher(collectionName, w);
    
    collectionProps.setCollectionProperty(collectionName, "property1", "value1");
    checkValue("property1", "value1"); //Should be no cache, so the change should take effect immediately
    
  }

