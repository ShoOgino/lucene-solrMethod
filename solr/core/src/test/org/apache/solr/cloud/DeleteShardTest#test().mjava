  @Test
  public void test() throws Exception {

    final String collection = "deleteShard";

    CollectionAdminRequest.createCollection(collection, "conf", 2, 1)
        .process(cluster.getSolrClient());

    DocCollection state = getCollectionState(collection);
    assertEquals(State.ACTIVE, state.getSlice("shard1").getState());
    assertEquals(State.ACTIVE, state.getSlice("shard2").getState());

    // Can't delete an ACTIVE shard
    expectThrows(Exception.class, () -> {
      CollectionAdminRequest.deleteShard(collection, "shard1").process(cluster.getSolrClient());
    });

    setSliceState(collection, "shard1", Slice.State.INACTIVE);

    // Can delete an INATIVE shard
    CollectionAdminRequest.deleteShard(collection, "shard1").process(cluster.getSolrClient());
    waitForState("Expected 'shard1' to be removed", collection, (n, c) -> {
      return c.getSlice("shard1") == null;
    });

    // Can delete a shard under construction
    setSliceState(collection, "shard2", Slice.State.CONSTRUCTION);
    CollectionAdminRequest.deleteShard(collection, "shard2").process(cluster.getSolrClient());
    waitForState("Expected 'shard2' to be removed", collection, (n, c) -> {
      return c.getSlice("shard2") == null;
    });

  }

