  // Used when we concentrate the leader on a few nodes.
  private void verifyPropDistributedAsExpected(Map<String, String> expectedShardReplicaMap, String prop) throws InterruptedException, KeeperException {
    // Make sure that the shard unique are where you expect.
    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS, TimeSource.NANO_TIME);

    String propLC = prop.toLowerCase(Locale.ROOT);
    boolean failure = false;
    DocCollection docCollection = null;
    while (timeout.hasTimedOut() == false) {
      forceUpdateCollectionStatus();
      docCollection = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION_NAME);
      failure = false;
      for (Map.Entry<String, String> ent : expectedShardReplicaMap.entrySet()) {
        Replica rep = docCollection.getSlice(ent.getKey()).getReplica(ent.getValue());
        if (rep.getBool("property." + propLC, false) == false) {
          failure = true;
        }
      }
      if (failure == false) {
        return;
      }
      TimeUnit.MILLISECONDS.sleep(100);
    }

    fail(prop + " properties are not on the expected replicas: " + docCollection.toString()
        + System.lineSeparator() + "Expected " + expectedShardReplicaMap.toString());
  }

