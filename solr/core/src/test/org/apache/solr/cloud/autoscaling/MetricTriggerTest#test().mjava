  @Test
  public void test() throws Exception {
    CoreDescriptor coreDescriptor = cluster.getJettySolrRunner(0).getCoreContainer().getCoreDescriptors().iterator().next();
    String shardId = coreDescriptor.getCloudDescriptor().getShardId();
    String coreName = coreDescriptor.getName();
    String replicaName = Utils.parseMetricsReplicaName(DEFAULT_TEST_COLLECTION_NAME, coreName);
    long waitForSeconds = 2 + random().nextInt(5);
    String registry = SolrCoreMetricManager.createRegistryName(true, DEFAULT_TEST_COLLECTION_NAME, shardId, replicaName, null);
    String tag = "metrics:" + registry + ":ADMIN./admin/file.requests";

    Map<String, Object> props = createTriggerProps(waitForSeconds, tag, 1.0d, null, DEFAULT_TEST_COLLECTION_NAME, null, null);

    final List<TriggerEvent> events = new ArrayList<>();
    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();
    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();
    try (SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient())) {
      try (MetricTrigger metricTrigger = new MetricTrigger("metricTrigger")) {
        metricTrigger.configure(loader, cloudManager, props);
        metricTrigger.setProcessor(noFirstRunProcessor);
        metricTrigger.run();
        metricTrigger.setProcessor(event -> events.add(event));
        assertEquals(0, events.size());
        Thread.sleep(waitForSeconds * 1000 + 2000);
        metricTrigger.run();
        assertEquals(1, events.size());
      }

      events.clear();
      tag = "metrics:" + registry + ":ADMIN./admin/file.handlerStart";
      props = createTriggerProps(waitForSeconds, tag, null, 100.0d, DEFAULT_TEST_COLLECTION_NAME, null, null);
      try (MetricTrigger metricTrigger = new MetricTrigger("metricTrigger")) {
        metricTrigger.configure(loader, cloudManager, props);
        metricTrigger.setProcessor(noFirstRunProcessor);
        metricTrigger.run();
        metricTrigger.setProcessor(event -> events.add(event));
        assertEquals(0, events.size());
        Thread.sleep(waitForSeconds * 1000 + 2000);
        metricTrigger.run();
        assertEquals(1, events.size());
      }
    }
  }

