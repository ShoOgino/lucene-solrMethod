  @Test
  @ShardsFixed(num = 4)
  public void deleteReplicaByCountForAllShards() throws Exception {
    String collectionName = "deleteByCountNew";
    try (CloudSolrClient client = createCloudClient(null)) {
      createCollection(collectionName, 2, 2, 5);

      waitForRecoveriesToFinish(collectionName, false);

      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()
              .getClusterState().getCollection(collectionName);
      Collection<Slice> slices = testcoll.getActiveSlices();
      assertEquals(slices.size(), 2);
      for (Slice individualShard:  slices) {
        assertEquals(individualShard.getReplicas().size(),2);
      }

      String requestIdAsync = "1000";

      try {
        // Should not be able to delete 2 replicas from all shards (non leader ones)
        tryRemoveReplicaByCountAsync(collectionName, client, 1, requestIdAsync);

        //Make sure request completes
        String requestStatus = trackRequestStatus(client, requestIdAsync);

        while ((!requestStatus.equals(RequestStatusState.COMPLETED.getKey()))  && (!requestStatus.equals(RequestStatusState.FAILED.getKey()))) {
          requestStatus = trackRequestStatus(client, requestIdAsync);
        }


        testcoll = getCommonCloudSolrClient().getZkStateReader()
                .getClusterState().getCollection(collectionName);
        slices = testcoll.getActiveSlices();
        assertEquals(slices.size(), 2);
        for (Slice individualShard:  slices) {
          assertEquals(individualShard.getReplicas().size(),1);
        }

      } catch (SolrException se) {
        fail("Should have been able to remove the replica successfully");
      }

    }


  }

