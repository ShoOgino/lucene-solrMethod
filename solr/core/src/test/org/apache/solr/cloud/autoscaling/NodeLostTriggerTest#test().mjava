  @Test
  public void test() throws Exception {
    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();
    Map<String, Object> props = new HashMap<>();
    props.put("event", "nodeLost");
    long waitForSeconds = 1 + random().nextInt(5);
    props.put("waitFor", waitForSeconds);
    props.put("enabled", "true");
    List<Map<String, String>> actions = new ArrayList<>(3);
    Map<String, String> map = new HashMap<>(2);
    map.put("name", "compute_plan");
    map.put("class", "solr.ComputePlanAction");
    actions.add(map);
    map = new HashMap<>(2);
    map.put("name", "execute_plan");
    map.put("class", "solr.ExecutePlanAction");
    actions.add(map);
    map = new HashMap<>(2);
    map.put("name", "log_plan");
    map.put("class", "solr.LogPlanAction");
    actions.add(map);
    props.put("actions", actions);

    try (NodeLostTrigger trigger = new NodeLostTrigger("node_lost_trigger", props, container)) {
      trigger.setListener(event -> fail("Did not expect the listener to fire on first run!"));
      trigger.run();
      String lostNodeName = cluster.getJettySolrRunner(1).getNodeName();
      cluster.stopJettySolrRunner(1);

      AtomicBoolean fired = new AtomicBoolean(false);
      AtomicReference<NodeLostTrigger.NodeLostEvent> eventRef = new AtomicReference<>();
      trigger.setListener(event -> {
        if (fired.compareAndSet(false, true)) {
          eventRef.set(event);
          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS)) {
            fail("NodeLostListener was fired before the configured waitFor period");
          }
        } else {
          fail("NodeLostListener was fired more than once!");
        }
      });
      int counter = 0;
      do {
        trigger.run();
        Thread.sleep(1000);
        if (counter++ > 10) {
          fail("Lost node was not discovered by trigger even after 10 seconds");
        }
      } while (!fired.get());

      NodeLostTrigger.NodeLostEvent nodeLostEvent = eventRef.get();
      assertNotNull(nodeLostEvent);
      assertEquals("", lostNodeName, nodeLostEvent.getNodeName());

    }

    // remove a node but add it back before the waitFor period expires
    // and assert that the trigger doesn't fire at all
    try (NodeLostTrigger trigger = new NodeLostTrigger("node_lost_trigger", props, container)) {
      final long waitTime = 2;
      props.put("waitFor", waitTime);
      trigger.setListener(event -> fail("Did not expect the listener to fire on first run!"));
      trigger.run();

      JettySolrRunner lostNode = cluster.getJettySolrRunner(1);
      lostNode.stop();
      AtomicBoolean fired = new AtomicBoolean(false);
      trigger.setListener(event -> {
        if (fired.compareAndSet(false, true)) {
          if (System.nanoTime() - event.getEventNanoTime() <= TimeUnit.NANOSECONDS.convert(waitTime, TimeUnit.SECONDS)) {
            fail("NodeLostListener was fired before the configured waitFor period");
          }
        } else {
          fail("NodeLostListener was fired more than once!");
        }
      });
      trigger.run(); // first run should detect the new node
      int counter = 0;
      do {
        if (container.getZkController().getZkStateReader().getClusterState().getLiveNodes().size() == 3) {
          break;
        }
        Thread.sleep(100);
        if (counter++ > 20) {
          fail("Live nodes not updated!");
        }
      } while (true);
      counter = 0;
      lostNode.start();
      do {
        trigger.run();
        Thread.sleep(1000);
        if (counter++ > waitTime + 1) { // run it a little more than the wait time
          break;
        }
      } while (true);

      // ensure the event was not fired
      assertFalse(fired.get());
    }
  }

