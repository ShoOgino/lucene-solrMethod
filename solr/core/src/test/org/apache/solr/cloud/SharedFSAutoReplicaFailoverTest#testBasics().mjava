  // very slow tests, especially since jetty is started and stopped
  // serially
  private void testBasics() throws Exception {
    String collection1 = "solrj_collection";
    Create createCollectionRequest = CollectionAdminRequest.createCollection(collection1,"conf1",2,2)
            .setRouterField("myOwnField");
    CollectionAdminResponse response = createCollectionRequest.process(cloudClient);

    assertEquals(0, response.getStatus());
    assertTrue(response.isSuccess());
    waitForRecoveriesToFinish(collection1, false);
    
    String collection2 = "solrj_collection2";
    createCollectionRequest = CollectionAdminRequest.createCollection(collection2,"conf1",2,2)
            .setRouterField("myOwnField");
    CollectionAdminResponse response2 = createCollectionRequest.process(getCommonCloudSolrClient());

    assertEquals(0, response2.getStatus());
    assertTrue(response2.isSuccess());
    
    waitForRecoveriesToFinish(collection2, false);
    
    String collection3 = "solrj_collection3";
    createCollectionRequest = CollectionAdminRequest.createCollection(collection3,"conf1",5,1)
            .setRouterField("myOwnField");
    CollectionAdminResponse response3 = createCollectionRequest.process(getCommonCloudSolrClient());

    assertEquals(0, response3.getStatus());
    assertTrue(response3.isSuccess());
    
    waitForRecoveriesToFinish(collection3, false);

    // a collection has only 1 replica per a shard
    String collection4 = "solrj_collection4";
    createCollectionRequest = CollectionAdminRequest.createCollection(collection4,"conf1",5,1)
        .setRouterField("text");
    CollectionAdminResponse response4 = createCollectionRequest.process(getCommonCloudSolrClient());

    assertEquals(0, response4.getStatus());
    assertTrue(response4.isSuccess());

    waitForRecoveriesToFinish(collection4, false);

    // all collections
    String[] collections = {collection1, collection2, collection3, collection4};

    // add some documents to collection4
    final int numDocs = 100;
    addDocs(collection4, numDocs, false);  // indexed but not committed

    // no result because not committed yet
    queryAndAssertResultSize(collection4, 0, 10000);

    assertUlogDir(collections);

    jettys.get(1).stop();
    jettys.get(2).stop();

    Thread.sleep(5000);

    assertSliceAndReplicaCount(collection1, 2, 2, 120000);

    assertEquals(4, ClusterStateUtil.getLiveAndActiveReplicaCount(cloudClient.getZkStateReader(), collection1));
    assertTrue(ClusterStateUtil.getLiveAndActiveReplicaCount(cloudClient.getZkStateReader(), collection2) < 4);

    // collection3 has maxShardsPerNode=1, there are 4 standard jetties and one control jetty and 2 nodes stopped
    ClusterStateUtil.waitForLiveAndActiveReplicaCount(cloudClient.getZkStateReader(), collection3, 3, 30000);

    // collection4 has maxShardsPerNode=5 and setMaxShardsPerNode=5
    ClusterStateUtil.waitForLiveAndActiveReplicaCount(cloudClient.getZkStateReader(), collection4, 5, 30000);

    // all docs should be queried after failover
    cloudClient.commit(); // to query all docs
    assertSliceAndReplicaCount(collection4, 5, 1, 120000);
    queryAndAssertResultSize(collection4, numDocs, 10000);

    // collection1 should still be at 4
    assertEquals(4, ClusterStateUtil.getLiveAndActiveReplicaCount(cloudClient.getZkStateReader(), collection1));
    // and collection2 less than 4
    assertTrue(ClusterStateUtil.getLiveAndActiveReplicaCount(cloudClient.getZkStateReader(), collection2) < 4);

    assertUlogDir(collections);

    boolean allowOverseerRestart = random().nextBoolean();
    List<JettySolrRunner> stoppedJetties = allowOverseerRestart
        ? jettys.stream().filter(jettySolrRunner -> random().nextBoolean()).collect(Collectors.toList()) : notOverseerJetties();
    ChaosMonkey.stop(stoppedJetties);
    controlJetty.stop();

    assertTrue("Timeout waiting for all not live", waitingForReplicasNotLive(cloudClient.getZkStateReader(), 45000, stoppedJetties));

    ChaosMonkey.start(stoppedJetties);
    controlJetty.start();

    assertSliceAndReplicaCount(collection1, 2, 2, 120000);
    assertSliceAndReplicaCount(collection3, 5, 1, 120000);

    // all docs should be queried
    assertSliceAndReplicaCount(collection4, 5, 1, 120000);
    queryAndAssertResultSize(collection4, numDocs, 10000);

    assertUlogDir(collections);

    int jettyIndex = random().nextInt(jettys.size());
    jettys.get(jettyIndex).stop();
    jettys.get(jettyIndex).start();

    assertSliceAndReplicaCount(collection1, 2, 2, 120000);

    assertUlogDir(collections);

    assertSliceAndReplicaCount(collection3, 5, 1, 120000);
    assertSliceAndReplicaCount(collection4, 5, 1, 120000);
  }

