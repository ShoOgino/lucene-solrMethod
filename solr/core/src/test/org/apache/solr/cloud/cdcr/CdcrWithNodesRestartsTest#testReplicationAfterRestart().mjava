  @Test
  public void testReplicationAfterRestart() throws Exception {
    createCollections();
    CdcrTestsUtil.cdcrStart(sourceSolrClient); // start CDCR
    Thread.sleep(2000);

    //index 100 docs
    for (int i = 0; i < 100; i++) {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("id", "doc_" + i);
      CdcrTestsUtil.index(source, "cdcr-source", doc);
      sourceSolrClient.commit();
    }
    Thread.sleep(2000);

    // verify cdcr has replicated docs
    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));
    assertEquals("source docs mismatch", 100, response.getResults().getNumFound());
    assertEquals("target docs mismatch", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));
    CdcrTestsUtil.assertShardInSync("cdcr-source", "shard1", sourceSolrClient);

    // restart all the source cluster nodes
    CdcrTestsUtil.restartClusterNodes(source, "cdcr-source");
    sourceSolrClient = source.getSolrClient();
    sourceSolrClient.setDefaultCollection("cdcr-source");

    // verify still the docs are there
    response = sourceSolrClient.query(new SolrQuery(ALL_Q));
    assertEquals("source docs mismatch", 100, response.getResults().getNumFound());
    assertEquals("target docs mismatch", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));

    // index 100 more
    for (int i = 100; i < 200; i++) {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("id", "doc_" + i);
      CdcrTestsUtil.index(source, "cdcr-source", doc);
      sourceSolrClient.commit();
    }
    Thread.sleep(2000);

    // verify still the docs are there
    response = sourceSolrClient.query(new SolrQuery(ALL_Q));
    assertEquals("source docs mismatch", 200, response.getResults().getNumFound());
    assertEquals("target docs mismatch", 200, CdcrTestsUtil.waitForClusterToSync(200, targetSolrClient));

    CdcrTestsUtil.cdcrStop(sourceSolrClient);
    CdcrTestsUtil.cdcrStop(targetSolrClient);

    deleteCollections();
  }

