  @Test
  public void testSegmentTerminateEarly() throws Exception {

    final String collectionName = "testSegmentTerminateEarlyCollection";

    final SegmentTerminateEarlyTestState tstes = new SegmentTerminateEarlyTestState();

    File solrXml = new File(SolrTestCaseJ4.TEST_HOME(), "solr-no-core.xml");
    Builder jettyConfig = JettyConfig.builder();
    jettyConfig.waitForLoadingCoresToFinish(null);
    final MiniSolrCloudCluster miniCluster = createMiniSolrCloudCluster();
    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();
    cloudSolrClient.setDefaultCollection(collectionName);

    try {
      // create collection
      {
        final String asyncId = (random().nextBoolean() ? null : "asyncId("+collectionName+".create)="+random().nextInt());
        final Map<String, String> collectionProperties = new HashMap<>();
        collectionProperties.put(CoreDescriptor.CORE_CONFIG, "solrconfig-sortingmergepolicyfactory.xml");
        createCollection(miniCluster, collectionName, null, asyncId, Boolean.TRUE, collectionProperties);
        if (asyncId != null) {
          final RequestStatusState state = AbstractFullDistribZkTestBase.getRequestStateAfterCompletion(asyncId, 330, cloudSolrClient);
          assertSame("did not see async createCollection completion", RequestStatusState.COMPLETED, state);
        }
      }

      try (SolrZkClient zkClient = new SolrZkClient
          (miniCluster.getZkServer().getZkAddress(), AbstractZkTestCase.TIMEOUT, 45000, null);
          ZkStateReader zkStateReader = new ZkStateReader(zkClient)) {
        AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);

        // add some documents, then optimize to get merged-sorted segments
        tstes.addDocuments(cloudSolrClient, 10, 10, true);

        // CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent
        tstes.queryTimestampDescending(cloudSolrClient);

        // add a few more documents, but don't optimize to have some not-merge-sorted segments
        tstes.addDocuments(cloudSolrClient, 2, 10, false);

        // CommonParams.SEGMENT_TERMINATE_EARLY parameter now present
        tstes.queryTimestampDescendingSegmentTerminateEarlyYes(cloudSolrClient);
        tstes.queryTimestampDescendingSegmentTerminateEarlyNo(cloudSolrClient);

        // CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used
        tstes.queryTimestampDescendingSegmentTerminateEarlyYesGrouped(cloudSolrClient);
        tstes.queryTimestampAscendingSegmentTerminateEarlyYes(cloudSolrClient); // uses a sort order that is _not_ compatible with the merge sort order

        // delete the collection we created earlier
        miniCluster.deleteCollection(collectionName);
        AbstractDistribZkTestBase.waitForCollectionToDisappear(collectionName, zkStateReader, true, true, 330);
      }
    }
    finally {
      miniCluster.shutdown();
    }
  }

