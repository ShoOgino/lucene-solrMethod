  public void testWaitForStateBeforeShutDown() throws Exception {
    final String col_name = "test_col";
    final ExecutorService executor = ExecutorUtil.newMDCAwareFixedThreadPool
      (1, new DefaultSolrThreadFactory("background_executor"));
    final MiniSolrCloudCluster cluster = new MiniSolrCloudCluster
      (1, createTempDir(), JettyConfig.builder().build());
    try {
      log.info("Create our collection");
      CollectionAdminRequest.createCollection(col_name, "_default", 1, 1).process(cluster.getSolrClient());
      
      log.info("Sanity check that our collection has come online");
      cluster.getSolrClient().waitForState(col_name, 30, TimeUnit.SECONDS,
                                           SolrCloudTestCase.clusterShape(1, 1));


      // HACK implementation detail...
      //
      // we know that in the current implementation, waitForState invokes the predicate twice
      // independently of the current state of the collection and/or wether the predicate succeeds.
      // If this implementation detail changes, (ie: so that it's only invoked once)
      // then this number needs to change -- but the test fundementally depends on the implementation
      // calling the predicate at least once, which should also be neccessary for any future impl
      // (to verify that it didn't "miss" the state change when creating the watcher)
      final CountDownLatch latch = new CountDownLatch(2);
      
      final Future<?> backgroundWaitForState = executor.submit
        (() -> {
          try {
            cluster.getSolrClient().waitForState(col_name, 180, TimeUnit.SECONDS,
                                                 new LatchCountingPredicateWrapper(latch,
                                                                                   clusterShape(1, 0)));
          } catch (Exception e) {
            log.error("background thread got exception", e);
            throw new RuntimeException(e);
          }
          return;
        }, null);
      
      log.info("Awaiting latch...");
      if (! latch.await(120, TimeUnit.SECONDS)) {
        fail("timed out Waiting a ridiculous amount of time for the waitForState latch -- did impl change?");
      }

      log.info("Shutdown 1 node");
      final JettySolrRunner nodeToStop = cluster.getJettySolrRunner(0);
      nodeToStop.stop();
      log.info("Wait to confirm our node is fully shutdown");
      cluster.waitForJettyToStop(nodeToStop);

      // now that we're confident that node has stoped, check if a waitForState
      // call will detect the missing replica -- shouldn't need long wait times...
      log.info("Checking Future result to see if waitForState finished successfully");
      try {
        backgroundWaitForState.get();
      } catch (ExecutionException e) {
        log.error("background waitForState exception", e);
        throw e;
      }
      
    } finally {
      ExecutorUtil.shutdownAndAwaitTermination(executor);
      cluster.shutdown();
    }
  }

