  public void testExternalModificationToStateFormat2() throws Exception {
    String zkDir = createTempDir("testExternalModificationToStateFormat2").toFile().getAbsolutePath();

    ZkTestServer server = new ZkTestServer(zkDir);

    SolrZkClient zkClient = null;

    try {
      server.run();

      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);
      ZkController.createClusterZkNodes(zkClient);

      try (ZkStateReader reader = new ZkStateReader(zkClient)) {
        reader.createClusterStateWatchersAndUpdate();

        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());

        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + "/c1", true);
        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + "/c2", true);

        ClusterState state = reader.getClusterState();

        // create collection 2 with stateFormat = 2
        ZkWriteCommand c2 = new ZkWriteCommand("c2",
            new DocCollection("c2", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath("c2")));
        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);
        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately

        int sharedClusterStateVersion = state.getZkClusterStateVersion();
        int stateFormat2Version = state.getCollection("c2").getZNodeVersion();

        // Simulate an external modification to /collections/c2/state.json
        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath("c2"), null, null, true);
        zkClient.setData(ZkStateReader.getCollectionPath("c2"), data, true);

        // get the most up-to-date state
        reader.forceUpdateCollection("c2");
        state = reader.getClusterState();
        log.info("Cluster state: {}", state);
        assertTrue(state.hasCollection("c2"));
        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());
        assertEquals(stateFormat2Version + 1, state.getCollection("c2").getZNodeVersion());

        writer.enqueueUpdate(state, Collections.singletonList(c2), null);
        assertTrue(writer.hasPendingUpdates());

        // get the most up-to-date state
        reader.forceUpdateCollection("c2");
        state = reader.getClusterState();

        // Will trigger flush
        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);
        ZkWriteCommand c1 = new ZkWriteCommand("c1",
            new DocCollection("c1", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));

        try {
          writer.enqueueUpdate(state, Collections.singletonList(c1), null);
          fail("Enqueue should not have succeeded");
        } catch (KeeperException.BadVersionException bve) {
          // expected
        }

        try {
          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);
          fail("enqueueUpdate after BadVersionException should not have succeeded");
        } catch (IllegalStateException e) {
          // expected
        }

        try {
          writer.writePendingUpdates();
          fail("writePendingUpdates after BadVersionException should not have succeeded");
        } catch (IllegalStateException e) {
          // expected
        }
      }
    } finally {
      IOUtils.close(zkClient);
      server.shutdown();
    }
  }

