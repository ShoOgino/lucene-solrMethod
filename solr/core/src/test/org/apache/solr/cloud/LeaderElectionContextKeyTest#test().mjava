  @Test
  public void test() throws KeeperException, InterruptedException, IOException, SolrServerException {
    ZkStateReader stateReader = cluster.getSolrClient().getZkStateReader();
    stateReader.forceUpdateCollection(TEST_COLLECTION_1);
    ClusterState clusterState = stateReader.getClusterState();
    // The test assume that TEST_COLLECTION_1 and TEST_COLLECTION_2 will have identical layout
    // ( same replica's name on every shard )
    for (int i = 1; i <= 2; i++) {
      String coll1ShardiLeader = clusterState.getCollection(TEST_COLLECTION_1).getLeader("shard"+i).getName();
      String coll2ShardiLeader = clusterState.getCollection(TEST_COLLECTION_2).getLeader("shard"+i).getName();
      String assertMss = String.format(Locale.ROOT, "Expect %s and %s each have a replica with same name on shard %s",
          coll1ShardiLeader, coll2ShardiLeader, "shard"+i);
      assertEquals(
          assertMss,
          coll1ShardiLeader,
          coll2ShardiLeader
      );
    }

    String shard = "shard" + String.valueOf(random().nextInt(2) + 1);
    Replica replica = clusterState.getCollection(TEST_COLLECTION_1).getLeader(shard);
    assertNotNull(replica);

    try (SolrClient shardLeaderClient = new HttpSolrClient.Builder(replica.get("base_url").toString()).build()) {
      assertEquals(1L, getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size());
      List<String> collection2Shard1Nodes = getElectionNodes(TEST_COLLECTION_2, "shard1", stateReader.getZkClient());
      List<String> collection2Shard2Nodes = getElectionNodes(TEST_COLLECTION_2, "shard2", stateReader.getZkClient());
      CoreAdminRequest.unloadCore(replica.getCoreName(), shardLeaderClient);
      // Waiting for leader election being kicked off
      long timeout = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);
      boolean found = false;
      while (System.nanoTime() < timeout) {
        try {
          found = getElectionNodes(TEST_COLLECTION_1, shard, stateReader.getZkClient()).size() == 0;
          break;
        } catch (KeeperException.NoNodeException nne) {
          // ignore
        }
      }
      assertTrue(found);
      // There are no leader election was kicked off on testCollection2
      assertThat(collection2Shard1Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, "shard1", stateReader.getZkClient())));
      assertThat(collection2Shard2Nodes, CoreMatchers.is(getElectionNodes(TEST_COLLECTION_2, "shard2", stateReader.getZkClient())));
    }
  }

