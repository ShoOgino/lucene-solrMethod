  protected Set<String> commonMocks(int liveNodesCount) throws Exception {
    workQueueMock.peek(true);
    expectLastCall().andAnswer(new IAnswer<Object>() {
      @Override
      public Object answer() throws Throwable {
        Object result;
        while ((result = queue.peek()) == null) {
          Thread.sleep(1000);
        }
        return result;
      }
    }).anyTimes();
    
    workQueueMock.remove(anyObject(QueueEvent.class));
    expectLastCall().andAnswer(new IAnswer<Object>() {
      @Override
      public Object answer() throws Throwable {
        queue.remove((QueueEvent)EasyMock.getCurrentArguments()[0]);
        return null;
      }
    }).anyTimes();
    
    workQueueMock.poll();
    expectLastCall().andAnswer(new IAnswer<Object>() {
      @Override
      public Object answer() throws Throwable {
        return queue.poll();
      }
    }).anyTimes();
    
    zkStateReaderMock.getClusterState();
    expectLastCall().andAnswer(new IAnswer<Object>() {
      @Override
      public Object answer() throws Throwable {
        return clusterStateMock;
      }
    }).anyTimes();
    
    zkStateReaderMock.getZkClient();
    expectLastCall().andAnswer(new IAnswer<Object>() {
      @Override
      public Object answer() throws Throwable {
        return solrZkClientMock;
      }
    }).anyTimes();
    
    
    clusterStateMock.getCollections();
    expectLastCall().andAnswer(new IAnswer<Object>() {
      @Override
      public Object answer() throws Throwable {
        return new HashSet<String>();
      }
    }).anyTimes();
    final Set<String> liveNodes = new HashSet<String>();
    for (int i = 0; i < liveNodesCount; i++) {
      final String address = "localhost:" + (8963 + i) + "_solr";
      liveNodes.add(address);
      
      solrZkClientMock.getBaseUrlForNodeName(address);
      expectLastCall().andAnswer(new IAnswer<Object>() {
        @Override
        public Object answer() throws Throwable {
          // This works as long as this test does not use a 
          // webapp context with an underscore in it
          return address.replaceAll("_", "/");
        }
      }).anyTimes();
      
    }
    clusterStateMock.getLiveNodes();
    expectLastCall().andAnswer(new IAnswer<Object>() {
      @Override
      public Object answer() throws Throwable {
        return liveNodes;
      }
    }).anyTimes();
    
    return liveNodes;
  }

