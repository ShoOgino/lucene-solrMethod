  /** Asserts that the UpdateResponse contains the specified expectedErrs and no others */
  public static void assertUpdateTolerantErrors(String assertionMsgPrefix,
                                                UpdateResponse response,
                                                ExpectedErr... expectedErrs) {
    @SuppressWarnings("unchecked")
    List<SimpleOrderedMap<String>> errors = (List<SimpleOrderedMap<String>>)
      response.getResponseHeader().get("errors");
    
    assertNotNull(assertionMsgPrefix + ": Null errors: " + response.toString(), errors);
    assertEquals(assertionMsgPrefix + ": Num error ids: " + errors.toString(),
                 expectedErrs.length, errors.size());

    for (SimpleOrderedMap<String> err : errors) {
      String assertErrPre = assertionMsgPrefix + ": " + err.toString();

      String id = err.get("id");
      assertNotNull(assertErrPre + " ... null id", id);
      String type = err.get("type");
      assertNotNull(assertErrPre + " ... null type", type);
      String message = err.get("message");
      assertNotNull(assertErrPre + " ... null message", message);

      // inefficient scan, but good nough for the size of sets we're dealing with
      boolean found = false;
      for (ExpectedErr expected : expectedErrs) {
        if (expected.type.equals(type) && expected.id.equals(id)
            && (null == expected.msgSubStr || message.contains(expected.msgSubStr))) {
          found = true;
          break;
        }
      }
      assertTrue(assertErrPre + " ... unexpected err in: " + response.toString(), found);

    }
  }

