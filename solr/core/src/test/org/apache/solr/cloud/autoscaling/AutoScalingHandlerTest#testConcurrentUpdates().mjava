  @Test
  public void testConcurrentUpdates() throws Exception {
    int COUNT = 50;
    CloudSolrClient solrClient = cluster.getSolrClient();
    CountDownLatch updateLatch = new CountDownLatch(COUNT * 2);
    Runnable r = () -> {
      for (int i = 0; i < COUNT; i++) {
        String setTriggerCommand = "{" +
            "'set-trigger' : {" +
            "'name' : 'node_added_trigger1'," +
            "'event' : 'nodeAdded'," +
            "'waitFor' : '0s'," +
            "'enabled' : true" +
            "}}";
        @SuppressWarnings({"rawtypes"})
        SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);
        NamedList<Object> response = null;
        try {
          response = solrClient.request(req);
          assertEquals(response.get("result").toString(), "success");
        } catch (Exception e) {
          fail(e.toString());
        } finally {
          updateLatch.countDown();
        }
      }
    };
    Thread t1 = new Thread(r);
    Thread t2 = new Thread(r);
    t1.start();
    t2.start();
    boolean await = updateLatch.await(60, TimeUnit.SECONDS);
    assertTrue("not all updates executed in time, remaining=" + updateLatch.getCount(), await);
    @SuppressWarnings({"rawtypes"})
    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);
    NamedList<Object> response = solrClient.request(req);

    @SuppressWarnings({"rawtypes"})
    Map triggers = (Map) response.get("triggers");
    assertNotNull(triggers);
    assertEquals(1, countNotImplicitTriggers(triggers));
    assertTrue(triggers.containsKey("node_added_trigger1"));
    @SuppressWarnings({"rawtypes"})
    Map node_added_trigger1 = (Map) triggers.get("node_added_trigger1");
    assertEquals(4, node_added_trigger1.size());
    assertEquals(0L, node_added_trigger1.get("waitFor"));
    assertEquals(true, node_added_trigger1.get("enabled"));
    assertEquals(2, ((List)node_added_trigger1.get("actions")).size());

  }

