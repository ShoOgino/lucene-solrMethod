    /** 
     * recursive helper method for building random facets
     *
     * @param keyCounter used to ensure every generated facet has a unique key name
     * @param maxDepth max possible depth allowed for the recusion, a lower value may be used depending on how many facets are returned at the current level. 
     */
    private static Map<String,TermFacet> buildRandomFacets(AtomicInteger keyCounter, int maxDepth) {
      final int numFacets = Math.max(1, TestUtil.nextInt(random(), -1, 3)); // 3/5th chance of being '1'
      Map<String,TermFacet> results = new LinkedHashMap<>();
      for (int i = 0; i < numFacets; i++) {
        final JoinDomain domain = JoinDomain.buildRandomDomain();
        assert null != domain;
        final TermFacet facet =  new TermFacet(field(random().nextBoolean() ? STR_FIELD_SUFFIXES : INT_FIELD_SUFFIXES,
                                                     random().nextInt(MAX_FIELD_NUM)),
                                               domain);
        results.put("facet_" + keyCounter.incrementAndGet(), facet);
        if (0 < maxDepth) {
          // if we're going wide, don't go deep
          final int nextMaxDepth = Math.max(0, maxDepth - numFacets);
          facet.subFacets.putAll(buildRandomFacets(keyCounter, TestUtil.nextInt(random(), 0, nextMaxDepth)));
        }
      }
      return results;
    }

