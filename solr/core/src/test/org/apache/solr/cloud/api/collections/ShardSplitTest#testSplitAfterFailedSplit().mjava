  /**
   * Used to test that we can split a shard when a previous split event
   * left sub-shards in construction or recovery state.
   *
   * See SOLR-9439
   */
  @Test
  //05-Jul-2018 @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028")
  public void testSplitAfterFailedSplit() throws Exception {
    waitForThingsToLevelOut(15);

    TestInjection.splitFailureBeforeReplicaCreation = "true:100"; // we definitely want split to fail
    try {
      try {
        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);
        splitShard.setShardName(SHARD1);
        splitShard.process(cloudClient);
        fail("Shard split was not supposed to succeed after failure injection!");
      } catch (Exception e) {
        // expected
      }

      // assert that sub-shards cores exist and sub-shard is in construction state
      ZkStateReader zkStateReader = cloudClient.getZkStateReader();
      zkStateReader.forceUpdateCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);
      ClusterState state = zkStateReader.getClusterState();
      DocCollection collection = state.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION);

      // should be cleaned up
      Slice shard10 = collection.getSlice(SHARD1_0);
      assertNull(shard10);

      Slice shard11 = collection.getSlice(SHARD1_1);
      assertNull(shard11);

      // lets retry the split
      TestInjection.reset(); // let the split succeed
      try {
        CollectionAdminRequest.SplitShard splitShard = CollectionAdminRequest.splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION);
        splitShard.setShardName(SHARD1);
        splitShard.process(cloudClient);
        // Yay!
      } catch (Exception e) {
        log.error("Shard split failed", e);
        fail("Shard split did not succeed after a previous failed split attempt left sub-shards in construction state");
      }

    } finally {
      TestInjection.reset();
    }
  }

