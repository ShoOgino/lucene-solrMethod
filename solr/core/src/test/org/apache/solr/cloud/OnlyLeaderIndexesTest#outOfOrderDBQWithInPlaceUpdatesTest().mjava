  public void outOfOrderDBQWithInPlaceUpdatesTest() throws Exception {
    new UpdateRequest()
        .deleteByQuery("*:*")
        .commit(cluster.getSolrClient(), COLLECTION);
    List<UpdateRequest> updates = new ArrayList<>();
    updates.add(simulatedUpdateRequest(null, "id", 1, "title_s", "title0_new", "inplace_updatable_int", 5, "_version_", Long.MAX_VALUE-100)); // full update
    updates.add(simulatedDBQ("inplace_updatable_int:5", Long.MAX_VALUE-98));
    updates.add(simulatedUpdateRequest(Long.MAX_VALUE-100, "id", 1, "inplace_updatable_int", 6, "_version_", Long.MAX_VALUE-99));
    for (JettySolrRunner solrRunner: getSolrRunner(false)) {
      try (SolrClient client = solrRunner.newClient()) {
        for (UpdateRequest up : updates) {
          up.process(client, COLLECTION);
        }
      }
    }
    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);
    ChaosMonkey.kill(oldLeaderJetty);
    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),
        false, true, 30);
    ChaosMonkey.start(oldLeaderJetty);
    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),
        false, true, 30);
    new UpdateRequest()
        .add(sdoc("id", "2"))
        .commit(cluster.getSolrClient(), COLLECTION);
    checkShardConsistency(2,20);
    SolrDocument doc = cluster.getSolrClient().getById(COLLECTION,"1");
    assertNotNull(doc.get("title_s"));
  }

