  @Test
  public void testGetSetRemoveData() throws Exception {
    stateManager.makePath("/getData");
    stateManager.createData("/getData/persistentData", firstData, CreateMode.PERSISTENT);
    OnceWatcher nodeWatcher = new OnceWatcher();
    VersionedData vd = stateManager.getData("/getData/persistentData", nodeWatcher);
    assertNotNull(vd);
    assertEquals(0, vd.getVersion());
    assertTrue(Arrays.equals(firstData, vd.getData()));

    // update data, test versioning
    try {
      stateManager.setData("/getData/persistentData", secondData, 1);
      fail("should have failed");
    } catch (BadVersionException e) {
      // expected
    }
    // watch should not have fired
    assertEquals(1, nodeWatcher.triggered.getCount());

    stateManager.setData("/getData/persistentData", secondData, 0);
    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {
      fail("Node watch should have fired!");
    }
    // watch should not fire now because it needs to be reset
    stateManager.setData("/getData/persistentData", secondData, -1);

    nodeWatcher = new OnceWatcher();
    stateManager.createData("/getData/ephemeralData", firstData, CreateMode.EPHEMERAL);
    vd = stateManager.getData("/getData/ephemeralData", nodeWatcher);
    reInit();
    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {
      fail("Node watch should have fired!");
    }
    assertTrue(stateManager.hasData("/getData/persistentData"));
    assertFalse(stateManager.hasData("/getData/ephemeralData"));

    nodeWatcher = new OnceWatcher();
    vd = stateManager.getData("/getData/persistentData", nodeWatcher);
    // try wrong version
    try {
      stateManager.removeData("/getData/persistentData", vd.getVersion() - 1);
      fail("should have failed");
    } catch (BadVersionException e) {
      // expected
    }
    // watch should not have fired
    assertEquals(1, nodeWatcher.triggered.getCount());

    stateManager.removeData("/getData/persistentData", vd.getVersion());
    if (!nodeWatcher.triggered.await(5, TimeUnit.SECONDS)) {
      fail("Node watch should have fired!");
    }
  }

