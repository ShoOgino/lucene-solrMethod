    public void start() {
      server = new Server(new InetSocketAddress("localhost", 0));
      server.setHandler(new AbstractHandler() {
        @Override
        public void handle(String s, Request request, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.append(httpServletRequest.getRequestURI());
          Enumeration<String> headerNames = httpServletRequest.getHeaderNames();
          while (headerNames.hasMoreElements()) {
            stringBuilder.append('\n');
            String name = headerNames.nextElement();
            stringBuilder.append(name);
            stringBuilder.append(": ");
            stringBuilder.append(httpServletRequest.getHeader(name));
          }
          stringBuilder.append("\n\n");
          ServletInputStream is = request.getInputStream();
          byte[] httpInData = new byte[request.getContentLength()];
          int len = -1;
          while ((len = is.read(httpInData)) != -1) {
            stringBuilder.append(new String(httpInData, 0, len, StandardCharsets.UTF_8));
          }
          requests.add(stringBuilder.toString());
          httpServletResponse.setStatus(HttpServletResponse.SC_OK);
          request.setHandled(true);
        }
      });
      try {
        server.start();
        for (int i = 0; i < 30; i++) {
          Thread.sleep(1000);
          if (server.isRunning()) {
            break;
          }
          if (server.isFailed()) {
            throw new Exception("MockService startup failed - the test will fail...");
          }
        }
      } catch (Exception e) {
        throw new RuntimeException("Exception starting MockService", e);
      }
    }

