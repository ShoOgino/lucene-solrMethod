  /**
   * Inserts data into queue.  If there are no other queue consumers, the offered element
   * will be immediately visible when this method returns.
   */
  @Override
  public void offer(byte[] data) throws Exception {
    Timer.Context time = stats.time(dir + "_offer");
    try {
      while (true) {
        try {
          if (maxQueueSize > 0) {
            if (offerPermits.get() <= 0 || offerPermits.getAndDecrement() <= 0) {
              // If a max queue size is set, check it before creating a new queue item.
              if (!stateManager.hasData(dir)) {
                // jump to the code below, which tries to create dir if it doesn't exist
                throw new NoSuchElementException();
              }
              List<String> children = stateManager.listData(dir);
              int remainingCapacity = maxQueueSize - children.size();
              if (remainingCapacity <= 0) {
                throw new IllegalStateException("queue is full");
              }

              // Allow this client to push up to 1% of the remaining queue capacity without rechecking.
              offerPermits.set(remainingCapacity / 100);
            }
          }

          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.
          // This will get set again when the watcher actually fires, but that's ok.
          stateManager.createData(dir + "/" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL);
          isDirty = true;
          return;
        } catch (NoSuchElementException e) {
          try {
            stateManager.createData(dir, new byte[0], CreateMode.PERSISTENT);
          } catch (NoSuchElementException ne) {
            // someone created it
          }
        }
      }
    } finally {
      time.stop();
    }
  }

