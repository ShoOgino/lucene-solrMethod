  /**
   * returns a map whose key is the coreNodeName and whose value is data about that core needed for the test
   */
  private Map<String,ReplicaData> getTestDataForAllReplicas() throws IOException, SolrServerException {
    Map<String,ReplicaData> results = new HashMap<>();

    DocCollection collectionState = cluster.getSolrClient().getZkStateReader().getClusterState().getCollection(COLLECTION);

    for (Replica replica : collectionState.getReplicas()) {

      String coreName = replica.getCoreName();
      try (HttpSolrClient client = getHttpSolrClient(replica.getCoreUrl())) {

        ModifiableSolrParams params = new ModifiableSolrParams();
        params.set("command", "indexversion");
        params.set("_trace", "getIndexVersion");
        params.set("qt", ReplicationHandler.PATH);
        QueryRequest req = setAuthIfNeeded(new QueryRequest(params));

        NamedList<Object> res = client.request(req);
        assertNotNull("null response from server: " + coreName, res);

        Object version = res.get("indexversion");
        assertNotNull("null version from server: " + coreName, version);
        assertTrue("version isn't a long: " + coreName, version instanceof Long);

        long numDocs = 
          setAuthIfNeeded(new QueryRequest
                          (params("q", "*:*",
                                  "distrib", "false",
                                  "rows", "0",
                                  "_trace", "counting_docs"))).process(client).getResults().getNumFound();

        final ReplicaData data = new ReplicaData(replica.getShard(),coreName,(Long)version,numDocs);
        log.info("{}", data);
        results.put(coreName, data);

      }
    }

    return results;
  }

