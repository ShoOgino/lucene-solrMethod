  public void testMultiValued() throws Exception {
    // the response writers used to consult isMultiValued on the field
    // but this doesn't work when you alias a single valued field to
    // a multi valued field (the field value is copied first, then
    // if the type lookup is done again later, we get the wrong thing). SOLR-4036

    // score as psuedo field - precondition checks
    for (String name : new String[] {"score", "val_ss"}) {
      try {
        FieldResponse frsp = new Field(name, params("includeDynamic","true",
                                                    "showDefaults","true")).process(CLOUD_CLIENT);
        assertNotNull("Test depends on a (dynamic) field matching '"+name+"', Null response", frsp);
        assertEquals("Test depends on a (dynamic) field matching '"+name+"', bad status: " + frsp.toString(),
                     0, frsp.getStatus());
        assertNotNull("Test depends on a (dynamic) field matching '"+name+
                      "', schema was changed out from under us? ... " + frsp.toString(), frsp.getField());
        assertEquals("Test depends on a multivalued dynamic field matching '"+name+
                     "', schema was changed out from under us? ... " + frsp.toString(),
                     Boolean.TRUE, frsp.getField().get("multiValued"));
      } catch (SolrServerException e) {
        assertEquals("Couldn't fetch field for '"+name+"' ... schema changed out from under us?",
                     null, e);
      }
    }

    SolrDocument doc = null;
    
    // score as psuedo field
    doc = assertSearchOneDoc(params("q","*:*", "fq", "id:42", "fl","id,score,val_ss,val2_ss"));
    assertEquals("42", doc.getFieldValue("id"));
    assertEquals(1.0F, doc.getFieldValue("score"));
    assertEquals(""+doc, 2, doc.size()); // no value for val2_ss or val_ss ... yet...
    
    // TODO: update this test & TestPseudoReturnFields to index docs using a (multivalued) "val_ss" instead of "ssto"
    //
    // that way we can first sanity check a single value in a multivalued field is returned correctly
    // as a "List" of one element, *AND* then we could be testing that a (single valued) psuedo-field correctly
    // overrides that actual (real) value in a multivalued field (ie: not returning a an List)
    //
    // (NOTE: not doing this yet due to how it will impact most other tests, many of which are currently
    // @AwaitsFix'ed)
    //
    //assertTrue(doc.getFieldValue("val_ss").getClass().toString(),
    //           doc.getFieldValue("val_ss") instanceof List);
    
    // single value int using alias that matches multivalued dynamic field
    doc = assertSearchOneDoc(params("q","id:42", "fl","val_ss:val_i, val2_ss:10"));
    assertEquals(""+doc, 2, doc.size());
    assertEquals(""+doc, 1, doc.getFieldValue("val_ss"));
    assertEquals(""+doc, 10L, doc.getFieldValue("val2_ss"));
  }

