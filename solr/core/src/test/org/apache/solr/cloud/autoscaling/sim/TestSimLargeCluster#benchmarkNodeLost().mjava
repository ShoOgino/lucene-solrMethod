  //@Test
  public void benchmarkNodeLost() throws Exception {
    List<String> results = new ArrayList<>();
    for (int wait : renard5x) {
      for (int delay : renard5x) {
        SummaryStatistics totalTime = new SummaryStatistics();
        SummaryStatistics ignoredOurEvents = new SummaryStatistics();
        SummaryStatistics ignoredOtherEvents = new SummaryStatistics();
        SummaryStatistics startedOurEvents = new SummaryStatistics();
        SummaryStatistics startedOtherEvents = new SummaryStatistics();
        for (int i = 0; i < 5; i++) {
          if (cluster != null) {
            cluster.close();
          }
          setUp();
          setupTest();
          long total = doTestNodeLost(wait, delay * 1000, 0);
          totalTime.addValue(total);
          // get event counts
          Map<String, Map<String, AtomicInteger>> counts = cluster.simGetEventCounts();
          Map<String, AtomicInteger> map = counts.remove("node_lost_trigger");
          startedOurEvents.addValue(map.getOrDefault("STARTED", ZERO).get());
          ignoredOurEvents.addValue(map.getOrDefault("IGNORED", ZERO).get());
          int otherStarted = 0;
          int otherIgnored = 0;
          for (Map<String, AtomicInteger> m : counts.values()) {
            otherStarted += m.getOrDefault("STARTED", ZERO).get();
            otherIgnored += m.getOrDefault("IGNORED", ZERO).get();
          }
          startedOtherEvents.addValue(otherStarted);
          ignoredOtherEvents.addValue(otherIgnored);
        }
        results.add(String.format(Locale.ROOT, "%d\t%d\t%4.0f\t%4.0f\t%4.0f\t%4.0f\t%6.0f\t%6.0f\t%6.0f\t%6.0f\t%6.0f",
            wait, delay, startedOurEvents.getMean(), ignoredOurEvents.getMean(),
            startedOtherEvents.getMean(), ignoredOtherEvents.getMean(),
            totalTime.getMin(), totalTime.getMax(), totalTime.getMean(), totalTime.getStandardDeviation(), totalTime.getVariance()));
      }
    }
    log.info("===== RESULTS ======");
    log.info("waitFor\tdelay\tSTRT\tIGN\toSTRT\toIGN\tmin\tmax\tmean\tstdev\tvar");
    if (log.isInfoEnabled()) {
      results.forEach(s -> log.info(s));
    }
  }

