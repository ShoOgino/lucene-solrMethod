  @Test
  public void testReadApi() throws Exception  {
    CloudSolrClient solrClient = cluster.getSolrClient();
    // first trigger
    String setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : 'node_added_trigger1'," +
        "'event' : 'nodeAdded'," +
        "'waitFor' : '0s'," +
        "'enabled' : true" +
        "}}";
    SolrRequest req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    String setClusterPolicyCommand = "{" +
        " 'set-cluster-policy': [" +
        "      {'cores':'<10', 'node':'#ANY'}," +
        "      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}," +
        "      {'nodeRole':'!overseer', 'replica':'#ANY'}" +
        "    ]" +
        "}";
    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setClusterPolicyCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    String setPreferencesCommand = "{" +
        " 'set-cluster-preferences': [" +
        "        {'minimize': 'cores', 'precision': 3}," +
        "        {'maximize': 'freedisk','precision': 100}," +
        "        {'minimize': 'sysLoadAvg','precision': 10}," +
        "        {'minimize': 'heapUsage','precision': 10}]" +
        "}";
    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPreferencesCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    String setPolicyCommand =  "{'set-policy': {" +
        "    'xyz':[" +
        "      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}," +
        "      {'nodeRole':'!overseer', 'replica':'#ANY'}" +
        "    ]," +
        "    'policy1':[" +
        "      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}" +
        "    ]" +
        "}}";
    req = new AutoScalingRequest(SolrRequest.METHOD.POST, path, setPolicyCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    SolrQuery query = new SolrQuery().setParam(CommonParams.QT, path).setParam("diagnostics", true);
    QueryResponse queryResponse = solrClient.query(query);
    response = queryResponse.getResponse();

    Map triggers = (Map) response.get("triggers");
    assertNotNull(triggers);
    assertEquals(1, triggers.size());
    assertTrue(triggers.containsKey("node_added_trigger1"));
    Map node_added_trigger1 = (Map) triggers.get("node_added_trigger1");
    assertEquals(4, node_added_trigger1.size());
    assertEquals(0L, node_added_trigger1.get("waitFor"));
    assertEquals(true, node_added_trigger1.get("enabled"));
    assertEquals(3, ((List)node_added_trigger1.get("actions")).size());

    List<Map> clusterPrefs = (List<Map>) response.get("cluster-preferences");
    assertNotNull(clusterPrefs);
    assertEquals(4, clusterPrefs.size());

    List<Map> clusterPolicy = (List<Map>) response.get("cluster-policy");
    assertNotNull(clusterPolicy);
    assertEquals(3, clusterPolicy.size());

    Map policies = (Map) response.get("policies");
    assertNotNull(policies);
    assertEquals(2, policies.size());
    assertNotNull(policies.get("xyz"));
    assertNotNull(policies.get("policy1"));

    Map<String, Object> diagnostics = (Map<String, Object>) response.get("diagnostics");
    List sortedNodes = (List) diagnostics.get("sortedNodes");
    assertNotNull(sortedNodes);

    assertEquals(2, sortedNodes.size());
    String[] sortedNodeNames = new String[2];
    for (int i = 0; i < 2; i++) {
      Map node = (Map) sortedNodes.get(i);
      assertNotNull(node);
      assertEquals(5, node.size());
      assertNotNull(sortedNodeNames[i] = (String) node.get("node"));
      assertNotNull(node.get("cores"));
      assertEquals(0, node.get("cores"));
      assertNotNull(node.get("freedisk"));
      assertNotNull(node.get("sysLoadAvg"));
      assertNotNull(node.get("heapUsage"));
    }

    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get("violations");
    assertNotNull(violations);
    assertEquals(0, violations.size());

    // lets create a collection and ensure that its details show up in the diagnostics output
    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection("readApiTest", 1, 2);
    CollectionAdminResponse adminResponse = create.process(solrClient);
    assertTrue(adminResponse.isSuccess());

    // get the diagnostics output again
    queryResponse = solrClient.query(query);
    response = queryResponse.getResponse();
    diagnostics = (Map<String, Object>) response.get("diagnostics");
    sortedNodes = (List) diagnostics.get("sortedNodes");
    assertNotNull(sortedNodes);

    assertEquals(2, sortedNodes.size());
    for (int i = 0; i < 2; i++) {
      Map node = (Map) sortedNodes.get(i);
      assertNotNull(node);
      assertEquals(5, node.size());
      assertNotNull(node.get("node"));
      assertEquals(sortedNodeNames[i], node.get("node"));
      assertNotNull(node.get("cores"));
      assertEquals(1, node.get("cores"));
      assertNotNull(node.get("freedisk"));
      assertNotNull(node.get("sysLoadAvg"));
      assertNotNull(node.get("heapUsage"));
    }

    violations = (List<Map<String, Object>>) diagnostics.get("violations");
    assertNotNull(violations);
    assertEquals(0, violations.size());

    // lets create a collection which violates the rule replicas < 2
    create = CollectionAdminRequest.Create.createCollection("readApiTestViolations", 1, 6);
    create.setMaxShardsPerNode(10);
    adminResponse = create.process(solrClient);
    assertTrue(adminResponse.isSuccess());

    // get the diagnostics output again
    queryResponse = solrClient.query(query);
    response = queryResponse.getResponse();
    diagnostics = (Map<String, Object>) response.get("diagnostics");
    sortedNodes = (List) diagnostics.get("sortedNodes");
    assertNotNull(sortedNodes);

    violations = (List<Map<String, Object>>) diagnostics.get("violations");
    assertNotNull(violations);
    assertEquals(2, violations.size());
    for (Map<String, Object> violation : violations) {
      assertEquals("readApiTestViolations", violation.get("collection"));
      assertEquals("shard1", violation.get("shard"));
      assertEquals(Utils.makeMap("replica", "3"), violation.get("violation"));
      assertNotNull(violation.get("clause"));
    }
  }

