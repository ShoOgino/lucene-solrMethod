  @Test
  @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // added 17-Aug-2018
  public void testReadApi() throws Exception  {
    CloudSolrClient solrClient = cluster.getSolrClient();
    // first trigger
    String setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : 'node_added_trigger1'," +
        "'event' : 'nodeAdded'," +
        "'waitFor' : '0s'," +
        "'enabled' : true" +
        "}}";
    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    String setClusterPolicyCommand = "{" +
        " 'set-cluster-policy': [" +
        "      {'cores':'<10', 'node':'#ANY'}," +
        "      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'}]" +
        "}";
    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    String setPreferencesCommand = "{" +
        " 'set-cluster-preferences': [" +
        "        {'minimize': 'cores', 'precision': 3}," +
        "        {'maximize': 'freedisk','precision': 100}," +
        "        {'minimize': 'sysLoadAvg','precision': 10}," +
        "        {'minimize': 'heapUsage','precision': 10}]" +
        "}";
    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPreferencesCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    String setPolicyCommand =  "{'set-policy': {" +
        "    'xyz':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}]," +
        "    'policy1':[{'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}]," +
        "    'policy2':[{'replica':'<7', 'shard': '#EACH', 'node': '#ANY'}]}}";
    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setPolicyCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, null);
    response = solrClient.request(req);

    Map triggers = (Map) response.get("triggers");
    assertNotNull(triggers);
    assertEquals(1, countNotImplicitTriggers(triggers));
    assertTrue(triggers.containsKey("node_added_trigger1"));
    Map node_added_trigger1 = (Map) triggers.get("node_added_trigger1");
    assertEquals(4, node_added_trigger1.size());
    assertEquals(0L, node_added_trigger1.get("waitFor"));
    assertEquals(true, node_added_trigger1.get("enabled"));
    assertEquals(2, ((List)node_added_trigger1.get("actions")).size());

    List<Map> clusterPrefs = (List<Map>) response.get("cluster-preferences");
    assertNotNull(clusterPrefs);
    assertEquals(4, clusterPrefs.size());

    List<Map> clusterPolicy = (List<Map>) response.get("cluster-policy");
    assertNotNull(clusterPolicy);
    assertEquals(2, clusterPolicy.size());

    Map policies = (Map) response.get("policies");
    assertNotNull(policies);
    assertEquals(3, policies.size());
    assertNotNull(policies.get("xyz"));
    assertNotNull(policies.get("policy1"));

    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, "/diagnostics", null);
    response = solrClient.request(req);

    Map<String, Object> diagnostics = (Map<String, Object>) response.get("diagnostics");
    List sortedNodes = (List) Utils.getObjectByPath(response, false, "diagnostics/sortedNodes");
    assertNotNull(sortedNodes);

    assertEquals(2, sortedNodes.size());
    for (int i = 0; i < 2; i++) {
      Map node = (Map) sortedNodes.get(i);
      assertNotNull(node);
      assertNotNull(node.get("node"));
      assertNotNull(node.get("cores"));
      assertEquals(0d, node.get("cores"));
      assertNotNull(node.get("freedisk"));
      assertNotNull(node.get("replicas"));
      assertTrue(node.get("freedisk") instanceof Double);
      assertNotNull(node.get("sysLoadAvg"));
      assertTrue(node.get("sysLoadAvg") instanceof Double);
      assertNotNull(node.get("heapUsage"));
      assertTrue(node.get("heapUsage") instanceof Double);
    }

    List<Map<String, Object>> violations = (List<Map<String, Object>>) diagnostics.get("violations");
    assertNotNull(violations);
    assertEquals(0, violations.size());

    violations = (List<Map<String, Object>>) diagnostics.get("violations");
    assertNotNull(violations);
    assertEquals(0, violations.size());

    // temporarily increase replica limit in cluster policy so that we can create a collection with 6 replicas
    String tempClusterPolicyCommand = "{" +
        " 'set-cluster-policy': [" +
        "      {'cores':'<10', 'node':'#ANY'}," +
        "      {'replica':'<4', 'shard': '#EACH', 'node': '#ANY'}"+
        "    ]" +
        "}";
    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, tempClusterPolicyCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    // lets create a collection which violates the rule replicas < 2
    CollectionAdminRequest.Create create = CollectionAdminRequest.Create.createCollection("readApiTestViolations", CONFIGSET_NAME, 1, 6)
        .setMaxShardsPerNode(3);
    CollectionAdminResponse adminResponse = create.process(solrClient);
    cluster.waitForActiveCollection("readApiTestViolations", 1, 6);
    assertTrue(adminResponse.isSuccess());

    // reset the original cluster policy
    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    // get the diagnostics output again
    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, "/diagnostics", null);
    response = solrClient.request(req);
    diagnostics = (Map<String, Object>) response.get("diagnostics");
    sortedNodes = (List) diagnostics.get("sortedNodes");
    assertNotNull(sortedNodes);

    violations = (List<Map<String, Object>>) diagnostics.get("violations");
    assertNotNull(violations);
    assertEquals(2, violations.size());
    for (Map<String, Object> violation : violations) {
      assertEquals("readApiTestViolations", violation.get("collection"));
      assertEquals("shard1", violation.get("shard"));
      assertEquals(1.0d, getObjectByPath(violation, true, "violation/delta"));
      assertEquals(3l, getObjectByPath(violation, true, "violation/replica/NRT"));
      assertNotNull(violation.get("clause"));
    }
    log.info("Before starting new jetty ,{}", cluster.getJettySolrRunners()
        .stream()
        .map(jettySolrRunner -> jettySolrRunner.getNodeName()).collect(Collectors.toList()));
    JettySolrRunner runner1 = cluster.startJettySolrRunner();
    cluster.waitForAllNodes(30);
    log.info("started new jetty {}", runner1.getNodeName());

    response = waitForResponse(namedList -> {
          List l = (List) Utils.getObjectByPath(namedList, false, "diagnostics/liveNodes");
          if (l != null && l.contains(runner1.getNodeName())) return true;
          return false;
        },
        AutoScalingRequest.create(SolrRequest.METHOD.GET, "/diagnostics", null),
        200,
        20,
        runner1.getNodeName() + " could not come up ");

    req = AutoScalingRequest.create(SolrRequest.METHOD.GET, "/suggestions", null);
    response = solrClient.request(req);
    List l = (List) response.get("suggestions");
    assertNotNull(l);
    assertEquals(2, l.size());
    for (int i = 0; i < l.size(); i++) {
      Object suggestion = l.get(i);
      assertEquals("violation", Utils.getObjectByPath(suggestion, true, "type"));
      assertEquals("POST", Utils.getObjectByPath(suggestion, true, "operation/method"));
      assertEquals("/c/readApiTestViolations", Utils.getObjectByPath(suggestion, true, "operation/path"));
      String node = (String) Utils.getObjectByPath(suggestion, true, "operation/command/move-replica/targetNode");
      assertNotNull(node);
      assertEquals(runner1.getNodeName(), node);
    }
  }

