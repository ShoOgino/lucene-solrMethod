  @Test
  @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 14-Oct-2018
  public void testReplicationAfterLeaderChange() throws Exception {
    createCollections();
    CdcrTestsUtil.cdcrStart(sourceSolrClient);
    Thread.sleep(2000);

    // index 100 docs
    for (int i = 0; i < 100; i++) {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("id", "doc_" + i);
      CdcrTestsUtil.index(source, "cdcr-source", doc);
      sourceSolrClient.commit();
    }
    Thread.sleep(2000);

    // verify cdcr has replicated docs
    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));
    assertEquals("source docs mismatch", 100, response.getResults().getNumFound());
    assertEquals("target docs mismatch", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));
    CdcrTestsUtil.assertShardInSync("cdcr-source", "shard1", sourceSolrClient);

    // restart one of the source cluster nodes
    CdcrTestsUtil.restartClusterNode(source, "cdcr-source", 0);
    sourceSolrClient = source.getSolrClient();
    sourceSolrClient.setDefaultCollection("cdcr-source");

    // add `100 more docs, 200 until now
    for (int i = 100; i < 200; i++) {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("id", "doc_" + i);
      CdcrTestsUtil.index(source, "cdcr-source", doc);
      sourceSolrClient.commit();
    }
    Thread.sleep(2000);

    // verify cdcr has replicated docs
    response = sourceSolrClient.query(new SolrQuery(ALL_Q));
    assertEquals("source docs mismatch", 200, response.getResults().getNumFound());
    assertEquals("target docs mismatch", 200, CdcrTestsUtil.waitForClusterToSync(200, targetSolrClient));

    // restart the other source cluster node
    CdcrTestsUtil.restartClusterNode(source, "cdcr-source", 1);
    sourceSolrClient = source.getSolrClient();
    sourceSolrClient.setDefaultCollection("cdcr-source");

    // add `100 more docs, 300 until now
    for (int i = 200; i < 300; i++) {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("id", "doc_" + i);
      CdcrTestsUtil.index(source, "cdcr-source", doc);
      sourceSolrClient.commit();
    }
    Thread.sleep(2000);

    // verify cdcr has replicated docs
    response = sourceSolrClient.query(new SolrQuery(ALL_Q));
    assertEquals("source docs mismatch", 300, response.getResults().getNumFound());
    assertEquals("target docs mismatch", 300, CdcrTestsUtil.waitForClusterToSync(300, targetSolrClient));

    // add a replica to 'target' collection
    CollectionAdminRequest.addReplicaToShard(TARGET_COLLECTION, "shard1").
        setNode(CdcrTestsUtil.getNonLeaderNode(target, TARGET_COLLECTION)).process(targetSolrClient);
    Thread.sleep(2000);

    // restart one of the target nodes
    CdcrTestsUtil.restartClusterNode(source, "cdcr-target", 0);
    targetSolrClient = target.getSolrClient();
    targetSolrClient.setDefaultCollection("cdcr-target");

    // add `100 more docs, 400 until now
    for (int i = 300; i < 400; i++) {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("id", "doc_" + i);
      CdcrTestsUtil.index(source, "cdcr-source", doc);
      sourceSolrClient.commit();
    }
    Thread.sleep(2000);

    // verify cdcr has replicated docs
    response = sourceSolrClient.query(new SolrQuery(ALL_Q));
    assertEquals("source docs mismatch", 400, response.getResults().getNumFound());
    assertEquals("target docs mismatch", 400, CdcrTestsUtil.waitForClusterToSync(400, targetSolrClient));

    // restart the other target cluster node
    CdcrTestsUtil.restartClusterNode(source, "cdcr-target", 1);
    targetSolrClient = target.getSolrClient();
    targetSolrClient.setDefaultCollection("cdcr-target");

    // add `100 more docs, 500 until now
    for (int i = 400; i < 500; i++) {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("id", "doc_" + i);
      CdcrTestsUtil.index(source, "cdcr-source", doc);
      sourceSolrClient.commit();
    }
    Thread.sleep(2000);

    // verify cdcr has replicated docs
    response = sourceSolrClient.query(new SolrQuery(ALL_Q));
    assertEquals("source docs mismatch", 500, response.getResults().getNumFound());
    assertEquals("target docs mismatch", 500, CdcrTestsUtil.waitForClusterToSync(500, targetSolrClient));

    CdcrTestsUtil.cdcrStop(sourceSolrClient);
    CdcrTestsUtil.cdcrStop(targetSolrClient);

    deleteCollections();
  }

