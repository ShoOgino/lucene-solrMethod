  private void testANewCollectionInOneInstanceWithManualShardAssignement() throws Exception {
    List<SolrServer> collectionClients = new ArrayList<SolrServer>();
    SolrServer client = clients.get(0);
    otherCollectionClients.put(oneInstanceCollection2, collectionClients);
    String baseUrl = ((HttpSolrServer) client).getBaseURL();
    createCollection(oneInstanceCollection2, collectionClients, baseUrl, 1, "slice1");
    createCollection(oneInstanceCollection2, collectionClients, baseUrl, 2, "slice2");
    createCollection(oneInstanceCollection2, collectionClients, baseUrl, 3, "slice2");
    createCollection(oneInstanceCollection2, collectionClients, baseUrl, 4, "slice1");
    
   while (pending != null && pending.size() > 0) {
      
      Future<Request> future = completionService.take();
      pending.remove(future);
    }
    
    SolrServer client1 = createNewSolrServer(oneInstanceCollection2 + "1", baseUrl);
    SolrServer client2 = createNewSolrServer(oneInstanceCollection2 + "2", baseUrl);
    SolrServer client3 = createNewSolrServer(oneInstanceCollection2 + "3", baseUrl);
    SolrServer client4 = createNewSolrServer(oneInstanceCollection2 + "4", baseUrl);
    

    // no one should be recovering
    waitForRecoveriesToFinish(oneInstanceCollection2, solrj.getZkStateReader(), false, true);
    
    assertAllActive(oneInstanceCollection2, solrj.getZkStateReader());
    
   // TODO: enable when we don't falsely get slice1... 
   // solrj.getZkStateReader().getLeaderUrl(oneInstanceCollection2, "slice1", 30000);
   // solrj.getZkStateReader().getLeaderUrl(oneInstanceCollection2, "slice2", 30000);
    client2.add(getDoc(id, "1")); 
    client3.add(getDoc(id, "2")); 
    client4.add(getDoc(id, "3")); 
    
    client1.commit();
    SolrQuery query = new SolrQuery("*:*");
    query.set("distrib", false);
    long oneDocs = client1.query(query).getResults().getNumFound();
    long twoDocs = client2.query(query).getResults().getNumFound();
    long threeDocs = client3.query(query).getResults().getNumFound();
    long fourDocs = client4.query(query).getResults().getNumFound();
    
    query.set("collection", oneInstanceCollection2);
    query.set("distrib", true);
    long allDocs = solrj.query(query).getResults().getNumFound();
    
//    System.out.println("1:" + oneDocs);
//    System.out.println("2:" + twoDocs);
//    System.out.println("3:" + threeDocs);
//    System.out.println("4:" + fourDocs);
//    System.out.println("All Docs:" + allDocs);
    
//    assertEquals(oneDocs, threeDocs);
//    assertEquals(twoDocs, fourDocs);
//    assertNotSame(oneDocs, twoDocs);
    assertEquals(3, allDocs);
    
    // we added a role of none on these creates - check for it
    ZkStateReader zkStateReader = solrj.getZkStateReader();
    zkStateReader.updateCloudState(true);
    Map<String,Slice> slices = zkStateReader.getCloudState().getSlices(oneInstanceCollection2);
    assertNotNull(slices);
    String roles = slices.get("slice1").getShards().values().iterator().next().get(ZkStateReader.ROLES_PROP);
    assertEquals("none", roles);
  }

