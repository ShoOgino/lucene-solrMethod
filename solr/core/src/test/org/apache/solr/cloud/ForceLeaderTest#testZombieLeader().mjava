  /**
   * Tests that FORCELEADER can get an active leader even in the case there are a replica won the election but not present in clusterstate
   */
  @Test
  @Slow
  public void testZombieLeader() throws Exception {
    String testCollectionName = "forceleader_zombie_leader_collection";
    createCollection(testCollectionName, "conf1", 1, 3, 1);
    cloudClient.setDefaultCollection(testCollectionName);
    try {
      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);
      assertEquals("Expected 2 replicas for collection " + testCollectionName
          + " but found " + notLeaders.size() + "; clusterState: "
          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());
      List<JettySolrRunner> notLeaderJetties = notLeaders.stream().map(rep -> getJettyOnPort(getReplicaPort(rep)))
          .collect(Collectors.toList());

      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);
      JettySolrRunner leaderJetty = getJettyOnPort(getReplicaPort(leader));

      // remove leader from clusterstate
      ZkNodeProps m = new ZkNodeProps(
          Overseer.QUEUE_OPERATION, OverseerAction.DELETECORE.toLower(),
          ZkStateReader.CORE_NAME_PROP, leader.getCoreName(),
          ZkStateReader.NODE_NAME_PROP, leader.getNodeName(),
          ZkStateReader.COLLECTION_PROP, testCollectionName,
          ZkStateReader.CORE_NODE_NAME_PROP, leader.getName(),
          ZkStateReader.BASE_URL_PROP, leader.getBaseUrl());
      Overseer.getStateUpdateQueue(cloudClient.getZkStateReader().getZkClient()).offer(Utils.toJSON(m));

      boolean restartOtherReplicas = random().nextBoolean();
      log.info("Starting test with restartOtherReplicas:{}", restartOtherReplicas);
      if (restartOtherReplicas) {
        for (JettySolrRunner notLeaderJetty : notLeaderJetties) {
          notLeaderJetty.stop();
        }
      }
      cloudClient.waitForState(testCollectionName, 30, TimeUnit.SECONDS,
          (liveNodes, collectionState) -> collectionState.getReplicas().size() == 2);

      if (restartOtherReplicas) {
        for (JettySolrRunner notLeaderJetty : notLeaderJetties) {
          notLeaderJetty.start();
        }
      }

      log.info("Before forcing leader: " + cloudClient.getZkStateReader().getClusterState()
          .getCollection(testCollectionName).getSlice(SHARD1));
      doForceLeader(cloudClient, testCollectionName, SHARD1);

      // By now we have an active leader. Wait for recoveries to begin
      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);
      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();
      log.info("After forcing leader: " + clusterState.getCollection(testCollectionName).getSlice(SHARD1));

      assertNull("Expected zombie leader get deleted", leaderJetty.getCoreContainer().getCore(leader.getCoreName()));
      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();
      assertNotNull(newLeader);
      assertEquals(State.ACTIVE, newLeader.getState());

      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);
      assertEquals(2, numActiveReplicas);

      // Assert that indexing works again
      sendDoc(1);
      cloudClient.commit();

      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);
    } finally {
      log.info("Cleaning up after the test.");
      // try to clean up
      attemptCollectionDelete(cloudClient, testCollectionName);
    }
  }

