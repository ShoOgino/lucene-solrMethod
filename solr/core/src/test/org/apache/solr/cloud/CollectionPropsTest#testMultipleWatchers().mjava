  @Test
  public void testMultipleWatchers() throws InterruptedException, IOException {
    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();
    CollectionProperties collectionProps = new CollectionProperties(zkClient());

    // Register the core with ZkStateReader
    zkStateReader.registerCore(collectionName);

    // Subsequent watchers won't be triggered when adding
    final Watcher watcher1 = new Watcher();
    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher1);
    watcher1.waitForTrigger(); // this might still get triggered because of registerCore
    final Watcher watcher2 = new Watcher();
    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher2);
    assertEquals(0, watcher2.waitForTrigger(TEST_NIGHTLY?2000:200));

    // Make sure a value change triggers both watchers
    collectionProps.setCollectionProperty(collectionName, "property", "value1");
    assertEquals(1, watcher1.waitForTrigger());
    assertEquals(1, watcher2.waitForTrigger());

    // The watchers should be triggered when after the core is unregistered
    zkStateReader.unregisterCore(collectionName);
    collectionProps.setCollectionProperty(collectionName, "property", "value2");
    assertEquals(1, watcher1.waitForTrigger());

    // The watcher should be triggered after another watcher is removed
    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher2);
    collectionProps.setCollectionProperty(collectionName, "property", "value3");
    assertEquals(1, watcher1.waitForTrigger());

    // The last watcher shouldn't be triggered after removed, even if the core is registered
    zkStateReader.registerCore(collectionName);
    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher1);
    collectionProps.setCollectionProperty(collectionName, "property", "value4");
    assertEquals(0, watcher1.waitForTrigger(TEST_NIGHTLY?2000:200));
  }

