  @Test
  public void testMultipleWatchers() throws InterruptedException, IOException {
    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();
    CollectionProperties collectionProps = new CollectionProperties(zkClient());

    // Register the core with ZkStateReader
    zkStateReader.registerCore(collectionName);

    // Subsequent watchers won't be triggered when adding
    final Watcher watcher1 = new Watcher("Watcher1", random().nextBoolean());
    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher1);
    watcher1.waitForTrigger(); // this might still get triggered because of registerCore
    final Watcher watcher2 = new Watcher("Watcher2", random().nextBoolean());
    zkStateReader.registerCollectionPropsWatcher(collectionName, watcher2);
    assertEquals(0, watcher2.waitForTrigger(TEST_NIGHTLY?2000:200));

    // Make sure a value change triggers both watchers
    log.info("setting value1");
    collectionProps.setCollectionProperty(collectionName, "property", "value1");
    assertEquals(1, watcher1.waitForTrigger());
    assertEquals(1, watcher2.waitForTrigger());
    assertEquals("value1", watcher1.getProps().get("property"));
    assertEquals("value1", watcher2.getProps().get("property"));

    // The watchers should be triggered when after the core is unregistered
    zkStateReader.unregisterCore(collectionName);
    log.info("setting value2");
    collectionProps.setCollectionProperty(collectionName, "property", "value2");
    assertEquals(1, watcher1.waitForTrigger());
    assertEquals(1, watcher2.waitForTrigger());
    assertEquals("value2", watcher1.getProps().get("property"));
    assertEquals("value2", watcher2.getProps().get("property"));

    // The watcher should be triggered after another watcher is removed
    log.info("removing watcher2");
    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher2);
    log.info("setting value3");
    collectionProps.setCollectionProperty(collectionName, "property", "value3");
    assertEquals(1, watcher1.waitForTrigger());
    assertEquals("value3", watcher1.getProps().get("property"));

    // The last watcher shouldn't be triggered after removed, even if the core is registered
    zkStateReader.registerCore(collectionName);
    log.info("removing watcher1");
    zkStateReader.removeCollectionPropsWatcher(collectionName, watcher1);
    log.info("setting value4");
    collectionProps.setCollectionProperty(collectionName, "property", "value4");
    assertEquals(0, watcher1.waitForTrigger(TEST_NIGHTLY?2000:200));
  }

