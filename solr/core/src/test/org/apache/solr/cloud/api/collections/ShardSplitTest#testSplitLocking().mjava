  @Test
  public void testSplitLocking() throws Exception {
    waitForThingsToLevelOut(15, TimeUnit.SECONDS);
    String collectionName = "testSplitLocking";
    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, "conf1", 1, 2);
    create.process(cloudClient);
    
    cloudClient.waitForState(collectionName, 30, TimeUnit.SECONDS, SolrCloudTestCase.activeClusterShape(1, 2));
    
    waitForRecoveriesToFinish(collectionName, false);

    TestInjection.splitLatch = new CountDownLatch(1); // simulate a long split operation
    String path = ZkStateReader.COLLECTIONS_ZKNODE + "/" + collectionName + "/" + SHARD1 + "-splitting";
    final AtomicReference<Exception> exc = new AtomicReference<>();
    try {
      Runnable r = () -> {
        try {
          trySplit(collectionName, null, SHARD1, 1);
        } catch (Exception e) {
          exc.set(e);
        }
      };
      Thread t = new Thread(r);
      t.start();
      // wait for the split to start executing
      TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      while (!timeOut.hasTimedOut()) {
        timeOut.sleep(500);
        if (cloudClient.getZkStateReader().getZkClient().exists(path, true)) {
          log.info("=== found lock node");
          break;
        }
      }
      assertFalse("timed out waiting for the lock znode to appear", timeOut.hasTimedOut());
      assertNull("unexpected exception: " + exc.get(), exc.get());
      log.info("=== trying second split");
      try {
        trySplit(collectionName, null, SHARD1, 1);
        fail("expected to fail due to locking but succeeded");
      } catch (Exception e) {
        log.info("Expected failure: {}", e);
      }

      // make sure the lock still exists
      assertTrue("lock znode expected but missing", cloudClient.getZkStateReader().getZkClient().exists(path, true));
      // let the first split proceed
      TestInjection.splitLatch.countDown();
      timeOut = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      while (!timeOut.hasTimedOut()) {
        timeOut.sleep(500);
        if (!cloudClient.getZkStateReader().getZkClient().exists(path, true)) {
          break;
        }
      }
      assertFalse("timed out waiting for the lock znode to disappear", timeOut.hasTimedOut());
    } finally {
      TestInjection.reset();
    }
  }

