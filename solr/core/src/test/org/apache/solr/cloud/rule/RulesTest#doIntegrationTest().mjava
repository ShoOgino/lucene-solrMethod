  @Test
  public void doIntegrationTest() throws Exception {
    assertEquals("Sanity Check: someone changed the cluster; " +
                 "test logic requires specific number of jetty nodes",
                 5, cluster.getJettySolrRunners().size());
    
    final long minGB = (random().nextBoolean() ? 1 : 0);
    assumeTrue("doIntegrationTest needs minGB="+minGB+" usable disk space",
        ImplicitSnitch.getUsableSpaceInGB(Paths.get("/")) > minGB);

    String rulesColl = "rulesColl";
    CollectionAdminRequest.createCollectionWithImplicitRouter(rulesColl, "conf", "shard1", 2)
        .setRule("cores:<4", "node:*,replica:<2", "freedisk:>"+minGB)
        .setSnitch("class:ImplicitSnitch")
        .process(cluster.getSolrClient());
    
    cluster.waitForActiveCollection(rulesColl, 1, 2);
    
    DocCollection rulesCollection = getCollectionState(rulesColl);

    List list = (List) rulesCollection.get("rule");
    assertEquals(3, list.size());
    assertEquals ( "<4", ((Map)list.get(0)).get("cores"));
    assertEquals("<2", ((Map) list.get(1)).get("replica"));
    assertEquals(">"+minGB, ((Map) list.get(2)).get("freedisk"));
    list = (List) rulesCollection.get("snitch");
    assertEquals(1, list.size());
    assertEquals ( "ImplicitSnitch", ((Map)list.get(0)).get("class"));

    CollectionAdminRequest.createShard(rulesColl, "shard2").process(cluster.getSolrClient());
    CollectionAdminRequest.addReplicaToShard(rulesColl, "shard2").process(cluster.getSolrClient());

    waitForState("Should have found shard1 w/2active replicas + shard2 w/1active replica",
                 rulesColl, (liveNodes, collection) -> {
                   // short circut if collection is deleted
                   // or we don't yet have the correct number of slices
                   if (null == collection || 2 != collection.getSlices().size()) {
                     return false;
                   }
                   final Set<String> replicaNodes = new HashSet<>();
                   for (Slice slice : collection.getSlices()) {
                     // short circut if our slice isn't active
                     if (Slice.State.ACTIVE != slice.getState()) {
                       return false;
                     }
                     if (slice.getName().equals("shard1")) {
                       // for shard1, we should have 2 fully live replicas
                       final List<Replica> liveReplicas = slice.getReplicas
                         ((r) -> r.isActive(liveNodes));
                       if (2 != liveReplicas.size()) {
                         return false;
                       }
                       replicaNodes.addAll(liveReplicas.stream().map
                                           (Replica::getNodeName).collect(Collectors.toList()));
                     } else if (slice.getName().equals("shard2")) {
                       // for shard2, we should have 3 fully live replicas
                       final List<Replica> liveReplicas = slice.getReplicas
                         ((r) -> r.isActive(liveNodes));
                       if (3 != liveReplicas.size()) {
                         return false;
                       }
                       replicaNodes.addAll(liveReplicas.stream().map
                                           (Replica::getNodeName).collect(Collectors.toList()));
                     } else {
                       // WTF?
                       return false;
                     }
                   }
                   // now sanity check that the rules were *obeyed* and
                   // each replica is on a unique node
                   return 5 == replicaNodes.size();
                 });

    // adding an additional replica should fail since our rule says at most one replica
    // per node, and we know every node already has one replica
    expectedException.expect(HttpSolrClient.RemoteSolrException.class);
    expectedException.expectMessage(containsString("current number of eligible live nodes 0"));
    CollectionAdminRequest.addReplicaToShard(rulesColl, "shard2").process(cluster.getSolrClient());
    
  }

