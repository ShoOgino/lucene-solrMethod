  public void testStress() throws Exception {

    // do many iters, so we have "bursts" of adding nodes that we then check
    final int numIters = atLeast(TEST_NIGHTLY ? 1000 : 100);
    for (int iter = 0; iter < numIters; iter++) {

      // sanity check that ZK says there is in fact 1 live node
      List<String> actualLiveNodes = getTrueLiveNodesFromZk();
      assertEquals("iter"+iter+": " + actualLiveNodes.toString(),
                   1, actualLiveNodes.size());

      // only here do we forcibly update the cached live nodes so we don't have to wait for it to catch up
      // with all the ephemeral nodes that vanished after the last iteration
      CLOUD_CLIENT.getZkStateReader().updateLiveNodes();
      
      // sanity check that our Cloud Client's local state knows about the 1 (real) live node in our cluster
      List<String> cachedLiveNodes = getCachedLiveNodesFromLocalState(actualLiveNodes.size());
      assertEquals("iter"+iter+" " + actualLiveNodes.size() + " != " + cachedLiveNodes.size(),
                   actualLiveNodes, cachedLiveNodes);
      
      
      // start spinning up some threads to add some live_node children in parallel

      // we don't need a lot of threads or nodes (we don't want to swamp the CPUs
      // just bursts of concurrent adds) but we do want to randomize it a bit so we increase the
      // odds of concurrent watchers firing regardless of the num CPUs or load on the machine running
      // the test (but we deliberately don't look at availableProcessors() since we want randomization
      // consistency across all machines for a given seed)
      final int numThreads = TestUtil.nextInt(random(), 2, 5);
      
      // use same num for all thrashers, to increase likely hood of them all competing
      // (diff random number would mean heavy concurrency only for ~ the first N=lowest num requests)
      //
      // this does not need to be a large number -- in fact, the higher it is, the more
      // likely we are to see a mistake in early watcher triggers get "corrected" by a later one
      // and overlook a possible bug
      final int numNodesPerThrasher = TestUtil.nextInt(random(), 1, 5);
      
      log.info("preparing parallel adds to live nodes: iter={}, numThreads={} numNodesPerThread={}",
               iter, numThreads, numNodesPerThrasher);
      
      // NOTE: using ephemeral nodes
      // so we can't close any of these thrashers until we are done with our assertions
      final List<LiveNodeTrasher> thrashers = new ArrayList<>(numThreads);
      for (int i = 0; i < numThreads; i++) {
        thrashers.add(new LiveNodeTrasher("T"+iter+"_"+i, numNodesPerThrasher));
      }
      try {
        final ExecutorService executorService = ExecutorUtil.newMDCAwareFixedThreadPool
          (thrashers.size()+1, new DefaultSolrThreadFactory("test_live_nodes_thrasher_iter"+iter));
        
        executorService.invokeAll(thrashers);
        executorService.shutdown();
        if (! executorService.awaitTermination(WAIT_TIME, TimeUnit.SECONDS)) {
          for (LiveNodeTrasher thrasher : thrashers) {
            thrasher.stop();
          }
        }
        assertTrue("iter"+iter+": thrashers didn't finish even after explicitly stopping",
                   executorService.awaitTermination(WAIT_TIME, TimeUnit.SECONDS));

        // sanity check the *real* live_nodes entries from ZK match what the thrashers added
        int totalAdded = 1; // 1 real live node when we started
        for (LiveNodeTrasher thrasher : thrashers) {
          totalAdded += thrasher.getNumAdded();
        }
        actualLiveNodes = getTrueLiveNodesFromZk();
        assertEquals("iter"+iter, totalAdded, actualLiveNodes.size());
        
        // verify our local client knows the correct set of live nodes
        cachedLiveNodes = getCachedLiveNodesFromLocalState(actualLiveNodes.size());
        assertEquals("iter"+iter+" " + actualLiveNodes.size() + " != " + cachedLiveNodes.size(),
                     actualLiveNodes, cachedLiveNodes);
        
      } finally {
        for (LiveNodeTrasher thrasher : thrashers) {
          // shutdown our zk connection, freeing our ephemeral nodes
          thrasher.close();
        }
      }
    }
  }

