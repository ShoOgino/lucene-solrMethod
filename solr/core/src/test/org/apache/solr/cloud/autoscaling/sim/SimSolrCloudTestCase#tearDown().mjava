  @Override
  public void tearDown() throws Exception {
    super.tearDown();
    if (cluster != null) {
      log.info("\n");
      log.info("#############################################");
      log.info("############ FINAL CLUSTER STATS ############");
      log.info("#############################################\n");
      log.info("## Live nodes:\t\t" + cluster.getLiveNodesSet().size());
      int emptyNodes = 0;
      int maxReplicas = 0;
      int minReplicas = Integer.MAX_VALUE;
      Map<String, Map<Replica.State, AtomicInteger>> replicaStates = new TreeMap<>();
      int numReplicas = 0;
      for (String node : cluster.getLiveNodesSet().get()) {
        List<ReplicaInfo> replicas = cluster.getSimClusterStateProvider().simGetReplicaInfos(node);
        numReplicas += replicas.size();
        if (replicas.size() > maxReplicas) {
          maxReplicas = replicas.size();
        }
        if (minReplicas > replicas.size()) {
          minReplicas = replicas.size();
        }
        for (ReplicaInfo ri : replicas) {
          replicaStates.computeIfAbsent(ri.getCollection(), c -> new TreeMap<>())
              .computeIfAbsent(ri.getState(), s -> new AtomicInteger())
              .incrementAndGet();
        }
        if (replicas.isEmpty()) {
          emptyNodes++;
        }
      }
      if (minReplicas == Integer.MAX_VALUE) {
        minReplicas = 0;
      }
      log.info("## Empty nodes:\t" + emptyNodes);
      Set<String> deadNodes = cluster.getSimNodeStateProvider().simGetDeadNodes();
      log.info("## Dead nodes:\t\t" + deadNodes.size());
      deadNodes.forEach(n -> log.info("##\t\t" + n));
      log.info("## Collections:\t" + cluster.getSimClusterStateProvider().simListCollections());
      log.info("## Max replicas per node:\t" + maxReplicas);
      log.info("## Min replicas per node:\t" + minReplicas);
      log.info("## Total replicas:\t\t" + numReplicas);
      replicaStates.forEach((c, map) -> {
        AtomicInteger repCnt = new AtomicInteger();
        map.forEach((s, cnt) -> repCnt.addAndGet(cnt.get()));
        log.info("## * " + c + "\t\t" + repCnt.get());
        map.forEach((s, cnt) -> log.info("##\t\t- " + String.format(Locale.ROOT, "%-12s  %4d", s, cnt.get())));
      });
      log.info("######### Final Solr op counts ##########");
      cluster.simGetOpCounts().forEach((k, cnt) -> log.info("##\t\t- " + String.format(Locale.ROOT, "%-14s  %4d", k, cnt.get())));
      log.info("######### Autoscaling event counts ###########");
      Map<String, Map<String, AtomicInteger>> counts = cluster.simGetEventCounts();
      counts.forEach((trigger, map) -> {
        log.info("## * Trigger: " + trigger);
        map.forEach((s, cnt) -> log.info("##\t\t- " + String.format(Locale.ROOT, "%-11s  %4d", s, cnt.get())));
      });
    }
  }

