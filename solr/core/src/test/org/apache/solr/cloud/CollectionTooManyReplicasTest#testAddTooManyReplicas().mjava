  @Test
  public void testAddTooManyReplicas() throws Exception {
    final String collectionName = "TooManyReplicasInSeveralFlavors";
    CollectionAdminRequest.createCollection(collectionName, "conf", 2, 1)
        .setMaxShardsPerNode(1)
        .process(cluster.getSolrClient());

    // I have two replicas, one for each shard

    // Curiously, I should be able to add a bunch of replicas if I specify the node, even more than maxShardsPerNode
    // Just get the first node any way we can.
    // Get a node to use for the "node" parameter.
    String nodeName = getAllNodeNames(collectionName).get(0);

    // Add a replica using the "node" parameter (no "too many replicas check")
    // this node should have 2 replicas on it
    CollectionAdminRequest.addReplicaToShard(collectionName, "shard1")
        .setNode(nodeName)
        .process(cluster.getSolrClient());

    // Three replicas so far, should be able to create another one "normally"
    CollectionAdminRequest.addReplicaToShard(collectionName, "shard1")
        .process(cluster.getSolrClient());

    // This one should fail though, no "node" parameter specified
    Exception e = expectThrows(Exception.class, () -> {
      CollectionAdminRequest.addReplicaToShard(collectionName, "shard1")
          .process(cluster.getSolrClient());
    });

    assertTrue("Should have gotten the right error message back",
          e.getMessage().contains("given the current number of live nodes and a maxShardsPerNode of"));


    // Oddly, we should succeed next just because setting property.name will not check for nodes being "full up"
    // TODO: Isn't this a bug?
    CollectionAdminRequest.addReplicaToShard(collectionName, "shard1")
        .withProperty("name", "bogus2")
        .setNode(nodeName)
        .process(cluster.getSolrClient());

    DocCollection collectionState = getCollectionState(collectionName);
    Slice slice = collectionState.getSlice("shard1");
    Replica replica = getRandomReplica(slice, r -> r.getCoreName().equals("bogus2"));
    assertNotNull("Should have found a replica named 'bogus2'", replica);
    assertEquals("Replica should have been put on correct core", nodeName, replica.getNodeName());

    // Shard1 should have 4 replicas
    assertEquals("There should be 4 replicas for shard 1", 4, slice.getReplicas().size());

    // And let's fail one more time because to ensure that the math doesn't do weird stuff it we have more replicas
    // than simple calcs would indicate.
    Exception e2 = expectThrows(Exception.class, () -> {
      CollectionAdminRequest.addReplicaToShard(collectionName, "shard1")
          .process(cluster.getSolrClient());
    });

    assertTrue("Should have gotten the right error message back",
        e2.getMessage().contains("given the current number of live nodes and a maxShardsPerNode of"));

    // wait for recoveries to finish, for a clean shutdown - see SOLR-9645
    waitForState("Expected to see all replicas active", collectionName, (n, c) -> {
      for (Replica r : c.getReplicas()) {
        if (r.getState() != Replica.State.ACTIVE)
          return false;
      }
      return true;
    });
  }

