  public void testConcurrentCreatePlacement() throws Exception {
    final int nThreads = 20;
    final int createsPerThread = 1;
    final int repFactor = 1;
    final boolean useClusterPolicy = true;
    final boolean useCollectionPolicy = false;

    final CloudSolrClient client = cluster.getSolrClient();


    if (useClusterPolicy) {
      String setClusterPolicyCommand = "{" +
          " 'set-cluster-policy': [" +
          // "      {'cores':'<100', 'node':'#ANY'}," +
          "      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}," +
          "    ]" +
          "}";

      SolrRequest req = CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);
      client.request(req);
    }

    if (useCollectionPolicy) {
      // NOTE: the meer act of setting this named policy prevents LegacyAssignStrategy from being used, even if the policy is
      // not used during collection creation.
      String commands =  "{set-policy :{policy1 : [{replica:'<2' , node:'#ANY'}]}}";
      client.request(CloudTestUtils.AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));
    }


    final AtomicInteger collectionNum = new AtomicInteger();
    Thread[] indexThreads = new Thread[nThreads];

    for (int i=0; i<nThreads; i++) {
      indexThreads[i] = new Thread(() -> {
        try {
          for (int j=0; j<createsPerThread; j++) {
            int num = collectionNum.incrementAndGet();
            String collectionName = "collection" + num;
            CollectionAdminRequest.Create createReq = CollectionAdminRequest
                .createCollection(collectionName, "conf", 1, repFactor)
                .setMaxShardsPerNode(1);
            createReq.setWaitForFinalState(false);
            if (useCollectionPolicy) {
              createReq.setPolicy("policy1");
            }

            createReq.process(client);
            // cluster.waitForActiveCollection(collectionName, 1, repFactor);
            // Thread.sleep(10000);
          }
        } catch (Exception e) {
          fail(e.getMessage());
        }
      });
    }

    for (Thread thread : indexThreads) {
      thread.start();
    }

    for (Thread thread : indexThreads) {
      thread.join();
    }

    int expectedTotalReplicas = nThreads * createsPerThread * repFactor;
    int expectedPerNode = expectedTotalReplicas / NODES;

    Map<String,List<Replica>> replicaMap = new HashMap<>();
    ClusterState cstate = client.getZkStateReader().getClusterState();
    for (DocCollection collection : cstate.getCollectionsMap().values()) {
      for (Replica replica : collection.getReplicas()) {
        String url = replica.getBaseUrl();
        List<Replica> replicas = replicaMap.get(url);
        if (replicas == null) {
          replicas = new ArrayList<>();
          replicaMap.put(url, replicas);
        }
        replicas.add(replica);
      }
    }

    // check if nodes are balanced
    boolean failed = false;
    for (List<Replica> replicas : replicaMap.values()) {
      if (replicas.size() != expectedPerNode ) {
        failed = true;
        log.error("UNBALANCED CLUSTER: expected replicas per node " + expectedPerNode +  " but got " + replicas.size());
      }
    }

    if (failed) {
      log.error("Cluster state " + cstate.getCollectionsMap());
    }

    assertEquals(replicaMap.size(),  NODES);  // make sure something was created

    assertTrue(!failed);
  }

