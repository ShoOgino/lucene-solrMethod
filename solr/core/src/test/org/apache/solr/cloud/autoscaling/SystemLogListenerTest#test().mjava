  @Test
  public void test() throws Exception {
    CloudSolrClient solrClient = cluster.getSolrClient();
    String setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : 'node_lost_trigger'," +
        "'event' : 'nodeLost'," +
        "'waitFor' : '1s'," +
        "'enabled' : true," +
        "'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'}," +
        "{'name':'execute_plan','class':'solr.ExecutePlanAction'}," +
        "{'name':'test','class':'" + AssertingTriggerAction.class.getName() + "'}," +
        "{'name':'error','class':'" + ErrorTriggerAction.class.getName() + "'}]" +
        "}}";
    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    // remove default listener
    String removeListenerCommand = "{\n" +
        "\t\"remove-listener\" : {\n" +
        "\t\t\"name\" : \"node_lost_trigger.system\"\n" +
        "\t}\n" +
        "}";
    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, removeListenerCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection("test",
        "conf",3, 2);
    create.setMaxShardsPerNode(3);
    create.process(solrClient);

    waitForState("Timed out waiting for replicas of new collection to be active",
        "test", clusterShape(3, 6));

    String setListenerCommand = "{" +
        "'set-listener' : " +
        "{" +
        "'name' : 'foo'," +
        "'trigger' : 'node_lost_trigger'," +
        "'stage' : ['STARTED','ABORTED','SUCCEEDED', 'FAILED']," +
        "'beforeAction' : ['compute_plan','execute_plan','test','error']," +
        "'afterAction' : ['compute_plan','execute_plan','test','error']," +
        "'class' : '" + SystemLogListener.class.getName() + "'" +
        "}" +
        "}";
    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setListenerCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    // Stop a node (that's safe to stop for the purposes of this test)
    final JettySolrRunner stoppedJetty = pickNodeToStop();
    log.info("Stopping node " + stoppedJetty.getNodeName());
    cluster.stopJettySolrRunner(stoppedJetty);
    cluster.waitForJettyToStop(stoppedJetty);
    
    assertTrue("Trigger was not fired ", triggerFiredLatch.await(60, TimeUnit.SECONDS));
    assertTrue(fired.get());
    Map context = actionContextPropsRef.get();
    assertNotNull(context);
    
    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);
    
    ModifiableSolrParams query = new ModifiableSolrParams();
    query.add(CommonParams.Q, "type:" + SystemLogListener.DOC_TYPE);
    query.add(CommonParams.SORT, "id asc");
    
    try {
      timeout.waitFor("", new Supplier<Boolean>() {

        @Override
        public Boolean get() {
          try {
            cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);

            return cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query).getResults().size() == 9;
          } catch (SolrServerException | IOException e) {
            throw new RuntimeException(e);
          }
        }
      });
    } catch (TimeoutException e) {
      // fine
    }
    // make sure the event docs are replicated and committed
    Thread.sleep(5000);
    cluster.getSolrClient().commit(CollectionAdminParams.SYSTEM_COLL, true, true);


    QueryResponse resp = cluster.getSolrClient().query(CollectionAdminParams.SYSTEM_COLL, query);
    SolrDocumentList docs = resp.getResults();
    assertNotNull(docs);
    assertEquals("wrong number of events added to .system: " + docs.toString(),
                 9, docs.size());
    docs.forEach(doc -> assertCommonFields(doc));

    // STARTED
    SolrDocument doc = docs.get(0);
    assertEquals("STARTED", doc.getFieldValue("stage_s"));

    // BEFORE_ACTION compute_plan
    doc = docs.get(1);
    assertEquals("BEFORE_ACTION", doc.getFieldValue("stage_s"));
    assertEquals("compute_plan", doc.getFieldValue("action_s"));

    // AFTER_ACTION compute_plan
    doc = docs.get(2);
    assertEquals("AFTER_ACTION", doc.getFieldValue("stage_s"));
    assertEquals("compute_plan", doc.getFieldValue("action_s"));
    Collection<Object> vals = doc.getFieldValues("operations.params_ts");
    assertEquals(3, vals.size());
    for (Object val : vals) {
      assertTrue(val.toString(), String.valueOf(val).contains("action=MOVEREPLICA"));
    }

    // BEFORE_ACTION execute_plan
    doc = docs.get(3);
    assertEquals("BEFORE_ACTION", doc.getFieldValue("stage_s"));
    assertEquals("execute_plan", doc.getFieldValue("action_s"));
    vals = doc.getFieldValues("operations.params_ts");
    assertEquals(3, vals.size());

    // AFTER_ACTION execute_plan
    doc = docs.get(4);
    assertEquals("AFTER_ACTION", doc.getFieldValue("stage_s"));
    assertEquals("execute_plan", doc.getFieldValue("action_s"));
    vals = doc.getFieldValues("operations.params_ts");
    assertNotNull(vals);
    assertEquals(3, vals.size());
    vals = doc.getFieldValues("responses_ts");
    assertNotNull(vals);
    assertEquals(3, vals.size());
    vals.forEach(s -> assertTrue(s.toString(), s.toString().startsWith("success MOVEREPLICA action completed successfully")));

    // BEFORE_ACTION test
    doc = docs.get(5);
    assertEquals("BEFORE_ACTION", doc.getFieldValue("stage_s"));
    assertEquals("test", doc.getFieldValue("action_s"));

    // AFTER_ACTION test
    doc = docs.get(6);
    assertEquals("AFTER_ACTION", doc.getFieldValue("stage_s"));
    assertEquals("test", doc.getFieldValue("action_s"));

    // BEFORE_ACTION error
    doc = docs.get(7);
    assertEquals("BEFORE_ACTION", doc.getFieldValue("stage_s"));
    assertEquals("error", doc.getFieldValue("action_s"));

    // FAILED error
    doc = docs.get(8);
    assertEquals("FAILED", doc.getFieldValue("stage_s"));
    assertEquals("error", doc.getFieldValue("action_s"));
    assertEquals("failure from ErrorTriggerAction", doc.getFieldValue("error.message_t"));
    assertTrue(doc.getFieldValue("error.details_t").toString().contains("RuntimeException"));
  }

