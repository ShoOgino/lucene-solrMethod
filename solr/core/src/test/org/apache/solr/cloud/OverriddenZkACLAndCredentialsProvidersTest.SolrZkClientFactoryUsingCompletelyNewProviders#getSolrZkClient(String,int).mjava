    public SolrZkClient getSolrZkClient(String zkServerAddress, int zkClientTimeout) {
      return new SolrZkClient(zkServerAddress, zkClientTimeout) {
        
        @Override
        protected ZkCredentialsProvider createZkCredentialsToAddAutomatically() {
          return new DefaultZkCredentialsProvider() {
            @Override
            protected Collection<ZkCredentials> createCredentials() {
              List<ZkCredentials> result = new ArrayList<>();
              if (!StringUtils.isEmpty(digestUsername) && !StringUtils.isEmpty(digestPassword)) {
                result.add(new ZkCredentials("digest",
                    (digestUsername + ":" + digestPassword).getBytes(StandardCharsets.UTF_8)));
              }
              return result;
            }

          };
        }

        @Override
        public ZkACLProvider createZkACLProvider() {
          return new VMParamsAllAndReadonlyDigestZkACLProvider() {
            @Override
            protected List<ACL> createNonSecurityACLsToAdd() {
              return createACLsToAdd(true, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);
            }

            /**
             * @return Set of ACLs to return security-related znodes
             */
            @Override
            protected List<ACL> createSecurityACLsToAdd() {
              return createACLsToAdd(false, digestUsername, digestPassword, digestReadonlyUsername, digestReadonlyPassword);
            }
          };
        }
        
      };
    }

