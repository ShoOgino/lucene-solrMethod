  @Test
  @SuppressWarnings({"unchecked"})
  public void testGet() throws Exception {
    NamedList<Object> rsp = solrClient.request(createHistoryRequest(params(
        CommonParams.ACTION, "get", CommonParams.NAME, "solr.jvm")));
    assertNotNull(rsp);
    // default format is LIST
    NamedList<Object> data = (NamedList<Object>)rsp.findRecursive("metrics", "solr.jvm", "data");
    assertNotNull(data);
    data.forEach((k, v) -> {
      NamedList<Object> entry = (NamedList<Object>)v;
      List<Object> lst = entry.getAll("timestamps");
      assertNotNull(lst);
      assertTrue("timestamps", lst.size() > 0);
      // 3 metrics, so the total size of values is 3 * the size of timestamps
      entry = (NamedList<Object>)entry.get("values");
      assertNotNull(entry);
      assertEquals(lst.size() * 3, entry.size());
    });

    // get STRING
    rsp = solrClient.request(createHistoryRequest(params(
        CommonParams.ACTION, "get", CommonParams.NAME, "solr.jvm", "format", "string")));
    data = (NamedList<Object>)rsp.findRecursive("metrics", "solr.jvm", "data");
    assertNotNull(data);
    data.forEach((k, v) -> {
      NamedList<Object> entry = (NamedList<Object>)v;
      List<Object> lst = entry.getAll("timestamps");
      assertNotNull(lst);
      assertEquals("timestamps", 1, lst.size());
      String timestampString = (String)lst.get(0);
      String[] timestamps = timestampString.split(("\n"));
      assertTrue(timestampString, timestamps.length > 1);
      entry = (NamedList<Object>)entry.get("values");
      assertNotNull(entry);
      assertEquals(3, entry.size());
      entry.forEach((vk, vv) -> {
        String valString = (String)vv;
        String[] values = valString.split("\n");
        assertEquals(valString, timestamps.length, values.length);
      });
    });

    // get GRAPH
    rsp = solrClient.request(createHistoryRequest(params(
        CommonParams.ACTION, "get", CommonParams.NAME, "solr.jvm", "format", "graph")));
    data = (NamedList<Object>)rsp.findRecursive("metrics", "solr.jvm", "data");
    assertNotNull(data);
    data.forEach((k, v) -> {
      NamedList<Object> entry = (NamedList<Object>) v;
      entry = (NamedList<Object>)entry.get("values");
      assertNotNull(entry);
      assertEquals(3, entry.size());
      entry.forEach((vk, vv) -> {
        String valString = (String)vv;
        byte[] img = Base64.base64ToByteArray(valString);
        try {
          ImageIO.read(new ByteArrayInputStream(img));
        } catch (IOException e) {
          fail("Error reading image data: " + e.toString());
        }
      });
    });
  }

