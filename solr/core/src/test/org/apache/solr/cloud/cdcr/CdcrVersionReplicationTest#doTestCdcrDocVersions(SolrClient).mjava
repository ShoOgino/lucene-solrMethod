  private void doTestCdcrDocVersions(SolrClient solrClient) throws Exception {
    this.solrServer = solrClient;

    log.info("### STARTING doCdcrTestDocVersions - Add commands, client: {}", solrClient);

    vadd("doc1", 10, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "10");
    vadd("doc2", 11, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "11");
    vadd("doc3", 10, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "10");
    vadd("doc4", 11, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "11");
    commit(SOURCE_COLLECTION);

    // versions are preserved and verifiable both by query and by real-time get
    doQuery(solrClient, "doc1,10,doc2,11,doc3,10,doc4,11", "q", "*:*");
    doRealTimeGet("doc1,doc2,doc3,doc4", "10,11,10,11");

    vadd("doc1", 5, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "5");
    vadd("doc2", 10, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "10");
    vadd("doc3", 9, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "9");
    vadd("doc4", 8, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "8");

    // lower versions are ignored
    doRealTimeGet("doc1,doc2,doc3,doc4", "10,11,10,11");

    vadd("doc1", 12, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "12");
    vadd("doc2", 12, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "12");
    vadd("doc3", 12, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "12");
    vadd("doc4", 12, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "12");

    // higher versions are accepted
    doRealTimeGet("doc1,doc2,doc3,doc4", "12,12,12,12");

    // non-cdcr update requests throw a version conflict exception for non-equal versions (optimistic locking feature)
    vaddFail("doc1", 13, 409);
    vaddFail("doc2", 13, 409);
    vaddFail("doc3", 13, 409);

    commit(SOURCE_COLLECTION);

    // versions are still as they were
    doQuery(solrClient, "doc1,12,doc2,12,doc3,12,doc4,12", "q", "*:*");

    // query all shard replicas individually
    doQueryShardReplica(SHARD1, "doc1,12,doc2,12,doc3,12,doc4,12", "q", "*:*");
    doQueryShardReplica(SHARD2, "doc1,12,doc2,12,doc3,12,doc4,12", "q", "*:*");

    // optimistic locking update
    vadd("doc4", 12);
    commit(SOURCE_COLLECTION);

    QueryResponse rsp = solrClient.query(params("qt", "/get", "ids", "doc4"));
    long version = (long) rsp.getResults().get(0).get(vfield);

    // update accepted and a new version number was generated
    assertTrue(version > 1_000_000_000_000l);

    log.info("### STARTING doCdcrTestDocVersions - Delete commands");

    // send a delete update with an older version number
    vdelete("doc1", 5, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "5");
    // must ignore the delete
    doRealTimeGet("doc1", "12");

    // send a delete update with a higher version number
    vdelete("doc1", 13, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "13");
    // must be deleted
    doRealTimeGet("doc1", "");

    // send a delete update with a higher version number
    vdelete("doc4", version + 1, CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, "" + (version + 1));
    // must be deleted
    doRealTimeGet("doc4", "");

    commit(SOURCE_COLLECTION);

    // query each shard replica individually
    doQueryShardReplica(SHARD1, "doc2,12,doc3,12", "q", "*:*");
    doQueryShardReplica(SHARD2, "doc2,12,doc3,12", "q", "*:*");

    // version conflict thanks to optimistic locking
    if (solrClient instanceof CloudSolrClient) // TODO: it seems that optimistic locking doesn't work with forwarding, test with shard2 client
      vdeleteFail("doc2", 50, 409);

    // cleanup after ourselves for the next run
    // deleteByQuery should work as usual with the CDCR_UPDATE param
    doDeleteByQuery("id:doc*", CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, Long.toString(1));
    commit(SOURCE_COLLECTION);

    // deleteByQuery with a version lower than anything else should have no effect
    doQuery(solrClient, "doc2,12,doc3,12", "q", "*:*");

    doDeleteByQuery("id:doc*", CdcrUpdateProcessor.CDCR_UPDATE, "", vfield, Long.toString(51));
    commit(SOURCE_COLLECTION);

    // deleteByQuery with a version higher than everything else should delete all remaining docs
    doQuery(solrClient, "", "q", "*:*");

    // check that replicas are as expected too
    doQueryShardReplica(SHARD1, "", "q", "*:*");
    doQueryShardReplica(SHARD2, "", "q", "*:*");
  }

