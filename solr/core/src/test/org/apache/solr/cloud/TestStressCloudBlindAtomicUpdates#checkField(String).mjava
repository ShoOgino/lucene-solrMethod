  public void checkField(final String numericFieldName) throws Exception {

    final CountDownLatch abortLatch = new CountDownLatch(1);

    final int numDocsToCheck = atLeast(37);
    final int numDocsInIndex = (numDocsToCheck * DOC_ID_INCR);
    final AtomicLong[] expected = new AtomicLong[numDocsToCheck];

    log.info("Testing " + numericFieldName + ": numDocsToCheck=" + numDocsToCheck + ", numDocsInIndex=" + numDocsInIndex + ", incr=" + DOC_ID_INCR);
    
    // seed the index & keep track of what docs exist and with what values
    for (int id = 0; id < numDocsInIndex; id++) {
      // NOTE: the field we're mutating is a long, but we seed with a random int,
      // and we will inc/dec by random smaller ints, to ensure we never over/under flow
      final int initValue = random().nextInt();
      SolrInputDocument doc = doc(f("id",""+id), f(numericFieldName, initValue));
      UpdateResponse rsp = update(doc).process(CLOUD_CLIENT);
      assertEquals(doc.toString() + " => " + rsp.toString(), 0, rsp.getStatus());
      if (0 == id % DOC_ID_INCR) {
        expected[(int)(id / DOC_ID_INCR)] = new AtomicLong(initValue);
      }
    }
    assertNotNull("Sanity Check no off-by-one in expected init: ", expected[expected.length-1]);
    
    
    // sanity check index contents
    assertEquals(0, CLOUD_CLIENT.commit().getStatus());
    assertEquals(numDocsInIndex,
                 CLOUD_CLIENT.query(params("q", "*:*")).getResults().getNumFound());

    // spin up parallel workers to hammer updates
    List<Future<Worker>> results = new ArrayList<Future<Worker>>(NUM_THREADS);
    for (int workerId = 0; workerId < NUM_THREADS; workerId++) {
      Worker worker = new Worker(workerId, expected, abortLatch, new Random(random().nextLong()),
                                 numericFieldName);
      // ask for the Worker to be returned in the Future so we can inspect it
      results.add(EXEC_SERVICE.submit(worker, worker));
    }
    // check the results of all our workers
    for (Future<Worker> r : results) {
      try {
        Worker w = r.get();
        if (! w.getFinishedOk() ) {
          // quick and dirty sanity check if any workers didn't succeed, but didn't throw an exception either
          abortLatch.countDown();
          log.error("worker={} didn't finish ok, but didn't throw exception?", w.workerId);
        }
      } catch (ExecutionException ee) {
        Throwable rootCause = ee.getCause();
        if (rootCause instanceof Error) {
          // low level error, or test assertion failure - either way don't leave it wrapped
          log.error("Worker exec Error, throwing root cause", ee);
          throw (Error) rootCause;
        } else { 
          log.error("Worker ExecutionException, re-throwing", ee);
          throw ee;
        }
      }
    }

    assertEquals("Abort latch has changed, why didn't we get an exception from a worker?",
                 1L, abortLatch.getCount());
    
    TestInjection.reset();
    waitForRecoveriesToFinish(CLOUD_CLIENT);

    // check all the final index contents match our expectations
    int incorrectDocs = 0;
    for (int id = 0; id < numDocsInIndex; id += DOC_ID_INCR) {
      assert 0 == id % DOC_ID_INCR : "WTF? " + id;
      
      final long expect = expected[(int)(id / DOC_ID_INCR)].longValue();
      
      final String docId = "" + id;
      
      // sometimes include an fq on the expected value to ensure the updated values
      // are "visible" for searching
      final SolrParams p = (0 != TestUtil.nextInt(random(), 0,15))
        ? params() : params("fq",numericFieldName + ":" + expect);
      SolrDocument doc = getRandClient(random()).getById(docId, p);
      
      final boolean foundWithFilter = (null != doc);
      if (! foundWithFilter) {
        // try again w/o fq to see what it does have
        doc = getRandClient(random()).getById(docId);
      }
      
      Long actual = (null == doc) ? null : (Long) doc.getFirstValue(numericFieldName);
      if (actual == null || expect != actual.longValue() || ! foundWithFilter) {
        log.error("docId={}, foundWithFilter={}, expected={}, actual={}",
                  docId, foundWithFilter, expect, actual);
        incorrectDocs++;
      }
      
    }
    assertEquals("Some docs had errors -- check logs", 0, incorrectDocs);
  }

