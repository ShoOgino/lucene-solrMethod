  private void testCollectionsPredicate(String collectionsFilter, Map<String, String> createCollectionParameters) throws Exception {
    if (log.isInfoEnabled()) {
      log.info("Found number of jetties: {}", cluster.getJettySolrRunners().size());
    }
    // start 3 more nodes
    cluster.startJettySolrRunner();
    cluster.startJettySolrRunner();
    cluster.startJettySolrRunner();

    cluster.waitForAllNodes(30);

    CloudSolrClient solrClient = cluster.getSolrClient();
    String setTriggerCommand = "{" +
            "'set-trigger' : {" +
            "'name' : 'node_lost_trigger'," +
            "'event' : 'nodeLost'," +
            "'waitFor' : '1s'," +
            "'enabled' : true," +
            "'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction', 'collections' : " + collectionsFilter + "}," +
            "{'name':'test','class':'" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + "'}]" +
            "}}";
    @SuppressWarnings({"rawtypes"})
    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection("testSelected1",
        "conf", 2, 2);
    if (createCollectionParameters.get("testSelected1") != null)  {
      create.setPolicy(createCollectionParameters.get("testSelected1"));
    }
    create.process(solrClient);

    create = CollectionAdminRequest.createCollection("testSelected2",
        "conf", 2, 2);
    if (createCollectionParameters.get("testSelected2") != null)  {
      create.setPolicy(createCollectionParameters.get("testSelected2"));
    }
    create.process(solrClient);

    create = CollectionAdminRequest.createCollection("testSelected3",
        "conf", 2, 2);
    if (createCollectionParameters.get("testSelected3") != null)  {
      create.setPolicy(createCollectionParameters.get("testSelected3"));
    }
    create.process(solrClient);
    
    cluster.waitForActiveCollection("testSelected1", 2, 4);
    cluster.waitForActiveCollection("testSelected2", 2, 4);
    cluster.waitForActiveCollection("testSelected3", 2, 4);
    
    waitForState("Timed out waiting for replicas of new collection to be active",
        "testSelected1", clusterShape(2, 4));

    waitForState("Timed out waiting for replicas of new collection to be active",
        "testSelected2", clusterShape(2, 4));

    waitForState("Timed out waiting for replicas of new collection to be active",
        "testSelected3", clusterShape(2, 4));

    // find a node that has replicas from all collections
    SolrCloudManager cloudManager = cluster.getJettySolrRunner(0).getCoreContainer().getZkController().getSolrCloudManager();
    NodeStateProvider stateProvider = cloudManager.getNodeStateProvider();
    List<String> nodes = new ArrayList<>();
    cloudManager.getClusterStateProvider().getLiveNodes().forEach(n -> {
      Map<String, Map<String, List<Replica>>> map = stateProvider.getReplicaInfo(n, ImplicitSnitch.tags);
      if (map.containsKey("testSelected3") && map.containsKey("testSelected2") && map.containsKey("testSelected1")) {
        nodes.add(n);
      }
    });
    assertTrue(nodes.size() > 0);
    // kill first such node
    String node = nodes.get(0);
    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {
      if (cluster.getJettySolrRunner(i).getNodeName().equals(node)) {
        JettySolrRunner j = cluster.stopJettySolrRunner(i);
        cluster.waitForJettyToStop(j);
        break;
      }
    }
    assertTrue("Trigger was not fired even after 5 seconds", triggerFiredLatch.await(5, TimeUnit.SECONDS));
    assertTrue(fired.get());
    @SuppressWarnings({"rawtypes"})
    Map context = actionContextPropsRef.get();
    assertNotNull(context);
    @SuppressWarnings({"unchecked", "rawtypes"})
    List<SolrRequest> operations = (List<SolrRequest>) context.get("operations");
    assertNotNull("The operations computed by ComputePlanAction should not be null. " + getNodeStateProviderState() + context, operations);
    assertEquals("ComputePlanAction should have computed exactly 2 operations", 2, operations.size());
    @SuppressWarnings({"rawtypes"})
    SolrRequest request = operations.get(0);
    SolrParams params = request.getParams();
    assertEquals("Expected MOVEREPLICA action after adding node", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get("action")));
    assertFalse("not expected testSelected3", "testSelected3".equals(params.get("collection")));
    request = operations.get(1);
    params = request.getParams();
    assertEquals("Expected MOVEREPLICA action after adding node", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get("action")));
    assertFalse("not expected testSelected3", "testSelected3".equals(params.get("collection")));
  }

