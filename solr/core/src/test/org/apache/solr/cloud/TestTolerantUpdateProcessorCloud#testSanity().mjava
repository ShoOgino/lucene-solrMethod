  public void testSanity() throws Exception {
    
    // verify some basic sanity checking of indexing & querying across the collection
    // w/o using our custom update processor chain
    
    assertEquals(0, CLOUD_CLIENT.add(doc(f("id", S_ONE_PRE + "1"),
                                         f("foo_i", 42))).getStatus());
    assertEquals(0, CLOUD_CLIENT.add(doc(f("id", S_TWO_PRE + "2"),
                                         f("foo_i", 66))).getStatus());
    assertEquals(0, CLOUD_CLIENT.commit().getStatus());

    for (SolrClient c : Arrays.asList(S_ONE_LEADER_CLIENT, S_TWO_LEADER_CLIENT,
                                      S_ONE_NON_LEADER_CLIENT, S_TWO_NON_LEADER_CLIENT,
                                      NO_COLLECTION_CLIENT, CLOUD_CLIENT)) {
      assertQueryDocIds(c, true, S_ONE_PRE + "1",  S_TWO_PRE + "2");
      assertQueryDocIds(c, false, "id_not_exists");

      // verify adding 2 broken docs causes a clint exception
      SolrException e = expectThrows(SolrException.class,
          "did not get a top level exception when more then 10 docs failed", () ->
              update(params(),
                  doc(f("id", S_ONE_PRE + "X"), f("foo_i", "bogus_val_X")),
                  doc(f("id", S_TWO_PRE + "Y"), f("foo_i", "bogus_val_Y"))
              ).process(c)
      );
      assertEquals("not the type of error we were expecting ("+e.code()+"): " + e.toString(),
          400, e.code());
        
      // verify malformed deleteByQuerys fail
      e = expectThrows(SolrException.class,
          "sanity check for malformed DBQ didn't fail",
          () -> update(params()).deleteByQuery("foo_i:not_a_num").process(c));
      assertEquals("not the expected DBQ failure: " + e.getMessage(), 400, e.code());
      
      // verify opportunistic concurrency deletions fail as we expect when docs are / aren't present
      for (UpdateRequest r : new UpdateRequest[] {
          update(params("commit", "true")).deleteById(S_ONE_PRE + "1", -1L),
          update(params("commit", "true")).deleteById(S_TWO_PRE + "2", -1L),
          update(params("commit", "true")).deleteById("id_not_exists",  1L)    }) {
        e = expectThrows(SolrException.class, "sanity check for opportunistic concurrency delete didn't fail",
            () -> r.process(c)
        );
        assertEquals("not the expected opportunistic concurrency failure code: "
            + r.toString() + " => " + e.getMessage(), 409, e.code());
      }
    }
  }

