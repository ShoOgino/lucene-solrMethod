  /**
   * Adding doc when replicas (not leader) are network partitioned with leader,
   * These replicas are out-of-sync hence they should not become leader even when current leader is DOWN.
   * Leader should be on node - 0
   */
  private void addDocWhenOtherReplicasAreNetworkPartitioned(String collection, Replica leader, int docId) throws Exception {
    for (int i = 0; i < 3; i++) {
      proxies.get(cluster.getJettySolrRunner(i)).close();
    }
    addDoc(collection, docId, cluster.getJettySolrRunner(0));
    JettySolrRunner j1 = cluster.getJettySolrRunner(0);
    j1.stop();
    cluster.waitForJettyToStop(j1);
    for (int i = 1; i < 3; i++) {
      proxies.get(cluster.getJettySolrRunner(i)).reopen();
    }
    waitForState("Timeout waiting for leader goes DOWN", collection, (liveNodes, collectionState)
        -> collectionState.getReplica(leader.getName()).getState() == Replica.State.DOWN);

    TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.CURRENT_TIME);
    while (!timeOut.hasTimedOut()) {
      Replica newLeader = getCollectionState(collection).getLeader("shard1");
      if (newLeader != null && !newLeader.getName().equals(leader.getName()) && newLeader.getState() == Replica.State.ACTIVE) {
        fail("Out of sync replica became leader " + newLeader);
      }
    }

    proxies.get(cluster.getJettySolrRunner(0)).reopen();
    cluster.getJettySolrRunner(0).start();
    cluster.waitForAllNodes(30);;
    waitForState("Timeout waiting for leader", collection, (liveNodes, collectionState) -> {
      Replica newLeader = collectionState.getLeader("shard1");
      return newLeader != null && newLeader.getName().equals(leader.getName());
    });
    waitForState("Timeout waiting for active collection", collection, clusterShape(1, 3));
    
    cluster.waitForActiveCollection(collection, 1, 3);
  }

