  @Test
  public void test() throws Exception {
    boolean testFinished = false;
    try {
      handle.clear();
      handle.put("timestamp", SKIPVAL);

      // todo: do I have to do this here?
      waitForRecoveriesToFinish(true);

      // NOTE: we might randomly generate the same uniqueKey value multiple times,
      // (which is a valid test case, they should route to the same shard both times)
      // so we track each expectedId in a set for later sanity checking
      final Set<String> expectedUniqueKeys = new HashSet<>();
      for (int i = 0; i < NUM_ADDS; i++) {
        final int appId = r.nextInt(MAX_APP_ID) + 1;
        final int userId = r.nextInt(MAX_USER_ID) + 1;
        // skew the odds so half the time we have no mask, and half the time we
        // have an even distribution of 1-16 bits
        final int bitMask = Math.max(0, r.nextInt(32)-15);
        
        String id = "app" + appId + (bitMask <= 0 ? "" : ("/" + bitMask))
          + "!" + "user" + userId
          + "!" + "doc" + r.nextInt(MAX_DOC_ID);
        
        doAddDoc(id);
        expectedUniqueKeys.add(id);
      }
      
      commit();
      
      final Map<String, String> routePrefixMap = new HashMap<>();
      final Set<String> actualUniqueKeys = new HashSet<>();
      for (int i = 1; i <= sliceCount; i++) {
        final String shardId = "shard" + i;
        final Set<String> uniqueKeysInShard = fetchUniqueKeysFromShard(shardId);
        
        { // sanity check our uniqueKey values aren't duplicated across shards
          final Set<String> uniqueKeysOnDuplicateShards = new HashSet<>(uniqueKeysInShard);
          uniqueKeysOnDuplicateShards.retainAll(actualUniqueKeys);
          assertEquals(shardId + " contains some uniqueKeys that were already found on a previous shard",
                       Collections.emptySet(),  uniqueKeysOnDuplicateShards);
          actualUniqueKeys.addAll(uniqueKeysInShard);
        }
        
        // foreach uniqueKey, extract it's route prefix and confirm those aren't spread across multiple shards
        for (String uniqueKey : uniqueKeysInShard) {
          final String routePrefix = uniqueKey.substring(0, uniqueKey.lastIndexOf('!'));
          log.debug("shard( {} ) : uniqueKey( {} ) -> routePrefix( {} )", shardId, uniqueKey, routePrefix);
          assertNotNull("null prefix WTF? " + uniqueKey, routePrefix);
          
          final String otherShard = routePrefixMap.put(routePrefix, shardId);
          if (null != otherShard)
            // if we already had a mapping, make sure it's an earlier doc from our current shard...
            assertEquals("routePrefix " + routePrefix + " found in multiple shards",
                         shardId, otherShard);
        }
      }

      assertEquals("Docs missing?", expectedUniqueKeys.size(), actualUniqueKeys.size());
      
      testFinished = true;
    } finally {
      if (!testFinished) {
        printLayoutOnTearDown = true;
      }
    }
  }

