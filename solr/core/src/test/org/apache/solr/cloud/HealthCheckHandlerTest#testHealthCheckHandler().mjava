  @Test
  public void testHealthCheckHandler() throws Exception {
    SolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, HEALTH_CHECK_HANDLER_PATH, new ModifiableSolrParams());

    // positive check that our only existing "healthy" node works with cloud client
    // NOTE: this is using GenericSolrRequest, not HealthCheckRequest which is why it passes
    // as compared with testHealthCheckHandlerWithCloudClient
    // (Not sure if that's actaully a good thing -- but it's how the existing test worked)
    assertEquals(CommonParams.OK,
                 req.process(cluster.getSolrClient()).getResponse().get(CommonParams.STATUS));
    
    // positive check that our exiting "healthy" node works with direct http client
    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {
      SolrResponse response = req.process(httpSolrClient);
      assertEquals(CommonParams.OK, response.getResponse().get(CommonParams.STATUS));
    }

    // add a new node for the purpose of negative testing
    JettySolrRunner newJetty = cluster.startJettySolrRunner();
    try (HttpSolrClient httpSolrClient = getHttpSolrClient(newJetty.getBaseUrl().toString())) {
    
      // postive check that our (new) "healthy" node works with direct http client
      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));
                  
      // now "break" our (new) node
      newJetty.getCoreContainer().getZkController().getZkClient().close();
      
      // negative check of our (new) "broken" node that we deliberately put into an unhealth state
      HttpSolrClient.RemoteSolrException e = expectThrows(HttpSolrClient.RemoteSolrException.class, () ->
                                                          {
                                                            req.process(httpSolrClient);
                                                          });
      assertTrue(e.getMessage(), e.getMessage().contains("Host Unavailable"));
      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code, e.code());
    } finally {
      newJetty.stop();
    }

    // (redundent) positive check that our (previously) exiting "healthy" node (still) works
    // after getting negative results from our broken node
    try (HttpSolrClient httpSolrClient = getHttpSolrClient(cluster.getJettySolrRunner(0).getBaseUrl().toString())) {

      assertEquals(CommonParams.OK, req.process(httpSolrClient).getResponse().get(CommonParams.STATUS));
    }
    
  }

