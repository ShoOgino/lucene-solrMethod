  /**
   * Simulate getting replica metrics values. This uses per-replica properties set in
   * {@link SimClusterStateProvider#simSetCollectionValue(String, String, Object, boolean, boolean)} and
   * similar methods.
   * @param node node id
   * @param tags metrics names
   * @return map of metrics names / values
   */
  public Map<String, Object> getReplicaMetricsValues(String node, Collection<String> tags) {
    if (!liveNodesSet.contains(node)) {
      throw new RuntimeException("non-live node " + node);
    }
    List<ReplicaInfo> replicas = clusterStateProvider.simGetReplicaInfos(node);
    if (replicas == null || replicas.isEmpty()) {
      return Collections.emptyMap();
    }
    Map<String, Object> values = new HashMap<>();
    for (String tag : tags) {
      String[] parts = tag.split(":");
      if (parts.length < 3 || !parts[0].equals("metrics")) {
        LOG.warn("Invalid metrics: tag: " + tag);
        continue;
      }
      if (!parts[1].startsWith("solr.core.")) {
        // skip - this is probably solr.node or solr.jvm metric
        continue;
      }
      String[] collParts = parts[1].substring(10).split("\\.");
      if (collParts.length != 3) {
        LOG.warn("Invalid registry name: " + parts[1]);
        continue;
      }
      String collection = collParts[0];
      String shard = collParts[1];
      String replica = collParts[2];
      String key = parts.length > 3 ? parts[2] + ":" + parts[3] : parts[2];
      replicas.forEach(r -> {
        if (r.getCollection().equals(collection) && r.getShard().equals(shard) && r.getCore().endsWith(replica)) {
          Object value = r.getVariables().get(key);
          if (value != null) {
            values.put(tag, value);
          } else {
            value = r.getVariables().get(tag);
            if (value != null) {
              values.put(tag, value);
            }
          }
        }
      });
    }
    return values;
  }

