  @BeforeClass
  private static void createMiniSolrCloudCluster() throws Exception {

    // Due to known bugs with some transformers in either multi vs single node, we want
    // to test both possible cases explicitly and modify the List of FL_VALIDATORS we use accordingly:
    //  - 50% runs use single node/shard a FL_VALIDATORS with all validators known to work on single node
    //  - 50% runs use multi node/shard with FL_VALIDATORS only containing stuff that works in cloud
    final boolean singleCoreMode = random().nextBoolean();
    if (singleCoreMode) {
      // these don't work in distrib cloud mode due to SOLR-9286
      FL_VALIDATORS.addAll(Arrays.asList
                           (new FunctionValidator("aaa_i"), // fq field
                            new FunctionValidator("aaa_i", "func_aaa_alias"),
                            new RenameFieldValueValidator("id", "my_id_alias"),
                            new RenameFieldValueValidator("bbb_i", "my_int_field_alias"),
                            new RenameFieldValueValidator("ddd_s", "my_str_field_alias")));
      // SOLR-9289...
      FL_VALIDATORS.add(new DocIdValidator());
      FL_VALIDATORS.add(new DocIdValidator("my_docid_alias"));
    } else {
      // No-Op
      // No known transformers that only work in distrib cloud but fail in singleCoreMode

    }
    // TODO: SOLR-9314: programatically compare FL_VALIDATORS with all known transformers.
    // (ala QueryEqualityTest) can't be done until we eliminate the need for "singleCodeMode"
    // conditional logic (might still want 'singleCoreMode' on the MiniSolrCloudCluster side,
    // but shouldn't have conditional FlValidators

    // (asuming multi core multi replicas shouldn't matter (assuming multi node) ...
    final int repFactor = singleCoreMode ? 1 : (usually() ? 1 : 2);
    // ... but we definitely want to ensure forwarded requests to other shards work ...
    final int numShards = singleCoreMode ? 1 : 2;
    // ... including some forwarded requests from nodes not hosting a shard
    final int numNodes = 1 + (singleCoreMode ? 0 : (numShards * repFactor));
    
    final String configName = DEBUG_LABEL + "_config-set";
    final Path configDir = Paths.get(TEST_HOME(), "collection1", "conf");
    
    configureCluster(numNodes).addConfig(configName, configDir).configure();
    
    Map<String, String> collectionProperties = new HashMap<>();
    collectionProperties.put("config", "solrconfig-tlog.xml");
    collectionProperties.put("schema", "schema-psuedo-fields.xml");

    assertNotNull(cluster.createCollection(COLLECTION_NAME, numShards, repFactor,
                                           configName, null, null, collectionProperties));
    
    CLOUD_CLIENT = cluster.getSolrClient();
    CLOUD_CLIENT.setDefaultCollection(COLLECTION_NAME);

    waitForRecoveriesToFinish(CLOUD_CLIENT);

    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {
      CLIENTS.add(getHttpSolrClient(jetty.getBaseUrl() + "/" + COLLECTION_NAME + "/"));
    }
  }

