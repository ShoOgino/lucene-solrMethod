  @Test
  @SuppressForbidden(reason = "Need to turn off logging, and SLF4J doesn't seem to provide for a way.")
  @Ignore
  public void testPackageManager() throws Exception {
    PackageTool tool = new PackageTool();
    
    // Enable the logger for this test. Need to do this since the tool disables logger.
    Configurator.setRootLevel(Level.INFO);

    String solrUrl = cluster.getJettySolrRunner(0).getBaseUrl().toString();

    run(tool, new String[] {"-solrUrl", solrUrl, "list-installed"});

    run(tool, new String[] {"-solrUrl", solrUrl, "add-repo", "fullstory",  "http://localhost:" + repositoryServer.getPort()});

    run(tool, new String[] {"-solrUrl", solrUrl, "list-available"});

    run(tool, new String[] {"-solrUrl", solrUrl, "install", "question-answer:1.0.0"});

    run(tool, new String[] {"-solrUrl", solrUrl, "list-installed"});

    CollectionAdminRequest.createCollection("abc", "conf1", 1, 1).process(cluster.getSolrClient());
    CollectionAdminRequest.createCollection("def", "conf2", 1, 1).process(cluster.getSolrClient());

    String rhPath = "/mypath2";

    run(tool, new String[] {"-solrUrl", solrUrl, "list-deployed", "question-answer"});

    run(tool, new String[] {"-solrUrl", solrUrl, "deploy", "question-answer", "-y", "-collections", "abc", "-p", "RH-HANDLER-PATH=" + rhPath});
    assertPackageVersion("abc", "question-answer", "1.0.0", rhPath, "1.0.0");

    run(tool, new String[] {"-solrUrl", solrUrl, "list-deployed", "question-answer"});

    run(tool, new String[] {"-solrUrl", solrUrl, "list-deployed", "-c", "abc"});

    // Should we test the "auto-update to latest" functionality or the default explicit deploy functionality
    boolean autoUpdateToLatest = random().nextBoolean();

    if (autoUpdateToLatest) {
      log.info("Testing auto-update to latest installed");

      // This command pegs the version to the latest available
      run(tool, new String[] {"-solrUrl", solrUrl, "deploy", "question-answer:latest", "-y", "-collections", "abc"});
      assertPackageVersion("abc", "question-answer", "$LATEST", rhPath, "1.0.0");

      run(tool, new String[] {"-solrUrl", solrUrl, "install", "question-answer"});
      assertPackageVersion("abc", "question-answer", "$LATEST", rhPath, "1.1.0");
    } else {
      log.info("Testing explicit deployment to a different/newer version");

      run(tool, new String[] {"-solrUrl", solrUrl, "install", "question-answer"});
      assertPackageVersion("abc", "question-answer", "1.0.0", rhPath, "1.0.0");

      if (random().nextBoolean()) { // even if parameters are not passed in, they should be picked up from previous deployment
        run(tool, new String[] {"-solrUrl", solrUrl, "deploy", "--update", "-y", "question-answer", "-collections", "abc", "-p", "RH-HANDLER-PATH=" + rhPath});
      } else {
        run(tool, new String[] {"-solrUrl", solrUrl, "deploy", "--update", "-y", "question-answer", "-collections", "abc"});
      }
      assertPackageVersion("abc", "question-answer", "1.1.0", rhPath, "1.1.0");
    }
    
    log.info("Running undeploy...");
    run(tool, new String[] {"-solrUrl", solrUrl, "undeploy", "question-answer", "-collections", "abc"});
    
    run(tool, new String[] {"-solrUrl", solrUrl, "list-deployed", "question-answer"});

  }

