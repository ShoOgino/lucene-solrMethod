  @Test
  public void testMostInSyncReplicasCanWinElection() throws Exception {
    final String collectionName = "collection1";
    CollectionAdminRequest.createCollection(collectionName, 1, 3)
        .setCreateNodeSet("")
        .process(cluster.getSolrClient());
    CollectionAdminRequest.addReplicaToShard(collectionName, "shard1")
        .setNode(cluster.getJettySolrRunner(0).getNodeName())
        .process(cluster.getSolrClient());
    waitForState("Timeout waiting for shard leader", collectionName, clusterShape(1, 1));
    Replica leader = getCollectionState(collectionName).getSlice("shard1").getLeader();

    // this replica will ahead of election queue
    CollectionAdminRequest.addReplicaToShard(collectionName, "shard1")
        .setNode(cluster.getJettySolrRunner(1).getNodeName())
        .process(cluster.getSolrClient());
    waitForState("Timeout waiting for 1x2 collection", collectionName, clusterShape(1, 2));
    Replica replica1 = getCollectionState(collectionName).getSlice("shard1")
        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(1).getNodeName())).get(0);

    CollectionAdminRequest.addReplicaToShard(collectionName, "shard1")
        .setNode(cluster.getJettySolrRunner(2).getNodeName())
        .process(cluster.getSolrClient());
    waitForState("Timeout waiting for 1x3 collection", collectionName, clusterShape(1, 3));
    Replica replica2 = getCollectionState(collectionName).getSlice("shard1")
        .getReplicas(replica -> replica.getNodeName().equals(cluster.getJettySolrRunner(2).getNodeName())).get(0);

    cluster.getSolrClient().add(collectionName, new SolrInputDocument("id", "1"));
    cluster.getSolrClient().add(collectionName, new SolrInputDocument("id", "2"));
    cluster.getSolrClient().commit(collectionName);

    // replica in node1 won't be able to do recovery
    proxies.get(cluster.getJettySolrRunner(0)).close();
    // leader won't be able to send request to replica in node1
    proxies.get(cluster.getJettySolrRunner(1)).close();

    addDoc(collectionName, 3, cluster.getJettySolrRunner(0));

    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, "shard1", cluster.getZkClient())) {
      assertEquals(3, zkShardTerms.getTerms().size());
      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));
      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(replica2.getName()));
      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));
    }

    proxies.get(cluster.getJettySolrRunner(2)).close();
    addDoc(collectionName, 4, cluster.getJettySolrRunner(0));

    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collectionName, "shard1", cluster.getZkClient())) {
      assertEquals(3, zkShardTerms.getTerms().size());
      assertEquals(zkShardTerms.getHighestTerm(), zkShardTerms.getTerm(leader.getName()));
      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica2.getName()));
      assertTrue(zkShardTerms.getHighestTerm() > zkShardTerms.getTerm(replica1.getName()));
      assertTrue(zkShardTerms.getTerm(replica2.getName()) > zkShardTerms.getTerm(replica1.getName()));
    }

    proxies.get(cluster.getJettySolrRunner(1)).reopen();
    proxies.get(cluster.getJettySolrRunner(2)).reopen();
    cluster.getJettySolrRunner(0).stop();

    // even replica2 joined election at the end of the queue, but it is the one with highest term
    waitForState("Timeout waiting for new leader", collectionName, new CollectionStatePredicate() {
      @Override
      public boolean matches(Set<String> liveNodes, DocCollection collectionState) {
        Replica newLeader = collectionState.getSlice("shard1").getLeader();
        return newLeader.getName().equals(replica2.getName());
      }
    });

    cluster.getJettySolrRunner(0).start();
    proxies.get(cluster.getJettySolrRunner(0)).reopen();

    waitForState("Timeout waiting for 1x3 collection", collectionName, clusterShape(1, 3));
    assertDocsExistInAllReplicas(Arrays.asList(leader, replica1), collectionName, 1, 3);
    CollectionAdminRequest.deleteCollection(collectionName).process(cluster.getSolrClient());
  }

