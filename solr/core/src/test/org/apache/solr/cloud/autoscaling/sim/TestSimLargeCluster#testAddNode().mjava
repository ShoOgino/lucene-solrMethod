  @Test
  // impossible to complete due to the slowness of policy calculations
  @AwaitsFix( bugUrl = "https://issues.apache.org/jira/browse/SOLR-14275")
  public void testAddNode() throws Exception {
    SolrClient solrClient = cluster.simGetSolrClient();
    assertAutoScalingRequest
      ( "{" +
        "'set-trigger' : {" +
        "'name' : 'node_added_trigger2'," +
        "'event' : 'nodeAdded'," +
        "'waitFor' : '" + waitForSeconds + "s'," +
        "'enabled' : true," +
        "'actions' : [" +
        "{'name':'start','class':'" + StartTriggerAction.class.getName() + "'}," +
        "{'name':'compute','class':'" + ComputePlanAction.class.getName() + "'}," +
        "{'name':'execute','class':'" + ExecutePlanAction.class.getName() + "'}," +
        "{'name':'test','class':'" + FinishTriggerAction.class.getName() + "'}" +
        "]" +
        "}}");

    assertAutoscalingUpdateComplete();

    // create a collection with more than 1 replica per node
    String collectionName = "testNodeAdded";
    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,
        "conf", NUM_NODES / 10, NUM_NODES / 8, NUM_NODES / 8, NUM_NODES / 8);
    create.setMaxShardsPerNode(5);
    create.setAutoAddReplicas(false);
    create.process(solrClient);

    if (log.isInfoEnabled()) {
      log.info("Ready after {} ms", CloudUtil.waitForState(cluster, collectionName, 90 * NUM_NODES, TimeUnit.SECONDS,
          CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)));
    }

    // start adding nodes
    int numAddNode = NUM_NODES / 5;
    List<String> addNodesList = new ArrayList<>(numAddNode);
    for (int i = 0; i < numAddNode; i++) {
      addNodesList.add(cluster.simAddNode());
    }
    // wait until at least one event is generated
    assertTrue("Trigger did not start even after await()ing an excessive amount of time",
        triggerStartedLatch.await(60, TimeUnit.SECONDS));

    // wait until started == finished
    TimeOut timeOut = new TimeOut(45 * waitForSeconds * NUM_NODES, TimeUnit.SECONDS, cluster.getTimeSource());
    while (!timeOut.hasTimedOut()) {
      final int started = triggerStartedCount.get();
      final int finished = triggerFinishedCount.get();
      log.info("started={} =?= finished={}", started, finished);
      if (triggerStartedCount.get() == triggerFinishedCount.get()) {
        log.info("started == finished: {} == {}", started, finished);
        break;
      }
      timeOut.sleep(1000);
    }
    if (timeOut.hasTimedOut()) {
      fail("did not finish processing all events in time: started=" + triggerStartedCount.get() + ", finished=" + triggerFinishedCount.get());
    }

    List<SolrInputDocument> systemColl = cluster.simGetSystemCollection();
    int startedEventPos = -1;
    for (int i = 0; i < systemColl.size(); i++) {
      SolrInputDocument d = systemColl.get(i);
      if (!"node_added_trigger2".equals(d.getFieldValue("event.source_s"))) {
        continue;
      }
      if ("NODEADDED".equals(d.getFieldValue("event.type_s")) &&
          "STARTED".equals(d.getFieldValue("stage_s"))) {
        startedEventPos = i;
        break;
      }
    }
    assertTrue("no STARTED event", startedEventPos > -1);
    SolrInputDocument startedEvent = systemColl.get(startedEventPos);
    int lastIgnoredPos = startedEventPos;
    // make sure some replicas have been moved
    long lastNumOps = cluster.simGetOpCount("MOVEREPLICA");
    log.info("1st check: lastNumOps (MOVEREPLICA) = {}", lastNumOps);
    assertTrue("no MOVEREPLICA ops?", lastNumOps > 0);

    if (log.isInfoEnabled()) {
      log.info("Ready after {} ms", CloudUtil.waitForState(cluster, collectionName, 20 * NUM_NODES, TimeUnit.SECONDS,
          CloudUtil.clusterShape(NUM_NODES / 10, NUM_NODES / 8 * 3, false, true)));
    }

    int count = 1000;
    SolrInputDocument finishedEvent = null;
    lastNumOps = cluster.simGetOpCount("MOVEREPLICA");
    log.info("2nd check: lastNumOps (MOVEREPLICA) = {}", lastNumOps);
    while (count-- > 0) {
      cluster.getTimeSource().sleep(10000);

      if (cluster.simGetOpCount("MOVEREPLICA") < 2) {
        log.info("MOVEREPLICA < 2");
        continue;
      }
      
      long currentNumOps = cluster.simGetOpCount("MOVEREPLICA");
      if (currentNumOps == lastNumOps) {
        int size = systemColl.size() - 1;
        for (int i = size; i > lastIgnoredPos; i--) {
          SolrInputDocument d = systemColl.get(i);
          if (!"node_added_trigger2".equals(d.getFieldValue("event.source_s"))) {
            continue;
          }
          if ("SUCCEEDED".equals(d.getFieldValue("stage_s"))) {
            finishedEvent = d;
            log.info("finishedEvent = {}", finishedEvent);
            break;
          }
        }
        log.info("breaking because currentNumOps == lastNumOps == {}", currentNumOps);
        break;
      } else {
        lastNumOps = currentNumOps;
      }
    }

    assertNotNull("did not finish processing changes", finishedEvent);
    long delta = (Long) finishedEvent.getFieldValue("event.time_l") - (Long) startedEvent.getFieldValue("event.time_l");
    if (log.isInfoEnabled()) {
      log.info("#### System stabilized after {} ms", TimeUnit.NANOSECONDS.toMillis(delta));
    }
    assertTrue("unexpected number of MOVEREPLICA ops: " + cluster.simGetOpCount("MOVEREPLICA"),
        cluster.simGetOpCount("MOVEREPLICA") > 1);
  }

