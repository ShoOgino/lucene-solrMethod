  @Test
  public void testBackCompat() throws Exception {
    CollectionAdminRequest.OverseerStatus status = new CollectionAdminRequest.OverseerStatus();
    CloudSolrClient solrClient = cluster.getSolrClient();
    CollectionAdminResponse adminResponse = status.process(solrClient);
    NamedList<Object> response = adminResponse.getResponse();
    String leader = (String) response.get("leader");
    log.info("Overseer Status indicates that the overseer is: {}");
    JettySolrRunner overseerNode = null;
    List<JettySolrRunner> jettySolrRunners = cluster.getJettySolrRunners();
    for (int i = 0; i < jettySolrRunners.size(); i++) {
      JettySolrRunner runner = jettySolrRunners.get(i);
      if (runner.getNodeName().equals(leader)) {
        overseerNode = runner;
        break;
      }
    }
    assertNotNull(overseerNode);
    LogWatcherConfig watcherCfg = new LogWatcherConfig(true, null, "WARN", 100);
    LogWatcher watcher = LogWatcher.newRegisteredLogWatcher(watcherCfg, null);

    watcher.reset();

    // restart Overseer to trigger the back-compat check
    log.info("Stopping Overseer Node: {} ({})", overseerNode.getNodeName(), overseerNode.getLocalPort());
    cluster.stopJettySolrRunner(overseerNode);
    log.info("Waiting for new overseer election...");
    TimeOut timeOut = new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource());
    while (!timeOut.hasTimedOut()) {
      adminResponse = status.process(solrClient);
      response = adminResponse.getResponse();
      String newLeader = (String) response.get("leader");
      if (newLeader != null && !leader.equals(newLeader)) {
        log.info("...new overseer is: {}", newLeader);
        break;
      }
      timeOut.sleep(200);
    }
    if (timeOut.hasTimedOut()) {
      fail("time out waiting for new Overseer leader");
    }

    TimeOut timeOut1 = new TimeOut(60, TimeUnit.SECONDS, cloudManager.getTimeSource());
    boolean foundWarning = false;
    boolean foundSchemaWarning = false;

    // TODO: replace this polling logic with a LogWatcher that uses a queue we can await() on...
    log.info("Polling for log watcher to detect expected log messages...");
    while (!timeOut1.hasTimedOut()) {
      timeOut1.sleep(1000);
      SolrDocumentList history = watcher.getHistory(-1, null);
      for (SolrDocument doc : history) {
        if (!Overseer.class.getName().equals(doc.getFieldValue("logger"))) {
          continue;
        }
        if (doc.getFieldValue("message").toString().contains("re-indexing")) {
          log.info("Found re-indexing message: {}", doc.getFieldValue("message"));
          foundWarning = true;
        }
        if (doc.getFieldValue("message").toString().contains("timestamp")) {
          log.info("Found timestamp message: {}", doc.getFieldValue("message"));
          foundSchemaWarning = true;
        }
      }
      if (foundWarning && foundSchemaWarning) {
        break;
      }
    }
    log.info("Done polling log watcher: foundWarning={} foundSchemaWarning={}", foundWarning, foundSchemaWarning);
    assertTrue("re-indexing warning not found", foundWarning);
    assertTrue("timestamp field incompatibility warning not found", foundSchemaWarning);
  }

