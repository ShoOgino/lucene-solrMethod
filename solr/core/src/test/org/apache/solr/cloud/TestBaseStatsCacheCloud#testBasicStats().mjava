  @Test
  public void testBasicStats() throws Exception {
    QueryResponse cloudRsp = solrClient.query(collectionName,
        params("q", "foo_t:\"bar baz\"", "fl", "*,score", "rows", "" + NUM_DOCS, "debug", "true"));
    QueryResponse controlRsp = control.query("collection1",
        params("q", "foo_t:\"bar baz\"", "fl", "*,score", "rows", "" + NUM_DOCS, "debug", "true"));

    assertResponses(controlRsp, cloudRsp, assertSameScores());

    // test after updates
    indexDocs(solrClient, collectionName, NUM_DOCS, NUM_DOCS, generator);
    indexDocs(control, "collection1", NUM_DOCS, NUM_DOCS, generator);

    cloudRsp = solrClient.query(collectionName,
        params("q", "foo_t:\"bar baz\"", "fl", "*,score", "rows", "" + (NUM_DOCS * 2)));
    controlRsp = control.query("collection1",
        params("q", "foo_t:\"bar baz\"", "fl", "*,score", "rows", "" + (NUM_DOCS * 2)));
    assertResponses(controlRsp, cloudRsp, assertSameScores());

    // check cache metrics
    StatsCache.StatsCacheMetrics statsCacheMetrics = new StatsCache.StatsCacheMetrics();
    for (JettySolrRunner jettySolrRunner : cluster.getJettySolrRunners()) {
      try (SolrClient client = getHttpSolrClient(jettySolrRunner.getBaseUrl().toString())) {
        NamedList<Object> metricsRsp = client.request(
            new GenericSolrRequest(SolrRequest.METHOD.GET, "/admin/metrics", params("group", "solr.core", "prefix", "CACHE.searcher.statsCache")));
        assertNotNull(metricsRsp);
        NamedList<Object> metricsPerReplica = (NamedList<Object>)metricsRsp.get("metrics");
        assertNotNull("no metrics perReplica", metricsPerReplica);
        //log.info("======= Node: " + jettySolrRunner.getBaseUrl());
        //log.info("======= Metrics:\n" + Utils.toJSONString(metricsPerReplica));
        metricsPerReplica.forEach((replica, metrics) -> {
          Map<String, Object> values = (Map<String, Object>)((NamedList<Object>)metrics).get("CACHE.searcher.statsCache");
          values.forEach((name, value) -> {
            long val = value instanceof Number ? ((Number) value).longValue() : 0;
            switch (name) {
              case "lookups" :
                statsCacheMetrics.lookups.add(val);
                break;
              case "returnLocalStats" :
                statsCacheMetrics.returnLocalStats.add(val);
                break;
              case "mergeToGlobalStats" :
                statsCacheMetrics.mergeToGlobalStats.add(val);
                break;
              case "missingGlobalFieldStats" :
                statsCacheMetrics.missingGlobalFieldStats.add(val);
                break;
              case "missingGlobalTermStats" :
                statsCacheMetrics.missingGlobalTermStats.add(val);
                break;
              case "receiveGlobalStats" :
                statsCacheMetrics.receiveGlobalStats.add(val);
                break;
              case "retrieveStats" :
                statsCacheMetrics.retrieveStats.add(val);
                break;
              case "sendGlobalStats" :
                statsCacheMetrics.sendGlobalStats.add(val);
                break;
              case "useCachedGlobalStats" :
                statsCacheMetrics.useCachedGlobalStats.add(val);
                break;
              case "statsCacheImpl" :
                assertTrue("incorreect cache impl, expected" + getImplementationName() + " but was " + value,
                    getImplementationName().endsWith((String)value));
                break;
              default:
                fail("Unexpected cache metrics: key=" + name + ", value=" + value);
            }
          });
        });
      }
    }
    checkStatsCacheMetrics(statsCacheMetrics);
  }

