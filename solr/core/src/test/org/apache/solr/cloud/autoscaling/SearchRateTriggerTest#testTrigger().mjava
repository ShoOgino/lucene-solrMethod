  @Test
  public void testTrigger() throws Exception {
    double rate = 1.0;
    SolrZkClient zkClient = cluster.getSolrClient().getZkStateReader().getZkClient();
    SolrResourceLoader loader = cluster.getJettySolrRunner(0).getCoreContainer().getResourceLoader();
    CoreContainer container = cluster.getJettySolrRunner(0).getCoreContainer();
    SolrCloudManager cloudManager = new SolrClientCloudManager(new ZkDistributedQueueFactory(zkClient), cluster.getSolrClient());
    URL baseUrl = cluster.getJettySolrRunners().get(1).getBaseUrl();
    long waitForSeconds = 5 + random().nextInt(5);
    Map<String, Object> props = createTriggerProps(waitForSeconds, rate);
    final List<TriggerEvent> events = new ArrayList<>();
    CloudSolrClient solrClient = cluster.getSolrClient();

    try (SearchRateTrigger trigger = new SearchRateTrigger("search_rate_trigger")) {
      trigger.configure(loader, cloudManager, props);
      trigger.init();
      trigger.setProcessor(noFirstRunProcessor);
      trigger.run();
      trigger.setProcessor(event -> events.add(event));

      // generate replica traffic
      String coreName = container.getLoadedCoreNames().iterator().next();
      String url = baseUrl.toString() + "/" + coreName;
      try (HttpSolrClient simpleClient = new HttpSolrClient.Builder(url).build()) {
        SolrParams query = params(CommonParams.Q, "*:*", CommonParams.DISTRIB, "false");
        for (int i = 0; i < 200; i++) {
          simpleClient.query(query);
        }
        trigger.run();
        // waitFor delay
        assertEquals(0, events.size());
        Thread.sleep(waitForSeconds * 1000 + 2000);
        // should generate replica event
        trigger.run();
        assertEquals(1, events.size());
        TriggerEvent event = events.get(0);
        assertEquals(TriggerEventType.SEARCHRATE, event.eventType);
        List<ReplicaInfo> infos = (List<ReplicaInfo>)event.getProperty(AutoScalingParams.REPLICA);
        assertEquals(1, infos.size());
        ReplicaInfo info = infos.get(0);
        assertEquals(coreName, info.getCore());
        assertTrue((Double)info.getVariable(AutoScalingParams.RATE) > rate);
      }
      // close that jetty to remove the violation - alternatively wait for 1 min...
      cluster.stopJettySolrRunner(1);
      events.clear();
      SolrParams query = params(CommonParams.Q, "*:*");
      for (int i = 0; i < 500; i++) {
        solrClient.query(COLL1, query);
      }
      Thread.sleep(waitForSeconds * 1000 + 2000);
      trigger.run();
      // should generate collection event
      assertEquals(1, events.size());
      TriggerEvent event = events.get(0);
      Map<String, Double> hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);
      assertEquals(1, hotCollections.size());
      Double Rate = hotCollections.get(COLL1);
      assertNotNull(Rate);
      assertTrue(Rate > rate);
      events.clear();

      for (int i = 0; i < 1000; i++) {
        solrClient.query(COLL2, query);
      }
      Thread.sleep(waitForSeconds * 1000 + 2000);
      trigger.run();
      // should generate node and collection event but not for COLL2 because of waitFor
      assertEquals(1, events.size());
      event = events.get(0);
      Map<String, Double> hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);
      assertEquals(3, hotNodes.size());
      hotNodes.forEach((n, r) -> assertTrue(n, r > rate));
      hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);
      assertEquals(2, hotCollections.size());
      Rate = hotCollections.get(COLL1);
      assertNotNull(Rate);
      Rate = hotCollections.get(COLL2);
      assertNotNull(Rate);

      events.clear();
      // assert that waitFor prevents new events from being generated
      trigger.run();
      // should not generate any events
      assertEquals(0, events.size());

      Thread.sleep(waitForSeconds * 1000 + 2000);
      trigger.run();
      // should generate node and collection event
      assertEquals(1, events.size());
      hotCollections = (Map<String, Double>)event.getProperty(AutoScalingParams.COLLECTION);
      assertEquals(2, hotCollections.size());
      Rate = hotCollections.get(COLL1);
      assertNotNull(Rate);
      Rate = hotCollections.get(COLL2);
      assertNotNull(Rate);
      hotNodes = (Map<String, Double>)event.getProperty(AutoScalingParams.NODE);
      assertEquals(3, hotNodes.size());
      hotNodes.forEach((n, r) -> assertTrue(n, r > rate));
    }
  }

