  @Test
  public void test() throws Exception {
    handle.clear();
    handle.put("timestamp", SKIPVAL);

    try {
      CloudJettyRunner initialLeaderJetty = shardToLeaderJetty.get("shard1");
      List<CloudJettyRunner> otherJetties = getOtherAvailableJetties(initialLeaderJetty);
      
      log.info("Leader node_name: {},  url: {}", initialLeaderJetty.coreNodeName, initialLeaderJetty.url);
      for (CloudJettyRunner cloudJettyRunner : otherJetties) {
        log.info("Nonleader node_name: {},  url: {}", cloudJettyRunner.coreNodeName, cloudJettyRunner.url);
      }
      
      CloudJettyRunner secondNode = otherJetties.get(0);
      CloudJettyRunner freshNode = otherJetties.get(1);
      
      // shutdown a node to simulate fresh start
      otherJetties.remove(freshNode);
      forceNodeFailures(singletonList(freshNode));

      del("*:*");
      waitForThingsToLevelOut(30);

      checkShardConsistency(false, true);

      // index a few docs and commit
      for (int i = 0; i < 100; i++) {
        indexDoc(id, docId, i1, 50, tlong, 50, t1,
            "document number " + docId++);
      }
      commit();
      waitForThingsToLevelOut(30);

      checkShardConsistency(false, true);

      // start the freshNode 
      ChaosMonkey.start(freshNode.jetty);
      nodesDown.remove(freshNode);

      waitTillNodesActive();
      waitForThingsToLevelOut(30);
      
      //TODO check how to see if fresh node went into recovery (may be check count for replication handler on new leader) 
      
      long numRequestsBefore = (Long) secondNode.jetty
          .getCoreContainer()
          .getCores()
          .iterator()
          .next()
          .getRequestHandler(ReplicationHandler.PATH)
          .getStatistics().get("requests");
      
      // shutdown the original leader
      log.info("Now shutting down initial leader");
      forceNodeFailures(singletonList(initialLeaderJetty));
      waitForNewLeader(cloudClient, "shard1", (Replica)initialLeaderJetty.client.info  , 15);
      log.info("Updating mappings from zk");
      updateMappingsFromZk(jettys, clients, true);
      
      long numRequestsAfter = (Long) secondNode.jetty
          .getCoreContainer()
          .getCores()
          .iterator()
          .next()
          .getRequestHandler(ReplicationHandler.PATH)
          .getStatistics().get("requests");

      assertEquals("Node went into replication", numRequestsBefore, numRequestsAfter);
      
      success = true;
    } finally {
      System.clearProperty("solr.disableFingerprint");
    }
  }

