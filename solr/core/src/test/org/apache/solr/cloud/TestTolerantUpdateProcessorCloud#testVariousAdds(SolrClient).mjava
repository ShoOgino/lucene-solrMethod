  protected static void testVariousAdds(SolrClient client) throws Exception {
    assertNotNull("client not initialized", client);
    
    UpdateResponse rsp = null;

    // 2 docs that are both on shard1, the first one should fail
    for (int maxErrors : new int[] { -1, 2, 47, 10 }) {
      // regardless of which of these maxErrors values we use, behavior should be the same...
      rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                          "maxErrors", ""+maxErrors,
                          "commit", "true"),
                   doc(f("id", S_ONE_PRE + "42"), f("foo_i", "bogus_value")),
                   doc(f("id", S_ONE_PRE + "666"), f("foo_i", "1976"))).process(client);
      
      assertEquals(0, rsp.getStatus());
      assertUpdateTolerantAddErrors("single shard, 1st doc should fail", rsp, S_ONE_PRE + "42");
      assertEquals(0, client.commit().getStatus());
      assertQueryDocIds(client, false, S_ONE_PRE + "42");
      assertQueryDocIds(client, true, S_ONE_PRE + "666");

      // ...only diff should be that we get an accurate report of the effective maxErrors
      assertEquals(maxErrors, rsp.getResponseHeader().get("maxErrors"));
    }
    
    // 2 docs that are both on shard1, the second one should fail
    
    rsp = update(params("update.chain", "tolerant-chain-max-errors-not-set",
                        "commit", "true"),
                 doc(f("id", S_ONE_PRE + "55"), f("foo_i", "1976")),
                 doc(f("id", S_ONE_PRE + "77"), f("foo_i", "bogus_val"))).process(client);
    
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantAddErrors("single shard, 2nd doc should fail", rsp, S_ONE_PRE + "77");
    assertQueryDocIds(client, false, S_ONE_PRE + "77");
    assertQueryDocIds(client, true, S_ONE_PRE + "666", S_ONE_PRE + "55");
    // since maxErrors is unset, we should get an "unlimited" value back
    assertEquals(-1, rsp.getResponseHeader().get("maxErrors"));

    // clean slate
    assertEquals(0, client.deleteByQuery("*:*").getStatus());

    // 2 docs on 2 diff shards, first of which should fail
    
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true"),
                 doc(f("id", S_ONE_PRE + "42"), f("foo_i", "bogus_value")),
                 doc(f("id", S_TWO_PRE + "666"), f("foo_i", "1976"))).process(client);
    
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantAddErrors("two shards, 1st doc should fail", rsp, S_ONE_PRE + "42");
    assertEquals(0, client.commit().getStatus());
    assertQueryDocIds(client, false, S_ONE_PRE + "42");
    assertQueryDocIds(client, true, S_TWO_PRE + "666");
    
    // 2 docs on 2 diff shards, second of which should fail

    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true"),
                 doc(f("id", S_ONE_PRE + "55"), f("foo_i", "1976")),
                 doc(f("id", S_TWO_PRE + "77"), f("foo_i", "bogus_val"))).process(client);
    
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantAddErrors("two shards, 2nd doc should fail", rsp, S_TWO_PRE + "77");
    assertQueryDocIds(client, false, S_TWO_PRE + "77");
    assertQueryDocIds(client, true, S_TWO_PRE + "666", S_ONE_PRE + "55");

    // clean slate
    assertEquals(0, client.deleteByQuery("*:*").getStatus());

    // many docs from diff shards, 1 from each shard should fail
    
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true"),
                 doc(f("id", S_ONE_PRE + "11")),
                 doc(f("id", S_TWO_PRE + "21")),
                 doc(f("id", S_ONE_PRE + "12")),
                 doc(f("id", S_TWO_PRE + "22"), f("foo_i", "bogus_val")),
                 doc(f("id", S_ONE_PRE + "13")),
                 doc(f("id", S_TWO_PRE + "23")),
                 doc(f("id", S_ONE_PRE + "14")),
                 doc(f("id", S_TWO_PRE + "24")),
                 doc(f("id", S_ONE_PRE + "15"), f("foo_i", "bogus_val")),
                 doc(f("id", S_TWO_PRE + "25")),
                 doc(f("id", S_ONE_PRE + "16")),
                 doc(f("id", S_TWO_PRE + "26"))).process(client);
    
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantAddErrors("many docs, 1 from each shard should fail", rsp,
                                  S_ONE_PRE + "15",
                                  S_TWO_PRE + "22");
    assertQueryDocIds(client, false, S_TWO_PRE + "22", S_ONE_PRE + "15");
    assertQueryDocIds(client, true,
                      S_ONE_PRE + "11", S_TWO_PRE + "21", S_ONE_PRE + "12",
                      S_ONE_PRE + "13", S_TWO_PRE + "23", S_ONE_PRE + "14", S_TWO_PRE + "24",
                      S_TWO_PRE + "25", S_ONE_PRE + "16", S_TWO_PRE + "26");

    // clean slate
    assertEquals(0, client.deleteByQuery("*:*").getStatus());

    // many docs from diff shards, 1 from each shard should fail and 1 w/o uniqueKey
    
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "commit", "true"),
                 doc(f("id", S_ONE_PRE + "11")),
                 doc(f("id", S_TWO_PRE + "21")),
                 doc(f("id", S_ONE_PRE + "12")),
                 doc(f("id", S_TWO_PRE + "22"), f("foo_i", "bogus_val")),
                 doc(f("id", S_ONE_PRE + "13")),
                 doc(f("id", S_TWO_PRE + "23")),
                 doc(f("foo_i", "42")),          // no "id"
                 doc(f("id", S_ONE_PRE + "14")),
                 doc(f("id", S_TWO_PRE + "24")),
                 doc(f("id", S_ONE_PRE + "15"), f("foo_i", "bogus_val")),
                 doc(f("id", S_TWO_PRE + "25")),
                 doc(f("id", S_ONE_PRE + "16")),
                 doc(f("id", S_TWO_PRE + "26"))).process(client);
    
    assertEquals(0, rsp.getStatus());
    assertUpdateTolerantAddErrors("many docs, 1 from each shard (+ no id) should fail", rsp,
                                  S_ONE_PRE + "15",
                                  "(unknown)",
                                  S_TWO_PRE + "22");
    assertQueryDocIds(client, false, S_TWO_PRE + "22", S_ONE_PRE + "15");
    assertQueryDocIds(client, true,
                      S_ONE_PRE + "11", S_TWO_PRE + "21", S_ONE_PRE + "12",
                      S_ONE_PRE + "13", S_TWO_PRE + "23", S_ONE_PRE + "14", S_TWO_PRE + "24",
                      S_TWO_PRE + "25", S_ONE_PRE + "16", S_TWO_PRE + "26");

    // clean slate
    assertEquals(0, client.deleteByQuery("*:*").getStatus());
    
    // many docs from diff shards, more then 10 (total) should fail
    SolrException e = expectThrows(SolrException.class,
        "did not get a top level exception when more then 10 docs failed",
        () -> update(params("update.chain", "tolerant-chain-max-errors-10", "commit", "true"),
            doc(f("id", S_ONE_PRE + "11")),
            doc(f("id", S_TWO_PRE + "21"), f("foo_i", "bogus_val")),
            doc(f("id", S_ONE_PRE + "12")),
            doc(f("id", S_TWO_PRE + "22"), f("foo_i", "bogus_val")),
            doc(f("id", S_ONE_PRE + "13")),
            doc(f("id", S_TWO_PRE + "23"), f("foo_i", "bogus_val")),
            doc(f("id", S_ONE_PRE + "14"), f("foo_i", "bogus_val")),
            doc(f("id", S_TWO_PRE + "24")),
            doc(f("id", S_ONE_PRE + "15"), f("foo_i", "bogus_val")),
            doc(f("id", S_TWO_PRE + "25")),
            doc(f("id", S_ONE_PRE + "16"), f("foo_i", "bogus_val")),
            doc(f("id", S_TWO_PRE + "26"), f("foo_i", "bogus_val")),
            doc(f("id", S_ONE_PRE + "17")),
            doc(f("id", S_TWO_PRE + "27")),
            doc(f("id", S_ONE_PRE + "18"), f("foo_i", "bogus_val")),
            doc(f("id", S_TWO_PRE + "28"), f("foo_i", "bogus_val")),
            doc(f("id", S_ONE_PRE + "19"), f("foo_i", "bogus_val")),
            doc(f("id", S_TWO_PRE + "29"), f("foo_i", "bogus_val")),
            doc(f("id", S_ONE_PRE + "10")), // may be skipped, more then 10 fails
            doc(f("id", S_TWO_PRE + "20"))  // may be skipped, more then 10 fails
            ).process(client)
    );
    {
      // we can't make any reliable assertions about the error message, because
      // it varies based on how the request was routed -- see SOLR-8830
      assertEquals("not the type of error we were expecting (" + e.code() + "): " + e.toString(),
          // NOTE: we always expect a 400 because we know that's what we would get from these types of errors
          // on a single node setup -- a 5xx type error isn't something we should have triggered
          400, e.code());

      // verify that the Exceptions metadata can tell us what failed.
      NamedList<String> remoteErrMetadata = e.getMetadata();
      assertNotNull("no metadata in: " + e.toString(), remoteErrMetadata);
      Set<ToleratedUpdateError> actualKnownErrs
          = new LinkedHashSet<ToleratedUpdateError>(remoteErrMetadata.size());
      int actualKnownErrsCount = 0;
      for (int i = 0; i < remoteErrMetadata.size(); i++) {
        ToleratedUpdateError err =
            ToleratedUpdateError.parseMetadataIfToleratedUpdateError(remoteErrMetadata.getName(i),
                remoteErrMetadata.getVal(i));
        if (null == err) {
          // some metadata unrelated to this update processor
          continue;
        }
        actualKnownErrsCount++;
        actualKnownErrs.add(err);
      }
      assertEquals("wrong number of errors in metadata: " + remoteErrMetadata.toString(),
          11, actualKnownErrsCount);
      assertEquals("at least one dup error in metadata: " + remoteErrMetadata.toString(),
          actualKnownErrsCount, actualKnownErrs.size());
      for (ToleratedUpdateError err : actualKnownErrs) {
        assertEquals("only expected type of error is ADD: " + err,
            CmdType.ADD, err.getType());
        assertTrue("failed err msg didn't match expected value: " + err,
            err.getMessage().contains("bogus_val"));
      }
    }

    assertEquals(0, client.commit().getStatus()); // need to force since update didn't finish
    assertQueryDocIds(client, false
                      // explicitly failed
                      , S_TWO_PRE + "21", S_TWO_PRE + "22", S_TWO_PRE + "23", S_ONE_PRE + "14"
                      , S_ONE_PRE + "15", S_ONE_PRE + "16", S_TWO_PRE + "26", S_ONE_PRE + "18"
                      , S_TWO_PRE + "28", S_ONE_PRE + "19", S_TWO_PRE + "29"
                      //
                      // // we can't assert for sure these docs were skipped
                      // // depending on shard we hit, they may have been added async before errors were exceeded
                      // , S_ONE_PRE + "10", S_TWO_PRE + "20" // skipped
                      );
    assertQueryDocIds(client, true,
                      S_ONE_PRE + "11", S_ONE_PRE + "12", S_ONE_PRE + "13", S_TWO_PRE + "24",
                      S_TWO_PRE + "25", S_ONE_PRE + "17", S_TWO_PRE + "27");
    
    // clean slate
    assertEquals(0, client.deleteByQuery("*:*").getStatus());
    
    // many docs from diff shards, more then 10 from a single shard (two) should fail

    e = expectThrows(SolrException.class, "did not get a top level exception when more then 10 docs failed",
        () -> {
      ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(30);
      docs.add(doc(f("id", S_ONE_PRE + "z")));
      docs.add(doc(f("id", S_TWO_PRE + "z")));
      docs.add(doc(f("id", S_ONE_PRE + "y")));
      docs.add(doc(f("id", S_TWO_PRE + "y")));
      for (int i = 0; i < 11; i++) {
        docs.add(doc(f("id", S_ONE_PRE + i)));
        docs.add(doc(f("id", S_TWO_PRE + i), f("foo_i", "bogus_val")));
      }
      docs.add(doc(f("id", S_ONE_PRE + "x"))); // may be skipped, more then 10 fails
      docs.add(doc(f("id", S_TWO_PRE + "x"))); // may be skipped, more then 10 fails

      update(params("update.chain", "tolerant-chain-max-errors-10",
          "commit", "true"),
          docs.toArray(new SolrInputDocument[docs.size()])).process(client);
    });

    {
      // we can't make any reliable assertions about the error message, because
      // it varies based on how the request was routed -- see SOLR-8830
      assertEquals("not the type of error we were expecting ("+e.code()+"): " + e.toString(),
          // NOTE: we always expect a 400 because we know that's what we would get from these types of errors
          // on a single node setup -- a 5xx type error isn't something we should have triggered
          400, e.code());

      // verify that the Exceptions metadata can tell us what failed.
      NamedList<String> remoteErrMetadata = e.getMetadata();
      assertNotNull("no metadata in: " + e.toString(), remoteErrMetadata);
      Set<ToleratedUpdateError> actualKnownErrs
          = new LinkedHashSet<ToleratedUpdateError>(remoteErrMetadata.size());
      int actualKnownErrsCount = 0;
      for (int i = 0; i < remoteErrMetadata.size(); i++) {
        ToleratedUpdateError err =
            ToleratedUpdateError.parseMetadataIfToleratedUpdateError(remoteErrMetadata.getName(i),
                remoteErrMetadata.getVal(i));
        if (null == err) {
          // some metadata unrelated to this update processor
          continue;
        }
        actualKnownErrsCount++;
        actualKnownErrs.add(err);
      }
      assertEquals("wrong number of errors in metadata: " + remoteErrMetadata.toString(),
          11, actualKnownErrsCount);
      assertEquals("at least one dup error in metadata: " + remoteErrMetadata.toString(),
          actualKnownErrsCount, actualKnownErrs.size());
      for (ToleratedUpdateError err : actualKnownErrs) {
        assertEquals("only expected type of error is ADD: " + err,
            CmdType.ADD, err.getType());
        assertTrue("failed id had unexpected prefix: " + err,
            err.getId().startsWith(S_TWO_PRE));
        assertTrue("failed err msg didn't match expected value: " + err,
            err.getMessage().contains("bogus_val"));
      }
    }

    assertEquals(0, client.commit().getStatus()); // need to force since update didn't finish
    assertQueryDocIds(client, true
                      , S_ONE_PRE + "z", S_ONE_PRE + "y", S_TWO_PRE + "z", S_TWO_PRE + "y" // first
                      //
                      , S_ONE_PRE + "0", S_ONE_PRE + "1", S_ONE_PRE + "2", S_ONE_PRE + "3", S_ONE_PRE + "4"
                      , S_ONE_PRE + "5", S_ONE_PRE + "6", S_ONE_PRE + "7", S_ONE_PRE + "8", S_ONE_PRE + "9"
                      );
    assertQueryDocIds(client, false
                      // explicitly failed
                      , S_TWO_PRE + "0", S_TWO_PRE + "1", S_TWO_PRE + "2", S_TWO_PRE + "3", S_TWO_PRE + "4"
                      , S_TWO_PRE + "5", S_TWO_PRE + "6", S_TWO_PRE + "7", S_TWO_PRE + "8", S_TWO_PRE + "9"
                      //
                      // // we can't assert for sure these docs were skipped
                      // // depending on shard we hit, they may have been added async before errors were exceeded
                      // , S_ONE_PRE + "x", S_TWO_PRE + "x", // skipped
                      );

    // clean slate
    assertEquals(0, client.deleteByQuery("*:*").getStatus());
    
    // many docs from diff shards, more then 10 don't have any uniqueKey specified

    e = expectThrows(SolrException.class,
        "did not get a top level exception when more then 10 docs mising uniqueKey",
        () -> {
      ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(30);
      docs.add(doc(f("id", S_ONE_PRE + "z")));
      docs.add(doc(f("id", S_TWO_PRE + "z")));
      docs.add(doc(f("id", S_ONE_PRE + "y")));
      docs.add(doc(f("id", S_TWO_PRE + "y")));
      for (int i = 0; i < 11; i++) {
        // no "id" field
        docs.add(doc(f("foo_i", "" + i)));
      }
      docs.add(doc(f("id", S_ONE_PRE + "x"))); // may be skipped, more then 10 fails
      docs.add(doc(f("id", S_TWO_PRE + "x"))); // may be skipped, more then 10 fails

      update(params("update.chain", "tolerant-chain-max-errors-10",
          "commit", "true"),
          docs.toArray(new SolrInputDocument[docs.size()])).process(client);
    });

    {
      // we can't make any reliable assertions about the error message, because
      // it varies based on how the request was routed -- see SOLR-8830
      assertEquals("not the type of error we were expecting ("+e.code()+"): " + e.toString(),
          // NOTE: we always expect a 400 because we know that's what we would get from these types of errors
          // on a single node setup -- a 5xx type error isn't something we should have triggered
          400, e.code());

      // verify that the Exceptions metadata can tell us what failed.
      NamedList<String> remoteErrMetadata = e.getMetadata();
      assertNotNull("no metadata in: " + e.toString(), remoteErrMetadata);
      int actualKnownErrsCount = 0;
      for (int i = 0; i < remoteErrMetadata.size(); i++) {
        ToleratedUpdateError err =
            ToleratedUpdateError.parseMetadataIfToleratedUpdateError(remoteErrMetadata.getName(i),
                remoteErrMetadata.getVal(i));
        if (null == err) {
          // some metadata unrelated to this update processor
          continue;
        }
        actualKnownErrsCount++;
        assertEquals("only expected type of error is ADD: " + err,
            CmdType.ADD, err.getType());
        assertTrue("failed id didn't match 'unknown': " + err,
            err.getId().contains("unknown"));
      }
      assertEquals("wrong number of errors in metadata: " + remoteErrMetadata.toString(),
          11, actualKnownErrsCount);
    }

    assertEquals(0, client.commit().getStatus()); // need to force since update didn't finish
    assertQueryDocIds(client, true
                      , S_ONE_PRE + "z", S_ONE_PRE + "y", S_TWO_PRE + "z", S_TWO_PRE + "y" // first
                      // // we can't assert for sure these docs were skipped or added
                      // // depending on shard we hit, they may have been added async before errors were exceeded
                      // , S_ONE_PRE + "x", S_TWO_PRE + "x" // skipped
                      );

    // clean slate
    assertEquals(0, client.deleteByQuery("*:*").getStatus());
    
    // many docs from diff shards, more then 10 from a single shard (two) should fail but
    // request should still succeed because of maxErrors=-1 param

    ArrayList<SolrInputDocument> docs = new ArrayList<SolrInputDocument>(30);
    ArrayList<ExpectedErr> expectedErrs = new ArrayList<ExpectedErr>(30);
    docs.add(doc(f("id", S_ONE_PRE + "z")));
    docs.add(doc(f("id", S_TWO_PRE + "z")));
    docs.add(doc(f("id", S_ONE_PRE + "y")));
    docs.add(doc(f("id", S_TWO_PRE + "y")));
    for (int i = 0; i < 11; i++) {
      docs.add(doc(f("id", S_ONE_PRE + i)));
      docs.add(doc(f("id", S_TWO_PRE + i), f("foo_i", "bogus_val")));
      expectedErrs.add(addErr(S_TWO_PRE + i));
    }
    docs.add(doc(f("id", S_ONE_PRE + "x"))); 
    docs.add(doc(f("id", S_TWO_PRE + "x"))); 
    
    rsp = update(params("update.chain", "tolerant-chain-max-errors-10",
                        "maxErrors", "-1",
                        "commit", "true"),
                 docs.toArray(new SolrInputDocument[docs.size()])).process(client);
    assertUpdateTolerantErrors("many docs from shard2 fail, but req should succeed", rsp,
                               expectedErrs.toArray(new ExpectedErr[expectedErrs.size()]));
    assertQueryDocIds(client, true
                      , S_ONE_PRE + "z", S_ONE_PRE + "y", S_TWO_PRE + "z", S_TWO_PRE + "y" // first
                      , S_ONE_PRE + "x", S_TWO_PRE + "x" // later
                      );

  }

