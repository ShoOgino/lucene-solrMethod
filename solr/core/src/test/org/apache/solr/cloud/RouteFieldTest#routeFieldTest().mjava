  // Test for seeing if we actually respect the route field
  // We should be able to create two collections, one using ID and one using
  // a route field. We should then be able to index docs to each, using
  // the route field and id field and find the same docs on the same shards.
  @Test
  public void routeFieldTest() throws Exception {
    log.info("Starting routeFieldTest");

    assertEquals("Failed to  create collection routeFieldTest",
        0,
        CollectionAdminRequest.createCollection(COLL_ROUTE, "conf", 2, 1)
            .setRouterField(ROUTE_FIELD)
            .process(cluster.getSolrClient()).getStatus());

    List<SchemaRequest.Update> updateList = new ArrayList<>();
    updateList.add(new SchemaRequest.AddField(makeMap("name", ROUTE_FIELD, "type", "string", "indexed", "true", "stored", "true")));
    updateList.add(new SchemaRequest.AddField(makeMap("name", "sorter", "type", "int", "indexed", "true", "stored", "true")));
    SchemaRequest.MultiUpdate multiUpdateRequest = new SchemaRequest.MultiUpdate(updateList);
    UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLL_ROUTE);
    assertNull("Error adding fields", multipleUpdatesResponse.getResponse().get("errors"));

    assertEquals("Failed to  create collection routeIdTest"
        , 0
        , CollectionAdminRequest.createCollection(COLL_ID, "conf", 2, 1)
            .process(cluster.getSolrClient()).getStatus());

    // We now have two collections, add the same docs to each with the proper
    // fields so the id field is used in one collection and ROUTE_FIELD in the other..
    List<SolrInputDocument> docsRoute = new ArrayList<>();
    List<SolrInputDocument> docsId = new ArrayList<>();
    int lim = random().nextInt(50) + 50;
    for (int idx = 0; idx < lim; ++idx) {
      SolrInputDocument doc = new SolrInputDocument();
      // id should be irrelevant for routing, but we want to insure that
      // if somehow we _do_ use id to route, we don't use the same ID
      // as the docs we're adding to the collection routed by id.
      doc.addField("id", idx + 1_500_000);
      doc.addField(ROUTE_FIELD, idx);
      doc.addField("sorter", idx);
      docsRoute.add(doc);

      doc = new SolrInputDocument();
      doc.addField("id", idx);
      doc.addField("sorter", idx);
      docsId.add(doc);
    }
    cluster.getSolrClient().add(COLL_ROUTE, docsRoute);
    cluster.getSolrClient().add(COLL_ID, docsId);

    cluster.getSolrClient().commit(COLL_ROUTE, true, true);
    cluster.getSolrClient().commit(COLL_ID, true, true);

    checkShardsHaveSameDocs();
  }

