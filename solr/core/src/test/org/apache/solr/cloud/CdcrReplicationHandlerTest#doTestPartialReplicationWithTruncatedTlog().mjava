  /**
   * Test the scenario where the slave is killed before receiving a commit. This creates a truncated tlog
   * file on the slave node. The replication strategy should detect this truncated file, and fetch the
   * non-truncated file from the leader.
   */
  public void doTestPartialReplicationWithTruncatedTlog() throws Exception {
    this.clearSourceCollection();

    CloudSolrClient client = createCloudClient(SOURCE_COLLECTION);
    List<CloudJettyRunner> slaves = this.getShardToSlaveJetty(SOURCE_COLLECTION, SHARD1);

    try {
      for (int i = 0; i < 10; i++) {
        for (int j = i * 20; j < (i * 20) + 20; j++) {
          client.add(getDoc(id, Integer.toString(j)));

          // Stop the slave in the middle of a batch to create a truncated tlog on the slave
          if (j == 45) {
            ChaosMonkey.stop(slaves.get(0).jetty);
          }

        }
        commit(SOURCE_COLLECTION);
      }
    } finally {
      client.close();
    }

    assertEquals(200, getNumDocs(SOURCE_COLLECTION));

    // Restart the slave node to trigger Replication recovery
    this.restartServer(slaves.get(0));

    // at this stage, the slave should have replicated the 5 missing tlog files
    this.assertUpdateLogs(SOURCE_COLLECTION, 10);
  }

