  public void testSSLRandomizer() {
    SSLRandomizer r;
    // for some cases, we know exactly what the config should be regardless of randomization factors
    SSLTestConfig conf;

    for (Class c : Arrays.asList(FullyAnnotated.class, InheritedFullyAnnotated.class,
                                 GrandchildInheritedEmptyAnnotatationWithOverride.class )) {
      r = SSLRandomizer.getSSLRandomizerForClass(c);
      assertEquals(c.toString(), 0.42D, r.ssl, 0.0D);
      assertEquals(c.toString(), 0.33D, r.clientAuth, 0.0D);
      assertTrue(c.toString(), r.debug.contains("foo"));
    }

    for (Class c : Arrays.asList(NotAnnotated.class, InheritedNotAnnotated.class)) { 
      r = SSLRandomizer.getSSLRandomizerForClass(c);
      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);
      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);
      assertTrue(c.toString(), r.debug.contains("not specified"));
      conf = r.createSSLTestConfig();
      assertEquals(c.toString(), false, conf.isSSLMode());
      assertEquals(c.toString(), false, conf.isClientAuthMode());
    }

    for (Class c : Arrays.asList(Suppressed.class,
                                 InheritedSuppressed.class,
                                 InheritedAnnotationButSuppressed.class,
                                 InheritedSuppressedWithIgnoredAnnotation.class)) {
      r = SSLRandomizer.getSSLRandomizerForClass(Suppressed.class);
      assertEquals(c.toString(), 0.0D, r.ssl, 0.0D);
      assertEquals(c.toString(), 0.0D, r.clientAuth, 0.0D);
      assertTrue(c.toString(), r.debug.contains("SuppressSSL"));
      assertTrue(c.toString(), r.debug.contains("fakeBugUrl"));
      conf = r.createSSLTestConfig();
      assertEquals(c.toString(), false, conf.isSSLMode());
      assertEquals(c.toString(), false, conf.isClientAuthMode());
    }

    for (Class c : Arrays.asList(EmptyAnnotated.class, InheritedEmptyAnnotated.class)) {
      r = SSLRandomizer.getSSLRandomizerForClass(c);
      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);
      assertEquals(c.toString(), RandomizeSSL.DEFAULT_ODDS, r.clientAuth, 0.0D);
    }

    for (Class c : Arrays.asList(SimplyAnnotated.class, InheritedEmptyAnnotatationWithOverride.class)) {
      r = SSLRandomizer.getSSLRandomizerForClass(c);
      assertEquals(c.toString(), 0.5D, r.ssl, 0.0D);
      assertEquals(c.toString(), 0.5D, r.clientAuth, 0.0D);
    }
    
    r = SSLRandomizer.getSSLRandomizerForClass(MinAnnotated.class);
    assertEquals(0.0D, r.ssl, 0.0D);
    assertEquals(0.0D, r.clientAuth, 0.0D);
    conf = r.createSSLTestConfig();
    assertEquals(false, conf.isSSLMode());
    assertEquals(false, conf.isClientAuthMode());
    
    r = SSLRandomizer.getSSLRandomizerForClass(MaxAnnotated.class);
    assertEquals(1.0D, r.ssl, 0.0D);
    assertEquals(1.0D, r.clientAuth, 0.0D);
    conf = r.createSSLTestConfig();
    assertEquals(true, conf.isSSLMode());
    assertEquals(true, conf.isClientAuthMode());

    r = SSLRandomizer.getSSLRandomizerForClass(SSlButNoClientAuthAnnotated.class);
    assertEquals(0.42D, r.ssl, 0.0D);
    assertEquals(0.42D, r.clientAuth, 0.0D);

    r = SSLRandomizer.getSSLRandomizerForClass(ClientAuthButNoSSLAnnotated.class);
    assertEquals(RandomizeSSL.DEFAULT_ODDS, r.ssl, 0.0D);
    assertEquals(0.42D, r.clientAuth, 0.0D);

    for (Class c : Arrays.asList(SSLOutOfRangeAnnotated.class,
                                 ClientAuthOutOfRangeAnnotated.class,
                                 InheritedOutOfRangeAnnotated.class)) {
      expectThrows(IllegalArgumentException.class, () -> {
          Object trash = SSLRandomizer.getSSLRandomizerForClass(c);
        });
    }
    
  }

