  // It's OK not to check the return here since the subsequent tests will fail.
  void issueCommands() throws IOException, SolrServerException, KeeperException, InterruptedException {

    // Find a replica to make the preferredLeader. NOTE: may be one that's _already_ leader!
    expected.clear();
    for (Map.Entry<String, List<Replica>> ent : initial.entrySet()) {
      List<Replica> replicas = ent.getValue();
      Replica rep = replicas.get(Math.abs(random().nextInt()) % replicas.size());
      expected.put(ent.getKey(), rep);
      issuePreferred(ent.getKey(), rep);
    }

    if (waitForAllPreferreds() == false) {
      fail("Waited for timeout for preferredLeader assignments to be made and they werent.");
    }
    //fillExpectedWithCurrent();
    // Now rebalance the leaders
    ModifiableSolrParams params = new ModifiableSolrParams();
    params.set("action", CollectionParams.CollectionAction.REBALANCELEADERS.toString());

    // Insure we get error returns when omitting required parameters
    params.set("collection", COLLECTION_NAME);
    params.set("maxAtOnce", "10");
    SolrRequest request = new QueryRequest(params);
    request.setPath("/admin/collections");
    cloudClient.request(request);
  }

