  @Test
  @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028")
  public void testCollectionCreateSearchDelete() throws Exception {
    final CloudSolrClient client = cluster.getSolrClient();
    final String collectionName = "testcollection";

    assertNotNull(cluster.getZkServer());
    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();
    assertEquals(nodeCount, jettys.size());
    for (JettySolrRunner jetty : jettys) {
      assertTrue(jetty.isRunning());
    }

    // shut down a server
    JettySolrRunner stoppedServer = cluster.stopJettySolrRunner(0);
    assertTrue(stoppedServer.isStopped());
    assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());

    // create a server
    JettySolrRunner startedServer = cluster.startJettySolrRunner();
    assertTrue(startedServer.isRunning());
    assertEquals(nodeCount, cluster.getJettySolrRunners().size());

    // create collection
    createCollection(collectionName, null);

    // modify/query collection
    new UpdateRequest().add("id", "1").commit(client, collectionName);
    QueryResponse rsp = client.query(collectionName, new SolrQuery("*:*"));
    assertEquals(1, rsp.getResults().getNumFound());

    // remove a server not hosting any replicas
    ZkStateReader zkStateReader = client.getZkStateReader();
    zkStateReader.forceUpdateCollection(collectionName);
    ClusterState clusterState = zkStateReader.getClusterState();
    Map<String,JettySolrRunner> jettyMap = new HashMap<>();
    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {
      String key = jetty.getBaseUrl().toString().substring((jetty.getBaseUrl().getProtocol() + "://").length());
      jettyMap.put(key, jetty);
    }
    Collection<Slice> slices = clusterState.getCollection(collectionName).getSlices();
    // track the servers not host replicas
    for (Slice slice : slices) {
      jettyMap.remove(slice.getLeader().getNodeName().replace("_solr", "/solr"));
      for (Replica replica : slice.getReplicas()) {
        jettyMap.remove(replica.getNodeName().replace("_solr", "/solr"));
      }
    }
    assertTrue("Expected to find a node without a replica", jettyMap.size() > 0);
    JettySolrRunner jettyToStop = jettyMap.entrySet().iterator().next().getValue();
    jettys = cluster.getJettySolrRunners();
    for (int i = 0; i < jettys.size(); ++i) {
      if (jettys.get(i).equals(jettyToStop)) {
        cluster.stopJettySolrRunner(i);
        assertEquals(nodeCount - 1, cluster.getJettySolrRunners().size());
      }
    }

    // re-create a server (to restore original nodeCount count)
    startedServer = cluster.startJettySolrRunner(jettyToStop);
    assertTrue(startedServer.isRunning());
    assertEquals(nodeCount, cluster.getJettySolrRunners().size());

    CollectionAdminRequest.deleteCollection(collectionName).process(client);
    AbstractDistribZkTestBase.waitForCollectionToDisappear
        (collectionName, client.getZkStateReader(), true, true, 330);

    // create it again
    createCollection(collectionName, null);

    // check that there's no left-over state
    assertEquals(0, client.query(collectionName, new SolrQuery("*:*")).getResults().getNumFound());

    // modify/query collection
    new UpdateRequest().add("id", "1").commit(client, collectionName);
    assertEquals(1, client.query(collectionName, new SolrQuery("*:*")).getResults().getNumFound());
  }

