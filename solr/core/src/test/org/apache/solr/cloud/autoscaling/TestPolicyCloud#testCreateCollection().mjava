  public void testCreateCollection() throws Exception  {
    String commands =  "{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }"; // disallow replica placement anywhere
    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));
    String collectionName = "testCreateCollection";
    HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class,
        () -> CollectionAdminRequest.createCollection(collectionName, "conf", 2, 1).process(cluster.getSolrClient()));

    assertTrue(exp.getMessage().contains("No node can satisfy the rules"));
    assertTrue(exp.getMessage().contains("AutoScaling.error.diagnostics"));
    CollectionAdminRequest.deleteCollection(collectionName).processAndWait(cluster.getSolrClient(), 60);

    commands =  "{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }";
    cluster.getSolrClient().request(createAutoScalingRequest(SolrRequest.METHOD.POST, commands));
    CollectionAdminRequest.createCollection(collectionName, "conf", 2, 1).process(cluster.getSolrClient());
    SolrClientCloudManager scm = new SolrClientCloudManager(new ZkDistributedQueueFactory(cluster.getSolrClient().getZkStateReader().getZkClient()), cluster.getSolrClient());
    Policy.Session session = scm.getDistribStateManager().getAutoScalingConfig().getPolicy().createSession(scm);
    System.out.println(Utils.writeJson(PolicyHelper.getDiagnostics(session), new StringWriter(), true).toString());

  }

