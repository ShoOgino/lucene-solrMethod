  public void testCreateCollection() throws Exception  {
    String commands =  "{ set-cluster-policy: [ {cores: '0', node: '#ANY'} ] }"; // disallow replica placement anywhere
    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));
    String collectionName = "testCreateCollection";
    HttpSolrClient.RemoteSolrException exp = expectThrows(HttpSolrClient.RemoteSolrException.class,
        () -> CollectionAdminRequest.createCollection(collectionName, "conf", 2, 1).process(cluster.getSolrClient()));

    assertTrue(exp.getMessage().contains("No node can satisfy the rules"));
    assertTrue(exp.getMessage().contains("AutoScaling.error.diagnostics"));

    // wait for a while until we don't see the collection
    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, new TimeSource.NanoTimeSource());
    boolean removed = false;
    while (! timeout.hasTimedOut()) {
      timeout.sleep(100);
      removed = !cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(collectionName);
      if (removed) {
        timeout.sleep(500); // just a bit of time so it's more likely other
        // readers see on return
        break;
      }
    }
    if (!removed) {
      fail("Collection should have been deleted from cluster state but still exists: " + collectionName);
    }

    commands =  "{ set-cluster-policy: [ {cores: '<2', node: '#ANY'} ] }";
    cluster.getSolrClient().request(AutoScalingRequest.create(SolrRequest.METHOD.POST, commands));
    CollectionAdminRequest.createCollection(collectionName, "conf", 2, 1).process(cluster.getSolrClient());
    
    cluster.waitForActiveCollection(collectionName, 2, 2);
    
  }

