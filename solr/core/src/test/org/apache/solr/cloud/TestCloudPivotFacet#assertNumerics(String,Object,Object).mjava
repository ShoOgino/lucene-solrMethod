  /**
   * Given two objects returned as stat values asserts that they are they are either both <code>null</code> 
   * or all of the following are true:
   * <ul>
   *  <li>They have the exact same class</li>
   *  <li>They are both Numbers or they are both Dates -- in the later case, their millisecond's 
   *      since epoch are used for all subsequent comparisons
   *  </li>
   *  <li>Either:
   *   <ul>
   *    <li>They are Integer or Long objects with the exact same <code>longValue()</code></li>
   *    <li>They are Float or Double objects and their <code>doubleValue()</code>s
   *        are equally-ish with a "small" epsilon (relative to the scale of the expected value)
   *    </li>
   *   </ul>
   *  </li>
   * <ul>
   *
   * @see Date#getTime
   * @see Number#doubleValue
   * @see Number#longValue
   * @see #assertEquals(String,double,double,double)
   */
  private void assertNumerics(String msg, Object expected, Object actual) {
    if (null == expected || null == actual) {
      assertEquals(msg, expected, actual);
      return;
    }
    
    assertEquals(msg + " ... values do not have the same type: " + expected + " vs " + actual,
                 expected.getClass(), actual.getClass());

    if (expected instanceof Date) {
      expected = ((Date)expected).getTime();
      actual = ((Date)actual).getTime();
      msg = msg + " (w/dates converted to ms)";
    }
    
    assertTrue(msg + " ... expected is not a Number: " + 
               expected + "=>" + expected.getClass(),
               expected instanceof Number);
        
    if (expected instanceof Long || expected instanceof Integer) {
      assertEquals(msg, ((Number)expected).longValue(), ((Number)actual).longValue());
      
    } else if (expected instanceof Float || expected instanceof Double) {
      // compute an epsilon relative to the size of the expected value
      double expect = ((Number)expected).doubleValue();
      double epsilon = expect * 0.1E-7D;

      assertEquals(msg, expect, ((Number)actual).doubleValue(), epsilon);
      
    } else {
      fail(msg + " ... where did this come from: " + expected.getClass());
    }
  }

