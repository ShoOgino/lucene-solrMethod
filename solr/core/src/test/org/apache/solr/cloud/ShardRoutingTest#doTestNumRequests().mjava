  public void doTestNumRequests() throws Exception {
    log.info("### STARTING doTestNumRequests");

    List<CloudJettyRunner> runners = shardToJetty.get(bucket1);
    CloudJettyRunner leader = shardToLeaderJetty.get(bucket1);
    CloudJettyRunner replica =  null;
    for (CloudJettyRunner r : runners) {
      if (r != leader) replica = r;
    }

    long nStart = getNumRequests();
    leader.client.solrClient.add( sdoc("id","b!doc1") );
    long nEnd = getNumRequests();
    assertEquals(2, nEnd - nStart);   // one request to leader, which makes another to a replica


    nStart = getNumRequests();
    replica.client.solrClient.add( sdoc("id","b!doc1") );
    nEnd = getNumRequests();
    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.

    nStart = getNumRequests();
    replica.client.solrClient.add( sdoc("id","b!doc1") );
    nEnd = getNumRequests();
    assertEquals(3, nEnd - nStart);   // orig request + replica forwards to leader, which forward back to replica.

    CloudJettyRunner leader2 = shardToLeaderJetty.get(bucket2);


    nStart = getNumRequests();
    replica.client.solrClient.query( params("q","*:*", "shards",bucket1) );
    nEnd = getNumRequests();
    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search

    nStart = getNumRequests();
    replica.client.solrClient.query( params("q","*:*", "shard.keys","b!") );
    nEnd = getNumRequests();
    assertEquals(1, nEnd - nStart);   // short circuit should prevent distrib search

    nStart = getNumRequests();
    leader2.client.solrClient.query( params("q","*:*", "shard.keys","b!") );
    nEnd = getNumRequests();
    assertEquals(3, nEnd - nStart);   // original + 2 phase distrib search.  we could improve this!

    nStart = getNumRequests();
    leader2.client.solrClient.query( params("q","*:*") );
    nEnd = getNumRequests();
    assertEquals(9, nEnd - nStart);   // original + 2 phase distrib search * 4 shards.

    nStart = getNumRequests();
    leader2.client.solrClient.query( params("q","*:*", "shard.keys","b!,d!") );
    nEnd = getNumRequests();
    assertEquals(5, nEnd - nStart);   // original + 2 phase distrib search * 2 shards.

    nStart = getNumRequests();
    leader2.client.solrClient.query( params("q","*:*", "shard.keys","b!,f1!f2!") );
    nEnd = getNumRequests();
    assertEquals(5, nEnd - nStart);
  }

