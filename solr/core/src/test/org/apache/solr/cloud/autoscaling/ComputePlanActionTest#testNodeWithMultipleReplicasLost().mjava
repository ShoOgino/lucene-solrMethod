  // commented out on: 24-Dec-2018   @LuceneTestCase.BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 2-Aug-2018
  public void testNodeWithMultipleReplicasLost() throws Exception {
    // start 3 more nodes
    cluster.startJettySolrRunner();
    cluster.startJettySolrRunner();
    cluster.startJettySolrRunner();

    cluster.waitForAllNodes(30);

    CloudSolrClient solrClient = cluster.getSolrClient();
    String setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : 'node_lost_trigger'," +
        "'event' : 'nodeLost'," +
        "'waitFor' : '1s'," +
        "'enabled' : true," +
        "'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'}," +
        "{'name':'test','class':'" + ComputePlanActionTest.AssertingTriggerAction.class.getName() + "'}]" +
        "}}";
    @SuppressWarnings({"rawtypes"})
    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection("testNodeWithMultipleReplicasLost",
        "conf", 2, 3);
    create.process(solrClient);
    
    cluster.waitForActiveCollection("testNodeWithMultipleReplicasLost", 2, 6);

    waitForState("Timed out waiting for replicas of new collection to be active",
        "testNodeWithMultipleReplicasLost", clusterShape(2, 6));

    ClusterState clusterState = cluster.getSolrClient().getZkStateReader().getClusterState();
    DocCollection docCollection = clusterState.getCollection("testNodeWithMultipleReplicasLost");

    // lets find a node with at least 2 replicas
    String stoppedNodeName = null;
    List<Replica> replicasToBeMoved = null;
    for (int i = 0; i < cluster.getJettySolrRunners().size(); i++) {
      JettySolrRunner jettySolrRunner = cluster.getJettySolrRunners().get(i);
      List<Replica> replicas = docCollection.getReplicas(jettySolrRunner.getNodeName());
      if (replicas != null && replicas.size() == 2) {
        stoppedNodeName = jettySolrRunner.getNodeName();
        replicasToBeMoved = replicas;
        JettySolrRunner j = cluster.stopJettySolrRunner(i);
        cluster.waitForJettyToStop(j);
        break;
      }
    }
    assertNotNull(stoppedNodeName);

    assertTrue("Trigger was not fired even after 5 seconds", triggerFiredLatch.await(15, TimeUnit.SECONDS));
    assertTrue(fired.get());

    TriggerEvent triggerEvent = eventRef.get();
    assertNotNull(triggerEvent);
    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());
    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));

    @SuppressWarnings({"rawtypes"})
    Map context = actionContextPropsRef.get();
    assertNotNull(context);
    @SuppressWarnings({"unchecked", "rawtypes"})
    List<SolrRequest> operations = (List<SolrRequest>) context.get("operations");
    assertNotNull("The operations computed by ComputePlanAction should not be null "+ getNodeStateProviderState() + actionContextPropsRef.get(), operations);
    if (log.isInfoEnabled()) {
      operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));
    }
    assertEquals("ComputePlanAction should have computed exactly 2 operation", 2, operations.size());

    for (@SuppressWarnings({"rawtypes"})SolrRequest solrRequest : operations) {
      SolrParams params = solrRequest.getParams();
      assertEquals("Expected MOVEREPLICA action after adding node", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get("action")));
      String moved = params.get("replica");
      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));
    }
  }

