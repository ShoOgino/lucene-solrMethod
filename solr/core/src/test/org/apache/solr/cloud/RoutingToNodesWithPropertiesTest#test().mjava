  @Test
  public void test() throws Exception {
    final int NUM_TRY = 10;
    CollectionAdminRequest
        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP +":"+PROP_NAME)
        .process(cluster.getSolrClient());
    {
      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      timeOut.waitFor("Timeout waiting for sysprops are cached in all nodes", () -> {
        int total = 0;
        for (JettySolrRunner runner : cluster.getJettySolrRunners()) {
          total += runner.getCoreContainer().getZkController().getSysPropsCacher().getCacheSize();
        }
        return total == cluster.getJettySolrRunners().size() * cluster.getJettySolrRunners().size();
      });
    }

    for (int i = 0; i <  NUM_TRY; i++) {
      SolrQuery qRequest = new SolrQuery("*:*");
      ModifiableSolrParams qParams = new ModifiableSolrParams();
      qParams.add(ShardParams.SHARDS_INFO, "true");
      qRequest.add(qParams);
      QueryResponse qResponse = cluster.getSolrClient().query(COLLECTION, qRequest);

      Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);
      assertNotNull("Unable to obtain "+ShardParams.SHARDS_INFO, shardsInfo);
      SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;
      String firstReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(0)).get("shardAddress").toString();
      String secondReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(1)).get("shardAddress").toString();
      boolean firstReplicaInZone1 = false;
      boolean secondReplicaInZone1 = false;
      for (String zone1Node : ZONE1_NODES) {
        zone1Node = zone1Node.replace("_solr", "");
        firstReplicaInZone1 = firstReplicaInZone1 || firstReplicaAddr.contains(zone1Node);
        secondReplicaInZone1 = secondReplicaInZone1 || secondReplicaAddr.contains(zone1Node);
      }

      assertEquals(firstReplicaInZone1, secondReplicaInZone1);
    }

    // intense asserting using TrackingShardHandlerFactory
    assertRoutingToSameZone();

    // Cachers should be stop running
    CollectionAdminRequest
        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE+":PULL")
        .process(cluster.getSolrClient());
    {
      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      timeOut.waitFor("Timeout waiting for sysPropsCache stop", () -> {
        int numNodeStillRunningCache = 0;
        for (JettySolrRunner runner: cluster.getJettySolrRunners()) {
          if (runner.getCoreContainer().getZkController().getSysPropsCacher().isRunning()) {
            numNodeStillRunningCache++;
          }
        }
        return numNodeStillRunningCache == 0;
      });
    }

    // Testing disable default shard preferences
    CollectionAdminRequest
        .setClusterProperty(ZkStateReader.DEFAULT_SHARD_PREFERENCES, null)
        .process(cluster.getSolrClient());
    {
      TimeOut timeOut = new TimeOut(20, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      timeOut.waitFor("Timeout waiting cluster properties get updated", () -> {
        int numNodeGetUpdatedPref = 0;
        int numNodeStillRunningCache = 0;
        for (JettySolrRunner runner: cluster.getJettySolrRunners()) {
          if (runner.getCoreContainer().getZkController()
              .getZkStateReader().getClusterProperties().containsKey(ZkStateReader.DEFAULT_SHARD_PREFERENCES)) {
            numNodeGetUpdatedPref++;
          }
          if (runner.getCoreContainer().getZkController().getSysPropsCacher().isRunning()) {
            numNodeStillRunningCache++;
          }
        }
        return numNodeGetUpdatedPref == 0 && numNodeStillRunningCache == 0;
      });
    }

    int totalTimeSameZoneGetHitted = 0;
    for (int i = 0; i < NUM_TRY; i++) {
      SolrQuery qRequest = new SolrQuery("*:*");
      ModifiableSolrParams qParams = new ModifiableSolrParams();
      qParams.add(ShardParams.SHARDS_INFO, "true");
      qRequest.add(qParams);
      QueryResponse qResponse = cluster.getSolrClient().query(COLLECTION, qRequest);

      Object shardsInfo = qResponse.getResponse().get(ShardParams.SHARDS_INFO);
      assertNotNull("Unable to obtain "+ShardParams.SHARDS_INFO, shardsInfo);
      SimpleOrderedMap<?> shardsInfoMap = (SimpleOrderedMap<?>)shardsInfo;
      String firstReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(0)).get("shardAddress").toString();
      String secondReplicaAddr = ((SimpleOrderedMap) shardsInfoMap.getVal(1)).get("shardAddress").toString();
      boolean firstReplicaInZone1 = false;
      boolean secondReplicaInZone1 = false;
      for (String zone1Node : ZONE1_NODES) {
        zone1Node = zone1Node.replace("_solr", "");
        firstReplicaInZone1 = firstReplicaInZone1 || firstReplicaAddr.contains(zone1Node);
        secondReplicaInZone1 = secondReplicaInZone1 || secondReplicaAddr.contains(zone1Node);
      }
      totalTimeSameZoneGetHitted += firstReplicaInZone1 == secondReplicaInZone1 ? 1 : 0;
    }
    assertTrue("Hitting same zone after " + NUM_TRY + " queries",
        totalTimeSameZoneGetHitted < NUM_TRY);

  }

