  /**
   * Test HttpSolrServer's delegation token support
   */
  @Test
  public void testDelegationTokenSolrClient() throws Exception {
    // Get token
    String token = getDelegationToken(null, "bar", solrClientPrimary);
    assertNotNull(token);

    @SuppressWarnings({"rawtypes"})
    SolrRequest request = getAdminRequest(new ModifiableSolrParams());

    // test without token
    final HttpSolrClient ssWoToken =
      new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())
          .withResponseParser(solrClientPrimary.getParser())
          .build();
    try {
      doSolrRequest(ssWoToken, request, ErrorCode.UNAUTHORIZED.code);
    } finally {
      ssWoToken.close();
    }

    final HttpSolrClient ssWToken = new HttpSolrClient.Builder(solrClientPrimary.getBaseURL().toString())
        .withKerberosDelegationToken(token)
        .withResponseParser(solrClientPrimary.getParser())
        .build();
    try {
      // test with token via property
      doSolrRequest(ssWToken, request, HttpStatus.SC_OK);

      // test with param -- should throw an exception
      ModifiableSolrParams tokenParam = new ModifiableSolrParams();
      tokenParam.set("delegation", "invalidToken");
      expectThrows(IllegalArgumentException.class,
          () -> doSolrRequest(ssWToken, getAdminRequest(tokenParam), ErrorCode.FORBIDDEN.code));
    } finally {
      ssWToken.close();
    }
  }

