  public void testSeveralReplicasInLIR() throws Exception {
    String collection = "severalReplicasInLIR";
    CollectionAdminRequest.createCollection(collection, 1, 3)
        .process(cluster.getSolrClient());
    cluster.getSolrClient().add(collection, new SolrInputDocument("id", "1"));
    cluster.getSolrClient().add(collection, new SolrInputDocument("id", "2"));
    cluster.getSolrClient().commit(collection);

    DocCollection docCollection = getCollectionState(collection);
    Map<JettySolrRunner, String> nodeNameToJetty = cluster.getJettySolrRunners().stream()
        .collect(Collectors.toMap(jetty -> jetty, JettySolrRunner::getNodeName));
    ChaosMonkey.stop(cluster.getJettySolrRunners());
    assertTrue("Timeout waiting for all not live",
        ClusterStateUtil.waitForAllReplicasNotLive(cluster.getSolrClient().getZkStateReader(), 45000));

    try (ZkShardTerms zkShardTerms = new ZkShardTerms(collection, "shard1", cluster.getZkClient())) {
      for (Replica replica : docCollection.getReplicas()) {
        zkShardTerms.removeTerm(replica.getName());
      }
    }

    Map<String,Object> stateObj = Utils.makeMap();
    stateObj.put(ZkStateReader.STATE_PROP, "down");
    stateObj.put("createdByNodeName", "test");
    stateObj.put("createdByCoreNodeName", "test");
    byte[] znodeData = Utils.toJSON(stateObj);

    Replica replicaNotInLIR = docCollection.getReplicas().get(random().nextInt(3));
    for (Replica replica : docCollection.getReplicas()) {
      if (replica.getName().equals(replicaNotInLIR.getName())) continue;
      try {
        cluster.getZkClient().makePath("/collections/" + collection + "/leader_initiated_recovery/shard1/" + replica.getName(),
            znodeData, true);
      } catch (KeeperException.NodeExistsException e) {

      }
    }

    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {
      if (nodeNameToJetty.get(jetty).equals(replicaNotInLIR.getNodeName())) continue;
      jetty.start();
    }
    waitForState("Timeout waiting for no leader", collection, (liveNodes, collectionState) -> {
      Replica leader = collectionState.getSlice("shard1").getLeader();
      return leader == null;
    });

    // only 2 replicas join the election and all of them are in LIR state, no one should win the election
    List<String> oldElectionNodes = getElectionNodes(collection, "shard1", cluster.getZkClient());
    TimeOut timeOut = new TimeOut(60, TimeUnit.SECONDS, TimeSource.CURRENT_TIME);
    while (!timeOut.hasTimedOut()) {
      List<String> electionNodes = getElectionNodes(collection, "shard1", cluster.getZkClient());
      electionNodes.retainAll(oldElectionNodes);
      if (electionNodes.isEmpty()) break;
    }
    assertFalse("Timeout waiting for replicas rejoin election", timeOut.hasTimedOut());

    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {
      if (nodeNameToJetty.get(jetty).equals(replicaNotInLIR.getNodeName())) {
        jetty.start();
      }
    }
    waitForState("Timeout waiting for new leader", collection, (liveNodes, collectionState) -> {
      Replica leader = collectionState.getSlice("shard1").getLeader();
      return leader != null;
    });
    waitForState("Timeout waiting for new leader", collection, clusterShape(1, 3));

    assertEquals(2L, cluster.getSolrClient().query(collection, new SolrQuery("*:*")).getResults().getNumFound());
    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());
  }

