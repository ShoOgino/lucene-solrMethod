  public void testSuggestionsWithPayload() throws Exception {
    CloudSolrClient solrClient = cluster.getSolrClient();
    String COLLNAME = "testSuggestionsWithPayload.COLL";
    CollectionAdminResponse adminResponse = CollectionAdminRequest.createCollection(COLLNAME, CONFIGSET_NAME, 1, 2)
        .setMaxShardsPerNode(4)
        .process(solrClient);
    cluster.waitForActiveCollection(COLLNAME, 1, 2);
    DocCollection collection = solrClient.getClusterStateProvider().getCollection(COLLNAME);
    Replica aReplica = collection.getReplicas().get(0);

    String configPayload = "{\n" +
        "  'cluster-policy': [{'replica': 0, 'node': '_NODE'}]\n" +
        "}";
    configPayload = configPayload.replaceAll("_NODE", aReplica.getNodeName());
    @SuppressWarnings({"rawtypes"})
    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, "/suggestions", configPayload);
    NamedList<Object> response = solrClient.request(req);
    assertFalse(((Collection) response.get("suggestions")).isEmpty());
    String replicaName = response._getStr("suggestions[0]/operation/command/move-replica/replica", null);
    boolean[] passed = new boolean[]{false};
    collection.forEachReplica((s, replica) -> {
      if (replica.getName().equals(replicaName) && replica.getNodeName().equals(aReplica.getNodeName())) {
        passed[0] = true;
      }
    });
    assertTrue(passed[0]);

    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, "/suggestions", configPayload, new MapSolrParams(Collections.singletonMap("type", repair.name())));
    response = solrClient.request(req);
    assertTrue(((Collection) response.get("suggestions")).isEmpty());

    CollectionAdminRequest.deleteCollection(COLLNAME)
        .process(cluster.getSolrClient());
  }

