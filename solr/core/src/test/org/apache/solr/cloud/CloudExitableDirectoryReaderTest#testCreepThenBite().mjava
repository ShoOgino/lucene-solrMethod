  @Test 
  @Repeat(iterations=5)
  public void testCreepThenBite() throws Exception {
    int creep=100;
    ModifiableSolrParams params = params("q", "{!cache=false}name:a*");
    SolrParams cases[] = new SolrParams[] {
        params( "sort","query($q,1) asc"),
        params("rows","0", "facet","true", "facet.method", "enum", "facet.field", "name"),
        params("rows","0", "json.facet","{ ids: { type: range, field : num, start : 1, end : 99, gap : 9 }}"),
        params("q", "*:*", "rows","0", "json.facet","{ ids: { type: field, field : num}}"),
        params("q", "*:*", "rows","0", "json.facet","{ ids: { type: field, field : name_dv}}"),
        params("q", "*:*", "rows","0", "json.facet","{ ids: { type: field, field : name_dvs}}")
    }; // add more cases here

    params.add(cases[random().nextInt(cases.length)]);
    for (; ; creep*=1.5) {
      final int boundary = creep;
      try(Trap catchClass = catchCount(boundary)){
        
        params.set("boundary", boundary);
        QueryResponse rsp = client.query(COLLECTION, 
            params);
        assertEquals(""+rsp, rsp.getStatus(), 0);
        assertNo500s(""+rsp);
        if (!isPartial(rsp)) {
          assertFalse(catchClass.hasCaught());
          break;
        }
        assertTrue(catchClass.hasCaught());
      }catch(AssertionError ae) {
        Trap.dumpLastStackTraces(log);
        throw ae;
      }
    }
    int numBites = atLeast(100);
    for(int bite=0; bite<numBites; bite++) {
      int boundary = random().nextInt(creep);
      boolean omitHeader = random().nextBoolean();
      try(Trap catchCount = catchCount(boundary)){
        params.set("omitHeader", "" + omitHeader);
        params.set("boundary", boundary);
        QueryResponse rsp = client.query(COLLECTION, 
            params);
        assertEquals(""+rsp, rsp.getStatus(), 0);
        assertNo500s(""+rsp);
        // without responseHeader, whether the response is partial or not can't be known
        // omitHeader=true used in request to ensure that no NPE exceptions are thrown
        if (omitHeader) {
          continue;
        }
        assertEquals("" + creep + " ticks were successful; trying " + boundary + " yields " + rsp,
            catchCount.hasCaught(), isPartial(rsp));
      }catch(AssertionError ae) {
        Trap.dumpLastStackTraces(log);
        throw ae;
      }
    }
  }

