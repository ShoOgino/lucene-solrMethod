  @Test
  public void testRemoveData() throws Exception {
    assertFalse(stateManager.hasData("/removeData/foo"));
    assertFalse(stateManager.hasData("/removeData/foo/bar"));
    assertFalse(stateManager.hasData("/removeData/baz"));
    assertFalse(stateManager.hasData("/removeData/baz/1/2/3"));
    stateManager.makePath("/removeData/foo/bar");
    stateManager.makePath("/removeData/baz/1/2/3");
    assertTrue(stateManager.hasData("/removeData/foo"));
    assertTrue(stateManager.hasData("/removeData/foo/bar"));
    assertTrue(stateManager.hasData("/removeData/baz/1/2/3"));
    try {
      stateManager.removeData("/removeData/foo", -1);
      fail("should have failed (node has children)");
    } catch (NotEmptyException e) {
      // expected
    }
    stateManager.removeData("/removeData/foo/bar", -1);
    stateManager.removeData("/removeData/foo", -1);
    // test recursive listing and removal
    stateManager.removeRecursively("/removeData/baz/1", false, false);
    assertFalse(stateManager.hasData("/removeData/baz/1/2"));
    assertTrue(stateManager.hasData("/removeData/baz/1"));
    // should silently ignore
    stateManager.removeRecursively("/removeData/baz/1/2", true, true);
    stateManager.removeRecursively("/removeData/baz/1", false, true);
    assertFalse(stateManager.hasData("/removeData/baz/1"));
    try {
      stateManager.removeRecursively("/removeData/baz/1", false, true);
      fail("should throw exception - missing path");
    } catch (NoSuchElementException e) {
      // expected
    }
    stateManager.removeRecursively("/removeData", true, true);
    assertFalse(stateManager.hasData("/removeData"));
  }

