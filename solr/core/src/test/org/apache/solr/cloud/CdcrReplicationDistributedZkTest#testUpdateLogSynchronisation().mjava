  /**
   * Check that the update logs are synchronised between leader and non-leader nodes
   * when CDCR is on and buffer is disabled
   */
  @Test
  @ShardsFixed(num = 4)
  public void testUpdateLogSynchronisation() throws Exception {
    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);
    this.waitForCdcrStateReplication(SOURCE_COLLECTION);

    for (int i = 0; i < 100; i++) {
      // will perform a commit for every document and will create one tlog file per commit
      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));
    }

    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);
    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);

    // wait a bit for the replication to complete
    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);
    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);

    commit(TARGET_COLLECTION);

    // Check that the replication was done properly
    assertNumDocs(100, SOURCE_COLLECTION);
    assertNumDocs(100, TARGET_COLLECTION);

    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)
    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);

    // Disable the buffer - ulog synch should start on non-leader nodes
    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);
    this.waitForCdcrStateReplication(SOURCE_COLLECTION);

    int cnt = 15; // timeout after 15 seconds
    while (cnt > 0) {
      // Index a new document with a commit to trigger update log cleaning
      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));

      // Check the update logs on non-leader nodes, the number of tlog files should decrease
      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);
      if (n < nTlogs) return;

      cnt--;
      Thread.sleep(1000);
    }

    throw new AssertionError("Timeout while trying to assert update logs @ source_collection");
  }

