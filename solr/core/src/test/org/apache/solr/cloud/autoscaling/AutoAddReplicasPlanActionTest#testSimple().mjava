  @Test
  @AwaitsFix(bugUrl="https://issues.apache.org/jira/browse/SOLR-13028")
  public void testSimple() throws Exception {
    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);
    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);
    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);

    String collection1 = "testSimple1";
    String collection2 = "testSimple2";
    CollectionAdminRequest.createCollection(collection1, "conf", 2, 2)
        .setCreateNodeSet(jetty1.getNodeName()+","+jetty2.getNodeName())
        .setAutoAddReplicas(true)
        .setMaxShardsPerNode(2)
        .process(cluster.getSolrClient());
    CollectionAdminRequest.createCollection(collection2, "conf", 1, 2)
        .setCreateNodeSet(jetty2.getNodeName()+","+jetty3.getNodeName())
        .setAutoAddReplicas(false)
        .setMaxShardsPerNode(1)
        .process(cluster.getSolrClient());
    // the number of cores in jetty1 (5) will be larger than jetty3 (1)
    CollectionAdminRequest.createCollection("testSimple3", "conf", 3, 1)
        .setCreateNodeSet(jetty1.getNodeName())
        .setAutoAddReplicas(false)
        .setMaxShardsPerNode(3)
        .process(cluster.getSolrClient());
    
    cluster.waitForActiveCollection(collection1, 2, 4);
    cluster.waitForActiveCollection(collection2, 1, 2);
    cluster.waitForActiveCollection("testSimple3", 3, 3);
    
    // we remove the implicit created trigger, so the replicas won't be moved
    String removeTriggerCommand = "{" +
        "'remove-trigger' : {" +
        "'name' : '.auto_add_replicas'," +
        "'removeListeners': true" +
        "}" +
        "}";
    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, removeTriggerCommand);
    NamedList response = cluster.getSolrClient().request(req);
    assertEquals(response.get("result").toString(), "success");

    JettySolrRunner lostJetty = random().nextBoolean()? jetty1 : jetty2;
    String lostNodeName = lostJetty.getNodeName();
    List<CloudDescriptor> cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()
        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())
        .collect(Collectors.toList());
    
    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();

    lostJetty.stop();
    
    cluster.waitForJettyToStop(lostJetty);

    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName));


    List<SolrRequest> operations = getOperations(jetty3, lostNodeName);
    assertOperations(collection1, operations, lostNodeName, cloudDescriptors,  null);

    lostJetty.start();
    cluster.waitForAllNodes(30);
    
    cluster.waitForActiveCollection(collection1, 2, 4);
    cluster.waitForActiveCollection(collection2, 1, 2);
    cluster.waitForActiveCollection("testSimple3", 3, 3);
    
    assertTrue("Timeout waiting for all live and active", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));
    
    String setClusterPreferencesCommand = "{" +
        "'set-cluster-preferences': [" +
        "{'minimize': 'cores','precision': 0}]" +
        "}";
    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPreferencesCommand);
    
    // you can hit a stale connection from pool when restarting jetty
    try (CloudSolrClient cloudClient = new CloudSolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()),
        Optional.empty())
            .withSocketTimeout(45000).withConnectionTimeout(15000).build()) {
      response = cloudClient.request(req);
    }

    assertEquals(response.get("result").toString(), "success");

    lostJetty = random().nextBoolean()? jetty1 : jetty2;
    String lostNodeName2 = lostJetty.getNodeName();
    cloudDescriptors = lostJetty.getCoreContainer().getCores().stream()
        .map(solrCore -> solrCore.getCoreDescriptor().getCloudDescriptor())
        .collect(Collectors.toList());
    

    
    lostJetty.stop();
   
    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName2));

    try {
      operations = getOperations(jetty3, lostNodeName2);
    } catch (SolrException e) {
      // we might get a stale connection from the pool after jetty restarts
      operations = getOperations(jetty3, lostNodeName2);
    }
    
    assertOperations(collection1, operations, lostNodeName2, cloudDescriptors, jetty3);

    lostJetty.start();
    cluster.waitForAllNodes(30);
    
    cluster.waitForActiveCollection(collection1, 2, 4);
    cluster.waitForActiveCollection(collection2, 1, 2);
    cluster.waitForActiveCollection("testSimple3", 3, 3);
    
    assertTrue("Timeout waiting for all live and active", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));

    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {
      @Override
      public SolrParams getParams() {
        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();
        params.set("collection", collection1);
        params.set("autoAddReplicas", false);
        return params;
      }
    }.process(cluster.getSolrClient());
    lostJetty = jetty1;
    String lostNodeName3 = lostJetty.getNodeName();
    
    lostJetty.stop();
    
    reader.waitForLiveNodes(30, TimeUnit.SECONDS, missingLiveNode(lostNodeName3));
    
    operations = getOperations(jetty3, lostNodeName3);
    assertNull(operations);
  }

