  @Override
  public void doTest() throws Exception {
    waitForThingsToLevelOut(15);

    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();
    DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();
    Slice shard1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);
    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();
    final List<DocRouter.Range> ranges = router.partitionRange(2, shard1Range);
    final int[] docCounts = new int[ranges.size()];
    int numReplicas = shard1.getReplicas().size();

    Thread indexThread = null;
    OverseerRestarter killer = null;
    Thread killerThread = null;
    final SolrServer solrServer = clients.get(0);

    try {
      del("*:*");
      for (int id = 0; id < 100; id++) {
        indexAndUpdateCount(ranges, docCounts, id);
      }
      commit();

      indexThread = new Thread() {
        @Override
        public void run() {
          int max = atLeast(401);
          for (int id = 101; id < max; id++) {
            try {
              indexAndUpdateCount(ranges, docCounts, id);
              Thread.sleep(atLeast(25));
            } catch (Exception e) {
              log.error("Exception while adding doc", e);
            }
          }
        }
      };
      indexThread.start();

      // kill the leader
      CloudJettyRunner leaderJetty = shardToLeaderJetty.get("shard1");
      chaosMonkey.killJetty(leaderJetty);

      Thread.sleep(2000);

      waitForThingsToLevelOut(90);

      Thread.sleep(1000);
      checkShardConsistency(false, true);

      CloudJettyRunner deadJetty = leaderJetty;

      // TODO: Check total docs ?
      // long cloudClientDocs = cloudClient.query(new
      // SolrQuery("*:*")).getResults().getNumFound();

      // Wait until new leader is elected
      while (deadJetty == leaderJetty) {
        updateMappingsFromZk(this.jettys, this.clients);
        leaderJetty = shardToLeaderJetty.get("shard1");
      }

      // bring back dead node
      ChaosMonkey.start(deadJetty.jetty); // he is not the leader anymore

      waitTillRecovered();

      // Kill the overseer
      // TODO: Actually kill the Overseer instance
      killer = new OverseerRestarter(zkServer.getZkAddress());
      killerThread = new Thread(killer);
      killerThread.start();
      killCounter.incrementAndGet();

      splitShard(SHARD1);

      log.info("Layout after split: \n");
      printLayout();

      // distributed commit on all shards
    } finally {
      if (indexThread != null)
        indexThread.join();
      if (solrServer != null)
        solrServer.commit();
      if (killer != null) {
        killer.run = false;
        if (killerThread != null) {
          killerThread.join();
        }
      }
    }

    checkDocCountsAndShardStates(docCounts, numReplicas);

    // todo - can't call waitForThingsToLevelOut because it looks for
    // jettys of all shards
    // and the new sub-shards don't have any.
    waitForRecoveriesToFinish(true);
    // waitForThingsToLevelOut(15);
  }

