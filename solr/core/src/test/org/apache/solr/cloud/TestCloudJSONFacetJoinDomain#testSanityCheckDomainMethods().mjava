  public void testSanityCheckDomainMethods() throws Exception {
    { 
      final JoinDomain empty = new JoinDomain(null, null, null);
      assertEquals(null, empty.toJSONFacetParamValue());
      final SolrParams out = empty.applyDomainToQuery("safe_key", params("q","qqq"));
      assertNotNull(out);
      assertEquals(null, out.get("safe_key"));
      assertEquals("qqq", out.get("q"));
    }
    {
      final JoinDomain join = new JoinDomain("xxx", "yyy", null);
      assertEquals("domain:{join:{from:xxx,to:yyy}}", join.toJSONFacetParamValue().toString());
      final SolrParams out = join.applyDomainToQuery("safe_key", params("q","qqq"));
      assertNotNull(out);
      assertEquals("qqq", out.get("safe_key"));
      assertEquals("{!join from=xxx to=yyy v=$safe_key}", out.get("q"));
      
    }
    {
      final JoinDomain filter = new JoinDomain(null, null, "zzz");
      assertEquals("domain:{filter:'zzz'}", filter.toJSONFacetParamValue().toString());
      final SolrParams out = filter.applyDomainToQuery("safe_key", params("q","qqq"));
      assertNotNull(out);
      assertEquals(null, out.get("safe_key"));
      assertEquals("zzz AND qqq", out.get("q"));
    }
    {
      final JoinDomain both = new JoinDomain("xxx", "yyy", "zzz");
      assertEquals("domain:{join:{from:xxx,to:yyy},filter:'zzz'}", both.toJSONFacetParamValue().toString());
      final SolrParams out = both.applyDomainToQuery("safe_key", params("q","qqq"));
      assertNotNull(out);
      assertEquals("qqq", out.get("safe_key"));
      assertEquals("zzz AND {!join from=xxx to=yyy v=$safe_key}", out.get("q"));
    }
  }

