  // check the checkpoint API
  @Test
  @ShardsFixed(num = 2)
  public void testCheckpointActions() throws Exception {
    // initial request on an empty index, must return -1
    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);
    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));

    index(SOURCE_COLLECTION, getDoc(id, "a")); // shard 2

    // only one document indexed in shard 2, the checkpoint must be still -1
    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);
    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));

    index(SOURCE_COLLECTION, getDoc(id, "b")); // shard 1

    // a second document indexed in shard 1, the checkpoint must come from shard 2
    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);
    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);
    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);
    assertEquals(expected, checkpoint1);

    index(SOURCE_COLLECTION, getDoc(id, "c")); // shard 1

    // a third document indexed in shard 1, the checkpoint must still come from shard 2
    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);
    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));

    index(SOURCE_COLLECTION, getDoc(id, "d")); // shard 2

    // a fourth document indexed in shard 2, the checkpoint must come from shard 1
    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);
    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);
    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);
    assertEquals(expected, checkpoint2);

    // send a delete by query
    deleteByQuery(SOURCE_COLLECTION, "*:*");

    // all the checkpoints must come from the DBQ
    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);
    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);
    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form
    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);
    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form
    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);
    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form

    // replication never started, lastProcessedVersion should be -1 for both shards
    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);
    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);
    assertEquals(-1l, lastVersion);

    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);
    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);
    assertEquals(-1l, lastVersion);
  }

