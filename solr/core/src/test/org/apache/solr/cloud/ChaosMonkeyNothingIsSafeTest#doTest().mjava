  @Override
  public void doTest() throws Exception {
    boolean testsSuccesful = false;
    try {
      handle.clear();
      handle.put("QTime", SKIPVAL);
      handle.put("timestamp", SKIPVAL);
      
      // we cannot do delete by query
      // as it's not supported for recovery
      // del("*:*");
      
      List<StopableThread> threads = new ArrayList<StopableThread>();
      int threadCount = 1;
      int i = 0;
      for (i = 0; i < threadCount; i++) {
        StopableIndexingThread indexThread = new StopableIndexingThread(
            i * 50000, true);
        threads.add(indexThread);
        indexThread.start();
      }
      
      threadCount = 1;
      i = 0;
      for (i = 0; i < threadCount; i++) {
        StopableSearchThread searchThread = new StopableSearchThread();
        threads.add(searchThread);
        searchThread.start();
      }
      
      // TODO: only do this randomly - if we don't do it, compare against control below
      FullThrottleStopableIndexingThread ftIndexThread = new FullThrottleStopableIndexingThread(
          clients, i * 50000, true);
      threads.add(ftIndexThread);
      ftIndexThread.start();
      
      chaosMonkey.startTheMonkey(true, 1500);
      int runLength = atLeast(BASE_RUN_LENGTH);
      try {
        Thread.sleep(runLength);
      } finally {
        chaosMonkey.stopTheMonkey();
      }
      
      for (StopableThread indexThread : threads) {
        indexThread.safeStop();
      }
      
      // wait for stop...
      for (StopableThread indexThread : threads) {
        indexThread.join();
      }
      
      // fails will happen...
      // for (StopableIndexingThread indexThread : threads) {
      // assertEquals(0, indexThread.getFails());
      // }
      
      // try and wait for any replications and what not to finish...
      
      Thread.sleep(2000);
      
      // wait until there are no recoveries...
      waitForThingsToLevelOut(Integer.MAX_VALUE);//Math.round((runLength / 1000.0f / 3.0f)));
      
      // make sure we again have leaders for each shard
      for (int j = 1; j < sliceCount; j++) {
        zkStateReader.getLeaderProps(DEFAULT_COLLECTION, "shard" + j, 10000);
      }
      
      commit();
      
      // TODO: assert we didnt kill everyone
      
      zkStateReader.updateClusterState(true);
      assertTrue(zkStateReader.getClusterState().getLiveNodes().size() > 0);
      
      // we dont't current check vs control because the full throttle thread can
      // have request fails
      checkShardConsistency(false, true);
      
      // ensure we have added more than 0 docs
      long cloudClientDocs = cloudClient.query(new SolrQuery("*:*"))
          .getResults().getNumFound();
      
      assertTrue(cloudClientDocs > 0);
      
      if (VERBOSE) System.out.println("control docs:"
          + controlClient.query(new SolrQuery("*:*")).getResults()
              .getNumFound() + "\n\n");
      testsSuccesful = true;
    } finally {
      if (!testsSuccesful) {
        printLayout();
      }
    }
  }

