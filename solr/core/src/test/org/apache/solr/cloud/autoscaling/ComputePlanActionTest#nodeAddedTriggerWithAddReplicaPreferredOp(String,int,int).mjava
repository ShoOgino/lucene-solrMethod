  private void nodeAddedTriggerWithAddReplicaPreferredOp(String collectionNamePrefix, int numShards, int numCollections) throws Exception {
    CloudSolrClient solrClient = cluster.getSolrClient();
    String setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : 'node_added_trigger'," +
        "'event' : 'nodeAdded'," +
        "'waitFor' : '1s'," +
        "'enabled' : true," +
        "'" + AutoScalingParams.PREFERRED_OP + "':'addreplica'," +
        "'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'}," +
        "{'name':'test','class':'" + AssertingTriggerAction.class.getName() + "'}]" +
        "}}";
    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    // the default policy limits 1 replica per node, we need more right now
    String setClusterPolicyCommand = "{" +
        " 'set-cluster-policy': [" +
        "      {'cores':'<" + (1 + numCollections * numShards) + "', 'node':'#ANY'}," +
        "      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'}," +
        "      {'nodeRole':'overseer', 'replica':0}" +
        "    ]" +
        "}";
    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");


    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionNamePrefix + "_0",
        "conf", numShards, 1);
    create.process(solrClient);

    waitForState("Timed out waiting for replicas of new collection to be active",
        collectionNamePrefix + "_0", (liveNodes, collectionState) ->
            collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));

    JettySolrRunner newNode = cluster.startJettySolrRunner();
    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));
    assertTrue(fired.get());
    Map actionContext = actionContextPropsRef.get();
    List operations = (List) actionContext.get("operations");
    assertNotNull(operations);
    assertEquals(numShards, operations.size());
    Set<String> affectedShards = new HashSet<>(2);
    for (Object operation : operations) {
      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);
      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;
      assertEquals(newNode.getNodeName(), addReplica.getNode());
      assertEquals(collectionNamePrefix + "_0", addReplica.getCollection());
      affectedShards.add(addReplica.getShard());
    }
    assertEquals(numShards, affectedShards.size());

    for (int i = 1; i < numCollections; i++) {
      create = CollectionAdminRequest.createCollection(collectionNamePrefix + "_" + i,
          "conf", numShards, 2);
      create.process(solrClient);

      waitForState("Timed out waiting for replicas of new collection to be active",
          collectionNamePrefix + "_" + i, (liveNodes, collectionState) ->
              collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));
    }

    reset();

    newNode = cluster.startJettySolrRunner();
    assertTrue(triggerFiredLatch.await(30, TimeUnit.SECONDS));
    assertTrue(fired.get());
    actionContext = actionContextPropsRef.get();
    operations = (List) actionContext.get("operations");
    assertNotNull(operations);
    assertEquals(numCollections * numShards, operations.size());
    Set<String> affectedCollections = new HashSet<>(numCollections);
    affectedShards = new HashSet<>(numShards);
    Set<Pair<String, String>> affectedCollShards = new HashSet<>(numCollections * numShards);
    for (Object operation : operations) {
      assertTrue(operation instanceof CollectionAdminRequest.AddReplica);
      CollectionAdminRequest.AddReplica addReplica = (CollectionAdminRequest.AddReplica) operation;
      assertEquals(newNode.getNodeName(), addReplica.getNode());
      affectedCollections.add(addReplica.getCollection());
      affectedShards.add(addReplica.getShard());
      affectedCollShards.add(new Pair<>(addReplica.getCollection(), addReplica.getShard()));
    }
    assertEquals(numCollections, affectedCollections.size());
    assertEquals(numShards, affectedShards.size());
    assertEquals(numCollections * numShards, affectedCollShards.size());
  }

