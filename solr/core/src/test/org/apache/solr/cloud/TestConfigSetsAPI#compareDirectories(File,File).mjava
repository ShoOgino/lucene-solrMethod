  private static void compareDirectories(File userDefault, File testDefault) throws IOException {
    assertTrue("Test _default doesn't exist: " + testDefault.getAbsolutePath(), testDefault.exists());
    assertTrue("Test _default not a directory: " + testDefault.getAbsolutePath(),testDefault.isDirectory());
    assertTrue("User _default doesn't exist: " + userDefault.getAbsolutePath(), userDefault.exists());
    assertTrue("User _default not a directory: " + userDefault.getAbsolutePath(),userDefault.isDirectory());

    Files.walkFileTree(userDefault.toPath(), new SimpleFileVisitor<Path>() {
      @Override
      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
        FileVisitResult result = super.preVisitDirectory(dir, attrs);
        Path relativePath = userDefault.toPath().relativize(dir);
        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();
        assertEquals("Mismatch in files", Arrays.toString(dir.toFile().list()), Arrays.toString(testDefaultFile.list()));
        return result;
      }
      @Override
      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
        FileVisitResult result = super.visitFile(file, attrs);
        Path relativePath = userDefault.toPath().relativize(file);
        File testDefaultFile = testDefault.toPath().resolve(relativePath).toFile();
        String userDefaultContents = FileUtils.readFileToString(file.toFile(), "UTF-8");
        String testDefaultContents = FileUtils.readFileToString(testDefaultFile, "UTF-8");
        assertEquals(testDefaultFile+" contents doesn't match expected ("+file+")", userDefaultContents, testDefaultContents);                    
        return result;
      }
    });
  }

