    /**
     * recursively generates the <code>json.facet</code> param value to use for testing this facet
     */
    private CharSequence toJSONFacetParamValue() {
      int limit = random().nextInt(FACET_LIMIT*2);
      String limitStr = ", limit:" + limit;
      if (limit >= FACET_LIMIT && random().nextBoolean()) {
        limitStr = ", limit:-1"; // unlimited
      } else if (limit == 10 && random().nextBoolean()) {
        limitStr=""; // don't specify limit since it's the default
      }

      int overrequest = -1;
      switch(random().nextInt(10)) {
        case 0:
        case 1:
        case 2:
        case 3:
          overrequest = 0; // 40% of the time, no overrequest to better stress refinement
          break;
        case 4:
        case 5:
          overrequest = random().nextInt(FACET_LIMIT);
          break;
        case 6:
          overrequest = random().nextInt(Integer.MAX_VALUE);
          break;
        default: break;
      }
      String overrequestStr = overrequest==-1 ? "" : ", overrequest:"+overrequest;

      boolean refine = (overrequest >= 0 && (long)limit + overrequest < FACET_LIMIT)
          || (overrequest < 0 && limit < FACET_LIMIT) // don't assume how much overrequest we do by default, just check the limit
          || random().nextInt(10)==0; // once in a while, turn on refinement even when it isn't needed.

      // refine = false; // NOTE: Uncomment this line to see if refinement testing is adequate (should get fails occasionally)
      String refineStr=", refine:" + refine;
      if (!refine) {
        // if refine==false, don't specify it sometimes (it's the default)
        if (random().nextBoolean()) refineStr="";
      }

      StringBuilder sb = new StringBuilder("{ type:terms, field:" + field + limitStr + overrequestStr + refineStr);
      if (! subFacets.isEmpty()) {
        sb.append(", facet:");
        sb.append(toJSONFacetParamValue(subFacets));
      }
      if (null != domain) {
        CharSequence ds = domain.toJSONFacetParamValue();
        if (null != ds) {
          sb.append(", ").append(ds);
        }
      }
      sb.append("}");
      return sb;
    }

