  private void assertOperations(String collection, List<SolrRequest> operations, String lostNodeName,
                                List<CloudDescriptor> cloudDescriptors, JettySolrRunner destJetty) {
    assertEquals("Replicas of " + collection + " is not fully moved, operations="+operations,
        cloudDescriptors.stream().filter(cd -> cd.getCollectionName().equals(collection)).count(), operations.size());
    for (SolrRequest solrRequest : operations) {
      assertTrue(solrRequest instanceof CollectionAdminRequest.MoveReplica);
      SolrParams params = solrRequest.getParams();

      assertEquals(params.get("collection"), collection);

      String replica = params.get("replica");
      boolean found = false;
      Iterator<CloudDescriptor> it = cloudDescriptors.iterator();
      while (it.hasNext()) {
        CloudDescriptor cd = it.next();
        if (cd.getCollectionName().equals(collection) && cd.getCoreNodeName().equals(replica)) {
          found = true;
          it.remove();
          break;
        }
      }
      assertTrue("Can not find "+replica+ " in node " + lostNodeName, found);

      String targetNode = params.get("targetNode");
      assertFalse("Target node match the lost one " + lostNodeName, lostNodeName.equals(targetNode));
      if (destJetty != null) {
        assertEquals("Target node is not as expectation", destJetty.getNodeName(), targetNode);
      }
    }

    for (CloudDescriptor cd : cloudDescriptors) {
      if (cd.getCollectionName().equals(collection)) {
        fail("Exist replica which is not moved " + cd);
      }
    }
  }

