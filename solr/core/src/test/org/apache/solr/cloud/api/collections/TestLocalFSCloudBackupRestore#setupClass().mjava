  @BeforeClass
  public static void setupClass() throws Exception {
    String solrXml = MiniSolrCloudCluster.DEFAULT_CLOUD_SOLR_XML;
    String poisioned = 
        "    <repository  name=\""+TestLocalFSCloudBackupRestore.poisioned+"\" default=\"true\" "
        + "class=\"org.apache.solr.cloud.api.collections.TestLocalFSCloudBackupRestore$PoinsionedRepository\"> \n" +
        "    </repository>\n";
    String local = 
        "    <repository  name=\"local\" "
        + "class=\"org.apache.solr.core.backup.repository.LocalFileSystemRepository\"> \n" +
        "    </repository>\n";
    solrXml = solrXml.replace("</solr>",
        "<backup>" + (random().nextBoolean() ? poisioned+local: local+poisioned)
        + "</backup>"+ "</solr>");
    
    configureCluster(NUM_SHARDS)// nodes
        .addConfig("conf1", TEST_PATH().resolve("configsets").resolve("cloud-minimal").resolve("conf"))
        .addConfig("confFaulty", TEST_PATH().resolve("configsets").resolve("cloud-minimal").resolve("conf"))
        .withSolrXml(solrXml)
        .configure();
    cluster.getZkClient().delete(ZkConfigManager.CONFIGS_ZKNODE + "/" + "confFaulty" + "/" + "solrconfig.xml", -1, true);

    boolean whitespacesInPath = random().nextBoolean();
    if (whitespacesInPath) {
      backupLocation = createTempDir("my backup").toAbsolutePath().toString();
    } else {
      backupLocation = createTempDir("mybackup").toAbsolutePath().toString();
    }
  }

