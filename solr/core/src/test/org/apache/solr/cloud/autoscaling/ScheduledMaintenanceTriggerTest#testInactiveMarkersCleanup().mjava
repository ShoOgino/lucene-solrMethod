  @Test
  public void testInactiveMarkersCleanup() throws Exception {
    triggerFired = new CountDownLatch(1);
    String setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : 'trigger1'," +
        "'event' : 'nodeAdded'," +
        "'waitFor': '1s'" +
        "'enabled' : true," +
        "'actions' : [" +
        "{'name' : 'test', 'class' : '" + TestTriggerAction2.class.getName() + "'}]" +
    "}}";
    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : '" + AutoScaling.SCHEDULED_MAINTENANCE_TRIGGER_NAME + "'," +
        "'event' : 'scheduled'," +
        "'startTime' : 'NOW+20SECONDS'," +
        "'every' : '+2SECONDS'," + // must be longer than the cooldown period!!
        "'enabled' : true," +
        "'actions' : [{'name' : 'inactive_markers_plan', 'class' : 'solr.InactiveMarkersPlanAction', 'ttl' : '20'}," +
        "{'name' : 'test', 'class' : '" + TestTriggerAction.class.getName() + "'}]" +
        "}}";

    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    cloudManager.getTimeSource().sleep(5000);

    triggerFired = new CountDownLatch(1);
    String node = addNode();

    boolean await = triggerFired.await(30, TimeUnit.SECONDS);
    assertTrue("trigger should have fired", await);

    triggerFired = new CountDownLatch(1);

    // should have a marker
    DistribStateManager stateManager = cloudManager.getDistribStateManager();
    String nodeAddedPath = ZkStateReader.SOLR_AUTOSCALING_NODE_ADDED_PATH + "/" + node;
    assertTrue("marker for nodeAdded doesn't exist", stateManager.hasData(nodeAddedPath));

    // wait for the cleanup to fire
    await = triggerFired.await(90, TimeUnit.SECONDS);
    assertTrue("cleanup trigger should have fired", await);
    assertFalse("marker for nodeAdded still exists", stateManager.hasData(nodeAddedPath));
  }

