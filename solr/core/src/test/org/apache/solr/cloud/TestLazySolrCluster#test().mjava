    public void test() throws Exception {
        CloudSolrClient cloudClient = cluster.getSolrClient();
        String collection = "testLazyCluster1";
        cloudClient.request(CollectionAdminRequest.createCollection(collection, "conf1", 2, 2));
        cluster.waitForActiveCollection(collection, 2, 4);
        collection = "testLazyCluster2";
        cloudClient.request(CollectionAdminRequest.createCollection(collection, "conf1", 2, 2));
        cluster.waitForActiveCollection(collection, 2, 4);

        LazySolrCluster solrCluster = new LazySolrCluster(cluster.getSolrClient().getZkStateReader());
        SimpleMap<SolrCollection> colls = solrCluster.collections();

        SolrCollection c = colls.get("testLazyCluster1");
        assertNotNull(c);
        c = colls.get("testLazyCluster2");
        assertNotNull(c);
        int[] count = new int[1];
        solrCluster.collections().forEachEntry((s, solrCollection) -> count[0]++);
        assertEquals(2, count[0]);

        count[0] = 0;

        assertEquals(2, solrCluster.collections().get("testLazyCluster1").shards().size());
        solrCluster.collections().get("testLazyCluster1").shards()
                .forEachEntry((s, shard) -> shard.replicas().forEachEntry((s1, replica) -> count[0]++));
        assertEquals(4, count[0]);

        assertEquals(5, solrCluster.nodes().size());
        SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();
        zkClient.create(ZkStateReader.CONFIGS_ZKNODE + "/conf1/a", null, CreateMode.PERSISTENT, true);
        zkClient.create(ZkStateReader.CONFIGS_ZKNODE + "/conf1/a/aa1", new byte[1024], CreateMode.PERSISTENT, true);
        zkClient.create(ZkStateReader.CONFIGS_ZKNODE + "/conf1/a/aa2", new byte[1024 * 2], CreateMode.PERSISTENT, true);

        List<String> allFiles =  new ArrayList<>();
        byte[] buf = new byte[3*1024];
        CollectionConfig conf1 = solrCluster.configs().get("conf1");
        conf1.resources().abortableForEach((s, resource) -> {
            allFiles.add(s);
            if("a/aa1".equals(s)) {
                resource.get(is -> assertEquals(1024,  is.read(buf)));
            }
            if("a/aa2".equals(s)) {
                resource.get(is -> assertEquals(2*1024,  is.read(buf)));
            }
            if("a".equals(s)) {
                resource.get(is -> assertEquals(-1, is.read()));
            }
            return Boolean.TRUE;
        });
        assertEquals(5, allFiles.size());

    }

