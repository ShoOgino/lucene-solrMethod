  @Test
  public void testAddShard() throws Exception {

    String collectionName = "TooManyReplicasWhenAddingShards";
    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, "conf", "shardstart", 2)
        .setMaxShardsPerNode(2)
        .process(cluster.getSolrClient());

    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with
    // two replicas, but fail on the third.
    CollectionAdminRequest.createShard(collectionName, "shard1")
        .process(cluster.getSolrClient());

    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode
    CollectionAdminRequest.createShard(collectionName, "shard2")
        .process(cluster.getSolrClient());

    // Now fail to add the third as it should exceed maxShardsPerNode
    Exception e = expectThrows(Exception.class, () -> {
      CollectionAdminRequest.createShard(collectionName, "shard3")
          .process(cluster.getSolrClient());
    });
    assertTrue("Should have gotten the right error message back",
        e.getMessage().contains("given the current number of live nodes and a maxShardsPerNode of"));

    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.
    List<String> nodes = getAllNodeNames(collectionName);

    CollectionAdminRequest.createShard(collectionName, "shard4")
        .setNodeSet(StringUtils.join(nodes, ","))
        .process(cluster.getSolrClient());

    // And just for yucks, insure we fail the "regular" one again.
    Exception e2 = expectThrows(Exception.class, () -> {
      CollectionAdminRequest.createShard(collectionName, "shard5")
          .process(cluster.getSolrClient());
    });
    assertTrue("Should have gotten the right error message back",
        e2.getMessage().contains("given the current number of live nodes and a maxShardsPerNode of"));

    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each
    // should have exactly two replicas
    waitForState("Expected shards shardstart, 1, 2 and 4, each with two active replicas", collectionName, (n, c) -> {
      return DocCollection.isFullyActive(n, c, 4, 2);
    });
    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();
    assertEquals("There should be exaclty four slices", slices.size(), 4);
    assertNotNull("shardstart should exist", slices.get("shardstart"));
    assertNotNull("shard1 should exist", slices.get("shard1"));
    assertNotNull("shard2 should exist", slices.get("shard2"));
    assertNotNull("shard4 should exist", slices.get("shard4"));
    assertEquals("Shardstart should have exactly 2 replicas", 2, slices.get("shardstart").getReplicas().size());
    assertEquals("Shard1 should have exactly 2 replicas", 2, slices.get("shard1").getReplicas().size());
    assertEquals("Shard2 should have exactly 2 replicas", 2, slices.get("shard2").getReplicas().size());
    assertEquals("Shard4 should have exactly 2 replicas", 2, slices.get("shard4").getReplicas().size());

  }

