  @Test
  @ShardsFixed(num = 2)
  public void testAddShard() throws Exception {
    String collectionName = "TooManyReplicasWhenAddingShards";
    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()
        .setCollectionName(collectionName)
        .setReplicationFactor(2)
        .setMaxShardsPerNode(2)
        .setStateFormat(2)
        .setRouterName("implicit")
        .setShards("shardstart");

    NamedList<Object> request = create.process(cloudClient).getResponse();

    assertTrue("Could not create the collection", request.get("success") != null);
    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with
    // two replicas, but fail on the third.

    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()
        .setCollectionName(collectionName)
        .setShardName("shard1");
    CollectionAdminResponse resp = createShard.process(cloudClient);
    assertEquals(0, resp.getStatus());

    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode

    createShard = new CollectionAdminRequest.CreateShard()
        .setCollectionName(collectionName)
        .setShardName("shard2");
    resp = createShard.process(cloudClient);
    assertEquals(0, resp.getStatus());


    // Now fail to add the third as it should exceed maxShardsPerNode
    createShard = new CollectionAdminRequest.CreateShard()
        .setCollectionName(collectionName)
        .setShardName("shard3");
    try {
      createShard.process(cloudClient);
      fail("Should have exceeded the max number of replicas allowed");
    } catch (HttpSolrClient.RemoteSolrException se) {
      assertTrue("Should have gotten the right error message back",
          se.getMessage().contains("given the current number of live nodes and a maxShardsPerNode of"));
    }

    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.
    List<String> nodes = getAllNodeNames(collectionName);

    createShard = new CollectionAdminRequest.CreateShard()
        .setCollectionName(collectionName)
        .setShardName("shard4")
        .setNodeSet(StringUtils.join(nodes, ","));
    resp = createShard.process(cloudClient);
    assertEquals(0, resp.getStatus());

    // And just for yucks, insure we fail the "regular" one again.
    createShard = new CollectionAdminRequest.CreateShard()
        .setCollectionName(collectionName)
        .setShardName("shard5");
    try {
      createShard.process(cloudClient);
      fail("Should have exceeded the max number of replicas allowed");
    } catch (HttpSolrClient.RemoteSolrException se) {
      assertTrue("Should have gotten the right error message back",
          se.getMessage().contains("given the current number of live nodes and a maxShardsPerNode of"));
    }

    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each
    // should have exactly two replicas
    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();
    zkStateReader.updateClusterState();
    Map<String, Slice> slices = zkStateReader.getClusterState().getSlicesMap(collectionName);
    assertEquals("There should be exaclty four slices", slices.size(), 4);
    assertNotNull("shardstart should exist", slices.get("shardstart"));
    assertNotNull("shard1 should exist", slices.get("shard1"));
    assertNotNull("shard2 should exist", slices.get("shard2"));
    assertNotNull("shard4 should exist", slices.get("shard4"));
    assertEquals("Shardstart should have exactly 2 replicas", 2, slices.get("shardstart").getReplicas().size());
    assertEquals("Shard1 should have exactly 2 replicas", 2, slices.get("shard1").getReplicas().size());
    assertEquals("Shard2 should have exactly 2 replicas", 2, slices.get("shard2").getReplicas().size());
    assertEquals("Shard4 should have exactly 2 replicas", 2, slices.get("shard4").getReplicas().size());

  }

