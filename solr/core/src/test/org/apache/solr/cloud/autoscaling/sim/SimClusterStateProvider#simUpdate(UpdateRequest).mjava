  /**
   * Simulate an update by modifying replica metrics.
   * The following core metrics are updated:
   * <ul>
   *   <li><code>SEARCHER.searcher.numDocs</code> - increased by added docs, decreased by deleteById and deleteByQuery</li>
   *   <li><code>SEARCHER.searcher.deletedDocs</code> - decreased by deleteById and deleteByQuery by up to <code>numDocs</code></li>
   *   <li><code>SEARCHER.searcher.maxDoc</code> - always increased by the number of added docs.</li>
   * </ul>
   * <p>IMPORTANT limitations:</p>
   * <ul>
   *   <li>document replacements are always counted as new docs</li>
   *   <li>delete by ID always succeeds (unless numDocs == 0)</li>
   *   <li>deleteByQuery is not supported unless the query is <code>*:*</code></li>
   * </ul>
   * @param req update request. This request MUST have the <code>collection</code> param set.
   * @return {@link UpdateResponse}
   * @throws SolrException on errors, such as nonexistent collection or unsupported deleteByQuery
   */
  public UpdateResponse simUpdate(UpdateRequest req) throws SolrException, InterruptedException, IOException {
    String collection = req.getCollection();
    if (collection == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Collection not set");
    }
    if (!simListCollections().contains(collection)) {
      if (CollectionAdminParams.SYSTEM_COLL.equals(collection)) {
        // auto-create
        createSystemCollection();
      } else {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Collection '" + collection + "' doesn't exist");
      }
    }
    // always reset first to get the current metrics - it's easier than to keep matching
    // Replica with ReplicaInfo where the current real counts are stored
    collectionsStatesRef.set(null);
    DocCollection coll = getClusterState().getCollection(collection);
    DocRouter router = coll.getRouter();

    boolean modified = false;

    lock.lockInterruptibly();
    try {
      List<String> deletes = req.getDeleteById();
      if (deletes != null && !deletes.isEmpty()) {
        for (String id : deletes) {
          Slice s = router.getTargetSlice(id, null, null, req.getParams(), coll);
          // NOTE: we don't use getProperty because it uses PROPERTY_PROP_PREFIX
          Replica leader = s.getLeader();
          if (leader == null) {
            LOG.debug("-- no leader in " + s);
            continue;
          }
          cloudManager.getMetricManager().registry(createRegistryName(collection, s.getName(), leader)).counter("UPDATE./update.requests").inc();
          ReplicaInfo ri = getReplicaInfo(leader);
          Number numDocs = (Number)ri.getVariable("SEARCHER.searcher.numDocs");
          if (numDocs == null || numDocs.intValue() <= 0) {
            LOG.debug("-- attempting to delete nonexistent doc " + id + " from " + s.getLeader());
            continue;
          }
          modified = true;
          try {
            simSetShardValue(collection, s.getName(), "SEARCHER.searcher.deletedDocs", 1, true, false);
            simSetShardValue(collection, s.getName(), "SEARCHER.searcher.numDocs", -1, true, false);
            Number indexSize = (Number)ri.getVariable(Suggestion.ConditionType.CORE_IDX.metricsAttribute);
            if (indexSize != null && indexSize.longValue() > SimCloudManager.DEFAULT_IDX_SIZE_BYTES) {
              indexSize = indexSize.longValue() - DEFAULT_DOC_SIZE_BYTES;
              simSetShardValue(collection, s.getName(), Suggestion.ConditionType.CORE_IDX.metricsAttribute,
                  indexSize.intValue(), false, false);
              simSetShardValue(collection, s.getName(), Suggestion.coreidxsize,
                  Suggestion.ConditionType.CORE_IDX.convertVal(indexSize), false, false);
            } else {
              throw new Exception("unexpected indexSize ri=" + ri);
            }
          } catch (Exception e) {
            throw new IOException(e);
          }
        }
      }
      deletes = req.getDeleteQuery();
      if (deletes != null && !deletes.isEmpty()) {
        for (String q : deletes) {
          if (!"*:*".equals(q)) {
            throw new UnsupportedOperationException("Only '*:*' query is supported in deleteByQuery");
          }
          for (Slice s : coll.getSlices()) {
            Replica leader = s.getLeader();
            if (leader == null) {
              LOG.debug("-- no leader in " + s);
              continue;
            }

            cloudManager.getMetricManager().registry(createRegistryName(collection, s.getName(), leader)).counter("UPDATE./update.requests").inc();
            ReplicaInfo ri = getReplicaInfo(leader);
            Number numDocs = (Number)ri.getVariable("SEARCHER.searcher.numDocs");
            if (numDocs == null || numDocs.intValue() == 0) {
              continue;
            }
            modified = true;
            try {
              simSetShardValue(collection, s.getName(), "SEARCHER.searcher.deletedDocs", numDocs, false, false);
              simSetShardValue(collection, s.getName(), "SEARCHER.searcher.numDocs", 0, false, false);
              simSetShardValue(collection, s.getName(), Suggestion.ConditionType.CORE_IDX.metricsAttribute,
                  SimCloudManager.DEFAULT_IDX_SIZE_BYTES, false, false);
              simSetShardValue(collection, s.getName(), Suggestion.coreidxsize,
                  Suggestion.ConditionType.CORE_IDX.convertVal(SimCloudManager.DEFAULT_IDX_SIZE_BYTES), false, false);
            } catch (Exception e) {
              throw new IOException(e);
            }
          }
        }
      }
      List<SolrInputDocument> docs = req.getDocuments();
      if (docs != null && !docs.isEmpty()) {
        for (SolrInputDocument doc : docs) {
          String id = (String) doc.getFieldValue("id");
          if (id == null) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Document without id: " + doc);
          }
          Slice s = router.getTargetSlice(id, null, null, req.getParams(), coll);
          Replica leader = s.getLeader();
          if (leader == null) {
            LOG.debug("-- no leader in " + s);
            continue;
          }
          cloudManager.getMetricManager().registry(createRegistryName(collection, s.getName(), leader)).counter("UPDATE./update.requests").inc();
          modified = true;
          try {
            simSetShardValue(collection, s.getName(), "SEARCHER.searcher.numDocs", 1, true, false);
            simSetShardValue(collection, s.getName(), "SEARCHER.searcher.maxDoc", 1, true, false);

            ReplicaInfo ri = getReplicaInfo(leader);
            Number indexSize = (Number)ri.getVariable(Suggestion.ConditionType.CORE_IDX.metricsAttribute);
            // for each new document increase the size by DEFAULT_DOC_SIZE_BYTES
            indexSize = indexSize.longValue() + DEFAULT_DOC_SIZE_BYTES;
            simSetShardValue(collection, s.getName(), Suggestion.ConditionType.CORE_IDX.metricsAttribute,
                indexSize.longValue(), false, false);
            simSetShardValue(collection, s.getName(), Suggestion.coreidxsize,
                Suggestion.ConditionType.CORE_IDX.convertVal(indexSize), false, false);
          } catch (Exception e) {
            throw new IOException(e);
          }
        }
      }
      if (modified) {
        collectionsStatesRef.set(null);
      }
    } finally {
      lock.unlock();
    }
    return new UpdateResponse();
  }

