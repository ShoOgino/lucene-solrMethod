  @Test
  public void testIdIsUnique() throws Exception {
    String zkDir = createTempDir("zkData").toFile().getAbsolutePath();
    ZkTestServer server = new ZkTestServer(zkDir);
    Object fixedValue = new Object();
    String[] collections = new String[]{"c1","c2","c3","c4","c5","c6","c7","c8","c9"};
    Map<String, ConcurrentHashMap<Integer, Object>> collectionUniqueIds = new HashMap<>();
    for (String c : collections) {
      collectionUniqueIds.put(c, new ConcurrentHashMap<>());
    }

    ExecutorService executor = ExecutorUtil.newMDCAwareCachedThreadPool("threadpool");
    try {
      server.run();

      try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {
        assertTrue(zkClient.isConnected());
        zkClient.makePath("/", true);
        for (String c : collections) {
          zkClient.makePath("/collections/"+c, true);
        }
        // TODO: fix this to be independent of ZK
        ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);
        List<Future<?>> futures = new ArrayList<>();
        for (int i = 0; i < 1000; i++) {
          futures.add(executor.submit(() -> {
            String collection = collections[random().nextInt(collections.length)];
            int id = Assign.incAndGetId(stateManager, collection, 0);
            Object val = collectionUniqueIds.get(collection).put(id, fixedValue);
            if (val != null) {
              fail("ZkController do not generate unique id for " + collection);
            }
          }));
        }
        for (Future<?> future : futures) {
          future.get();
        }
      }
      assertEquals(1000, (long) collectionUniqueIds.values().stream()
          .map(ConcurrentHashMap::size)
          .reduce((m1, m2) -> m1 + m2).get());
    } finally {
      server.shutdown();
      ExecutorUtil.shutdownAndAwaitTermination(executor);
    }
  }

