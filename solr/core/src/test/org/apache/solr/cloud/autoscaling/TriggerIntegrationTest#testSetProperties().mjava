  public void testSetProperties() throws Exception  {
    JettySolrRunner runner = cluster.getJettySolrRunner(0);
    SolrResourceLoader resourceLoader = runner.getCoreContainer().getResourceLoader();
    SolrCloudManager solrCloudManager = runner.getCoreContainer().getZkController().getSolrCloudManager();
    AtomicLong diff = new AtomicLong(0);
    triggerFiredLatch = new CountDownLatch(2); // have the trigger run twice to capture time difference
    try (ScheduledTriggers scheduledTriggers = new ScheduledTriggers(resourceLoader, solrCloudManager)) {
      AutoScalingConfig config = new AutoScalingConfig(Collections.emptyMap());
      scheduledTriggers.setAutoScalingConfig(config);
      scheduledTriggers.add(new TriggerBase(TriggerEventType.NODELOST, "x", Collections.emptyMap(), resourceLoader, solrCloudManager) {
        @Override
        protected Map<String, Object> getState() {
          return Collections.singletonMap("x","y");
        }

        @Override
        protected void setState(Map<String, Object> state) {

        }

        @Override
        public void restoreState(AutoScaling.Trigger old) {

        }

        @Override
        public void run() {
          if (getTriggerFiredLatch().getCount() == 0)  return;
          long l = diff.get();
          diff.set(timeSource.getTime() - l);
          getTriggerFiredLatch().countDown();
        }
      });
      assertTrue(getTriggerFiredLatch().await(4, TimeUnit.SECONDS));
      assertTrue(diff.get() - TimeUnit.SECONDS.toNanos(ScheduledTriggers.DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS) >= 0);

      // change schedule delay
      config = config.withProperties(Collections.singletonMap(AutoScalingParams.TRIGGER_SCHEDULE_DELAY_SECONDS, 4));
      scheduledTriggers.setAutoScalingConfig(config);
      triggerFiredLatch = new CountDownLatch(2);
      assertTrue("Timed out waiting for latch to fire", getTriggerFiredLatch().await(10, TimeUnit.SECONDS));
      assertTrue(diff.get() - TimeUnit.SECONDS.toNanos(4) >= 0);

      // reset with default properties
      scheduledTriggers.remove("x"); // remove the old trigger
      config = config.withProperties(ScheduledTriggers.DEFAULT_PROPERTIES);
      scheduledTriggers.setAutoScalingConfig(config);

      // test core thread count
      List<AutoScaling.Trigger> triggerList = new ArrayList<>();
      final Set<String> threadNames = Collections.synchronizedSet(new HashSet<>());
      final Set<String> triggerNames = Collections.synchronizedSet(new HashSet<>());
      triggerFiredLatch = new CountDownLatch(8);
      for (int i = 0; i < 8; i++) {
        triggerList.add(new MockTrigger(TriggerEventType.NODELOST, "x" + i, Collections.emptyMap(), resourceLoader, solrCloudManager)  {
          @Override
          public void run() {
            try {
              // If core pool size is increased then new threads won't be started if existing threads
              // aren't busy with tasks. So we make this thread wait longer than necessary
              // so that the pool is forced to start threads for other triggers
              Thread.sleep(5000);
            } catch (InterruptedException e) {
            }
            if (triggerNames.add(getName()))  {
              getTriggerFiredLatch().countDown();
              threadNames.add(Thread.currentThread().getName());
            }
          }
        });
        scheduledTriggers.add(triggerList.get(i));
      }
      assertTrue("Timed out waiting for latch to fire", getTriggerFiredLatch().await(20, TimeUnit.SECONDS));
      assertEquals("Expected 8 triggers but found: " + triggerNames,8, triggerNames.size());
      assertEquals("Expected " + ScheduledTriggers.DEFAULT_TRIGGER_CORE_POOL_SIZE
          + " threads but found: " + threadNames,
          ScheduledTriggers.DEFAULT_TRIGGER_CORE_POOL_SIZE, threadNames.size());

      // change core pool size
      config = config.withProperties(Collections.singletonMap(AutoScalingParams.TRIGGER_CORE_POOL_SIZE, 6));
      scheduledTriggers.setAutoScalingConfig(config);
      triggerFiredLatch = new CountDownLatch(8);
      threadNames.clear();
      triggerNames.clear();
      assertTrue(getTriggerFiredLatch().await(20, TimeUnit.SECONDS));
      assertEquals("Expected 8 triggers but found: " + triggerNames,8, triggerNames.size());
      assertEquals("Expected 6 threads but found: " + threadNames,6, threadNames.size());

      // reset
      for (int i = 0; i < 8; i++) {
        scheduledTriggers.remove(triggerList.get(i).getName());
      }
    }
  }

