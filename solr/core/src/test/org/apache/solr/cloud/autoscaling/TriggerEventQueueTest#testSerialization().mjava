  @Test
  public void testSerialization() throws Exception {
    TriggerEventQueue queue = new TriggerEventQueue(cloudManager, "test", null);
    Map<String, Number> hotHosts = new HashMap<>();
    hotHosts.put("host1", 1);
    hotHosts.put("host2", 1);
    TriggerEvent ev = new MetricTrigger.MetricBreachedEvent("testTrigger", "testCollection", "shard1",
        CollectionParams.CollectionAction.ADDREPLICA.toLower(), cloudManager.getTimeSource().getTimeNs(),
        "foo", hotHosts);
    queue.offerEvent(ev);
    ev = queue.pollEvent();
    assertNotNull(ev);
    Object ops = ev.getProperties().get(TriggerEvent.REQUESTED_OPS);
    assertNotNull(ops);
    assertTrue(ops.getClass().getName(), ops instanceof List);
    List<Object> requestedOps = (List<Object>)ops;
    assertEquals(requestedOps.toString(), 2, requestedOps.size());
    requestedOps.forEach(op -> {
      assertTrue(op.getClass().getName(), op instanceof TriggerEvent.Op);
      TriggerEvent.Op operation = (TriggerEvent.Op)op;
      assertEquals(op.toString(), CollectionParams.CollectionAction.ADDREPLICA, operation.getAction());
      EnumMap<Suggester.Hint, Object> hints = ((TriggerEvent.Op) op).getHints();
      assertEquals(hints.toString(), 2, hints.size());
      Object o = hints.get(Suggester.Hint.COLL_SHARD);
      assertNotNull(Suggester.Hint.COLL_SHARD.toString(), o);
      assertTrue(o.getClass().getName(), o instanceof Collection);
      Collection<Object> col = (Collection<Object>)o;
      assertEquals(col.toString(), 1, col.size());
      o = col.iterator().next();
      assertTrue(o.getClass().getName(), o instanceof Pair);
      o = hints.get(Suggester.Hint.SRC_NODE);
      assertNotNull(Suggester.Hint.SRC_NODE.toString(), o);
      assertTrue(o.getClass().getName(), o instanceof Collection);
      col = (Collection<Object>)o;
      assertEquals(col.toString(), 1, col.size());
      o = col.iterator().next();
      assertTrue(o.getClass().getName(), o instanceof String);
    });
  }

