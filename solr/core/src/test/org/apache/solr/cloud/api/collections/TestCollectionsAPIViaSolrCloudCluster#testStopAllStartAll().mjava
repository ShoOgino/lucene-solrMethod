  @Test
  public void testStopAllStartAll() throws Exception {

    final String collectionName = "testStopAllStartAllCollection";
    final CloudSolrClient client = cluster.getSolrClient();

    assertNotNull(cluster.getZkServer());
    List<JettySolrRunner> jettys = new ArrayList<>(cluster.getJettySolrRunners()); // make a copy
    assertEquals(nodeCount, jettys.size());
    for (JettySolrRunner jetty : jettys) {
      assertTrue(jetty.isRunning());
    }

    final SolrQuery query = new SolrQuery("*:*");
    final SolrInputDocument doc = new SolrInputDocument();

    // create collection
    createCollection(collectionName, null);

    ZkStateReader zkStateReader = client.getZkStateReader();

    // modify collection
    final int numDocs = 1 + random().nextInt(10);
    for (int ii = 1; ii <= numDocs; ++ii) {
      doc.setField("id", ""+ii);
      client.add(collectionName, doc);
      if (ii*2 == numDocs) client.commit(collectionName);
    }
    client.commit(collectionName);

    // query collection
    assertEquals(numDocs, client.query(collectionName, query).getResults().getNumFound());

    // the test itself
    zkStateReader.forceUpdateCollection(collectionName);
    final ClusterState clusterState = zkStateReader.getClusterState();

    final Set<Integer> leaderIndices = new HashSet<>();
    final Set<Integer> followerIndices = new HashSet<>();
    {
      final Map<String,Boolean> shardLeaderMap = new HashMap<>();
      for (final Slice slice : clusterState.getCollection(collectionName).getSlices()) {
        for (final Replica replica : slice.getReplicas()) {
          shardLeaderMap.put(replica.getNodeName().replace("_solr", "/solr"), Boolean.FALSE);
        }
        shardLeaderMap.put(slice.getLeader().getNodeName().replace("_solr", "/solr"), Boolean.TRUE);
      }
      for (int ii = 0; ii < jettys.size(); ++ii) {
        final URL jettyBaseUrl = jettys.get(ii).getBaseUrl();
        final String jettyBaseUrlString = jettyBaseUrl.toString().substring((jettyBaseUrl.getProtocol() + "://").length());
        final Boolean isLeader = shardLeaderMap.get(jettyBaseUrlString);
        if (Boolean.TRUE.equals(isLeader)) {
          leaderIndices.add(ii);
        } else if (Boolean.FALSE.equals(isLeader)) {
          followerIndices.add(ii);
        } // else neither leader nor follower i.e. node without a replica (for our collection)
      }
    }
    final List<Integer> leaderIndicesList = new ArrayList<>(leaderIndices);
    final List<Integer> followerIndicesList = new ArrayList<>(followerIndices);

    // first stop the followers (in no particular order)
    Collections.shuffle(followerIndicesList, random());
    for (Integer ii : followerIndicesList) {
      if (!leaderIndices.contains(ii)) {
        cluster.stopJettySolrRunner(jettys.get(ii));
      }
    }

    // then stop the leaders (again in no particular order)
    Collections.shuffle(leaderIndicesList, random());
    for (Integer ii : leaderIndicesList) {
      cluster.stopJettySolrRunner(jettys.get(ii));
    }

    // calculate restart order
    final List<Integer> restartIndicesList = new ArrayList<>();
    Collections.shuffle(leaderIndicesList, random());
    restartIndicesList.addAll(leaderIndicesList);
    Collections.shuffle(followerIndicesList, random());
    restartIndicesList.addAll(followerIndicesList);
    if (random().nextBoolean()) Collections.shuffle(restartIndicesList, random());

    // and then restart jettys in that order
    for (Integer ii : restartIndicesList) {
      final JettySolrRunner jetty = jettys.get(ii);
      if (!jetty.isRunning()) {
        cluster.startJettySolrRunner(jetty);
        assertTrue(jetty.isRunning());
      }
    }
    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);

    zkStateReader.forceUpdateCollection(collectionName);

    // re-query collection
    assertEquals(numDocs, client.query(collectionName, query).getResults().getNumFound());
  }

