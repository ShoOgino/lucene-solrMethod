  private void testFillWorkQueue() throws Exception {
    try (SolrClient client = createNewSolrClient("", getBaseUrl((HttpSolrClient) clients.get(0)))) {
      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),
          "/overseer/collection-queue-work", new Stats());
      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks
      for (int i = 0; i < MAX_PARALLEL_TASKS + 15; i++) {
        distributedQueue.offer(Utils.toJSON(Utils.makeMap(
            "collection", "A_COLL",
            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),
            ASYNC, Integer.toString(i),

            // third task waits for a long time, and thus blocks the queue for all other tasks for A_COLL.
            // Subsequent tasks as well as the first two only wait for 1ms
            "sleep", (i == 2 ? "10000" : "1")
        )));
        log.info("MOCK task added {}", i);
      }

      // Wait until we see the second A_COLL task getting processed (assuming the first got processed as well)
      Long task1CollA = waitForTaskToCompleted(client, 1);

      assertNotNull("Queue did not process first two tasks on A_COLL, can't run test", task1CollA);

      // Make sure the long running task did not finish, otherwise no way the B_COLL task can be tested to run in parallel with it
      assertNull("Long running task finished too early, can't test", checkTaskHasCompleted(client, 2));

      // Enqueue a task on another collection not competing with the lock on A_COLL and see that it can be executed right away
      distributedQueue.offer(Utils.toJSON(Utils.makeMap(
          "collection", "B_COLL",
          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),
          ASYNC, "200",
          "sleep", "1"
      )));

      // We now check that either the B_COLL task has completed before the third (long running) task on A_COLL,
      // Or if both have completed (if this check got significantly delayed for some reason), we verify B_COLL was first.
      Long taskCollB = waitForTaskToCompleted(client, 200);

      // We do not wait for the long running task to finish, that would be a waste of time.
      Long task2CollA = checkTaskHasCompleted(client, 2);

      // Given the wait delay (500 iterations of 100ms), the task has plenty of time to complete, so this is not expected.
      assertNotNull("Task on  B_COLL did not complete, can't test", taskCollB);
      // We didn't wait for the 3rd A_COLL task to complete (test can run quickly) but if it did, we expect the B_COLL to have finished first.
      assertTrue("task2CollA: " + task2CollA + " taskCollB: " + taskCollB, task2CollA  == null || task2CollA > taskCollB);
    }
  }

