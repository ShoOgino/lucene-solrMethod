  @Test
  public void testSearchRate() throws Exception {
    SolrClient solrClient = cluster.simGetSolrClient();
    String collectionName = "testSearchRate";
    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,
        "conf", 2, 10);
    create.process(solrClient);

    log.info("Ready after " + CloudTestUtils.waitForState(cluster, collectionName, 300, TimeUnit.SECONDS,
        CloudTestUtils.clusterShape(2, 10, false, true)) + " ms");

    // collect the node names for shard1
    Set<String> nodes = new HashSet<>();
    cluster.getSimClusterStateProvider().getClusterState().getCollection(collectionName)
        .getSlice("shard1")
        .getReplicas()
        .forEach(r -> nodes.add(r.getNodeName()));

    String metricName = "QUERY./select.requestTimes:1minRate";
    // simulate search traffic
    cluster.getSimClusterStateProvider().simSetShardValue(collectionName, "shard1", metricName, 40, false, true);

    // now define the trigger. doing it earlier may cause partial events to be generated (where only some
    // nodes / replicas exceeded the threshold).
    String setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : 'search_rate_trigger'," +
        "'event' : 'searchRate'," +
        "'waitFor' : '" + waitForSeconds + "s'," +
        "'aboveRate' : 1.0," +
        "'aboveNodeRate' : 1.0," +
        "'enabled' : true," +
        "'actions' : [" +
        "{'name':'compute','class':'" + ComputePlanAction.class.getName() + "'}," +
        "{'name':'execute','class':'" + ExecutePlanAction.class.getName() + "'}," +
        "{'name':'test','class':'" + FinishTriggerAction.class.getName() + "'}" +
        "]" +
        "}}";
    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");
    String setListenerCommand1 = "{" +
        "'set-listener' : " +
        "{" +
        "'name' : 'srt'," +
        "'trigger' : 'search_rate_trigger'," +
        "'stage' : ['FAILED','SUCCEEDED']," +
        "'class' : '" + TestTriggerListener.class.getName() + "'" +
        "}" +
        "}";
    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setListenerCommand1);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");


    boolean await = triggerFinishedLatch.await(waitForSeconds * 45000 / SPEED, TimeUnit.MILLISECONDS);
    assertTrue("The trigger did not fire at all", await);
    // wait for listener to capture the SUCCEEDED stage
    cluster.getTimeSource().sleep(25000);
    
    assertNotNull(listenerEvents.entrySet().toString(), listenerEvents.get("srt"));

    assertTrue(listenerEvents.toString(), listenerEvents.get("srt").size() >= 1);

    CapturedEvent ev = listenerEvents.get("srt").get(0);
    assertEquals(TriggerEventType.SEARCHRATE, ev.event.getEventType());
    Map<String, Number> m = (Map<String, Number>)ev.event.getProperty(SearchRateTrigger.HOT_NODES);
    assertNotNull(m);
    assertEquals(nodes.size(), m.size());
    assertEquals(nodes, m.keySet());
    m.forEach((k, v) -> assertEquals(4.0, v.doubleValue(), 0.01));
    List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)ev.event.getProperty(TriggerEvent.REQUESTED_OPS);
    assertNotNull(ops);
    assertEquals(ops.toString(), 1, ops.size());
    ops.forEach(op -> {
      assertEquals(CollectionParams.CollectionAction.ADDREPLICA, op.getAction());
      assertEquals(1, op.getHints().size());
      Object o = op.getHints().get(Suggester.Hint.COLL_SHARD);
      // this may be a pair or a HashSet of pairs with size 1
      Pair<String, String> hint = null;
      if (o instanceof Pair) {
        hint = (Pair<String, String>)o;
      } else if (o instanceof Set) {
        assertEquals("unexpected number of hints: " + o, 1, ((Set)o).size());
        o = ((Set)o).iterator().next();
        assertTrue("unexpected hint: " + o, o instanceof Pair);
        hint = (Pair<String, String>)o;
      } else {
        fail("unexpected hints: " + o);
      }
      assertNotNull(hint);
      assertEquals(collectionName, hint.first());
      assertEquals("shard1", hint.second());
    });
  }

