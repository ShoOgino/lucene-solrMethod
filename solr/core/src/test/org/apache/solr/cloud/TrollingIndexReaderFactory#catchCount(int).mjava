  public static Trap catchCount(int boundary) {
    return setTrap(new Trap() {
      
      private AtomicInteger count = new AtomicInteger();
    
      @Override
      public String toString() {
        return ""+count.get()+"th tick of "+boundary+" allowed";
      }
      
      private boolean trigered;

      @Override
      protected boolean shouldExit() {
        int now = count.incrementAndGet();
        boolean trigger = now==boundary 
            || (now>boundary && LuceneTestCase.rarely(LuceneTestCase.random()));
        if (trigger) {
          Exception e = new Exception("stack sniffer"); 
          e.fillInStackTrace();
          recordStackTrace(e.getStackTrace());
          trigered = true;
        } 
        return trigger;
      }

      @Override
      public boolean hasCaught() {
        return trigered;
      }
    });
  }

