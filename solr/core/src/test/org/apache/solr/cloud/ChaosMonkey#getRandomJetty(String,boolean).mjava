  public JettySolrRunner getRandomJetty(String slice, boolean aggressivelyKillLeaders) throws KeeperException, InterruptedException {
    

    int numRunning = 0;
    int numRecovering = 0;
    int numActive = 0;
    
    for (CloudJettyRunner cloudJetty : shardToJetty.get(slice)) {
      boolean running = true;
      
      // get latest cloud state
      zkStateReader.updateCloudState(true);
      
      Slice theShards = zkStateReader.getCloudState().getSlices(collection)
          .get(slice);
      
      ZkNodeProps props = theShards.getShards().get(cloudJetty.coreNodeName);
      if (props == null) {
        throw new RuntimeException("shard name " + cloudJetty.coreNodeName + " not found in " + theShards.getShards().keySet());
      }
      
      String state = props.get(ZkStateReader.STATE_PROP);
      String nodeName = props.get(ZkStateReader.NODE_NAME_PROP);
      
      
      if (!cloudJetty.jetty.isRunning()
          || !state.equals(ZkStateReader.ACTIVE)
          || !zkStateReader.getCloudState().liveNodesContain(nodeName)) {
        running = false;
      }
      
      if (cloudJetty.jetty.isRunning()
          && state.equals(ZkStateReader.RECOVERING)
          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {
        numRecovering++;
      }
      
      if (cloudJetty.jetty.isRunning()
          && state.equals(ZkStateReader.ACTIVE)
          && zkStateReader.getCloudState().liveNodesContain(nodeName)) {
        numActive++;
      }
      
      if (running) {
        numRunning++;
      }
    }
    
    if (numActive < 2) {
      // we cannot kill anyone
      return null;
    }
    
    int chance = random.nextInt(10);
    JettySolrRunner jetty;
    if (chance <= 5 && aggressivelyKillLeaders) {
      // if killLeader, really aggressively go after leaders
      jetty = shardToLeaderJetty.get(slice).jetty;
    } else {
      // get random shard
      List<CloudJettyRunner> jetties = shardToJetty.get(slice);
      int index = random.nextInt(jetties.size());
      jetty = jetties.get(index).jetty;
      
      ZkNodeProps leader = zkStateReader.getLeaderProps(collection, slice);
      boolean isLeader = leader.get(ZkStateReader.NODE_NAME_PROP).equals(jetties.get(index).nodeName);
      if (!aggressivelyKillLeaders && isLeader) {
        // we don't kill leaders...
        return null;
      } 
    }

    if (jetty.getLocalPort() == -1) {
      // we can't kill the dead
      return null;
    }
    
    //System.out.println("num active:" + numActive + " for " + slice + " sac:" + jetty.getLocalPort());
    
    return jetty;
  }

