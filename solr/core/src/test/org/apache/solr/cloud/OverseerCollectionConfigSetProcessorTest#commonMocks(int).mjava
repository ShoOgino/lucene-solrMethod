  protected Set<String> commonMocks(int liveNodesCount) throws Exception {

    shardHandlerFactoryMock.getShardHandler();
    expectLastCall().andAnswer(() -> {
      log.info("SHARDHANDLER");
      return shardHandlerMock;
    }).anyTimes();
    workQueueMock.peekTopN(EasyMock.anyInt(), anyObject(Predicate.class), EasyMock.anyLong());
    expectLastCall().andAnswer(() -> {
      Object result;
      int count = 0;
      while ((result = queue.peek()) == null) {
        Thread.sleep(1000);
        count++;
        if (count > 1) return null;
      }

      return Arrays.asList(result);
    }).anyTimes();

    workQueueMock.getTailId();
    expectLastCall().andAnswer(() -> {
      Object result = null;
      Iterator iter = queue.iterator();
      while(iter.hasNext()) {
        result = iter.next();
      }
      return result==null ? null : ((QueueEvent)result).getId();
    }).anyTimes();

    workQueueMock.peek(true);
    expectLastCall().andAnswer(() -> {
      Object result;
      while ((result = queue.peek()) == null) {
        Thread.sleep(1000);
      }
      return result;
    }).anyTimes();
    
    workQueueMock.remove(anyObject(QueueEvent.class));
    expectLastCall().andAnswer(() -> {
      queue.remove(getCurrentArguments()[0]);
      return null;
    }).anyTimes();
    
    workQueueMock.poll();
    expectLastCall().andAnswer(() -> queue.poll()).anyTimes();

    zkStateReaderMock.getClusterState();
    expectLastCall().andAnswer(() -> clusterStateMock).anyTimes();
    
    zkStateReaderMock.getZkClient();
    expectLastCall().andAnswer(() -> solrZkClientMock).anyTimes();

    zkStateReaderMock.updateClusterState();

    clusterStateMock.getCollections();
    expectLastCall().andAnswer(() -> collectionsSet).anyTimes();
    final Set<String> liveNodes = new HashSet<>();
    for (int i = 0; i < liveNodesCount; i++) {
      final String address = "localhost:" + (8963 + i) + "_solr";
      liveNodes.add(address);
      
      zkStateReaderMock.getBaseUrlForNodeName(address);
      expectLastCall().andAnswer(() -> {
        // This works as long as this test does not use a
        // webapp context with an underscore in it
        return address.replaceAll("_", "/");
      }).anyTimes();
      
    }

    zkStateReaderMock.getClusterProperty("legacyCloud", "true");
    expectLastCall().andAnswer(() -> "true");

    solrZkClientMock.getZkClientTimeout();
    expectLastCall().andAnswer(() -> 30000).anyTimes();
    
    clusterStateMock.hasCollection(anyObject(String.class));
    expectLastCall().andAnswer(() -> {
      String key = (String) getCurrentArguments()[0];
      return collectionsSet.contains(key);
    }).anyTimes();


    clusterStateMock.getLiveNodes();
    expectLastCall().andAnswer(() -> liveNodes).anyTimes();
    solrZkClientMock.create(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());
    expectLastCall().andAnswer(() -> {
      String key = (String) getCurrentArguments()[0];
      zkMap.put(key, null);
      handleCreateCollMessage((byte[]) getCurrentArguments()[1]);
      return key;
    }).anyTimes();

    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyBoolean());
    expectLastCall().andAnswer(() -> {
      String key = (String) getCurrentArguments()[0];
      return key;
    }).anyTimes();

    solrZkClientMock.makePath(anyObject(String.class), anyObject(byte[].class), anyObject(CreateMode.class), anyBoolean());
    expectLastCall().andAnswer(() -> {
      String key = (String) getCurrentArguments()[0];
      return key;
    }).anyTimes();

    solrZkClientMock.exists(anyObject(String.class),anyBoolean());
    expectLastCall().andAnswer(() -> {
      String key = (String) getCurrentArguments()[0];
      return zkMap.containsKey(key);
    }).anyTimes();
    
    zkMap.put("/configs/myconfig", null);
    
    return liveNodes;
  }

