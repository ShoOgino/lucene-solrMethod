  @Test
  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 2-Aug-2018
  @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 14-Oct-2018
  public void testScheduledTrigger() throws Exception {
    CloudSolrClient solrClient = cluster.getSolrClient();

    // this collection will place 2 cores on 1st node and 1 core on 2nd node
    String collectionName = "testScheduledTrigger";
    CollectionAdminRequest.createCollection(collectionName, 1, 3)
        .setMaxShardsPerNode(5).process(solrClient);
    
    cluster.waitForActiveCollection(collectionName, 1, 3);

    // create a policy which allows only 1 core per node thereby creating a violation for the above collection
    String setClusterPolicy = "{\n" +
        "  \"set-cluster-policy\" : [\n" +
        "    {\"cores\" : \"<2\", \"node\" : \"#EACH\"}\n" +
        "  ]\n" +
        "}";
    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicy);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    // start a new node which can be used to balance the cluster as per policy
    JettySolrRunner newNode = cluster.startJettySolrRunner();
    cluster.waitForAllNodes(30);

    String setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : 'sched_trigger_integration1'," +
        "'event' : 'scheduled'," +
        "'startTime' : '" + new Date().toInstant().toString() + "'" +
        "'every' : '+3SECONDS'" +
        "'actions' : [" +
        "{'name' : 'compute','class':'" + ComputePlanAction.class.getName() + "'}," +
        "{'name' : 'execute','class':'" + ExecutePlanAction.class.getName() + "'}," +
        "{'name' : 'recorder', 'class': '" + ContextPropertiesRecorderAction.class.getName() + "'}" +
        "]}}";
    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);
    response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    assertTrue("ScheduledTrigger did not fire in time", triggerFiredLatch.await(45, TimeUnit.SECONDS));
    assertEquals(1, events.size());
    Map<String, Object> actionContextProps = actionContextPropertiesRef.get();
    assertNotNull(actionContextProps);
    TriggerEvent event = events.iterator().next();
    List<SolrRequest> operations = (List<SolrRequest>) actionContextProps.get("operations");
    assertNotNull(operations);
    assertEquals(1, operations.size());
    for (SolrRequest operation : operations) {
      SolrParams params = operation.getParams();
      assertEquals(newNode.getNodeName(), params.get("targetNode"));
    }
  }

