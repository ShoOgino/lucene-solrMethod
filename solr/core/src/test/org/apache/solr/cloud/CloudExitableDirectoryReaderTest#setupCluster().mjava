  @BeforeClass
  public static void setupCluster() throws Exception {
    // create one more node then shard, so that we also test the case of proxied requests.
    Builder clusterBuilder = configureCluster(3)
        .addConfig("conf", TEST_PATH().resolve("configsets").resolve("exitable-directory").resolve("conf"));
    clusterBuilder.withMetrics(true);
    clusterBuilder
        .configure();

    // pick an arbitrary node to use for our requests
    client = cluster.getRandomJetty(random()).newClient();

    CollectionAdminRequest.createCollection(COLLECTION, "conf", 2, 1)
        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);
    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,
        (n, c) -> DocCollection.isFullyActive(n, c, 2, 1));

    fiveHundredsByNode = new LinkedHashMap<>();
    int httpOk = 0;
    for (JettySolrRunner jetty: cluster.getJettySolrRunners()) {
      MetricRegistry metricRegistry = ((JettySolrRunnerWithMetrics)jetty).getMetricRegistry();
      
      httpOk += ((Metered) metricRegistry.getMetrics()
                 .get("org.eclipse.jetty.servlet.ServletContextHandler.2xx-responses")).getCount();
      
      Metered old = fiveHundredsByNode.put(jetty.getNodeName(),
          (Metered) metricRegistry.getMetrics()
             .get("org.eclipse.jetty.servlet.ServletContextHandler.5xx-responses"));
      assertNull("expecting uniq nodenames",old);
    }
    assertTrue("expecting some http activity during collection creation", httpOk > 0);
    indexDocs();
  }

