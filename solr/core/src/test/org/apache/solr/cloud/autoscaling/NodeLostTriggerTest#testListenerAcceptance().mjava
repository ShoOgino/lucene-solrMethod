  @Test
  //28-June-2018 @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 16-Apr-2018
  public void testListenerAcceptance() throws Exception {

    CoreContainer container = cluster.getJettySolrRunners().get(0).getCoreContainer();
    Map<String, Object> props = createTriggerProps(0);

    try (NodeLostTrigger trigger = new NodeLostTrigger("node_added_trigger")) {
      trigger.configure(container.getResourceLoader(), container.getZkController().getSolrCloudManager(), props);
      trigger.init();
      trigger.setProcessor(noFirstRunProcessor);

      JettySolrRunner newNode = cluster.startJettySolrRunner();

      cluster.waitForAllNodes(30);
      
      trigger.run(); // starts tracking live nodes
      
      // stop the newly created node
      newNode.stop();
      cluster.waitForJettyToStop(newNode);

      AtomicInteger callCount = new AtomicInteger(0);
      AtomicBoolean fired = new AtomicBoolean(false);

      trigger.setProcessor(event -> {
        if (callCount.incrementAndGet() < 2) {
          return false;
        } else  {
          fired.compareAndSet(false, true);
          return true;
        }
      });

      Thread.sleep(1000);
      
      trigger.run(); // first run should detect the lost node and fire immediately but listener isn't ready
      
      TimeOut timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      timeout.waitFor("Timeout waiting for callCount to hit at least 1", () -> callCount.get() >= 1);
      assertEquals(1, callCount.get());
      assertFalse(fired.get());
      trigger.run(); // second run should again fire
      timeout = new TimeOut(5, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      timeout.waitFor("Timeout waiting for callCount to hit at least 2", () -> callCount.get() >= 2);
      assertEquals(2, callCount.get());
      assertTrue(fired.get());
      trigger.run(); // should not fire
      assertEquals(2, callCount.get());
    }
  }

