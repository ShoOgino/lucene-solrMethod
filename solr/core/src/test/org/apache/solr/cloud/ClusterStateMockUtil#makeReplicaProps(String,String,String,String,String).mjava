  private static Map<String, Object> makeReplicaProps(String sliceName, String node, String replicaName, String stateCode, String replicaTypeCode) {
    if (node == null || node.trim().length() == 0) {
      node = "1";
    }

    Replica.State state = Replica.State.ACTIVE;
    if (stateCode != null) {
      switch (stateCode.charAt(0)) {
        case 'S':
          state = Replica.State.ACTIVE;
          break;
        case 'R':
          state = Replica.State.RECOVERING;
          break;
        case 'D':
          state = Replica.State.DOWN;
          break;
        case 'F':
          state = Replica.State.RECOVERY_FAILED;
          break;
        default:
          throw new IllegalArgumentException(
              "Unexpected state for replica: " + stateCode);
      }
    }

    Replica.Type replicaType = Replica.Type.NRT;
    switch (replicaTypeCode)  {
      case "t":
        replicaType = Replica.Type.TLOG;
        break;
      case "p":
        replicaType = Replica.Type.PULL;
        break;
    }

    Map<String,Object> replicaPropMap = new HashMap<>();
    replicaPropMap.put(ZkStateReader.NODE_NAME_PROP, "baseUrl" + node + "_");
    replicaPropMap.put(ZkStateReader.BASE_URL_PROP, "http://baseUrl" + node);
    replicaPropMap.put(ZkStateReader.STATE_PROP, state.toString());
    replicaPropMap.put(ZkStateReader.CORE_NAME_PROP, sliceName + "_" + replicaName);
    replicaPropMap.put(ZkStateReader.REPLICA_TYPE, replicaType.name());
    return replicaPropMap;
  }

