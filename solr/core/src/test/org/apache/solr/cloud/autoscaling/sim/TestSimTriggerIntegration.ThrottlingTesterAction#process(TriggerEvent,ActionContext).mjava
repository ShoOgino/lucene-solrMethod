    @Override
    public void process(TriggerEvent event, ActionContext actionContext) {
      boolean locked = lock.tryLock();
      if (!locked)  {
        log.info("We should never have a tryLock fail because actions are never supposed to be executed concurrently");
        return;
      }
      try {
        if (lastActionExecutedAt.get() != 0)  {
          if (log.isInfoEnabled()) {
            log.info("last action at {} time = {}", lastActionExecutedAt.get(), cluster.getTimeSource().getTimeNs());
          }
          if (TimeUnit.NANOSECONDS.toMillis(cluster.getTimeSource().getTimeNs() - lastActionExecutedAt.get()) <
              TimeUnit.SECONDS.toMillis(ScheduledTriggers.DEFAULT_ACTION_THROTTLE_PERIOD_SECONDS) - DELTA_MS) {
            if (log.isInfoEnabled()) {
              log.info("action executed again before minimum wait time from {}", event.getSource());
            }
            fail("TriggerListener was fired before the throttling period");
          }
        }
        if (onlyOnce.compareAndSet(false, true)) {
          if (log.isInfoEnabled()) {
            log.info("action executed from {}", event.getSource());
          }
          lastActionExecutedAt.set(cluster.getTimeSource().getTimeNs());
          getTriggerFiredLatch().countDown();
        } else  {
          if (log.isInfoEnabled()) {
            log.info("action executed more than once from {}", event.getSource());
          }
          fail("Trigger should not have fired more than once!");
        }
      } finally {
        lock.unlock();
      }
    }

