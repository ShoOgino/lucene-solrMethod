  @Repeat(iterations=2) // 2 times to make sure cleanup is complete and we can create the same collection
  // commented out on: 17-Feb-2019   @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // added 09-Aug-2018
  public void testCreateDelete() throws Exception {
    try {
      switch (random().nextInt(3)) {
        case 0:
          CollectionAdminRequest.createCollection(collectionName, "conf", 2, 0, 4, 0)
          .setMaxShardsPerNode(100)
          .process(cluster.getSolrClient());
          cluster.waitForActiveCollection(collectionName, 2, 8);
          break;
        case 1:
          // Sometimes don't use SolrJ
          String url = String.format(Locale.ROOT, "%s/admin/collections?action=CREATE&name=%s&collection.configName=%s&numShards=%s&tlogReplicas=%s&maxShardsPerNode=%s",
              cluster.getRandomJetty(random()).getBaseUrl(),
              collectionName, "conf",
              2,    // numShards
              4,    // tlogReplicas
              100); // maxShardsPerNode
          HttpGet createCollectionGet = new HttpGet(url);
          HttpResponse httpResponse = cluster.getSolrClient().getHttpClient().execute(createCollectionGet);
          assertEquals(200, httpResponse.getStatusLine().getStatusCode());
          cluster.waitForActiveCollection(collectionName, 2, 8);
          break;
        case 2:
          // Sometimes use V2 API
          url = cluster.getRandomJetty(random()).getBaseUrl().toString() + "/____v2/c";
          String requestBody = String.format(Locale.ROOT, "{create:{name:%s, config:%s, numShards:%s, tlogReplicas:%s, maxShardsPerNode:%s}}",
              collectionName, "conf",
              2,    // numShards
              4,    // tlogReplicas
              100); // maxShardsPerNode
          HttpPost createCollectionPost = new HttpPost(url);
          createCollectionPost.setHeader("Content-type", "application/json");
          createCollectionPost.setEntity(new StringEntity(requestBody));
          httpResponse = cluster.getSolrClient().getHttpClient().execute(createCollectionPost);
          assertEquals(200, httpResponse.getStatusLine().getStatusCode());
          cluster.waitForActiveCollection(collectionName, 2, 8);
          break;
      }
      
      boolean reloaded = false;
      while (true) {
        DocCollection docCollection = getCollectionState(collectionName);
        assertNotNull(docCollection);
        assertEquals("Expecting 2 shards",
            2, docCollection.getSlices().size());
        assertEquals("Expecting 4 relpicas per shard",
            8, docCollection.getReplicas().size());
        assertEquals("Expecting 8 tlog replicas, 4 per shard",
            8, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());
        assertEquals("Expecting no nrt replicas",
            0, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());
        assertEquals("Expecting no pull replicas",
            0, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());
        for (Slice s:docCollection.getSlices()) {
          assertTrue(s.getLeader().getType() == Replica.Type.TLOG);
          List<String> shardElectionNodes = cluster.getZkClient().getChildren(ZkStateReader.getShardLeadersElectPath(collectionName, s.getName()), null, true);
          assertEquals("Unexpected election nodes for Shard: " + s.getName() + ": " + Arrays.toString(shardElectionNodes.toArray()), 
              4, shardElectionNodes.size());
        }
        assertUlogPresence(docCollection);
        if (reloaded) {
          break;
        } else {
          // reload
          CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)
          .process(cluster.getSolrClient());
          assertEquals(0, response.getStatus());
          waitForState("failed waiting for active colletion", collectionName, clusterShape(2, 4));
          reloaded = true;
        }
      }
    } finally {
      zkClient().printLayoutToStdOut();
    }
  }

