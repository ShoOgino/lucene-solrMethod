  @Repeat(iterations=2) // 2 times to make sure cleanup is complete and we can create the same collection
  public void testCreateDelete() throws Exception {
    try {
      if (random().nextBoolean()) {
        CollectionAdminRequest.createCollection(collectionName, "conf", 2, 0, 4, 0)
        .setMaxShardsPerNode(100)
        .process(cluster.getSolrClient());
      } else {
        // Sometimes don't use SolrJ
        String url = String.format(Locale.ROOT, "%s/admin/collections?action=CREATE&name=%s&numShards=%s&tlogReplicas=%s&maxShardsPerNode=%s", 
            cluster.getRandomJetty(random()).getBaseUrl(), 
            collectionName,
            2,    // numShards
            4,    // tlogReplicas 
            100); // maxShardsPerNode
        HttpGet createCollectionRequest = new HttpGet(url);
        cluster.getSolrClient().getHttpClient().execute(createCollectionRequest);
      }
      
      boolean reloaded = false;
      while (true) {
        DocCollection docCollection = getCollectionState(collectionName);
        assertNotNull(docCollection);
        assertEquals("Expecting 2 shards",
            2, docCollection.getSlices().size());
        assertEquals("Expecting 4 relpicas per shard",
            8, docCollection.getReplicas().size());
        assertEquals("Expecting 8 tlog replicas, 4 per shard",
            8, docCollection.getReplicas(EnumSet.of(Replica.Type.TLOG)).size());
        assertEquals("Expecting no nrt replicas",
            0, docCollection.getReplicas(EnumSet.of(Replica.Type.NRT)).size());
        assertEquals("Expecting no pull replicas",
            0, docCollection.getReplicas(EnumSet.of(Replica.Type.PULL)).size());
        for (Slice s:docCollection.getSlices()) {
          assertTrue(s.getLeader().getType() == Replica.Type.TLOG);
          List<String> shardElectionNodes = cluster.getZkClient().getChildren(ZkStateReader.getShardLeadersElectPath(collectionName, s.getName()), null, true);
          assertEquals("Unexpected election nodes for Shard: " + s.getName() + ": " + Arrays.toString(shardElectionNodes.toArray()), 
              4, shardElectionNodes.size());
        }
        assertUlogPresence(docCollection);
        if (reloaded) {
          break;
        } else {
          // reload
          CollectionAdminResponse response = CollectionAdminRequest.reloadCollection(collectionName)
          .process(cluster.getSolrClient());
          assertEquals(0, response.getStatus());
          reloaded = true;
        }
      }
    } finally {
      zkClient().printLayoutToStdOut();
    }
  }

