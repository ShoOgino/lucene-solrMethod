  /**
   * Asserts that requests aren't always sent to the same poor node. See SOLR-7493
   */
  private void testRequestTracking() throws Exception {

    CollectionAdminRequest.createCollection("a1x2", "conf1", 1, 2)
        .setCreateNodeSet(nodeNames.get(0) + ',' + nodeNames.get(1))
        .process(cloudClient);

    CollectionAdminRequest.createCollection("b1x1", "conf1", 1, 1)
        .setCreateNodeSet(nodeNames.get(2))
        .process(cloudClient);

    waitForRecoveriesToFinish("a1x2", true);
    waitForRecoveriesToFinish("b1x1", true);

    cloudClient.getZkStateReader().forceUpdateCollection("b1x1");

    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();
    DocCollection b1x1 = clusterState.getCollection("b1x1");
    Collection<Replica> replicas = b1x1.getSlice("shard1").getReplicas();
    assertEquals(1, replicas.size());
    String baseUrl = replicas.iterator().next().getStr(ZkStateReader.BASE_URL_PROP);
    if (!baseUrl.endsWith("/")) baseUrl += "/";
    try (HttpSolrClient client = getHttpSolrClient(baseUrl + "a1x2")) {
      client.setSoTimeout(5000);
      client.setConnectionTimeout(2000);

      log.info("Making requests to " + baseUrl + "a1x2");
      for (int i = 0; i < 10; i++) {
        client.query(new SolrQuery("*:*"));
      }
    }

    Map<String, Integer> shardVsCount = new HashMap<>();
    for (JettySolrRunner runner : jettys) {
      CoreContainer container = runner.getCoreContainer();
      SolrMetricManager metricManager = container.getMetricManager();
      for (SolrCore core : container.getCores()) {
        String registry = core.getCoreMetricManager().getRegistryName();
        Counter cnt = metricManager.counter(null, registry, "requests", "QUERY./select");
        SolrRequestHandler select = core.getRequestHandler("");
//        long c = (long) select.getStatistics().get("requests");
        shardVsCount.put(core.getName(), (int) cnt.getCount());
      }
    }

    log.info("Shard count map = " + shardVsCount);

    for (Map.Entry<String, Integer> entry : shardVsCount.entrySet()) {
      assertTrue("Shard " + entry.getKey() + " received all 10 requests", entry.getValue() != 10);
    }
  }

