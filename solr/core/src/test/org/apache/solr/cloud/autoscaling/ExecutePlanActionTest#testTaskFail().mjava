  @Test
  public void testTaskFail() throws Exception  {
    TestInjection.failInExecutePlanAction = true;
    CloudSolrClient solrClient = cluster.getSolrClient();
    String triggerName = "node_lost_trigger3";

    String setTriggerCommand = "{" +
        "'set-trigger' : {" +
        "'name' : '" + triggerName + "'," +
        "'event' : 'nodeLost'," +
        "'waitFor' : '1s'," +
        "'enabled' : true," +
        "'actions' : [{'name':'start', 'class' : '" + StartAction.class.getName() + "'}," +
        "{'name':'compute_plan','class':'solr.ComputePlanAction'}," +
        "{'name':'execute_plan','class':'solr.ExecutePlanAction'}," +
        "{'name':'finish','class':'" + FinishAction.class.getName() + "'}]" +
        "}}";
    @SuppressWarnings({"rawtypes"})
    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);
    NamedList<Object> response = solrClient.request(req);
    assertEquals(response.get("result").toString(), "success");

    String collectionName = "testTaskFail";
    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName,
        "conf", 1, 2);
    create.setMaxShardsPerNode(1);
    create.process(solrClient);

    cluster.waitForActiveCollection(collectionName, 1, 2);

    waitForState("Timed out waiting for replicas of new collection to be active",
        collectionName, clusterShape(1, 2));

    // don't stop the jetty that runs our SolrCloudManager
    JettySolrRunner runner = cluster.stopJettySolrRunner(1);
    cluster.waitForJettyToStop(runner);

    boolean await = startedProcessing.await(10, TimeUnit.SECONDS);
    assertTrue("did not start processing event in time", await);
    await = finishedProcessing.await(2, TimeUnit.SECONDS);
    assertFalse("finished processing event but should fail", await);

    String path = ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH + "/" + triggerName + "/execute_plan";
    assertTrue(path + " does not exist", zkClient().exists(path, true));
    List<String> requests = zkClient().getChildren(path, null, true);
    assertTrue("there should be no requests pending but got " + requests, requests.isEmpty());

    // the task never completed - we actually lost a replica
    try {
      CloudUtil.waitForState(cloudManager, collectionName, 5, TimeUnit.SECONDS,
          CloudUtil.clusterShape(1, 2));
      fail("completed a task that should have failed");
    } catch (TimeoutException te) {
      // expected
    }
  }

