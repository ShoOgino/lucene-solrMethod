  /** 
   * Test some small, hand crafted, but non-trivial queries that are
   * easier to trace/debug then a pure random monstrosity.
   * (ie: if something obvious gets broken, this test may fail faster and in a more obvious way then testRandom)
   */
  public void testBespoke() throws Exception {

    { // sanity check our test methods can handle a query matching no docs
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      TermFacet top = new TermFacet(strfield(9), new JoinDomain(strfield(5), strfield(9), strfield(9)+":[* TO *]"));
      top.subFacets.put("sub", new TermFacet(strfield(11), new JoinDomain(strfield(8), strfield(8), null)));
      facets.put("empty_top", top);
      assertFacetCountsAreCorrect(facets, strfield(7) + ":bogus");
    }
    
    { // sanity check our test methods can handle a query where a facet filter prevents any doc from having terms
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      TermFacet top = new TermFacet(strfield(9), new JoinDomain(null, null, "-*:*"));
      top.subFacets.put("sub", new TermFacet(strfield(11), new JoinDomain(strfield(8), strfield(8), null)));
      facets.put("filtered_top", top);
      assertFacetCountsAreCorrect(facets, "*:*");
    }
    
    { // sanity check our test methods can handle a query where a facet filter prevents any doc from having sub-terms
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      TermFacet top = new TermFacet(strfield(9), new JoinDomain(strfield(8), strfield(8), null));
      top.subFacets.put("sub", new TermFacet(strfield(11), new JoinDomain(null, null, "-*:*")));
      facets.put("filtered_top", top);
      assertFacetCountsAreCorrect(facets, "*:*");
    }
  
    { // strings
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      TermFacet top = new TermFacet(strfield(9), new JoinDomain(strfield(5), strfield(9), strfield(9)+":[* TO *]"));
      top.subFacets.put("facet_5", new TermFacet(strfield(11), new JoinDomain(strfield(8), strfield(8), null)));
      facets.put("facet_4", top);
      assertFacetCountsAreCorrect(facets, "("+strfield(7)+":6 OR "+strfield(9)+":6 OR "+strfield(6)+":19 OR "+strfield(0)+":11)");
    }

    { // ints
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      TermFacet top = new TermFacet(intfield(9), new JoinDomain(intfield(5), intfield(9), null));
      facets.put("top", top);
      assertFacetCountsAreCorrect(facets, "("+intfield(7)+":6 OR "+intfield(3)+":3)");
    }

    { // some domains with filter only, no actual join
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      TermFacet top = new TermFacet(strfield(9), new JoinDomain(null, null, strfield(9)+":[* TO *]"));
      top.subFacets.put("facet_5", new TermFacet(strfield(11), new JoinDomain(null, null, strfield(3)+":[* TO 5]")));
      facets.put("top", top);
      assertFacetCountsAreCorrect(facets, "("+strfield(7)+":6 OR "+strfield(9)+":6 OR "+strfield(6)+":19 OR "+strfield(0)+":11)");

    }

    { // low limits, explicit refinement
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      TermFacet top = new TermFacet(strfield(9),
                                    new JoinDomain(strfield(5), strfield(9), strfield(9)+":[* TO *]"),
                                    5, 0, true);
      top.subFacets.put("facet_5", new TermFacet(strfield(11),
                                                 new JoinDomain(strfield(8), strfield(8), null),
                                                 10, 0, true));
      facets.put("facet_4", top);
      assertFacetCountsAreCorrect(facets, "("+strfield(7)+":6 OR "+strfield(9)+":6 OR "+strfield(6)+":19 OR "+strfield(0)+":11)");
    }
    
    { // low limit, high overrequest
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      TermFacet top = new TermFacet(strfield(9),
                                    new JoinDomain(strfield(5), strfield(9), strfield(9)+":[* TO *]"),
                                    5, UNIQUE_FIELD_VALS + 10, false);
      top.subFacets.put("facet_5", new TermFacet(strfield(11),
                                                 new JoinDomain(strfield(8), strfield(8), null),
                                                 10, UNIQUE_FIELD_VALS + 10, false));
      facets.put("facet_4", top);
      assertFacetCountsAreCorrect(facets, "("+strfield(7)+":6 OR "+strfield(9)+":6 OR "+strfield(6)+":19 OR "+strfield(0)+":11)");
    }
    
    { // low limit, low overrequest, explicit refinement
      Map<String,TermFacet> facets = new LinkedHashMap<>();
      TermFacet top = new TermFacet(strfield(9),
                                    new JoinDomain(strfield(5), strfield(9), strfield(9)+":[* TO *]"),
                                    5, 7, true);
      top.subFacets.put("facet_5", new TermFacet(strfield(11),
                                                 new JoinDomain(strfield(8), strfield(8), null),
                                                 10, 7, true));
      facets.put("facet_4", top);
      assertFacetCountsAreCorrect(facets, "("+strfield(7)+":6 OR "+strfield(9)+":6 OR "+strfield(6)+":19 OR "+strfield(0)+":11)");
    }
    
  }

