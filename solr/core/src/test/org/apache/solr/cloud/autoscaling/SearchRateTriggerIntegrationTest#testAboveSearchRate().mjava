  @Test
  @SuppressWarnings({"unchecked"})
  public void testAboveSearchRate() throws Exception {
    CloudSolrClient solrClient = cluster.getSolrClient();
    String COLL1 = "aboveRate_collection";
    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(COLL1,
        "conf", 1, 2);
    create.process(solrClient);

    CloudUtil.waitForState(cloudManager, COLL1, 60, TimeUnit.SECONDS,
        CloudUtil.clusterShape(1, 2));

    CloudTestUtils.assertAutoScalingRequest
      (cloudManager, 
       // the trigger is initially disabled so that we have the time to set up listeners
       // and generate the traffic
       "{" +
       "'set-trigger' : {" +
       "'name' : 'search_rate_trigger1'," +
       "'event' : 'searchRate'," +
       "'waitFor' : '" + waitForSeconds + "s'," +
       "'enabled' : false," +
       "'collections' : '" + COLL1 + "'," +
       "'aboveRate' : 1.0," +
       "'belowRate' : 0.1," +
       "'actions' : [" +
       "{'name':'compute','class':'" + ComputePlanAction.class.getName() + "'}," +
       "{'name':'execute','class':'" + ExecutePlanAction.class.getName() + "'}" +
       "]" +
       "}}");

    CloudTestUtils.assertAutoScalingRequest
      (cloudManager, 
       "{" +
       "'set-listener' : " +
       "{" +
       "'name' : 'started'," +
       "'trigger' : 'search_rate_trigger1'," +
       "'stage' : ['STARTED']," +
       "'class' : '" + StartedProcessingListener.class.getName() + "'" +
       "}" +
       "}");

    CloudTestUtils.assertAutoScalingRequest
      (cloudManager, 
       "{" +
       "'set-listener' : " +
       "{" +
       "'name' : 'srt'," +
       "'trigger' : 'search_rate_trigger1'," +
       "'stage' : ['FAILED','SUCCEEDED']," +
       "'afterAction': ['compute', 'execute']," +
       "'class' : '" + CapturingTriggerListener.class.getName() + "'" +
       "}" +
       "}");
    listenerEventLatch = new CountDownLatch(3);

    CloudTestUtils.assertAutoScalingRequest
      (cloudManager, 
       "{" +
       "'set-listener' : " +
       "{" +
       "'name' : 'finished'," +
       "'trigger' : 'search_rate_trigger1'," +
       "'stage' : ['SUCCEEDED']," +
       "'class' : '" + FinishedProcessingListener.class.getName() + "'" +
       "}" +
       "}");

    SolrParams query = params(CommonParams.Q, "*:*");
    for (int i = 0; i < 500; i++) {
      solrClient.query(COLL1, query);
    }
    
    // enable the trigger
    CloudTestUtils.assertAutoScalingRequest
      (cloudManager, 
       "{" +
       "'resume-trigger' : {" +
       "'name' : 'search_rate_trigger1'" +
       "}" +
       "}");

    assertTrue("The trigger did not start in a reasonable amount of time",
               started.await(60, TimeUnit.SECONDS));
    
    assertTrue("The trigger did not finish in a reasonable amount of time",
               started.await(60, TimeUnit.SECONDS));
    
    assertTrue("the listener should have recorded all events w/in a reasonable amount of time",
               listenerEventLatch.await(60, TimeUnit.SECONDS));

    // suspend the trigger
    CloudTestUtils.assertAutoScalingRequest
      (cloudManager, 
       "{" +
       "'suspend-trigger' : {" +
       "'name' : 'search_rate_trigger1'" +
       "}" +
       "}");

    List<CapturedEvent> events = listenerEvents.get("srt");
    assertEquals(listenerEvents.toString(), 3, events.size());
    assertEquals("AFTER_ACTION", events.get(0).stage.toString());
    assertEquals("compute", events.get(0).actionName);
    assertEquals("AFTER_ACTION", events.get(1).stage.toString());
    assertEquals("execute", events.get(1).actionName);
    assertEquals("SUCCEEDED", events.get(2).stage.toString());
    assertNull(events.get(2).actionName);

    CapturedEvent ev = events.get(0);
    long now = timeSource.getTimeNs();
    // verify waitFor
    assertTrue(TimeUnit.SECONDS.convert(waitForSeconds, TimeUnit.NANOSECONDS) - WAIT_FOR_DELTA_NANOS <= now - ev.event.getEventTime());
    Map<String, Double> nodeRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_NODES);
    assertNotNull("nodeRates", nodeRates);
    // no node violations because node rates weren't set in the config
    assertTrue(nodeRates.toString(), nodeRates.isEmpty());
    List<Replica> replicaRates = (List<Replica>) ev.event.getProperties().get(SearchRateTrigger.HOT_REPLICAS);
    assertNotNull("replicaRates", replicaRates);
    assertTrue(replicaRates.toString(), replicaRates.size() > 0);
    AtomicDouble totalReplicaRate = new AtomicDouble();
    replicaRates.forEach(r -> {
      assertTrue(r.toString(), r.get("rate") != null);
      totalReplicaRate.addAndGet((Double) r.get("rate"));
    });
    Map<String, Object> shardRates = (Map<String, Object>) ev.event.getProperties().get(SearchRateTrigger.HOT_SHARDS);
    assertNotNull("shardRates", shardRates);
    assertEquals(shardRates.toString(), 1, shardRates.size());
    shardRates = (Map<String, Object>) shardRates.get(COLL1);
    assertNotNull("shardRates", shardRates);
    assertEquals(shardRates.toString(), 1, shardRates.size());
    AtomicDouble totalShardRate = new AtomicDouble();
    shardRates.forEach((s, r) -> totalShardRate.addAndGet((Double) r));
    Map<String, Double> collectionRates = (Map<String, Double>) ev.event.getProperties().get(SearchRateTrigger.HOT_COLLECTIONS);
    assertNotNull("collectionRates", collectionRates);
    assertEquals(collectionRates.toString(), 1, collectionRates.size());
    Double collectionRate = collectionRates.get(COLL1);
    assertNotNull(collectionRate);
    assertTrue(collectionRate > 5.0);
    // two replicas - the trigger calculates average over all searchable replicas
    assertEquals(collectionRate / 2, totalShardRate.get(), 5.0);
    assertEquals(collectionRate, totalReplicaRate.get(), 5.0);

    // check operations
    List<MapWriter> ops = (List<MapWriter>) ev.context.get("properties.operations");
    assertNotNull(ops);
    assertTrue(ops.size() > 1);
    for (MapWriter m : ops) {
      assertEquals("ADDREPLICA", m._get("params.action",null));
    }
  }

