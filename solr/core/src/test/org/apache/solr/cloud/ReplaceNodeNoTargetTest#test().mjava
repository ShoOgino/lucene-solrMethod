  @Test
  @LuceneTestCase.AwaitsFix(bugUrl = "https://issues.apache.org/jira/browse/SOLR-11067")
  public void test() throws Exception {
    cluster.waitForAllNodes(5000);
    String coll = "replacenodetest_coll_notarget";
    log.info("total_jettys: " + cluster.getJettySolrRunners().size());

    CloudSolrClient cloudClient = cluster.getSolrClient();
    Set<String> liveNodes = cloudClient.getZkStateReader().getClusterState().getLiveNodes();
    ArrayList<String> l = new ArrayList<>(liveNodes);
    Collections.shuffle(l, random());
    String node2bdecommissioned = l.get(0);
    CloudSolrClient solrClient = cluster.getSolrClient();
    String setClusterPolicyCommand = "{" +
        " 'set-cluster-policy': [" +
        "      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'}]}";
    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);
    solrClient.request(req);

    log.info("Creating collection...");
    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(coll, "conf1", 5, 2, 0, 0);
    cloudClient.request(create);

    log.info("Current core status list for node we plan to decommision: {} => {}",
             node2bdecommissioned,
             getCoreStatusForNamedNode(cloudClient, node2bdecommissioned).getCoreStatus());
    
    log.info("Decommisioning node: " + node2bdecommissioned);
    createReplaceNodeRequest(node2bdecommissioned, null, null).processAsync("001", cloudClient);
    CollectionAdminRequest.RequestStatus requestStatus = CollectionAdminRequest.requestStatus("001");
    boolean success = false;
    CollectionAdminRequest.RequestStatusResponse rsp = null;
    for (int i = 0; i < 300; i++) {
      rsp = requestStatus.process(cloudClient);
      if (rsp.getRequestStatus() == RequestStatusState.COMPLETED) {
        success = true;
        break;
      }
      assertFalse("async replace node request aparently failed: " + rsp.toString(),
                  
                  rsp.getRequestStatus() == RequestStatusState.FAILED);
      Thread.sleep(50);
    }
    assertTrue("async replace node request should have finished successfully by now, last status: " + rsp,
               success);
    CoreAdminResponse status = getCoreStatusForNamedNode(cloudClient, node2bdecommissioned);
    assertEquals("Expected no cores for decommisioned node: "
                 + status.getCoreStatus().toString(),
                 0, status.getCoreStatus().size());
  }

