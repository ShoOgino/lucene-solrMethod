  public void testRebalanceLeaders() throws Exception {
    createAndWaitForCollection(1,0,2,0);
    CloudSolrClient cloudClient = cluster.getSolrClient();
    new UpdateRequest()
        .deleteByQuery("*:*")
        .commit(cluster.getSolrClient(), collectionName);

    // Find a replica which isn't leader
    DocCollection docCollection = cloudClient.getZkStateReader().getClusterState().getCollection(collectionName);
    Slice slice = docCollection.getSlices().iterator().next();
    Replica newLeader = null;
    for (Replica replica : slice.getReplicas()) {
      if (slice.getLeader() == replica) continue;
      newLeader = replica;
      break;
    }
    assertNotNull("Failed to find a candidate of new leader", newLeader);

    // Set preferredLeader flag to the replica
    ModifiableSolrParams params = new ModifiableSolrParams();
    params.set("action", CollectionParams.CollectionAction.ADDREPLICAPROP.toString());
    params.set("collection", collectionName);
    params.set("shard", slice.getName());
    params.set("replica", newLeader.getName());
    params.set("property", "preferredLeader");
    params.set("property.value", "true");
    QueryRequest request = new QueryRequest(params);
    request.setPath("/admin/collections");
    cloudClient.request(request);

    // Wait until a preferredleader flag is set to the new leader candidate
    TimeOut timeout = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);
    while (!timeout.hasTimedOut()) {
      Map<String, Slice> slices = cloudClient.getZkStateReader().getClusterState().getCollection(collectionName).getSlicesMap();
      Replica me = slices.get(slice.getName()).getReplica(newLeader.getName());
      if (me.getBool("property.preferredleader", false)) {
        break;
      }
      Thread.sleep(100);
    }
    assertFalse("Timeout waiting for setting preferredleader flag", timeout.hasTimedOut());

    // Rebalance leaders
    params = new ModifiableSolrParams();
    params.set("action", CollectionParams.CollectionAction.REBALANCELEADERS.toString());
    params.set("collection", collectionName);
    params.set("maxAtOnce", "10");
    request = new QueryRequest(params);
    request.setPath("/admin/collections");
    cloudClient.request(request);

    // Wait until a new leader is elected
    timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);
    while (!timeout.hasTimedOut()) {
      docCollection = getCollectionState(collectionName);
      Replica leader = docCollection.getSlice(slice.getName()).getLeader();
      if (leader != null && leader.getName().equals(newLeader.getName()) &&
          leader.isActive(cluster.getSolrClient().getZkStateReader().getClusterState().getLiveNodes())) {
        break;
      }
      Thread.sleep(100);
    }
    assertFalse("Timeout waiting for a new leader to be elected", timeout.hasTimedOut());

    new UpdateRequest()
        .add(sdoc("id", "1"))
        .add(sdoc("id", "2"))
        .add(sdoc("id", "3"))
        .add(sdoc("id", "4"))
        .process(cloudClient, collectionName);
    checkRTG(1,4, cluster.getJettySolrRunners());
    new UpdateRequest()
        .commit(cloudClient, collectionName);
    waitForNumDocsInAllActiveReplicas(4);
  }

