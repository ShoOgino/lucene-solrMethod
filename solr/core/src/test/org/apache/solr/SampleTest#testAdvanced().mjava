  /**
   * Demonstration of some of the more complex ways to use the base class
   */
  @Test
  public void testAdvanced() throws Exception {
    lrf.args.put(CommonParams.VERSION,"2.2");        
    assertU("less common case, a complex addition with options",
            add(doc("id", "4059",
                    "subject", "Who Me?"),
                "overwrite", "false"));

    assertU("or just make the raw XML yourself",
            "<add overwrite=\"false\">" +
            doc("id", "4059",
                "subject", "Who Me Again?") + "</add>");

    /* or really make the xml yourself */
    assertU("<add><doc><field name=\"id\">4055</field>"
            +"<field name=\"subject\">Hoss the Hoss man Hostetter</field>"
            +"</doc></add>");
        
    assertU("<commit/>");
    assertU("<optimize/>");
        
    /* access the default LocalRequestFactory directly to make a request */
    SolrQueryRequest req = lrf.makeRequest( "subject:Hoss" );
    assertQ("couldn't find subject hoss",
            req
            ,"//result[@numFound=1]"
            ,"//int[@name='id'][.='4055']"
            );

    /* make your own LocalRequestFactory to build a request
     *
     * Note: the qt proves we are using our custom config...
     */
    TestHarness.LocalRequestFactory l = h.getRequestFactory
      ("crazy_custom_qt",100,200,CommonParams.VERSION,"2.2");
    assertQ("how did i find Mack Daddy? ",
            l.makeRequest( "Mack Daddy" )
            ,"//result[@numFound=0]"
            );

    /* you can access the harness directly as well*/
    assertNull("how did i find Mack Daddy? ",
               h.validateQuery(l.makeRequest( "Mack Daddy" )
                               ,"//result[@numFound=0]"
                               ));
        
  }

