  @Test
  public void testBlockCacheConcurrent() throws Exception {
    Random rnd = random();

    final int blocksInTest = 400;  // pick something bigger than 256, since that would lead to a slab size of 64 blocks and the bitset locks would consist of a single word.
    final int blockSize = 64;
    final int slabSize = blocksInTest * blockSize / 4;
    final long totalMemory = 2 * slabSize;  // 2 slabs of memory, so only half of what is needed for all blocks

    /***
    final int blocksInTest = 16384;  // pick something bigger than 256, since that would lead to a slab size of 64 blocks and the bitset locks would consist of a single word.
    final int blockSize = 1024;
    final int slabSize = blocksInTest * blockSize / 4;
    final long totalMemory = 2 * slabSize;  // 2 slabs of memory, so only half of what is needed for all blocks
    ***/

    final int nThreads=64;
    final int nReads=1000000;
    final int readsPerThread=nReads/nThreads;
    final int readLastBlockOdds=10; // odds (1 in N) of the next block operation being on the same block as the previous operation... helps flush concurrency issues
    final int showErrors=50; // show first 50 validation failures

    final BlockCache blockCache = new BlockCache(new Metrics(), true, totalMemory, slabSize, blockSize);

    final AtomicBoolean failed = new AtomicBoolean(false);
    final AtomicLong hitsInCache = new AtomicLong();
    final AtomicLong missesInCache = new AtomicLong();
    final AtomicLong storeFails = new AtomicLong();
    final AtomicLong lastBlock = new AtomicLong();
    final AtomicLong validateFails = new AtomicLong(0);

    final int file = 0;


    Thread[] threads = new Thread[nThreads];
    for (int i=0; i<threads.length; i++) {
      final int threadnum = i;
      final long seed = rnd.nextLong();

      threads[i] = new Thread() {
        Random r;
        BlockCacheKey blockCacheKey;
        byte[] buffer = new byte[blockSize];

        @Override
        public void run() {
          try {
            r = new Random(seed);
            blockCacheKey = new BlockCacheKey();
            blockCacheKey.setFile(file);
            blockCacheKey.setPath("/foo.txt");

            test(readsPerThread);

          } catch (Throwable e) {
            failed.set(true);
            e.printStackTrace();
          }
        }

        public void test(int iter) {
          for (int i=0; i<iter; i++) {
            test();
          }
        }

        public void test() {
          long block = r.nextInt(blocksInTest);
          if (r.nextInt(readLastBlockOdds) == 0) block = lastBlock.get();  // some percent of the time, try to read the last block another thread was just reading/writing
          lastBlock.set(block);


          int blockOffset = r.nextInt(blockSize);
          long globalOffset = block * blockSize + blockOffset;
          int len = r.nextInt(blockSize - blockOffset) + 1;  // TODO: bias toward smaller reads?

          blockCacheKey.setBlock(block);

          if (blockCache.fetch(blockCacheKey, buffer, blockOffset, 0, len)) {
            hitsInCache.incrementAndGet();
            // validate returned bytes
            for (int i = 0; i < len; i++) {
              long globalPos = globalOffset + i;
              if (buffer[i] != getByte(globalPos)) {
                failed.set(true);
                if (validateFails.incrementAndGet() <= showErrors) System.out.println("ERROR: read was " + "block=" + block + " blockOffset=" + blockOffset + " len=" + len + " globalPos=" + globalPos + " localReadOffset=" + i + " got=" + buffer[i] + " expected=" + getByte(globalPos));
                break;
              }
            }
          } else {
            missesInCache.incrementAndGet();

            // OK, we should "get" the data and then cache the block
            for (int i = 0; i < blockSize; i++) {
              buffer[i] = getByte(block * blockSize + i);
            }
            boolean cached = blockCache.store(blockCacheKey, 0, buffer, 0, blockSize);
            if (!cached) {
              storeFails.incrementAndGet();
            }
          }

        }

      };
    }


    for (Thread thread : threads) {
      thread.start();
    }

    for (Thread thread : threads) {
      thread.join();
    }

    System.out.println("# of Elements = " + blockCache.getSize());
    System.out.println("Cache Hits = " + hitsInCache.get());
    System.out.println("Cache Misses = " + missesInCache.get());
    System.out.println("Cache Store Fails = " + storeFails.get());
    System.out.println("Blocks with Errors = " + validateFails.get());

    assertFalse( failed.get() );
  }

