  // Sanity test the underlying concurrent map that BlockCache is using, in the same way that we use it.
  @Test
  public void testCacheConcurrent() throws Exception {
    Random rnd = random();

    // TODO: introduce more randomness in cache size, hit rate, etc
    final int blocksInTest = 400;
    final int maxEntries = blocksInTest / 2;

    final int nThreads = 64;
    final int nReads = 1000000;
    final int readsPerThread = nReads / nThreads;
    final int readLastBlockOdds = 10; // odds (1 in N) of the next block operation being on the same block as the previous operation... helps flush concurrency issues
    final int updateAnywayOdds = 3; // sometimes insert a new entry for the key even if one was found
    final int invalidateOdds = 20; // sometimes invalidate an entry

    final AtomicLong hits = new AtomicLong();
    final AtomicLong removals = new AtomicLong();
    final AtomicLong inserts = new AtomicLong();

    RemovalListener<Long, Val> listener = (k, v, removalCause) -> {
      removals.incrementAndGet();
      if (v == null) {
        if (removalCause != RemovalCause.COLLECTED) {
          throw new RuntimeException("Null value for key " + k + ", removalCause=" + removalCause);
        } else {
          return;
        }
      }
      assertEquals("cache key differs from value's key", (Long) k, (Long) v.key);
      if (!v.live.compareAndSet(true, false)) {
        throw new RuntimeException("listener called more than once! k=" + k + " v=" + v + " removalCause=" + removalCause);
        // return;  // use this variant if listeners may be called more than once
      }
    };


    com.github.benmanes.caffeine.cache.Cache<Long, Val> cache = Caffeine.newBuilder()
        .removalListener(listener)
        .maximumSize(maxEntries)
        .executor(Runnable::run)
        .build();

    final AtomicBoolean failed = new AtomicBoolean(false);
    final AtomicLong lastBlock = new AtomicLong();
    final AtomicLong maxObservedSize = new AtomicLong();

    Thread[] threads = new Thread[nThreads];
    for (int i = 0; i < threads.length; i++) {
      final long seed = rnd.nextLong();

      threads[i] = new Thread() {
        Random r;

        @Override
        public void run() {
          try {
            r = new Random(seed);
            test(readsPerThread);
          } catch (Throwable e) {
            failed.set(true);
            e.printStackTrace();
          }
        }

        public void test(int iter) {
          for (int i = 0; i < iter; i++) {
            test();
          }
        }

        boolean odds(int odds) {
          return odds > 0 && r.nextInt(odds) == 0;
        }

        long getBlock() {
          long block;
          if (odds(readLastBlockOdds)) {
            block = lastBlock.get();  // some percent of the time, try to read the last block another thread was just reading/writing
          } else {
            block = r.nextInt(blocksInTest);
            lastBlock.set(block);
          }
          return block;
        }

        public void test() {
          Long k = getBlock();

          if (odds(invalidateOdds)) {
            // This tests that invalidate always ends up calling the removal listener exactly once
            // even if the entry may be in the process of concurrent removal in a different thread.
            // This also inadvertently tests concurrently inserting, getting, and invalidating the same key, which we don't need in Solr's BlockCache.
            cache.invalidate(k);
          }

          Val v = cache.getIfPresent(k);
          if (v != null) {
            hits.incrementAndGet();
            assertEquals("cache key differs from value's key", (Long) k, (Long) v.key);
          }

          if (v == null || odds(updateAnywayOdds)) {
            v = new Val();
            v.key = k;
            cache.put(k, v);
            inserts.incrementAndGet();
          }

          long sz = cache.estimatedSize();
          if (sz > maxObservedSize.get()) maxObservedSize.set(sz);  // race condition here, but an estimate is OK

        }
      };
    }


    for (Thread thread : threads) {
      thread.start();
    }

    for (Thread thread : threads) {
      thread.join();
    }


    // Thread.sleep(1000); // need to wait if executor is used for listener?
    long cacheSize = cache.estimatedSize();
    System.out.println("Done! # of Elements = " + cacheSize + " inserts=" + inserts.get() + " removals=" + removals.get() + " hits=" + hits.get() + " maxObservedSize=" + maxObservedSize);
    assertEquals("cache size different from (inserts - removal)", cacheSize,  inserts.get() - removals.get());
    assertFalse(failed.get());
  }

