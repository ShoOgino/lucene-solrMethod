  public void testCopyFieldRules() throws Exception {
    RestTestHarness harness = restTestHarness;

    Map m = getObj(harness, "name", "fields");
    assertNotNull("'name' field does not exist in the schema", m);

    m = getObj(harness, "bind", "fields");
    assertNotNull("'bind' field does not exist in the schema", m);

    List l = getSourceCopyFields(harness, "bleh_s");
    assertTrue("'bleh_s' copyField rule exists in the schema", l.isEmpty());

    String payload = "{\n" +
        "          'add-copy-field' : {\n" +
        "                       'source' :'bleh_s',\n" +
        "                       'dest':'name'\n" +
        "                       }\n" +
        "          }\n";
    String response = harness.post("/schema", json(payload));

    Map map = (Map) fromJSONString(response);
    assertNull(response, map.get("error"));

    l = getSourceCopyFields(harness, "bleh_s");
    assertFalse("'bleh_s' copyField rule doesn't exist", l.isEmpty());
    assertEquals("bleh_s", ((Map)l.get(0)).get("source"));
    assertEquals("name", ((Map)l.get(0)).get("dest"));

    // delete copy field rule
    payload = "{\n" +
        "          'delete-copy-field' : {\n" +
        "                       'source' :'bleh_s',\n" +
        "                       'dest':'name'\n" +
        "                       }\n" +
        "          }\n";

    response = harness.post("/schema", json(payload));
    map = (Map) fromJSONString(response);
    assertNull(response, map.get("error"));
    l = getSourceCopyFields(harness, "bleh_s");
    assertTrue("'bleh_s' copyField rule exists in the schema", l.isEmpty());

    // copy and delete with multiple destination
    payload = "{\n" +
        "          'add-copy-field' : {\n" +
        "                       'source' :'bleh_s',\n" +
        "                       'dest':['name','bind']\n" +
        "                       }\n" +
        "          }\n";
    response = harness.post("/schema", json(payload));
    map = (Map) fromJSONString(response);
    assertNull(response, map.get("error"));

    l = getSourceCopyFields(harness, "bleh_s");
    assertEquals(2, l.size());

    payload = "{\n" +
        "          'delete-copy-field' : {\n" +
        "                       'source' :'bleh_s',\n" +
        "                       'dest':['name','bind']\n" +
        "                       }\n" +
        "          }\n";

    response = harness.post("/schema", json(payload));
    map = (Map) fromJSONString(response);
    assertNull(response, map.get("error"));
    l = getSourceCopyFields(harness, "bleh_s");
    assertTrue("'bleh_s' copyField rule exists in the schema", l.isEmpty());
  }

