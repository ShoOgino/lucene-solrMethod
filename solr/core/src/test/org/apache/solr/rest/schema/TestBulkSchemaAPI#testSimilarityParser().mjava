  public void testSimilarityParser() throws Exception {
    RestTestHarness harness = restTestHarness;

    final float k1 = 2.25f;
    final float b = 0.33f;

    String fieldTypeName = "MySimilarityField";
    String fieldName = "similarityTestField";
    String payload = "{\n" +
        "  'add-field-type' : {" +
        "    'name' : '" + fieldTypeName + "',\n" +
        "    'class':'solr.TextField',\n" +
        "    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\n" +
        "    'similarity' : {'class':'org.apache.solr.search.similarities.BM25SimilarityFactory', 'k1':"+k1+", 'b':"+b+" }\n" +
        "  },\n"+
        "  'add-field' : {\n" +
        "    'name':'" + fieldName + "',\n" +
        "    'type': 'MySimilarityField',\n" +
        "    'stored':true,\n" +
        "    'indexed':true\n" +
        "  }\n" +
        "}\n";

    String response = harness.post("/schema", json(payload));

    @SuppressWarnings({"rawtypes"})
    Map map = (Map) fromJSONString(response);
    assertNull(response, map.get("error"));

    @SuppressWarnings({"rawtypes"})
    Map fields = getObj(harness, fieldName, "fields");
    assertNotNull("field " + fieldName + " not created", fields);
    
    assertFieldSimilarity(fieldName, BM25Similarity.class,
       sim -> assertEquals("Unexpected k1", k1, sim.getK1(), .001),
       sim -> assertEquals("Unexpected b", b, sim.getB(), .001));

    final String independenceMeasure = "Saturated";
    final boolean discountOverlaps = false; 
    payload = "{\n" +
        "  'replace-field-type' : {" +
        "    'name' : '" + fieldTypeName + "',\n" +
        "    'class':'solr.TextField',\n" +
        "    'analyzer' : {'tokenizer':{'class':'solr.WhitespaceTokenizerFactory'}},\n" +
        "    'similarity' : {\n" +
        "      'class':'org.apache.solr.search.similarities.DFISimilarityFactory',\n" +
        "      'independenceMeasure':'" + independenceMeasure + "',\n" +
        "      'discountOverlaps':" + discountOverlaps + "\n" +
        "     }\n" +
        "  }\n"+
        "}\n";

    response = harness.post("/schema", json(payload));

    map = (Map) fromJSONString(response);
    assertNull(response, map.get("error"));
    fields = getObj(harness, fieldName, "fields");
    assertNotNull("field " + fieldName + " not created", fields);

    assertFieldSimilarity(fieldName, DFISimilarity.class,
        sim -> assertEquals("Unexpected independenceMeasure", independenceMeasure, sim.getIndependence().toString()),
        sim -> assertEquals("Unexpected discountedOverlaps", discountOverlaps, sim.getDiscountOverlaps()));
  }

