  /**
   * whitebox checks the Similarity for the specified field according to {@link SolrCore#getLatestSchema}
   * 
   * Executes each of the specified Similarity-accepting validators.
   */
  @SafeVarargs
  @SuppressWarnings({"unchecked"})
  private static <T extends Similarity> void assertFieldSimilarity(String fieldname, Class<T> expected, Consumer<T>... validators) {
    CoreContainer cc = jetty.getCoreContainer();
    try (SolrCore core = cc.getCore("collection1")) {
      SimilarityFactory simfac = core.getLatestSchema().getSimilarityFactory();
      assertNotNull(simfac);
      assertTrue("test only works with SchemaSimilarityFactory",
                 simfac instanceof SchemaSimilarityFactory);
      
      Similarity mainSim = core.getLatestSchema().getSimilarity();
      assertNotNull(mainSim);
      
      // sanity check simfac vs sim in use - also verify infom called on simfac, otherwise exception
      assertEquals(mainSim, simfac.getSimilarity());
      
      assertTrue("test only works with PerFieldSimilarityWrapper, SchemaSimilarityFactory redefined?",
                 mainSim instanceof PerFieldSimilarityWrapper);
      Similarity fieldSim = ((PerFieldSimilarityWrapper)mainSim).get(fieldname);
      assertEquals("wrong sim for field=" + fieldname, expected, fieldSim.getClass());
      Arrays.asList(validators).forEach(v -> v.accept((T)fieldSim));
    }
  }

