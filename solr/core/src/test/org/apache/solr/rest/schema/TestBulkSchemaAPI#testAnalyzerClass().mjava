  public void testAnalyzerClass() throws Exception {

    String addFieldTypeAnalyzerWithClass = "{\n" +
        "'add-field-type' : {" +
        "    'name' : 'myNewTextFieldWithAnalyzerClass',\n" +
        "    'class':'solr.TextField',\n" +
        "    'analyzer' : {\n" +
        "        'luceneMatchVersion':'5.0.0',\n" +
        "        'class':'org.apache.lucene.analysis.core.WhitespaceAnalyzer'\n";
    String charFilters =
        "        'charFilters' : [{\n" +
        "            'class':'solr.PatternReplaceCharFilterFactory',\n" +
        "            'replacement':'$1$1',\n" +
        "            'pattern':'([a-zA-Z])\\\\\\\\1+'\n" +
        "        }],\n";
    String tokenizer =
        "        'tokenizer' : { 'class':'solr.WhitespaceTokenizerFactory' },\n";
    String filters =
        "        'filters' : [{ 'class':'solr.ASCIIFoldingFilterFactory' }]\n";
    String suffix =
        "    }\n"+
        "}}";

    String response = restTestHarness.post("/schema",
        json(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix));
    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));
    Map error = (Map)map.get("error");
    assertNotNull("No errors", error);
    List details = (List)error.get("details");
    assertNotNull("No details", details);
    assertEquals("Wrong number of details", 1, details.size());
    List errorList = (List)((Map)details.get(0)).get("errorMessages");
    assertEquals(1, errorList.size());
    assertTrue (((String)errorList.get(0)).contains
        ("An analyzer with a class property may not define any char filters!"));

    response = restTestHarness.post("/schema",
        json(addFieldTypeAnalyzerWithClass + ',' + tokenizer + filters + suffix));
    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));
    error = (Map)map.get("error");
    assertNotNull("No errors", error);
    details = (List)error.get("details");
    assertNotNull("No details", details);
    assertEquals("Wrong number of details", 1, details.size());
    errorList = (List)((Map)details.get(0)).get("errorMessages");
    assertEquals(1, errorList.size());
    assertTrue (((String)errorList.get(0)).contains
        ("An analyzer with a class property may not define a tokenizer!"));

    response = restTestHarness.post("/schema",
        json(addFieldTypeAnalyzerWithClass + ',' + filters + suffix));
    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));
    error = (Map)map.get("error");
    assertNotNull("No errors", error);
    details = (List)error.get("details");
    assertNotNull("No details", details);
    assertEquals("Wrong number of details", 1, details.size());
    errorList = (List)((Map)details.get(0)).get("errorMessages");
    assertEquals(1, errorList.size());
    assertTrue (((String)errorList.get(0)).contains
        ("An analyzer with a class property may not define any filters!"));

    response = restTestHarness.post("/schema", json(addFieldTypeAnalyzerWithClass + suffix));
    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));
    assertNull(response, map.get("error"));

    map = getObj(restTestHarness, "myNewTextFieldWithAnalyzerClass", "fieldTypes");
    assertNotNull(map);
    Map analyzer = (Map)map.get("analyzer");
    assertEquals("org.apache.lucene.analysis.core.WhitespaceAnalyzer", String.valueOf(analyzer.get("class")));
    assertEquals("5.0.0", String.valueOf(analyzer.get("luceneMatchVersion")));
  }

