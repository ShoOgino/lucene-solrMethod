  public void testAnalyzerByName() throws Exception {

    String addFieldTypeAnalyzer = "{\n" +
        "'add-field-type' : {" +
        "    'name' : 'myNewTextField',\n" +
        "    'class':'solr.TextField',\n" +
        "    'analyzer' : {\n" +
        "        'charFilters' : [{\n" +
        "                'name':'patternReplace',\n" +
        "                'replacement':'$1$1',\n" +
        "                'pattern':'([a-zA-Z])\\\\\\\\1+'\n" +
        "            }],\n" +
        "        'tokenizer' : { 'name':'whitespace' },\n" +
        "        'filters' : [{ 'name':'asciiFolding' }]\n" +
        "    }\n"+
        "}}";

    String response = restTestHarness.post("/schema", json(addFieldTypeAnalyzer));
    @SuppressWarnings({"rawtypes"})
    Map map = (Map) fromJSONString(response);
    assertNull(response, map.get("error"));

    map = getObj(restTestHarness, "myNewTextField", "fieldTypes");
    assertNotNull(map);
    @SuppressWarnings({"rawtypes"})
    Map analyzer = (Map)map.get("analyzer");
    @SuppressWarnings({"rawtypes"})
    Map tokenizer = (Map)analyzer.get("tokenizer");
    @SuppressWarnings({"rawtypes"})
    List charFilters = (List)analyzer.get("charFilters");
    @SuppressWarnings({"rawtypes"})
    List tokenFilters = (List)analyzer.get("filters");
    assertEquals("whitespace", String.valueOf(tokenizer.get("name")));
    assertEquals("patternReplace", String.valueOf(((Map)charFilters.get(0)).get("name")));
    assertEquals("asciiFolding", String.valueOf(((Map)tokenFilters.get(0)).get("name")));
  }

