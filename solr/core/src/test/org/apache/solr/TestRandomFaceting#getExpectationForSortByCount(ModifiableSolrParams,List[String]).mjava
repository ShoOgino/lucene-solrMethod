  /** if facet.exists=true with facet.sort=counts,
   * it should return all values with 1 hits ordered by label index
   * then all vals with 0 , and then missing count with null label,
   * in the implementation below they are called three stratas 
   * */
  private String getExpectationForSortByCount( ModifiableSolrParams params, List<String> methods) throws Exception {
    String indexSortedResponse = getIndexSortedAllFacetValues(params, methods);
    
    return transformFacetFields(indexSortedResponse, e -> {
      List<Object> facetSortedByIndex = (List<Object>) e.getValue();
      Map<Integer,List<Object>> stratas = new HashMap<Integer,List<Object>>(){
        @Override // poor man multimap, I won't do that anymore, I swear.
        public List<Object> get(Object key) {
          if (!containsKey(key)) {
            put((Integer) key, new ArrayList<>());
          }
          return super.get(key);
        }
      };
      
      for (Iterator iterator = facetSortedByIndex.iterator(); iterator.hasNext();) {
        Object label = (Object) iterator.next();
        Long count = (Long) iterator.next();
        final Integer strata;
        if (label==null) { // missing (here "stratas" seems like overengineering )
          strata = null;
        }else {
          if (count>0) {
            count = 1L; // capping here 
            strata = 1; // non-zero count become zero
          } else {
            strata = 0; // zero-count
          }
        }
        final List<Object> facet = stratas.get(strata);
        facet.add(label);
        facet.add(count);
      }
      List stratified =new ArrayList<>();
      for(Integer s : new Integer[]{1, 0}) { // non-zero capped to one goes first, zeroes go then
        stratified.addAll(stratas.get(s));
      }// cropping them now
      int offset=params.getInt("facet.offset", 0) * 2;
      int end = offset + params.getInt("facet.limit", 100) * 2 ;
      int fromIndex = offset > stratified.size() ?  stratified.size() : offset;
      stratified = stratified.subList(fromIndex, 
               end > stratified.size() ?  stratified.size() : end);

      stratified.addAll(stratas.get(null));

      facetSortedByIndex.clear();
      facetSortedByIndex.addAll(stratified);
    });
  }

