  public void testPathTrie() {
    PathTrie<String> pathTrie = new PathTrie<>(ImmutableSet.of("_introspect"));
    pathTrie.insert("/", emptyMap(), "R");
    pathTrie.insert("/aa", emptyMap(), "d");
    pathTrie.insert("/aa/bb/{cc}/dd", emptyMap(), "a");
    pathTrie.insert("/$handlerName/{cc}/dd", singletonMap(HANDLER_NAME, "test"), "test");
    pathTrie.insert("/aa/bb/{cc}/{xx}", emptyMap(), "b");
    pathTrie.insert("/aa/bb", emptyMap(), "c");

    HashMap templateValues = new HashMap<>();
    assertEquals("R", pathTrie.lookup("/", templateValues, null));
    assertEquals("d", pathTrie.lookup("/aa", templateValues, null));
    assertEquals("a", pathTrie.lookup("/aa/bb/hello/dd", templateValues, null));
    templateValues.clear();
    assertEquals("test", pathTrie.lookup("/test/hello/dd", templateValues, null));
    assertEquals("hello", templateValues.get("cc"));
    templateValues.clear();
    assertEquals("b", pathTrie.lookup("/aa/bb/hello/world", templateValues, null));
    assertEquals("hello", templateValues.get("cc"));
    assertEquals("world", templateValues.get("xx"));
    Set<String> subPaths =  new HashSet<>();
    templateValues.clear();
    pathTrie.lookup("/aa",templateValues, subPaths);
    assertEquals(3, subPaths.size());


  }

