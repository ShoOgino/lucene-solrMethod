  // take a solr.xml with system vars in <solr>, <cores> and <core> and <core/properties> tags that have system
  // variables defined. Insure that after persisting solr.xml, they're all still there as ${} syntax.
  // Also insure that nothing extra crept in.
  @Test
  public void testSystemVars() throws Exception {
    //Set these system props in order to insure that we don't write out the values rather than the ${} syntax.
    System.setProperty("solr.zkclienttimeout", "93");
    System.setProperty("solrconfig", "solrconfig-minimal.xml");
    System.setProperty("schema", "schema-tiny.xml");
    System.setProperty("zkHostSet", "localhost:9983");

    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, "SystemVars1", "SystemVars2");
    try {

      // This seems odd, but it's just a little self check to see if the comparison strings are being created correctly
      origMatchesPersist(cc, new File(solrHomeDirectory, "solr_copy.xml"));

      // Is everything in the persisted file identical to the original?
      final File persistXml = new File(solrHomeDirectory, "sysvars.solr.xml");
      // Side effect here is that the new file is persisted and available later.
      origMatchesPersist(cc, persistXml);

      // Is everything in the original contained in the persisted one?
      assertXmlFile(persistXml, getAllNodes(new File(solrHomeDirectory, "solr.xml")));

    } finally {
      cc.shutdown();
      if (solrHomeDirectory.exists()) {
        FileUtils.deleteDirectory(solrHomeDirectory);
      }
    }
  }

