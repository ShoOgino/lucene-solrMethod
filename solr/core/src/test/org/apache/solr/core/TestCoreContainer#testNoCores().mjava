  public void testNoCores() throws IOException, ParserConfigurationException, SAXException {
    //create solrHome
    File solrHomeDirectory = new File(TEMP_DIR, this.getClass().getName()
        + "_noCores");
    if (solrHomeDirectory.exists()) {
      FileUtils.deleteDirectory(solrHomeDirectory);
    }
    assertTrue("Failed to mkdirs workDir", solrHomeDirectory.mkdirs());
    try {
      File solrXmlFile = new File(solrHomeDirectory, "solr.xml");
      BufferedWriter out = new BufferedWriter(new FileWriter(solrXmlFile));
      out.write(EMPTY_SOLR_XML);
      out.close();
    } catch (IOException e) {
      FileUtils.deleteDirectory(solrHomeDirectory);
      throw e;
    }
    
    //init
    System.setProperty("solr.solr.home", solrHomeDirectory.getAbsolutePath());
    CoreContainer.Initializer init = new CoreContainer.Initializer();
    CoreContainer cores = null;
    try {
      cores = init.initialize();
    }
    catch(Exception e) {
      fail("CoreContainer not created" + e.getMessage());
    }
    try {
      //assert cero cores
      assertEquals("There should not be cores", 0, cores.getCores().size());
      
      //add a new core
      CoreDescriptor coreDescriptor = new CoreDescriptor(cores, "core1", SolrTestCaseJ4.TEST_HOME() + "/collection1");
      SolrCore newCore = cores.create(coreDescriptor);
      cores.register(newCore, false);
      
      //assert one registered core
      assertEquals("There core registered", 1, cores.getCores().size());
      
      newCore.close();
      cores.remove("core1");
      //assert cero cores
      assertEquals("There should not be cores", 0, cores.getCores().size());
    } finally {
      cores.shutdown();
      FileUtils.deleteDirectory(solrHomeDirectory);
    }

  }

