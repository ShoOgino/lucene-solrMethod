  private void gatherNodes(Node node, List<String> expressions, String path) {

    String nodeName = node.getNodeName();
    String thisPath = path + "/" + nodeName;
    //Parent[@id='1']/Children/child[@name]
    // Add in the xpaths for verification of any attributes.
    NamedNodeMap attrs = node.getAttributes();
    String qualifier = "";
    if (attrs.getLength() > 0) {
      // Assemble the prefix for qualifying all of the attributes with the same name
      if (qualified.contains(nodeName)) {
        qualifier = "@name='" + node.getAttributes().getNamedItem("name").getTextContent() + "'";
      }

      for (int idx = 0; idx < attrs.getLength(); ++idx) {

        Node attr = attrs.item(idx);
        if (StringUtils.isNotBlank(qualifier) && "name".equals(attr.getNodeName())) {
          continue; // Already added "name" attribute in qualifier string.
        }
        if (StringUtils.isNotBlank(qualifier)) {
          // Create [@name="stuff" and @attrib="value"] fragment
          expressions.add(thisPath +
              "[" + qualifier + " and @" + attr.getNodeName() + "='" + attr.getTextContent() + "']");

        } else {
          // Create [@attrib="value"] fragment
          expressions.add(thisPath +
              "[" + qualifier + " @" + attr.getNodeName() + "='" + attr.getTextContent() + "']");
        }
      }
    }
    // Now add the text for special nodes
    // a[normalize-space(text())='somesite']
    if (addText.contains(nodeName)) {
      expressions.add(thisPath + "[" + qualifier + " and text()='" + node.getTextContent() + "']");
    }
    // Now collect all the child element nodes.
    NodeList nodeList = node.getChildNodes();
    for (int i = 0; i < nodeList.getLength(); i++) {

      Node currentNode = nodeList.item(i);
      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {
        if (StringUtils.isNotBlank(qualifier)) {
          gatherNodes(currentNode, expressions, thisPath + "[" + qualifier + "]");
        } else {
          gatherNodes(currentNode, expressions, thisPath);
        }
      }
    }
  }

