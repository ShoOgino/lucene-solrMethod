  @Test
  public void testCachingLimit() throws Exception {
    CoreContainer cc = init();
    try {
      // First check that all the cores that should be loaded at startup actually are.

      checkInCores(cc, "collection1", "collection2", "collection5");
      checkNotInCores(cc, Arrays.asList("collection3", "collection4", "collection6", "collection7", "collection8", "collection9"));

      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.
      SolrCore core1 = cc.getCore("collection1");
      SolrCore core3 = cc.getCore("collection3");
      SolrCore core4 = cc.getCore("collection4");
      SolrCore core2 = cc.getCore("collection2");
      SolrCore core5 = cc.getCore("collection5");

      checkInCores(cc, "collection1", "collection2", "collection3", "collection4", "collection5");
      checkNotInCores(cc, Arrays.asList("collection6", "collection7", "collection8", "collection9"));

      // map should be full up, add one more and verify
      SolrCore core6 = cc.getCore("collection6");
      checkInCores(cc, "collection1", "collection2", "collection3", "collection4", "collection5",
          "collection6");
      checkNotInCores(cc, Arrays.asList("collection7", "collection8", "collection9"));

      SolrCore core7 = cc.getCore("collection7");
      checkInCores(cc, "collection1", "collection2", "collection3", "collection4", "collection5",
          "collection6", "collection7");
      checkNotInCores(cc, Arrays.asList("collection8", "collection9"));

      SolrCore core8 = cc.getCore("collection8");
      checkInCores(cc, "collection1", "collection2", "collection4", "collection5", "collection6",
          "collection7", "collection8");
      checkNotInCores(cc, Arrays.asList("collection3", "collection9"));

      SolrCore core9 = cc.getCore("collection9");
      checkInCores(cc, "collection1", "collection4", "collection5", "collection6", "collection7",
          "collection8", "collection9");
      checkNotInCores(cc, Arrays.asList("collection2", "collection3"));

      // verify that getting metrics from an unloaded core doesn't cause exceptions (SOLR-12541)
      MetricsHandler handler = new MetricsHandler(h.getCoreContainer());

      SolrQueryResponse resp = new SolrQueryResponse();
      handler.handleRequest(makeReq(core1, CommonParams.QT, "/admin/metrics"), resp);
      NamedList values = resp.getValues();
      assertNotNull(values.get("metrics"));
      values = (NamedList) values.get("metrics");
      NamedList nl = (NamedList) values.get("solr.core.collection2");
      assertNotNull(nl);
      Object o = nl.get("REPLICATION./replication.indexPath");
      assertNotNull(o);


      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the
      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.
      core1.close();
      core2.close();
      core3.close();
      core4.close();
      core5.close();
      core6.close();
      core7.close();
      core8.close();
      core9.close();
    } finally {
      cc.shutdown();
    }
  }

