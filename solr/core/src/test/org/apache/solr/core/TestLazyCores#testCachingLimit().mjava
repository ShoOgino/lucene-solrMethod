  @Test
  public void testCachingLimit() {
    try {
      // NOTE: the way this works, this should not assert, however if it's put after the getCore on this collection,
      // that will cause the core to be loaded and this test will fail.
      Collection<String> names = cores.getCoreNames();

      // By putting these in non-alpha order, we're also checking that we're  not just seeing an artifact.
      SolrCore core1 = cores.getCore("collection1");
      SolrCore core2 = cores.getCore("collectionLazy3");
      SolrCore core4 = cores.getCore("collectionLazy4");
      SolrCore core3 = cores.getCore("collectionLazy2");
      SolrCore core5 = cores.getCore("collectionLazy5");


      checkInCores("collection1", "collectionLazy2", "collectionLazy3", "collectionLazy4", "collectionLazy5");
      checkNotInCores("collectionLazy6", "collectionLazy7", "collectionLazy8", "collectionLazy9");

      // map should be full up, add one more and verify
      SolrCore core6 = cores.getCore("collectionLazy6");
      checkInCores("collection1", "collectionLazy2", "collectionLazy3", "collectionLazy4", "collectionLazy5", "collectionLazy6");
      checkNotInCores("collectionLazy7", "collectionLazy8", "collectionLazy9");

      SolrCore core7 = cores.getCore("collectionLazy7");
      checkInCores("collection1", "collectionLazy2", "collectionLazy3", "collectionLazy4", "collectionLazy5", "collectionLazy6", "collectionLazy7");
      checkNotInCores("collectionLazy8", "collectionLazy9");
      SolrCore core8 = cores.getCore("collectionLazy8");
      checkInCores("collection1", "collectionLazy2", "collectionLazy4", "collectionLazy5", "collectionLazy6", "collectionLazy7", "collectionLazy8");
      checkNotInCores("collectionLazy3", "collectionLazy9");

      SolrCore core9 = cores.getCore("collectionLazy9");
      checkInCores("collection1", "collectionLazy4", "collectionLazy5", "collectionLazy6", "collectionLazy7", "collectionLazy8", "collectionLazy9");
      checkNotInCores( "collectionLazy2","collectionLazy3");


      // Note decrementing the count when the core is removed from the lazyCores list is appropriate, since the
      // refcount is 1 when constructed. anyone _else_ who's opened up one has to close it.
      core1.close();
      core2.close();
      core3.close();
      core4.close();
      core5.close();
      core6.close();
      core7.close();
      core8.close();
      core9.close();
    } finally {
      cores.shutdown();
    }
  }

