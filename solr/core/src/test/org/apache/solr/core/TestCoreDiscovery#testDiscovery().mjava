  // Test the basic setup, create some dirs with core.properties files in them, but solr.xml has discoverCores
  // set and insure that we find all the cores and can load them.
  @Test
  public void testDiscovery() throws Exception {
    setMeUp();

    // name, isLazy, loadOnStartup
    addCoreWithProps(makeCorePropFile("core1", false, true, "dataDir=core1"));
    addCoreWithProps(makeCorePropFile("core2", false, false, "dataDir=core2"));

    // I suspect what we're adding in here is a "configset" rather than a schema or solrconfig.
    //
    addCoreWithProps(makeCorePropFile("lazy1", true, false, "dataDir=lazy1"));

    CoreContainer cc = init();
    try {
      assertNull("defaultCore no longer allowed in solr.xml", cc.getDefaultCoreName());

      assertEquals("222.333.444.555", cc.getHost());
      assertEquals("6000", cc.getHostPort());
      assertEquals("solrprop", cc.getHostContext());
      assertEquals(20, cc.getZkClientTimeout());

      TestLazyCores.checkInCores(cc, "core1");
      TestLazyCores.checkNotInCores(cc, "lazy1", "core2", "collection1");

      SolrCore core1 = cc.getCore("core1");

      // Let's assert we did the right thing for implicit properties too.
      CoreDescriptor desc = core1.getCoreDescriptor();
      assertEquals("core1", desc.getProperty("solr.core.name"));

      // Prove we're ignoring this even though it's set in the properties file
      assertFalse("InstanceDir should be ignored", desc.getProperty("solr.core.instanceDir").contains("totallybogus"));

      // This is too long and ugly to put in. Besides, it varies.
      assertNotNull(desc.getProperty("solr.core.instanceDir"));

      assertEquals("core1", desc.getProperty("solr.core.dataDir"));
      assertEquals("solrconfig-minimal.xml", desc.getProperty("solr.core.configName"));
      assertEquals("schema-tiny.xml", desc.getProperty("solr.core.schemaName"));

      SolrCore core2 = cc.getCore("core2");
      SolrCore lazy1 = cc.getCore("lazy1");
      TestLazyCores.checkInCores(cc, "core1", "core2", "lazy1");
      core1.close();
      core2.close();
      lazy1.close();

    } finally {
      cc.shutdown();
    }
  }

