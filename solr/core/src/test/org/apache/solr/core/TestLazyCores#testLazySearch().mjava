  // This is a little weak. I'm not sure how to test that lazy core2 is loaded automagically. The getCore
  // will, of course, load it.
  @Test
  public void testLazySearch() throws Exception {
    CoreContainer cc = init();
    try {
      // Make sure Lazy4 isn't loaded. Should be loaded on the get
      checkNotInCores(cc, "collectionLazy4");
      SolrCore core4 = cc.getCore("collectionLazy4");

      addLazy(core4, "id", "0");
      addLazy(core4, "id", "1", "v_t", "Hello Dude");
      addLazy(core4, "id", "2", "v_t", "Hello Yonik");
      addLazy(core4, "id", "3", "v_s", "{!literal}");
      addLazy(core4, "id", "4", "v_s", "other stuff");
      addLazy(core4, "id", "5", "v_f", "3.14159");
      addLazy(core4, "id", "6", "v_f", "8983");

      SolrQueryRequest req = makeReq(core4);
      CommitUpdateCommand cmtCmd = new CommitUpdateCommand(req, false);
      core4.getUpdateHandler().commit(cmtCmd);

      RefCounted<SolrIndexSearcher> holder = core4.getSearcher();
      SolrIndexSearcher searcher = holder.get();

      // Just get a couple of searches to work!
      assertQ("test prefix query",
          makeReq(core4, "q", "{!prefix f=v_t}hel")
          , "//result[@numFound='2']"
      );

      assertQ("test raw query",
          makeReq(core4, "q", "{!raw f=v_t}hello")
          , "//result[@numFound='2']"
      );

      // Now just insure that the normal searching on "collection1" finds _0_ on the same query that found _2_ above.
      // Use of makeReq above and req below is tricky, very tricky.
      assertQ("test raw query",
          req("q", "{!raw f=v_t}hello")
          , "//result[@numFound='0']"
      );

      // no analysis is done, so these should match nothing
      assertQ("test raw query",
          makeReq(core4, "q", "{!raw f=v_t}Hello")
          , "//result[@numFound='0']"
      );
      assertQ("test raw query",
          makeReq(core4, "q", "{!raw f=v_f}1.5")
          , "//result[@numFound='0']"
      );

      checkInCores(cc, "collectionLazy4");

      searcher.close();
      core4.close();
    } finally {
      cc.shutdown();
    }
  }

