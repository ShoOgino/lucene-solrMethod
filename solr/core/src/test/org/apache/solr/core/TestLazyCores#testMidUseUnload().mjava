  @Test
  public void testMidUseUnload() throws Exception {
    final int maximumSleepMillis = random().nextInt(9999) + 1; // sleep for up to 10 s Must add 1 because using
    // this as a seed will rea few lines down will
    // throw an exception if this is zero
    if (VERBOSE) {
      System.out.println("TestLazyCores.testMidUseUnload maximumSleepMillis=" + maximumSleepMillis);
    }

    class TestThread extends Thread {

      SolrCore core_to_use = null;

      @Override
      public void run() {

        final int sleep_millis = random().nextInt(maximumSleepMillis);
        try {
          if (sleep_millis > 0) {
            if (VERBOSE) {
              System.out.println("TestLazyCores.testMidUseUnload Thread.run sleeping for " + sleep_millis + " ms");
            }
            Thread.sleep(sleep_millis);
          }
        } catch (InterruptedException ie) {
          if (VERBOSE) {
            System.out.println("TestLazyCores.testMidUseUnload Thread.run caught " + ie + " whilst sleeping for " + sleep_millis + " ms");
          }
        }

        assertFalse(core_to_use.isClosed()); // not closed since we are still using it and hold a reference
        core_to_use.close(); // now give up our reference to the core
      }
    }
    ;

    CoreContainer cc = init();

    try {
      TestThread thread = new TestThread();

      thread.core_to_use = cc.getCore("collection1");
      assertNotNull(thread.core_to_use);
      assertFalse(thread.core_to_use.isClosed()); // freshly-in-use core is not closed
      thread.start();

      unloadViaAdmin(cc, "collection1");
      assertTrue(thread.core_to_use.isClosed()); // after unload-ing the core is closed

      thread.join();
    } finally {
      cc.shutdown();
    }
  }

