  @Test
  @SuppressWarnings({"try"})
  public void testJmxOnCoreReload() throws Exception {
    // make sure searcher beans are registered
    assertQ(req("q", "*:*"), "//result[@numFound='0']");

    SolrMetricManager mgr = h.getCoreContainer().getMetricManager();
    String registryName = h.getCore().getCoreMetricManager().getRegistryName();
    String coreName = h.getCore().getName();
    String coreHashCode = Integer.toHexString(h.getCore().hashCode());
    Map<String, SolrMetricReporter> reporters = mgr.getReporters(registryName);
    // take first JMX reporter
    SolrJmxReporter reporter = null;
    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {
      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {
        reporter = (SolrJmxReporter)e.getValue();
        break;
      }
    }
    assertNotNull("could not find JMX reporter for " + registryName, reporter);
    String tag = reporter.getInstanceTag();

    Set<ObjectInstance> oldBeans = mbeanServer.queryMBeans(null, null);
    int oldNumberOfObjects = 0;
    for (ObjectInstance bean : oldBeans) {
      try {
        if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {
          oldNumberOfObjects++;
        }
      } catch (AttributeNotFoundException e) {
        // expected
      }
    }

    int totalCoreMetrics = mgr.registry(registryName).getMetrics().size();
    log.info("Before Reload: size of all core metrics: {} MBeans: {}", totalCoreMetrics, oldNumberOfObjects);
    assertEquals("Number of registered MBeans is not the same as the number of core metrics", totalCoreMetrics, oldNumberOfObjects);
    h.getCoreContainer().reload(coreName);
    assertQ(req("q", "*:*"), "//result[@numFound='0']");

    reporters = mgr.getReporters(registryName);
    coreHashCode = Integer.toHexString(h.getCore().hashCode());
    // take first JMX reporter
    reporter = null;
    for (Map.Entry<String, SolrMetricReporter> e : reporters.entrySet()) {
      if (e.getKey().endsWith(coreHashCode) && e.getValue() instanceof SolrJmxReporter) {
        reporter = (SolrJmxReporter)e.getValue();
        break;
      }
    }
    assertNotNull("could not find JMX reporter for " + registryName, reporter);
    tag = reporter.getInstanceTag();

    Set<ObjectInstance> newBeans = mbeanServer.queryMBeans(null, null);
    int newNumberOfObjects = 0;
    Set<String> metricNames = new TreeSet<>();
    Set<String> beanNames = new TreeSet<>();
    try (SolrCore core = h.getCoreContainer().getCore(coreName)) {
      MetricRegistry registry = mgr.registry(registryName);
      metricNames.addAll(registry.getNames());
      totalCoreMetrics = registry.getMetrics().size();
      for (ObjectInstance bean : newBeans) {
        try {
          if (tag.equals(mbeanServer.getAttribute(bean.getObjectName(), JmxMetricsReporter.INSTANCE_TAG))) {
            String[] name = bean.getObjectName().toString().substring(32).split(",");
            StringBuilder sb = new StringBuilder();
            for (String n : name) {
              if (sb.length() > 0) {
                sb.append(".");
              }
              sb.append(n.split("=")[1]);
            }
            beanNames.add(sb.toString());
            newNumberOfObjects++;
          }
        } catch (AttributeNotFoundException e) {
          // expected
        }
      }
    }

    log.info("After Reload: size of all core metrics: {} MBeans: {}", totalCoreMetrics, newNumberOfObjects);
    if (totalCoreMetrics != newNumberOfObjects) {
      Set<String> errors = new TreeSet<>(beanNames);
      errors.removeAll(metricNames);
      log.error("Unexpected bean names: {}", errors);
      errors = new TreeSet<>(metricNames);
      errors.removeAll(beanNames);
      log.error("Unexpected metric names: {}", errors);
      fail("Number of registered MBeans is not the same as the number of core metrics: " + totalCoreMetrics + " != " + newNumberOfObjects);
    }
  }

