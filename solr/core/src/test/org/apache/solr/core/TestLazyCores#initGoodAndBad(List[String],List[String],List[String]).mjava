  // Write out the cores' config files, both bad schema files, bad config files as well as some good cores.
  private CoreContainer initGoodAndBad(List<String> goodCores,
                                       List<String> badSchemaCores,
                                       List<String> badConfigCores) throws Exception {
    solrHomeDirectory = createTempDir().toFile();
    
    // Don't pollute the log with exception traces when they're expected.
    ignoreException(Pattern.quote("SAXParseException"));
    
    // Create the cores that should be fine.
    for (String coreName : goodCores) {
      File coreRoot = new File(solrHomeDirectory, coreName);
      copyMinConf(coreRoot, "name=" + coreName);

    }

    // Collect the files that we'll write to the config directories.
    String top = SolrTestCaseJ4.TEST_HOME() + "/collection1/conf";
    String min_schema = FileUtils.readFileToString(new File(top, "schema-tiny.xml"),
        StandardCharsets.UTF_8);
    String min_config = FileUtils.readFileToString(new File(top, "solrconfig-minimal.xml"),
        StandardCharsets.UTF_8);
    String rand_snip = FileUtils.readFileToString(new File(top, "solrconfig.snippet.randomindexconfig.xml"),
        StandardCharsets.UTF_8);

    // Now purposely mess up the config files, introducing stupid syntax errors.
    String bad_config = min_config.replace("<requestHandler", "<reqsthalr");
    String bad_schema = min_schema.replace("<field", "<filed");

    // Create the cores with bad configs
    for (String coreName : badConfigCores) {
      writeCustomConfig(coreName, bad_config, min_schema, rand_snip);
    }

    // Create the cores with bad schemas.
    for (String coreName : badSchemaCores) {
      writeCustomConfig(coreName, min_config, bad_schema, rand_snip);
    }

    NodeConfig config = SolrXmlConfig.fromString(solrHomeDirectory.toPath(), "<solr/>");

    // OK this should succeed, but at the end we should have recorded a series of errors.
    return createCoreContainer(config, new CorePropertiesLocator(config.getCoreRootDirectory()));
  }

