  @BadApple(bugUrl = "https://issues.apache.org/jira/browse/SOLR-10101")
  // Insure that when a core is aged out of the transient cache, any uncommitted docs are preserved.
  // Note, this needs FS-based indexes to persist!
  // Cores 2, 3, 6, 7, 8, 9 are transient
  @Test
  public void testNoCommit() throws Exception {
    CoreContainer cc = init();
    String[] coreList = new String[]{
        "collection2",
        "collection3",
        "collection6",
        "collection7",
        "collection8",
        "collection9"
    };
    try {
      // First, go through all the transient cores and add some docs. DO NOT COMMIT!
      // The aged-out core should commit the docs when it gets closed.
      List<SolrCore> openCores = new ArrayList<>();
      for (String coreName : coreList) {
        SolrCore core = cc.getCore(coreName);
        openCores.add(core);
        add10(core);
      }
      
      // Just proving that some cores have been aged out.
      checkNotInCores(cc, Arrays.asList("collection2", "collection3"));

      // Close our get of all cores above.
      for (SolrCore core : openCores) core.close();
      openCores.clear();
      
      // We still should have 6, 7, 8, 9 loaded, their reference counts have NOT dropped to zero 
      checkInCores(cc, "collection6", "collection7", "collection8", "collection9");

      for (String coreName : coreList) {
        // The point of this test is to insure that when cores are aged out and re-opened
        // that the docs are there, so insure that the core we're testing is gone, gone, gone. 
        checkNotInCores(cc, Arrays.asList(coreName));
        
        // Load the core up again.
        SolrCore core = cc.getCore(coreName);
        openCores.add(core);
        
        // Insure docs are still there.
        check10(core);
      }
      for (SolrCore core : openCores) core.close();
    } finally {
      cc.shutdown();
    }
  }

