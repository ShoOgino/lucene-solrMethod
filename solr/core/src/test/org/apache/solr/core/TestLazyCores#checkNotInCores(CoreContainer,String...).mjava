  public static void checkNotInCores(CoreContainer cc, String... nameCheck) {
    Collection<String> loadedNames = cc.getLoadedCoreNames();
    for (String name : nameCheck) {
      assertFalse("core " + name + " was found in the list of cores", loadedNames.contains(name));
    }
    
    // There was a problem at one point exacerbated by the poor naming conventions. So parallel to loaded cores, there
    // should be the ability to get the core _names_ that are loaded as well as all the core names _possible_
    //
    // the names above should only contain loaded core names. Every name in names should be in allNames, but none of 
    // the names in nameCheck should be loaded and thus should not be in names.
    
    Collection<String> allNames = cc.getAllCoreNames();
    // Every core, loaded or not should be in the accumulated coredescriptors:
    List<CoreDescriptor> descriptors = cc.getCoreDescriptors();

    assertEquals("There should be as many coreDescriptors as coreNames", allNames.size(), descriptors.size());
    for (CoreDescriptor desc : descriptors) {
      assertTrue("Name should have a corresponding descriptor", allNames.contains(desc.getName()));
    }
    
    // First check that all loaded cores are in allNames.
    for (String name : loadedNames) {                                                                                        
      assertTrue("Loaded core " + name + " should have been found in the list of all possible core names",
          allNames.contains(name));
    }

    for (String name : nameCheck) {
      assertTrue("Not-currently-loaded core " + name + " should have been found in the list of all possible core names",
          allNames.contains(name));
    }
  }

