  @Test
  public void testCreatePersistCore() throws Exception {
    // Template for creating a core.
    CoreContainer cc = init(SOLR_XML_LOTS_SYSVARS, "SystemVars1", "SystemVars2", "props1", "props2");
    SolrXMLCoresLocator.NonPersistingLocator locator
        = (SolrXMLCoresLocator.NonPersistingLocator) cc.getCoresLocator();

    try {
      final CoreAdminHandler admin = new CoreAdminHandler(cc);
      // create a new core (using CoreAdminHandler) w/ properties

      SolrQueryResponse resp = new SolrQueryResponse();
      admin.handleRequestBody
          (req(CoreAdminParams.ACTION,
              CoreAdminParams.CoreAdminAction.CREATE.toString(),
              CoreAdminParams.NAME, "props1",
              CoreAdminParams.TRANSIENT, "true",
              CoreAdminParams.LOAD_ON_STARTUP, "true",
              CoreAdminParams.PROPERTY_PREFIX + "prefix1", "valuep1",
              CoreAdminParams.PROPERTY_PREFIX + "prefix2", "valueP2",
              "wt", "json", // need to insure that extra parameters are _not_ preserved (actually happened).
              "qt", "admin/cores"),
              resp);
      assertNull("Exception on create", resp.getException());

      String instPath2 = new File(solrHomeDirectory, "props2").getAbsolutePath();
      admin.handleRequestBody
          (req(CoreAdminParams.ACTION,
              CoreAdminParams.CoreAdminAction.CREATE.toString(),
              CoreAdminParams.INSTANCE_DIR, instPath2,
              CoreAdminParams.NAME, "props2",
              CoreAdminParams.PROPERTY_PREFIX + "prefix2_1", "valuep2_1",
              CoreAdminParams.PROPERTY_PREFIX + "prefix2_2", "valueP2_2",
              CoreAdminParams.CONFIG, "solrconfig.xml",
              CoreAdminParams.DATA_DIR, "./dataDirTest",
              CoreAdminParams.SCHEMA, "schema.xml"),
              resp);
      assertNull("Exception on create", resp.getException());

      // Everything that was in the original XML file should be in the persisted one.
      TestHarness.validateXPath(locator.xml, getAllNodes(SOLR_XML_LOTS_SYSVARS));

      // And the params for the new core should be in the persisted file.
      TestHarness.validateXPath
          (
              locator.xml,
              "/solr/cores/core[@name='props1']/property[@name='prefix1' and @value='valuep1']"
              , "/solr/cores/core[@name='props1']/property[@name='prefix2' and @value='valueP2']"
              , "/solr/cores/core[@name='props1' and @transient='true']"
              , "/solr/cores/core[@name='props1' and @loadOnStartup='true']"
              , "/solr/cores/core[@name='props1' and @instanceDir='props1" + File.separator + "']"
              , "/solr/cores/core[@name='props2']/property[@name='prefix2_1' and @value='valuep2_1']"
              , "/solr/cores/core[@name='props2']/property[@name='prefix2_2' and @value='valueP2_2']"
              , "/solr/cores/core[@name='props2' and @config='solrconfig.xml']"
              , "/solr/cores/core[@name='props2' and @schema='schema.xml']"
              , "/solr/cores/core[@name='props2' and not(@loadOnStartup)]"
              , "/solr/cores/core[@name='props2' and not(@transient)]"
              , "/solr/cores/core[@name='props2' and @instanceDir='" + instPath2 + "']"
              , "/solr/cores/core[@name='props2' and @dataDir='./dataDirTest']"
          );

    } finally {
      cc.shutdown();
    }
  }

