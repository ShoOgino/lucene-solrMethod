  public void testAwareCompatibility() throws Exception {
    
    Class<?> clazz = ResourceLoaderAware.class;
    // Check ResourceLoaderAware valid objects
    //noinspection unchecked
    assertAwareCompatibility(clazz, new NGramFilterFactory(map("minGramSize", "1", "maxGramSize", "2")));
    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));
    
    // Make sure it throws an error for invalid objects
    Object[] invalid = new Object[] {
        // new NGramTokenFilter( null ),
        "hello",  new Float( 12.3f ),
        new LukeRequestHandler(),
        new JSONResponseWriter()
    };
    for( Object obj : invalid ) {
      try {
        assertAwareCompatibility(clazz, obj);
        Assert.fail( "Should be invalid class: "+obj + " FOR " + clazz );
      }
      catch( SolrException ex ) { } // OK
    }
    

    clazz = SolrCoreAware.class;
    // Check ResourceLoaderAware valid objects
    assertAwareCompatibility(clazz, new LukeRequestHandler());
    assertAwareCompatibility(clazz, new FacetComponent());
    assertAwareCompatibility(clazz, new JSONResponseWriter());
    
    // Make sure it throws an error for invalid objects
    //noinspection unchecked
    invalid = new Object[] {
        new NGramFilterFactory(map("minGramSize", "1", "maxGramSize", "2")),
        "hello",  new Float( 12.3f ),
        new KeywordTokenizerFactory(new HashMap<>())
    };
    for( Object obj : invalid ) {
      try {
        assertAwareCompatibility(clazz, obj);
        Assert.fail( "Should be invalid class: "+obj + " FOR " + clazz );
      }
      catch( SolrException ex ) { } // OK
    }

  }

