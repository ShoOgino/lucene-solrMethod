  public void testAwareCompatibility() throws Exception {
    
    final Class<?> clazz1 = ResourceLoaderAware.class;
    // Check ResourceLoaderAware valid objects
    //noinspection unchecked
    assertAwareCompatibility(clazz1, new NGramFilterFactory(map("minGramSize", "1", "maxGramSize", "2")));
    assertAwareCompatibility(clazz1, new KeywordTokenizerFactory(new HashMap<>()));
    
    // Make sure it throws an error for invalid objects
    Object[] invalid = new Object[] {
        // new NGramTokenFilter( null ),
        "hello", 12.3f,
        new LukeRequestHandler(),
        new JSONResponseWriter()
    };
    for( Object obj : invalid ) {
      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz1, obj));
    }
    

    final Class<?> clazz2 = SolrCoreAware.class;
    // Check ResourceLoaderAware valid objects
    assertAwareCompatibility(clazz2, new LukeRequestHandler());
    assertAwareCompatibility(clazz2, new FacetComponent());
    assertAwareCompatibility(clazz2, new JSONResponseWriter());
    
    // Make sure it throws an error for invalid objects
    //noinspection unchecked
    invalid = new Object[] {
        new NGramFilterFactory(map("minGramSize", "1", "maxGramSize", "2")),
        "hello",   12.3f ,
        new KeywordTokenizerFactory(new HashMap<>())
    };
    for( Object obj : invalid ) {
      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz2, obj));
    }
  }

