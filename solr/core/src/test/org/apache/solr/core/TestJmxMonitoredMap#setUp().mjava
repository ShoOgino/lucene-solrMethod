  @Override
  @Before
  public void setUp() throws Exception {

    super.setUp();
    String oldHost = System.getProperty("java.rmi.server.hostname");
    try {
      // this stupid sysprop thing is needed, because remote stubs use the
      // hostname to connect, which does not work with server bound to 127.0.0.1
      // See: http://weblogs.java.net/blog/emcmanus/archive/2006/12/multihomed_comp.html
      System.setProperty("java.rmi.server.hostname", "127.0.0.1");
      class LocalhostRMIServerSocketFactory implements RMIServerSocketFactory {
        ServerSocket socket;
        
        @Override
        public ServerSocket createServerSocket(int port) throws IOException {
          socket = new ServerSocket();
          socket.bind(new InetSocketAddress("127.0.0.1", port));
          return socket;
        }
      };
      LocalhostRMIServerSocketFactory factory = new LocalhostRMIServerSocketFactory();
      LocateRegistry.createRegistry(0, null, factory);
      port = factory.socket.getLocalPort();
      //System.out.println("Using port: " + port);
      String url = "service:jmx:rmi://127.0.0.1:"+port+"/jndi/rmi://127.0.0.1:"+port+"/solrjmx";
      JmxConfiguration config = new JmxConfiguration(true, null, url, null);
      monitoredMap = new JmxMonitoredMap<String, SolrInfoMBean>("", "", config,
        Collections.singletonMap(RMIConnectorServer.RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE, factory));
      JMXServiceURL u = new JMXServiceURL(url);
      connector = JMXConnectorFactory.connect(u);
      mbeanServer = connector.getMBeanServerConnection();
    } finally {
      if (oldHost == null) {
        System.clearProperty("java.rmi.server.hostname");
      } else {
        System.setProperty("java.rmi.server.hostname", oldHost);
      }
    }
  }

