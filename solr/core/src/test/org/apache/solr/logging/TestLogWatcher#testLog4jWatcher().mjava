  // Create several log watchers and ensure that new messages go to the new watcher.
  @Test
  public void testLog4jWatcher() throws InterruptedException {
    LogWatcher watcher = null;
    int lim = random().nextInt(3) + 2;
    for (int idx = 0; idx < lim; ++idx) {
      String msg = "This is a test message: " + idx;
      watcher = LogWatcher.newRegisteredLogWatcher(config, null);

      // First ensure there's nothing in the new watcher.
      assertEquals(-1, watcher.getLastEvent());

      // Now log a message and ensure that the new watcher sees it.
      log.warn(msg);

      // Loop to give the logger time to process the async message and notify the new watcher.
      TimeOut timeOut = new TimeOut(10, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      boolean foundMsg = false;
      // In local testing this loop usually succeeds 1-2 tries.
      do {
        // Returns an empty (but non-null) list even if there are no messages yet.
        SolrDocumentList events = watcher.getHistory(-1, new AtomicBoolean());
        for (SolrDocument doc : events) {
          if (doc.get("message").equals(msg)) {
            foundMsg = true;
            break;
          }
        }
        Thread.sleep(10);
      } while (timeOut.hasTimedOut() == false);

      assertTrue("Should have found message " + msg + " in loop: " + idx, foundMsg);
    }
  }

