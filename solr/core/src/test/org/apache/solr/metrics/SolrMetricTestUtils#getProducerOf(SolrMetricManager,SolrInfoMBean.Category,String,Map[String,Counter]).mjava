  public static SolrMetricProducer getProducerOf(SolrMetricManager metricManager, SolrInfoMBean.Category category, String scope, Map<String, Counter> metrics) {
    return new SolrMetricProducer() {
      @Override
      public Collection<String> initializeMetrics(SolrMetricManager manager, String registry, String scope) {
        if (metrics == null || metrics.isEmpty()) {
          return Collections.emptyList();
        }
        for (Map.Entry<String, Counter> entry : metrics.entrySet()) {
          manager.counter(registry, entry.getKey(), category.toString(), scope);
        }
        return metrics.keySet();
      }

      @Override
      public String getName() {
        return scope;
      }

      @Override
      public String getVersion() {
        return "0.0";
      }

      @Override
      public String getDescription() {
        return "foo";
      }

      @Override
      public Category getCategory() {
        return category;
      }

      @Override
      public String getSource() {
        return null;
      }

      @Override
      public URL[] getDocs() {
        return new URL[0];
      }

      @Override
      public NamedList getStatistics() {
        return null;
      }

      @Override
      public String toString() {
        return "SolrMetricProducer.of{" +
            "\ncategory=" + category +
            "\nscope=" + scope +
            "\nmetrics=" + metrics +
            "\n}";
      }
    };
  }

