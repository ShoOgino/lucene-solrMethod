  @Test
  public void testReporters() throws Exception {
    Random r = random();

    SolrResourceLoader loader = new SolrResourceLoader();
    SolrMetricManager metricManager = new SolrMetricManager();

    PluginInfo[] plugins = new PluginInfo[] {
        createPluginInfo("universal_foo", null, null),
        createPluginInfo("multigroup_foo", "jvm, node, core", null),
        createPluginInfo("multiregistry_foo", null, "solr.node, solr.core.collection1"),
        createPluginInfo("specific_foo", null, "solr.core.collection1"),
        createPluginInfo("node_foo", "node", null),
        createPluginInfo("core_foo", "core", null)
    };
    String tag = "xyz";
    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.node);
    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(
        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));
    assertEquals(4, reporters.size());
    assertTrue(reporters.containsKey("universal_foo@" + tag));
    assertTrue(reporters.containsKey("multigroup_foo@" + tag));
    assertTrue(reporters.containsKey("node_foo@" + tag));
    assertTrue(reporters.containsKey("multiregistry_foo@" + tag));

    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.core, "collection1");
    reporters = metricManager.getReporters(
        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, "collection1"));
    assertEquals(5, reporters.size());
    assertTrue(reporters.containsKey("universal_foo@" + tag));
    assertTrue(reporters.containsKey("multigroup_foo@" + tag));
    assertTrue(reporters.containsKey("specific_foo@" + tag));
    assertTrue(reporters.containsKey("core_foo@" + tag));
    assertTrue(reporters.containsKey("multiregistry_foo@" + tag));

    metricManager.loadReporters(plugins, loader, tag, SolrInfoMBean.Group.jvm);
    reporters = metricManager.getReporters(
        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));
    assertEquals(2, reporters.size());
    assertTrue(reporters.containsKey("universal_foo@" + tag));
    assertTrue(reporters.containsKey("multigroup_foo@" + tag));

    metricManager.removeRegistry("solr.jvm");
    reporters = metricManager.getReporters(
        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.jvm));
    assertEquals(0, reporters.size());

    metricManager.removeRegistry("solr.node");
    reporters = metricManager.getReporters(
        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.node));
    assertEquals(0, reporters.size());

    metricManager.removeRegistry("solr.core.collection1");
    reporters = metricManager.getReporters(
        SolrMetricManager.getRegistryName(SolrInfoMBean.Group.core, "collection1"));
    assertEquals(0, reporters.size());

  }

