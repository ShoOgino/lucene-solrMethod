  @Test
  // commented 4-Sep-2018 @LuceneTestCase.BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 2-Aug-2018
  public void testExplicitConfiguration() throws Exception {
    String solrXml = IOUtils.toString(SolrCloudReportersTest.class.getResourceAsStream("/solr/solr-solrreporter.xml"), "UTF-8");
    configureCluster(2)
        .withSolrXml(solrXml).configure();
    cluster.uploadConfigSet(Paths.get(TEST_PATH().toString(), "configsets", "minimal", "conf"), "test");

    CollectionAdminRequest.createCollection("test_collection", "test", 2, 2)
        .process(cluster.getSolrClient());
    cluster.waitForActiveCollection("test_collection", 2, 4);
    
    waitForState("Expected test_collection with 2 shards and 2 replicas", "test_collection", clusterShape(2, 4));
 
    // TODO this is no good
    Thread.sleep(10000);
    
    cluster.getJettySolrRunners().forEach(jetty -> {
      CoreContainer cc = jetty.getCoreContainer();
      // verify registry names
      for (String name : cc.getLoadedCoreNames()) {
        SolrCore core = cc.getCore(name);
        try {
          String registryName = core.getCoreMetricManager().getRegistryName();
          String leaderRegistryName = core.getCoreMetricManager().getLeaderRegistryName();
          String coreName = core.getName();
          String collectionName = core.getCoreDescriptor().getCollectionName();
          String replicaName = coreName.substring(coreName.indexOf("_replica_") + 1);
          String shardId = core.getCoreDescriptor().getCloudDescriptor().getShardId();

          assertEquals("solr.core." + collectionName + "." + shardId + "." + replicaName, registryName);
          assertEquals("solr.collection." + collectionName + "." + shardId + ".leader", leaderRegistryName);

        } finally {
          if (core != null) {
            core.close();
          }
        }
      }
      SolrMetricManager metricManager = cc.getMetricManager();
      Map<String, SolrMetricReporter> reporters = metricManager.getReporters("solr.cluster");
      assertEquals(reporters.toString(), 1, reporters.size());
      SolrMetricReporter reporter = reporters.get("test");
      assertNotNull(reporter);
      assertTrue(reporter.toString(), reporter instanceof SolrClusterReporter);
      assertEquals(5, reporter.getPeriod());
      assertTrue(reporter.toString(), reporter instanceof SolrCoreContainerReporter);
      SolrCoreContainerReporter solrCoreContainerReporter = (SolrCoreContainerReporter)reporter;
      assertNotNull(solrCoreContainerReporter.getCoreContainer());
      for (String registryName : metricManager.registryNames(".*\\.shard[0-9]\\.replica.*")) {
        reporters = metricManager.getReporters(registryName);
        jmxReporter = 0;
        reporters.forEach((k, v) -> {
          if (v instanceof SolrJmxReporter) {
            jmxReporter++;
          }
        });
        assertEquals(reporters.toString(), 1 + jmxReporter, reporters.size());
        reporter = null;
        for (String name : reporters.keySet()) {
          if (name.startsWith("test")) {
            reporter = reporters.get(name);
          }
        }
        assertNotNull(reporter);
        assertTrue(reporter.toString(), reporter instanceof SolrShardReporter);
        assertEquals(5, reporter.getPeriod());
        assertTrue(reporter.toString(), reporter instanceof SolrCoreReporter);
        SolrCoreReporter solrCoreReporter = (SolrCoreReporter)reporter;
        assertNotNull(solrCoreReporter.getCore());
      }
      for (String registryName : metricManager.registryNames(".*\\.leader")) {
        leaderRegistries++;
        reporters = metricManager.getReporters(registryName);
        // no reporters registered for leader registry
        assertEquals(reporters.toString(), 0, reporters.size());
        // verify specific metrics
        Map<String, Metric> metrics = metricManager.registry(registryName).getMetrics();
        String key = "QUERY./select.requests";
        assertTrue(key, metrics.containsKey(key));
        assertTrue(key, metrics.get(key) instanceof AggregateMetric);
        key = "UPDATE./update.requests";
        assertTrue(key, metrics.containsKey(key));
        assertTrue(key, metrics.get(key) instanceof AggregateMetric);
      }
      if (metricManager.registryNames().contains("solr.cluster")) {
        clusterRegistries++;
        Map<String,Metric> metrics = metricManager.registry("solr.cluster").getMetrics();
        String key = "jvm.memory.heap.init";
        assertTrue(key, metrics.containsKey(key));
        assertTrue(key, metrics.get(key) instanceof AggregateMetric);
        key = "leader.test_collection.shard1.UPDATE./update.requests.max";
        assertTrue(key, metrics.containsKey(key));
        assertTrue(key, metrics.get(key) instanceof AggregateMetric);
      }
    });

    assertEquals("leaderRegistries", 2, leaderRegistries);
    assertEquals("clusterRegistries", 1, clusterRegistries);
  }

