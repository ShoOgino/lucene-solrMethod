  @Test
  public void testReporter() throws Exception {
    Path home = Paths.get(TEST_HOME());
    // define these properties, they are used in solrconfig.xml
    System.setProperty("solr.test.sys.prop1", "propone");
    System.setProperty("solr.test.sys.prop2", "proptwo");

    MockGraphite mock = new MockGraphite();
    try {
      mock.start();
      Thread.sleep(1000);
      // define the port where MockGraphite is running
      System.setProperty("mock-graphite-port", String.valueOf(mock.port));
      String solrXml = FileUtils.readFileToString(Paths.get(home.toString(), "solr-graphitereporter.xml").toFile(), "UTF-8");
      NodeConfig cfg = SolrXmlConfig.fromString(new SolrResourceLoader(home), solrXml);
      CoreContainer cc = createCoreContainer(cfg,
          new TestHarness.TestCoresLocator(DEFAULT_TEST_CORENAME, initCoreDataDir.getAbsolutePath(), "solrconfig.xml", "schema.xml"));
      h.coreName = DEFAULT_TEST_CORENAME;
      SolrMetricManager metricManager = cc.getMetricManager();
      Map<String, SolrMetricReporter> reporters = metricManager.getReporters("solr.node");
      assertEquals(1, reporters.size());
      SolrMetricReporter reporter = reporters.get("test");
      assertNotNull(reporter);
      assertTrue(reporter instanceof SolrGraphiteReporter);
      Thread.sleep(5000);
      assertTrue(mock.lines.size() >= 3);
      String[] frozenLines = (String[])mock.lines.toArray(new String[mock.lines.size()]);
      for (String line : frozenLines) {
        assertTrue(line, line.startsWith("test.solr.node.CONTAINER.cores."));
      }
    } finally {
      mock.close();
    }
  }

