  @Test
  public void testConfigureReporter() throws Exception {
    Random random = random();

    String metricName = SolrMetricManager.mkName(METRIC_NAME, HANDLER_CATEGORY.toString(), HANDLER_NAME);
    SolrCoreMetricManager coreMetricManager = h.getCore().getCoreMetricManager();
    Timer timer = (Timer) metricManager.timer(coreMetricManager.getRegistryName(), metricName);

    long initialCount = timer.getCount();

    int iterations = TestUtil.nextInt(random, 0, MAX_ITERATIONS);
    for (int i = 0; i < iterations; ++i) {
      h.query(req("*"));
    }

    long finalCount = timer.getCount();
    assertEquals("metric counter incorrect", iterations, finalCount - initialCount);
    Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());
    assertEquals(RENAMED_REPORTERS.length, reporters.size());

    // SPECIFIC and MULTIREGISTRY were skipped because they were
    // specific to collection1
    for (String reporterName : RENAMED_REPORTERS) {
      SolrMetricReporter reporter = reporters.get(reporterName);
      assertNotNull("Reporter " + reporterName + " was not found.", reporter);
      assertTrue(reporter instanceof MockMetricReporter);

      MockMetricReporter mockReporter = (MockMetricReporter) reporter;
      assertTrue("Reporter " + reporterName + " was not initialized: " + mockReporter, mockReporter.didInit);
      assertTrue("Reporter " + reporterName + " was not validated: " + mockReporter, mockReporter.didValidate);
      assertFalse("Reporter " + reporterName + " was incorrectly closed: " + mockReporter, mockReporter.didClose);
    }
  }

