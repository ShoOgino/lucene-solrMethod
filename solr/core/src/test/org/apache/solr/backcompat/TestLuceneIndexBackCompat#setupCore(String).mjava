  private void setupCore(String coreName) throws Exception {
    if (h != null) {
      h.close();
    }
    Path solrHome = createTempDir(coreName).toAbsolutePath();
    Files.createDirectories(solrHome);
    Path coreDir = solrHome.resolve(coreName);
    Path confDir = coreDir.resolve("conf");
    Files.createDirectories(confDir);
    Path dataDir = coreDir.resolve("data");
    Path indexDir = dataDir.resolve("index");
    Files.createDirectories(indexDir);

    Files.copy(getFile("solr/solr.xml").toPath(), solrHome.resolve("solr.xml"));
    FileUtils.copyDirectory(configset("backcompat").toFile(), confDir.toFile());

    try (Writer writer = new OutputStreamWriter(Files.newOutputStream(coreDir.resolve("core.properties")), StandardCharsets.UTF_8)) {
      Properties coreProps = new Properties();
      coreProps.put("name", coreName);
      coreProps.store(writer, null);
    }

    InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream("index." + coreName + ".zip");
    assertNotNull("Index name " + coreName + " not found", resource);
    TestUtil.unzip(resource, indexDir);

    configString = "solrconfig.xml";
    schemaString = "schema.xml";
    testSolrHome = solrHome;
    System.setProperty("solr.solr.home", solrHome.toString());
    ignoreException("ignore_exception");
    solrConfig = TestHarness.createConfig(testSolrHome, coreName, getSolrConfigFile());
    h = new TestHarness(coreName, dataDir.toString(), solrConfig, getSchemaFile());
    lrf = h.getRequestFactory("",0,20, CommonParams.VERSION,"2.2");
  }

