  // LUCENE-4853
  public void testHugeBinaryValues() throws Exception {
    Analyzer analyzer = new MockAnalyzer(random());
    // FSDirectory because SimpleText will consume gobbs of
    // space when storing big binary values:
    try (Directory d = newFSDirectory(createTempDir("hugeBinaryValues"))) {
      boolean doFixed = random().nextBoolean();
      int numDocs;
      int fixedLength = 0;
      if (doFixed) {
        // Sometimes make all values fixed length since some
        // codecs have different code paths for this:
        numDocs = TestUtil.nextInt(random(), 10, 20);
        fixedLength = TestUtil.nextInt(random(), 65537, 256 * 1024);
      } else {
        numDocs = TestUtil.nextInt(random(), 100, 200);
      }
      try (IndexWriter w = new IndexWriter(d, newIndexWriterConfig(analyzer))) {
        List<byte[]> docBytes = new ArrayList<>();
        long totalBytes = 0;
        for (int docID = 0; docID < numDocs; docID++) {
          // we don't use RandomIndexWriter because it might add
          // more docvalues than we expect !!!!

          // Must be > 64KB in size to ensure more than 2 pages in
          // PagedBytes would be needed:
          int numBytes;
          if (doFixed) {
            numBytes = fixedLength;
          } else if (docID == 0 || random().nextInt(5) == 3) {
            numBytes = TestUtil.nextInt(random(), 65537, 3 * 1024 * 1024);
          } else {
            numBytes = TestUtil.nextInt(random(), 1, 1024 * 1024);
          }
          totalBytes += numBytes;
          if (totalBytes > 5 * 1024 * 1024) {
            break;
          }
          byte[] bytes = new byte[numBytes];
          random().nextBytes(bytes);
          docBytes.add(bytes);
          Document doc = new Document();
          BytesRef b = new BytesRef(bytes);
          b.length = bytes.length;
          doc.add(new BinaryDocValuesField("field", b));
          doc.add(new StringField("id", "" + docID, Field.Store.YES));
          w.addDocument(doc);
        }


        DirectoryReader r = DirectoryReader.open(w);

        try (LeafReader ar = SlowCompositeReaderWrapper.wrap(r)) {
          TestUtil.checkReader(ar);

          BinaryDocValues s = FieldCache.DEFAULT.getTerms(ar, "field");
          for (int docID = 0; docID < docBytes.size(); docID++) {
            Document doc = ar.document(docID);
            assertEquals(docID, s.nextDoc());
            BytesRef bytes = s.binaryValue();
            byte[] expected = docBytes.get(Integer.parseInt(doc.get("id")));
            assertEquals(expected.length, bytes.length);
            assertEquals(new BytesRef(expected), bytes);
          }
        }
      }
    }
  }

