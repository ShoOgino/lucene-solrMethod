  @Test
  public void testLazyField() throws IOException {
    assertU(adoc("id", "7777",
                 "title", "keyword",
                 "test_hlt", mkstr(10000),
                 "test_hlt", mkstr(20000),
                 "test_hlt", mkstr(30000),
                 "test_hlt", mkstr(40000)));

    assertU(commit());
    SolrCore core = h.getCore();
    
    // initial request
    SolrQueryRequest req = req("q", "id:7777", "fl", "id,title");
    SolrQueryResponse rsp = new SolrQueryResponse();
    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);

    DocList dl = ((ResultContext) rsp.getResponse()).getDocList();
    DocIterator di = dl.iterator();    
    Document d1 = req.getSearcher().doc(di.nextDoc());
    IndexableField[] values1 = null;

    // ensure fl field is non lazy, and non-fl field is lazy
    assertFalse( d1.getField("title") instanceof LazyDocument.LazyField);
    assertFalse( d1.getField("id") instanceof LazyDocument.LazyField);
    values1 = d1.getFields("test_hlt");
    assertEquals(4, values1.length);
    for (int i = 0; i < values1.length; i++) {
      assertTrue( values1[i] instanceof LazyDocument.LazyField );
      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];
      assertFalse( f.hasBeenLoaded() );
    }
    req.close();

    // followup request, different fl
    req = req("q", "id:7777", "fl", "id,test_hlt");
    rsp = new SolrQueryResponse();
    core.execute(core.getRequestHandler(req.getParams().get(CommonParams.QT)), req, rsp);

    dl = ((ResultContext) rsp.getResponse()).getDocList();
    di = dl.iterator();    
    Document d2 = req.getSearcher().doc(di.nextDoc());
    // ensure same doc, same lazy field now
    assertTrue("Doc was not cached", d1 == d2);
    IndexableField[] values2 = d2.getFields("test_hlt");
    assertEquals(values1.length, values2.length);
    for (int i = 0; i < values1.length; i++) {
      assertSame("LazyField wasn't reused", 
                 values1[i], values2[i]);
      LazyDocument.LazyField f = (LazyDocument.LazyField) values1[i];
      // still not a real boy, no response writer in play
      assertFalse(f.hasBeenLoaded()); 
    }

    assertNotNull(values2[0].stringValue()); // actuallize one value
    for (int i = 0; i < values2.length; i++) {
      // now all values for this field should be loaded & cached
      LazyDocument.LazyField f = (LazyDocument.LazyField) values2[i];
      assertTrue(f.hasBeenLoaded());
    }

    req.close();
  } 

