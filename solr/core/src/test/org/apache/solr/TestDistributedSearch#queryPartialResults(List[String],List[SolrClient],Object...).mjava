  @SuppressWarnings({"unchecked", "rawtypes"})
  protected void queryPartialResults(final List<String> upShards,
                                     final List<SolrClient> upClients,
                                     Object... q) throws Exception {
    
    final ModifiableSolrParams params = new ModifiableSolrParams();

    for (int i = 0; i < q.length; i += 2) {
      params.add(q[i].toString(), q[i + 1].toString());
    }
    // TODO: look into why passing true causes fails
    params.set("distrib", "false");
    final QueryResponse controlRsp = controlClient.query(params);
    // if time.allowed is specified then even a control response can return a partialResults header
    if (params.get(CommonParams.TIME_ALLOWED) == null)  {
      validateControlData(controlRsp);
    }

    params.remove("distrib");
    setDistributedParams(params);

    if (upClients.size() == 0) {
      return;
    }
    QueryResponse rsp = queryRandomUpServer(params, upClients);

    comparePartialResponses(rsp, controlRsp, upShards);

    if (stress > 0) {
      log.info("starting stress...");
      Set<Future<Object>> pending = new HashSet<>();;
      ExecutorCompletionService<Object> cs = new ExecutorCompletionService<>(executor);
      Callable[] threads = new Callable[nThreads];
      for (int i = 0; i < threads.length; i++) {
        threads[i] = new Callable() {
          @Override
          public Object call() {
            for (int j = 0; j < stress; j++) {
              int which = r.nextInt(upClients.size());
              SolrClient client = upClients.get(which);
              try {
                QueryResponse rsp = client.query(new ModifiableSolrParams(params));
                if (verifyStress) {
                  comparePartialResponses(rsp, controlRsp, upShards);
                }
              } catch (SolrServerException | IOException e) {
                throw new RuntimeException(e);
              }
            }
            return null;
          }
        };
        pending.add(cs.submit(threads[i]));
      }
      
      while (pending.size() > 0) {
        Future<Object> future = cs.take();
        pending.remove(future);
        future.get();
      }

    }
  }

