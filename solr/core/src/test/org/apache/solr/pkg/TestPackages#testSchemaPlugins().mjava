  @SuppressWarnings("rawtypes")
  public void testSchemaPlugins() throws Exception {
    String COLLECTION_NAME = "testSchemaLoadingColl";
    System.setProperty("managed.schema.mutable", "true");

    MiniSolrCloudCluster cluster =
            configureCluster(4)
                    .withJettyConfig(jetty -> jetty.enableV2(true))
                    .addConfig("conf", configset("cloud-managed"))
                    .configure();
    try {
      String FILE1 = "/schemapkg/schema-plugins.jar";
      byte[] derFile = readFile("cryptokeys/pub_key512.der");
      uploadKey(derFile, PackageStoreAPI.KEYS_DIR+"/pub_key512.der", cluster);
      postFileAndWait(cluster, "runtimecode/schema-plugins.jar.bin", FILE1,
              "iSRhrogDyt9P1htmSf/krh1kx9oty3TYyWm4GKHQGlb8a+X4tKCe9kKk+3tGs+bU9zq5JBZ5txNXsn96aZem5A==");

      String FILE2 = "/schemapkg/payload-component.jar";
      postFileAndWait(cluster, "runtimecode/payload-component.jar.bin", FILE2,
          "gI6vYUDmSXSXmpNEeK1cwqrp4qTeVQgizGQkd8A4Prx2K8k7c5QlXbcs4lxFAAbbdXz9F4esBqTCiLMjVDHJ5Q==");

      Package.AddVersion add = new Package.AddVersion();
      add.version = "1.0";
      add.pkg = "schemapkg";
      add.files = Arrays.asList(FILE1,FILE2);
      V2Request req = new V2Request.Builder("/cluster/package")
              .forceV2(true)
              .withMethod(SolrRequest.METHOD.POST)
              .withPayload(Collections.singletonMap("add", add))
              .build();
      req.process(cluster.getSolrClient());

      TestDistribPackageStore.assertResponseValues(10,
              () -> new V2Request.Builder("/cluster/package").
                      withMethod(SolrRequest.METHOD.GET)
                      .build().process(cluster.getSolrClient()),
              Utils.makeMap(
                      ":result:packages:schemapkg[0]:version", "1.0",
                      ":result:packages:schemapkg[0]:files[0]", FILE1
              ));

      CollectionAdminRequest
              .createCollection(COLLECTION_NAME, "conf", 2, 2)
              .process(cluster.getSolrClient());
      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 4);

      String addFieldTypeAnalyzerWithClass = "{\n" +
              "'add-field-type' : {" +
              "    'name' : 'myNewTextFieldWithAnalyzerClass',\n" +
              "    'class':'schemapkg:my.pkg.MyTextField',\n" +
              "    'analyzer' : {\n" +
              "        'luceneMatchVersion':'5.0.0'" ;
//          + ",\n" +
//          "        'class':'schemapkg:my.pkg.MyWhitespaceAnalyzer'\n";
      String charFilters =
              "        'charFilters' : [{\n" +
                      "            'class':'schemapkg:my.pkg.MyPatternReplaceCharFilterFactory',\n" +
                      "            'replacement':'$1$1',\n" +
                      "            'pattern':'([a-zA-Z])\\\\\\\\1+'\n" +
                      "        }],\n";
      String tokenizer =
              "        'tokenizer' : { 'class':'schemapkg:my.pkg.MyWhitespaceTokenizerFactory' },\n";
      String filters =
          "        'filters' : [{ 'class':'solr.DelimitedPayloadTokenFilterFactory', 'encoder' : 'schemapkg:com.o19s.payloads.Base64Encoder'}]\n";
      String suffix = "    }\n" +
              "}}";
      cluster.getSolrClient().request(new SolrRequest(SolrRequest.METHOD.POST, "/schema") {

        @Override
        public RequestWriter.ContentWriter getContentWriter(String expectedType) {
          return new RequestWriter.StringPayloadContentWriter(addFieldTypeAnalyzerWithClass + ',' + charFilters + tokenizer + filters + suffix, CommonParams.JSON_MIME);
        }

        @Override
        public SolrParams getParams() {
          return null;
        }

        @Override
        public String getCollection() {
          return COLLECTION_NAME;
        }

        @Override
        public SolrResponse createResponse(SolrClient client) {
          return new SolrResponseBase();
        }

        @Override
        public String getRequestType() {
          return SolrRequestType.UNSPECIFIED.toString();
        }
      });
      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, "/schema/fieldtypes/myNewTextFieldWithAnalyzerClass",
              Utils.makeMap(":fieldType:analyzer:charFilters[0]:_packageinfo_:version" ,"1.0",
                      ":fieldType:analyzer:tokenizer:_packageinfo_:version","1.0",
                      ":fieldType:_packageinfo_:version","1.0"));

      add = new Package.AddVersion();
      add.version = "2.0";
      add.pkg = "schemapkg";
      add.files = Arrays.asList(new String[]{FILE1});
      req = new V2Request.Builder("/cluster/package")
              .forceV2(true)
              .withMethod(SolrRequest.METHOD.POST)
              .withPayload(Collections.singletonMap("add", add))
              .build();
      req.process(cluster.getSolrClient());

      TestDistribPackageStore.assertResponseValues(10,
              () -> new V2Request.Builder("/cluster/package").
                      withMethod(SolrRequest.METHOD.GET)
                      .build().process(cluster.getSolrClient()),
              Utils.makeMap(
                      ":result:packages:schemapkg[0]:version", "2.0",
                      ":result:packages:schemapkg[0]:files[0]", FILE1
              ));

      verifySchemaComponent(cluster.getSolrClient(), COLLECTION_NAME, "/schema/fieldtypes/myNewTextFieldWithAnalyzerClass",
              Utils.makeMap(":fieldType:analyzer:charFilters[0]:_packageinfo_:version" ,"2.0",
                      ":fieldType:analyzer:tokenizer:_packageinfo_:version","2.0",
                      ":fieldType:_packageinfo_:version","2.0"));

    } finally {
      cluster.shutdown();
    }

  }

