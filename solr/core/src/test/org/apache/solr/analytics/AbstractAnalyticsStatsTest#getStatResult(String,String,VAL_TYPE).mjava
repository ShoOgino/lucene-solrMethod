  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {

    // Construct the XPath expression. The form better not change or all these will fail.
    StringBuilder sb = new StringBuilder("/response/lst[@name='stats']/lst[@name='").append(section).append("']");

    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a
    // VAL_TYPE.DOUBLE, the element in question is <double name="blah">47.0</double>.
    sb.append("/").append(type.toString()).append("[@name='").append(name).append("']");
    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();
    try {
      switch (type) {
        case INTEGER: return Integer.parseInt(val);
        case DOUBLE:  return Double.parseDouble(val);
        case FLOAT:   return Float.parseFloat(val);
        case LONG:    return Long.parseLong(val);
        case STRING:  assertTrue(rawResponse, val != null && val.length() > 0 ); return val;
        case DATE:    assertTrue(rawResponse, val != null && val.length() > 0 ); return val;
      }
    } catch (Exception e) {
      e.printStackTrace();
      fail("Caught exception in getStatResult, xPath = " + sb.toString() + " \nraw data: " + rawResponse);
    }
    fail("Unknown type used in getStatResult");
    return null; // Really can't get here, but the compiler thinks we can!
  }

