  @Test
  public void testSplitRecommendations() throws Exception {

    // split whole range exactly in two
    DocRouter.Range curr = new DocRouter.Range(10,15);
    List<SplitOp.RangeCount> counts = new ArrayList<>();
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,15), 100));
    Collection<DocRouter.Range> results = SplitOp.getSplits(counts, curr);
    assertEquals(12, results.iterator().next().max);
    verifyContiguous(results, curr);

    // make sure range with docs is split in half even if current range of shard is bigger
    curr = new DocRouter.Range(-100,101);
    counts = new ArrayList<>();
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,15), 100));
    results = SplitOp.getSplits(counts, curr);
    assertEquals(12, results.iterator().next().max);
    verifyContiguous(results, curr);

    // don't freak out if we encounter some ranges outside of the current defined shard range
    // this can happen since document routing can be overridden.
    curr = new DocRouter.Range(-100,101);
    counts = new ArrayList<>();
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(-1000,-990), 100));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(-980,-970), 2));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,15), 100));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(1000,1010), 5));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(1020,1030), 7));
    results = SplitOp.getSplits(counts, curr);
    assertEquals(12, results.iterator().next().max);
    verifyContiguous(results, curr);


    // splitting counts of [1,4,3] should result in [1,4],[3]
    // splitting count sof [3,4,1] should result in [3],[4,1]
    // The current implementation has specific code for the latter case (hence this is needed for code coverage)
    // The random tests *should* catch this as well though.
    curr = new DocRouter.Range(-100,101);
    counts = new ArrayList<>();
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(0,9), 1));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,19), 4));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(20,29), 3));
    results = SplitOp.getSplits(counts, curr);
    assertEquals(19, results.iterator().next().max);
    verifyContiguous(results, curr);

    curr = new DocRouter.Range(-100,101);
    counts = new ArrayList<>();
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(0,9), 3));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,19), 4));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(20,29), 1));
    results = SplitOp.getSplits(counts, curr);
    assertEquals(9, results.iterator().next().max);
    verifyContiguous(results, curr);


    // test that if largest count is first
    curr = new DocRouter.Range(-100,101);
    counts = new ArrayList<>();
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(0,9), 4));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,19), 1));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(20,29), 1));
    results = SplitOp.getSplits(counts, curr);
    assertEquals(9, results.iterator().next().max);
    verifyContiguous(results, curr);

    // test that if largest count is last (this has specific code since we don't get over midpoint until the last range and then need to back up)
    curr = new DocRouter.Range(-100,101);
    counts = new ArrayList<>();
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(0,9), 1));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(10,19), 1));
    counts.add(new SplitOp.RangeCount(new DocRouter.Range(20,29), 4));
    results = SplitOp.getSplits(counts, curr);
    assertEquals(19, results.iterator().next().max);
    verifyContiguous(results, curr);
  }

