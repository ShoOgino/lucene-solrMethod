  public void testWhiteBoxPhraseParsingLongInput() throws Exception {
    final SchemaField field = h.getCore().getLatestSchema().getField("multigrams_body");
    assertNotNull(field);
    final List<Phrase> phrases = Phrase.extractPhrases
      (" did  a Quick    brown FOX perniciously jump over the lAZy dog", field, 3, 7);

    assertEquals(IntStream.rangeClosed((11-7+1), 11).sum(), // 11 words, max query phrase size is 7
                 phrases.size());
    
    // spot check a few explicitly choosen phrases of various lengths...
    
    { // single term, close to edge so not as many super phrases as other terms might have
      final Phrase lazy = phrases.get(phrases.size() - 1 - 2);
      final String debug = lazy.toString();

      assertEquals(debug, "lAZy", lazy.getSubSequence());
      assertEquals(debug, 10, lazy.getPositionStart());
      assertEquals(debug, 11, lazy.getPositionEnd());
      assertEquals(debug, 1, lazy.getPositionLength());
      
      assertEquals(debug, 54, lazy.getOffsetStart());
      assertEquals(debug, 58, lazy.getOffsetEnd());

      assertEquals(debug, 1, lazy.getIndividualIndexedTerms().size());
      assertEquals(debug, 1, lazy.getLargestIndexedSubPhrases().size());
      assertEquals(debug, lazy, lazy.getIndividualIndexedTerms().get(0));
      assertEquals(debug, lazy, lazy.getLargestIndexedSubPhrases().get(0));
      assertEquals(debug, 4, lazy.getIndexedSuperPhrases().size()); // (2 each: len=2, len=3)
    }
    { // length 2, middle of the pack
      final Phrase brown_fox = phrases.get((7 * 3) + 1);
      final String debug = brown_fox.toString();

      assertEquals(debug, "brown FOX", brown_fox.getSubSequence());
      assertEquals(debug, 4, brown_fox.getPositionStart());
      assertEquals(debug, 6, brown_fox.getPositionEnd());
      assertEquals(debug, 2, brown_fox.getPositionLength());
      
      assertEquals(debug, 17, brown_fox.getOffsetStart());
      assertEquals(debug, 26, brown_fox.getOffsetEnd());

      assertEquals(debug, 2, brown_fox.getIndividualIndexedTerms().size());
      assertEquals(debug, 1, brown_fox.getLargestIndexedSubPhrases().size());
      assertEquals(debug, brown_fox, brown_fox.getLargestIndexedSubPhrases().get(0));
      assertEquals(debug, 2, brown_fox.getIndexedSuperPhrases().size()); // (2 @ len=3)
      
    }
    { // length 3 (which is the max indexed size) @ start of the string
      final Phrase daq = phrases.get(2);
      final String debug = daq.toString();

      assertEquals(debug, "did  a Quick", daq.getSubSequence());
      assertEquals(debug, 1, daq.getPositionStart());
      assertEquals(debug, 4, daq.getPositionEnd());
      assertEquals(debug, 3, daq.getPositionLength());
      
      assertEquals(debug, 1, daq.getOffsetStart());
      assertEquals(debug, 13, daq.getOffsetEnd());

      assertEquals(debug, 3, daq.getIndividualIndexedTerms().size());
      assertEquals(debug, 1, daq.getLargestIndexedSubPhrases().size());
      assertEquals(debug, daq, daq.getLargestIndexedSubPhrases().get(0));
      assertEquals(debug, 0, daq.getIndexedSuperPhrases().size());
    }
    { // length 4 phrase (larger then the max indexed size)
      final Phrase qbfp = phrases.get((7 * 2) + 3);
      final String debug = qbfp.toString();

      assertEquals(debug, "Quick    brown FOX perniciously", qbfp.getSubSequence());
      assertEquals(debug, 3, qbfp.getPositionStart());
      assertEquals(debug, 7, qbfp.getPositionEnd());
      assertEquals(debug, 4, qbfp.getPositionLength());
      
      assertEquals(debug, 8, qbfp.getOffsetStart());
      assertEquals(debug, 39, qbfp.getOffsetEnd());

      assertEquals(debug, 4, qbfp.getIndividualIndexedTerms().size());
      assertEquals(debug, 2, qbfp.getLargestIndexedSubPhrases().size());
      assertEquals(debug, 0, qbfp.getIndexedSuperPhrases().size());
    }
    
    // some blanket assumptions about the results...
    assertBasicSanityChecks(phrases, 11, 3, 7);
  }

