  @Test
  public void testSorting() throws Exception {
    try {
      init("schema12.xml");
      assertU(adoc("id", "a", "title", "ipod trash trash", "str_s1", "group1"));
      assertU(adoc("id", "b", "title", "ipod ipod  trash", "str_s1", "group2"));
      assertU(adoc("id", "c", "title", "ipod ipod  ipod ", "str_s1", "group2"));

      assertU(adoc("id", "x", "title", "boosted",                 "str_s1", "group1"));
      assertU(adoc("id", "y", "title", "boosted boosted",         "str_s1", "group2"));
      assertU(adoc("id", "z", "title", "boosted boosted boosted", "str_s1", "group2"));
      assertU(commit());

      final String query = "title:ipod";

      final SolrParams baseParams = params(
          "qt", "/elevate",
          "q", query,
          "fl", "id,score",
          "indent", "true");

      QueryElevationComponent booster = (QueryElevationComponent) h.getCore().getSearchComponent("elevate");
      IndexReader reader = h.getCore().withSearcher(SolrIndexSearcher::getIndexReader);

      assertQ("Make sure standard sort works as expected", req(baseParams)
          , "//*[@numFound='3']"
          , "//result/doc[1]/str[@name='id'][.='c']"
          , "//result/doc[2]/str[@name='id'][.='b']"
          , "//result/doc[3]/str[@name='id'][.='a']"
      );

      // Explicitly set what gets boosted
      booster.setTopQueryResults(reader, query, false, new String[]{"x", "y", "z"}, null);

      assertQ("All six should make it", req(baseParams)
          , "//*[@numFound='6']"
          , "//result/doc[1]/str[@name='id'][.='x']"
          , "//result/doc[2]/str[@name='id'][.='y']"
          , "//result/doc[3]/str[@name='id'][.='z']"
          , "//result/doc[4]/str[@name='id'][.='c']"
          , "//result/doc[5]/str[@name='id'][.='b']"
          , "//result/doc[6]/str[@name='id'][.='a']"
      );

      // now switch the order:
      booster.setTopQueryResults(reader, query, false, new String[]{"a", "x"}, null);
      assertQ(req(baseParams)
          , "//*[@numFound='4']"
          , "//result/doc[1]/str[@name='id'][.='a']"
          , "//result/doc[2]/str[@name='id'][.='x']"
          , "//result/doc[3]/str[@name='id'][.='c']"
          , "//result/doc[4]/str[@name='id'][.='b']"
      );

      // Try normal sort by 'id'
      // default 'forceBoost' should be false
      assertFalse(booster.forceElevation);
      assertQ(req(baseParams, "sort", "id asc")
          , "//*[@numFound='4']"
          , "//result/doc[1]/str[@name='id'][.='a']"
          , "//result/doc[2]/str[@name='id'][.='b']"
          , "//result/doc[3]/str[@name='id'][.='c']"
          , "//result/doc[4]/str[@name='id'][.='x']"
      );

      assertQ("useConfiguredElevatedOrder=false",
          req(baseParams, "sort", "str_s1 asc,id desc", "useConfiguredElevatedOrder", "false")
          , "//*[@numFound='4']"
          , "//result/doc[1]/str[@name='id'][.='x']"//group1
          , "//result/doc[2]/str[@name='id'][.='a']"//group1
          , "//result/doc[3]/str[@name='id'][.='c']"
          , "//result/doc[4]/str[@name='id'][.='b']"
      );

      booster.forceElevation = true;
      assertQ(req(baseParams, "sort", "id asc")
          , "//*[@numFound='4']"
          , "//result/doc[1]/str[@name='id'][.='a']"
          , "//result/doc[2]/str[@name='id'][.='x']"
          , "//result/doc[3]/str[@name='id'][.='b']"
          , "//result/doc[4]/str[@name='id'][.='c']"
      );

      booster.forceElevation = true;
      assertQ("useConfiguredElevatedOrder=false and forceElevation",
          req(baseParams, "sort", "id desc", "useConfiguredElevatedOrder", "false")
          , "//*[@numFound='4']"
          , "//result/doc[1]/str[@name='id'][.='x']" // force elevated
          , "//result/doc[2]/str[@name='id'][.='a']" // force elevated
          , "//result/doc[3]/str[@name='id'][.='c']"
          , "//result/doc[4]/str[@name='id'][.='b']"
      );

      //Test exclusive (not to be confused with exclusion)
      booster.setTopQueryResults(reader, query, false, new String[]{"x", "a"}, new String[]{});
      assertQ(req(baseParams, "exclusive", "true")
          , "//*[@numFound='2']"
          , "//result/doc[1]/str[@name='id'][.='x']"
          , "//result/doc[2]/str[@name='id'][.='a']"
      );

      // Test exclusion
      booster.setTopQueryResults(reader, query, false, new String[]{"x"}, new String[]{"a"});
      assertQ(req(baseParams)
          , "//*[@numFound='3']"
          , "//result/doc[1]/str[@name='id'][.='x']"
          , "//result/doc[2]/str[@name='id'][.='c']"
          , "//result/doc[3]/str[@name='id'][.='b']"
      );


      // Test setting ids and excludes from http parameters

      booster.clearElevationProviderCache();
      assertQ("All five should make it", req(baseParams, "elevateIds", "x,y,z", "excludeIds", "b")
          , "//*[@numFound='5']"
          , "//result/doc[1]/str[@name='id'][.='x']"
          , "//result/doc[2]/str[@name='id'][.='y']"
          , "//result/doc[3]/str[@name='id'][.='z']"
          , "//result/doc[4]/str[@name='id'][.='c']"
          , "//result/doc[5]/str[@name='id'][.='a']"
      );

      assertQ("All four should make it", req(baseParams, "elevateIds", "x,z,y", "excludeIds", "b,c")
          , "//*[@numFound='4']"
          , "//result/doc[1]/str[@name='id'][.='x']"
          , "//result/doc[2]/str[@name='id'][.='z']"
          , "//result/doc[3]/str[@name='id'][.='y']"
          , "//result/doc[4]/str[@name='id'][.='a']"
      );

    } finally {
      delete();
    }
  }

