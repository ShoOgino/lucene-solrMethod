  public void doTestMonitor(final boolean checkBlockedThreadViaPolling) throws Exception {
    assumeTrue("monitor checking not supported on this JVM",
               ManagementFactory.getThreadMXBean().isObjectMonitorUsageSupported());
    
    /** unique class name to show up as a lock class name in output */
    final class TestMonitorStruct { /* empty */ }
    
    final List<String> failures = new ArrayList<>();
    final CountDownLatch lockIsHeldLatch = new CountDownLatch(1);
    final CountDownLatch doneWithTestLatch = new CountDownLatch(1);
    final Object monitor = new TestMonitorStruct();
    final Thread ownerT = new Thread(() -> {
        synchronized (monitor) {
          lockIsHeldLatch.countDown();
          log.info("monitor ownerT waiting for doneWithTestLatch to release me...");
          try {
            if ( ! doneWithTestLatch.await(30, TimeUnit.SECONDS ) ){
              failures.add("ownerT: never saw doneWithTestLatch released");
            }
          } catch (InterruptedException ie) {
            failures.add("ownerT: " + ie.toString());
          }
        }
      }, "test-thread-monitor-owner");

    // only used if checkBlockedThreadViaPolling
    // don't start until after lockIsHeldLatch fires    
    final Thread blockedT = new Thread(() -> {
        log.info("blockedT waiting for monitor...");
        synchronized (monitor) {
          log.info("monitor now unblocked");
        }
      }, "test-thread-monitor-blocked");
    
    try {
      ownerT.start();
      if ( ! lockIsHeldLatch.await(30, TimeUnit.SECONDS ) ){
        failures.add("never saw lockIsHeldLatch released");
        return;
      }
      assertQ(req("qt", "/admin/threads", "indent", "true")
              // monitor owner 'ownerT'
              // (which *MAY* also be waiting on doneWithTestLatch, but may not have reached that line yet)
              , "//lst[@name='thread'][str[@name='name'][.='test-thread-monitor-owner']]"
              + "                     [arr[@name='monitors-locked']/str[contains(.,'TestMonitorStruct')]]"
              );

      if (checkBlockedThreadViaPolling) {
        log.info("Also checking with blockedT thread setup via polling...");
        try {
          blockedT.setPriority(Thread.MAX_PRIORITY);
        } catch (Exception e) {
          log.warn("Couldn't set blockedT priority", e);
        }
        blockedT.start();
        // there is no way to "await" on the situation of the 'blockedT' thread actually reaching the
        // "synchronized" block and becoming BLOCKED ... we just have to Poll for it...
        for (int i = 0; i < 500 && (! Thread.State.BLOCKED.equals(blockedT.getState())); i++) {
          Thread.sleep(10); // 10ms at a time, at most 5 sec total
        }
        if (Thread.State.BLOCKED.equals(blockedT.getState())) {
          assertQ(req("qt", "/admin/threads", "indent", "true")
                  // same monitor owner 'ownerT'
                  , "//lst[@name='thread'][str[@name='name'][.='test-thread-monitor-owner']]"
                  + "                     [arr[@name='monitors-locked']/str[contains(.,'TestMonitorStruct')]]"
                  // blocked thread 'blockedT', waiting on the monitor
                  , "//lst[@name='thread'][str[@name='name'][.='test-thread-monitor-blocked']]"
                  + "                     [str[@name='state'][.='BLOCKED']]"
                  + "                     [lst[@name='lock-waiting'][lst[@name='owner']/str[.='test-thread-monitor-owner']]]"
                  );
        }
      }
    } finally {
      lockIsHeldLatch.countDown();
      doneWithTestLatch.countDown();
      ownerT.join(1000);
      assertFalse("ownerT is still alive", ownerT.isAlive());
      blockedT.join(1000);
      assertFalse("blockedT is still alive", blockedT.isAlive());
    }
  }

