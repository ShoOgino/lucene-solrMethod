  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {
    assumeWorkingMockito();
    
    CoreContainer mockCC = mock(CoreContainer.class);
    when(mockCC.create(any(String.class), any(Path.class) , any(Map.class), anyBoolean())).thenAnswer(invocationOnMock -> {
      in.put("create", invocationOnMock.getArguments());
      return null;
    });

    doAnswer(invocationOnMock -> {
      in.put("swap", invocationOnMock.getArguments());
      return null;
    }).when(mockCC).swap(any(String.class), any(String.class));

    doAnswer(invocationOnMock -> {
      in.put("rename", invocationOnMock.getArguments());
      return null;
    }).when(mockCC).rename(any(String.class), any(String.class));


    doAnswer(invocationOnMock -> {
      in.put("unload", invocationOnMock.getArguments());
      return null;
    }).when(mockCC).unload(any(String.class), anyBoolean(),
        anyBoolean(), anyBoolean());

    when(mockCC.getCoreRootDirectory()).thenReturn(Paths.get("coreroot"));
    when(mockCC.getContainerProperties()).thenReturn(new Properties());

    when(mockCC.getRequestHandlers()).thenAnswer(invocationOnMock -> out.get("getRequestHandlers"));
    return mockCC;
  }

