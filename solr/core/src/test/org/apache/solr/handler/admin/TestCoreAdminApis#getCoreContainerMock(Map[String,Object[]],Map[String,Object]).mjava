  public static CoreContainer getCoreContainerMock(final Map<String, Object[]> in,Map<String,Object> out ) {
    CoreContainer mockCC = EasyMock.createMock(CoreContainer.class);
    EasyMock.reset(mockCC);
    mockCC.create(anyObject(String.class), anyObject(Path.class) , anyObject(Map.class), anyBoolean());
    EasyMock.expectLastCall().andAnswer(() -> {
      in.put("create", getCurrentArguments());
      return null;
    }).anyTimes();
    mockCC.swap(anyObject(String.class), anyObject(String.class));
    EasyMock.expectLastCall().andAnswer(() -> {
      in.put("swap", getCurrentArguments());
      return null;
    }).anyTimes();

    mockCC.rename(anyObject(String.class), anyObject(String.class));
    EasyMock.expectLastCall().andAnswer(() -> {
      in.put("rename", getCurrentArguments());
      return null;
    }).anyTimes();

    mockCC.unload(anyObject(String.class), anyBoolean(),
        anyBoolean(), anyBoolean());
    EasyMock.expectLastCall().andAnswer(() -> {
      in.put("unload", getCurrentArguments());
      return null;
    }).anyTimes();

    mockCC.getCoreRootDirectory();
    EasyMock.expectLastCall().andAnswer(() -> Paths.get("coreroot")).anyTimes();
    mockCC.getContainerProperties();
    EasyMock.expectLastCall().andAnswer(() -> new Properties()).anyTimes();

    mockCC.getRequestHandlers();
    EasyMock.expectLastCall().andAnswer(() -> out.get("getRequestHandlers")).anyTimes();

    EasyMock.replay(mockCC);
    return mockCC;
  }

