  private void testBasicGroupingTint() throws Exception {

    CloudJettyRunner jetty = this.cloudJettys.get(0);

    del("*:*");

    commit();

    indexr("id", "1", "text", "XXXX XXXX", "str_s", "a", "field_ti", "7");
    indexr("id", "2", "text", "XXXX XXXX", "str_s", "b", "field_ti", "8");
    indexr("id", "3", "text", "XXXX XXXX", "str_s", "a", "field_ti", "20");
    indexr("id", "4", "text", "XXXX XXXX", "str_s", "b", "field_ti", "11");
    indexr("id", "5", "text", "XXXX XXXX", "str_s", "c", "field_ti", "30");
    indexr("id", "6", "text", "XXXX XXXX", "str_s", "c", "field_ti", "40");
    indexr("id", "7", "text", "XXXX XXXX", "str_s", "c", "field_ti", "50");
    indexr("id", "8", "text", "XXXX XXXX", "str_s", "c", "field_ti", "60");
    indexr("id", "9", "text", "XXXX XXXY", "str_s", "d", "field_ti", "70");
    commit();

    SolrParams sParams = mapParams(CommonParams.QT, "/sql",
        "stmt",
        "select str_s, count(*), sum(field_ti), min(field_ti), max(field_ti), avg(field_ti) from collection1 where text='XXXX' group by str_s order by sum(field_ti) asc limit 2");

    SolrStream solrStream = new SolrStream(jetty.url, sParams);
    List<Tuple> tuples = getTuples(solrStream);

    // Only two results because of the limit.
    assert (tuples.size() == 2);
    Tuple tuple;

    tuple = tuples.get(0);
    assert (tuple.get("str_s").equals("b"));
    assert (tuple.getDouble("EXPR$1") == 2); // count(*)
    assert (tuple.getDouble("EXPR$2") == 19); // sum(field_i)
    assert (tuple.getDouble("EXPR$3") == 8); // min(field_i)
    assert (tuple.getDouble("EXPR$4") == 11); // max(field_i)
    assert (tuple.getDouble("EXPR$5") == 10); // avg(field_i)

    tuple = tuples.get(1);
    assert (tuple.get("str_s").equals("a"));
    assert (tuple.getDouble("EXPR$1") == 2); // count(*)
    assert (tuple.getDouble("EXPR$2") == 27); // sum(field_i)
    assert (tuple.getDouble("EXPR$3") == 7); // min(field_i)
    assert (tuple.getDouble("EXPR$4") == 20); // max(field_i)
    assert (tuple.getDouble("EXPR$5") == 14); // avg(field_i)

  }

