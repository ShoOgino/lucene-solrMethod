  public void testOwnableSync() throws Exception {
    assumeTrue("ownable sync checking not supported on this JVM",
               ManagementFactory.getThreadMXBean().isSynchronizerUsageSupported());

    /** unique class name to show up as a lock class name in output */
    final class TestReentrantLockStruct extends ReentrantLock { /* empty */ }
    
    final List<String> failures = new ArrayList<>();
    final CountDownLatch latch = new CountDownLatch(1);
    final ReentrantLock lock = new ReentrantLock();
    final Thread owner = new Thread(() -> {
        lock.lock();
        try {
          log.info("lock owner waiting for latch to release me...");
          try {
            if ( ! latch.await(5, TimeUnit.SECONDS ) ){
              failures.add("owner: never saw latch release");
            }
          } catch (InterruptedException ie) {
            failures.add("owner: " + ie.toString());
          }
        } finally {
          lock.unlock();
        }
      }, "test-thread-sync-lock-owner");
    final Thread blocked = new Thread(() -> {
        log.info("blocked waiting for lock...");
        lock.lock();
        try {
          log.info("lock now unblocked");
        } finally {
          lock.unlock();
        }
      }, "test-thread-sync-lock-blocked");
    try {
      owner.start();
      blocked.start();
      
      assertQ(req("qt", "/admin/threads", "indent", "true")
              // lock owner thread (which is also currently waiting on CountDownLatch)
              , "//lst[@name='thread'][str[@name='name'][.='test-thread-sync-lock-owner']]"
              + "                     [lst[@name='lock-waiting'][null[@name='owner']]]" // latch
              + "                     [arr[@name='synchronizers-locked']/str[contains(.,'ReentrantLock')]]"
              // blocked thread, waiting on the lock
              , "//lst[@name='thread'][str[@name='name'][.='test-thread-sync-lock-blocked']]"
              + "                     [lst[@name='lock-waiting'][lst[@name='owner']/str[.='test-thread-sync-lock-owner']]]"
              );
      
    } finally {
      latch.countDown();
      owner.join(1000);
      assertFalse("owner is still alive", owner.isAlive());
      blocked.join(1000);
      assertFalse("blocked is still alive", blocked.isAlive());
    }
  }

