  @Test
  //commented 20-Sep-2018  @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // added 17-Aug-2018
  public void doTestStressReplication() throws Exception {
    // change solrconfig on follower
    // this has no entry for pollinginterval
    
    // get us a straight standard fs dir rather than mock*dir
    boolean useStraightStandardDirectory = random().nextBoolean();
    
    if (useStraightStandardDirectory) {
      useFactory(null);
    }
    final String FOLLOWER_SCHEMA_1 = "schema-replication1.xml";
    final String FOLLOWER_SCHEMA_2 = "schema-replication2.xml";
    String followerSchema = FOLLOWER_SCHEMA_1;

    try {

      follower.setTestPort(leaderJetty.getLocalPort());
      follower.copyConfigFile(CONF_DIR +"solrconfig-follower1.xml", "solrconfig.xml");
      follower.copyConfigFile(CONF_DIR +followerSchema, "schema.xml");
      followerJetty.stop();
      followerJetty = createAndStartJetty(follower);
      followerClient.close();
      followerClient = createNewSolrClient(followerJetty.getLocalPort());

      leader.copyConfigFile(CONF_DIR + "solrconfig-leader3.xml",
          "solrconfig.xml");
      leaderJetty.stop();
      leaderJetty = createAndStartJetty(leader);
      leaderClient.close();
      leaderClient = createNewSolrClient(leaderJetty.getLocalPort());
      
      leaderClient.deleteByQuery("*:*");
      followerClient.deleteByQuery("*:*");
      followerClient.commit();
      
      int maxDocs = TEST_NIGHTLY ? 1000 : 75;
      int rounds = TEST_NIGHTLY ? 45 : 3;
      int totalDocs = 0;
      int id = 0;
      for (int x = 0; x < rounds; x++) {
        
        final boolean confCoreReload = random().nextBoolean();
        if (confCoreReload) {
          // toggle the schema file used

          followerSchema = followerSchema.equals(FOLLOWER_SCHEMA_1) ?
            FOLLOWER_SCHEMA_2 : FOLLOWER_SCHEMA_1;
          leader.copyConfigFile(CONF_DIR + followerSchema, "schema.xml");
        }
        
        int docs = random().nextInt(maxDocs) + 1;
        for (int i = 0; i < docs; i++) {
          index(leaderClient, "id", id++, "name", "name = " + i);
        }
        
        totalDocs += docs;
        leaderClient.commit();
        
        @SuppressWarnings({"rawtypes"})
        NamedList leaderQueryRsp = rQuery(totalDocs, "*:*", leaderClient);
        SolrDocumentList leaderQueryResult = (SolrDocumentList) leaderQueryRsp
            .get("response");
        assertEquals(totalDocs, leaderQueryResult.getNumFound());
        
        // index fetch
        Date followerCoreStart = watchCoreStartAt(followerClient, 30*1000, null);
        pullFromLeaderToFollower();
        if (confCoreReload) {
          watchCoreStartAt(followerClient, 30*1000, followerCoreStart);
        }

        // get docs from follower and check if number is equal to leader
        @SuppressWarnings({"rawtypes"})
        NamedList followerQueryRsp = rQuery(totalDocs, "*:*", followerClient);
        SolrDocumentList followerQueryResult = (SolrDocumentList) followerQueryRsp
            .get("response");
        assertEquals(totalDocs, followerQueryResult.getNumFound());
        // compare results
        String cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult,
            followerQueryResult, 0, null);
        assertEquals(null, cmp);
        
        assertVersions(leaderClient, followerClient);
        
        checkForSingleIndex(leaderJetty);
        
        if (!Constants.WINDOWS) {
          checkForSingleIndex(followerJetty);
        }
        
        if (random().nextBoolean()) {
          // move the follower ahead
          for (int i = 0; i < 3; i++) {
            index(followerClient, "id", id++, "name", "name = " + i);
          }
          followerClient.commit();
        }
        
      }
      
    } finally {
      if (useStraightStandardDirectory) {
        resetFactory();
      }
    }
  }

