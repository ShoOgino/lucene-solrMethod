  @Test
  public void testAPIs() throws IOException, SolrServerException, InterruptedException {

    checkCmdsNoDaemon(daemonOfInterest); // test no daemon defined

    // Now create all our daemons.
    for (String name : daemonNames) {
      createDaemon(DAEMON_DEF.replace("DAEMON_NAME", name), name);
    }

    List<Tuple> tuples = getTuples(TestSQLHandler.mapParams("qt", "/stream", "action", "list"));
    assertEquals("Should have all daemons listed", numDaemons, tuples.size());

    for (int idx = 0; idx < numDaemons; ++idx) {
      assertEquals("Daemon should be running ", tuples.get(idx).getString("id"), daemonNames.get(idx));
    }

    // Are all the daemons in a good state?
    for (String daemon : daemonNames) {
      checkAlive(daemon);
    }

    // We shouldn't be able to open a daemon twice without closing., leads to thread leeks.
    Tuple tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams("qt", "/stream", "action", "start", "id", daemonOfInterest)
        , DAEMON_OP);
    assertTrue("Should not open twice without closing",
        tupleOfInterest.getString(DAEMON_OP).contains("There is already an open daemon named"));

    // Try stopping and check return.
    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams("qt", "/stream", "action", "stop", "id", daemonOfInterest),
        DAEMON_OP);
    assertTrue("Should have been able to stop the daemon",
        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + " stopped"));
    checkStopped();

    // Are all the daemons alive? NOTE: a stopped daemon is still there, but in a TERMINATED state
    for (String daemon : daemonNames) {
      if (daemon.equals(daemonOfInterest) == false) {
        checkAlive(daemon);
      }
    }

    // Try starting and check return.
    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams("qt", "/stream", "action", "start", "id", daemonOfInterest),
        DAEMON_OP);
    assertTrue("Should have been able to start the daemon",
        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + " started"));

    // Are all the daemons alive?
    for (String daemon : daemonNames) {
      checkAlive(daemon);
    }

    // Try killing a daemon, it should be removed from lists.
    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams("qt", "/stream", "action", "kill", "id", daemonOfInterest),
        DAEMON_OP);
    assertTrue("Daemon should have been killed",
        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + " killed"));

    // Loop for a bit, waiting for the daemon to be removed from the list of possible entries.
    checkDaemonKilled(daemonOfInterest);

    // Should not be able to start a killed daemon
    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams("qt", "/stream", "action", "start", "id", daemonOfInterest),
        DAEMON_OP);
    assertTrue("Daemon should not be found",
        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + " not found"));

    // Should not be able to sop a killed daemon
    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams("qt", "/stream", "action", "stop", "id", daemonOfInterest),
        DAEMON_OP);
    assertTrue("Daemon should not be found",
        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + " not found"));

    // Should not be able to kill a killed daemon
    tupleOfInterest = getTupleOfInterest(TestSQLHandler.mapParams("qt", "/stream", "action", "kill", "id", daemonOfInterest),
        DAEMON_OP);
    assertTrue("Daemon should not be found",
        tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + " not found"));


    // Let's bring the killed daemon back and see if it returns in our lists. Use the method that loops a bit to check
    // in case there's a delay.
    createDaemon(DAEMON_DEF.replace("DAEMON_NAME", daemonOfInterest), daemonOfInterest);
    checkAlive(daemonOfInterest);

    // Now kill them all so the threads disappear.
    for (String daemon : daemonNames) {
        getTuples(TestSQLHandler.mapParams("qt", "/stream", "action", "kill", "id", daemon));
        checkDaemonKilled(daemon);
    }
  }

