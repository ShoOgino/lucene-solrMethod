  @Test
  public void testMixedCaseFields() throws Exception {

    new UpdateRequest()
        .add("id", "1", "Text_t", "XXXX XXXX", "Str_s", "a", "Field_i", "7")
        .add("id", "2", "Text_t", "XXXX XXXX", "Str_s", "b", "Field_i", "8")
        .add("id", "3", "Text_t", "XXXX XXXX", "Str_s", "a", "Field_i", "20")
        .add("id", "4", "Text_t", "XXXX XXXX", "Str_s", "b", "Field_i", "11")
        .add("id", "5", "Text_t", "XXXX XXXX", "Str_s", "c", "Field_i", "30")
        .add("id", "6", "Text_t", "XXXX XXXX", "Str_s", "c", "Field_i", "40")
        .add("id", "7", "Text_t", "XXXX XXXX", "Str_s", "c", "Field_i", "50")
        .add("id", "8", "Text_t", "XXXX XXXX", "Str_s", "c", "Field_i", "60")
        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);

    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+"/"+COLLECTIONORALIAS;

    SolrParams sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
        "stmt", "select id, Field_i, Str_s from collection1 where Text_t='XXXX' order by Field_i desc");

    List<Tuple> tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 8);

    Tuple tuple;

    tuple = tuples.get(0);
    assert (tuple.getLong("id") == 8);
    assert (tuple.getLong("Field_i") == 60);
    assert (tuple.get("Str_s").equals("c"));

    tuple = tuples.get(1);
    assert (tuple.getLong("id") == 7);
    assert (tuple.getLong("Field_i") == 50);
    assert (tuple.get("Str_s").equals("c"));

    tuple = tuples.get(2);
    assert (tuple.getLong("id") == 6);
    assert (tuple.getLong("Field_i") == 40);
    assert (tuple.get("Str_s").equals("c"));

    tuple = tuples.get(3);
    assert (tuple.getLong("id") == 5);
    assert (tuple.getLong("Field_i") == 30);
    assert (tuple.get("Str_s").equals("c"));

    tuple = tuples.get(4);
    assert (tuple.getLong("id") == 3);
    assert (tuple.getLong("Field_i") == 20);
    assert (tuple.get("Str_s").equals("a"));

    tuple = tuples.get(5);
    assert (tuple.getLong("id") == 4);
    assert (tuple.getLong("Field_i") == 11);
    assert (tuple.get("Str_s").equals("b"));

    tuple = tuples.get(6);
    assert (tuple.getLong("id") == 2);
    assert (tuple.getLong("Field_i") == 8);
    assert (tuple.get("Str_s").equals("b"));

    tuple = tuples.get(7);
    assert (tuple.getLong("id") == 1);
    assert (tuple.getLong("Field_i") == 7);
    assert (tuple.get("Str_s").equals("a"));

    // TODO get sum(Field_i) as named one
    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt",
        "select Str_s, sum(Field_i) from collection1 where id='(1 8)' group by Str_s having (sum(Field_i) = 7 OR sum(Field_i) = 60) order by sum(Field_i) desc");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 2);

    tuple = tuples.get(0);
    assert (tuple.get("Str_s").equals("c"));
    assert (tuple.getDouble("EXPR$1") == 60);

    tuple = tuples.get(1);
    assert (tuple.get("Str_s").equals("a"));
    assert (tuple.getDouble("EXPR$1") == 7);

    sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
        "stmt",
        "select Str_s, sum(Field_i) from collection1 where id='(1 8)' group by Str_s having (sum(Field_i) = 7 OR sum(Field_i) = 60) order by sum(Field_i) desc");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 2);

    tuple = tuples.get(0);
    assert (tuple.get("Str_s").equals("c"));
    assert (tuple.getDouble("EXPR$1") == 60);

    tuple = tuples.get(1);
    assert (tuple.get("Str_s").equals("a"));
    assert (tuple.getDouble("EXPR$1") == 7);

  }

