  private void testTimeSeriesGrouping() throws Exception {
    try {
      CloudJettyRunner jetty = this.cloudJettys.get(0);

      del("*:*");

      commit();

      indexr("id", "1", "year_i", "2015", "month_i", "11", "day_i", "7", "item_i", "5");
      indexr("id", "2", "year_i", "2015", "month_i", "11", "day_i", "7", "item_i", "10");
      indexr("id", "3", "year_i", "2015", "month_i", "11", "day_i", "8", "item_i", "30");
      indexr("id", "4", "year_i", "2015", "month_i", "11", "day_i", "8", "item_i", "12");
      indexr("id", "5", "year_i", "2015", "month_i", "10", "day_i", "1", "item_i", "4");
      indexr("id", "6", "year_i", "2015", "month_i", "10", "day_i", "3", "item_i", "5");
      indexr("id", "7", "year_i", "2014", "month_i", "4",  "day_i", "4", "item_i", "6");
      indexr("id", "8", "year_i", "2014", "month_i", "4",  "day_i", "2", "item_i", "1");

      commit();

      SolrParams sParams = mapParams(CommonParams.QT, "/sql",
          "stmt",  "select year_i, sum(item_i) from collection1 group by year_i order by year_i desc");

      SolrStream solrStream = new SolrStream(jetty.url, sParams);
      List<Tuple> tuples = getTuples(solrStream);

      assert(tuples.size() == 2);

      Tuple tuple;

      tuple = tuples.get(0);
      assert(tuple.getLong("year_i") == 2015);
      assert(tuple.getDouble("EXPR$1") == 66); //sum(item_i)

      tuple = tuples.get(1);
      assert(tuple.getLong("year_i") == 2014);
      assert(tuple.getDouble("EXPR$1") == 7); //sum(item_i)

      sParams = mapParams(CommonParams.QT, "/sql",
          "stmt", "select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i " +
          "order by year_i desc, month_i desc");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 3);

      tuple = tuples.get(0);
      assert(tuple.getLong("year_i") == 2015);
      assert(tuple.getLong("month_i") == 11);
      assert(tuple.getDouble("EXPR$2") == 57); //sum(item_i)

      tuple = tuples.get(1);
      assert(tuple.getLong("year_i") == 2015);
      assert(tuple.getLong("month_i") == 10);
      assert(tuple.getDouble("EXPR$2") == 9); //sum(item_i)

      tuple = tuples.get(2);
      assert(tuple.getLong("year_i") == 2014);
      assert(tuple.getLong("month_i") == 4);
      assert(tuple.getDouble("EXPR$2") == 7); //sum(item_i)

      sParams = mapParams(CommonParams.QT, "/sql",
          "stmt", "select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i " +
          "order by year_i desc, month_i desc, day_i desc");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 6);

      tuple = tuples.get(0);
      assert(tuple.getLong("year_i") == 2015);
      assert(tuple.getLong("month_i") == 11);
      assert(tuple.getLong("day_i") == 8);
      assert(tuple.getDouble("EXPR$3") == 42); //sum(item_i)

      tuple = tuples.get(1);
      assert(tuple.getLong("year_i") == 2015);
      assert(tuple.getLong("month_i") == 11);
      assert(tuple.getLong("day_i") == 7);
      assert(tuple.getDouble("EXPR$3") == 15); //sum(item_i)

      tuple = tuples.get(2);
      assert(tuple.getLong("year_i") == 2015);
      assert(tuple.getLong("month_i") == 10);
      assert(tuple.getLong("day_i") == 3);
      assert(tuple.getDouble("EXPR$3") == 5); //sum(item_i)

      tuple = tuples.get(3);
      assert(tuple.getLong("year_i") == 2015);
      assert(tuple.getLong("month_i") == 10);
      assert(tuple.getLong("day_i") == 1);
      assert(tuple.getDouble("EXPR$3") == 4); //sum(item_i)

      tuple = tuples.get(4);
      assert(tuple.getLong("year_i") == 2014);
      assert(tuple.getLong("month_i") == 4);
      assert(tuple.getLong("day_i") == 4);
      assert(tuple.getDouble("EXPR$3") == 6); //sum(item_i)

      tuple = tuples.get(5);
      assert(tuple.getLong("year_i") == 2014);
      assert(tuple.getLong("month_i") == 4);
      assert(tuple.getLong("day_i") == 2);
      assert(tuple.getDouble("EXPR$3") == 1); //sum(item_i)

    } finally {
      delete();
    }
  }

