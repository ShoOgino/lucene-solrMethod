  public void testWhiteboxScores() throws Exception {
    final SchemaField analysisField = h.getCore().getLatestSchema().getField("multigrams_body");
    assertNotNull(analysisField);
    final Map<String,Double> fieldWeights = new TreeMap<>();
    fieldWeights.put("multigrams_title", 1.0D);
    fieldWeights.put("multigrams_body", 0.0D); // NOTE: 0 weighting should only affect total score
    
    final String input = "xxxyyyzzz BROWN fox why are we lAzY";
    final List<Phrase> phrases = Phrase.extractPhrases(input, analysisField, 3, 7);
    try (SolrQueryRequest req = req()) {
      Phrase.populateStats(phrases, fieldWeights.keySet(), req.getSearcher());
    }
    Phrase.populateScores(phrases, fieldWeights, 3, 7);

    // do some basic sanity checks of the field & total scores...

    for (Phrase xyz : phrases.subList(0, 7)) {
      // first 7 all start with xyz which isn't in index (in either field) so all scores should be -1
      assertEquals(xyz.toString(), -1.0D, xyz.getTotalScore(), 0.0D);
      assertEquals(xyz.toString(), -1.0D, xyz.getFieldScore("multigrams_title"), 0.0D);
      assertEquals(xyz.toString(), -1.0D, xyz.getFieldScore("multigrams_body"), 0.0D);
    }
    
    // any individual terms (past xyz) should score 0.0 because they are all actually in the index
    // (in both fields)
    for (Phrase term : phrases.subList(7, phrases.size()).stream().filter
           ((p -> 1 == p.getPositionLength())).collect(Collectors.toList())) {
      
      assertEquals(term.toString(), 0.0D, term.getFieldScore("multigrams_title"), 0.0D);
      assertEquals(term.toString(), 0.0D, term.getFieldScore("multigrams_body"), 0.0D);
      assertEquals(term.toString(), 0.0D, term.getTotalScore(), 0.0D);
    }

    // "brown fox" should score positively in both fields, and overall...
    final Phrase brown_fox = phrases.get(8);
    assertEquals("BROWN fox", brown_fox.getSubSequence());
    assertThat(brown_fox.toString(), brown_fox.getFieldScore("multigrams_title"), greaterThan(0.0D));
    assertThat(brown_fox.toString(), brown_fox.getFieldScore("multigrams_body"), greaterThan(0.0D) );
    assertThat(brown_fox.toString(), brown_fox.getTotalScore(), greaterThan(0.0D));
    
    // "we lazy" does appear in a title value, but should score poorly given how often the terms
    // are used in other contexts, and should score -1 against body -- but because of our weights,
    // that shouldn't bring down the total
    final Phrase we_lazy = phrases.get(phrases.size()-2);
    assertEquals("we lAzY", we_lazy.getSubSequence());
    assertEquals(we_lazy.toString(), -1.0D, we_lazy.getFieldScore("multigrams_body"), 0.0D);
    assertThat(we_lazy.toString(), we_lazy.getFieldScore("multigrams_title"), lessThan(0.0D));
    assertThat(we_lazy.toString(), we_lazy.getTotalScore(), lessThan(0.0D));
    assertEquals(we_lazy.toString(), we_lazy.getFieldScore("multigrams_title"), we_lazy.getTotalScore(),
                 0.0D);

    // "why are we lazy" is longer then the max indexed phrase size & appears verbatim in a title value
    // it should score -1 against body -- but because of our weights, that shouldn't bring down the total
    final Phrase wawl = phrases.get(phrases.size()-7);
    assertEquals("why are we lAzY", wawl.getSubSequence());
    assertEquals(wawl.toString(), -1.0D, wawl.getFieldScore("multigrams_body"), 0.0D);
    assertThat(wawl.toString(), wawl.getFieldScore("multigrams_title"), greaterThan(0.0D));
    assertThat(wawl.toString(), wawl.getTotalScore(), greaterThan(0.0D));
    assertEquals(wawl.toString(), wawl.getFieldScore("multigrams_title"), wawl.getTotalScore(),
                 0.0D);

    // "brown fox why are we" is longer then the max indexed phrase, and none of it's
    // (longest) sub phrases exists in either field -- so all of it's scores should be -1
    final Phrase bfwaw = phrases.get(11);
    assertEquals("BROWN fox why are we", bfwaw.getSubSequence());
    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getFieldScore("multigrams_title"), 0.0D);
    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getFieldScore("multigrams_body"), 0.0D);
    assertEquals(bfwaw.toString(), -1.0D, bfwaw.getTotalScore(), 0.0D);
    
  }

