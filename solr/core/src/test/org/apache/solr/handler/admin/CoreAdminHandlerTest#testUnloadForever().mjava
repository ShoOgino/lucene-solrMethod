  @Test
  public void testUnloadForever() throws Exception  {
    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + "-corex-"
        + System.nanoTime());
    solrHomeDirectory.mkdirs();
    copySolrHomeToTemp(solrHomeDirectory, "corex");
    File corex = new File(solrHomeDirectory, "corex");
    FileUtils.write(new File(corex, "core.properties"), "", StandardCharsets.UTF_8);
    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig("/solr"));
    runner.start();

    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + "/corex", DEFAULT_CONNECTION_TIMEOUT,
        DEFAULT_CONNECTION_TIMEOUT)) {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("id", "123");
      client.add(doc);
      client.commit();
    }

    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + "/corex", DEFAULT_CONNECTION_TIMEOUT,
        DEFAULT_CONNECTION_TIMEOUT)) {
      QueryResponse result = client.query(new SolrQuery("id:*"));
      assertEquals(1,result.getResults().getNumFound());
    }
    
    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,
        DEFAULT_CONNECTION_TIMEOUT)) {
      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);
      req.setDeleteInstanceDir(false);//random().nextBoolean());
      req.setCoreName("corex");
      req.process(client);
    }

    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {
      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + "/corex", DEFAULT_CONNECTION_TIMEOUT,
          DEFAULT_CONNECTION_TIMEOUT * 1000)) {
        client.query(new SolrQuery("id:*"));
      } finally {
        runner.stop();
      }
    });
    assertTrue(rse.getMessage().contains("Can not find: /solr/corex/select"));
  }

