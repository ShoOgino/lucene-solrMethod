  @Test
  public void testMultipleSorts() throws Exception {
    assertU(delQ("*:*"));
    assertU(commit());

    int numDocs = 1000*40;

    //10 unique values
    String[] str_vals = new String[10];
    for (int i=0; i<str_vals.length; i++) {
      str_vals[i] = TestUtil.randomSimpleString(random(), 10);
    }

    float[] float_vals = new float[10];
    float_vals[0] = 0.0f;
    float_vals[1] = +0.0f;
    float_vals[2] = -0.0f;
    float_vals[3] = +0.00001f;
    float_vals[4] = +0.000011f;
    float_vals[5] = Float.MAX_VALUE;
    float_vals[6] = Float.MIN_VALUE;
    float_vals[7] = 1/3f; //0.33333334
    float_vals[8] = 0.33333333f;
    float_vals[9] = random().nextFloat();

    for (int i = 0; i < numDocs; i++) {
      int number = TestUtil.nextInt(random(), 0, 9);
      assertU(adoc("id", String.valueOf(i),
          "floatdv", String.valueOf(number),
          "intdv", String.valueOf(number),
          "stringdv", String.valueOf(str_vals[number]),
          "longdv", String.valueOf(number),
          "doubledv", String.valueOf(number),
          "datedv", randomSkewedDate(),
          "booleandv", String.valueOf(random().nextBoolean()),
          "field1_s_dv", String.valueOf(str_vals[number]),
          "field2_i_p", String.valueOf(number),
          "field3_l_p", String.valueOf(number)));
      if (numDocs % 300 ==0) {
        assertU(commit());
      }
    }
    assertU(commit());

    validateSort(numDocs);
  }

