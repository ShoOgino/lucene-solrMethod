  protected void checkHighlightingResponseList(ArrayList<SimpleOrderedMap<Object>> highlightingList,
      String highlightedField) throws Exception {
    assertEquals("too few or too many elements: "+highlightingList.size(),
        3, highlightingList.size());
    final Set<String> seenDocIds = new HashSet<>();
    for (SimpleOrderedMap<Object> highlightingListElementMap : highlightingList) {
      final String expectedHighlightText;
      final String actualHighlightText;
      // two elements in total: id and snippets
      assertEquals(highlightingList.toString(), 2, highlightingListElementMap.size());
      // id element
      {
        final String docId = (String)highlightingListElementMap.get(id_key);
        seenDocIds.add(docId);
        final String preHighlightText;
        final String highlightedText = "bee";
        if ("1".equals(docId)) {
          preHighlightText = "bumble ";
        } else if ("2".equals(docId)) {
          preHighlightText = "honey ";
        } else if ("3".equals(docId)) {
          preHighlightText = "solitary ";
        } else  {
          preHighlightText = null;
          fail("unknown docId "+docId);
        }
        expectedHighlightText = preHighlightText
            + SolrFragmentsBuilder.DEFAULT_PRE_TAGS
            + highlightedText
            + SolrFragmentsBuilder.DEFAULT_POST_TAGS;
      }
      // snippets element
      {
        SimpleOrderedMap<Object> snippets = (SimpleOrderedMap<Object>)highlightingListElementMap.get(snippets_key);
        if (highlightedField == null) {
          assertEquals(0, snippets.size());
        } else {
          ArrayList<String> docHighlights = (ArrayList<String>)(snippets).get(highlightedField);
          assertEquals(1, docHighlights.size());
          actualHighlightText = (String)docHighlights.get(0);
          assertEquals(expectedHighlightText, actualHighlightText);
        }
      }
    }
    assertEquals(3, seenDocIds.size());
  }

