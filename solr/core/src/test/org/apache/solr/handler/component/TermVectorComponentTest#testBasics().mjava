  @Test
  public void testBasics() throws Exception {
    assertJQ(req("json.nl","map", "qt",tv, "q", "id:0", TermVectorComponent.COMPONENT_NAME, "true", TermVectorParams.TF, "true")
       ,"/termVectors=={'0':{'uniqueKey':'0'," +
            " 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}," +
            " 'uniqueKeyFieldName':'id'}"
    );
    // tv.fl diff from fl
    assertJQ(req("json.nl","map", 
                 "qt",tv, 
                 "q", "id:0", 
                 "fl", "*,score",
                 "tv.fl", "test_basictv,test_offtv",
                 TermVectorComponent.COMPONENT_NAME, "true", 
                 TermVectorParams.TF, "true")
       ,"/termVectors=={'0':{'uniqueKey':'0'," +
            " 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}}," +
            " 'uniqueKeyFieldName':'id'}"
    );
    // multi-valued tv.fl 
    assertJQ(req("json.nl","map", 
                 "qt",tv, 
                 "q", "id:0", 
                 "fl", "*,score",
                 "tv.fl", "test_basictv",
                 "tv.fl","test_offtv",
                 TermVectorComponent.COMPONENT_NAME, "true", 
                 TermVectorParams.TF, "true")
       ,"/termVectors=={'0':{'uniqueKey':'0'," +
            " 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}}," +
            " 'uniqueKeyFieldName':'id'}"
    );
    // re-use fl glob
    assertJQ(req("json.nl","map", 
                 "qt",tv, 
                 "q", "id:0", 
                 "fl", "*,score",
                 TermVectorComponent.COMPONENT_NAME, "true", 
                 TermVectorParams.TF, "true")
       ,"/termVectors=={'0':{'uniqueKey':'0'," +
            " 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}," +
            " 'uniqueKeyFieldName':'id'}"
    );
    // re-use fl, ignore things we can't handle
    assertJQ(req("json.nl","map", 
                 "qt",tv, 
                 "q", "id:0", 
                 "fl", "score,test_basictv,[docid],test_postv,val:sum(3,4)",
                 TermVectorComponent.COMPONENT_NAME, "true", 
                 TermVectorParams.TF, "true")
       ,"/termVectors=={'0':{'uniqueKey':'0'," +
            " 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}," +
            " 'uniqueKeyFieldName':'id'}"
    );
    // re-use (multi-valued) fl, ignore things we can't handle
    assertJQ(req("json.nl","map", 
                 "qt",tv, 
                 "q", "id:0", 
                 "fl", "score,test_basictv",
                 "fl", "[docid],test_postv,val:sum(3,4)",
                 TermVectorComponent.COMPONENT_NAME, "true", 
                 TermVectorParams.TF, "true")
       ,"/termVectors=={'0':{'uniqueKey':'0'," +
            " 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}}," +
            " 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}," +
            " 'uniqueKeyFieldName':'id'}"
    );

  }

