  public void testWhiteBoxPhraseParsingShortInput() throws Exception {
    // for input this short, either of these fields should be (mostly) equivilent
    final Map<String,Integer> fields = new TreeMap<>();
    fields.put("multigrams_body", 7); 
    fields.put("multigrams_body_short", 3);
    for (Map.Entry<String,Integer> entry : fields.entrySet()) {
      try {
        final int maxQ = entry.getValue();
        final SchemaField field = h.getCore().getLatestSchema().getField(entry.getKey());
        assertNotNull(field);
        
        // empty input shouldn't break anything
        assertEquals(0, Phrase.extractPhrases(random().nextBoolean() ? "" : "  ", field, 3, maxQ).size());
        
        // input shorter them our index/query phrase sizes shouldn't break anything either....
        final List<Phrase> phrases = Phrase.extractPhrases("brown FOX", field, 3, maxQ);
        
        assertEquals(3, phrases.size());
        
        { // length 2
          final Phrase brown_fox = phrases.get(1);
          final String debug = brown_fox.toString();
          
          assertEquals(debug, "brown FOX", brown_fox.getSubSequence());
          assertEquals(debug, 1, brown_fox.getPositionStart());
          assertEquals(debug, 3, brown_fox.getPositionEnd());
          assertEquals(debug, 2, brown_fox.getPositionLength());
          
          assertEquals(debug, 0, brown_fox.getOffsetStart());
          assertEquals(debug, 9, brown_fox.getOffsetEnd());
          
          assertEquals(debug, 2, brown_fox.getIndividualIndexedTerms().size());
          assertEquals(debug, 1, brown_fox.getLargestIndexedSubPhrases().size());
          assertEquals(debug, brown_fox, brown_fox.getLargestIndexedSubPhrases().get(0));
          assertEquals(debug, 0, brown_fox.getIndexedSuperPhrases().size());
        }
        { // length 1
          final Phrase fox = phrases.get(2);
          final String debug = fox.toString();
          
          assertEquals(debug, "FOX", fox.getSubSequence());
          assertEquals(debug, 2, fox.getPositionStart());
          assertEquals(debug, 3, fox.getPositionEnd());
          assertEquals(debug, 1, fox.getPositionLength());
          
          assertEquals(debug, 6, fox.getOffsetStart());
          assertEquals(debug, 9, fox.getOffsetEnd());
          
          assertEquals(debug, 1, fox.getIndividualIndexedTerms().size());
          assertEquals(debug, 1, fox.getLargestIndexedSubPhrases().size());
          assertEquals(debug, fox, fox.getLargestIndexedSubPhrases().get(0));
          assertEquals(debug, 1, fox.getIndexedSuperPhrases().size());
        }
        
        assertBasicSanityChecks(phrases, 2, 3, maxQ);
      } catch (AssertionError e) {
        throw new AssertionError(entry.getKey() + " => " + e.getMessage(), e);
      }
    }
  }

