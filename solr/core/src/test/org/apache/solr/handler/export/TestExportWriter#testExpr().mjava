  @SuppressWarnings("unchecked")
  @Test
  public void testExpr() throws Exception {
    assertU(delQ("*:*"));
    assertU(commit());
    createLargeIndex();
    SolrQueryRequest req = req("q", "*:*", "qt", "/export", "fl", "id", "sort", "id asc", "expr", "top(n=2,input(),sort=\"id desc\")");
    assertJQ(req,
        "response/numFound==100000",
        "response/docs/[0]/id=='99999'",
        "response/docs/[1]/id=='99998'"
        );
    req = req("q", "*:*", "qt", "/export", "fl", "id,sortabledv_udvas", "sort", "sortabledv_udvas asc", "expr", "unique(input(),over=\"sortabledv_udvas\")");
    String rsp = h.query(req);
    Map<String, Object> rspMap = mapper.readValue(rsp, HashMap.class);
    List<Map<String, Object>> docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, "/response/docs");
    assertNotNull("missing document results: " + rspMap, docs);
    assertEquals("wrong number of unique docs", 100, docs.size());
    for (int i = 0; i < 99; i++) {
      boolean found = false;
      String si = String.valueOf(i);
      for (int j = 0; j < docs.size(); j++) {
        if (docs.get(j).get("sortabledv_udvas").equals(si)) {
          found = true;
          break;
        }
      }
      assertTrue("missing value " + i + " in results", found);
    }
    req = req("q", "*:*", "qt", "/export", "fl", "id,sortabledv_udvas,small_i_p", "sort", "sortabledv_udvas asc", "expr", "rollup(input(),over=\"sortabledv_udvas\", sum(small_i_p),avg(small_i_p),min(small_i_p),count(*))");
    rsp = h.query(req);
    rspMap = mapper.readValue(rsp, HashMap.class);
    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, "/response/docs");
    assertNotNull("missing document results: " + rspMap, docs);
    assertEquals("wrong number of unique docs", 100, docs.size());
    for (Map<String, Object> doc : docs) {
      assertNotNull("missing sum: " + doc, doc.get("sum(small_i_p)"));
      assertEquals(18000.0, ((Number)doc.get("sum(small_i_p)")).doubleValue(), 2500.0);
      assertNotNull("missing avg: " + doc, doc.get("avg(small_i_p)"));
      assertEquals(18.0, ((Number)doc.get("avg(small_i_p)")).doubleValue(), 2.5);
      assertNotNull("missing count: " + doc, doc.get("count(*)"));
      assertEquals(1000.0, ((Number)doc.get("count(*)")).doubleValue(), 200.0);
    }
    // try invalid field types
    req = req("q", "*:*", "qt", "/export", "fl", "id,sortabledv,small_i_p", "sort", "sortabledv asc", "expr", "unique(input(),over=\"sortabledv\")");
    rsp = h.query(req);
    rspMap = mapper.readValue(rsp, HashMap.class);
    assertEquals("wrong response status", 400, ((Number)Utils.getObjectByPath(rspMap, false, "/responseHeader/status")).intValue());
    docs = (List<Map<String, Object>>) Utils.getObjectByPath(rspMap, false, "/response/docs");
    assertEquals("wrong number of docs", 1, docs.size());
    Map<String, Object> doc = docs.get(0);
    assertTrue("doc doesn't have exception", doc.containsKey(StreamParams.EXCEPTION));
    assertTrue("wrong exception message", doc.get(StreamParams.EXCEPTION).toString().contains("Must have useDocValuesAsStored='true'"));
  }

