  /** 
   * Asserts some basic rules that should be enforced about all Phrases 
   * &amp; their linkages to oher phrases 
   */
  private void assertBasicSanityChecks(final List<Phrase> phrases,
                                       final int inputPositionLength,
                                       final int maxIndexedPositionLength,
                                       final int maxQueryPositionLength) throws Exception {
    assert 0 < phrases.size() : "Don't use this method if phrases might be empty";
    
    assertEmptyStream("no phrase should be longer then "+maxQueryPositionLength+" positions",
                      phrases.stream().filter(p -> p.getPositionLength() > maxQueryPositionLength));

    assertEmptyStream("no phrase should have a start offset < 0",
                      phrases.stream().filter(p -> p.getOffsetStart() < 0));
    assertEmptyStream("no phrase should have a start position < 1",
                      phrases.stream().filter(p -> p.getPositionStart() < 1));

    assertEmptyStream("If a phrase has a start offset of 0, then it must have position 1",
                      phrases.stream().filter(p -> (p.getOffsetStart() == 0)
                                              && (p.getPositionStart() != 1)));
    
    final Phrase first = phrases.get(0);
    final Phrase last = phrases.get(phrases.size()-1);
    
    assertEmptyStream("no phrase should have a start offset < first phrase",
                      phrases.stream().filter(p -> p.getOffsetStart() < first.getOffsetStart()));
    assertEmptyStream("no phrase should have an end offset > last phrase",
                      phrases.stream().filter(p -> last.getOffsetEnd() < p.getOffsetEnd()));
    
    assertEmptyStream("no phrase should have a start position < first phrase",
                      phrases.stream().filter(p -> p.getPositionStart() < first.getPositionStart()));
    assertEmptyStream("no phrase should have an end position > last phrase",
                      phrases.stream().filter(p -> last.getPositionEnd() < p.getPositionEnd()));
                 

    // NOTE: stuff below this point may not be true for all analyzers (ie: stopwords)
    // but should be valid for the analyzers used in this test...
    // (if we expand test to cover analyzers w/stopwords, refactor this into a new method)
        
    for (int n = 1; n <= maxQueryPositionLength; n++) {
      final int len = n;
      final int expected = Math.max(0, 1 + inputPositionLength - n);
      final List<Phrase> sizeN = phrases.stream().filter(p -> p.getPositionLength() == len
                                                         ).collect(Collectors.toList());
      assertEquals("Expected # phrases of size " + n + ": " + sizeN, expected, sizeN.size());
    }

    // check the quantities of sub-terms/phrases...
    assertEmptyStream("no phrase should have num indexed terms != pos_len",
                      phrases.stream().filter
                      (p -> last.getPositionLength() != last.getIndividualIndexedTerms().size()));
    assertEmptyStream("no phrase should have num sub-phrases != max(1, 1 + pos_len - "+maxIndexedPositionLength+")",
                      phrases.stream().filter
                      (p -> (Math.max(1, 1 + last.getPositionLength() - maxIndexedPositionLength)
                             != last.getLargestIndexedSubPhrases().size())));
    // NOTE: indexed super phrases can be of various lengths, and differing quantities near
    // begining/end of input so don't worry about an exact count, just check their properties (below)

    // check the properties of our sub/super phrases
    for (Phrase phrase : phrases) {
      final String debug = phrase.toString();
      
      assertEmptyStream(debug + " should not have any indexed terms where pos_len != 1",
                        phrase.getIndividualIndexedTerms().stream().filter
                        (term -> 1 != term.getPositionLength()));
      
      assertEmptyStream(debug + " should not have any sub-phrases where pos_len > min(pos_len, "
                        + maxIndexedPositionLength+")",
                        phrase.getLargestIndexedSubPhrases().stream().filter
                        (inner -> (Math.min(phrase.getPositionLength(), maxIndexedPositionLength)
                                   < inner.getPositionLength())));
      
      assertEmptyStream(debug + " should not have any super-phrases where super.len <= phrase.len or " 
                        + maxIndexedPositionLength + " < super.len",
                        phrase.getIndexedSuperPhrases().stream().filter
                        (outer -> (outer.getPositionLength() <= phrase.getPositionLength() ||
                                   maxIndexedPositionLength < outer.getPositionLength())));
    }
  }

