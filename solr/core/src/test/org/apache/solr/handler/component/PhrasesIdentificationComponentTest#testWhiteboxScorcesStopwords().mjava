  public void testWhiteboxScorcesStopwords() throws Exception {
    final String input = "why the lazy dog brown fox";
    final Map<String,Double> fieldWeights = new TreeMap<>();
    fieldWeights.put("multigrams_title", 1.0D); 
    fieldWeights.put("multigrams_title_stop", 1.0D);
    
    { // If our analysisField uses all terms,
      // be we also generate scores from a field that filters stopwords...
      final SchemaField analysisField = h.getCore().getLatestSchema().getField("multigrams_title");
      assertNotNull(analysisField);
      
      final List<Phrase> phrases = Phrase.extractPhrases(input, analysisField, 3, 7);
      try (SolrQueryRequest req = req()) {
        Phrase.populateStats(phrases, fieldWeights.keySet(), req.getSearcher());
      }
      Phrase.populateScores(phrases, fieldWeights, 3, 7);

      // phrases that span the stop word should have valid scores from the field that doesn't care
      // about stop words, but the stopword field should reject them
      final Phrase why_the_lazy = phrases.get(2);
      assertEquals("why the lazy", why_the_lazy.getSubSequence());
      assertThat(why_the_lazy.toString(), why_the_lazy.getFieldScore("multigrams_title"), greaterThan(0.0D) );
      assertEquals(why_the_lazy.toString(), -1.0D, why_the_lazy.getFieldScore("multigrams_title_stop"), 0.0D);
      
      final Phrase the_lazy_dog = phrases.get(8);
      assertEquals("the lazy dog", the_lazy_dog.getSubSequence());
      assertThat(the_lazy_dog.toString(), the_lazy_dog.getFieldScore("multigrams_title"), greaterThan(0.0D) );
      assertEquals(the_lazy_dog.toString(), -1.0D, the_lazy_dog.getFieldScore("multigrams_title_stop"), 0.0D);
      
      // sanity check that good scores are still possible with stopwords
      // "brown fox" should score positively in both fields, and overall...
      final Phrase brown_fox = phrases.get(phrases.size()-2);
      assertEquals("brown fox", brown_fox.getSubSequence());
      assertThat(brown_fox.toString(), brown_fox.getFieldScore("multigrams_title"), greaterThan(0.0D));
      assertThat(brown_fox.toString(), brown_fox.getFieldScore("multigrams_title_stop"), greaterThan(0.0D) );
      assertThat(brown_fox.toString(), brown_fox.getTotalScore(), greaterThan(0.0D));
    }
    
    { // now flip things: our analysisField filters stopwords, 
      // but we also generates scores from a field that doesn't know about them...
      //
      // (NOTE: the parser will still generate _some_ candidate phrases spaning the stop word position,
      // but not ones that start with the stopword)
      final SchemaField analysisField = h.getCore().getLatestSchema().getField("multigrams_title_stop");
      assertNotNull(analysisField);
      
      final List<Phrase> phrases = Phrase.extractPhrases(input, analysisField, 3, 7);
      try (SolrQueryRequest req = req()) {
        Phrase.populateStats(phrases, fieldWeights.keySet(), req.getSearcher());
      }
      Phrase.populateScores(phrases, fieldWeights, 3, 7);
      assertTrue(phrases.toString(), 0 < phrases.size());

      for (Phrase p : phrases) {
        if (p.getPositionStart() <= 2 && 2 < p.getPositionEnd()) {
          // phrases that span the stop word should have valid scores from the field that doesn't care
          // about stop words, but the stopword field should reject them
          assertEquals(p.toString(), -1.0D, p.getFieldScore("multigrams_title"), 0.0D);
          assertEquals(p.toString(), -1.0D, p.getFieldScore("multigrams_title_stop"), 0.0D);
        }
      }
      
      // sanity check that good scores are still possible with stopwords
      // "brown fox" should score positively in both fields, and overall...
      final Phrase brown_fox = phrases.get(phrases.size()-2);
      assertEquals("brown fox", brown_fox.getSubSequence());
      assertThat(brown_fox.toString(), brown_fox.getFieldScore("multigrams_title"), greaterThan(0.0D));
      assertThat(brown_fox.toString(), brown_fox.getFieldScore("multigrams_title_stop"), greaterThan(0.0D) );
      assertThat(brown_fox.toString(), brown_fox.getTotalScore(), greaterThan(0.0D));
    }
    
  }

