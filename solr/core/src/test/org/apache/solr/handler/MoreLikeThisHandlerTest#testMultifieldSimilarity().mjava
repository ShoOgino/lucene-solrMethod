  @Test
  public void testMultifieldSimilarity() throws Exception
  {
    SolrCore core = h.getCore();
    MoreLikeThisHandler mlt = new MoreLikeThisHandler();

    ModifiableSolrParams params = new ModifiableSolrParams();

    assertU(adoc("id", "1", "name", "aaa bbb ccc", "subword", "        zzz"));
    assertU(adoc("id", "2", "name", "    bbb ccc", "subword", "    bbb zzz"));
    assertU(adoc("id", "3", "name", "        ccc", "subword", "aaa bbb zzz"));
    assertU(adoc("id", "4", "name", "        ccc", "subword", "    bbb    "));
    assertU(commit());

    params.set(CommonParams.QT, "/mlt");
    params.set(MoreLikeThisParams.MLT, "true");
    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, "name,subword");
    params.set(MoreLikeThisParams.INTERESTING_TERMS, "details");
    params.set(MoreLikeThisParams.MIN_TERM_FREQ, "1");
    params.set(MoreLikeThisParams.MIN_DOC_FREQ, "2");
    params.set(MoreLikeThisParams.BOOST, true);
    params.set("indent", "true");

    try (SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {}) {
      ArrayList<ContentStream> streams = new ArrayList<>(2);
      streams.add(new ContentStreamBase.StringStream("bbb", "zzz"));
      req.setContentStreams(streams);

      // Make sure we have terms from both fields in the interestingTerms array and all documents have been
      // retrieved as matching.
      assertQ(req,
          "//lst[@name = 'interestingTerms']/float[@name = 'subword:bbb']",
          "//lst[@name = 'interestingTerms']/float[@name = 'name:bbb']",
          "//result[@name = 'response' and @numFound = '4']");
    }
  }

