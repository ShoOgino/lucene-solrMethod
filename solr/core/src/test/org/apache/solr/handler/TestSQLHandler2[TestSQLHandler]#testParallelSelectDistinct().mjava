  @Test
  public void testParallelSelectDistinct() throws Exception {

    new UpdateRequest()
        .add("id", "1", "text_t", "XXXX XXXX", "str_s", "a", "field_i", "1")
        .add("id", "2", "text_t", "XXXX XXXX", "str_s", "b", "field_i", "2")
        .add("id", "3", "text_t", "XXXX XXXX", "str_s", "a", "field_i", "20")
        .add("id", "4", "text_t", "XXXX XXXX", "str_s", "b", "field_i", "2")
        .add("id", "5", "text_t", "XXXX XXXX", "str_s", "c", "field_i", "30")
        .add("id", "6", "text_t", "XXXX XXXX", "str_s", "c", "field_i", "30")
        .add("id", "7", "text_t", "XXXX XXXX", "str_s", "c", "field_i", "50")
        .add("id", "8", "text_t", "XXXX XXXX", "str_s", "c", "field_i", "60")
        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);

    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+"/"+COLLECTIONORALIAS;
    SolrParams sParams = mapParams(CommonParams.QT, "/sql", "numWorkers", "2", "aggregationMode", "map_reduce",
        "stmt", "select distinct str_s, field_i from collection1 order by str_s asc, field_i asc");

    List<Tuple> tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 6);

    Tuple tuple;

    tuple = tuples.get(0);
    assert (tuple.get("str_s").equals("a"));
    assert (tuple.getLong("field_i") == 1);

    tuple = tuples.get(1);
    assert (tuple.get("str_s").equals("a"));
    assert (tuple.getLong("field_i") == 20);

    tuple = tuples.get(2);
    assert (tuple.get("str_s").equals("b"));
    assert (tuple.getLong("field_i") == 2);

    tuple = tuples.get(3);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 30);

    tuple = tuples.get(4);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 50);

    tuple = tuples.get(5);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 60);

    // reverse the sort
    sParams = mapParams(CommonParams.QT, "/sql", "numWorkers", "2", "aggregationMode", "map_reduce",
        "stmt", "select distinct str_s, field_i from collection1 order by str_s desc, field_i desc");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 6);

    tuple = tuples.get(0);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 60);

    tuple = tuples.get(1);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 50);

    tuple = tuples.get(2);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 30);

    tuple = tuples.get(3);
    assert (tuple.get("str_s").equals("b"));
    assert (tuple.getLong("field_i") == 2);

    tuple = tuples.get(4);
    assert (tuple.get("str_s").equals("a"));
    assert (tuple.getLong("field_i") == 20);

    tuple = tuples.get(5);
    assert (tuple.get("str_s").equals("a"));
    assert (tuple.getLong("field_i") == 1);

    // reverse the sort
    sParams = mapParams(CommonParams.QT, "/sql", "numWorkers", "2", "aggregationMode", "map_reduce",
        "stmt", "select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 6);

    tuple = tuples.get(0);
    assert (tuple.get("myString").equals("c"));
    assert (tuple.getLong("field_i") == 60);

    tuple = tuples.get(1);
    assert (tuple.get("myString").equals("c"));
    assert (tuple.getLong("field_i") == 50);

    tuple = tuples.get(2);
    assert (tuple.get("myString").equals("c"));
    assert (tuple.getLong("field_i") == 30);

    tuple = tuples.get(3);
    assert (tuple.get("myString").equals("b"));
    assert (tuple.getLong("field_i") == 2);

    tuple = tuples.get(4);
    assert (tuple.get("myString").equals("a"));
    assert (tuple.getLong("field_i") == 20);

    tuple = tuples.get(5);
    assert (tuple.get("myString").equals("a"));
    assert (tuple.getLong("field_i") == 1);

    // test with limit
    sParams = mapParams(CommonParams.QT, "/sql", "numWorkers", "2", "aggregationMode", "map_reduce",
        "stmt", "select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 2);

    tuple = tuples.get(0);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 60);

    tuple = tuples.get(1);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 50);

    // Test without a sort. Sort should be asc by default.
    sParams = mapParams(CommonParams.QT, "/sql", "numWorkers", "2", "aggregationMode", "map_reduce",
        "stmt", "select distinct str_s, field_i from collection1");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 6);

    tuple = tuples.get(0);
    assert (tuple.get("str_s").equals("a"));
    assert (tuple.getLong("field_i") == 1);

    tuple = tuples.get(1);
    assert (tuple.get("str_s").equals("a"));
    assert (tuple.getLong("field_i") == 20);

    tuple = tuples.get(2);
    assert (tuple.get("str_s").equals("b"));
    assert (tuple.getLong("field_i") == 2);

    tuple = tuples.get(3);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 30);

    tuple = tuples.get(4);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 50);

    tuple = tuples.get(5);
    assert (tuple.get("str_s").equals("c"));
    assert (tuple.getLong("field_i") == 60);

    // Test with a predicate.
    sParams = mapParams(CommonParams.QT, "/sql", "numWorkers", "2", "aggregationMode", "map_reduce",
        "stmt", "select distinct str_s, field_i from collection1 where str_s = 'a'");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 2);

    tuple = tuples.get(0);
    assert (tuple.get("str_s").equals("a"));
    assert (tuple.getLong("field_i") == 1);

    tuple = tuples.get(1);
    assert (tuple.get("str_s").equals("a"));
    assert (tuple.getLong("field_i") == 20);

  }

