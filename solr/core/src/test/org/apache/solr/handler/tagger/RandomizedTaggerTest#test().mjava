  @Test
  public void test() throws Exception {
    final Random R = random();

    Set<String> names = new HashSet<>();
    //random list of single-word names
    final int NUM_SINGLES = 4;//RandomInts.randomIntBetween(R, 1, 5);
    for (int i = 0; i < NUM_SINGLES; i++) {
      if (i == 0)//first is a big string (perhaps triggers bugs related to growing buffers)
        names.add(randomStringOfLength(16, 32));
      else
        names.add(randomString());
    }

    //add random list of multi-word names, partially including existing names
    final int NUM_MULTI = 10;
    for (int i = 0; i < NUM_MULTI; i++) {
      final int numWords = RandomNumbers.randomIntBetween(R, 2, 4);
      StringBuilder buf = new StringBuilder();
      for (int j = 0; j < numWords; j++) {
        if (j != 0)
          buf.append(' ');
        if (R.nextBoolean()) {//new likely non-existent word
          buf.append(randomString());
        } else {//existing word (possible multi-word from prev iteration)
          buf.append(RandomPicks.randomFrom(R, names));
        }
      }
      names.add(buf.toString());
    }

    // BUILD NAMES
    buildNames(names.toArray(new String[names.size()]));

    // QUERY LOOP
    for (int tTries = 0; tTries < 10 * RANDOM_MULTIPLIER; tTries++) {
      // Build up random input, similar to multi-word random names above
      StringBuilder input = new StringBuilder();
      final int INPUT_WORD_LEN = 20;
      input.append(' ');//must start with space based on assertBruteForce logic
      for (int i = 0; i < INPUT_WORD_LEN; i++) {
        if (R.nextBoolean()) {//new likely non-existent word
          input.append(randomString());
        } else {//existing word (possible multi-word from prev iteration)
          input.append(RandomPicks.randomFrom(R, NAMES));
        }
        input.append(' ');//must end with a space
      }

      boolean madeIt = false;
      try {
        assertBruteForce(input.toString());
        madeIt = true;
      } finally {
        if (!madeIt) {
          System.out.println("Reproduce with:");
          System.out.print(" buildNames(");
          for (int i = 0; i < NAMES.size(); i++) {
            if (i != 0)
              System.out.print(',');
            System.out.print('"');
            System.out.print(NAMES.get(i));
            System.out.print('"');
          }
          System.out.println(");");
          System.out.println(" assertBruteForce(\"" + input+"\");");
        }
      }
    }

  }

