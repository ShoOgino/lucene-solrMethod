  @Test
  public void testEmptyBackups() throws Exception {
    final File backupDir = createTempDir().toFile();
    final CheckBackupStatus backupStatus = new CheckBackupStatus(masterClient, /* Silly API */ ".");
    
    { // initial request w/o any committed docs
      final GenericSolrRequest req = new GenericSolrRequest
        (SolrRequest.METHOD.GET, "/replication",
         params("command", "backup",
                "location", backupDir.getAbsolutePath(),
                "name", "empty_backup1"));
      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      final SimpleSolrResponse rsp = req.process(masterClient);
      
      while (!timeout.hasTimedOut()) {
        backupStatus.fetchStatus();
        if (backupStatus.success) {
          break;
        }
        timeout.sleep(50);
      }
      assertTrue(backupStatus.success);
    
      assertTrue("snapshot.empty_backup1 doesn't exist in expected location",
                 new File(backupDir, "snapshot.empty_backup1").exists());
    }
    
    index(masterClient, "id", "1", "name", "foo");
    
    { // second backup w/uncommited doc
      final GenericSolrRequest req = new GenericSolrRequest
        (SolrRequest.METHOD.GET, "/replication",
         params("command", "backup",
                "location", backupDir.getAbsolutePath(),
                "name", "empty_backup2"));
      final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      final SimpleSolrResponse rsp = req.process(masterClient);
      
      while (!timeout.hasTimedOut()) {
        backupStatus.fetchStatus();
        if (backupStatus.success) {
          break;
        }
        timeout.sleep(50);
      }
      assertTrue(backupStatus.success);
    
      assertTrue("snapshot.empty_backup2 doesn't exist in expected location",
                 new File(backupDir, "snapshot.empty_backup2").exists());
    }
  }

