  private void testWhere() throws Exception {

    del("*:*");

    commit();

    indexDoc(sdoc("id", "1", "text", "XXXX XXXX", "str_s", "a", "field_i", "7"));
    indexDoc(sdoc("id", "2", "text", "XXXX XXXX", "str_s", "b", "field_i", "8"));
    indexDoc(sdoc("id", "3", "text", "XXXX XXXX", "str_s", "a", "field_i", "20"));
    indexDoc(sdoc("id", "4", "text", "XXXX XXXX", "str_s", "b", "field_i", "11"));
    indexDoc(sdoc("id", "5", "text", "XXXX XXXX", "str_s", "c", "field_i", "30"));
    indexDoc(sdoc("id", "6", "text", "XXXX XXXX", "str_s", "c", "field_i", "40"));
    indexDoc(sdoc("id", "7", "text", "XXXX XXXX", "str_s", "c", "field_i", "50"));
    indexDoc(sdoc("id", "8", "text", "XXXX XXXX", "str_s", "c", "field_i", "60"));
    commit();

    // Equals
    SolrParams sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select id from collection1 where id = 1 order by id asc");

    List<Tuple> tuples = getTuples(sParams);

    assertEquals(1, tuples.size());

    Tuple tuple = tuples.get(0);
    assertEquals("1", tuple.get("id"));

    // Not Equals <>
    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select id from collection1 where id <> 1 order by id asc limit 10");

    tuples = getTuples(sParams);

    assertEquals(7, tuples.size());

    tuple = tuples.get(0);
    assertEquals("2", tuple.get("id"));
    tuple = tuples.get(1);
    assertEquals("3", tuple.get("id"));
    tuple = tuples.get(2);
    assertEquals("4", tuple.get("id"));
    tuple = tuples.get(3);
    assertEquals("5", tuple.get("id"));
    tuple = tuples.get(4);
    assertEquals("6", tuple.get("id"));
    tuple = tuples.get(5);
    assertEquals("7", tuple.get("id"));
    tuple = tuples.get(6);
    assertEquals("8", tuple.get("id"));

    // TODO requires different Calcite SQL conformance level
    // Not Equals !=
    // sParams = mapParams(CommonParams.QT, "/sql",
    // "stmt", "select id from collection1 where id != 1 order by id asc limit 10");
    //
    // tuples = getTuples(sParams);
    //
    // assertEquals(7, tuples.size());
    //
    // tuple = tuples.get(0);
    // assertEquals(2L, tuple.get("id"));
    // tuple = tuples.get(1);
    // assertEquals(3L, tuple.get("id"));
    // tuple = tuples.get(2);
    // assertEquals(4L, tuple.get("id"));
    // tuple = tuples.get(3);
    // assertEquals(5L, tuple.get("id"));
    // tuple = tuples.get(4);
    // assertEquals(6L, tuple.get("id"));
    // tuple = tuples.get(5);
    // assertEquals(7L, tuple.get("id"));
    // tuple = tuples.get(6);
    // assertEquals(8L, tuple.get("id"));

    // Less than
    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select id from collection1 where id < 2 order by id asc");

    tuples = getTuples(sParams);

    assertEquals(1, tuples.size());

    tuple = tuples.get(0);
    assertEquals("1", tuple.get("id"));

    // Less than equal
    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select id from collection1 where id <= 2 order by id asc");

    tuples = getTuples(sParams);

    assertEquals(2, tuples.size());

    tuple = tuples.get(0);
    assertEquals("1", tuple.get("id"));
    tuple = tuples.get(1);
    assertEquals("2", tuple.get("id"));

    // Greater than
    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select id from collection1 where id > 7 order by id asc");

    tuples = getTuples(sParams);

    assertEquals(1, tuples.size());

    tuple = tuples.get(0);
    assertEquals("8", tuple.get("id"));

    // Greater than equal
    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select id from collection1 where id >= 7 order by id asc");

    tuples = getTuples(sParams);

    assertEquals(2, tuples.size());

    tuple = tuples.get(0);
    assertEquals("7", tuple.get("id"));
    tuple = tuples.get(1);
    assertEquals("8", tuple.get("id"));

  }

