  private void testBasicSelect() throws Exception {
    try {
      CloudJettyRunner jetty = this.cloudJettys.get(0);

      del("*:*");

      commit();

      indexDoc(sdoc("id", "1", "text", "XXXX XXXX", "str_s", "a", "field_i", "7", "field_i_p", "7",
          "field_f_p", "7.5", "field_d_p", "7.5", "field_l_p", "7"));
      indexDoc(sdoc("id", "2", "text", "XXXX XXXX", "str_s", "b", "field_i", "8", "field_i_p", "8",
          "field_f_p", "8.5", "field_d_p", "8.5","field_l_p", "8" ));
      indexDoc(sdoc("id", "3", "text", "XXXX XXXX", "str_s", "a", "field_i", "20", "field_i_p", "20",
          "field_f_p", "20.5", "field_d_p", "20.5", "field_l_p", "20"));
      indexDoc(sdoc("id", "4", "text", "XXXX XXXX", "str_s", "b", "field_i", "11", "field_i_p", "11",
          "field_f_p", "11.5", "field_d_p", "11.5", "field_l_p", "11"));
      indexDoc(sdoc("id", "5", "text", "XXXX XXXX", "str_s", "c", "field_i", "30","field_i_p", "30", "" +
          "field_f_p", "30.5", "field_d_p", "30.5", "field_l_p", "30"));
      indexDoc(sdoc("id", "6", "text", "XXXX XXXX", "str_s", "c", "field_i", "40", "field_i_p", "40",
          "field_f_p", "40.5", "field_d_p", "40.5", "field_l_p", "40"));
      indexDoc(sdoc("id", "7", "text", "XXXX XXXX", "str_s", "c", "field_i", "50", "field_i_p", "50",
          "field_f_p", "50.5", "field_d_p", "50.5", "field_l_p", "50"));
      indexDoc(sdoc("id", "8", "text", "XXXX XXXX", "str_s", "c", "field_i", "60", "field_i_p", "60",
          "field_f_p", "60.5", "field_d_p", "60.5", "field_l_p", "60"));
      commit();


      System.out.println("############# testBasicSelect() ############");

      SolrParams sParams = mapParams(CommonParams.QT, "/sql", 
          "stmt", "select id, field_i, str_s, field_i_p, field_f_p, field_d_p, field_l_p from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc");

      SolrStream solrStream = new SolrStream(jetty.url, sParams);
      List<Tuple> tuples = getTuples(solrStream);

      assert(tuples.size() == 8);
      Tuple tuple;

      tuple = tuples.get(0);
      assertEquals(tuple.getLong("id").longValue(),8);
      assertEquals(tuple.getLong("field_i").longValue(), 60);
      assert(tuple.get("str_s").equals("c"));
      assertEquals(tuple.getLong("field_i_p").longValue(), 60L);
      assertEquals(tuple.getDouble("field_f_p"), 60.5, 0.0);
      assertEquals(tuple.getDouble("field_d_p"), 60.5, 0.0);
      assertEquals(tuple.getLong("field_l_p").longValue(), 60);




      tuple = tuples.get(1);
      assertEquals(tuple.getLong("id").longValue(), 7);
      assertEquals(tuple.getLong("field_i").longValue(), 50);
      assert(tuple.get("str_s").equals("c"));
      assertEquals(tuple.getLong("field_i_p").longValue(), 50);
      assertEquals(tuple.getDouble("field_f_p"), 50.5, 0.0);
      assertEquals(tuple.getDouble("field_d_p"), 50.5, 0.0);
      assertEquals(tuple.getLong("field_l_p").longValue(), 50);




      tuple = tuples.get(2);
      assertEquals(tuple.getLong("id").longValue(),6);
      assertEquals(tuple.getLong("field_i").longValue(), 40);
      assert(tuple.get("str_s").equals("c"));
      assertEquals(tuple.getLong("field_i_p").longValue(), 40);
      assertEquals(tuple.getDouble("field_f_p"), 40.5, 0.0);
      assertEquals(tuple.getDouble("field_d_p"), 40.5, 0.0);
      assertEquals(tuple.getLong("field_l_p").longValue(), 40);





      tuple = tuples.get(3);
      assertEquals(tuple.getLong("id").longValue(), 5);
      assertEquals(tuple.getLong("field_i").longValue(), 30);
      assert(tuple.get("str_s").equals("c"));
      assertEquals(tuple.getLong("field_i_p").longValue(), 30);
      assertEquals(tuple.getDouble("field_f_p"), 30.5, 0.0);
      assertEquals(tuple.getDouble("field_d_p"), 30.5, 0.0);
      assertEquals(tuple.getLong("field_l_p").longValue(), 30);




      tuple = tuples.get(4);
      assertEquals(tuple.getLong("id").longValue(),3);
      assertEquals(tuple.getLong("field_i").longValue(), 20);
      assert(tuple.get("str_s").equals("a"));
      assertEquals(tuple.getLong("field_i_p").longValue(), 20);
      assertEquals(tuple.getDouble("field_f_p"), 20.5, 0.0);
      assertEquals(tuple.getDouble("field_d_p"), 20.5, 0.0);
      assertEquals(tuple.getLong("field_l_p").longValue(), 20);




      tuple = tuples.get(5);
      assertEquals(tuple.getLong("id").longValue(), 4);
      assertEquals(tuple.getLong("field_i").longValue(), 11);
      assert(tuple.get("str_s").equals("b"));
      assertEquals(tuple.getLong("field_i_p").longValue(), 11);
      assertEquals(tuple.getDouble("field_f_p"), 11.5, 0.0);
      assertEquals(tuple.getDouble("field_d_p"), 11.5, 0.0);
      assertEquals(tuple.getLong("field_l_p").longValue(), 11);




      tuple = tuples.get(6);
      assertEquals(tuple.getLong("id").longValue(), 2);
      assertEquals(tuple.getLong("field_i").longValue(), 8);
      assert(tuple.get("str_s").equals("b"));
      assertEquals(tuple.getLong("field_i_p").longValue(), 8);
      assertEquals(tuple.getDouble("field_f_p"), 8.5, 0.0);
      assertEquals(tuple.getDouble("field_d_p"), 8.5, 0.0);
      assertEquals(tuple.getLong("field_l_p").longValue(), 8);




      tuple = tuples.get(7);
      assertEquals(tuple.getLong("id").longValue(), 1);
      assertEquals(tuple.getLong("field_i").longValue(), 7);
      assert(tuple.get("str_s").equals("a"));
      assertEquals(tuple.getLong("field_i_p").longValue(), 7);
      assertEquals(tuple.getDouble("field_f_p"), 7.5, 0.0);
      assertEquals(tuple.getDouble("field_d_p"), 7.5, 0.0);
      assertEquals(tuple.getLong("field_l_p").longValue(), 7);



      //Assert field order
      assertResponseContains(clients.get(0), sParams, "{\"docs\":[{\"id\":\"8\",\"field_i\":60,\"str_s\":\"c\",\"field_i_p\":60,\"field_f_p\":60.5,\"field_d_p\":60.5,\"field_l_p\":60}");

      //Test unlimited unsorted result. Should sort on _version_ desc
      sParams = mapParams(CommonParams.QT, "/sql", "stmt", "select id, field_i, str_s from collection1 where text='XXXX'");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 8);

      tuple = tuples.get(0);
      assert(tuple.getLong("id") == 8);
      assert(tuple.getLong("field_i") == 60);
      assert(tuple.get("str_s").equals("c"));

      tuple = tuples.get(1);
      assert(tuple.getLong("id") == 7);
      assert(tuple.getLong("field_i") == 50);
      assert(tuple.get("str_s").equals("c"));

      tuple = tuples.get(2);
      assert(tuple.getLong("id") == 6);
      assert(tuple.getLong("field_i") == 40);
      assert(tuple.get("str_s").equals("c"));

      tuple = tuples.get(3);
      assert(tuple.getLong("id") == 5);
      assert(tuple.getLong("field_i") == 30);
      assert(tuple.get("str_s").equals("c"));

      tuple = tuples.get(4);
      assert(tuple.getLong("id") == 4);
      assert(tuple.getLong("field_i") == 11);
      assert(tuple.get("str_s").equals("b"));

      tuple = tuples.get(5);
      assert(tuple.getLong("id") == 3);
      assert(tuple.getLong("field_i") == 20);
      assert(tuple.get("str_s").equals("a"));

      tuple = tuples.get(6);
      assert(tuple.getLong("id") == 2);
      assert(tuple.getLong("field_i") == 8);
      assert(tuple.get("str_s").equals("b"));

      tuple = tuples.get(7);
      assert(tuple.getLong("id") == 1);
      assert(tuple.getLong("field_i") == 7);
      assert(tuple.get("str_s").equals("a"));


      sParams = mapParams(CommonParams.QT, "/sql", 
          "stmt", "select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 1);

      tuple = tuples.get(0);
      assert(tuple.getLong("id") == 8);
      assert(tuple.getLong("field_i") == 60);
      assert(tuple.get("str_s").equals("c"));

      sParams = mapParams(CommonParams.QT, "/sql", "stmt", "select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 3);

      tuple = tuples.get(0);
      assert(tuple.getLong("id") == 3);
      assert(tuple.getLong("field_i") == 20);
      assert(tuple.get("str_s").equals("a"));

      tuple = tuples.get(1);
      assert(tuple.getLong("id") == 2);
      assert(tuple.getLong("field_i") == 8);
      assert(tuple.get("str_s").equals("b"));

      tuple = tuples.get(2);
      assert(tuple.getLong("id") == 1);
      assert(tuple.getLong("field_i") == 7);
      assert(tuple.get("str_s").equals("a"));

      sParams = mapParams(CommonParams.QT, "/sql", 
          "stmt", "select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 3);

      tuple = tuples.get(0);
      assert(tuple.getLong("myId") == 3);
      assert(tuple.getLong("myInt") == 20);
      assert(tuple.get("myString").equals("a"));

      tuple = tuples.get(1);
      assert(tuple.getLong("myId") == 2);
      assert(tuple.getLong("myInt") == 8);
      assert(tuple.get("myString").equals("b"));

      tuple = tuples.get(2);
      assert(tuple.getLong("myId") == 1);
      assert(tuple.getLong("myInt") == 7);
      assert(tuple.get("myString").equals("a"));

      sParams = mapParams(CommonParams.QT, "/sql",
          "stmt", "select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 3);

      tuple = tuples.get(0);
      assert(tuple.getLong("myId") == 3);
      assert(tuple.getLong("myInt") == 20);
      assert(tuple.get("myString").equals("a"));

      tuple = tuples.get(1);
      assert(tuple.getLong("myId") == 2);
      assert(tuple.getLong("myInt") == 8);
      assert(tuple.get("myString").equals("b"));

      tuple = tuples.get(2);
      assert(tuple.getLong("myId") == 1);
      assert(tuple.getLong("myInt") == 7);
      assert(tuple.get("myString").equals("a"));

      //Test after reload SOLR-9059//
      Replica leader = getShardLeader("collection1", "shard1", 30 /* timeout secs */);

      // reload collection and wait to see the core report it has been reloaded
      boolean wasReloaded = reloadCollection(leader, "collection1");
      assertTrue(wasReloaded);

      sParams = mapParams(CommonParams.QT, "/sql",
          "stmt", "select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 3);

      tuple = tuples.get(0);
      assert(tuple.getLong("myId") == 3);
      assert(tuple.getLong("myInt") == 20);
      assert(tuple.get("myString").equals("a"));

      tuple = tuples.get(1);
      assert(tuple.getLong("myId") == 2);
      assert(tuple.getLong("myInt") == 8);
      assert(tuple.get("myString").equals("b"));

      tuple = tuples.get(2);
      assert(tuple.getLong("myId") == 1);
      assert(tuple.getLong("myInt") == 7);
      assert(tuple.get("myString").equals("a"));

      // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL
      sParams = mapParams(CommonParams.QT, "/sql",
          "stmt", "select id, field_i, str_s from collection1 where 1 = 0");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assertEquals(0, tuples.size());
    } finally {
      delete();
    }
  }

