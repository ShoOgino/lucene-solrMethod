  @Test
  public void testBasicSelect() throws Exception {


    new UpdateRequest()
        .add("id", "1", "text_t", "XXXX XXXX", "str_s", "a", "field_i", "7", "field_f", "7.5", "field_d", "7.5", "field_l", "7")
        .add("id", "2", "text_t", "XXXX XXXX", "str_s", "b", "field_i", "8", "field_f", "8.5", "field_d", "8.5", "field_l", "8")
        .add("id", "3", "text_t", "XXXX XXXX", "str_s", "a", "field_i", "20", "field_f", "20.5", "field_d", "20.5", "field_l", "20")
        .add("id", "4", "text_t", "XXXX XXXX", "str_s", "b", "field_i", "11", "field_f", "11.5", "field_d", "11.5", "field_l", "11")
        .add("id", "5", "text_t", "XXXX XXXX", "str_s", "c", "field_i", "30", "field_f", "30.5", "field_d", "30.5", "field_l", "30")
        .add("id", "6", "text_t", "XXXX XXXX", "str_s", "c", "field_i", "40", "field_f", "40.5", "field_d", "40.5", "field_l", "40")
        .add("id", "7", "text_t", "XXXX XXXX", "str_s", "c", "field_i", "50", "field_f", "50.5", "field_d", "50.5", "field_l", "50")
        .add("id", "8", "text_t", "XXXX XXXX", "str_s", "c", "field_i", "60", "field_f", "60.5", "field_d", "60.5", "field_l", "60")
        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);

    SolrParams sParams = mapParams(CommonParams.QT, "/sql",
        "stmt",
        "select id, field_i, str_s, field_f, field_d, field_l from collection1 where (text_t='(XXXX)' OR text_t='XXXX') AND text_t='XXXX' order by field_i desc");

    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+"/"+COLLECTIONORALIAS;
    List<Tuple> tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 8);
    Tuple tuple;

    tuple = tuples.get(0);
    assertEquals(tuple.getLong("id").longValue(), 8);
    assertEquals(tuple.getLong("field_i").longValue(), 60);
    assert (tuple.get("str_s").equals("c"));
    assertEquals(tuple.getLong("field_i").longValue(), 60L);
    assertEquals(tuple.getDouble("field_f"), 60.5, 0.0);
    assertEquals(tuple.getDouble("field_d"), 60.5, 0.0);
    assertEquals(tuple.getLong("field_l").longValue(), 60);

    tuple = tuples.get(1);
    assertEquals(tuple.getLong("id").longValue(), 7);
    assertEquals(tuple.getLong("field_i").longValue(), 50);
    assert (tuple.get("str_s").equals("c"));
    assertEquals(tuple.getLong("field_i").longValue(), 50);
    assertEquals(tuple.getDouble("field_f"), 50.5, 0.0);
    assertEquals(tuple.getDouble("field_d"), 50.5, 0.0);
    assertEquals(tuple.getLong("field_l").longValue(), 50);

    tuple = tuples.get(2);
    assertEquals(tuple.getLong("id").longValue(), 6);
    assertEquals(tuple.getLong("field_i").longValue(), 40);
    assert (tuple.get("str_s").equals("c"));
    assertEquals(tuple.getLong("field_i").longValue(), 40);
    assertEquals(tuple.getDouble("field_f"), 40.5, 0.0);
    assertEquals(tuple.getDouble("field_d"), 40.5, 0.0);
    assertEquals(tuple.getLong("field_l").longValue(), 40);

    tuple = tuples.get(3);
    assertEquals(tuple.getLong("id").longValue(), 5);
    assertEquals(tuple.getLong("field_i").longValue(), 30);
    assert (tuple.get("str_s").equals("c"));
    assertEquals(tuple.getLong("field_i").longValue(), 30);
    assertEquals(tuple.getDouble("field_f"), 30.5, 0.0);
    assertEquals(tuple.getDouble("field_d"), 30.5, 0.0);
    assertEquals(tuple.getLong("field_l").longValue(), 30);

    tuple = tuples.get(4);
    assertEquals(tuple.getLong("id").longValue(), 3);
    assertEquals(tuple.getLong("field_i").longValue(), 20);
    assert (tuple.get("str_s").equals("a"));
    assertEquals(tuple.getLong("field_i").longValue(), 20);
    assertEquals(tuple.getDouble("field_f"), 20.5, 0.0);
    assertEquals(tuple.getDouble("field_d"), 20.5, 0.0);
    assertEquals(tuple.getLong("field_l").longValue(), 20);

    tuple = tuples.get(5);
    assertEquals(tuple.getLong("id").longValue(), 4);
    assertEquals(tuple.getLong("field_i").longValue(), 11);
    assert (tuple.get("str_s").equals("b"));
    assertEquals(tuple.getLong("field_i").longValue(), 11);
    assertEquals(tuple.getDouble("field_f"), 11.5, 0.0);
    assertEquals(tuple.getDouble("field_d"), 11.5, 0.0);
    assertEquals(tuple.getLong("field_l").longValue(), 11);

    tuple = tuples.get(6);
    assertEquals(tuple.getLong("id").longValue(), 2);
    assertEquals(tuple.getLong("field_i").longValue(), 8);
    assert (tuple.get("str_s").equals("b"));
    assertEquals(tuple.getLong("field_i").longValue(), 8);
    assertEquals(tuple.getDouble("field_f"), 8.5, 0.0);
    assertEquals(tuple.getDouble("field_d"), 8.5, 0.0);
    assertEquals(tuple.getLong("field_l").longValue(), 8);

    tuple = tuples.get(7);
    assertEquals(tuple.getLong("id").longValue(), 1);
    assertEquals(tuple.getLong("field_i").longValue(), 7);
    assert (tuple.get("str_s").equals("a"));
    assertEquals(tuple.getLong("field_i").longValue(), 7);
    assertEquals(tuple.getDouble("field_f"), 7.5, 0.0);
    assertEquals(tuple.getDouble("field_d"), 7.5, 0.0);
    assertEquals(tuple.getLong("field_l").longValue(), 7);

    // Assert field order
    //assertResponseContains(clients.get(0), sParams, "{\"docs\":[{\"id\":\"8\",\"field_i\":60,\"str_s\":\"c\",\"field_i\":60,\"field_f\":60.5,\"field_d\":60.5,\"field_l\":60}");


    sParams = mapParams(CommonParams.QT, "/sql", "stmt",
        "select id, field_i, str_s from collection1 where text_t='XXXX' order by id desc");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 8);

    tuple = tuples.get(0);
    assert (tuple.getLong("id") == 8);
    assert (tuple.getLong("field_i") == 60);
    assert (tuple.get("str_s").equals("c"));

    tuple = tuples.get(1);
    assert (tuple.getLong("id") == 7);
    assert (tuple.getLong("field_i") == 50);
    assert (tuple.get("str_s").equals("c"));

    tuple = tuples.get(2);
    assert (tuple.getLong("id") == 6);
    assert (tuple.getLong("field_i") == 40);
    assert (tuple.get("str_s").equals("c"));

    tuple = tuples.get(3);
    assert (tuple.getLong("id") == 5);
    assert (tuple.getLong("field_i") == 30);
    assert (tuple.get("str_s").equals("c"));

    tuple = tuples.get(4);
    assert (tuple.getLong("id") == 4);
    assert (tuple.getLong("field_i") == 11);
    assert (tuple.get("str_s").equals("b"));

    tuple = tuples.get(5);
    assert (tuple.getLong("id") == 3);
    assert (tuple.getLong("field_i") == 20);
    assert (tuple.get("str_s").equals("a"));

    tuple = tuples.get(6);
    assert (tuple.getLong("id") == 2);
    assert (tuple.getLong("field_i") == 8);
    assert (tuple.get("str_s").equals("b"));

    tuple = tuples.get(7);
    assert (tuple.getLong("id") == 1);
    assert (tuple.getLong("field_i") == 7);
    assert (tuple.get("str_s").equals("a"));

    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select id, field_i, str_s from collection1 where text_t='XXXX' order by field_i desc limit 1");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 1);

    tuple = tuples.get(0);
    assert (tuple.getLong("id") == 8);
    assert (tuple.getLong("field_i") == 60);
    assert (tuple.get("str_s").equals("c"));

    sParams = mapParams(CommonParams.QT, "/sql", "stmt",
        "select id, field_i, str_s from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 3);

    tuple = tuples.get(0);
    assert (tuple.getLong("id") == 3);
    assert (tuple.getLong("field_i") == 20);
    assert (tuple.get("str_s").equals("a"));

    tuple = tuples.get(1);
    assert (tuple.getLong("id") == 2);
    assert (tuple.getLong("field_i") == 8);
    assert (tuple.get("str_s").equals("b"));

    tuple = tuples.get(2);
    assert (tuple.getLong("id") == 1);
    assert (tuple.getLong("field_i") == 7);
    assert (tuple.get("str_s").equals("a"));

    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt",
        "select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by myInt desc");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 3);

    tuple = tuples.get(0);
    assert (tuple.getLong("myId") == 3);
    assert (tuple.getLong("myInt") == 20);
    assert (tuple.get("myString").equals("a"));

    tuple = tuples.get(1);
    assert (tuple.getLong("myId") == 2);
    assert (tuple.getLong("myInt") == 8);
    assert (tuple.get("myString").equals("b"));

    tuple = tuples.get(2);
    assert (tuple.getLong("myId") == 1);
    assert (tuple.getLong("myInt") == 7);
    assert (tuple.get("myString").equals("a"));

    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt",
        "select id as myId, field_i as myInt, str_s as myString from collection1 where text_t='XXXX' AND id='(1 2 3)' order by field_i desc");

    tuples = getTuples(sParams, baseUrl);

    assert (tuples.size() == 3);

    tuple = tuples.get(0);
    assert (tuple.getLong("myId") == 3);
    assert (tuple.getLong("myInt") == 20);
    assert (tuple.get("myString").equals("a"));

    tuple = tuples.get(1);
    assert (tuple.getLong("myId") == 2);
    assert (tuple.getLong("myInt") == 8);
    assert (tuple.get("myString").equals("b"));

    tuple = tuples.get(2);
    assert (tuple.getLong("myId") == 1);
    assert (tuple.getLong("myInt") == 7);
    assert (tuple.get("myString").equals("a"));

    // SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL
    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select id, field_i, str_s from collection1 where 1 = 0");

    tuples = getTuples(sParams, baseUrl);

    assertEquals(0, tuples.size());

  }

