  @Test
  public void testMetricsSnapshot() throws Exception {
    final CountDownLatch counter = new CountDownLatch(500);
    SolrInfoBean bean = new SolrInfoBean() {
      SolrMetricsContext solrMetricsContext;
      @Override
      public String getName() {
        return "foo";
      }

      @Override
      public String getDescription() {
        return "foo";
      }

      @Override
      public Category getCategory() {
        return Category.ADMIN;
      }

      @Override
      public void initializeMetrics(SolrMetricsContext parentContext, String scope) {
        this.solrMetricsContext = parentContext.getChildContext(this);
      }

      @Override
      public SolrMetricsContext getSolrMetricsContext() {
        return solrMetricsContext;
      }
    };
    bean.initializeMetrics(new SolrMetricsContext(h.getCoreContainer().getMetricManager(), "testMetricsSnapshot", "foobar"), "foo");
    runSnapshots = true;
    Thread modifier = new Thread(() -> {
      int i = 0;
      while (runSnapshots) {
        bean.getSolrMetricsContext().registerMetricName("name-" + i++);
        try {
          Thread.sleep(31);
        } catch (InterruptedException e) {
          runSnapshots = false;
          break;
        }
      }
    });
    Thread reader = new Thread(() -> {
      while (runSnapshots) {
        try {
          bean.getSolrMetricsContext().getMetricsSnapshot();
        } catch (Exception e) {
          runSnapshots = false;
          e.printStackTrace();
          fail("Exception getting metrics snapshot: " + e.toString());
        }
        try {
          Thread.sleep(53);
        } catch (InterruptedException e) {
          runSnapshots = false;
          break;
        }
        counter.countDown();
      }
    });
    modifier.start();
    reader.start();
    counter.await(30, TimeUnit.SECONDS);
    runSnapshots = false;
  }

