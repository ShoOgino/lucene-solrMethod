  @Test
  // 12-Jun-2018 @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // 04-May-2018
  public void doTestIndexAndConfigAliasReplication() throws Exception {
    clearIndexWithReplication();

    nDocs--;
    for (int i = 0; i < nDocs; i++)
      index(leaderClient, "id", i, "name", "name = " + i);

    leaderClient.commit();

    @SuppressWarnings({"rawtypes"})
    NamedList leaderQueryRsp = rQuery(nDocs, "*:*", leaderClient);
    SolrDocumentList leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get("response");
    assertEquals(nDocs, leaderQueryResult.getNumFound());

    //get docs from follower and check if number is equal to leader
    @SuppressWarnings({"rawtypes"})
    NamedList followerQueryRsp = rQuery(nDocs, "*:*", followerClient);
    SolrDocumentList followerQueryResult = (SolrDocumentList) followerQueryRsp.get("response");

    assertEquals(nDocs, followerQueryResult.getNumFound());

    //compare results
    String cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);
    assertEquals(null, cmp);

    //start config files replication test
    //clear leader index
    leaderClient.deleteByQuery("*:*");
    leaderClient.commit();
    rQuery(0, "*:*", leaderClient); // sanity check w/retry

    //change solrconfig on leader
    leader.copyConfigFile(CONF_DIR + "solrconfig-leader1.xml",
                          "solrconfig.xml");

    //change schema on leader
    leader.copyConfigFile(CONF_DIR + "schema-replication2.xml",
                          "schema.xml");

    //keep a copy of the new schema
    leader.copyConfigFile(CONF_DIR + "schema-replication2.xml",
                          "schema-replication2.xml");

    leaderJetty.stop();

    leaderJetty = createAndStartJetty(leader);
    leaderClient.close();
    leaderClient = createNewSolrClient(leaderJetty.getLocalPort());

    follower.setTestPort(leaderJetty.getLocalPort());
    follower.copyConfigFile(follower.getSolrConfigFile(), "solrconfig.xml");

    followerJetty.stop();
    followerJetty = createAndStartJetty(follower);
    followerClient.close();
    followerClient = createNewSolrClient(followerJetty.getLocalPort());

    followerClient.deleteByQuery("*:*");
    followerClient.commit();
    rQuery(0, "*:*", followerClient); // sanity check w/retry
    
    // record collection1's start time on follower
    final Date followerStartTime = watchCoreStartAt(followerClient, 30*1000, null);

    //add a doc with new field and commit on leader to trigger index fetch from follower.
    index(leaderClient, "id", "2000", "name", "name = " + 2000, "newname", "n2000");
    leaderClient.commit();
    rQuery(1, "newname:n2000", leaderClient);  // sanity check

    // wait for follower to reload core by watching updated startTime
    watchCoreStartAt(followerClient, 30*1000, followerStartTime);

    @SuppressWarnings({"rawtypes"})
    NamedList leaderQueryRsp2 = rQuery(1, "id:2000", leaderClient);
    SolrDocumentList leaderQueryResult2 = (SolrDocumentList) leaderQueryRsp2.get("response");
    assertEquals(1, leaderQueryResult2.getNumFound());

    @SuppressWarnings({"rawtypes"})
    NamedList followerQueryRsp2 = rQuery(1, "id:2000", followerClient);
    SolrDocumentList followerQueryResult2 = (SolrDocumentList) followerQueryRsp2.get("response");
    assertEquals(1, followerQueryResult2.getNumFound());
    
    checkForSingleIndex(leaderJetty);
    checkForSingleIndex(followerJetty, true);
  }

