  public void testSimpleSearchRequests() throws Exception {
    final String input = "\"brown fox\"";
    
    assertQ(req("q", input)
            // basic search should have worked...
            , "//result[@numFound='2']"
            , "//result/doc/str[@name='id'][.='42']"
            , "//result/doc/str[@name='id'][.='43']"
            // and phrases should not be returned since they weren't requested...
            , "0=count(//lst[@name='phrases'])"
            );
    
    assertQ(req("phrases", "false", "q", input)
            // basic search should have worked...
            , "//result[@numFound='2']"
            , "//result/doc/str[@name='id'][.='42']"
            , "//result/doc/str[@name='id'][.='43']"
            // and phrases should not be returned since they were explicitly disabled...
            , "0=count(//lst[@name='phrases'])"
            );

    // with input this short, all of these permutations of requests should produce the same output...
    for (SolrQueryRequest req : Arrays.asList
           ( // simple, using 3/7 defaults
             req("phrases","true", "q", input),
             
             // simple, using just the 3/3 'short' fields
             req("phrases","true", "q", input,
                 "phrases.fields", "multigrams_body_short multigrams_title_short^2"),
             
             // diff analysers, but explicit override using 3/3 "short" field...
             req("phrases","true", "q", input,
                 "phrases.fields", "multigrams_body multigrams_title_short^2",
                 "phrases.analysis.field", "multigrams_title_short"))) {
      assertQ(req
              // basic search should have worked...
              , "//result[@numFound='2']"
              , "//result/doc/str[@name='id'][.='42']"
              , "//result/doc/str[@name='id'][.='43']"
              
              // and we should have gotten phrase info...
              , "//lst[@name='phrases']/str[@name='input'][.='"+input+"']"
              , "//lst[@name='phrases']/str[@name='summary'][.='\"{brown fox}\"']"
              , "count(//lst[@name='phrases']/arr[@name='details']/lst)=1"
              , "//lst[@name='phrases']/arr[@name='details']/lst/str[@name='text'][.='brown fox']"
              , "//lst[@name='phrases']/arr[@name='details']/lst/int[@name='offset_start'][.='1']"
              , "//lst[@name='phrases']/arr[@name='details']/lst/int[@name='offset_end'][.='10']"
              , "//lst[@name='phrases']/arr[@name='details']/lst/double[@name='score'][number(.) > 0]"
              );
    }

    // override the query string to get different phrases
    assertQ(req("phrases","true", "q", "*:*", "phrases.q",  input)
            // basic search should have found all docs...
            , "//result[@numFound='4']"
            // and we should have gotten phrase info for our alternative q string...
            , "//lst[@name='phrases']/str[@name='input'][.='"+input+"']"
            , "//lst[@name='phrases']/str[@name='summary'][.='\"{brown fox}\"']"
            , "count(//lst[@name='phrases']/arr[@name='details']/lst)=1"
            , "//lst[@name='phrases']/arr[@name='details']/lst/str[@name='text'][.='brown fox']"
            , "//lst[@name='phrases']/arr[@name='details']/lst/int[@name='offset_start'][.='1']"
            , "//lst[@name='phrases']/arr[@name='details']/lst/int[@name='offset_end'][.='10']"
            , "//lst[@name='phrases']/arr[@name='details']/lst/double[@name='score'][number(.) > 0]"
            );
    
    // empty input, empty phrases (but no error)
    assertQ(req("phrases","true", "q", "*:*", "phrases.q", "")
            // basic search should have found all docs...
            , "//result[@numFound='4']"
            // and we should have gotten (empty) phrase info for our alternative q string...
            , "//lst[@name='phrases']/str[@name='input'][.='']"
            , "//lst[@name='phrases']/str[@name='summary'][.='']"
            , "count(//lst[@name='phrases']/arr[@name='details'])     = 1"
            , "count(//lst[@name='phrases']/arr[@name='details']/lst) = 0"
            );
  }

