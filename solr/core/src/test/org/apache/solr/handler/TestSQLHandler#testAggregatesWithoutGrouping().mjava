  private void testAggregatesWithoutGrouping() throws Exception {
    CloudJettyRunner jetty = this.cloudJettys.get(0);

    del("*:*");

    commit();

    indexr(id, "0", "a_s", "hello0", "a_i", "0", "a_f", "1");
    indexr(id, "2", "a_s", "hello0", "a_i", "2", "a_f", "2");
    indexr(id, "3", "a_s", "hello3", "a_i", "3", "a_f", "3");
    indexr(id, "4", "a_s", "hello4", "a_i", "4", "a_f", "4");
    indexr(id, "1", "a_s", "hello0", "a_i", "1", "a_f", "5");
    indexr(id, "5", "a_s", "hello3", "a_i", "10", "a_f", "6");
    indexr(id, "6", "a_s", "hello4", "a_i", "11", "a_f", "7");
    indexr(id, "7", "a_s", "hello3", "a_i", "12", "a_f", "8");
    indexr(id, "8", "a_s", "hello3", "a_i", "13", "a_f", "9");
    indexr(id, "9", "a_s", "hello0", "a_i", "14", "a_f", "10");

    commit();

    SolrParams sParams = mapParams(CommonParams.QT, "/sql", "stmt",
        "select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), " +
            "min(a_f), max(a_f), avg(a_f) from collection1");

    SolrStream solrStream = new SolrStream(jetty.url, sParams);

    List<Tuple> tuples = getTuples(solrStream);

    assert (tuples.size() == 1);

    // Test Long and Double Sums

    Tuple tuple = tuples.get(0);

    Double count = tuple.getDouble("EXPR$0"); // count(*)
    Double sumi = tuple.getDouble("EXPR$1"); // sum(a_i)
    Double mini = tuple.getDouble("EXPR$2"); // min(a_i)
    Double maxi = tuple.getDouble("EXPR$3"); // max(a_i)
    Double avgi = tuple.getDouble("EXPR$4"); // avg(a_i)
    Double sumf = tuple.getDouble("EXPR$5"); // sum(a_f)
    Double minf = tuple.getDouble("EXPR$6"); // min(a_f)
    Double maxf = tuple.getDouble("EXPR$7"); // max(a_f)
    Double avgf = tuple.getDouble("EXPR$8"); // avg(a_f)

    assertTrue(count == 10);
    assertTrue(sumi == 70);
    assertTrue(mini == 0.0D);
    assertTrue(maxi == 14.0D);
    assertTrue(avgi == 7.0D);
    assertTrue(sumf == 55.0D);
    assertTrue(minf == 1.0D);
    assertTrue(maxf == 10.0D);
    assertTrue(avgf == 5.5D);

    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, " +
            "cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1");

    solrStream = new SolrStream(jetty.url, sParams);

    tuples = getTuples(solrStream);

    assert (tuples.size() == 1);

    // Test Long and Double Sums

    tuple = tuples.get(0);

    count = tuple.getDouble("myCount");
    sumi = tuple.getDouble("mySum");
    mini = tuple.getDouble("myMin");
    maxi = tuple.getDouble("myMax");
    avgi = tuple.getDouble("myAvg");
    sumf = tuple.getDouble("EXPR$5"); // sum(a_f)
    minf = tuple.getDouble("EXPR$6"); // min(a_f)
    maxf = tuple.getDouble("EXPR$7"); // max(a_f)
    avgf = tuple.getDouble("EXPR$8"); // avg(a_f)

    assertTrue(count == 10);
    assertTrue(mini == 0.0D);
    assertTrue(maxi == 14.0D);
    assertTrue(sumi == 70);
    assertTrue(avgi == 7.0D);
    assertTrue(sumf == 55.0D);
    assertTrue(minf == 1.0D);
    assertTrue(maxf == 10.0D);
    assertTrue(avgf == 5.5D);

    // Test without cast on average int field
    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, " +
            "avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1");

    solrStream = new SolrStream(jetty.url, sParams);

    tuples = getTuples(solrStream);

    assert (tuples.size() == 1);

    // Test Long and Double Sums

    tuple = tuples.get(0);

    count = tuple.getDouble("myCount");
    sumi = tuple.getDouble("mySum");
    mini = tuple.getDouble("myMin");
    maxi = tuple.getDouble("myMax");
    avgi = tuple.getDouble("myAvg");
    assertTrue(tuple.get("myAvg") instanceof Long);
    sumf = tuple.getDouble("EXPR$5"); // sum(a_f)
    minf = tuple.getDouble("EXPR$6"); // min(a_f)
    maxf = tuple.getDouble("EXPR$7"); // max(a_f)
    avgf = tuple.getDouble("EXPR$8"); // avg(a_f)

    assertTrue(count == 10);
    assertTrue(mini == 0.0D);
    assertTrue(maxi == 14.0D);
    assertTrue(sumi == 70);
    assertTrue(avgi == 7);
    assertTrue(sumf == 55.0D);
    assertTrue(minf == 1.0D);
    assertTrue(maxf == 10.0D);
    assertTrue(avgf == 5.5D);

    // Test where clause hits
    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), " +
            "min(a_f), max(a_f), avg(a_f) from collection1 where id = 2");

    solrStream = new SolrStream(jetty.url, sParams);

    tuples = getTuples(solrStream);

    assert (tuples.size() == 1);

    tuple = tuples.get(0);

    count = tuple.getDouble("EXPR$0"); // count(*)
    sumi = tuple.getDouble("EXPR$1"); // sum(a_i)
    mini = tuple.getDouble("EXPR$2"); // min(a_i)
    maxi = tuple.getDouble("EXPR$3"); // max(a_i)
    avgi = tuple.getDouble("EXPR$4"); // avg(a_i)
    sumf = tuple.getDouble("EXPR$5"); // sum(a_f)
    minf = tuple.getDouble("EXPR$6"); // min(a_f)
    maxf = tuple.getDouble("EXPR$7"); // max(a_f)
    avgf = tuple.getDouble("EXPR$8"); // avg(a_f)

    assertTrue(count == 1);
    assertTrue(sumi == 2);
    assertTrue(mini == 2);
    assertTrue(maxi == 2);
    assertTrue(avgi == 2.0D);
    assertTrue(sumf == 2.0D);
    assertTrue(minf == 2);
    assertTrue(maxf == 2);
    assertTrue(avgf == 2.0);

    // Test zero hits
    sParams = mapParams(CommonParams.QT, "/sql",
        "stmt", "select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), " +
            "min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'");

    solrStream = new SolrStream(jetty.url, sParams);

    tuples = getTuples(solrStream);

    assert (tuples.size() == 1);

    tuple = tuples.get(0);

    count = tuple.getDouble("EXPR$0"); // count(*)
    sumi = tuple.getDouble("EXPR$1"); // sum(a_i)
    mini = tuple.getDouble("EXPR$2"); // min(a_i)
    maxi = tuple.getDouble("EXPR$3"); // max(a_i)
    avgi = tuple.getDouble("EXPR$4"); // avg(a_i)
    sumf = tuple.getDouble("EXPR$5"); // sum(a_f)
    minf = tuple.getDouble("EXPR$6"); // min(a_f)
    maxf = tuple.getDouble("EXPR$7"); // max(a_f)
    avgf = tuple.getDouble("EXPR$8"); // avg(a_f)

    assertTrue(count == 0);
    assertTrue(sumi == null);
    assertTrue(mini == null);
    assertTrue(maxi == null);
    assertTrue(avgi == null);
    assertTrue(sumf == null);
    assertTrue(minf == null);
    assertTrue(maxf == null);
    assertTrue(avgf == null);

    del("*:*");
    commit();
  }

