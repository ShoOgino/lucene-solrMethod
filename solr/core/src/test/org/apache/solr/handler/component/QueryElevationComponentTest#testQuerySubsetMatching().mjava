  @Test
  public void testQuerySubsetMatching() throws Exception {
    try {
      init("schema12.xml");
      assertU(adoc("id", "1", "title", "XXXX", "str_s1", "a"));
      assertU(adoc("id", "2", "title", "YYYY", "str_s1", "b"));
      assertU(adoc("id", "3", "title", "ZZZZ", "str_s1", "c"));

      assertU(adoc("id", "4", "title", "XXXX XXXX", "str_s1", "x"));
      assertU(adoc("id", "5", "title", "YYYY YYYY", "str_s1", "y"));
      assertU(adoc("id", "6", "title", "XXXX XXXX", "str_s1", "z"));
      assertU(adoc("id", "7", "title", "AAAA", "str_s1", "a"));

      assertU(adoc("id", "10", "title", "RR", "str_s1", "r"));
      assertU(adoc("id", "11", "title", "SS", "str_s1", "r"));
      assertU(adoc("id", "12", "title", "TT", "str_s1", "r"));
      assertU(adoc("id", "13", "title", "UU", "str_s1", "r"));
      assertU(adoc("id", "14", "title", "VV", "str_s1", "r"));
      assertU(commit());

      // Exact matching.
      assertQ("", req(CommonParams.Q, "XXXX", CommonParams.QT, "/elevate",
          CommonParams.FL, "id, score, [elevated]"),
          "//*[@numFound='3']",
          "//result/doc[1]/str[@name='id'][.='1']",
          "//result/doc[2]/str[@name='id'][.='4']",
          "//result/doc[3]/str[@name='id'][.='6']",
          "//result/doc[1]/bool[@name='[elevated]'][.='true']",
          "//result/doc[2]/bool[@name='[elevated]'][.='false']",
          "//result/doc[3]/bool[@name='[elevated]'][.='false']"
      );

      // Exact matching.
      assertQ("", req(CommonParams.Q, "QQQQ EE", CommonParams.QT, "/elevate",
          CommonParams.FL, "id, score, [elevated]"),
          "//*[@numFound='0']"
      );

      // Subset matching.
      assertQ("", req(CommonParams.Q, "BB DD CC VV", CommonParams.QT, "/elevate",
          CommonParams.FL, "id, score, [elevated]"),
          "//*[@numFound='4']",
          "//result/doc[1]/str[@name='id'][.='10']",
          "//result/doc[2]/str[@name='id'][.='12']",
          "//result/doc[3]/str[@name='id'][.='11']",
          "//result/doc[4]/str[@name='id'][.='14']",
          "//result/doc[1]/bool[@name='[elevated]'][.='true']",
          "//result/doc[2]/bool[@name='[elevated]'][.='true']",
          "//result/doc[3]/bool[@name='[elevated]'][.='true']",
          "//result/doc[4]/bool[@name='[elevated]'][.='false']"
      );

      // Subset + exact matching.
      assertQ("", req(CommonParams.Q, "BB CC", CommonParams.QT, "/elevate",
          CommonParams.FL, "id, score, [elevated]"),
          "//*[@numFound='4']",
          "//result/doc[1]/str[@name='id'][.='13']",
          "//result/doc[2]/str[@name='id'][.='10']",
          "//result/doc[3]/str[@name='id'][.='12']",
          "//result/doc[4]/str[@name='id'][.='11']",
          "//result/doc[1]/bool[@name='[elevated]'][.='true']",
          "//result/doc[2]/bool[@name='[elevated]'][.='true']",
          "//result/doc[3]/bool[@name='[elevated]'][.='true']",
          "//result/doc[4]/bool[@name='[elevated]'][.='true']"
      );

      // Subset matching.
      assertQ("", req(CommonParams.Q, "AA BB DD CC AA", CommonParams.QT, "/elevate",
          CommonParams.FL, "id, score, [elevated]"),
          "//*[@numFound='4']",
          "//result/doc[1]/str[@name='id'][.='10']",
          "//result/doc[2]/str[@name='id'][.='12']",
          "//result/doc[3]/str[@name='id'][.='11']",
          "//result/doc[4]/str[@name='id'][.='14']",
          "//result/doc[1]/bool[@name='[elevated]'][.='true']",
          "//result/doc[2]/bool[@name='[elevated]'][.='true']",
          "//result/doc[3]/bool[@name='[elevated]'][.='true']",
          "//result/doc[4]/bool[@name='[elevated]'][.='true']"
      );

      // Subset matching.
      assertQ("", req(CommonParams.Q, "AA RR BB DD AA", CommonParams.QT, "/elevate",
          CommonParams.FL, "id, score, [elevated]"),
          "//*[@numFound='3']",
          "//result/doc[1]/str[@name='id'][.='12']",
          "//result/doc[2]/str[@name='id'][.='14']",
          "//result/doc[3]/str[@name='id'][.='10']",
          "//result/doc[1]/bool[@name='[elevated]'][.='true']",
          "//result/doc[2]/bool[@name='[elevated]'][.='true']",
          "//result/doc[3]/bool[@name='[elevated]'][.='false']"
      );

      // Subset matching.
      assertQ("", req(CommonParams.Q, "AA BB EE", CommonParams.QT, "/elevate",
          CommonParams.FL, "id, score, [elevated]")
          , "//*[@numFound='0']"
          );
    } finally {
      delete();
    }
  }

