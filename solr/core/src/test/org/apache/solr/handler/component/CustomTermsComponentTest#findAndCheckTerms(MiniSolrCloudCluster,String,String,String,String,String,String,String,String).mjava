  private static String findAndCheckTerms(final MiniSolrCloudCluster cluster, final String collection,
      String requestHandlerName, String in_shards,
      String field1, String value1,
      String field2, String value2,
      String solrServerExceptionMessagePrefix) throws IOException {

      // compose the query ...
      final SolrQuery solrQuery =  new SolrQuery("*:*");
      solrQuery.setRequestHandler(requestHandlerName);
      solrQuery.add("shards.qt", requestHandlerName);
      // ... asking for terms ...
      solrQuery.setTerms(true);
      if (field1 != null) {
        solrQuery.addTermsField(field1);
      }
      if (field2 != null) {
        solrQuery.addTermsField(field2);
      }
      // ... and shards info ...
      solrQuery.add("shards.info", "true");
      // ... passing shards to use (if we have a preference)
      if (in_shards != null) {
        solrQuery.add("shards", in_shards);
      }

      // make the query
      final QueryResponse queryResponse;
      try {
        queryResponse = new QueryRequest(solrQuery)
            .process(cluster.getSolrClient(), collection);
        assertNull("expected exception ("+solrServerExceptionMessagePrefix+") not encountered", solrServerExceptionMessagePrefix);
      } catch (SolrServerException sse) {
        assertNotNull("unexpectedly caught exception "+sse, solrServerExceptionMessagePrefix);
        assertTrue(sse.getMessage().startsWith(solrServerExceptionMessagePrefix));
        assertThat(sse.getCause().getMessage(), containsString("not on the shards whitelist"));
        return null;
      }

      // analyse the response ...
      final TermsResponse termsResponse = queryResponse.getTermsResponse();
      // ... checking the terms returned ...
      checkTermsResponse(termsResponse, field1, value1);
      checkTermsResponse(termsResponse, field2, value2);
      // ... and assemble info about the shards ...
      final String out_shards = extractShardAddresses(queryResponse, ",");
      // ... to return to the caller
      return out_shards;
    }

