  @SuppressWarnings({"rawtypes"})
  private void sanityCheckIndividualShards() throws Exception {
    assertEquals("This test assumes exactly 3 shards/clients", 3, clients.size());
    
    SolrParams req = params( "q", "*:*", 
                             "distrib", "false",
                             "facet", "true", 
                             "facet.limit", "10",
                             "facet.pivot", "foo_s,bar_s");

    // sanity check that our expectations about each shard (non-distrib) are correct

    PivotField pivot = null;
    List<PivotField> pivots = null;
    
    @SuppressWarnings({"unchecked", "rawtypes"})
    List<PivotField>[] shardPivots = new List[clients.size()];
    for (int i = 0; i < clients.size(); i++) {
      shardPivots[i] = clients.get(i).query( req ).getFacetPivot().get("foo_s,bar_s");
    }

    // top 5 same on all shards
    for (int i = 0; i < 3; i++) {
      assertEquals(10, shardPivots[i].size());
      for (int j = 0; j < 5; j++) {
        pivot = shardPivots[i].get(j);
        assertEquals(pivot.toString(), "aaa"+j, pivot.getValue());
        assertEquals(pivot.toString(), 100, pivot.getCount());
      }
    }
    // top 6-10 same on shard0 & shard11
    for (int i = 0; i < 2; i++) {
      for (int j = 5; j < 10; j++) {
        pivot = shardPivots[i].get(j);
        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith("bbb"));
        assertEquals(pivot.toString(), 50, pivot.getCount());
      }
    }
    // 6-10 on shard2
    assertEquals("junkA", shardPivots[2].get(5).getValue());
    assertEquals(50, shardPivots[2].get(5).getCount());
    assertEquals("tail", shardPivots[2].get(6).getValue());
    assertEquals(45, shardPivots[2].get(6).getCount());
    for (int j = 7; j < 10; j++) {
      pivot = shardPivots[2].get(j);
      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith("ZZZ"));
      assertEquals(pivot.toString(), 1, pivot.getCount());
    }
    // check sub-shardPivots on "tail" from shard2
    pivots = shardPivots[2].get(6).getPivot();
    assertEquals(6, pivots.size());
    for (int j = 0; j < 5; j++) {
      pivot = pivots.get(j);
      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith("junkB"));
      assertEquals(pivot.toString(), 8, pivot.getCount());
    }
    pivot = pivots.get(5);
    assertEquals("tailB", pivot.getValue());
    assertEquals(5, pivot.getCount());
  }

