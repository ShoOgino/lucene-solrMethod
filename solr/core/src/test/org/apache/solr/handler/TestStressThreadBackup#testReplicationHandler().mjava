  public void testReplicationHandler() throws Exception {
    // Create a custom BackupAPIImpl which uses ReplicatoinHandler for the backups
    // but still defaults to CoreAdmin for making named snapshots (since that's what's documented)
    testSnapshotsAndBackupsDuringConcurrentCommitsAndOptimizes(new BackupAPIImpl() {
      /** no solrj API for ReplicationHandler */
      private GenericSolrRequest makeReplicationReq(SolrParams p) {
        return new GenericSolrRequest(GenericSolrRequest.METHOD.GET, "/replication", p);
      }
      
      /** 
       * Override default backup impl to hit ReplicationHandler, 
       * and then poll that same handler until success
       */
      public void makeBackup(final String backupName, final String snapName) throws Exception {
        final TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, TimeSource.NANO_TIME);
        ModifiableSolrParams p = params("command", "backup",
                                        "name", backupName,
                                        CoreAdminParams.BACKUP_LOCATION, backupDir.getAbsolutePath());
        if (null != snapName) {
          p.add(CoreAdminParams.COMMIT_NAME, snapName);
        }
        makeReplicationReq(p).process(coreClient);
        
        // "/replication" handler is all async, need to poll untill we see *this*
        // backupName report success
        while (!timeout.hasTimedOut()) {
          if (checkBackupSuccess(backupName)) {
            return;
          }
          timeout.sleep(50);
        }
        
        // total TimeOut elapsed, so one last check or fail whole test.
        assertTrue(backupName + " never succeeded after waiting excessive amount of time",
                   checkBackupSuccess(backupName));
      }

      /**
       * Returns true if the replication handler's 'details' command indicates that
       * the most recently (succcessfully) completed backup has the specified name.
       * "fails" the test if 'details' ever indicates there was a backup exception.
       */
      private boolean checkBackupSuccess(final String backupName) throws Exception {
        final SimpleSolrResponse rsp = makeReplicationReq(params("command", "details")).process(coreClient);
        final NamedList data = rsp.getResponse();
        log.info("Checking Status of {}: {}", backupName, data);
        final NamedList<String> backupData = (NamedList<String>) data.findRecursive("details","backup");
        if (null == backupData) {
          // no backup has finished yet
          return false;
        }
        
        final Object exception = backupData.get("exception");
        assertNull("Backup failure", exception);

        if (backupName.equals(backupData.get("snapshotName"))
            && "success".equals(backupData.get("status"))) {
          return true;
        }
        return false;
      }
    });
    
  }

