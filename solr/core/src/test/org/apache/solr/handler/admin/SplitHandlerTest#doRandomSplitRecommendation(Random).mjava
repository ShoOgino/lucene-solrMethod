  public void doRandomSplitRecommendation(Random rand) throws Exception {
    int low = 0;
    int high = 0;

    while (high-low < 10) {
      low = randomBound(rand);
      high = randomBound(rand);
      if (low > high) {
        int tmp = low;
        low = high;
        high = tmp;
      }
    }

    DocRouter.Range curr = new DocRouter.Range(low,high);


    int maxRanges = rand.nextInt(20);

    int start = low;

    // bucket can start before or after
    if (rand.nextBoolean()) {
        start += rand.nextInt(200) - 100;
        if (start > low) {
          // underflow
          start = Integer.MIN_VALUE;
        }
    }

    List<SplitOp.RangeCount> counts = new ArrayList<>(maxRanges);
    for (;;) {
      int end = start + rand.nextInt(100) + 1;
      if (end < start) {
        // overflow
        end = Integer.MAX_VALUE;
      }
      counts.add( new SplitOp.RangeCount(new DocRouter.Range(start, end), rand.nextInt(1000)+1));
      if (counts.size() >= maxRanges) break;
      if (counts.size() == maxRanges / 2 && rand.nextBoolean()) {
        // transition toward the end of the range (more boundary cases for large ranges)
        start = high - rand.nextInt(100);
        start = Math.max(start, end+1);
      } else {
        start = end + 1;
      }
      if (rand.nextBoolean()) {
        start += rand.nextInt(100);
      }
      if (start < end) {
        // overflow
        break;
      }
    }

    try {
      Collection<DocRouter.Range> results = SplitOp.getSplits(counts, curr);
      verifyContiguous(results, curr);
    } catch (Throwable e) {
      // System.err.println(e);
    }
  }

