  public void testCommands() throws Exception {
    MockCollectionsHandler collectionsHandler = new MockCollectionsHandler();
    ApiBag apiBag = new ApiBag(false);
    Collection<Api> apis = collectionsHandler.getApis();
    for (Api api : apis) apiBag.register(api, Collections.EMPTY_MAP);
    //test a simple create collection call
    compareOutput(apiBag, "/collections", POST,
        "{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2 }}", null,
        "{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create}");

    //test a create collection with custom properties
    compareOutput(apiBag, "/collections", POST,
        "{create:{name:'newcoll', config:'schemaless', numShards:2, replicationFactor:2, properties:{prop1:'prop1val', prop2: prop2val} }}", null,
        "{name:newcoll, fromApi:'true', replicationFactor:'2', collection.configName:schemaless, numShards:'2', stateFormat:'2', operation:create, property.prop1:prop1val, property.prop2:prop2val}");


    compareOutput(apiBag, "/collections", POST,
        "{create-alias:{name: aliasName , collections:[c1,c2] }}", null, "{operation : createalias, name: aliasName, collections:[c1,c2] }");

    compareOutput(apiBag, "/collections", POST,
        "{delete-alias:{ name: aliasName}}", null, "{operation : deletealias, name: aliasName}");

    compareOutput(apiBag, "/collections/collName", POST,
        "{reload:{}}", null,
        "{name:collName, operation :reload}");

    compareOutput(apiBag, "/collections/collName", DELETE,
        null, null,
        "{name:collName, operation :delete}");

    compareOutput(apiBag, "/collections/collName/shards/shard1", DELETE,
        null, null,
        "{collection:collName, shard: shard1 , operation :deleteshard }");

    compareOutput(apiBag, "/collections/collName/shards/shard1/replica1?deleteDataDir=true&onlyIfDown=true", DELETE,
        null, null,
        "{collection:collName, shard: shard1, replica :replica1 , deleteDataDir:'true', onlyIfDown: 'true', operation :deletereplica }");

    compareOutput(apiBag, "/collections/collName/shards", POST,
        "{split:{shard:shard1, ranges: '0-1f4,1f5-3e8,3e9-5dc', coreProperties : {prop1:prop1Val, prop2:prop2Val} }}", null,
        "{collection: collName , shard : shard1, ranges :'0-1f4,1f5-3e8,3e9-5dc', operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}"
    );

    compareOutput(apiBag, "/collections/collName/shards", POST,
        "{add-replica:{shard: shard1, node: 'localhost_8978' , coreProperties : {prop1:prop1Val, prop2:prop2Val} }}", null,
        "{collection: collName , shard : shard1, node :'localhost_8978', operation : addreplica, property.prop1:prop1Val, property.prop2: prop2Val}"
    );

    compareOutput(apiBag, "/collections/collName/shards", POST,
        "{split:{ splitKey:id12345, coreProperties : {prop1:prop1Val, prop2:prop2Val} }}", null,
        "{collection: collName , split.key : id12345 , operation : splitshard, property.prop1:prop1Val, property.prop2: prop2Val}"
    );

    compareOutput(apiBag, "/collections/collName", POST,
        "{add-replica-property : {name:propA , value: VALA, shard: shard1, replica:replica1}}", null,
        "{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : addreplicaprop, property.value : 'VALA'}"
    );

    compareOutput(apiBag, "/collections/collName", POST,
        "{delete-replica-property : {property: propA , shard: shard1, replica:replica1} }", null,
        "{collection: collName, shard: shard1, replica : replica1 , property : propA , operation : deletereplicaprop}"
    );

    compareOutput(apiBag, "/collections/collName", POST,
        "{modify : {rule : ['replica:*, cores:<5'], autoAddReplicas : false} }", null,
        "{collection: collName, operation : modifycollection , autoAddReplicas : 'false', rule : [{replica: '*', cores : '<5' }]}"
    );
    compareOutput(apiBag, "/cluster", POST,
        "{add-role : {role : overseer, node : 'localhost_8978'} }", null,
        "{operation : addrole ,role : overseer, node : 'localhost_8978'}"
    );

    compareOutput(apiBag, "/cluster", POST,
        "{remove-role : {role : overseer, node : 'localhost_8978'} }", null,
        "{operation : removerole ,role : overseer, node : 'localhost_8978'}"
    );

    compareOutput(apiBag, "/collections/coll1", POST,
        "{balance-shard-unique : {property: preferredLeader} }", null,
        "{operation : balanceshardunique ,collection : coll1, property : preferredLeader}"
    );

    compareOutput(apiBag, "/collections/coll1", POST,
        "{migrate-docs : {forwardTimeout: 1800, target: coll2, splitKey: 'a123!'} }", null,
        "{operation : migrate ,collection : coll1, target.collection:coll2, forward.timeout:1800, split.key:'a123!'}"
    );

  }

