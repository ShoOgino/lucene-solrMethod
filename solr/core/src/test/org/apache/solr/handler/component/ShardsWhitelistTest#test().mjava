  @Test
  public void test() throws Exception {
    assertThat(getShardHandlerFactory(EXPLICIT_CLUSTER_KEY).getWhitelistHostChecker().getWhitelistHosts(), notNullValue());
    assertThat(getShardHandlerFactory(IMPLICIT_CLUSTER_KEY).getWhitelistHostChecker().getWhitelistHosts(), nullValue());

    assertThat(getShardHandlerFactory(EXPLICIT_CLUSTER_KEY).getWhitelistHostChecker().hasExplicitWhitelist(), is(true));
    assertThat(getShardHandlerFactory(IMPLICIT_CLUSTER_KEY).getWhitelistHostChecker().hasExplicitWhitelist(), is(false));
    for (MiniSolrCloudCluster cluster : clusterId2cluster.values()) {
      for (JettySolrRunner runner : cluster.getJettySolrRunners()) {
        URI uri = runner.getBaseUrl().toURI();
        assertThat(getShardHandlerFactory(EXPLICIT_CLUSTER_KEY).getWhitelistHostChecker().getWhitelistHosts(),
            hasItem(uri.getHost() + ":" + uri.getPort()));
      }
    }

    MiniSolrCloudCluster implicitCluster = clusterId2cluster.get(IMPLICIT_CLUSTER_KEY);
    MiniSolrCloudCluster explicitCluster = clusterId2cluster.get(EXPLICIT_CLUSTER_KEY);

    for (Map.Entry<String,MiniSolrCloudCluster> entry : clusterId2cluster.entrySet()) {
      List<SolrInputDocument> docs = new ArrayList<>(10);
      for (int i = 0; i < 10; i++) {
        docs.add(new SolrInputDocument("id", entry.getKey() + i));
      }
      MiniSolrCloudCluster cluster = entry.getValue();
      cluster.getSolrClient().add(COLLECTION_NAME, docs);
      cluster.getSolrClient().commit(COLLECTION_NAME, true, true);

      // test using ClusterState elements
      assertThat("No shards specified, should work in both clusters",
          numDocs("*:*", null, cluster), is(10));
      assertThat("Both shards specified, should work in both clusters",
          numDocs("*:*", "shard1,shard2", cluster), is(10));
      assertThat("Both shards specified with collection name, should work in both clusters",
          numDocs("*:*", COLLECTION_NAME + "_shard1", cluster), is(numDocs("*:*", "shard1", cluster)));

      // test using explicit urls from within the cluster
      assertThat("Shards has the full URLs, should be allowed since they are internal. Cluster=" + entry.getKey(),
          numDocs("*:*", getShardUrl("shard1", cluster) + "," + getShardUrl("shard2", cluster), cluster), is(10));
      assertThat("Full URL without scheme",
          numDocs("*:*", getShardUrl("shard1", cluster).replaceAll("http://", "") + ","
              + getShardUrl("shard2", cluster).replaceAll("http://", ""), cluster),
          is(10));

      // Mix shards with URLs
      assertThat("Mix URL and cluster state object",
          numDocs("*:*", "shard1," + getShardUrl("shard2", cluster), cluster), is(10));
      assertThat("Mix URL and cluster state object",
          numDocs("*:*", getShardUrl("shard1", cluster) + ",shard2", cluster), is(10));
    }

    // explicit whitelist includes all the nodes in both clusters. Requests should be allowed to go through
    assertThat("A request to the explicit cluster with shards that point to the implicit one",
        numDocs(
            "id:implicitCluster*",
            getShardUrl("shard1", implicitCluster) + "," + getShardUrl("shard2", implicitCluster),
            explicitCluster),
        is(10));

    assertThat("A request to the explicit cluster with shards that point to the both clusters",
        numDocs(
            "*:*",
            getShardUrl("shard1", implicitCluster)
                + "," + getShardUrl("shard2", implicitCluster)
                + "," + getShardUrl("shard1", explicitCluster)
                + "," + getShardUrl("shard2", explicitCluster),
            explicitCluster),
        is(20));

    // Implicit shouldn't allow requests to the other cluster
    assertForbidden("id:explicitCluster*",
        getShardUrl("shard1", explicitCluster) + "," + getShardUrl("shard2", explicitCluster),
        implicitCluster);

    assertForbidden("id:explicitCluster*",
        "shard1," + getShardUrl("shard2", explicitCluster),
        implicitCluster);

    assertForbidden("id:explicitCluster*",
        getShardUrl("shard1", explicitCluster) + ",shard2",
        implicitCluster);

    assertForbidden("id:explicitCluster*",
        getShardUrl("shard1", explicitCluster),
        implicitCluster);

    assertThat("A typical internal request, should be handled locally",
        numDocs(
            "id:explicitCluster*",
            null,
            implicitCluster,
            "distrib", "false",
            "shard.url", getShardUrl("shard2", explicitCluster),
            "shards.purpose", "64",
            "isShard", "true"),
        is(0));
  }

