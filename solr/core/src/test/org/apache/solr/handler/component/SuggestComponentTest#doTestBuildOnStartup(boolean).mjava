  private void doTestBuildOnStartup(boolean createNewCores) throws Exception {
    
    final String suggesterFuzzy = "suggest_fuzzy_doc_dict";
    
    // the test relies on useColdSearcher=false
    assertFalse("Precondition not met for test. useColdSearcher must be false", 
        h.getCore().getSolrConfig().useColdSearcher);
    
    // validate that this suggester is not storing the lookup and buildOnStartup is not set
    assertEquals(suggesterFuzzy, 
        h.getCore().getSolrConfig().getVal("//searchComponent[@name='suggest']/lst[3]/str[@name='name']", false));
    assertNull(h.getCore().getSolrConfig().getVal("//searchComponent[@name='suggest']/lst[3]/str[@name='storeDir']", false));
    
    // assert that buildOnStartup=false
    assertEquals("false", 
        h.getCore().getSolrConfig().getVal("//searchComponent[@name='suggest']/lst[3]/str[@name='buildOnStartup']", false));
    assertEquals("true", 
        h.getCore().getSolrConfig().getVal("//searchComponent[@name='suggest']/lst[3]/str[@name='buildOnCommit']", false));
    
    // verify that this suggester is built (there was a commit in setUp)
    assertQ(req("qt", rh, 
        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, 
        SuggesterParams.SUGGEST_Q, "exampel",
        SuggesterParams.SUGGEST_COUNT, "5"),
        "//lst[@name='suggest']/lst[@name='" + suggesterFuzzy + "']/lst[@name='exampel']/int[@name='numFound'][.='2']"
        );
    
    // reload the core and wait for for the listeners to finish
    reloadCore(createNewCores);
    if (System.getProperty(SYSPROP_NIGHTLY) != null) {
      // wait some time here in nightly to make sure there are no race conditions in suggester build
      Thread.sleep(1000);
    }
    
    // The suggester should be empty
    assertQ(req("qt", rh, 
        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, 
        SuggesterParams.SUGGEST_Q, "exampel",
        SuggesterParams.SUGGEST_COUNT, "5"),
        "//lst[@name='suggest']/lst[@name='" + suggesterFuzzy + "']/lst[@name='exampel']/int[@name='numFound'][.='0']"
        );
    
    // build the suggester manually
    assertQ(req("qt", rh, 
        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, 
        SuggesterParams.SUGGEST_BUILD, "true"),
        "//str[@name='command'][.='build']"
        );
    
    // validate the suggester is built again
    assertQ(req("qt", rh, 
        SuggesterParams.SUGGEST_DICT, suggesterFuzzy, 
        SuggesterParams.SUGGEST_Q, "exampel",
        SuggesterParams.SUGGEST_COUNT, "5"),
        "//lst[@name='suggest']/lst[@name='" + suggesterFuzzy + "']/lst[@name='exampel']/int[@name='numFound'][.='2']"
        );
    
    final String suggestStartup = "suggest_fuzzy_doc_dict_build_startup";
    
    // repeat the test with "suggest_fuzzy_doc_dict_build_startup", it is exactly the same but with buildOnStartup=true
    assertEquals(suggestStartup, 
        h.getCore().getSolrConfig().getVal("//searchComponent[@name='suggest']/lst[5]/str[@name='name']", false));
    assertNull(h.getCore().getSolrConfig().getVal("//searchComponent[@name='suggest']/lst[5]/str[@name='storeDir']", false));
    assertEquals("true", 
        h.getCore().getSolrConfig().getVal("//searchComponent[@name='suggest']/lst[5]/str[@name='buildOnStartup']", false));
    assertEquals("false", 
        h.getCore().getSolrConfig().getVal("//searchComponent[@name='suggest']/lst[5]/str[@name='buildOnCommit']", false));
    
    // reload the core
    reloadCore(createNewCores);
    // verify that this suggester is built (should build on startup)
    assertQ(req("qt", rh, 
        SuggesterParams.SUGGEST_DICT, suggestStartup, 
        SuggesterParams.SUGGEST_Q, "exampel",
        SuggesterParams.SUGGEST_COUNT, "5"),
        "//lst[@name='suggest']/lst[@name='" + suggestStartup + "']/lst[@name='exampel']/int[@name='numFound'][.='2']"
        );
    
    // add one more doc, this should not be seen without rebuilding manually or reloading the core (buildOnCommit=false)
    assertU(adoc("id", "10", "cat", "example data extra ", "price", "40", "weight", "35"));
    assertU((commit()));
    
    waitForWarming();

    assertQ(req("qt", rh, 
        SuggesterParams.SUGGEST_DICT, suggestStartup, 
        SuggesterParams.SUGGEST_Q, "exampel",
        SuggesterParams.SUGGEST_COUNT, "5"),
        "//lst[@name='suggest']/lst[@name='" + suggestStartup + "']/lst[@name='exampel']/int[@name='numFound'][.='2']"
        );
    
    // build the suggester manually
    assertQ(req("qt", rh, 
        SuggesterParams.SUGGEST_DICT, suggestStartup, 
        SuggesterParams.SUGGEST_BUILD, "true"),
        "//str[@name='command'][.='build']"
        );
    
    assertQ(req("qt", rh, 
        SuggesterParams.SUGGEST_DICT, suggestStartup, 
        SuggesterParams.SUGGEST_Q, "exampel",
        SuggesterParams.SUGGEST_COUNT, "5"),
        "//lst[@name='suggest']/lst[@name='" + suggestStartup + "']/lst[@name='exampel']/int[@name='numFound'][.='3']"
        );
  }

