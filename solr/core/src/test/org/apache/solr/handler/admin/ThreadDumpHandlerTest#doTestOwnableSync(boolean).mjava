  public void doTestOwnableSync(final boolean checkWaitingThreadViaPolling) throws Exception {
    assumeTrue("ownable sync checking not supported on this JVM",
               ManagementFactory.getThreadMXBean().isSynchronizerUsageSupported());

    /** unique class name to show up as a lock class name in output */
    final class TestReentrantLockStruct extends ReentrantLock { /* empty */ }
    
    final List<String> failures = new ArrayList<>();
    final CountDownLatch lockIsHeldLatch = new CountDownLatch(1);
    final CountDownLatch doneWithTestLatch = new CountDownLatch(1);
    final ReentrantLock lock = new ReentrantLock();
    final Thread ownerT = new Thread(() -> {
        lock.lock();
        try {
          lockIsHeldLatch.countDown();
          log.info("lock ownerT waiting for doneWithTestLatch to release me...");
          try {
            if ( ! doneWithTestLatch.await(5, TimeUnit.SECONDS ) ){
              failures.add("ownerT: never saw doneWithTestLatch release");
            }
          } catch (InterruptedException ie) {
            failures.add("ownerT: " + ie.toString());
          }
        } finally {
          lock.unlock();
        }
      }, "test-thread-sync-lock-owner");

    // only used if checkWaitingThreadViaPolling
    // don't start until after lockIsHeldLatch fires
    final Thread blockedT = new Thread(() -> { 
        log.info("blockedT waiting for lock...");
        lock.lock();
        try {
          log.info("lock now unblocked");
        } finally {
          lock.unlock();
        }
      }, "test-thread-sync-lock-blocked");
    try {
      ownerT.start();
      if ( ! lockIsHeldLatch.await(30, TimeUnit.SECONDS ) ){
        failures.add("never saw lockIsHeldLatch released");
        return;
      }
      assertQ(req("qt", "/admin/threads", "indent", "true")
              // lock owner 'ownerT'
              // (which *MAY* also be waiting on doneWithTestLatch, but may not have reached that line yet)
              , "//lst[@name='thread'][str[@name='name'][.='test-thread-sync-lock-owner']]"
              + "                     [arr[@name='synchronizers-locked']/str[contains(.,'ReentrantLock')]]"
              );
      
      if (checkWaitingThreadViaPolling) {
        log.info("Also checking with blockedT thread setup via polling...");
        try {
          blockedT.setPriority(Thread.MAX_PRIORITY);
        } catch (Exception e) {
          log.warn("Couldn't set blockedT priority", e);
        }
        blockedT.start();
        // there is no way to "await" on the situation of the 'blockedT' thread actually reaches the lock()
        // call and WAITING in the queue ... we just have to Poll for it...
        for (int i = 0; i < 500 && (! lock.hasQueuedThread(blockedT)); i++) {
          Thread.sleep(10); // 10ms at a time, at most 5 sec total
        }
        if (lock.hasQueuedThread(blockedT)) {
          assertQ(req("qt", "/admin/threads", "indent", "true")
                  // same lock owner 'ownerT'
                  , "//lst[@name='thread'][str[@name='name'][.='test-thread-sync-lock-owner']]"
                  + "                     [arr[@name='synchronizers-locked']/str[contains(.,'ReentrantLock')]]"
                  // blocked thread 'blockedT', waiting on the lock
                  , "//lst[@name='thread'][str[@name='name'][.='test-thread-sync-lock-blocked']]"
                  + "                     [str[@name='state'][.='WAITING']]"
                  + "                     [lst[@name='lock-waiting'][lst[@name='owner']/str[.='test-thread-sync-lock-owner']]]"
                  );
          
        }
      }
    } finally {
      lockIsHeldLatch.countDown();
      doneWithTestLatch.countDown();
      ownerT.join(1000);
      assertFalse("ownerT is still alive", ownerT.isAlive());
      blockedT.join(1000);
      assertFalse("blockedT is still alive", blockedT.isAlive());
    }
  }

