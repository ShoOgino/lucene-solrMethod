  private void testBasicGrouping() throws Exception {
    try {

      CloudJettyRunner jetty = this.cloudJettys.get(0);

      del("*:*");

      commit();

      indexr("id", "1", "text", "XXXX XXXX", "str_s", "a", "field_i", "7");
      indexr("id", "2", "text", "XXXX XXXX", "str_s", "b", "field_i", "8");
      indexr("id", "3", "text", "XXXX XXXX", "str_s", "a", "field_i", "20");
      indexr("id", "4", "text", "XXXX XXXX", "str_s", "b", "field_i", "11");
      indexr("id", "5", "text", "XXXX XXXX", "str_s", "c", "field_i", "30");
      indexr("id", "6", "text", "XXXX XXXX", "str_s", "c", "field_i", "40");
      indexr("id", "7", "text", "XXXX XXXX", "str_s", "c", "field_i", "50");
      indexr("id", "8", "text", "XXXX XXXX", "str_s", "c", "field_i", "60");
      indexr("id", "9", "text", "XXXX XXXY", "str_s", "d", "field_i", "70");
      commit();

      SolrParams sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
        "stmt", "select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s order by sum(field_i) asc limit 2");

      SolrStream solrStream = new SolrStream(jetty.url, sParams);
      List<Tuple> tuples = getTuples(solrStream);

      //Only two results because of the limit.
      assert(tuples.size() == 2);
      Tuple tuple;

      tuple = tuples.get(0);
      assert(tuple.get("str_s").equals("b"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("EXPR$2") == 19); //sum(field_i)
      assert(tuple.getDouble("EXPR$3") == 8); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 11); //max(field_i)
      assert(tuple.getDouble("EXPR$5") == 10); //avg(field_i)

      tuple = tuples.get(1);
      assert(tuple.get("str_s").equals("a"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("EXPR$2") == 27); //sum(field_i)
      assert(tuple.getDouble("EXPR$3") == 7); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 20); //max(field_i)
      assert(tuple.getDouble("EXPR$5") == 14); //avg(field_i)


      sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
          "stmt", "select str_s, count(*), sum(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) as blah from collection1 where text='XXXX' group by str_s order by sum(field_i) asc limit 2");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      //Only two results because of the limit.
      assert(tuples.size() == 2);

      tuple = tuples.get(0);
      assert(tuple.get("str_s").equals("b"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("EXPR$2") == 19); //sum(field_i)
      assert(tuple.getDouble("EXPR$3") == 8); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 11); //max(field_i)
      assert(tuple.getDouble("blah") == 9.5); //avg(field_i)

      tuple = tuples.get(1);
      assert(tuple.get("str_s").equals("a"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("EXPR$2") == 27); //sum(field_i)
      assert(tuple.getDouble("EXPR$3") == 7); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 20); //max(field_i)
      assert(tuple.getDouble("blah") == 13.5); //avg(field_i)

      sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
          "stmt", "select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), avg(field_i)  from collection1 where text='XXXX' group by str_s order by mySum asc limit 2");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      //Only two results because of the limit.
      assert(tuples.size() == 2);

      tuple = tuples.get(0);
      assert(tuple.get("myString").equals("b"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("mySum") == 19);
      assert(tuple.getDouble("EXPR$3") == 8); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 11); //max(field_i)
      assert(tuple.getDouble("EXPR$5") == 10); //avg(field_i)

      tuple = tuples.get(1);
      assert(tuple.get("myString").equals("a"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("mySum") == 27);
      assert(tuple.getDouble("EXPR$3") == 7); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 20); //max(field_i)
      assert(tuple.getDouble("EXPR$5") == 14); //avg(field_i)

      sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
        "stmt", "select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
          + "avg(field_i) from collection1 where (text='XXXX' AND NOT ((text='XXXY') AND (text='XXXY' OR text='XXXY'))) "
          + "group by str_s order by str_s desc");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      //The sort by and order by match and no limit is applied. All the Tuples should be returned in
      //this scenario.

      assert(tuples.size() == 3);

      tuple = tuples.get(0);
      assert(tuple.get("str_s").equals("c"));
      assert(tuple.getDouble("EXPR$1") == 4); //count(*)
      assert(tuple.getDouble("EXPR$2") == 180); //sum(field_i)
      assert(tuple.getDouble("EXPR$3") == 30); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 60); //max(field_i)
      assert(tuple.getDouble("EXPR$5") == 45); //avg(field_i)

      tuple = tuples.get(1);
      assert(tuple.get("str_s").equals("b"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("EXPR$2") == 19); //sum(field_i)
      assert(tuple.getDouble("EXPR$3") == 8); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 11); //max(field_i)
      assert(tuple.getDouble("EXPR$5") == 10D); //avg(field_i)

      tuple = tuples.get(2);
      assert(tuple.get("str_s").equals("a"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("EXPR$2") == 27); //sum(field_i)
      assert(tuple.getDouble("EXPR$3") == 7); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 20); //max(field_i)

      assert(tuple.getDouble("EXPR$5") == 14); //avg(field_i)

      sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
          "stmt", "select str_s as myString, count(*) as myCount, sum(field_i) as mySum, min(field_i) as myMin, "
          + "max(field_i) as myMax, avg(field_i) as myAvg from collection1 "
          + "where (text='XXXX' AND NOT (text='XXXY')) group by str_s order by str_s desc");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      //The sort by and order by match and no limit is applied. All the Tuples should be returned in
      //this scenario.

      assert(tuples.size() == 3);

      tuple = tuples.get(0);
      assert(tuple.get("myString").equals("c"));
      assert(tuple.getDouble("myCount") == 4);
      assert(tuple.getDouble("mySum") == 180);
      assert(tuple.getDouble("myMin") == 30);
      assert(tuple.getDouble("myMax") == 60);
      assert(tuple.getDouble("myAvg") == 45);

      tuple = tuples.get(1);
      assert(tuple.get("myString").equals("b"));
      assert(tuple.getDouble("myCount") == 2);
      assert(tuple.getDouble("mySum") == 19);
      assert(tuple.getDouble("myMin") == 8);
      assert(tuple.getDouble("myMax") == 11);
      assert(tuple.getDouble("myAvg") == 10);

      tuple = tuples.get(2);
      assert(tuple.get("myString").equals("a"));
      assert(tuple.getDouble("myCount") == 2);
      assert(tuple.getDouble("mySum") == 27);
      assert(tuple.getDouble("myMin") == 7);
      assert(tuple.getDouble("myMax") == 20);
      assert(tuple.getDouble("myAvg") == 14);

      sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
          "stmt", "select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) " +
          "from collection1 where text='XXXX' group by str_s having sum(field_i) = 19");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 1);

      tuple = tuples.get(0);
      assert(tuple.get("str_s").equals("b"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("EXPR$2") == 19); //sum(field_i)
      assert(tuple.getDouble("EXPR$3") == 8); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 11); //max(field_i)
      assert(tuple.getDouble("EXPR$5") == 10); //avg(field_i)

      sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
          "stmt", "select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) " +
          "from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 1);

      tuple = tuples.get(0);
      assert(tuple.get("str_s").equals("b"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("EXPR$2") == 19); //sum(field_i)
      assert(tuple.getDouble("EXPR$3") == 8); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 11); //max(field_i)
      assert(tuple.getDouble("EXPR$5") == 10); //avg(field_i)

      sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
          "stmt", "select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), " +
          "avg(field_i) from collection1 where text='XXXX' group by str_s " +
          "having ((sum(field_i) = 19) AND (min(field_i) = 8))");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 1);

      tuple = tuples.get(0);
      assert(tuple.get("str_s").equals("b"));
      assert(tuple.getDouble("EXPR$1") == 2); //count(*)
      assert(tuple.getDouble("mySum") == 19);
      assert(tuple.getDouble("EXPR$3") == 8); //min(field_i)
      assert(tuple.getDouble("EXPR$4") == 11); //max(field_i)
      assert(tuple.getDouble("EXPR$5") == 10); //avg(field_i)

      sParams = mapParams(CommonParams.QT, "/sql", "aggregationMode", "map_reduce",
          "stmt", "select str_s, count(*), sum(field_i), min(field_i), max(field_i), " +
          "avg(field_i) from collection1 where text='XXXX' group by str_s " +
          "having ((sum(field_i) = 19) AND (min(field_i) = 100))");

      solrStream = new SolrStream(jetty.url, sParams);
      tuples = getTuples(solrStream);

      assert(tuples.size() == 0);
    } finally {
      delete();
    }
  }

