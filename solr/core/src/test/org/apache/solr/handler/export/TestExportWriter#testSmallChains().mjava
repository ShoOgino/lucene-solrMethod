  @Test
  public void testSmallChains() throws Exception {
    clearIndex();

    assertU(adoc("id","1",
        "field1_i_p",Integer.toString(Integer.MIN_VALUE),
        "field2_i_p","1"));
    assertU(commit());

    assertU(adoc("id","2",
        "field1_i_p",Integer.toString(Integer.MIN_VALUE),
        "field2_i_p",Integer.toString(Integer.MIN_VALUE + 1)));
    assertU(commit());

    assertU(adoc("id","3",
        "field1_i_p",Integer.toString(Integer.MIN_VALUE),
        "field2_i_p",Integer.toString(Integer.MIN_VALUE)));
    assertU(commit());

    //Test single value DocValue output
    //Expected for asc sort doc3 -> doc2 -> doc1
    String s =  h.query(req("q", "*:*", "qt", "/export", "fl", "id", "sort", "field1_i_p asc,field2_i_p asc"));
    assertJsonEquals(s, "{\n" +
        "  \"responseHeader\":{\"status\":0},\n" +
        "  \"response\":{\n" +
        "    \"numFound\":3,\n" +
        "    \"docs\":[{\n" +
        "        \"id\":\"3\"}\n" +
        "      ,{\n" +
        "        \"id\":\"2\"}\n" +
        "      ,{\n" +
        "        \"id\":\"1\"}]}}");

    clearIndex();
    //Adding 3 docs of integers with the following values
    //  doc1: Integer.MIN_VALUE,1,2,Integer.MAX_VALUE,3,4,5,6
    //  doc2: Integer.MIN_VALUE,Integer.MIN_VALUE,2,Integer.MAX_VALUE,4,4,5,6
    //  doc3: Integer.MIN_VALUE,Integer.MIN_VALUE,2,Integer.MAX_VALUE,3,4,5,6

    assertU(adoc("id","1",
        "field1_i_p",Integer.toString(Integer.MIN_VALUE),
        "field2_i_p","1",
        "field3_i_p","2",
        "field4_i_p",Integer.toString(Integer.MAX_VALUE),
        "field5_i_p","3",
        "field6_i_p","4",
        "field7_i_p","5",
        "field8_i_p","6"));
    assertU(commit());

    assertU(adoc("id","2",
        "field1_i_p",Integer.toString(Integer.MIN_VALUE),
        "field2_i_p",Integer.toString(Integer.MIN_VALUE),
        "field3_i_p","2",
        "field4_i_p",Integer.toString(Integer.MAX_VALUE),
        "field5_i_p","4",
        "field6_i_p","4",
        "field7_i_p","5",
        "field8_i_p","6"));
    assertU(commit());

    assertU(adoc("id","3",
        "field1_i_p",Integer.toString(Integer.MIN_VALUE),
        "field2_i_p",Integer.toString(Integer.MIN_VALUE),
        "field3_i_p","2",
        "field4_i_p",Integer.toString(Integer.MAX_VALUE),
        "field5_i_p","3",
        "field6_i_p","4",
        "field7_i_p","5",
        "field8_i_p","6"));
    assertU(commit());

    s =  h.query(req("q", "*:*", "qt", "/export", "fl", "id", "sort", "field1_i_p asc,field2_i_p asc,field3_i_p asc,field4_i_p asc,field5_i_p desc,field6_i_p desc,field7_i_p desc,field8_i_p asc"));
    assertJsonEquals(s, "{\n" +
        "  \"responseHeader\":{\"status\":0},\n" +
        "  \"response\":{\n" +
        "    \"numFound\":3,\n" +
        "    \"docs\":[{\n" +
        "        \"id\":\"2\"}\n" +
        "      ,{\n" +
        "        \"id\":\"3\"}\n" +
        "      ,{\n" +
        "        \"id\":\"1\"}]}}");

  }

