//  @AwaitsFix(bugUrl = "https://issues.apache.org/jira/browse/SOLR-13650")
  public void testCacheLoadFromPackage() throws Exception {
    String COLLECTION_NAME = "globalCacheColl";
    Map<String, Object> jars = Utils.makeMap(
        "/jar1.jar", getFileContent("runtimecode/cache.jar.bin"),
        "/jar2.jar", getFileContent("runtimecode/cache_v2.jar.bin"));

    Pair<Server, Integer> server = runHttpServer(jars);
    int port = server.second();

    String overlay = "{" +
        "    \"props\":{\"query\":{\"documentCache\":{\n" +
        "          \"class\":\"org.apache.solr.core.MyDocCache\",\n" +
        "          \"size\":\"512\",\n" +
        "          \"initialSize\":\"512\" , \"package\":\"cache_pkg\"}}}}";
    MiniSolrCloudCluster cluster = configureCluster(4)
        .addConfig("conf", configset("cloud-minimal"),
            Collections.singletonMap(ConfigOverlay.RESOURCE_NAME, overlay.getBytes(UTF_8)))
        .configure();
    try {
      String payload = "{add-package:{name : 'cache_pkg', url: 'http://localhost:" + port + "/jar1.jar', " +
          "sha256 : '32e8b5b2a95ea306538b52017f0954aa1b0f8a8b2d0acbc498fd0e66a223f7bd'}}";

      new V2Request.Builder("/cluster")
          .withPayload(payload)
          .withMethod(SolrRequest.METHOD.POST)
          .build().process(cluster.getSolrClient());
      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, "add-package/sha256"),
          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, "package/cache_pkg/sha256"));

      CollectionAdminRequest
          .createCollection(COLLECTION_NAME, "conf", 2, 1)
          .setMaxShardsPerNode(100)
          .process(cluster.getSolrClient());


      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);
      SolrParams params = new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME, WT, JAVABIN));

      NamedList<Object> rsp = cluster.getSolrClient().request(new GenericSolrRequest(SolrRequest.METHOD.GET, "/config/overlay", params));
      assertEquals("org.apache.solr.core.MyDocCache", rsp._getStr("overlay/props/query/documentCache/class", null));

      String sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, "add-package/sha256");
      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, "add-package/url");


      params = new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME,
          WT, JAVABIN,
          "meta","true"));

      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/config/query/documentCache", params),
          Utils.makeMap(
              "/config/query/documentCache/_packageinfo_/url", url,
              "/config/query/documentCache/_packageinfo_/sha256", sha256
          ));


      UpdateRequest req = new UpdateRequest();

      req.add("id", "1", "desc_s", "document 1")
          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)
          .setWaitSearcher(true);
      cluster.getSolrClient().request(req, COLLECTION_NAME);

      SolrQuery solrQuery = new SolrQuery("q", "id:1", "collection", COLLECTION_NAME);
      assertResponseValues(10,
          cluster.getSolrClient(),
          new QueryRequest(solrQuery),
          Utils.makeMap("/response[0]/my_synthetic_fld_s", "version_1"));


      payload = "{update-package:{name : 'cache_pkg', url: 'http://localhost:" + port + "/jar2.jar', " +
          "sha256 : '0f670f6dcc2b00f9a448a7ebd457d4ff985ab702c85cdb3608dcae9889e8d702'}}";
      new V2Request.Builder("/cluster")
          .withPayload(payload)
          .withMethod(SolrRequest.METHOD.POST)
          .build().process(cluster.getSolrClient());
      sha256 = (String) getObjectByPath(Utils.fromJSONString(payload), true, "update-package/sha256");
      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, "update-package/url");
      assertEquals(getObjectByPath(Utils.fromJSONString(payload), true, "update-package/sha256"),
          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, "package/cache_pkg/sha256"));

      params = new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME,
          WT, JAVABIN,
          "meta","true"));

      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/config/query/documentCache", params),
          Utils.makeMap(
              "/config/query/documentCache/_packageinfo_/url", url,
              "/config/query/documentCache/_packageinfo_/sha256", sha256
          ));
      req = new UpdateRequest();
      req.add("id", "2", "desc_s", "document 1")
          .setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true)
          .setWaitSearcher(true);
      cluster.getSolrClient().request(req, COLLECTION_NAME);


      solrQuery = new SolrQuery("q", "id:2", "collection", COLLECTION_NAME);
      SolrResponse result = assertResponseValues(10,
          cluster.getSolrClient(),
          new QueryRequest(solrQuery),
          Utils.makeMap("response[0]/my_synthetic_fld_s", "version_2"));

    } finally {
      cluster.deleteAllCollections();
      cluster.shutdown();
      server.first().stop();
    }
  }

