  /**
   * Does a single check of the replication handler's status to determine if the specified name matches 
   * the most recently deleted backup, and if deleting that backup was a success.
   * Throws a test assertion failure if the status is about this backupName but the starts message 
   * with <code>"Unable to delete"</code>
   *
   * @returns true if the replication status info indicates the backup was deleted, false otherwise
   * @see #waitForBackupDeletionSuccess(String,TimeOut)
   */
  public boolean checkBackupDeletionSuccess(final String backupName) throws Exception {
    assertNotNull("backumpName must not be null", backupName);
    final SimpleSolrResponse rsp = new GenericSolrRequest(GenericSolrRequest.METHOD.GET, path,
                                                          params("command", "details")).process(client);
    final NamedList data = rsp.getResponse();
    log.info("Checking Deletion Status of {}: {}", backupName, data);
    final NamedList<String> backupData = (NamedList<String>) data.findRecursive("details","backup");
    if (null == backupData
        || null == backupData.get("status")
        || ! backupName.equals(backupData.get("snapshotName")) ) {
      // either no backup activity at all,
      // or most recent activity isn't something we can infer anything from,
      // or is not about the backup we care about...
      return false;
    }
    
    final Object status = backupData.get("status");
    if (status.toString().startsWith("Unable to delete")) {
      // we already know backupData is about our backup
      assertNull("Backup Deleting failure: " + backupName, status);
    }

    if ("success".equals(status) && null != backupData.get("snapshotDeletedAt")) {
      return true; // backup done
    }
    
    // if we're still here then this status is about our backup, but doesn't seem to be a deletion
    return false;
  }

