  /**
   * Polls the replication handler's status until the it reports that the specified backupName is
   * completed as a <code>"success"</code> (in which case the method returns the directoryName of the backup)
   * or either <code>"exception"</code> is reported or the <code>timeOut</code> expires 
   * (in either case an assertion is thrown)
   * 
   * <p>
   * <b>NOTE:</b> this method is <em>NOT</em> suitable/safe to use in a test where multiple backups are 
   * being taken/deleted concurrently, because the replication handler API provides no reliable way to check
   * the results of a specific backup before the results of another backup may overwrite them internally.
   * </p>
   * 
   * @param backupName to look for
   * @param timeOut limiting how long we wait
   * @return the (new) directoryName of the specified backup
   * @see #checkBackupSuccess(String)
   */
  public String waitForBackupSuccess(final String backupName, final TimeOut timeOut) throws Exception {
    assertNotNull("backupName must not be null", backupName);
    while (!timeOut.hasTimedOut()) {
      final String newDirName = checkBackupSuccess(backupName);
      if (null != newDirName) {
        return newDirName;
      }
      timeOut.sleep(50);
    }
    
    // total TimeOut elapsed, so one last check or fail whole test.
    final String newDirName = checkBackupSuccess(backupName);
    assertNotNull(backupName + " did not succeed before the TimeOut elapsed",
                  newDirName);
    return newDirName;
  }

