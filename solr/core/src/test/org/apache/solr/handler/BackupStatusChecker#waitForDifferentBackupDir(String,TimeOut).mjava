  /**
   * Polls the replication handler's status until the it reports that <em>any</em> backup has
   * completed as a <code>"success"</code> with a different <code>"directoryName"</code> then the 
   * one specified (in which case the method returns the new directoryName) or either an
   * <code>"exception"</code> is reported or the <code>timeOut</code> expires 
   * (in either case an assertion is thrown)
   *
   * <p>
   * <b>NOTE:</b> this method is <em>NOT</em> suitable/safe to use in a test where multiple backups are 
   * being taken/deleted concurrently, because the replication handler API provides no reliable way to determine 
   * if the the most recently reported status to the a particular backup request.
   * </p>
   * 
   * @param directoryName to compare to, may be null
   * @param timeOut limiting how long we wait
   * @return the (new) directoryName of the latests successful backup
   * @see #checkBackupSuccess()
   */
  public String waitForDifferentBackupDir(final String directoryName, final TimeOut timeOut) throws Exception {
    while (!timeOut.hasTimedOut()) {
      final String newDirName = checkBackupSuccess();
      if (null != newDirName && ! newDirName.equals(directoryName)) {
        return newDirName;
      }
      timeOut.sleep(50);
    }
    
    // total TimeOut elapsed, so one last check or fail whole test...
    final String newDirName = checkBackupSuccess();
    assertTrue("No successful backup with different directoryName then "
               + directoryName + " before TimeOut elapsed",
               (null != newDirName && ! newDirName.equals(directoryName)));
    return newDirName;
  }

