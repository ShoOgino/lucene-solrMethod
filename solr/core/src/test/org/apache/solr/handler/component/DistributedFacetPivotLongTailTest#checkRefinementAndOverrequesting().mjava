  private void checkRefinementAndOverrequesting() throws Exception {
    // if we disable overrequesting, we don't find the long tail
    List<PivotField> pivots = null;
    PivotField pivot = null;
    pivots = queryServer( params( "q", "*:*",
                                  "shards", getShardsString(),
                                  FacetParams.FACET_OVERREQUEST_COUNT, "0",
                                  FacetParams.FACET_OVERREQUEST_RATIO, "0",
                                  "facet", "true",
                                  "facet.limit", "6",
                                  "facet.pivot", "{!stats=sxy}foo_s,bar_s",
                                  "stats", "true",
                                  "stats.field", "{!tag=sxy}" + STAT_FIELD)
                          ).getFacetPivot().get("foo_s,bar_s");
    assertEquals(6, pivots.size());
    for (int i = 0; i < 5; i++) {
      pivot = pivots.get(i);
      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith("aaa"));
      assertEquals(pivot.toString(), 300, pivot.getCount());
    }
    { // even w/o the long tail, we should have still asked shard2 to refine bbb0
      pivot = pivots.get(5);
      assertTrue(pivot.toString(), pivot.getValue().equals("bbb0"));
      assertEquals(pivot.toString(), 101, pivot.getCount());
      // basic check of refined stats
      FieldStatsInfo bbb0Stats = pivot.getFieldStatsInfo().get(STAT_FIELD);
      assertEquals(STAT_FIELD, bbb0Stats.getName());
      assertEquals(-2.0, bbb0Stats.getMin());
      assertEquals(1.0, bbb0Stats.getMax());
      assertEquals(101, (long) bbb0Stats.getCount());
      assertEquals(0, (long) bbb0Stats.getMissing());
      assertEquals(48.0, bbb0Stats.getSum());
      assertEquals(0.475247524752475, (double) bbb0Stats.getMean(), 0.1E-7);
      assertEquals(54.0, bbb0Stats.getSumOfSquares(), 0.1E-7);
      assertEquals(0.55846323792, bbb0Stats.getStddev(), 0.1E-7);
    }


    // with default overrequesting, we should find the correct top 6 including 
    // long tail and top sub-pivots
    // (even if we disable overrequesting on the sub-pivot)
    for (ModifiableSolrParams q : new ModifiableSolrParams[] { 
        params(),
        params("f.bar_s.facet.overrequest.ratio","0",
               "f.bar_s.facet.overrequest.count","0")      }) {
      
      q.add( params( "q", "*:*",
                     "shards", getShardsString(),
                     "facet", "true",
                     "facet.limit", "6",
                     "facet.pivot", "foo_s,bar_s" ));
      pivots = queryServer( q ).getFacetPivot().get("foo_s,bar_s");
        
      assertEquals(6, pivots.size());
      for (int i = 0; i < 5; i++) {
        pivot = pivots.get(i);
        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith("aaa"));
        assertEquals(pivot.toString(), 300, pivot.getCount());
      }
      pivot = pivots.get(5);
      assertEquals(pivot.toString(), "tail", pivot.getValue());
      assertEquals(pivot.toString(), 135, pivot.getCount());
      // check the sub pivots
      pivots = pivot.getPivot();
      assertEquals(6, pivots.size());
      pivot = pivots.get(0);
      assertEquals(pivot.toString(), "tailB", pivot.getValue());
      assertEquals(pivot.toString(), 17, pivot.getCount());
      for (int i = 1; i < 6; i++) { // ccc(0-4)
        pivot = pivots.get(i);
        assertTrue(pivot.toString(), pivot.getValue().toString().startsWith("ccc"));
        assertEquals(pivot.toString(), 14, pivot.getCount());
      }
    }

    // if we lower the facet.limit on the sub-pivot, overrequesting should still ensure 
    // that we get the correct top5 including "tailB"

    pivots = queryServer( params( "q", "*:*",
                                  "shards", getShardsString(),
                                  "facet", "true",
                                  "facet.limit", "6",
                                  "f.bar_s.facet.limit", "5",
                                  "facet.pivot", "foo_s,bar_s" )
                          ).getFacetPivot().get("foo_s,bar_s");
    assertEquals(6, pivots.size());
    for (int i = 0; i < 5; i++) {
      pivot = pivots.get(i);
      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith("aaa"));
      assertEquals(pivot.toString(), 300, pivot.getCount());
    }
    pivot = pivots.get(5);
    assertEquals(pivot.toString(), "tail", pivot.getValue());
    assertEquals(pivot.toString(), 135, pivot.getCount());
    // check the sub pivots
    pivots = pivot.getPivot();
    assertEquals(5, pivots.size());
    pivot = pivots.get(0);
    assertEquals(pivot.toString(), "tailB", pivot.getValue());
    assertEquals(pivot.toString(), 17, pivot.getCount());
    for (int i = 1; i < 5; i++) { // ccc(0-3)
      pivot = pivots.get(i);
      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith("ccc"));
      assertEquals(pivot.toString(), 14, pivot.getCount());
    }

    // however with a lower limit and overrequesting disabled, 
    // we're going to miss out on tailB

    pivots = queryServer( params( "q", "*:*",
                                  "shards", getShardsString(),
                                  "facet", "true",
                                  "facet.limit", "6",
                                  "f.bar_s.facet.overrequest.ratio", "0",
                                  "f.bar_s.facet.overrequest.count", "0",
                                  "f.bar_s.facet.limit", "5",
                                  "facet.pivot", "foo_s,bar_s" )
                          ).getFacetPivot().get("foo_s,bar_s");
    assertEquals(6, pivots.size());
    for (int i = 0; i < 5; i++) {
      pivot = pivots.get(i);
      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith("aaa"));
      assertEquals(pivot.toString(), 300, pivot.getCount());
    }
    pivot = pivots.get(5);
    assertEquals(pivot.toString(), "tail", pivot.getValue());
    assertEquals(pivot.toString(), 135, pivot.getCount());
    // check the sub pivots
    pivots = pivot.getPivot();
    assertEquals(5, pivots.size());
    for (int i = 0; i < 5; i++) { // ccc(0-4)
      pivot = pivots.get(i);
      assertTrue(pivot.toString(), pivot.getValue().toString().startsWith("ccc"));
      assertEquals(pivot.toString(), 14, pivot.getCount());
    }

  }

