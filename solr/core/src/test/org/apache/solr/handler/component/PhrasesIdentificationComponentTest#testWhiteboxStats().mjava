  public void testWhiteboxStats() throws Exception {
    final SchemaField analysisField = h.getCore().getLatestSchema().getField("multigrams_body");
    assertNotNull(analysisField);
    final String input = "BROWN fox lAzY  dog xxxyyyzzz";

    // a function we'll re-use on phrases generated from the above input
    // the multiplier let's us simulate multiple shards returning the same values
    BiConsumer<Integer,List<Phrase>> assertions = (mult, phrases) -> {
      final Phrase brown_fox = phrases.get(1);
      assertEquals("BROWN fox", brown_fox.getSubSequence());
      
      assertEquals(mult * 1, brown_fox.getTTF("multigrams_title"));
      assertEquals(mult * 1, brown_fox.getDocFreq("multigrams_title"));
      assertEquals(mult * 1, brown_fox.getConjunctionDocCount("multigrams_title"));
      
      assertEquals(mult * 3, brown_fox.getTTF("multigrams_body"));
      assertEquals(mult * 2, brown_fox.getDocFreq("multigrams_body"));
      assertEquals(mult * 2, brown_fox.getConjunctionDocCount("multigrams_body"));
      
      final Phrase fox_lazy = phrases.get(6);
      assertEquals("fox lAzY", fox_lazy.getSubSequence());
      
      assertEquals(mult * 0, fox_lazy.getTTF("multigrams_title"));
      assertEquals(mult * 0, fox_lazy.getDocFreq("multigrams_title"));
      assertEquals(mult * 1, fox_lazy.getConjunctionDocCount("multigrams_title"));
      
      assertEquals(mult * 0, fox_lazy.getTTF("multigrams_body"));
      assertEquals(mult * 0, fox_lazy.getDocFreq("multigrams_body"));
      assertEquals(mult * 2, fox_lazy.getConjunctionDocCount("multigrams_body"));
      
      final Phrase bfld = phrases.get(3);
      assertEquals("BROWN fox lAzY  dog", bfld.getSubSequence());
      
      expectThrows(SolrException.class, () -> { bfld.getTTF("multigrams_title"); });
      expectThrows(SolrException.class, () -> { bfld.getDocFreq("multigrams_title"); });
      assertEquals(mult * 0, bfld.getConjunctionDocCount("multigrams_title"));
      
      expectThrows(SolrException.class, () -> { bfld.getTTF("multigrams_body"); });
      expectThrows(SolrException.class, () -> { bfld.getDocFreq("multigrams_body"); });
      assertEquals(mult * 1, bfld.getConjunctionDocCount("multigrams_body"));
      
      final Phrase xyz = phrases.get(phrases.size()-1);
      
      assertEquals("xxxyyyzzz", xyz.getSubSequence());
      assertEquals(mult * 0, xyz.getTTF("multigrams_title"));
      assertEquals(mult * 0, xyz.getDocFreq("multigrams_title"));
      assertEquals(mult * 0, xyz.getConjunctionDocCount("multigrams_title"));
      
      assertEquals(mult * 0, xyz.getTTF("multigrams_body"));
      assertEquals(mult * 0, xyz.getDocFreq("multigrams_body"));
      assertEquals(mult * 0, xyz.getConjunctionDocCount("multigrams_body"));
      return;
    };


    final List<Phrase> phrasesLocal = Phrase.extractPhrases(input, analysisField, 3, 7);
    
    // freshly parsed phrases, w/o any stats populated, all the stats should be 0
    assertions.accept(0, phrasesLocal);

    // If we populate with our index stats, we should get the basic values in our BiConsumer
    try (SolrQueryRequest req = req()) {
      Phrase.populateStats(phrasesLocal, Arrays.asList("multigrams_body","multigrams_title"),
                           req.getSearcher());
    }
    assertions.accept(1, phrasesLocal);

    // likewise, if we create a new freshly parsed set of phrases, and "merge" in the previous index stats
    // (ie: merge results from one shard) we should get the same results
    final List<Phrase> phrasesMerged = Phrase.extractPhrases(input, analysisField, 3, 7);
    Phrase.populateStats(phrasesMerged, Phrase.formatShardResponse(phrasesLocal));
    assertions.accept(1, phrasesMerged);

    // if we merge in a second copy of the same results (ie: two identical shards)
    // our results should be double what we had before
    Phrase.populateStats(phrasesMerged, Phrase.formatShardResponse(phrasesLocal));
    assertions.accept(2, phrasesMerged);
    
  }

