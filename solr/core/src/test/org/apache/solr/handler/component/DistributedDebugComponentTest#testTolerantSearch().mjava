  public void testTolerantSearch() throws SolrServerException {
    String badShard = "[ff01::0083]:3334";
    SolrQuery query = new SolrQuery();
    query.setQuery("*:*");
    query.set("debug",  "true");
    query.set("distrib", "true");
    query.setFields("id", "text");
    query.set("shards", shard1 + "," + shard2 + "," + badShard);
    try {
      ignoreException("Server refused connection");
      // verify that the request would fail if shards.tolerant=false
      collection1.query(query);
      fail("Expecting exception");
    } catch (SolrException e) {
      //expected
    }
    query.set(ShardParams.SHARDS_TOLERANT, "true");
    QueryResponse response = collection1.query(query);
    assertTrue((Boolean)response.getResponseHeader().get("partialResults"));
    @SuppressWarnings("unchecked")
    NamedList<String> badShardTrack = (NamedList<String>) ((NamedList<NamedList<String>>)
        ((NamedList<NamedList<NamedList<String>>>)response.getDebugMap().get("track")).get("EXECUTE_QUERY")).get(badShard);
    assertEquals("Unexpected response size for shard", 1, badShardTrack.size());
    Entry<String, String> exception = badShardTrack.iterator().next();
    assertEquals("Expected key 'Exception' not found", "Exception", exception.getKey());
    assertNotNull("Exception message should not be null", exception.getValue());
    unIgnoreException("Server refused connection");
  }

