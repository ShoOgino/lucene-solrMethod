  @Test
  public void testDiskOverFlow() throws Exception {
    invokeReplicationCommand(slaveJetty.getLocalPort(), "disablepoll");
    //index docs
    log.info("Indexing to MASTER");
    int docsInMaster = 1000;
    long szMaster = indexDocs(masterClient, docsInMaster, 0);
    log.info("Indexing to SLAVE");
    long szSlave = indexDocs(slaveClient, 1200, 1000);

    IndexFetcher.usableDiskSpaceProvider = new Function<String, Long>() {
      @Override
      public Long apply(String s) {
        return szMaster;
      }
    };

    // we don't need/want the barrier to be cyclic, so we use a ref that our barrier action will null
    // out to prevent it from being triggered multiple times (which shouldn't happen anyway)
    final AtomicReference<CyclicBarrier> commonBarrier = new AtomicReference<>();
    commonBarrier.set(new CyclicBarrier(2, () -> { commonBarrier.set(null); }));
    
    final List<Throwable> threadFailures = new ArrayList<>(7);
    
    IndexFetcher.testWait = new BooleanSupplier() {
      @Override
      public boolean getAsBoolean() {
        try {
          final CyclicBarrier barrier = commonBarrier.get();
          if (null != barrier) {
            barrier.await(60, TimeUnit.SECONDS);
          }
        } catch (Exception e) {
          log.error("IndexFetcher Thread Failure", e);
          threadFailures.add(e);
        }
        return true;
      }
    };
    
    new Thread(() -> {
        try {
          for (int i = 0; i < 100; i++) {
            final CyclicBarrier barrier = commonBarrier.get();
            assertNotNull("why is query thread still looping if barrier has already been cleared?",
                          barrier);
            try {
              QueryResponse rsp = slaveClient.query(new SolrQuery()
                                                    .setQuery("*:*")
                                                    .setRows(0));
              Thread.sleep(200);
            } catch (SolrException e) {
              if (e.code() == SolrException.ErrorCode.SERVICE_UNAVAILABLE.code
                  && e.getMessage().contains(expectedErr)
                  ) { 
                log.info("Got expected exception", e);
                // now let the barrier complete & clear itself, and we're done
                barrier.await(60, TimeUnit.SECONDS);
                return; // break out
              }
              // else...
              // not our expected exception, re-throw to fail fast...
              throw e;
            }
          }
          // if we made it this far, something is wrong...
          throw new RuntimeException("Query thread gave up waiting for expected error: " + expectedErr);
        } catch (Exception e) {
          log.error("Query Thread Failure", e);
          threadFailures.add(e);
        }
      }).start();

    QueryResponse response = slaveClient.query(new SolrQuery()
                                               .add("qt", "/replication")
                                               .add("command", CMD_FETCH_INDEX)
                                               .add("wait", "true")
                                               );
    assertEquals("Replication command status",
                 "OK", response._getStr("status", null));
    
    assertEquals("threads encountered failures (see logs for when)",
                 Collections.EMPTY_LIST, threadFailures);

    response = slaveClient.query(new SolrQuery().setQuery("*:*").setRows(0));
    assertEquals("docs in slave", docsInMaster, response.getResults().getNumFound());

    response = slaveClient.query(new SolrQuery()
        .add("qt", "/replication")
        .add("command", ReplicationHandler.CMD_DETAILS)
    );
    if (log.isInfoEnabled()) {
      log.info("DETAILS {}", Utils.writeJson(response, new StringWriter(), true).toString());
    }
    assertEquals("slave's clearedLocalIndexFirst (from rep details)",
                 "true", response._getStr("details/slave/clearedLocalIndexFirst", null));
  }

