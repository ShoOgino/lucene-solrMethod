  @Test
  public void doTestIndexFetchWithLeaderUrl() throws Exception {
    //change solrconfig on follower
    //this has no entry for pollinginterval
    follower.setTestPort(leaderJetty.getLocalPort());
    follower.copyConfigFile(CONF_DIR + "solrconfig-follower1.xml", "solrconfig.xml");
    followerJetty.stop();
    followerJetty = createAndStartJetty(follower);
    followerClient.close();
    followerClient = createNewSolrClient(followerJetty.getLocalPort());

    leaderClient.deleteByQuery("*:*");
    followerClient.deleteByQuery("*:*");
    followerClient.commit();
    nDocs--;
    for (int i = 0; i < nDocs; i++)
      index(leaderClient, "id", i, "name", "name = " + i);

    // make sure prepareCommit doesn't mess up commit  (SOLR-3938)
    
    // todo: make SolrJ easier to pass arbitrary params to
    // TODO: precommit WILL screw with the rest of this test

    leaderClient.commit();

    @SuppressWarnings({"rawtypes"})
    NamedList leaderQueryRsp = rQuery(nDocs, "*:*", leaderClient);
    SolrDocumentList leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get("response");
    assertEquals(nDocs, leaderQueryResult.getNumFound());
    
    String urlKey = "leaderUrl";
    if (useLegacyParams) {
      urlKey = "masterUrl";
    }

    // index fetch
    String leaderUrl = buildUrl(followerJetty.getLocalPort()) + "/" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH+"?command=fetchindex&" + urlKey + "=";
    leaderUrl += buildUrl(leaderJetty.getLocalPort()) + "/" + DEFAULT_TEST_CORENAME + ReplicationHandler.PATH;
    URL url = new URL(leaderUrl);
    InputStream stream = url.openStream();
    stream.close();
    
    //get docs from follower and check if number is equal to leader
    @SuppressWarnings({"rawtypes"})
    NamedList followerQueryRsp = rQuery(nDocs, "*:*", followerClient);
    SolrDocumentList followerQueryResult = (SolrDocumentList) followerQueryRsp.get("response");
    assertEquals(nDocs, followerQueryResult.getNumFound());
    //compare results
    String cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);
    assertEquals(null, cmp);

    // index fetch from the follower to the leader
    
    for (int i = nDocs; i < nDocs + 3; i++)
      index(followerClient, "id", i, "name", "name = " + i);

    followerClient.commit();
    
    pullFromFollowerToLeader();
    rQuery(nDocs + 3, "*:*", leaderClient);
    
    //get docs from follower and check if number is equal to leader
    followerQueryRsp = rQuery(nDocs + 3, "*:*", followerClient);
    followerQueryResult = (SolrDocumentList) followerQueryRsp.get("response");
    assertEquals(nDocs + 3, followerQueryResult.getNumFound());
    //compare results
    leaderQueryRsp = rQuery(nDocs + 3, "*:*", leaderClient);
    leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get("response");
    cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);
    assertEquals(null, cmp);

    assertVersions(leaderClient, followerClient);
    
    pullFromFollowerToLeader();
    
    //get docs from follower and check if number is equal to leader
    followerQueryRsp = rQuery(nDocs + 3, "*:*", followerClient);
    followerQueryResult = (SolrDocumentList) followerQueryRsp.get("response");
    assertEquals(nDocs + 3, followerQueryResult.getNumFound());
    //compare results
    leaderQueryRsp = rQuery(nDocs + 3, "*:*", leaderClient);
    leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get("response");
    cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);
    assertEquals(null, cmp);
    
    assertVersions(leaderClient, followerClient);
    
    // now force a new index directory
    for (int i = nDocs + 3; i < nDocs + 7; i++)
      index(leaderClient, "id", i, "name", "name = " + i);
    
    leaderClient.commit();
    
    pullFromFollowerToLeader();
    rQuery((int) followerQueryResult.getNumFound(), "*:*", leaderClient);
    
    //get docs from follower and check if number is equal to leader
    followerQueryRsp = rQuery(nDocs + 3, "*:*", followerClient);
    followerQueryResult = (SolrDocumentList) followerQueryRsp.get("response");
    assertEquals(nDocs + 3, followerQueryResult.getNumFound());
    //compare results
    leaderQueryRsp = rQuery(nDocs + 3, "*:*", leaderClient);
    leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get("response");
    cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);
    assertEquals(null, cmp);
    
    assertVersions(leaderClient, followerClient);
    pullFromFollowerToLeader();
    
    //get docs from follower and check if number is equal to leader
    followerQueryRsp = rQuery(nDocs + 3, "*:*", followerClient);
    followerQueryResult = (SolrDocumentList) followerQueryRsp.get("response");
    assertEquals(nDocs + 3, followerQueryResult.getNumFound());
    //compare results
    leaderQueryRsp = rQuery(nDocs + 3, "*:*", leaderClient);
    leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get("response");
    cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);
    assertEquals(null, cmp);
    
    assertVersions(leaderClient, followerClient);
    
    NamedList<Object> details = getDetails(leaderClient);
   
    details = getDetails(followerClient);
    
    checkForSingleIndex(leaderJetty);
    checkForSingleIndex(followerJetty);
  }

