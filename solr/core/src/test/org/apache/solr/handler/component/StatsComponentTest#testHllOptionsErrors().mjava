  /**
   * Test user input errors (split into its own test to isolate ignored exceptions)
   * @see #testCardinality 
   * @see #testHllOptions
   */
  public void testHllOptionsErrors() throws Exception {
    String[] baseParams = new String[] { "q","*:*", "stats","true", "indent","true", "rows","0" };
    SolrCore core = h.getCore();
    SchemaField foo_s = core.getLatestSchema().getField("foo_s");
    SchemaField foo_i = core.getLatestSchema().getField("foo_i");

    ignoreException("hllPreHashed");
    for (SchemaField field : new SchemaField[] { foo_s, foo_i }) {
      // whitebox - field
      SolrException ex = expectThrows(SolrException.class, () -> {
        HllOptions.parseHllOptions(params("cardinality","true", "hllPreHashed", "true"), field);
      });
      assertTrue("MSG: " + ex.getMessage(),
          ex.getMessage().contains("hllPreHashed is only supported with Long"));
      // blackbox - field
      assertQEx("hllPreHashed " + field.getName(), "hllPreHashed is only supported with Long",
                req(params("stats.field","{!cardinality=true hllPreHashed=true}" + field.getName()),
                    baseParams),
                ErrorCode.BAD_REQUEST);
    }

    // whitebox - function
    SolrException ex = expectThrows(SolrException.class, () -> {
      HllOptions.parseHllOptions(params("cardinality","true", "hllPreHashed", "true"), null);
    });
    assertTrue("MSG: " + ex.getMessage(),
        ex.getMessage().contains("hllPreHashed is only supported with Long"));

    // blackbox - function
    assertQEx("hllPreHashed function", "hllPreHashed is only supported with Long",
              req(params("stats.field","{!func cardinality=true hllPreHashed=true}sum(foo_i,foo_l)"),
                  baseParams),
              ErrorCode.BAD_REQUEST);


    ignoreException("accuracy");
    for (String invalid : new String[] { "-1", "1.1", "100" }) {
      // whitebox
      ex = expectThrows(SolrException.class, () -> {
        HllOptions.parseHllOptions(params("cardinality",invalid), foo_s);
      });
      assertTrue("MSG: " + ex.getMessage(), ex.getMessage().contains("number between 0 and 1"));
      // blackbox
      assertQEx("cardinality="+invalid, "number between 0 and 1",
                req(params("stats.field","{!cardinality="+invalid+"}foo_s"),
                    baseParams),
                ErrorCode.BAD_REQUEST);
    }
    
    ignoreException("hllLog2m must be");
    for (int invalid : new int[] { HLL.MINIMUM_LOG2M_PARAM-1, HLL.MAXIMUM_LOG2M_PARAM+11 }) {
      // whitebox
      ex = expectThrows(SolrException.class, () -> {
        HllOptions.parseHllOptions(params("cardinality","true", "hllLog2m", ""+invalid), foo_s);
      });
      assertTrue("MSG: " + ex.getMessage(), ex.getMessage().contains("hllLog2m must be"));

      // blackbox
      assertQEx("hllLog2m="+invalid, "hllLog2m must be",
                req(params("stats.field","{!cardinality=true hllLog2m="+invalid+"}foo_s"),
                    baseParams),
                ErrorCode.BAD_REQUEST);
    }

    ignoreException("hllRegwidth must be");
    for (int invalid : new int[] { HLL.MINIMUM_REGWIDTH_PARAM-1, HLL.MAXIMUM_REGWIDTH_PARAM+1 }) {
      // whitebox
      ex = expectThrows(SolrException.class, () -> {
        HllOptions.parseHllOptions(params("cardinality","true",
            "hllRegwidth", ""+invalid), foo_s);
      });
      assertTrue("MSG: " + ex.getMessage(),
          ex.getMessage().contains("hllRegwidth must be"));

      // blackbox
      assertQEx("hllRegwidth="+invalid, "hllRegwidth must be",
                req(params("stats.field","{!cardinality=true hllRegwidth="+invalid+"}foo_s"),
                    baseParams),
                ErrorCode.BAD_REQUEST);
    }
  }

