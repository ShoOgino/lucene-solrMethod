  public void testPluginFrompackage() throws Exception {
    String COLLECTION_NAME = "globalLoaderColl";
    Map<String, Object> jars = Utils.makeMap(
        "/jar1.jar", getFileContent("runtimecode/runtimelibs.jar.bin"),
        "/jar2.jar", getFileContent("runtimecode/runtimelibs_v2.jar.bin"),
        "/jar3.jar", getFileContent("runtimecode/runtimelibs_v3.jar.bin"));

    Pair<Server, Integer> server = runHttpServer(jars);
    int port = server.second();
    System.setProperty("enable.runtime.lib", "true");
    MiniSolrCloudCluster cluster = configureCluster(4)
        .addConfig("conf", configset("cloud-minimal"))
        .configure();
    try {
      CollectionAdminRequest
          .createCollection(COLLECTION_NAME, "conf", 2, 1)
          .setMaxShardsPerNode(100)
          .process(cluster.getSolrClient());


      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);
      String payload = "{add-package:{name : 'global', url: 'http://localhost:" + port + "/jar1.jar', " +
          "sha512 : 'd01b51de67ae1680a84a813983b1de3b592fc32f1a22b662fc9057da5953abd1b72476388ba342cad21671cd0b805503c78ab9075ff2f3951fdf75fa16981420'}}";
      new V2Request.Builder("/cluster")
          .withPayload(payload)
          .withMethod(SolrRequest.METHOD.POST)
          .build().process(cluster.getSolrClient());
      String sha512 = (String) getObjectByPath(Utils.fromJSONString(payload), true, "add-package/sha512");
      String url = (String) getObjectByPath(Utils.fromJSONString(payload), true, "add-package/url");

      assertEquals(sha512,
          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, "package/global/sha512"));


      payload = "{\n" +
          "'create-requesthandler' : { 'name' : '/runtime', 'class': 'org.apache.solr.core.RuntimeLibReqHandler' , 'package':global }," +
          "'create-searchcomponent' : { 'name' : 'get', 'class': 'org.apache.solr.core.RuntimeLibSearchComponent' , 'package':global }," +
          "'create-queryResponseWriter' : { 'name' : 'json1', 'class': 'org.apache.solr.core.RuntimeLibResponseWriter' , 'package':global }" +
          "}";
      cluster.getSolrClient().request(new ConfigRequest(payload) {
        @Override
        public String getCollection() {
          return COLLECTION_NAME;
        }
      });

      SolrParams params = new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME,
          WT, JAVABIN,
          "meta","true"));

      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/config/queryResponseWriter/json1", params),
          Utils.makeMap(
              "/config/queryResponseWriter/json1/_packageinfo_/url", url,
              "/config/queryResponseWriter/json1/_meta_/sha512", sha512
          ));

      params = new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME,
          WT, JAVABIN,
          "meta","true"));

      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/config/searchComponent/get", params),
          Utils.makeMap(
              "config/searchComponent/get/_packageinfo_/url", url,
              "config/searchComponent/get/_packageinfo_/sha512", sha512
          ));

      params = new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME,
          WT, JAVABIN,
          "meta","true"));

      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/config/requestHandler/runtime", params),
          Utils.makeMap(
              ":config:requestHandler:/runtime:_packageinfo_:url", url,
              ":config:requestHandler:/runtime:_packageinfo_:sha512", sha512
          ));


      params = new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME, WT, JAVABIN));
      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/config/overlay", params),
          Utils.makeMap(
              "overlay/queryResponseWriter/json1/class", "org.apache.solr.core.RuntimeLibResponseWriter",
              "overlay/searchComponent/get/class", "org.apache.solr.core.RuntimeLibSearchComponent"
          ));

      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/runtime", params),
          Utils.makeMap("class", "org.apache.solr.core.RuntimeLibReqHandler",
              "loader", MemClassLoader.class.getName()));

      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/get?abc=xyz", params),
          Utils.makeMap("get", "org.apache.solr.core.RuntimeLibSearchComponent",
              "loader", MemClassLoader.class.getName()));

      GenericSolrRequest req = new GenericSolrRequest(SolrRequest.METHOD.GET, "/runtime",
          new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME, WT, "json1")));
      req.setResponseParser(new ResponseParser() {
        @Override
        public String getWriterType() {
          return "json1";
        }

        @Override
        public NamedList<Object> processResponse(InputStream body, String encoding) {
          return new NamedList<>((Map) Utils.fromJSON(body));
        }

        @Override
        public NamedList<Object> processResponse(Reader reader) {
          return new NamedList<>((Map) Utils.fromJSON(reader));

        }

      });
      assertResponseValues(10,
          cluster.getSolrClient(),
          req,
          Utils.makeMap("wt", "org.apache.solr.core.RuntimeLibResponseWriter",
              "loader", MemClassLoader.class.getName()));


      payload = "{update-package:{name : 'global', url: 'http://localhost:" + port + "/jar2.jar', " +
          "sha512 : 'bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417'}}";
      new V2Request.Builder("/cluster")
          .withPayload(payload)
          .withMethod(SolrRequest.METHOD.POST)
          .build().process(cluster.getSolrClient());
      sha512 = (String) getObjectByPath(Utils.fromJSONString(payload), true, "update-package/sha512");
      url = (String) getObjectByPath(Utils.fromJSONString(payload), true, "update-package/url");

      assertEquals(sha512,
          getObjectByPath(new ClusterProperties(cluster.getZkClient()).getClusterProperties(), true, "package/global/sha512"));

      params = new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME,
          WT, JAVABIN,
          "meta","true"));

      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/config/queryResponseWriter/json1", params),
          Utils.makeMap(
              "/config/queryResponseWriter/json1/_packageinfo_/url", url,
              "/config/queryResponseWriter/json1/_packageinfo_/sha512", sha512
          ));

      params = new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME,
          WT, JAVABIN,
          "meta","true"));

      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/config/searchComponent/get", params),
          Utils.makeMap(
              "/config/searchComponent/get/_packageinfo_/url", url,
              "/config/searchComponent/get/_packageinfo_/sha512", sha512
          ));

      params = new MapSolrParams((Map) Utils.makeMap("collection", COLLECTION_NAME,
          WT, JAVABIN,
          "meta","true"));

      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/config/requestHandler/runtime", params),
          Utils.makeMap(
              ":config:requestHandler:/runtime:_packageinfo_:url", url,
              ":config:requestHandler:/runtime:_packageinfo_:sha512", sha512
          ));



      try {
        new V2Request.Builder("/cluster")
            .withPayload(payload)
            .withMethod(SolrRequest.METHOD.POST)
            .build().process(cluster.getSolrClient());
        fail("should have failed");
      } catch (BaseHttpSolrClient.RemoteExecutionException e) {
        assertTrue("actual output : " + Utils.toJSONString(e.getMetaData()), e.getMetaData()._getStr("error/details[0]/errorMessages[0]", "").contains("Trying to update a jar with the same sha512"));
      }


      assertResponseValues(10,
          cluster.getSolrClient(),
          new GenericSolrRequest(SolrRequest.METHOD.GET, "/get?abc=xyz", params),
          Utils.makeMap("get", "org.apache.solr.core.RuntimeLibSearchComponent",
              "loader", MemClassLoader.class.getName(),
              "Version", "2"));
    } finally {
      cluster.deleteAllCollections();
      cluster.shutdown();
      server.first().stop();
    }

  }

