  @Test
  public void testModifyRequestTrack() {
    DebugComponent component = new DebugComponent();
    List<SearchComponent> components = new ArrayList<>(1);
    components.add(component);
    for(int i = 0; i < 10; i++) {
      SolrQueryRequest req = req("q", "test query", "distrib", "true", CommonParams.REQUEST_ID, "123456-my_rid");
      SolrQueryResponse resp = new SolrQueryResponse();
      ResponseBuilder rb = new ResponseBuilder(req, resp, components);
      ShardRequest sreq = new ShardRequest();
      sreq.params = new ModifiableSolrParams();
      sreq.purpose = ShardRequest.PURPOSE_GET_FIELDS;
      sreq.purpose |= ShardRequest.PURPOSE_GET_DEBUG;
      //expecting the same results with debugQuery=true or debug=track
      if(random().nextBoolean()) {
        rb.setDebug(true);
      } else {
        rb.setDebug(false);
        rb.setDebugTrack(true);
        //should not depend on other debug options
        rb.setDebugQuery(random().nextBoolean());
        rb.setDebugTimings(random().nextBoolean());
        rb.setDebugResults(random().nextBoolean());
      }
      component.modifyRequest(rb, null, sreq);
      //if the request has debugQuery=true or debug=track, the sreq should get debug=track always
      assertTrue(Arrays.asList(sreq.params.getParams(CommonParams.DEBUG)).contains(CommonParams.TRACK));
      //the purpose must be added as readable param to be included in the shard logs
      assertEquals("GET_FIELDS,GET_DEBUG,SET_TERM_STATS", sreq.params.get(CommonParams.REQUEST_PURPOSE));
      //the rid must be added to be included in the shard logs
      assertEquals("123456-my_rid", sreq.params.get(CommonParams.REQUEST_ID));
      // close requests - this method obtains a searcher in order to access its StatsCache
      req.close();
    }
    
  }

