  @Test
  public void testAbuseOfSort() {

    assertU(adoc("id", "9999991",
                 "sortabuse_not_uninvertible", "xxx",
                 "sortabuse_t", "zzz xxx ccc vvv bbb nnn aaa sss ddd fff ggg"));
    assertU(adoc("id", "9999992",
                 "sortabuse_not_uninvertible", "yyy",
                 "sortabuse_t", "zzz xxx ccc vvv bbb nnn qqq www eee rrr ttt"));

    assertU(commit());

    for (String f : Arrays.asList("sortabuse_not_uninvertible", "sortabuse_t")) {
      RuntimeException outerEx = expectThrows(RuntimeException.class, () -> {
          ignoreException("sortabuse");
          assertQ("sort on something that shouldn't work",
                  req("q", "*:*",
                      "sort", f+ " asc"),
                  "*[count(//doc)=2]");
        });
      Throwable root = getRootCause(outerEx);
      assertEquals("sort exception root cause",
                   SolrException.class, root.getClass());
      SolrException e = (SolrException) root;
      assertEquals("incorrect error type",
                   SolrException.ErrorCode.BAD_REQUEST,
                   SolrException.ErrorCode.getErrorCode(e.code()));
      assertTrue("exception doesn't contain field name",
                 e.getMessage().contains(f));
    }
  }

