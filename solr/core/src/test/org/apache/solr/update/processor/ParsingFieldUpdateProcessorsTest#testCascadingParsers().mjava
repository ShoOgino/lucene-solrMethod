  public void testCascadingParsers() throws Exception {
    IndexSchema schema = h.getCore().getLatestSchema();
    final String fieldName = "not_in_schema";
    assertNull(schema.getFieldOrNull(fieldName));
    SolrInputDocument d = null;
    String chain = "cascading-parsers-no-run-processor";
    
    Map<Boolean,String> booleans = new HashMap<>();
    booleans.put(true, "truE");
    booleans.put(false, "False");
    d = processAdd(chain, doc(f("id", "341"), f(fieldName, booleans.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_BOOLEAN);
      booleans.remove(o);
    }
    assertTrue(booleans.isEmpty());

    Map<Integer,String> ints = new HashMap<>();
    ints.put(2, "2");
    ints.put(50928, "50928");
    ints.put(86942008, "86,942,008");
    d = processAdd(chain, doc(f("id", "333"), f(fieldName, ints.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_INTEGER);
      ints.remove(o);
    }
    assertTrue(ints.isEmpty());

    Map<Long,String> longs = new HashMap<>();
    longs.put(2L, "2");
    longs.put(50928L, "50928");
    longs.put(86942008987654L, "86,942,008,987,654");
    d = processAdd(chain, doc(f("id", "342"), f(fieldName, longs.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_LONG);
      longs.remove(o);
    }
    assertTrue(longs.isEmpty());
    
    /*
    // Disabling this test because unlike Integer/Long, Float parsing can perform
    // rounding to make values fit.  See 
    Map<Float,String> floats = new HashMap<Float,String>();
    floats.put(2.0, "2.");
    floats.put(509.28, "509.28");
    floats.put(86942.008, "86,942.008");
    d = processAdd(chain, doc(f("id", "342"), f(fieldName, floats.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertTrue(o instanceof float);
      longs.remove(o);
    }
    */

    Map<Double,String> doubles = new HashMap<>();
    doubles.put(2.0, "2.");
    doubles.put(509.28, "509.28");
    doubles.put(86942.008, "86,942.008");
    d = processAdd(chain, doc(f("id", "342"), f(fieldName, doubles.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_DOUBLE);
      longs.remove(o);
    }

    Map<Date,String> dates = new HashMap<>();
    String[] dateStrings = { "2020-05-13T18:47", "1989-12-14", "1682-07-22T18:33:00.000Z" };
    for (String dateString : dateStrings) {
      dates.put(parse(isoDateOptionalTimeFormatter, dateString), dateString);
    }
    d = processAdd(chain, doc(f("id", "343"), f(fieldName, dates.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_DATE);
      dates.remove(o);
    }
    assertTrue(dates.isEmpty());
    
    Map<Double,String> mixedLongsAndDoubles = new LinkedHashMap<>(); // preserve order
    mixedLongsAndDoubles.put(85.0, "85");
    mixedLongsAndDoubles.put(2.94423E-9, "2.94423E-9");
    mixedLongsAndDoubles.put(2894518.0, "2,894,518");
    mixedLongsAndDoubles.put(48794721.937, "48,794,721.937");
    d = processAdd(chain, doc(f("id", "344"), f(fieldName, mixedLongsAndDoubles.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_DOUBLE);
      mixedLongsAndDoubles.remove(o);
    }
    assertTrue(mixedLongsAndDoubles.isEmpty());
    
    Set<String> mixed = new HashSet<>();
    mixed.add("true");
    mixed.add("1682-07-22T18:33:00.000Z");
    mixed.add("2,894,518");
    mixed.add("308,393,131,379,900");
    mixed.add("48,794,721.937");
    d = processAdd(chain, doc(f("id", "345"), f(fieldName, mixed)));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_STRING);
    }

    Map<Double,Object> mixedDoubles = new LinkedHashMap<>(); // preserve order
    mixedDoubles.put(85.0, "85");
    mixedDoubles.put(2.94423E-9, 2.94423E-9); // Double-typed field value
    mixedDoubles.put(2894518.0, "2,894,518");
    mixedDoubles.put(48794721.937, "48,794,721.937");
    d = processAdd(chain, doc(f("id", "3391"), f(fieldName, mixedDoubles.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_DOUBLE);
      mixedDoubles.remove(o);
    }
    assertTrue(mixedDoubles.isEmpty());

    Map<Integer,Object> mixedInts = new LinkedHashMap<>(); // preserve order
    mixedInts.put(85, "85");
    mixedInts.put(294423, 294423); // Integer-typed field value
    mixedInts.put(-2894518, "-2,894,518");
    mixedInts.put(1879472193, "1,879,472,193");
    d = processAdd(chain, doc(f("id", "3392"), f(fieldName, mixedInts.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_INTEGER);
      mixedInts.remove(o);
    }
    assertTrue(mixedInts.isEmpty());

    Map<Long,Object> mixedLongs = new LinkedHashMap<>(); // preserve order
    mixedLongs.put(85L, "85");
    mixedLongs.put(42944233L, 42944233L); // Long-typed field value
    mixedLongs.put(2894518L, "2,894,518");
    mixedLongs.put(48794721937L, "48,794,721,937");
    d = processAdd(chain, doc(f("id", "3393"), f(fieldName, mixedLongs.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_LONG);
      mixedLongs.remove(o);
    }
    assertTrue(mixedLongs.isEmpty());

    Map<Boolean,Object> mixedBooleans = new LinkedHashMap<>(); // preserve order
    mixedBooleans.put(true, "true");
    mixedBooleans.put(false, false); // Boolean-typed field value
    mixedBooleans.put(false, "false");
    mixedBooleans.put(true, "true");
    d = processAdd(chain, doc(f("id", "3394"), f(fieldName, mixedBooleans.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_BOOLEAN);
      mixedBooleans.remove(o);
    }
    assertTrue(mixedBooleans.isEmpty());

    Map<Date,Object> mixedDates = new HashMap<>();
    dateStrings = new String[] { "2020-05-13T18:47", "1989-12-14", "1682-07-22T18:33:00.000Z" };
    for (String dateString : dateStrings) {
      mixedDates.put(parse(isoDateOptionalTimeFormatter, dateString), dateString);
    }
    Date extraDate = parse(isoDateOptionalTimeFormatter, "2003-04-24");
    mixedDates.put(extraDate, extraDate); // Date-typed field value
    d = processAdd(chain, doc(f("id", "3395"), f(fieldName, mixedDates.values())));
    assertNotNull(d);
    for (Object o : d.getFieldValues(fieldName)) {
      assertThat(o, IS_DATE);
      mixedDates.remove(o);
    }
    assertTrue(mixedDates.isEmpty());
  }

