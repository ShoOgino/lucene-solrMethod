  @SuppressWarnings("unchecked")
  @Test
  @ShardsFixed(num = 4)
  public void test() throws Exception {
    del("*:*");

    ModifiableSolrParams params = new ModifiableSolrParams();
    List<Node> nodes = new ArrayList<>();
    AddUpdateCommand cmd = new AddUpdateCommand(null);
    List<Error> errors;
    CommitUpdateCommand ccmd = new CommitUpdateCommand(null, false);
    long numFound;
    HttpSolrClient client;
    ZkNodeProps nodeProps;

    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {

      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,
          ((HttpSolrClient) controlClient).getBaseURL(),
          ZkStateReader.CORE_NAME_PROP, "");
      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));

      // add one doc to controlClient
      cmd.solrDoc = sdoc("id", id.incrementAndGet());
      params = new ModifiableSolrParams();

      cmdDistrib.distribAdd(cmd, nodes, params);

      params = new ModifiableSolrParams();
      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);
      cmdDistrib.distribCommit(ccmd, nodes, params);
      cmdDistrib.finish();


      errors = cmdDistrib.getErrors();

      assertEquals(errors.toString(), 0, errors.size());

      numFound = controlClient.query(new SolrQuery("*:*")).getResults()
          .getNumFound();
      assertEquals(1, numFound);

      client = (HttpSolrClient) clients.get(0);
      nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,
          client.getBaseURL(), ZkStateReader.CORE_NAME_PROP, "");
      nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));
    }
    int id2;
    // add another 2 docs to control and 3 to client
    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {
      cmd.solrDoc = sdoc("id", id.incrementAndGet());
      params = new ModifiableSolrParams();
      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);
      cmdDistrib.distribAdd(cmd, nodes, params);

      id2 = id.incrementAndGet();
      AddUpdateCommand cmd2 = new AddUpdateCommand(null);
      cmd2.solrDoc = sdoc("id", id2);

      params = new ModifiableSolrParams();
      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);
      cmdDistrib.distribAdd(cmd2, nodes, params);

      AddUpdateCommand cmd3 = new AddUpdateCommand(null);
      cmd3.solrDoc = sdoc("id", id.incrementAndGet());

      params = new ModifiableSolrParams();
      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);
      cmdDistrib.distribAdd(cmd3, Collections.singletonList(nodes.get(1)), params);

      params = new ModifiableSolrParams();
      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);
      cmdDistrib.distribCommit(ccmd, nodes, params);
      cmdDistrib.finish();
      errors = cmdDistrib.getErrors();
    }
    assertEquals(errors.toString(), 0, errors.size());

    SolrDocumentList results = controlClient.query(new SolrQuery("*:*")).getResults();
    numFound = results.getNumFound();
    assertEquals(results.toString(), 3, numFound);

    numFound = client.query(new SolrQuery("*:*")).getResults()
        .getNumFound();
    assertEquals(3, numFound);

    // now delete doc 2 which is on both control and client1

    DeleteUpdateCommand dcmd = new DeleteUpdateCommand(null);
    dcmd.id = Integer.toString(id2);


    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {

      params = new ModifiableSolrParams();
      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);

      cmdDistrib.distribDelete(dcmd, nodes, params);

      params = new ModifiableSolrParams();
      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);

      cmdDistrib.distribCommit(ccmd, nodes, params);
      cmdDistrib.finish();

      errors = cmdDistrib.getErrors();
    }

    assertEquals(errors.toString(), 0, errors.size());


    results = controlClient.query(new SolrQuery("*:*")).getResults();
    numFound = results.getNumFound();
    assertEquals(results.toString(), 2, numFound);

    numFound = client.query(new SolrQuery("*:*")).getResults()
        .getNumFound();
    assertEquals(results.toString(), 2, numFound);

    for (SolrClient c : clients) {
      c.optimize();
      //System.out.println(clients.get(0).request(new LukeRequest()));
    }

    try (SolrCmdDistributor cmdDistrib = new SolrCmdDistributor(updateShardHandler)) {

      int cnt = atLeast(303);
      for (int i = 0; i < cnt; i++) {
        nodes.clear();
        for (SolrClient c : clients) {
          if (random().nextBoolean()) {
            continue;
          }
          HttpSolrClient httpClient = (HttpSolrClient) c;
          nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,
              httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, "");
          nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));

        }
        AddUpdateCommand c = new AddUpdateCommand(null);
        c.solrDoc = sdoc("id", id.incrementAndGet());
        if (nodes.size() > 0) {
          params = new ModifiableSolrParams();
          cmdDistrib.distribAdd(c, nodes, params);
        }
      }

      nodes.clear();

      for (SolrClient c : clients) {
        HttpSolrClient httpClient = (HttpSolrClient) c;
        nodeProps = new ZkNodeProps(ZkStateReader.BASE_URL_PROP,
            httpClient.getBaseURL(), ZkStateReader.CORE_NAME_PROP, "");

        nodes.add(new StdNode(new ZkCoreNodeProps(nodeProps)));
      }

      final AtomicInteger commits = new AtomicInteger();
      for (JettySolrRunner jetty : jettys) {
        CoreContainer cores = jetty.getCoreContainer();
        try (SolrCore core = cores.getCore("collection1")) {
          core.getUpdateHandler().registerCommitCallback(new SolrEventListener() {
            @Override
            public void init(@SuppressWarnings({"rawtypes"})NamedList args) {
            }

            @Override
            public void postSoftCommit() {
            }

            @Override
            public void postCommit() {
              commits.incrementAndGet();
            }

            @Override
            public void newSearcher(SolrIndexSearcher newSearcher,
                                    SolrIndexSearcher currentSearcher) {
            }
          });
        }
      }
      params = new ModifiableSolrParams();
      params.set(DistributedUpdateProcessor.COMMIT_END_POINT, true);

      cmdDistrib.distribCommit(ccmd, nodes, params);

      cmdDistrib.finish();

      assertEquals(getShardCount(), commits.get());

      for (SolrClient c : clients) {
        NamedList<Object> resp = c.request(new LukeRequest());
        assertEquals("SOLR-3428: We only did adds - there should be no deletes",
            ((NamedList<Object>) resp.get("index")).get("numDocs"),
            ((NamedList<Object>) resp.get("index")).get("maxDoc"));
      }
    }
    
    testMaxRetries(NodeType.FORWARD);
    testMaxRetries(NodeType.STANDARD);
    testOneRetry(NodeType.FORWARD);
    testOneRetry(NodeType.STANDARD);
    testRetryNodeAgainstBadAddress();
    testStdNodeRetriesSocketError();
    testForwardNodeWontRetrySocketError();
    testNodeWontRetryBadRequest(NodeType.FORWARD);
    testNodeWontRetryBadRequest(NodeType.STANDARD);
    testMinRfOnRetries(NodeType.FORWARD);
    testMinRfOnRetries(NodeType.STANDARD);
    testDistribOpenSearcher();
    testReqShouldRetryNoRetries();
    testReqShouldRetryMaxRetries();
    testReqShouldRetryBadRequest();
    testReqShouldRetryNotFound();
    testReqShouldRetryDBQ();
    testDeletes(false, true);
    testDeletes(false, false);
    testDeletes(true, true);
    testDeletes(true, false);
    getRfFromResponseShouldNotCloseTheInputStream();
    testStuckUpdates();
  }

