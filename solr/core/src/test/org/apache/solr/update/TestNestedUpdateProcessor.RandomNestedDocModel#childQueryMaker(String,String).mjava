    /** 
     * This implements the "safe query based on parent path" rules we're sanity checking.
     *
     * @param parent_path the nest path of the parents to consider
     * @param inner_parent_query the specific parents whose descendents we are looking for, must be simple string <code>*:*</code> or <code>id:foo</code>
     */
    private SolrParams childQueryMaker(String parent_path, String inner_parent_query) {
      assertValidPathSytax(parent_path);
      final boolean verbose = random().nextBoolean();
      
      if (parent_path.equals("/")) {
        if (verbose) {
          return params("q", "{!child of=$parent_filt v=$parent_q})",
                        "parent_filt", "(*:* -_nest_path_:*)",
                        "parent_q", "(+" + inner_parent_query + " -_nest_path_:*)");
        } else {
          return params("q", "{!child of='(*:* -_nest_path_:*)'}(+" + inner_parent_query + " -_nest_path_:*)");
        }
      } // else...
      
      if (verbose) {
        return params("q", "{!child of=$parent_filt v=$parent_q})",
                      "parent_filt", "(*:* -{!prefix f='_nest_path_' v='"+parent_path+"/'})",
                      "parent_q", "(+" + inner_parent_query + " +{!field f='_nest_path_' v='"+parent_path+"'})");
      } else {
        // '/' has to be escaped other wise it will be treated as a regex query...
        // (and of course '\' escaping is the java syntax as well, we have to double it)
        final String exact_path = parent_path.replace("/", "\\/");
        // ...and when used inside the 'which' param it has to be escaped *AGAIN* because of
        // the "quoted" localparam evaluation layer...
        final String prefix_path = (parent_path + "/").replace("/","\\\\/");
        return params("q", "{!child of='(*:* -_nest_path_:"+prefix_path+"*)'}"
                      + "(+" + inner_parent_query + " +_nest_path_:" + exact_path + ")");
      }
    }

