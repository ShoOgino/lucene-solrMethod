  /** 
   * @see #checkReplay 
   * @see RandomUpdate
   */
  public void checkRandomReplay(final int maxDocId, final int numCmds) throws Exception {
    
    final String not_inplaceField = "regular_l";
    final String inplaceField = "inplace_l_dvo"; 

    final Object[] cmds = new Object[numCmds];
    for (int iter = 0; iter < numCmds; iter++) {
      final int id = TestUtil.nextInt(random(), 1, maxDocId);
      final RandomUpdate update = RandomUpdate.pick(random());

      switch (update) {
        
      case HARD_COMMIT:
        cmds[iter] = HARDCOMMIT;
        break;
        
      case SOFT_COMMIT:
        cmds[iter] = SOFTCOMMIT;
        break;

      case ATOMIC_NOT_INPLACE:
        // atomic update on non_inplaceField, w/o any value specified for inplaceField
        cmds[iter] = sdoc("id", id,
                          not_inplaceField, map("inc", random().nextInt()));
        break;
        
      case ATOMIC_INPLACE_AND_NOT_INPLACE:
        // atomic update of a doc w/ inc on both inplaceField and not_inplaceField
        cmds[iter] = sdoc("id", id,
                          inplaceField, map("inc", random().nextInt()),
                          not_inplaceField, map("inc", random().nextInt()));
        break;

      case ATOMIC_INPLACE_SET:
        // atomic update of a doc w/ set inplaceField
        cmds[iter] = sdoc("id", id,
                          inplaceField, map("set", random().nextLong()));
        break;

      case ATOMIC_INPLACE_INC:
        // atomic update of a doc w/ inc inplaceField
        cmds[iter] = sdoc("id", id,
                          inplaceField, map("inc", random().nextInt()));
        break;

      case ADD_NO_INPLACE_VALUE:
        // regular add of doc w/o the inplaceField, but does include non_inplaceField
        cmds[iter] = sdoc("id", id,
                          not_inplaceField, random().nextLong());
        break;

      case ADD_INPLACE_VALUE:
        // a non atomic update of a doc w/ new inplaceField value
        cmds[iter] = sdoc("id", id,
                          inplaceField, random().nextLong(),
                          not_inplaceField, random().nextLong());
        break;
        
      default:
        fail("WTF is this? ... " + update);
      }
      
      assertNotNull(cmds[iter]); // sanity check switch
    }

    checkReplay(inplaceField, cmds);
  }

