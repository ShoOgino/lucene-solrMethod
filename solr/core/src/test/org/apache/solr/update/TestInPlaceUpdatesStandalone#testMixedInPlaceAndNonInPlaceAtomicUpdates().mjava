  @Test
  public void testMixedInPlaceAndNonInPlaceAtomicUpdates() throws Exception {
    SolrDocument rtgDoc = null;
    long version1 = addAndGetVersion(sdoc("id", "1", "inplace_updatable_float", "100", "stored_i", "100"), params());

    version1 = addAndAssertVersion(version1, "id", "1", "inplace_updatable_float", map("inc", "1"), "stored_i", map("inc", "1"));
    rtgDoc = client.getById("1");
    assertEquals(101, rtgDoc.getFieldValue("stored_i"));
    assertEquals(101.0f, rtgDoc.getFieldValue("inplace_updatable_float"));
    
    version1 = addAndAssertVersion(version1, "id", "1", "inplace_updatable_float", map("inc", "1"));
    rtgDoc = client.getById("1");
    assertEquals(101, rtgDoc.getFieldValue("stored_i"));
    assertEquals(102.0f, rtgDoc.getFieldValue("inplace_updatable_float"));

    version1 = addAndAssertVersion(version1, "id", "1", "stored_i", map("inc", "1"));
    rtgDoc = client.getById("1");
    assertEquals(102, rtgDoc.getFieldValue("stored_i"));
    assertEquals(102.0f, rtgDoc.getFieldValue("inplace_updatable_float"));

    assertU(commit("softCommit", "false"));
    assertQ(req("q", "*:*", "sort", "id asc", "fl", "*"),
            "//*[@numFound='1']",
            "//result/doc[1]/float[@name='inplace_updatable_float'][.='102.0']",
            "//result/doc[1]/int[@name='stored_i'][.='102']",
            "//result/doc[1]/long[@name='_version_'][.='" + version1 + "']"
            );

    // recheck RTG after commit
    rtgDoc = client.getById("1");
    assertEquals(102, rtgDoc.getFieldValue("stored_i"));
    assertEquals(102.0f, rtgDoc.getFieldValue("inplace_updatable_float"));
  }

