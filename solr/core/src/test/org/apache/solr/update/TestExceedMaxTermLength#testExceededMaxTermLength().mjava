  @Test
  public void testExceededMaxTermLength(){

    // problematic field
    final String longFieldName = "cat";
    final String longFieldValue = TestUtil.randomSimpleString(random(),
        minTestTermLength,
        maxTestTermLength);

    final String okayFieldName = TestUtil.randomSimpleString(random(), 1, 50) + "_sS" ; //Dynamic field
    final String okayFieldValue = TestUtil.randomSimpleString(random(),
        minTestTermLength,
        maxTestTermLength);

    boolean includeOkayFields = random().nextBoolean();

    if(random().nextBoolean()) {
      //Use XML
      String doc;
      if(includeOkayFields) {
        doc = adoc("id", "1", longFieldName, longFieldValue, okayFieldName, okayFieldValue);
      } else {
        doc = adoc("id", "1", longFieldName, longFieldValue);
      }
      assertFailedU(doc);
    } else {
      //Use JSON
      try {
        if(includeOkayFields) {
          String jsonStr = "[{'id':'1','%s':'%s', '%s': '%s'}]";
          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue, 
                                  okayFieldName, okayFieldValue);
          updateJ(json(jsonStr), null);
        } else {
          String jsonStr = "[{'id':'1','%s':'%s'}]";
          jsonStr = String.format(Locale.ROOT, jsonStr, longFieldName, longFieldValue);
          updateJ(json(jsonStr), null);
        }
      } catch (Exception e) {
        //expected
        String msg= e.getCause().getMessage();
        assertTrue(msg.contains("one immense term in field=\"cat\""));
      }

    }

    assertU(commit());

    assertQ(req("q", "*:*"), "//*[@numFound='0']");
  }

