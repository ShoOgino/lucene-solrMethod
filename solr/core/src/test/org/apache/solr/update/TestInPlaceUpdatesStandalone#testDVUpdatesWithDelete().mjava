  @Test
  public void testDVUpdatesWithDelete() throws Exception {
    long version1 = 0;

    for (boolean postAddCommit : Arrays.asList(true, false)) {
      for (boolean delById : Arrays.asList(true, false)) {
        for (boolean postDelCommit : Arrays.asList(true, false)) {
          addAndGetVersion(sdoc("id", "1", "title_s", "first"), params());
          if (postAddCommit) assertU(commit());
          assertU(delById ? delI("1") : delQ("id:1"));
          if (postDelCommit) assertU(commit());
          version1 = addAndGetVersion(sdoc("id", "1", "inplace_updatable_float", map("set", 200)), params());
          // assert current doc#1 doesn't have old value of "title_s"
          assertU(commit());
          assertQ(req("q", "title_s:first", "sort", "id asc", "fl", "*,[docid]"),
              "//*[@numFound='0']");
        }
      }
    }

    // Update to recently deleted (or non-existent) document with a "set" on updatable 
    // field should succeed, since it is executed internally as a full update
    // because AUDM.doInPlaceUpdateMerge() returns false
    assertU(random().nextBoolean()? delI("1"): delQ("id:1"));
    if (random().nextBoolean()) assertU(commit());
    addAndAssertVersion(version1, "id", "1", "inplace_updatable_float", map("set", 200));
    assertU(commit());
    assertQ(req("q", "id:1", "sort", "id asc", "fl", "*"),
        "//*[@numFound='1']",
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='200.0']");

    // Another "set" on the same field should be an in-place update 
    int docid1 = getDocId("1");
    addAndAssertVersion(version1, "id", "1", "inplace_updatable_float", map("set", 300));
    assertU(commit());
    assertQ(req("q", "id:1", "fl", "*,[docid]"),
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='300.0']",
        "//result/doc[1]/int[@name='[docid]'][.='"+docid1+"']");
  }

