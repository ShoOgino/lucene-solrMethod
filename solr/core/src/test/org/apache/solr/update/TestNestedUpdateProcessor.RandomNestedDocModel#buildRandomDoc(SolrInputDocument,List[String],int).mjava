    private synchronized SolrInputDocument buildRandomDoc(SolrInputDocument parent,
                                                          List<String> test_path,
                                                          int maxDepthAndBreadth) {
      final String path_string = joinPath(test_path);
      final String id = "" + (++idCounter);
      maxDepthAndBreadth--;
      final SolrInputDocument doc = sdoc
        ("id", id,
         // may change, but we want it 0 even if we never add any
         "num_direct_kids_s", "0", 
         // conceptually matches _nest_path_ but should be easier to make assertions about (no inline position #s)
         "test_path_s", path_string);
      if (null != parent) {
        // order matters: if we add the Collection first, SolrInputDocument will try to reuse it
        doc.addField("ancestor_ids_ss", parent.getFieldValue("id"));
        if (parent.containsKey("ancestor_ids_ss")) { // sigh: getFieldValues returns null, not empty collection
          doc.addField("ancestor_ids_ss", parent.getFieldValues("ancestor_ids_ss"));
        }
      }
      
      for (int i = 0; i < test_path.size(); i++) {
        // NOTE: '<' not '<=" .. we only includes paths we are descendents of, not our full path...
        numDocsDescendentFromPath.merge(joinPath(test_path.subList(0, i)), 1, Math::addExact);
      }
      
      if (0 < maxDepthAndBreadth) {
        final int numDirectKids = TestUtil.nextInt(random(), 0, Math.min(4, maxDepthAndBreadth));
        doc.setField("num_direct_kids_s", "" + numDirectKids);
        if (0 < numDirectKids) {
          numDocsWithPathWithKids.merge(path_string, 1, Math::addExact);
        }
        maxDepthAndBreadth -= numDirectKids;
        for (int i = 0; i < numDirectKids; i++) {
          final String kidType = PATH_ELEMENTS.get(random().nextInt(PATH_ELEMENTS.size()));
          final List<String> kid_path = new ArrayList<>(test_path);
          kid_path.add(kidType);
          final SolrInputDocument kid = buildRandomDoc(doc, kid_path, maxDepthAndBreadth);
          doc.addField(kidType, kid);
          // order matters: if we add the Collection first, SolrInputDocument will try to reuse it
          doc.addField("descendent_ids_ss", kid.getFieldValue("id"));
          if (kid.containsKey("descendent_ids_ss")) {  // sigh: getFieldValues returns null, not empty collection
            doc.addField("descendent_ids_ss", kid.getFieldValues("descendent_ids_ss"));
          }
        }
      }
      allDocs.put(id, doc);
      return doc;
    }

