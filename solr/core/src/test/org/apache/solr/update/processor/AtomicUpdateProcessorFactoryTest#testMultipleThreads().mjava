  public void testMultipleThreads() throws Exception {
    clearIndex();
    String[] strings = new String[5];
    for (int i=0; i<5; i++) {
      strings[i] = generateRandomString();
    }

    List<Thread> threads = new ArrayList<>(100);
    int finalCount = 0; //int_i

    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();
    factory.inform(h.getCore());

    for (int i = 0; i < 10; i++) {
      int index = random().nextInt(5);
      Thread t = new Thread() {
        @Override
        public void run() {
          ModifiableSolrParams params = new ModifiableSolrParams()
              .add("processor", "atomic")
              .add("atomic.cat", "add")
              .add("atomic.int_i", "inc")
              .add("commit","true");
          try (SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params)) {
            AddUpdateCommand cmd = new AddUpdateCommand(req);
            cmd.solrDoc = new SolrInputDocument();
            cmd.solrDoc.addField("id", 10); //hardcoded id=10
            cmd.solrDoc.addField("cat", strings[index]);
            cmd.solrDoc.addField("int_i", index);
            SolrQueryResponse rsp = new SolrQueryResponse();
            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),
                createDistributedUpdateProcessor(cmd.getReq(), rsp,
                    createRunUpdateProcessor(cmd.getReq(), rsp, null))).processAdd(cmd);
          } catch (IOException e) {
          }
        }
      };
      threads.add(t);
      t.start();
      finalCount += index; //int_i
    }

    for (Thread thread: threads) thread.join();

    assertU(commit());

    assertQ("Check the total number of docs",
        req("q", "id:10"), "//result[@numFound=1]");


    StringJoiner queryString = new StringJoiner(" ");
    for(String string: strings) {
      queryString.add(string);
    }

    assertQ("Check the total number of docs",
        req("q", "cat:(" + queryString.toString() + ")")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "int_i:" + finalCount)
        , "//result[@numFound=1]");

  }

