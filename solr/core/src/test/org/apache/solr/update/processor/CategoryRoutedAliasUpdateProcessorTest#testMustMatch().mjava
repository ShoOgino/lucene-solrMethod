  @Slow
  @Test
  public void testMustMatch() throws Exception {
    String configName = getSaferTestName();
    createConfigSet(configName);
    final String mustMatchRegex = "HHS\\s.+_solr";

    final int maxCardinality = Integer.MAX_VALUE; // max cardinality for current test

    // Start with one collection manually created (and use higher numShards & replicas than we'll use for others)
    //  This tests we may pre-create the collection and it's acceptable.
    final String colVogon = getAlias() + "__CRA__" + noSpaces("HHS "+ SHIPS[0]) + "_solr";

    // we expect changes ensuring a legal collection name.
    final String colHoG = getAlias() + "__CRA__" + noSpaces("HHS "+ SHIPS[1]) + "_solr";

    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();
    List<String> expectedConfigSetNames = Arrays.asList("_default", configName);

    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts
    assertTrue("We expect at least 2 configSets",
        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());
    assertTrue("ConfigNames should include :" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));

    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, maxCardinality,
        CollectionAdminRequest.createCollection("_unused_", configName, 1, 1))
        .setMustMatch(mustMatchRegex)
        .process(solrClient);

    // now we index a document
    addDocsAndCommit(true, newDoc("HHS " + SHIPS[0] + "_solr"));
    //assertDocRoutedToCol(lastDocId, col23rd);

    String uninitialized = getAlias() + "__CRA__" + CategoryRoutedAlias.UNINITIALIZED;
    assertInvariants(colVogon, uninitialized);

    addDocsAndCommit(true, newDoc("HHS "+ SHIPS[1] + "_solr"));

    assertInvariants(colVogon, colHoG);

    // should fail since max cardinality is reached
    testFailedDocument(newDoc(SHIPS[2]), "does not match " + CategoryRoutedAlias.ROUTER_MUST_MATCH);
    assertInvariants(colVogon, colHoG);
  }

