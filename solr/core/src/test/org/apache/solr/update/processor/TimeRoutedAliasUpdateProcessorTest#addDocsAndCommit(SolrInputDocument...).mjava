  /** Adds these documents and commits, returning when they are committed.
   * We randomly go about this in different ways. */
  private void addDocsAndCommit(SolrInputDocument... solrInputDocuments) throws Exception {
    // we assume these are not old docs!

    // this is a list of the collections & the alias name.  Use to pick randomly where to send.
    //   (it doesn't matter where we send docs since the alias is honored at the URP level)
    List<String> collections = new ArrayList<>();
    collections.add(alias);
    collections.addAll(new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias));

    int commitWithin = random().nextBoolean() ? -1 : 500; // if -1, we commit explicitly instead
    int numDocsBefore = queryNumDocs();
    if (random().nextBoolean()) {
      // send in separate requests
      for (SolrInputDocument solrInputDocument : solrInputDocuments) {
        String col = collections.get(random().nextInt(collections.size()));
        solrClient.add(col, solrInputDocument, commitWithin);
      }
    } else {
      // send in a batch.
      String col = collections.get(random().nextInt(collections.size()));
      solrClient.add(col, Arrays.asList(solrInputDocuments), commitWithin);
    }
    String col = collections.get(random().nextInt(collections.size()));
    if (commitWithin == -1) {
      solrClient.commit(col);
    } else {
      // check that it all got committed eventually
      int numDocs = queryNumDocs();
      if (numDocs == numDocsBefore + solrInputDocuments.length) {
        System.err.println("Docs committed sooner than expected.  Bug or slow test env?");
        return;
      }
      // wait until it's committed, plus some play time for commit to become visible
      Thread.sleep(commitWithin + 200);
      numDocs = queryNumDocs();
      assertEquals("not committed.  Bug or a slow test?",
          numDocsBefore + solrInputDocuments.length, numDocs);
    }
  }

