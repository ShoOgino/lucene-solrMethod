  /** 
   * @see #callComputeInPlaceUpdatableFields
   * @see AtomicUpdateDocumentMerger#computeInPlaceUpdatableFields 
   */
  @Test
  public void testComputeInPlaceUpdatableFields() throws Exception {
    Set<String> inPlaceUpdatedFields = new HashSet<String>();

    // these asserts should hold true regardless of type, or wether the field has a default
    List<String> fieldsToCheck = Arrays.asList("inplace_updatable_float",
                                               "inplace_updatable_int",
                                               "inplace_updatable_float_with_default",
                                               "inplace_updatable_int_with_default");
    Collections.shuffle(fieldsToCheck, random()); // ... and regardless of order checked
    for (String field : fieldsToCheck) {
      // In-place updatable field updated before it exists SHOULD NOW BE in-place updated (since LUCENE-8316):
      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc("id", "1", "_version_", 42L,
                                                                    field, map("set", 10)));
      assertTrue(field, inPlaceUpdatedFields.contains(field));
      
      // In-place updatable field updated after it exists SHOULD BE in-place updated:
      addAndGetVersion(sdoc("id", "1", field, "0"), params()); // setting up the dv
      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc("id", "1", "_version_", 42L,
                                                                    field, map("set", 10)));
      assertTrue(field, inPlaceUpdatedFields.contains(field));

      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc("id", "1", "_version_", 42L,
                                                                    field, map("inc", 10)));
      assertTrue(field, inPlaceUpdatedFields.contains(field));

      final String altFieldWithDefault = field.contains("float") ?
        "inplace_updatable_int_with_default" : "inplace_updatable_int_with_default";
      
      // Updating an in-place updatable field (with a default) for the first time.
      // DV for it should have been already created when first document was indexed (above),
      // since it has a default value
      inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc("id", "1", "_version_", 42L,
                                                                    altFieldWithDefault, map("set", 10)));
      assertTrue(field + " -> " + altFieldWithDefault, inPlaceUpdatedFields.contains(altFieldWithDefault));
      
      deleteAllAndCommit();
    }
  
    // Non in-place updates
    addAndGetVersion(sdoc("id", "1", "stored_i", "0"), params()); // setting up the dv
    assertTrue("stored field updated",
               callComputeInPlaceUpdatableFields(sdoc("id", "1", "_version_", 42L,
                                                      "stored_i", map("inc", 1))).isEmpty());
    
    assertTrue("full document update",
               callComputeInPlaceUpdatableFields(sdoc("id", "1", "_version_", 42L,
                                                      "inplace_updatable_int_with_default", "100")).isEmpty());
  
    assertFalse("non existent dynamic dv field updated first time",
               callComputeInPlaceUpdatableFields(sdoc("id", "1", "_version_", 42L,
                                                      "new_updatable_int_i_dvo", map("set", 10))).isEmpty());
    
    // After adding a full document with the dynamic dv field, in-place update should work
    addAndGetVersion(sdoc("id", "2", "new_updatable_int_i_dvo", "0"), params()); // setting up the dv
    if (random().nextBoolean()) {
      assertU(commit("softCommit", "false"));
    }
    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc("id", "2", "_version_", 42L,
                                                                  "new_updatable_int_i_dvo", map("set", 10)));
    assertTrue(inPlaceUpdatedFields.contains("new_updatable_int_i_dvo"));

    // for copy fields, regardless of whether the source & target support inplace updates,
    // it won't be inplace if the DVs don't exist yet...
    assertTrue("inplace fields should be empty when doc has no copyfield src values yet",
               callComputeInPlaceUpdatableFields(sdoc("id", "1", "_version_", 42L,
                                                      "copyfield1_src__both_updatable", map("set", 1),
                                                      "copyfield2_src__only_src_updatable", map("set", 2))).isEmpty());

    // now add a doc that *does* have the src field for each copyfield...
    addAndGetVersion(sdoc("id", "3",
                          "copyfield1_src__both_updatable", -13,
                          "copyfield2_src__only_src_updatable", -15), params()); 
    if (random().nextBoolean()) {
      assertU(commit("softCommit", "false"));
    }
    
    // If a supported dv field has a copyField target which is supported, it should be an in-place update
    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc("id", "3", "_version_", 42L,
                                                                  "copyfield1_src__both_updatable", map("set", 10)));
    assertTrue(inPlaceUpdatedFields.contains("copyfield1_src__both_updatable"));

    // If a supported dv field has a copyField target which is not supported, it should not be an in-place update
    inPlaceUpdatedFields = callComputeInPlaceUpdatableFields(sdoc("id", "3", "_version_", 42L,
                                                                  "copyfield2_src__only_src_updatable", map("set", 10)));
    assertTrue(inPlaceUpdatedFields.isEmpty());
  }

