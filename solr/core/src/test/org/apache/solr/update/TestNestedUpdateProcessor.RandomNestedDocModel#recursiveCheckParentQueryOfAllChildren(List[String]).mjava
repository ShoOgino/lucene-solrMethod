    /** 
     * recursively check path permutations using <code>*:*</code> inner query, asserting that the 
     * only docs matched have the expected path, and at least one kid (since this is the "parents" parser)
     *
     * (using <code>*:*</code> as our inner query keeps the validation simple and also helps stress out 
     * risk of matching incorrect docs if the 'which' param is wrong)
     *
     * @return total number of queries checked (assuming no assertion failures)
     */
    public int recursiveCheckParentQueryOfAllChildren(List<String> parent_path) {
      final String p = joinPath(parent_path);
      final int expectedParents = numDocsWithPathWithKids.getOrDefault(p, 0);
      assertQ(req(parentQueryMaker(p, "*:*"),
                  "rows", "9999",
                  "_trace_path_tested", p,
                  "fl", "test_path_s,num_direct_kids_s",
                  "indent", "true")
              , "//result/@numFound="+expectedParents
              , "count(//doc)="+expectedParents
              , "count(//doc/str[@name='test_path_s'][.='"+p+"'])="+expectedParents
              , "0=count(//doc/str[@name='num_direct_kids_s'][.='0'])"
              );
      int numChecked = 1;

      // no point in recursing on the current path if we already have no results found...
      if (0 < expectedParents) {
        for (String next : PATH_ELEMENTS) {
          final List<String> next_path = new ArrayList<>(parent_path);
          next_path.add(next);
          numChecked += recursiveCheckParentQueryOfAllChildren(next_path);
        }
      }
      return numChecked;
    }

