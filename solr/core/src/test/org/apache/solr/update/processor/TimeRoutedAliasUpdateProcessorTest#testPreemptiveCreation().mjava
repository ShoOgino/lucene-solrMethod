  @Test
  @Slow
  public void testPreemptiveCreation() throws Exception {
    String configName = getSaferTestName();
    createConfigSet(configName);

    final int numShards = 1 ;
    final int numReplicas = 1 ;
    CollectionAdminRequest.createTimeRoutedAlias(alias, "2017-10-23T00:00:00Z", "+1DAY", getTimeField(),
        CollectionAdminRequest.createCollection("_unused_", configName, numShards, numReplicas))
        .setPreemptiveCreateWindow("3HOUR")
        .process(solrClient);

    // needed to verify that preemptive creation in one alias doesn't inhibit preemptive creation in another
    CollectionAdminRequest.createTimeRoutedAlias(alias2, "2017-10-23T00:00:00Z", "+1DAY", getTimeField(),
        CollectionAdminRequest.createCollection("_unused_", configName, numShards, numReplicas))
        .setPreemptiveCreateWindow("3HOUR")
        .process(solrClient);

    addOneDocSynchCreation(numShards, alias);
    addOneDocSynchCreation(numShards, alias2);

    List<String> cols;
    ModifiableSolrParams params = params();

    // Using threads to ensure that two TRA's  are simultaneously preemptively creating and don't
    // interfere with each other
    ExecutorService executorService = ExecutorUtil.newMDCAwareCachedThreadPool("TimeRoutedAliasProcessorTestx-testPreemptiveCreation");

    Exception[] threadExceptions = new Exception[2];
    boolean[] threadStarted = new boolean[2];
    boolean[] threadFinished = new boolean[2];
    try {
      CountDownLatch starter = new CountDownLatch(1);
      executorService.submit(() -> {
        threadStarted[0] = true;
        try {
          starter.await();
          concurrentUpdates(params, alias);
        } catch (Exception e) {
          threadExceptions[0] = e;
        }
        threadFinished[0] = true;
      });

      executorService.submit(() -> {
        threadStarted[1] = true;
        try {
          starter.await();
          concurrentUpdates(params, alias2);
        } catch (Exception e) {
          threadExceptions[1] = e;
        }
        threadFinished[1] = true;
      });
      starter.countDown();
    } finally {
      ExecutorUtil.shutdownAndAwaitTermination(executorService);
    }

    // threads are known to be terminated by now, check for exceptions
    for (Exception threadException : threadExceptions) {
      if (threadException != null) {
        Thread.sleep(5000); // avoid spurious fails due to TRA thread not done yet
        throw threadException;
      }
    }

    // just for confidence that there's nothing dodgy about how the threads executed.
    assertTrue(threadStarted[0]);
    assertTrue(threadStarted[1]);
    assertTrue(threadFinished[0]);
    assertTrue(threadFinished[1]);

    // if one of these times out then the test has failed due to interference between aliases
    waitColAndAlias(alias, TRA, "2017-10-26", numShards);
    waitColAndAlias(alias2, TRA, "2017-10-26", numShards);

    // these next checks will be checking that a collection DID NOT get created asynchronously, there's
    // no way to wait for something that should never exist to not exist... so all we can do is sleep
    // a good while before checking
    Thread.sleep(5000);

    // after this we can ignore alias2
    checkPreemptiveCase1(alias);
    checkPreemptiveCase1(alias2);

    // Some designs contemplated with close hooks were not properly restricted to the core and would have
    // failed after other cores with other TRAs were stopped. Make sure that we don't fall into that trap in
    // the future. The basic problem with a close hook solution is that one either winds up putting the
    // executor on the TRAUP where it's duplicated/initiated for every request, or putting it at the class level
    // in which case the hook will remove it for all TRA's which can pass a single TRA test nicely but is not safe
    // where multiple TRA's might come and go.
    //
    // Start and stop some cores that have TRA's... 2x2 used to ensure every jetty gets at least one

    CollectionAdminRequest.createTimeRoutedAlias(getSaferTestName() + "foo", "2017-10-23T00:00:00Z", "+1DAY", getTimeField(),
        CollectionAdminRequest.createCollection("_unused_", configName, 2, 2))
        .setPreemptiveCreateWindow("3HOUR")
        .process(solrClient);

    waitColAndAlias(getSaferTestName() + "foo", TRA, "2017-10-23",2);
    waitCoreCount(getSaferTestName() + "foo" + TRA + "2017-10-23", 4); // prove this works, for confidence in deletion checking below.
    assertUpdateResponse(solrClient.add(getSaferTestName() + "foo",
        sdoc("id","1","timestamp_dt", "2017-10-23T00:00:00Z") // no extra collections should be created
    ));
    assertUpdateResponse(solrClient.commit(getSaferTestName() + "foo"));

    List<String> foo = solrClient.getClusterStateProvider().resolveAlias(getSaferTestName() + "foo");

    CollectionAdminRequest.deleteAlias(getSaferTestName() + "foo").process(solrClient);

    for (String colName : foo) {
      CollectionAdminRequest.deleteCollection(colName).process(solrClient);
      waitCoreCount(colName, 0);
    }

    // if the design for terminating our executor is correct create/delete above will not cause failures below
    // continue testing...

    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);
    assertEquals(4,cols.size()); // only one created in async case

    // now test with pre-create window longer than time slice, only one creation per request
    CollectionAdminRequest.setAliasProperty(alias)
        .addProperty(TimeRoutedAlias.ROUTER_PREEMPTIVE_CREATE_MATH, "3DAY").process(solrClient);

    assertUpdateResponse(add(alias, Arrays.asList(
        sdoc("id", "7", "timestamp_dt", "2017-10-25T23:01:00Z"), // should cause preemptive creation of 10-27 now
        sdoc("id", "71", "timestamp_dt", "2017-10-25T23:02:00Z")), // should not cause preemptive creation of 10-28 now
        params));
    assertUpdateResponse(solrClient.commit(alias));
    waitColAndAlias(alias, TRA, "2017-10-27", numShards);

    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);
    assertEquals(5,cols.size()); // only one created in async case
    assertNumDocs("2017-10-23", 1, alias);
    assertNumDocs("2017-10-24", 1, alias);
    assertNumDocs("2017-10-25", 6, alias);
    assertNumDocs("2017-10-26", 0, alias);
    assertNumDocs("2017-10-27", 0, alias);


    assertUpdateResponse(add(alias, Collections.singletonList(
        sdoc("id", "8", "timestamp_dt", "2017-10-25T23:01:00Z")), // should cause preemptive creation of 10-28 now
        params));
    assertUpdateResponse(solrClient.commit(alias));
    waitColAndAlias(alias, TRA, "2017-10-28", numShards);

    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);
    assertEquals(6,cols.size());
    assertNumDocs("2017-10-23", 1, alias);
    assertNumDocs("2017-10-24", 1, alias);
    assertNumDocs("2017-10-25", 7, alias);
    assertNumDocs("2017-10-26", 0, alias);
    assertNumDocs("2017-10-27", 0, alias);
    assertNumDocs("2017-10-28", 0, alias);

    QueryResponse resp;
    resp = solrClient.query(alias, params(
        "q", "*:*",
        "rows", "10"));
    assertEquals(9, resp.getResults().getNumFound());

    assertUpdateResponse(add(alias, Arrays.asList(
        sdoc("id", "9", "timestamp_dt", "2017-10-27T23:01:00Z"), // should cause preemptive creation

        // If these are not ignored properly this test will fail during cleanup with a message about router.name being
        // required. This happens because the test finishes while overseer threads are still trying to invoke maintain
        // after the @After method has deleted collections and emptied out the aliases.... this leaves the maintain
        // command cloning alias properties Aliases.EMPTY and thus not getting a value from router.name
        // (normally router.name == 'time') The check for non-blank router.name  happens to be the first validation.
        // There is a small chance this could slip through without a fail occasionally, but it was 100% with just one
        // of these.
        sdoc("id", "10", "timestamp_dt", "2017-10-28T23:01:00Z"),  // should be ignored due to in progress creation
        sdoc("id", "11", "timestamp_dt", "2017-10-28T23:02:00Z"),  // should be ignored due to in progress creation
        sdoc("id", "12", "timestamp_dt", "2017-10-28T23:03:00Z")), // should be ignored due to in progress creation
        params));
    assertUpdateResponse(solrClient.commit(alias));
    waitColAndAlias(alias, TRA, "2017-10-29", numShards);

    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);
    assertEquals(7,cols.size());
    assertNumDocs("2017-10-23", 1, alias);
    assertNumDocs("2017-10-24", 1, alias);
    assertNumDocs("2017-10-25", 7, alias);
    assertNumDocs("2017-10-26", 0, alias);
    assertNumDocs("2017-10-27", 1, alias);
    assertNumDocs("2017-10-28", 3, alias); // should get through even though preemptive creation ignored it.
    assertNumDocs("2017-10-29", 0, alias);

    resp = solrClient.query(alias, params(
        "q", "*:*",
        "rows", "0"));
    assertEquals(13, resp.getResults().getNumFound());

    // Sych creation with an interval longer than the time slice for the alias..
    assertUpdateResponse(add(alias, Collections.singletonList(
        sdoc("id", "13", "timestamp_dt", "2017-10-30T23:03:00Z")), // lucky?
        params));
    assertUpdateResponse(solrClient.commit(alias));
    waitColAndAlias(alias, TRA, "2017-10-30", numShards);

    // removed support for this case because it created a LOT of complexity for the benefit of attempting to
    // (maybe) not pause again after already hitting a synchronous creation (but only if asynch gets it done first,
    // otherwise we have a race... not enough benefit to justify the support/complexity.
    //
    // Now we just let the next doc take care of it...
    //
    // waitColAndAlias(alias, TRA, "2017-10-31", numShards); // spooky! async case arising in middle of sync creation!!

    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);
    assertEquals(8,cols.size());
    assertNumDocs("2017-10-23", 1, alias);
    assertNumDocs("2017-10-24", 1, alias);
    assertNumDocs("2017-10-25", 7, alias);
    assertNumDocs("2017-10-26", 0, alias);
    assertNumDocs("2017-10-27", 1, alias);
    assertNumDocs("2017-10-28", 3, alias); // should get through even though preemptive creation ignored it.
    assertNumDocs("2017-10-29", 0, alias);
    assertNumDocs("2017-10-30", 1, alias);

    resp = solrClient.query(alias, params(
        "q", "*:*",
        "rows", "0"));
    assertEquals(14, resp.getResults().getNumFound());

    assertUpdateResponse(add(alias, Collections.singletonList(
        sdoc("id", "14", "timestamp_dt", "2017-10-30T23:01:00Z")), // should cause preemptive creation 10-31
        params));
    waitColAndAlias(alias, TRA, "2017-10-31", numShards);

    assertUpdateResponse(add(alias, Collections.singletonList(
        sdoc("id", "15", "timestamp_dt", "2017-10-30T23:01:00Z")), // should cause preemptive creation 11-01
        params));
    waitColAndAlias(alias, TRA, "2017-11-01", numShards);

    assertUpdateResponse(add(alias, Collections.singletonList(
        sdoc("id", "16", "timestamp_dt", "2017-10-30T23:01:00Z")), // should cause preemptive creation 11-02
        params));
    waitColAndAlias(alias, TRA, "2017-11-02", numShards);

    assertUpdateResponse(add(alias, Collections.singletonList(
        sdoc("id", "17", "timestamp_dt", "2017-10-30T23:01:00Z")), // should NOT cause preemptive creation 11-03
        params));

    cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(alias);
    assertFalse(cols.contains("myalias" + TRA + "2017-11-03"));

    assertUpdateResponse(add(alias, Collections.singletonList(
        sdoc("id", "18", "timestamp_dt", "2017-10-31T23:01:00Z")), // should cause preemptive creation 11-03
        params));
    waitColAndAlias(alias, TRA, "2017-11-03",numShards);

  }

