  /***
  @Test
  public void testSmallBlockDirect() throws Exception {
    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req("*:*"));
    final List<SolrInputDocument> docs = Arrays.asList(new SolrInputDocument() {
      {
        addField("id", id());
        addField(child, "a");
      }
    }, new SolrInputDocument() {
      {
        addField("id", id());
        addField(parent, "B");
      }
    });
    cmd.setDocs(docs);
    assertEquals(2, h.getCore().getUpdateHandler().addBlock(cmd));
    assertU(commit());
    
    final SolrIndexSearcher searcher = getSearcher();
    assertQ(req("*:*"), "//*[@numFound='2']");
    assertSingleParentOf(searcher, one("a"), "B");
  }
  
  @Test
  public void testEmptyDirect() throws Exception {
    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req("*:*"));
    // let's add empty one
    cmd.setDocs(Collections.<SolrInputDocument> emptyList());
    assertEquals(0,
        ((DirectUpdateHandler2) h.getCore().getUpdateHandler()).addBlock(cmd));
    assertU(commit());
    
    assertQ(req("*:*"), "//*[@numFound='0']");
  }
   ***/
  
  @Test
  public void testExceptionThrown() throws Exception {
    final String abcD = block("abcD").asXML();
    log.info(abcD);
    assertBlockU(abcD);
    
    Document docToFail = DocumentHelper.createDocument();
    Element root = docToFail.addElement("add");
    Element doc1 = root.addElement("doc");
    attachField(doc1, "id", id());
    attachField(doc1, parent, "Y");
    attachField(doc1, "sample_i", "notanumber");
    Element subDoc1 = doc1.addElement("doc");
    attachField(subDoc1, "id", id());
    attachField(subDoc1, child, "x");
    Element doc2 = root.addElement("doc");
    attachField(doc2, "id", id());
    attachField(doc2, parent, "W");
    
    assertFailedBlockU(docToFail.asXML());
    
    assertBlockU(block("efgH").asXML());
    assertBlockU(commit());
    
    final SolrIndexSearcher searcher = getSearcher();
    assertQ(req("q","*:*","indent","true", "fl","id,parent_s,child_s"), "//*[@numFound='" + "abcDefgH".length() + "']");
    assertSingleParentOf(searcher, one("abc"), "D");
    assertSingleParentOf(searcher, one("efg"), "H");

    assertQ(req(child + ":x"), "//*[@numFound='0']");
    assertQ(req(parent + ":Y"), "//*[@numFound='0']");
    assertQ(req(parent + ":W"), "//*[@numFound='0']");
  }

