  /**
   * Test that the Update Processor Factory routes documents to leader shards and thus
   * avoids the possibility of introducing an extra hop to find the leader.
   *
   * @throws Exception when it blows up unexpectedly :)
   */
  @Slow
  @Test
  @LogLevel("org.apache.solr.update.processor.TrackingUpdateProcessorFactory=DEBUG")
  public void testSliceRouting() throws Exception {
    String configName = getSaferTestName();
    createConfigSet(configName);

    // each collection has 4 shards with 3 replicas for 12 possible destinations
    // 4 of which are leaders, and 8 of which should fail this test.
    final int numShards = 1 + random().nextInt(4);
    final int numReplicas = 1 + random().nextInt(3);
    CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, 20,
        CollectionAdminRequest.createCollection("_unused_", configName, numShards, numReplicas)
            .setMaxShardsPerNode(numReplicas*numShards))
        .process(solrClient);

    // cause some collections to be created
    assertUpdateResponse(solrClient.add(getAlias(), new SolrInputDocument("id","1",categoryField, SHIPS[0])));
    assertUpdateResponse(solrClient.add(getAlias(), new SolrInputDocument("id","2",categoryField, SHIPS[1])));
    assertUpdateResponse(solrClient.add(getAlias(), new SolrInputDocument("id","3",categoryField, SHIPS[2])));
    assertUpdateResponse(solrClient.commit(getAlias()));

    // wait for all the collections to exist...

    waitColAndAlias(getAlias(), "__CRA__", SHIPS[0], numShards);
    waitColAndAlias(getAlias(), "__CRA__", noSpaces(SHIPS[1]), numShards);
    waitColAndAlias(getAlias(), "__CRA__", noSpaces(SHIPS[2]), numShards);

    // at this point we now have 3 collections with 4 shards each, and 3 replicas per shard for a total of
    // 36 total replicas, 1/3 of which are leaders. We will add 3 docs and each has a 33% chance of hitting a
    // leader randomly and not causing a failure if the code is broken, but as a whole this test will therefore only have
    // about a 3.6% false positive rate (0.33^3). If that's not good enough, add more docs or more replicas per shard :).

    final String trackGroupName = getTrackUpdatesGroupName();
    final List<UpdateCommand> updateCommands;
    try {
      TrackingUpdateProcessorFactory.startRecording(trackGroupName);

      ModifiableSolrParams params = params("post-processor", "tracking-" + trackGroupName);
      List<SolrInputDocument> list = Arrays.asList(
          sdoc("id", "4", categoryField, SHIPS[0]),
          sdoc("id", "5", categoryField, SHIPS[1]),
          sdoc("id", "6", categoryField, SHIPS[2]));
      Collections.shuffle(list, random()); // order should not matter here
      assertUpdateResponse(add(getAlias(), list,
          params));
    } finally {
      updateCommands = TrackingUpdateProcessorFactory.stopRecording(trackGroupName);
    }
    assertRouting(numShards, updateCommands);
  }

