  @Test
  public void testUpdatingDocValues() throws Exception {
    long version1 = addAndGetVersion(sdoc("id", "1", "title_s", "first", "inplace_updatable_float", 41), null);
    long version2 = addAndGetVersion(sdoc("id", "2", "title_s", "second", "inplace_updatable_float", 42), null);
    long version3 = addAndGetVersion(sdoc("id", "3", "title_s", "third", "inplace_updatable_float", 43), null);
    assertU(commit("softCommit", "false"));
    assertQ(req("q", "*:*"), "//*[@numFound='3']");

    // the reason we're fetching these docids is to validate that the subsequent updates 
    // are done in place and don't cause the docids to change
    int docid1 = getDocId("1");
    int docid2 = getDocId("2");
    int docid3 = getDocId("3");

    // Check docValues were "set"
    version1 = addAndAssertVersion(version1, "id", "1", "inplace_updatable_float", map("set", 200));
    version2 = addAndAssertVersion(version2, "id", "2", "inplace_updatable_float", map("set", 300));
    version3 = addAndAssertVersion(version3, "id", "3", "inplace_updatable_float", map("set", 100));
    assertU(commit("softCommit", "false"));

    assertQ(req("q", "*:*", "sort", "id asc", "fl", "*,[docid]"),
        "//*[@numFound='3']",
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='200.0']",
        "//result/doc[2]/float[@name='inplace_updatable_float'][.='300.0']",
        "//result/doc[3]/float[@name='inplace_updatable_float'][.='100.0']",
        "//result/doc[1]/long[@name='_version_'][.='"+version1+"']",
        "//result/doc[2]/long[@name='_version_'][.='"+version2+"']",
        "//result/doc[3]/long[@name='_version_'][.='"+version3+"']",
        "//result/doc[1]/int[@name='[docid]'][.='"+docid1+"']",
        "//result/doc[2]/int[@name='[docid]'][.='"+docid2+"']",
        "//result/doc[3]/int[@name='[docid]'][.='"+docid3+"']"
        );

    // Check docValues are "inc"ed
    version1 = addAndAssertVersion(version1, "id", "1", "inplace_updatable_float", map("inc", 1));
    version2 = addAndAssertVersion(version2, "id", "2", "inplace_updatable_float", map("inc", -2));
    version3 = addAndAssertVersion(version3, "id", "3", "inplace_updatable_float", map("inc", 3));
    assertU(commit("softCommit", "false"));
    assertQ(req("q", "*:*", "sort", "id asc", "fl", "*,[docid]"),
        "//*[@numFound='3']",
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='201.0']",
        "//result/doc[2]/float[@name='inplace_updatable_float'][.='298.0']",
        "//result/doc[3]/float[@name='inplace_updatable_float'][.='103.0']",
        "//result/doc[1]/long[@name='_version_'][.='"+version1+"']",
        "//result/doc[2]/long[@name='_version_'][.='"+version2+"']",
        "//result/doc[3]/long[@name='_version_'][.='"+version3+"']",
        "//result/doc[1]/int[@name='[docid]'][.='"+docid1+"']",
        "//result/doc[2]/int[@name='[docid]'][.='"+docid2+"']",
        "//result/doc[3]/int[@name='[docid]'][.='"+docid3+"']"
        );

    // Check back to back "inc"s are working (off the transaction log)
    version1 = addAndAssertVersion(version1, "id", "1", "inplace_updatable_float", map("inc", 1));
    version1 = addAndAssertVersion(version1, "id", "1", "inplace_updatable_float", map("inc", 2)); // new value should be 204
    assertU(commit("softCommit", "false"));
    assertQ(req("q", "id:1", "fl", "*,[docid]"),
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='204.0']",
        "//result/doc[1]/long[@name='_version_'][.='"+version1+"']",
        "//result/doc[1]/int[@name='[docid]'][.='"+docid1+"']");

    // Now let the document be atomically updated (non-inplace), ensure the old docvalue is part of new doc
    version1 = addAndAssertVersion(version1, "id", "1", "title_s", map("set", "new first"));
    assertU(commit("softCommit", "false"));
    int newDocid1 = getDocId("1");
    assertTrue(newDocid1 != docid1);
    docid1 = newDocid1;

    assertQ(req("q", "id:1"),
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='204.0']",
        "//result/doc[1]/str[@name='title_s'][.='new first']",
        "//result/doc[1]/long[@name='_version_'][.='"+version1+"']");

    // Check if atomic update with "inc" to a docValue works
    version2 = addAndAssertVersion(version2, "id", "2", "title_s", map("set", "new second"), "inplace_updatable_float", map("inc", 2));
    assertU(commit("softCommit", "false"));
    int newDocid2 = getDocId("2");
    assertTrue(newDocid2 != docid2);
    docid2 = newDocid2;

    assertQ(req("q", "id:2"),
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='300.0']",
        "//result/doc[1]/str[@name='title_s'][.='new second']",
        "//result/doc[1]/long[@name='_version_'][.='"+version2+"']");

    // Check if docvalue "inc" update works for a newly created document, which is not yet committed
    // Case1: docvalue was supplied during add of new document
    long version4 = addAndGetVersion(sdoc("id", "4", "title_s", "fourth", "inplace_updatable_float", "400"), params());
    version4 = addAndAssertVersion(version4, "id", "4", "inplace_updatable_float", map("inc", 1));
    assertU(commit("softCommit", "false"));
    assertQ(req("q", "id:4"),
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='401.0']",
        "//result/doc[1]/long[@name='_version_'][.='"+version4+"']");

    // Check if docvalue "inc" update works for a newly created document, which is not yet committed
    // Case2: docvalue was not supplied during add of new document, should assume default
    long version5 = addAndGetVersion(sdoc("id", "5", "title_s", "fifth"), params());
    version5 = addAndAssertVersion(version5, "id", "5", "inplace_updatable_float", map("inc", 1));
    assertU(commit("softCommit", "false"));
    assertQ(req("q", "id:5"),
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='1.0']",
        "//result/doc[1]/long[@name='_version_'][.='"+version5+"']");

    // Check if docvalue "set" update works for a newly created document, which is not yet committed
    long version6 = addAndGetVersion(sdoc("id", "6", "title_s", "sixth"), params());
    version6 = addAndAssertVersion(version6, "id", "6", "inplace_updatable_float", map("set", 600));
    assertU(commit("softCommit", "false"));
    assertQ(req("q", "id:6"),
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='600.0']",
        "//result/doc[1]/long[@name='_version_'][.='"+version6+"']");

    // Check optimistic concurrency works
    long v20 = addAndGetVersion(sdoc("id", "20", "title_s","first", "inplace_updatable_float", 100), params());    
    SolrException exception = expectThrows(SolrException.class, () -> {
      addAndGetVersion(sdoc("id","20", "_version_", -1, "inplace_updatable_float", map("inc", 1)), null);
    });
    assertEquals(exception.toString(), SolrException.ErrorCode.CONFLICT.code, exception.code());
    assertThat(exception.getMessage(), containsString("expected=-1"));
    assertThat(exception.getMessage(), containsString("actual="+v20));


    long oldV20 = v20;
    v20 = addAndAssertVersion(v20, "id","20", "_version_", v20, "inplace_updatable_float", map("inc", 1));
    exception = expectThrows(SolrException.class, () -> {
      addAndGetVersion(sdoc("id","20", "_version_", oldV20, "inplace_updatable_float", map("inc", 1)), null);
    });
    assertEquals(exception.toString(), SolrException.ErrorCode.CONFLICT.code, exception.code());
    assertThat(exception.getMessage(), containsString("expected="+oldV20));
    assertThat(exception.getMessage(), containsString("actual="+v20));

    v20 = addAndAssertVersion(v20, "id","20", "_version_", v20, "inplace_updatable_float", map("inc", 1));
    // RTG before a commit
    assertJQ(req("qt","/get", "id","20", "fl","id,inplace_updatable_float,_version_"),
        "=={'doc':{'id':'20', 'inplace_updatable_float':" + 102.0 + ",'_version_':" + v20 + "}}");
    assertU(commit("softCommit", "false"));
    assertQ(req("q", "id:20"), 
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='102.0']",
        "//result/doc[1]/long[@name='_version_'][.='"+v20+"']");

    // Check if updated DVs can be used for search
    assertQ(req("q", "inplace_updatable_float:102"), 
        "//result/doc[1]/str[@name='id'][.='20']",
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='102.0']",
        "//result/doc[1]/long[@name='_version_'][.='"+v20+"']");

    // Check if updated DVs can be used for sorting
    assertQ(req("q", "*:*", "sort", "inplace_updatable_float asc"), 
        "//result/doc[4]/str[@name='id'][.='1']",
        "//result/doc[4]/float[@name='inplace_updatable_float'][.='204.0']",

        "//result/doc[5]/str[@name='id'][.='2']",
        "//result/doc[5]/float[@name='inplace_updatable_float'][.='300.0']",

        "//result/doc[3]/str[@name='id'][.='3']",
        "//result/doc[3]/float[@name='inplace_updatable_float'][.='103.0']",

        "//result/doc[6]/str[@name='id'][.='4']",
        "//result/doc[6]/float[@name='inplace_updatable_float'][.='401.0']",

        "//result/doc[1]/str[@name='id'][.='5']",
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='1.0']",

        "//result/doc[7]/str[@name='id'][.='6']",
        "//result/doc[7]/float[@name='inplace_updatable_float'][.='600.0']",

        "//result/doc[2]/str[@name='id'][.='20']",
        "//result/doc[2]/float[@name='inplace_updatable_float'][.='102.0']");
  }

