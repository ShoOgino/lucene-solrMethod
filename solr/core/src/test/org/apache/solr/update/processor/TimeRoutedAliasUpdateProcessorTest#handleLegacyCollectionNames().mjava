  /**
   * Need to ensure that the existing TRA's gracefully handle, old, new and mixtures thereof. TRA's with
   * an autoDeleteAge setting will gracefully convert to the new format over time.
   */
  @Test
  public void handleLegacyCollectionNames() throws Exception {
    manuallyConstructLegacyTRA();

    // OK we now have an alias with legacy names and 2 documents. Let's try to query it to ensure query time back compat

    QueryResponse resp = solrClient.query(alias, params(
        "q", "*:*",
        "rows", "10"
    ));

    assertEquals(2,resp.getResults().getNumFound());

    // verify that we can still add documents to it.
    assertUpdateResponse(solrClient.add(alias,
        sdoc("id","3","timestamp_dt", "2017-10-23T00:00:01Z")
    ));
    solrClient.commit(alias);
    resp = solrClient.query(alias, params(
        "q", "*:*",
        "rows", "10"
    ));
    assertEquals(3,resp.getResults().getNumFound());


    // verify that it can create new collections
    assertUpdateResponse(solrClient.add(alias,
        sdoc("id","4","timestamp_dt", "2017-10-24T23:00:01Z") // preemptive
    ));
    solrClient.commit(alias);
    waitColAndAlias(alias, TRA, "2017-10-25",1);

    // verify that mixed old/new collections works for update/query
    resp = solrClient.query(alias, params(
        "q", "*:*",
        "rows", "10"
    ));
    assertEquals(4,resp.getResults().getNumFound());

    // verify that documents go to the right collections

    assertUpdateResponse(solrClient.add(alias,
        sdoc("id","5","timestamp_dt", "2017-10-25T12:00:01Z") // preemptive
    ));
    solrClient.commit(alias);

    resp = solrClient.query("myalias_2017-10-23", params(
        "q", "*:*",
        "rows", "10",
        "sort", "id asc"
    ));
    assertEquals(2,resp.getResults().getNumFound());
    assertEquals(resp.getResults().get(0).getFirstValue("id"), "1");
    assertEquals(resp.getResults().get(1).getFirstValue("id"), "3");

    resp = solrClient.query("myalias_2017-10-24", params(
        "q", "*:*",
        "rows", "10",
        "sort", "id asc"
    ));
    assertEquals(2,resp.getResults().getNumFound());
    assertEquals(resp.getResults().get(0).getFirstValue("id"), "2");
    assertEquals(resp.getResults().get(1).getFirstValue("id"), "4");

    resp = solrClient.query("myalias" + TRA + "2017-10-25", params(
        "q", "*:*",
        "rows", "10",
        "sort", "id asc"
    ));
    assertEquals(1,resp.getResults().getNumFound());
    assertEquals(resp.getResults().get(0).getFirstValue("id"), "5");

    // verify that auto-delete will age out old collections
    checkCollectionCountIs(3);

    assertUpdateResponse(solrClient.add(alias,
        sdoc("id","6","timestamp_dt", "2017-10-26T12:00:01Z") // preemptive
    ));
    waitColAndAlias(alias, TRA,"2017-10-26",1);
    checkCollectionCountIs(3)
        .containsAll(Arrays.asList(
            "myalias_2017-10-24",
            "myalias" + TRA + "2017-10-25",
            "myalias" + TRA + "2017-10-26"));

    assertUpdateResponse(solrClient.add(alias,
        sdoc("id","7","timestamp_dt", "2017-10-27T12:00:01Z") // preemptive
    ));
    waitColAndAlias(alias, TRA,"2017-10-27",1);
    waitCoreCount("myalias_2017-10-23",0);
    checkCollectionCountIs(3)
        .containsAll(Arrays.asList(
            "myalias" + TRA + "2017-10-25",
            "myalias" + TRA + "2017-10-26",
            "myalias" + TRA + "2017-10-27"));

    // verify that auto-delete works on new collections.
    assertUpdateResponse(solrClient.add(alias,
        sdoc("id","8","timestamp_dt", "2017-10-28T12:00:01Z") // preemptive
    ));
    waitColAndAlias(alias, TRA,"2017-10-28",1);
    waitCoreCount("myalias_2017-10-24",0);
    checkCollectionCountIs(3)
        .containsAll(Arrays.asList(
            "myalias" + TRA + "2017-10-26",
            "myalias" + TRA + "2017-10-27",
            "myalias" + TRA + "2017-10-28"));


    solrClient.commit(alias);

    resp = solrClient.query(alias, params(
        "q", "*:*",
        "rows", "10"
    ));
    assertEquals(3,resp.getResults().getNumFound());

  }

