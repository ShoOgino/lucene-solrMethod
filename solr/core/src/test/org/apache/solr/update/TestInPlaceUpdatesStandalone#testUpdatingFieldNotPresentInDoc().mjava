  @Test
  public void testUpdatingFieldNotPresentInDoc() throws Exception {
    long version1 = addAndGetVersion(sdoc("id", "1", "title_s", "first"), null);
    long version2 = addAndGetVersion(sdoc("id", "2", "title_s", "second"), null);
    long version3 = addAndGetVersion(sdoc("id", "3", "title_s", "third"), null);
    assertU(commit("softCommit", "false"));
    assertQ(req("q", "*:*"), "//*[@numFound='3']");

    // subsequent updates shouldn't cause docid changes
    int docid1 = getDocId("1");
    int docid2 = getDocId("2");
    int docid3 = getDocId("3");

    // updating fields which are not present in the document
    // tests both set and inc with different fields
    version1 = addAndAssertVersion(version1, "id", "1", "inplace_updatable_float", map("set", 200));
    version2 = addAndAssertVersion(version2, "id", "2", "inplace_updatable_float", map("inc", 100));
    version3 = addAndAssertVersion(version3, "id", "3", "inplace_updatable_float", map("set", 300));
    version1 = addAndAssertVersion(version1, "id", "1", "inplace_updatable_int", map("set", 300));
    assertU(commit("softCommit", "false"));

    assertQ(req("q", "*:*", "sort", "id asc", "fl", "*,[docid]"),
        "//*[@numFound='3']",
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='200.0']",
        "//result/doc[1]/int[@name='inplace_updatable_int'][.='300']",
        "//result/doc[2]/float[@name='inplace_updatable_float'][.='100.0']",
        "//result/doc[3]/float[@name='inplace_updatable_float'][.='300.0']",
        "//result/doc[1]/long[@name='_version_'][.='"+version1+"']",
        "//result/doc[2]/long[@name='_version_'][.='"+version2+"']",
        "//result/doc[3]/long[@name='_version_'][.='"+version3+"']",
        "//result/doc[1]/int[@name='[docid]'][.='"+docid1+"']",
        "//result/doc[2]/int[@name='[docid]'][.='"+docid2+"']",
        "//result/doc[3]/int[@name='[docid]'][.='"+docid3+"']"
    );

    // adding new field which is not present in any docs but matches dynamic field rule
    // and satisfies inplace condition should be treated as inplace update
    version1 = addAndAssertVersion(version1, "id", "1", "inplace_updatable_i_dvo", map("set", 200));
    assertU(commit("softCommit", "false"));
    assertQ(req("q", "id:1", "sort", "id asc", "fl", "*,[docid]"),
        "//*[@numFound='1']",
        "//result/doc[1]/float[@name='inplace_updatable_float'][.='200.0']",
        "//result/doc[1]/int[@name='inplace_updatable_int'][.='300']",
        "//result/doc[1]/int[@name='[docid]'][.='"+docid1+"']",
        "//result/doc[1]/int[@name='inplace_updatable_i_dvo'][.='200']"
        );

    // delete everything
    deleteAllAndCommit();

    // test for document with child documents
    SolrInputDocument doc = new SolrInputDocument();
    doc.setField("id", "1");
    doc.setField("title_s", "parent");

    SolrInputDocument child1 = new SolrInputDocument();
    child1.setField("id", "1_1");
    child1.setField("title_s", "child1");
    SolrInputDocument child2 = new SolrInputDocument();
    child2.setField("id", "1_2");
    child2.setField("title_s", "child2");

    doc.addChildDocument(child1);
    doc.addChildDocument(child2);
    long version = addAndGetVersion(doc, null);
    assertU(commit("softCommit", "false"));
    assertQ(req("q", "*:*"), "//*[@numFound='3']");

    int parentDocId = getDocId("1");
    int childDocid1 = getDocId("1_1");
    int childDocid2 = getDocId("1_2");
    version = addAndAssertVersion(version, "id", "1", "inplace_updatable_float", map("set", 200));
    version = addAndAssertVersion(version, "id", "1", "inplace_updatable_int", map("inc", 300));
    assertU(commit("softCommit", "false"));

    // first child docs would be returned followed by parent doc
    assertQ(req("q", "*:*", "fl", "*,[docid]"),
        "//*[@numFound='3']",
        "//result/doc[3]/float[@name='inplace_updatable_float'][.='200.0']",
        "//result/doc[3]/int[@name='inplace_updatable_int'][.='300']",
        "//result/doc[3]/int[@name='[docid]'][.='"+parentDocId+"']",
        "//result/doc[1]/int[@name='[docid]'][.='"+childDocid1+"']",
        "//result/doc[2]/int[@name='[docid]'][.='"+childDocid2+"']"
    );
  }

