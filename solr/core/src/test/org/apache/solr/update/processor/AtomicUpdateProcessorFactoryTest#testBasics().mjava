  public void testBasics() throws Exception {

    AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),
        new ModifiableSolrParams()
            .add("processor", "atomic")
            .add("atomic.cat", "add")
            .add("atomic.title", "set")
            .add("atomic.count_i", "set")
            .add("atomic.name_s", "set")
            .add("atomic.multiDefault", "set")
            .add("commit","true")
    ));

    cmd.solrDoc = new SolrInputDocument();
    cmd.solrDoc.addField("id", 1);
    cmd.solrDoc.addField("cat", "human");
    cmd.solrDoc.addField("title", "Mr");
    cmd.solrDoc.addField("count_i", 20);
    cmd.solrDoc.addField("name_s", "Virat");
    cmd.solrDoc.addField("multiDefault", "Delhi");

    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();
    factory.inform(h.getCore());
    factory.getInstance(cmd.getReq(), new SolrQueryResponse(),
        new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),
            new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);

    assertU(commit());

    assertQ("Check the total number of docs",
        req("q", "id:1")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "cat:human")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "title:Mr")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "count_i:20")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "name_s:Virat")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "multiDefault:Delhi")
        , "//result[@numFound=1]");

    cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),
        new ModifiableSolrParams()
            .add("processor", "atomic")
            .add("atomic.cat", "add")
            .add("atomic.title", "set")
            .add("atomic.count_i", "inc")
            .add("atomic.name_s", "remove")
            .add("atomic.multiDefault", "removeregex")
            .add("commit","true")
    ));

    cmd.solrDoc = new SolrInputDocument();
    cmd.solrDoc.addField("id", 1);
    cmd.solrDoc.addField("cat", "animal");
    cmd.solrDoc.addField("title", "Dr");
    cmd.solrDoc.addField("count_i", 20);
    cmd.solrDoc.addField("name_s", "Virat");
    cmd.solrDoc.addField("multiDefault", ".elh.");

    factory = new AtomicUpdateProcessorFactory();
    factory.inform(h.getCore());
    factory.getInstance(cmd.getReq(), new SolrQueryResponse(),
        new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),
            new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);

    assertU(commit());

    assertQ("Check the total number of docs",
        req("q", "id:1")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "cat:human")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "cat:animal")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "title:Mr")
        , "//result[@numFound=0]");

    assertQ("Check the total number of docs",
        req("q", "title:Dr")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "count_i:20")
        , "//result[@numFound=0]");

    assertQ("Check the total number of docs",
        req("q", "count_i:40")
        , "//result[@numFound=1]");

    assertQ("Check the total number of docs",
        req("q", "name_s:Virat")
        , "//result[@numFound=0]");

    assertQ("Check the total number of docs",
        req("q", "multiDefault:Delhi")
        , "//result[@numFound=0]");

  }

