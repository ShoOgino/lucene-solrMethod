  @Test
  public void testRemoveOldLogs() throws Exception {
    this.clearCore();

    UpdateLog ulog = h.getCore().getUpdateHandler().getUpdateLog();
    File logDir = new File(h.getCore().getUpdateHandler().getUpdateLog().getLogDir());

    int start = 0;
    int maxReq = 50;

    LinkedList<Long> versions = new LinkedList<>();
    addDocs(10, start, versions);
    start += 10;
    assertJQ(req("qt", "/get", "getVersions", "" + maxReq), "/versions==" + versions.subList(0, Math.min(maxReq, start)));
    assertU(commit());
    assertJQ(req("qt", "/get", "getVersions", "" + maxReq), "/versions==" + versions.subList(0, Math.min(maxReq, start)));

    addDocs(10, start, versions);
    start += 10;
    assertJQ(req("qt", "/get", "getVersions", "" + maxReq), "/versions==" + versions.subList(0, Math.min(maxReq, start)));
    assertU(commit());
    assertJQ(req("qt", "/get", "getVersions", "" + maxReq), "/versions==" + versions.subList(0, Math.min(maxReq, start)));

    assertEquals(2, ulog.getLogList(logDir).length);

    // Get a cdcr log reader to initialise a log pointer
    CdcrUpdateLog.CdcrLogReader reader = ((CdcrUpdateLog) ulog).newLogReader();

    addDocs(105, start, versions);
    start += 105;
    assertJQ(req("qt", "/get", "getVersions", "" + maxReq), "/versions==" + versions.subList(0, Math.min(maxReq, start)));
    assertU(commit());
    assertJQ(req("qt", "/get", "getVersions", "" + maxReq), "/versions==" + versions.subList(0, Math.min(maxReq, start)));

    // the previous two tlogs should not be removed
    assertEquals(3, ulog.getLogList(logDir).length);

    // move the pointer past the first tlog
    for (int i = 0; i <= 11; i++) { // 10 adds + 1 commit
      assertNotNull(reader.next());
    }

    addDocs(10, start, versions);
    start += 10;
    assertJQ(req("qt", "/get", "getVersions", "" + maxReq), "/versions==" + versions.subList(0, Math.min(maxReq, start)));
    assertU(commit());
    assertJQ(req("qt", "/get", "getVersions", "" + maxReq), "/versions==" + versions.subList(0, Math.min(maxReq, start)));

    // the first tlog should be removed
    assertEquals(3, ulog.getLogList(logDir).length);

    h.close();
    createCore();

    ulog = h.getCore().getUpdateHandler().getUpdateLog();

    addDocs(105, start, versions);
    start += 105;
    assertJQ(req("qt", "/get", "getVersions", "" + maxReq), "/versions==" + versions.subList(0, Math.min(maxReq, start)));
    assertU(commit());
    assertJQ(req("qt", "/get", "getVersions", "" + maxReq), "/versions==" + versions.subList(0, Math.min(maxReq, start)));

    // previous tlogs should be gone now
    assertEquals(1, ulog.getLogList(logDir).length);
  }

