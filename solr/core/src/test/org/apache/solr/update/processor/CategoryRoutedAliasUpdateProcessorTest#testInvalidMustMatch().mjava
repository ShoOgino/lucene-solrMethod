  @Slow
  @Test
  public void testInvalidMustMatch() throws Exception {
    String configName = getSaferTestName();
    createConfigSet(configName);
    // Not a valid regex
    final String mustMatchRegex = "+_solr";

    final int maxCardinality = Integer.MAX_VALUE; // max cardinality for current test

    List<String> retrievedConfigSetNames = new ConfigSetAdminRequest.List().process(solrClient).getConfigSets();
    List<String> expectedConfigSetNames = Arrays.asList("_default", configName);

    // config sets leak between tests so we can't be any more specific than this on the next 2 asserts
    assertTrue("We expect at least 2 configSets",
        retrievedConfigSetNames.size() >= expectedConfigSetNames.size());
    assertTrue("ConfigNames should include :" + expectedConfigSetNames, retrievedConfigSetNames.containsAll(expectedConfigSetNames));

    SolrException e = expectThrows(SolrException.class, () -> CollectionAdminRequest.createCategoryRoutedAlias(getAlias(), categoryField, maxCardinality,
        CollectionAdminRequest.createCollection("_unused_", configName, 1, 1))
        .setMustMatch(mustMatchRegex)
        .process(solrClient)
    );

    assertTrue("Create Alias should fail since router.mustMatch must be a valid regular expression",
        e.getMessage().contains("router.mustMatch must be a valid regular expression"));
  }

