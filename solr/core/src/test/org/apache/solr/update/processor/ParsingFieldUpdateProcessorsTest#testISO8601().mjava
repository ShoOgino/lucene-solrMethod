  // tests that mimic the tests that were in TestExtractionDateUtil
  public void testISO8601() throws IOException {
    // dates with atypical years
    // This test tries to mimic TestExtractionDateUtil#testISO8601

    String[] dateStrings = {
        "0001-01-01T01:01:01Z", "+12021-12-01T03:03:03Z",
        "0000-04-04T04:04:04Z", "-0005-05-05T05:05:05Z",
        "-2021-12-01T04:04:04Z", "-12021-12-01T02:02:02Z"
    };

    int id = 1;

    // ensure strings are parsed
    for(String notInFormatDateString: dateStrings) {
      IndexSchema schema = h.getCore().getLatestSchema();
      assertNotNull(schema.getFieldOrNull("date_dt")); // should match "*_dt" dynamic field
      SolrInputDocument d = processAdd("parse-date-patterns-default-config", doc(f("id", id), f("date_dt", notInFormatDateString)));
      assertNotNull(d);
      assertThat("Date string: " + notInFormatDateString + " was not parsed as a date", d.getFieldValue("date_dt"), IS_DATE);
      assertEquals(notInFormatDateString, ((Date) d.getField("date_dt").getFirstValue()).toInstant().toString());
      assertU(commit());
      assertQ(req("id:" + id), "//date[@name='date_dt'][.='" + notInFormatDateString + "']");
      ++id;
    }

    // odd values are date strings, even values are expected strings
    String[] lenientDateStrings = {
        "10995-12-31T23:59:59.990Z", "+10995-12-31T23:59:59.990Z",
        "995-1-2T3:4:5Z", "0995-01-02T03:04:05Z",
        "2021-01-01t03:04:05", "2021-01-01T03:04:05Z",
        "2021-12-01 04:04:04", "2021-12-01T04:04:04Z"
    };

    // ensure sure strings that should be parsed using lenient resolver are properly parsed
    for(int i = 0; i < lenientDateStrings.length; ++i) {
      String lenientDateString = lenientDateStrings[i];
      String expectedString = lenientDateStrings[++i];
      IndexSchema schema = h.getCore().getLatestSchema();
      assertNotNull(schema.getFieldOrNull("date_dt")); // should match "*_dt" dynamic field
      SolrInputDocument d = processAdd("parse-date-patterns-default-config", doc(f("id", id), f("date_dt", lenientDateString)));
      assertNotNull(d);
      assertThat("Date string: " + lenientDateString + " was not parsed as a date",
          d.getFieldValue("date_dt"), IS_DATE);
      assertEquals(expectedString, ((Date) d.getField("date_dt").getFirstValue()).toInstant().toString());
      ++id;
    }
  }

