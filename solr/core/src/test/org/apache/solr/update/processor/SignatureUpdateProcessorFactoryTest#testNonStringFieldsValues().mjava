  @Test
  @SuppressWarnings({"rawtypes"})
  public void testNonStringFieldsValues() throws Exception {
    this.chain = "dedupe-allfields";
    
    SolrCore core = h.getCore();
    UpdateRequestProcessorChain chained = core
        .getUpdateProcessingChain(chain);
    SignatureUpdateProcessorFactory factory = ((SignatureUpdateProcessorFactory) chained.getProcessors().get(0));
    factory.setEnabled(true);
    
    Map<String,String[]> params = new HashMap<>();
    MultiMapSolrParams mmparams = new MultiMapSolrParams(params);
    params.put(UpdateParams.UPDATE_CHAIN, new String[] {chain});
    
    UpdateRequest ureq = new UpdateRequest();
    
    {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("v_t", "same");
      doc.addField("weight", 1.0f);
      doc.addField("ints_is", 34);
      doc.addField("ints_is", 42);
      ureq.add(doc);
    }
    {
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("v_t", "same");
      doc.addField("weight", 2.0f);
      doc.addField("ints_is", 42);
      doc.addField("ints_is", 66);
      ureq.add(doc);
    }
    {
      // A and B should have same sig as eachother
      // even though the particulars of how the the ints_is list are built

      SolrInputDocument docA = new SolrInputDocument();
      SolrInputDocument docB = new SolrInputDocument();

      UnusualList<Integer> ints = new UnusualList<>(3);
      for (int val : new int[] {42, 66, 34}) {
        docA.addField("ints_is", val);
        ints.add(val);
      }
      docB.addField("ints_is", ints);

      for (SolrInputDocument doc : new SolrInputDocument[] { docA, docB }) {
        doc.addField("v_t", "same");
        doc.addField("weight", 3.0f);
        ureq.add(doc);
      }
    }
    {
      // now add another doc with the same values as A & B above, 
      // but diff ints_is collection (diff order)
      SolrInputDocument doc = new SolrInputDocument();
      doc.addField("v_t", "same");
      doc.addField("weight", 3.0f);
      for (int val : new int[] {66, 42, 34}) {
        doc.addField("ints_is", val);
      }
      ureq.add(doc);
    }
        

    LocalSolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), mmparams);
    try {
      req.setContentStreams(Collections.singletonList(ContentStreamBase.create(new BinaryRequestWriter(), ureq)));
      UpdateRequestHandler h = new UpdateRequestHandler();
      h.init(new NamedList());
      h.handleRequestBody(req, new SolrQueryResponse());
    } finally {
      req.close();
    }
    
    addDoc(commit());
    
    checkNumDocs(4);
    

  }

