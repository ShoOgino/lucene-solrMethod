  @Test
  public void testInvalidAdds() throws IOException {
    SolrInputDocument invalidDoc1 = doc(field("text", "the quick brown fox")); //no id
    // This doc should fail without being tolerant
    Exception e = expectThrows(Exception.class, () -> add("not-tolerant", null, invalidDoc1));
    assertTrue(e.getMessage().contains("Document is missing mandatory uniqueKey field"));

    assertAddsSucceedWithErrors("tolerant-chain-max-errors-10", Arrays.asList(new SolrInputDocument[]{invalidDoc1}), null, "(unknown)");
    
    //a valid doc
    SolrInputDocument validDoc1 = doc(field("id", "1"), field("text", "the quick brown fox"));

    // This batch should fail without being tolerant
    e = expectThrows(Exception.class, () -> add("not-tolerant", null,
        Arrays.asList(new SolrInputDocument[]{invalidDoc1, validDoc1})));
    assertTrue(e.getMessage().contains("Document is missing mandatory uniqueKey field"));
    
    assertU(commit());
    assertQ(req("q","id:1"),"//result[@numFound='0']");
    
    
    assertAddsSucceedWithErrors("tolerant-chain-max-errors-10", Arrays.asList(new SolrInputDocument[]{invalidDoc1, validDoc1}), null, "(unknown)");
    assertU(commit());
    
    // verify that the good document made it in. 
    assertQ(req("q","id:1"),"//result[@numFound='1']");
    
    SolrInputDocument invalidDoc2 = doc(field("id", "2"), field("weight", "aaa"));
    SolrInputDocument validDoc2 = doc(field("id", "3"), field("weight", "3"));

    // This batch should fail without being tolerant
    e = expectThrows(Exception.class, () -> add("not-tolerant", null,
        Arrays.asList(new SolrInputDocument[]{invalidDoc2, validDoc2})));
    assertTrue(e.getMessage().contains("Error adding field"));

    assertU(commit());
    assertQ(req("q","id:3"),"//result[@numFound='0']");
    
    assertAddsSucceedWithErrors("tolerant-chain-max-errors-10", Arrays.asList(new SolrInputDocument[]{invalidDoc2, validDoc2}), null, "2");
    assertU(commit());
    
    // The valid document was indexed
    assertQ(req("q","id:3"),"//result[@numFound='1']");
    
    // The invalid document was NOT indexed
    assertQ(req("q","id:2"),"//result[@numFound='0']");
    
  }

