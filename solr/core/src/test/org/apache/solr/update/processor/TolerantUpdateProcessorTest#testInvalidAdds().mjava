  @Test
  public void testInvalidAdds() throws IOException {
    SolrInputDocument invalidDoc = doc(field("text", "the quick brown fox")); //no id
    try {
      // This doc should fail without being tolerant
      add("not-tolerant", null, invalidDoc);
      fail("Expecting exception");
    } catch (Exception e) {
      //expected
      assertTrue(e.getMessage().contains("Document is missing mandatory uniqueKey field"));
    }
    assertAddsSucceedWithErrors("tolerant-chain-max-errors-10", Arrays.asList(new SolrInputDocument[]{invalidDoc}), null, "(unknown)");
    
    //a valid doc
    SolrInputDocument validDoc = doc(field("id", "1"), field("text", "the quick brown fox"));
    
    try {
      // This batch should fail without being tolerant
      add("not-tolerant", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}));
      fail("Expecting exception");
    } catch (Exception e) {
      //expected
      assertTrue(e.getMessage().contains("Document is missing mandatory uniqueKey field"));
    }
    
    assertU(commit());
    assertQ(req("q","id:1")
        ,"//result[@numFound='0']");
    
    
    assertAddsSucceedWithErrors("tolerant-chain-max-errors-10", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, "(unknown)");
    assertU(commit());
    
    // verify that the good document made it in. 
    assertQ(req("q","id:1")
        ,"//result[@numFound='1']");
    
    invalidDoc = doc(field("id", "2"), field("weight", "aaa"));
    validDoc = doc(field("id", "3"), field("weight", "3"));
    
    try {
      // This batch should fail without being tolerant
      add("not-tolerant", null, Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc})); //no id
      fail("Expecting exception");
    } catch (Exception e) {
      //expected
      assertTrue(e.getMessage().contains("Error adding field"));
    }
    
    assertU(commit());
    assertQ(req("q","id:3")
        ,"//result[@numFound='0']");
    
    assertAddsSucceedWithErrors("tolerant-chain-max-errors-10", Arrays.asList(new SolrInputDocument[]{invalidDoc, validDoc}), null, "2");
    assertU(commit());
    
    // The valid document was indexed
    assertQ(req("q","id:3")
        ,"//result[@numFound='1']");
    
    // The invalid document was NOT indexed
    assertQ(req("q","id:2")
        ,"//result[@numFound='0']");
    
  }

