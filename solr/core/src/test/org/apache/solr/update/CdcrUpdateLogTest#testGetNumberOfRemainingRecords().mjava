  /**
   * Check that the reader is correctly reset to its last position
   */
  @Test
  public void testGetNumberOfRemainingRecords() throws Exception {
    try {
      TestInjection.skipIndexWriterCommitOnClose = true;
      final Semaphore logReplayFinish = new Semaphore(0);
      UpdateLog.testing_logReplayFinishHook = () -> logReplayFinish.release();

      this.clearCore();

      int start = 0;

      LinkedList<Long> versions = new LinkedList<>();
      addDocs(10, start, versions);
      start += 10;
      assertU(commit());

      addDocs(10, start, versions);
      start += 10;

      h.close();
      logReplayFinish.drainPermits();
      createCore();

      // At this stage, we have re-opened a capped tlog, and an uncapped tlog.
      // check that the number of remaining records is correctly computed in these two cases

      CdcrUpdateLog ulog = (CdcrUpdateLog) h.getCore().getUpdateHandler().getUpdateLog();
      CdcrUpdateLog.CdcrLogReader reader = ulog.newLogReader();

      // wait for the replay to finish
      assertTrue(logReplayFinish.tryAcquire(timeout, TimeUnit.SECONDS));

      // 20 records + 2 commits
      assertEquals(22, reader.getNumberOfRemainingRecords());

      for (int i = 0; i < 22; i++) {
        Object o = reader.next();
        assertNotNull(o);
        assertEquals(22 - (i + 1), reader.getNumberOfRemainingRecords());
      }
      assertNull(reader.next());
      assertEquals(0, reader.getNumberOfRemainingRecords());

      // It should pick up the new tlog files
      addDocs(10, start, versions);
      assertEquals(10, reader.getNumberOfRemainingRecords());
    } finally {
      TestInjection.skipIndexWriterCommitOnClose = false; // reset
      UpdateLog.testing_logReplayFinishHook = null;
    }
  }

