  /*
   * We expect the following invariants:
   *    1.) to see all the supplied collections
   *    2.) Independently Querying all collections we can find to yield the same number of docs as querying the alias
   *    3.) find as many docs as have been added but not deleted/failed
   */
  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {
    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs

    List<String> observedCols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(getAlias());
    observedCols = new ArrayList<>(observedCols);
    observedCols.sort(String::compareTo); // don't really care about the order here.
    assert !observedCols.isEmpty();

    int numFoundViaCollections = 0;
    for (String col : observedCols) {
      final QueryResponse colResponse = solrClient.query(col, params(
          "q", "*:*",
          "rows", "0"));
      long numFound = colResponse.getResults().getNumFound();
      if (numFound > 0) {
        numFoundViaCollections += numFound;
      }
    }
    final QueryResponse colResponse = solrClient.query(getAlias(), params(
        "q", "*:*",
        "rows", "0"));
    long numFoundViaAlias = colResponse.getResults().getNumFound();
    List<String> expectedList = Arrays.asList(expectedColls);
    expectedList.sort(String::compareTo);
    assertArrayEquals("Expected " + expectedColls.length + " collections, found " + observedCols.size() + ":\n" +
            observedCols + " vs \n" + expectedList, expectedColls, observedCols.toArray());
    assertEquals("Expected collections and alias to have same number of documents",
        numFoundViaAlias, numFoundViaCollections);
    assertEquals("Expected to find " + expectNumFound + " docs but found " + numFoundViaAlias,
        expectNumFound, numFoundViaAlias);
  }

