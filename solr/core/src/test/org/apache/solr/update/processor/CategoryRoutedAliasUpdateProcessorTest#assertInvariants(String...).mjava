  private void assertInvariants(String... expectedColls) throws IOException, SolrServerException {
    final int expectNumFound = lastDocId - numDocsDeletedOrFailed; //lastDocId is effectively # generated docs

    List<String> cols = new CollectionAdminRequest.ListAliases().process(solrClient).getAliasesAsLists().get(getAlias());
    cols = new ArrayList<>(cols);
    cols.sort(String::compareTo); // don't really care about the order here.
    assert !cols.isEmpty();

    int totalNumFound = 0;
    for (String col : cols) {
      final QueryResponse colResponse = solrClient.query(col, params(
          "q", "*:*",
          "rows", "0"));
      long numFound = colResponse.getResults().getNumFound();
      if (numFound > 0) {
        totalNumFound += numFound;
      }
    }
    final QueryResponse colResponse = solrClient.query(getAlias(), params(
        "q", "*:*",
        "rows", "0"));
    long aliasNumFound = colResponse.getResults().getNumFound();
    List<String> actual = Arrays.asList(expectedColls);
    actual.sort(String::compareTo);
    assertArrayEquals("Expected " + expectedColls.length + " collections, found " + cols.size() + ":\n" +
            cols + " vs \n" + actual, expectedColls, cols.toArray());
    assertEquals("Expected collections and alias to have same number of documents",
        aliasNumFound, totalNumFound);
    assertEquals("Expected to find " + expectNumFound + " docs but found " + aliasNumFound,
        expectNumFound, aliasNumFound);
  }

