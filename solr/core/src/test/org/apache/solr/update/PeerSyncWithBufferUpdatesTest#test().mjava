  @Test
  @ShardsFixed(num = 3)
  public void test() throws Exception {
    Set<Integer> docsAdded = new LinkedHashSet<>();
    handle.clear();
    handle.put("timestamp", SKIPVAL);
    handle.put("score", SKIPVAL);
    handle.put("maxScore", SKIPVAL);

    SolrClient client0 = clients.get(0);
    SolrClient client1 = clients.get(1);
    SolrClient client2 = clients.get(2);

    long v = 0;
    // add some context
    for (int i = 1; i <= 10; i++) {
      add(client0, seenLeader, sdoc("id",String.valueOf(i),"_version_",++v));
      add(client1, seenLeader, sdoc("id",String.valueOf(i),"_version_",v));
    }

    // jetty1 was down
    for (int i = 11; i <= 15; i++) {
      add(client0, seenLeader, sdoc("id",String.valueOf(i),"_version_",++v));
    }

    // it restarted and must do PeerSync
    SolrCore jetty1Core = jettys.get(1).getCoreContainer().getCores().iterator().next();
    jetty1Core.getUpdateHandler().getUpdateLog().bufferUpdates();
    for (int i = 16; i <= 20; i++) {
      add(client0, seenLeader, sdoc("id",String.valueOf(i),"_version_",++v));
      add(client1, seenLeader, sdoc("id",String.valueOf(i),"_version_",v));
    }

    // some updates are on-wire
    add(client0, seenLeader, sdoc("id","21","_version_",++v));
    add(client0, seenLeader, sdoc("id","22","_version_",++v));

    // this will make a gap in buffer tlog
    add(client0, seenLeader, sdoc("id","23","_version_",++v));
    add(client1, seenLeader, sdoc("id","23","_version_",v));

    // client1 should be able to sync
    assertSync(client1, numVersions, true, shardsArr[0]);

    // on-wire updates arrived on jetty1
    add(client1, seenLeader, sdoc("id","21","_version_",v-2));
    add(client1, seenLeader, sdoc("id","22","_version_",v-1));

    log.info("Apply buffered updates");
    jetty1Core.getUpdateHandler().getUpdateLog().applyBufferedUpdates().get();

    for (int i = 1; i <= 23; i++) docsAdded.add(i);

    validateDocs(docsAdded, client0, client1);

    // random test
    v = 2000;
    if (random().nextBoolean()) {
      for (int i = 24; i <= 30; i++) {
        add(client0, seenLeader, sdoc("id",String.valueOf(i),"_version_",++v));
        add(client1, seenLeader, sdoc("id",String.valueOf(i),"_version_",v));
      }
    }

    log.info("After buffer updates");
    jetty1Core.getUpdateHandler().getUpdateLog().bufferUpdates();
    List<Object> onWireUpdates = new ArrayList<>();
    Set<Integer> docIds = new HashSet<>();

    for (int i = 0; i <= 50; i++) {
      int kindOfUpdate = random().nextInt(100);
      if (docIds.size() < 10) kindOfUpdate = 0;
      //TODO test atomic update
      if (kindOfUpdate <= 50) {
        // add a new document update, may by duplicate with the current one
        int val = random().nextInt(1000);
        int docId = random().nextInt(10000);
        docIds.add(docId);

        SolrInputDocument doc = sdoc("id", docId, "val_i_dvo", val, "_version_",++v);
        add(client0, seenLeader, doc);
        if (random().nextBoolean()) add(client1, seenLeader, doc);
        else onWireUpdates.add(doc);

      } else if (kindOfUpdate <= 65) {
        // delete by query
        ArrayList<Integer> ids = new ArrayList<>(docIds);
        int docId1 = ids.get(random().nextInt(ids.size()));
        int docId2 = ids.get(random().nextInt(ids.size()));

        String query = "id:" +docId1+" OR id:"+docId2;
        String version = Long.toString(-++v);
        delQ(client0, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,"_version_",version), query);
        if (random().nextBoolean()) {
          delQ(client1, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,"_version_",version), query);
        } else {
          onWireUpdates.add(new DeleteByQuery(query, version));
        }

      } else {
        // delete by id
        ArrayList<Integer> ids = new ArrayList<>(docIds);
        String docId = ids.get(random().nextInt(ids.size())) + "";
        String version = Long.toString(-++v);

        del(client0, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,"_version_",version), docId);
        if (random().nextBoolean()) {
          del(client1, params(DISTRIB_UPDATE_PARAM,FROM_LEADER,"_version_",version), docId);
        } else {
          onWireUpdates.add(new DeleteById(docId, version));
        }
      }
    }
    // with many gaps, client1 should be able to sync
    assertSync(client1, numVersions, true, shardsArr[0]);
  }

