  /**
   * Helper method
   * @see #testSoftAndHardCommitMaxTimeRapidAdds
   */
  private static void assertRapidMultiCommitQueues
    (final String debug, final long startTimestampNanos, final long commitWaitMillis,
     final long maxNumCommits, final BlockingQueue<Long> queue) throws InterruptedException {

    assert 0 < maxNumCommits;
    
    // do all our math/comparisons in Nanos...
    final long commitWaitNanos = NANOSECONDS.convert(commitWaitMillis, MILLISECONDS);

    // these will be modified in each iteration of our assertion loop
    long prevTimestampNanos = startTimestampNanos;
    int count = 1;
    Long commitNanos = queue.poll(commitWaitMillis * 3, MILLISECONDS);
    assertNotNull(debug + ": did not find a single commit", commitNanos);
    
    while (null != commitNanos) {
      if (commitNanos < prevTimestampNanos + commitWaitMillis) {
        fail(debug + ": commit#" + count + " has TS too low relative to previous TS & commitWait: " +
             "commitNanos=" + commitNanos + ", prevTimestampNanos=" + prevTimestampNanos +
             ", commitWaitMillis=" + commitWaitMillis);
      }
      if (maxNumCommits < count) {
        fail(debug + ": commit#" + count + " w/ commitNanos=" + commitNanos +
             ", but maxNumCommits=" +maxNumCommits);
      }
      
      prevTimestampNanos = commitNanos;
      count++;
      commitNanos = queue.poll(commitWaitMillis * 3, MILLISECONDS);
    }
  }

