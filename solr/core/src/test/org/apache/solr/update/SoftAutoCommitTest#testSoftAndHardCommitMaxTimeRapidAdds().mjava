  public void testSoftAndHardCommitMaxTimeRapidAdds() throws Exception {
 
    final int softCommitWaitMillis = 500;
    final int hardCommitWaitMillis = 1200;

    CommitTracker hardTracker = updater.commitTracker;
    CommitTracker softTracker = updater.softCommitTracker;
    
    softTracker.setTimeUpperBound(softCommitWaitMillis);
    softTracker.setDocsUpperBound(-1);
    hardTracker.setTimeUpperBound(hardCommitWaitMillis);
    hardTracker.setDocsUpperBound(-1);
    // we don't want to overlap soft and hard opening searchers - this now blocks commits and we
    // are looking for prompt timings
    hardTracker.setOpenSearcher(false);
    
    // try to add 5 docs really fast

    final long preFirstNanos = System.nanoTime();
    for( int i=0;i<5; i++ ) {
      assertU(adoc("id", ""+500 + i, "subject", "five fast docs"));
    }
    final long postLastNanos = System.nanoTime();
    
    monitor.assertSaneOffers();

    final long maxTimeMillis = MILLISECONDS.convert(postLastNanos - preFirstNanos, NANOSECONDS);
    log.info("maxTimeMillis: {}ns - {}ns == {}ms", postLastNanos, preFirstNanos, maxTimeMillis);
    
    // NOTE: explicitly using truncated division of longs to round down
    // even if evenly divisible, need +1 to account for possible "last" commit triggered by "last" doc
    final long maxExpectedSoft = 1L + (maxTimeMillis / softCommitWaitMillis);
    final long maxExpectedHard = 1L + (maxTimeMillis / hardCommitWaitMillis);

    log.info("maxExpectedSoft={}", maxExpectedSoft);
    log.info("maxExpectedHard={}", maxExpectedHard);

    // do a loop pool over each monitor queue, asserting that:
    // - we get at least one commit
    // - we don't get more then the max possible commits expected
    // - any commit we do get doesn't happen "too fast" relative the previous commit
    //   (or first doc added for the first commit)
    monitor.assertSaneOffers();
    assertRapidMultiCommitQueues("softCommit", preFirstNanos, softCommitWaitMillis,
                                 maxExpectedSoft, monitor.soft);
    monitor.assertSaneOffers();
    assertRapidMultiCommitQueues("hardCommit", preFirstNanos, hardCommitWaitMillis,
                                 maxExpectedHard, monitor.hard);

    // now wait a bit...
    // w/o other action we shouldn't see any additional hard/soft commits

    assertNull("Got a hard commit we weren't expecting",
               monitor.hard.poll(1000, MILLISECONDS));
    assertNull("Got a soft commit we weren't expecting",
               monitor.soft.poll(0, MILLISECONDS));

    monitor.assertSaneOffers();
    
  }

