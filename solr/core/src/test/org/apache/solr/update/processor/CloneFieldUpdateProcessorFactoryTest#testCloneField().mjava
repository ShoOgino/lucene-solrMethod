  public void testCloneField() throws Exception {

    SolrInputDocument d;

    // regardless of chain, all of these checks should be equivalent
    for (String chain : Arrays.asList("clone-single", "clone-single-regex",
                                      "clone-multi", "clone-multi-regex",
                                      "clone-array", "clone-array-regex", 
                                      "clone-selector", "clone-selector-regex")) {
      
      // simple clone
      d = processAdd(chain,
                     doc(f("id", "1111"),
                         f("source0_s", "NOT COPIED"),
                         f("source1_s", "123456789", "", 42, "abcd")));
      assertNotNull(chain, d);
      assertEquals(chain,
                   Arrays.asList("123456789", "", 42, "abcd"),
                   d.getFieldValues("source1_s"));
      assertEquals(chain,
                   Arrays.asList("123456789", "", 42, "abcd"),
                   d.getFieldValues("dest_s"));

      // append to existing values, preserve boost
      d = processAdd(chain,
                     doc(f("id", "1111"),
                         field("dest_s", "orig1", "orig2"),
                         f("source0_s", "NOT COPIED"),
                         f("source1_s", "123456789", "", 42, "abcd")));
      assertNotNull(chain, d);
      assertEquals(chain,
                   Arrays.asList("123456789", "", 42, "abcd"),
                   d.getFieldValues("source1_s"));
      assertEquals(chain,
                   Arrays.asList("orig1", "orig2", "123456789", "", 42, "abcd"),
                   d.getFieldValues("dest_s"));
    }

    // should be equivalent for any chain matching source1_s and source2_s (but not source0_s)
    for (String chain : Arrays.asList("clone-multi", "clone-multi-regex",
                                      "clone-array", "clone-array-regex", 
                                      "clone-selector", "clone-selector-regex")) {

      // simple clone
      d = processAdd(chain,
                     doc(f("id", "1111"),
                         f("source0_s", "NOT COPIED"),
                         f("source1_s", "123456789", "", 42, "abcd"),
                         f("source2_s", "xxx", 999)));
      assertNotNull(chain, d);
      assertEquals(chain,
                   Arrays.asList("123456789", "", 42, "abcd"),
                   d.getFieldValues("source1_s"));
      assertEquals(chain,
                   Arrays.asList("xxx", 999),
                   d.getFieldValues("source2_s"));
      assertEquals(chain,
                   Arrays.asList("123456789", "", 42, "abcd", "xxx", 999),
                   d.getFieldValues("dest_s"));

      // append to existing values
      d = processAdd(chain,
                     doc(f("id", "1111"),
                         field("dest_s", "orig1", "orig2"),
                         f("source0_s", "NOT COPIED"),
                         f("source1_s", "123456789", "", 42, "abcd"),
                         f("source2_s", "xxx", 999)));
      assertNotNull(chain, d);
      assertEquals(chain,
                   Arrays.asList("123456789", "", 42, "abcd"),
                   d.getFieldValues("source1_s"));
      assertEquals(chain,
                   Arrays.asList("xxx", 999),
                   d.getFieldValues("source2_s"));
      assertEquals(chain,
                   Arrays.asList("orig1", "orig2",
                                 "123456789", "", 42, "abcd",
                                 "xxx", 999),
                   d.getFieldValues("dest_s"));
    }
    
    // any chain that copies source1_s to dest_s should be equivalent for these assertions
    for (String chain : Arrays.asList("clone-simple-regex-syntax",
                                      "clone-single", "clone-single-regex",
                                      "clone-multi", "clone-multi-regex",
                                      "clone-array", "clone-array-regex", 
                                      "clone-selector", "clone-selector-regex")) {

      // simple clone
      d = processAdd(chain,
                     doc(f("id", "1111"),
                         f("source1_s", "123456789", "", 42, "abcd")));
      assertNotNull(chain, d);
      assertEquals(chain,
                   Arrays.asList("123456789", "", 42, "abcd"),
                   d.getFieldValues("source1_s"));
      assertEquals(chain,
                   Arrays.asList("123456789", "", 42, "abcd"),
                   d.getFieldValues("dest_s"));

      // append to existing values, preserve boost
      d = processAdd(chain,
                     doc(f("id", "1111"),
                         field("dest_s", "orig1", "orig2"),
                         f("source1_s", "123456789", "", 42, "abcd")));
      assertNotNull(chain, d);
      assertEquals(chain,
                   Arrays.asList("123456789", "", 42, "abcd"),
                   d.getFieldValues("source1_s"));
      assertEquals(chain,
                   Arrays.asList("orig1", "orig2", "123456789", "", 42, "abcd"),
                   d.getFieldValues("dest_s"));
    }
  }

