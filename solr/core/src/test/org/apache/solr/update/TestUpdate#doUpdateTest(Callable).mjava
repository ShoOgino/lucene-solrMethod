  public void doUpdateTest(Callable afterUpdate) throws Exception {
    clearIndex();
    afterUpdate.call();

    long version;

    version = addAndGetVersion(sdoc("id","1", "val_i",5), null);
    afterUpdate.call();
    version = addAndGetVersion(sdoc("id","1", "val_is",map("add",10)), null);
    afterUpdate.call();
    version = addAndGetVersion(sdoc("id","1", "val_is",map("add",5)), null);
    afterUpdate.call();

    assertJQ(req("qt","/get", "id","1", "fl","id,*_i,*_is")
        ,"=={'doc':{'id':'1', 'val_i':5, 'val_is':[10,5]}}"
    );

    version = addAndGetVersion(sdoc("id","1", "val_is",map("add",-1), "val_i",map("set",100)), null);
    afterUpdate.call();

    assertJQ(req("qt","/get", "id","1", "fl","id,*_i,*_is")
        ,"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1]}}"
    );


    long version2;
    try {
      // try bad version added as a field in the doc
      version2 = addAndGetVersion(sdoc("id","1", "val_is",map("add",-100), "_version_",2), null);
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    try {
      // try bad version added as a request param
      version2 = addAndGetVersion(sdoc("id","1", "val_is",map("add",-100)), params("_version_","2"));
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }

    // try good version added as a field in the doc
    version = addAndGetVersion(sdoc("id","1", "val_is",map("add",-100), "_version_",version), null);
    afterUpdate.call();

    // try good version added as a request parameter
    version = addAndGetVersion(sdoc("id","1", "val_is",map("add",-200)), params("_version_",Long.toString(version)));
    afterUpdate.call();

    assertJQ(req("qt","/get", "id","1", "fl","id,*_i,*_is")
        ,"=={'doc':{'id':'1', 'val_i':100, 'val_is':[10,5,-1,-100,-200]}}"
    );

    // extra field should just be treated as a "set"
    version = addAndGetVersion(sdoc("id","1", "val_is",map("add",-300), "val_i",2), null);
    afterUpdate.call();

    assertJQ(req("qt","/get", "id","1", "fl","id,*_i,*_is")
        ,"=={'doc':{'id':'1', 'val_i':2, 'val_is':[10,5,-1,-100,-200,-300]}}"
    );

    // a null value should be treated as "remove"
    version = addAndGetVersion(sdoc("id","1", "val_is",map("add",-400), "val_i",null), null);
    afterUpdate.call();

    assertJQ(req("qt","/get", "id","1", "fl","id,*_i,*_is")
        ,"=={'doc':{'id':'1', 'val_is':[10,5,-1,-100,-200,-300,-400]}}"
    );


    version = deleteAndGetVersion("1", null);
    afterUpdate.call();

    try {
      // Currently, there is an implicit _version_=1 for updates (doc must exist).  This is subject to change!
      version2 = addAndGetVersion(sdoc("id","1", "val_is",map("add",-100)), null);
      fail();
    } catch (SolrException se) {
      assertEquals(409, se.code());
    }


  }

