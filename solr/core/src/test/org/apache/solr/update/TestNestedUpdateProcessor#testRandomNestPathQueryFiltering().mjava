  /**
   * Randomized test to look for flaws in the documented approach for building "safe" values of the 
   * <code>of</code> / <code>which</code> params in the <code>child</code> / <code>parent</code> QParsers
   * when a specific <code>_nest_path_</code> is desired
   *
   * @see <a href="https://issues.apache.org/jira/browse/SOLR-14687">SOLR-14687</a>
   */
  public void testRandomNestPathQueryFiltering() throws Exception {

    // First: build a bunch of complex randomly nested documents, with random "nest paths"
    // re-use the same "path segments" at various levels of nested, so as to confuse things even more
    final RandomNestedDocModel docs = new RandomNestedDocModel();
    for (int i = 0; i < 50; i++) {
      final SolrInputDocument rootDoc = docs.buildRandomDoc();
      assertU(adoc(rootDoc));
    }
    assertU(commit());

    // now do some systematic parent/child queries.
    // we're checking both for "parser errors" (ie: children matching "parent filter")
    // as well as that the test_path_s of all matching docs meets our expectations

    // *:* w/ parent parser...
    // starts at "root" parent_path and recurses until we get no (expected) results
    assertTrue(// we expected at least one query for every "real" path,
               // but there will be more because we'll try lots of sub-paths that have no docs
               docs.numDocsDescendentFromPath.keySet().size()
               < docs.recursiveCheckParentQueryOfAllChildren(Collections.<String>emptyList()));
    // sanity check: path that is garunteed not to exist...
    assertEquals(1, docs.recursiveCheckParentQueryOfAllChildren(Arrays.asList("xxx", "yyy")));

    // *:* w/ child parser...
    // starts at "root" parent_path and recurses until we get no (expected) results
    assertTrue(// we expected at least one query for every "real" path,
               // but there will be more because we'll try lots of sub-paths that have no docs
               docs.numDocsWithPathWithKids.keySet().size()
               < docs.recursiveCheckChildQueryOfAllParents(Collections.<String>emptyList()));
    // sanity check: path that is garunteed not to exist...
    assertEquals(1, docs.recursiveCheckChildQueryOfAllParents(Arrays.asList("xxx", "yyy")));

    // quering against individual child ids w/ both parent & child parser...
    docs.checkParentAndChildQueriesOfEachDocument();
  }

