  @Nightly
  public void testVeryLargeCluster() throws Exception {
    String COLLECTION_NAME = "veryLargeColl";
    configureCluster(4)
        .addConfig("conf", configset("cloud-minimal"))
        .configure();

    try {
      CollectionAdminRequest
          .createCollection(COLLECTION_NAME, "conf", 8, 1)
          .setMaxShardsPerNode(10)
          .process(cluster.getSolrClient());
      cluster.waitForActiveCollection(COLLECTION_NAME, 8, 8);

      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +
          File.separator).getPath();
      String url = cluster.getRandomJetty(random()).getBaseUrl() + "/" + COLLECTION_NAME;


      int docCount = 0;

      for (int j = 0; j < 4; j++) {
        int bsz = 10000;
        UpdateRequest ur = new UpdateRequest();
        ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);
        for (int i = 0; i < bsz; i++) {
          ur.add("id", String.valueOf((j * bsz) + i), "desc_s", TestUtil.randomSimpleString(random(), 10, 50));
        }
        cluster.getSolrClient().request(ur, COLLECTION_NAME);
        docCount += bsz;
      }

      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery("*:*").setRows(0));
      assertEquals(docCount, qr.getResults().getNumFound());

      DocCollection coll = cluster.getSolrClient().getClusterStateProvider().getCollection(COLLECTION_NAME);
      HashMap<String, Long> docCounts = new HashMap<>();
      long totalDocsFromCores = 0;
      for (Slice slice : coll.getSlices()) {
        Replica replica = slice.getLeader();
        try (HttpSolrClient client = new HttpSolrClient.Builder(replica.getBaseUrl()).build()) {
          long count = ExportTool.getDocCount(replica.getCoreName(), client);
          docCounts.put(replica.getCoreName(), count);
          totalDocsFromCores += count;
        }
      }
      assertEquals(docCount, totalDocsFromCores);

      ExportTool.MultiThreadedRunner info = null;
      String absolutePath = null;

      info = new ExportTool.MultiThreadedRunner(url);
      info.output = System.out;
      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + ".javabin";
      info.setOutFormat(absolutePath, "javabin");
      info.setLimit("-1");
      info.exportDocs();
      assertJavabinDocsCount(info, docCount);
      for (Map.Entry<String, Long> e : docCounts.entrySet()) {
        assertEquals(e.getValue().longValue(), info.corehandlers.get(e.getKey()).receivedDocs.get());
      }
      info = new ExportTool.MultiThreadedRunner(url);
      info.output = System.out;
      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + ".json";
      info.setOutFormat(absolutePath, "jsonl");
      info.fields = "id,desc_s";
      info.setLimit("-1");
      info.exportDocs();
      long actual = ((ExportTool.JsonSink) info.sink).docs.get();
      assertTrue("docs written :" + actual + "docs produced : " + info.docsWritten.get(), actual >= docCount);
      assertJsonDocsCount(info, docCount);
    } finally {
      cluster.shutdown();

    }
  }

