  @Test
  public void testSolrTimerGetSnapshot() {
    // create a timer with up to 100 data points
    final Timer timer = new Timer();
    final int iterations = random().nextInt(100);
    for (int i = 0; i < iterations; ++i) {
      timer.update(random().nextInt(), TimeUnit.NANOSECONDS);
    }
    // obtain timer metrics
    final NamedList<Object> lst = new SimpleOrderedMap<>();
    TimerUtils.addMetrics(lst, timer);
    // check that expected metrics were obtained
    assertEquals(lst.size(), 9);
    final Snapshot snapshot = timer.getSnapshot();
    // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!
    // assertEquals(lst.get("avgRequestsPerMinute"), timer.getMeanRate());
    assertEquals(lst.get("5minRateRequestsPerMinute"), timer.getFiveMinuteRate());
    assertEquals(lst.get("15minRateRequestsPerMinute"), timer.getFifteenMinuteRate());
    assertEquals(lst.get("avgTimePerRequest"), TimerUtils.nsToMs(snapshot.getMean()));
    assertEquals(lst.get("medianRequestTime"), TimerUtils.nsToMs(snapshot.getMedian()));
    assertEquals(lst.get("75thPcRequestTime"), TimerUtils.nsToMs(snapshot.get75thPercentile()));
    assertEquals(lst.get("95thPcRequestTime"), TimerUtils.nsToMs(snapshot.get95thPercentile()));
    assertEquals(lst.get("99thPcRequestTime"), TimerUtils.nsToMs(snapshot.get99thPercentile()));
    assertEquals(lst.get("999thPcRequestTime"), TimerUtils.nsToMs(snapshot.get999thPercentile()));
  }

