  public void testSchemaValidation() {
    ValidatingJsonMap spec = ApiBag.getSpec("collections.Commands").getSpec();
    Map createSchema = spec.getMap("commands", NOT_NULL).getMap("create-alias", NOT_NULL);
    JsonSchemaValidator validator = new JsonSchemaValidator(createSchema);
    List<String> errs = validator.validateJson(Utils.fromJSONString("{name : x, collections: [ c1 , c2]}"));
    assertNull(toJSONString(errs), errs);
    errs = validator.validateJson(Utils.fromJSONString("{name : x, collections: [c1] }"));
    assertNull(toJSONString(errs), errs);
    errs = validator.validateJson(Utils.fromJSONString("{name : x, x:y, collections: [ c1 , c2]}"));
    assertNotNull(toJSONString(errs), errs);
    assertTrue(toJSONString(errs), errs.get(0).contains("Unknown"));
    errs = validator.validateJson(Utils.fromJSONString("{name : 123, collections: c1 }"));
    assertNotNull(toJSONString(errs), errs);
    assertTrue(toJSONString(errs), errs.get(0).contains("expected"));
    errs = validator.validateJson(Utils.fromJSONString("{x:y, collections: [ c1 , c2]}"));
    assertTrue(toJSONString(errs), StrUtils.join(errs, '|').contains("Unknown"));
    errs = validator.validateJson(Utils.fromJSONString("{name : x, collections: [ 1 , 2]}"));
    assertFalse(toJSONString(errs), errs.isEmpty());
    assertTrue(toJSONString(errs), errs.get(0).contains("expected"));
    validator = new JsonSchemaValidator("{" +
        "  type:object," +
        "  properties: {" +
        "   age : {type: number}," +
        "   adult : {type: boolean}," +
        "   name: {type: string}}}");
    errs = validator.validateJson(Utils.fromJSONString("{name:x, age:21, adult:true}"));
    assertNull(errs);
    errs = validator.validateJson(Utils.fromJSONString("{name:x, age:'21', adult:'true'}"));
    assertNotNull(errs);

    errs = validator.validateJson(Utils.fromJSONString("{name:x, age:'x21', adult:'true'}"));
    assertEquals(1, errs.size());
    try {
      validator = new JsonSchemaValidator("{" +
          "  type:object," +
          "  properties: {" +
          "   age : {type: int}," +
          "   adult : {type: Boolean}," +
          "   name: {type: string}}}");
      fail("should have failed");
    } catch (Exception e) {
      assertTrue(e.getMessage().contains("Unknown type"));
    }

    try {
      new JsonSchemaValidator("{" +
          "  type:object," +
          "   x : y," +
          "  properties: {" +
          "   age : {type: number}," +
          "   adult : {type: boolean}," +
          "   name: {type: string}}}");
      fail("should have failed");
    } catch (Exception e) {
      assertTrue(e.getMessage().contains("Unknown key"));
    }
    try {
      new JsonSchemaValidator("{" +
          "  type:object," +
          "  propertes: {" +
          "   age : {type: number}," +
          "   adult : {type: boolean}," +
          "   name: {type: string}}}");
      fail("should have failed");
    } catch (Exception e) {
      assertTrue(e.getMessage().contains("Unknown key : propertes"));
    }

    validator = new JsonSchemaValidator("{" +
        "  type:object," +
        "  properties: {" +
        "   age : {type: number}," +
        "   sex: {type: string, enum:[M, F]}," +
        "   adult : {type: boolean}," +
        "   name: {type: string}}}");
    errs = validator.validateJson(Utils.fromJSONString("{name: 'Joe Average' , sex:M}"));
    assertNull("errs are " + errs, errs);
    errs = validator.validateJson(Utils.fromJSONString("{name: 'Joe Average' , sex:m}"));
    assertEquals(1, errs.size());
    assertTrue(errs.get(0).contains("Value of enum"));

    String schema = "{\n" +
        "  'type': 'object',\n" +
        "  'properties': {\n" +
        "    'links': {\n" +
        "      'type': 'array',\n" +
        "      'items':{" +
        "          'type': 'object',\n" +
        "          'properties': {\n" +
        "            'rel': {\n" +
        "              'type': 'string'\n" +
        "            },\n" +
        "            'href': {\n" +
        "              'type': 'string'\n" +
        "            }\n" +
        "          }\n" +
        "        }\n" +
        "    }\n" +
        "\n" +
        "  }\n" +
        "}";
    validator = new JsonSchemaValidator(schema);
    validator.validateJson(Utils.fromJSONString("{\n" +
        "  'links': [\n" +
        "    {\n" +
        "        'rel': 'x',\n" +
        "        'href': 'x'\n" +
        "    },\n" +
        "    {\n" +
        "        'rel': 'x',\n" +
        "        'href': 'x'\n" +
        "    },\n" +
        "    {\n" +
        "        'rel': 'x',\n" +
        "        'href': 'x'\n" +
        "    }\n" +
        "  ]\n" +
        "}"));

    schema = "{\n" +
        "'type' : 'object',\n" +
        "'oneOf' : ['a', 'b']\n" +
        "}";
    validator = new JsonSchemaValidator(schema);
    errs = validator.validateJson(Utils.fromJSONString("" +
        "{'c':'val'}"));
    assertNotNull(errs);
    errs = validator.validateJson(Utils.fromJSONString("" +
        "{'a':'val'}"));
    assertNull(errs);

  }

