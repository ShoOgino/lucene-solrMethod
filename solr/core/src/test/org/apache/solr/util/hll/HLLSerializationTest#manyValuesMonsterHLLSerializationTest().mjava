  /**
   * A smoke-test that covers serialization/deserialization of a (single) HLL
   * with random the max possible numeric init parameters, with randomized values for the other params.
   *
   * @see #monsterHLLSerializationTest
   */
  @Test
  @Slow
  @Monster("can require as much as -Dtests.heapsize=4g because of the massive data structs")
  public void manyValuesMonsterHLLSerializationTest() throws Exception {

    final HLLType[] ALL_TYPES = EnumSet.allOf(HLLType.class).toArray(new HLLType[0]);
    Arrays.sort(ALL_TYPES);
      
    final boolean sparse = random().nextBoolean();
    final HLLType type = ALL_TYPES[TestUtil.nextInt(random(), 0, ALL_TYPES.length-1)];
    
    HLL hll = new HLL(MAXIMUM_LOG2M_PARAM, MAXIMUM_REGWIDTH_PARAM, MAXIMUM_EXPTHRESH_PARAM, sparse, type);

    final long NUM_VALS = TestUtil.nextLong(random(), 150000, 1000000);
    final long MIN_VAL = TestUtil.nextLong(random(), Long.MIN_VALUE, Long.MAX_VALUE-NUM_VALS);
    final long MAX_VAL = MIN_VAL + NUM_VALS;
    assert MIN_VAL < MAX_VAL;
    
    for (long val = MIN_VAL; val < MAX_VAL; val++) {
      hll.addRaw(val);
    }
    
    final long expectedCardinality = hll.cardinality();
    final HLLType expectedType = hll.getType();

    byte[] serializedData = hll.toBytes();
    hll = null; // allow some GC
    
    HLL copy = HLL.fromBytes(serializedData);
    serializedData = null; // allow some GC
    
    assertEquals(expectedCardinality, copy.cardinality());
    assertEquals(expectedType, copy.getType());
    
  }

