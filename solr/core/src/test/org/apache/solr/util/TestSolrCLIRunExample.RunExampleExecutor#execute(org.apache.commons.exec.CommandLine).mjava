    @Override
    public int execute(org.apache.commons.exec.CommandLine cmd) throws IOException {
      // collect the commands as they are executed for analysis by the test
      commandsExecuted.add(cmd);

      String exe = cmd.getExecutable();
      if (exe.endsWith("solr")) {
        String[] args = cmd.getArguments();
        if ("start".equals(args[0])) {
          if (!hasFlag("-cloud", args) && !hasFlag("-c", args))
            return startStandaloneSolr(args);

          String solrHomeDir = getArg("-s", args);
          int port = Integer.parseInt(getArg("-p", args));
          String solrxml = new String(Files.readAllBytes(Paths.get(solrHomeDir).resolve("solr.xml")), Charset.defaultCharset());

          JettyConfig jettyConfig =
              JettyConfig.builder().setContext("/solr").setPort(port).build();
          try {
            if (solrCloudCluster == null) {
              Path logDir = createTempDir("solr_logs");
              System.setProperty("solr.log.dir", logDir.toString());
              System.setProperty("host", "localhost");
              System.setProperty("jetty.port", String.valueOf(port));
              solrCloudCluster =
                  new MiniSolrCloudCluster(1, createTempDir(), solrxml, jettyConfig);
            } else {
              // another member of this cluster -- not supported yet, due to how MiniSolrCloudCluster works
              throw new IllegalArgumentException("Only launching one SolrCloud node is supported by this test!");
            }
          } catch (Exception e) {
            if (e instanceof RuntimeException) {
              throw (RuntimeException)e;
            } else {
              throw new RuntimeException(e);
            }
          }
        } else if ("stop".equals(args[0])) {

          int port = Integer.parseInt(getArg("-p", args));

          // stop the requested node
          if (standaloneSolr != null) {
            int localPort = standaloneSolr.getLocalPort();
            if (port == localPort) {
              try {
                standaloneSolr.stop();
                log.info("Stopped standalone Solr instance running on port {}", port);
              } catch (Exception e) {
                if (e instanceof RuntimeException) {
                  throw (RuntimeException)e;
                } else {
                  throw new RuntimeException(e);
                }
              }
            } else {
              throw new IllegalArgumentException("No Solr is running on port "+port);
            }
          } else {
            if (solrCloudCluster != null) {
              try {
                solrCloudCluster.shutdown();
                log.info("Stopped SolrCloud test cluster");
              } catch (Exception e) {
                if (e instanceof RuntimeException) {
                  throw (RuntimeException)e;
                } else {
                  throw new RuntimeException(e);
                }
              }
            } else {
              throw new IllegalArgumentException("No Solr nodes found to stop!");
            }
          }
        }
      } else {
        String cmdLine = joinArgs(cmd.getArguments());
        log.info("Executing command: {}", cmdLine);
        try {
          return super.execute(cmd);
        } catch (Exception exc) {
          log.error("Execute command [{}] failed due to: {}", cmdLine, exc, exc);
          throw exc;
        }
      }

      return 0;
    }

