    // ------------------------------------------------------------------------
    /**
     */
    @Test
    public void toFromBytesTest() {
        final ISchemaVersion schemaVersion = SerializationUtil.DEFAULT_SCHEMA_VERSION;
        final HLLType type = HLLType.EXPLICIT;
        final int padding = schemaVersion.paddingBytes(type);
        final int bytesPerWord = 8;

        {// Should work on an empty set
            final HLL hll = newHLL(128/*arbitrary*/);

            final byte[] bytes = hll.toBytes(schemaVersion);

            // assert output has correct byte length
            assertEquals(bytes.length, padding/*no elements, just padding*/);

            final HLL inHLL = HLL.fromBytes(bytes);

            assertElementsEqual(hll, inHLL);
        }
        {// Should work on a partially filled set
            final HLL hll = newHLL(128/*arbitrary*/);

            for(int i=0; i<3; i++) {
                hll.addRaw(i);
            }

            final byte[] bytes = hll.toBytes(schemaVersion);

            // assert output has correct byte length
            assertEquals(bytes.length, padding + (bytesPerWord * 3/*elements*/));

            final HLL inHLL = HLL.fromBytes(bytes);

            assertElementsEqual(hll, inHLL);
        }
        {// Should work on a full set
            final int explicitThreshold = 128;
            final HLL hll = newHLL(explicitThreshold);

            for(int i=0; i<explicitThreshold; i++) {
                hll.addRaw(27 + i/*arbitrary*/);
            }

            final byte[] bytes = hll.toBytes(schemaVersion);

            // assert output has correct byte length
            assertEquals(bytes.length, padding + (bytesPerWord * explicitThreshold/*elements*/));

            final HLL inHLL = HLL.fromBytes(bytes);

            assertElementsEqual(hll, inHLL);
        }
    }

