    // ========================================================================
    /**
     * Tests {@link BitVector#registerIterator()}
     */
    @Test
    public void registerIteratorTest() {
        { // scoped locally for sanity
            // NOTE:  registers are only 5bits wide
            final BitVector vector1 = new BitVector(5/*width*/, 128/*count, 2^7*/);
            final BitVector vector2 = new BitVector(5/*width*/, 128/*count, 2^7*/);
            final BitVector vector3 = new BitVector(5/*width*/, 128/*count, 2^7*/);
            final BitVector vector4 = new BitVector(5/*width*/, 128/*count, 2^7*/);

            for(int i=0; i<128/*2^7*/; i++) {
                vector1.setRegister(i, 0x1F);
                vector2.setRegister(i, (i & 0x1F));
                vector3.setRegister(i, ((127 - i) & 0x1F));
                vector4.setRegister(i, 0x15);
            }

            final LongIterator registerIterator1 = vector1.registerIterator();
            final LongIterator registerIterator2 = vector2.registerIterator();
            final LongIterator registerIterator3 = vector3.registerIterator();
            final LongIterator registerIterator4 = vector4.registerIterator();
            for(int i=0; i<128/*2^7*/; i++) {
                assertEquals(registerIterator1.hasNext(), true);
                assertEquals(registerIterator2.hasNext(), true);
                assertEquals(registerIterator3.hasNext(), true);
                assertEquals(registerIterator4.hasNext(), true);

                assertEquals(registerIterator1.next(), 0x1F);
                assertEquals(registerIterator2.next(), (i & 0x1F));
                assertEquals(registerIterator3.next(), ((127 - i) & 0x1F));
                assertEquals(registerIterator4.next(), 0x15);
            }
            assertEquals(registerIterator1.hasNext(), false/*no more*/);
            assertEquals(registerIterator2.hasNext(), false/*no more*/);
            assertEquals(registerIterator3.hasNext(), false/*no more*/);
            assertEquals(registerIterator4.hasNext(), false/*no more*/);
        }

        { // scoped locally for sanity
            // Vectors that are shorter than one word
            assertIterator(1, 12/* 1*12=12 bits, fewer than a single word */);
            assertIterator(2, 12/* 2*12=24 bits, fewer than a single word */);
            assertIterator(3, 12/* 3*12=36 bits, fewer than a single word */);
            assertIterator(4, 12/* 4*12=48 bits, fewer than a single word */);

            // Vectors that don't fit exactly into longs
            assertIterator(5, 16/* 5*16=80 bits */);
            assertIterator(5, 32/* 5*32=160 bits */);
        }

        // Iterate over vectors that are padded
    }

