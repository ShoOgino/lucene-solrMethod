    /**
     * Smoke test for typical parameters used in practice.
     */
    @Test
    public void smokeTestProbabilisticParams() {
        // XXX: revisit this
        final int shortWordLength = 5;
        {// Should work on an empty sequence, with no padding.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     0/*wordCount*/,
                                                     0/*bytePadding, none*/);

            assert(Arrays.equals(serializer.getBytes(), new byte[0]));
        }
        {// Should work on a non-byte-divisible sequence, with no padding.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     3/*wordCount*/,
                                                     0/*bytePadding, none*/);

            serializer.writeWord(9);
            serializer.writeWord(31);
            serializer.writeWord(1);

            // The values:
            // -----------
            // 9     |31    |1     |padding

            // Corresponding bits:
            // ------------------
            // 0100 1|111 11|00 001|0

            // And the hex/decimal (remember Java bytes are signed):
            // -----------------------------------------------------
            // 0100 1111 -> 0x4F -> 79
            // 1100 0010 -> 0xC2 -> -62

            final byte[] bytes = serializer.getBytes();
            final byte[] expectedBytes = new byte[] { 79, -62 };
            assertTrue(Arrays.equals(bytes, expectedBytes));
        }
        {// Should work on a byte-divisible sequence, with no padding.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     8/*wordCount*/,
                                                     0/*bytePadding, none*/);

            for(int i=1; i<9; i++) {
                serializer.writeWord(i);
            }

            // Values: 1-8
            // Corresponding bits:
            // ------------------
            // 00001
            // 00010
            // 00011
            // 00100
            // 00101
            // 00110
            // 00111
            // 01000

            // And the hex:
            // ------------
            // 0000 1000 => 0x08 => 8
            // 1000 0110 => 0x86 => -122
            // 0100 0010 => 0x62 => 66
            // 1001 1000 => 0x98 => -104
            // 1110 1000 => 0xE8 => -24

            final byte[] bytes = serializer.getBytes();
            final byte[] expectedBytes = new byte[] { 8, -122, 66, -104, -24 };
            assertTrue(Arrays.equals(bytes, expectedBytes));
        }
        {// Should pad the array correctly.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     1/*wordCount*/,
                                                     1/*bytePadding*/);

            serializer.writeWord(1);
            // 1 byte leading padding | value 1 | trailing padding
            // 0000 0000 | 0000 1|000
            final byte[] bytes = serializer.getBytes();
            final byte[] expectedBytes = new byte[] { 0, 8 };
            assertTrue(Arrays.equals(bytes, expectedBytes));
        }
    }

