    /**
     * Unions an EMPTY accumulator with EXPLICIT HLLs, each having a single
     * random value, twice in a row to verify that the set properties are
     * satisfied.
     *
     * Format: cumulative union
     * Tests:
     * - EMPTY U EXPLICIT
     * - EXPLICIT U EXPLICIT
     */
    private static void explicitOverlapTest(final ISchemaVersion schemaVersion) throws IOException {
        final Writer output = openOutput(schemaVersion, "explicit_explicit", TestType.UNION);

        final Random random = new Random(randomLong());

        // the accumulator, starts empty
        final HLL hll = newHLL(HLLType.EMPTY);
        final HLL emptyHLL = newHLL(HLLType.EMPTY);

        cumulativeUnionLine(output, hll, emptyHLL, schemaVersion);

        for(int i=0; i<EXPLICIT_THRESHOLD; i++) {
            // make an EXPLICIT set and populate with cardinality 1
            final HLL explicitHLL = newHLL(HLLType.EXPLICIT);
            explicitHLL.addRaw(random.nextLong());

            // union it into the accumulator twice, to test overlap (cardinality should not change)
            cumulativeUnionLine(output, hll, explicitHLL, schemaVersion);
            cumulativeUnionLine(output, hll, explicitHLL, schemaVersion);
        }

        output.flush();
        output.close();
    }

