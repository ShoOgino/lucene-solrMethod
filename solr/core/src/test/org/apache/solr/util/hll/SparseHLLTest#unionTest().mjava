    /**
     * Tests {@link HLL#union(HLL)}.
     */
    @Test
    public void unionTest() {
        final int log2m = 11/*arbitrary*/;
        final int sparseThreshold = 256/*arbitrary*/;

        { // two empty multisets should union to an empty set
            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);
            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);

            hllA.union(hllB);

            assertEquals(hllA.getType(), HLLType.SPARSE/*unchanged*/);
            assertEquals(hllA.cardinality(), 0L);
        }
        { // two disjoint multisets should union properly
            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);
            hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 1, 1));
            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);
            hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 2, 1));


            hllA.union(hllB);

            assertEquals(hllA.getType(), HLLType.SPARSE/*unchanged*/);
            assertEquals(hllA.cardinality(), 3L/*precomputed*/);
            assertRegisterPresent(hllA, 1, (byte)1);
            assertRegisterPresent(hllA, 2, (byte)1);
        }
        { // two exactly overlapping multisets should union properly
            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);
            hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 1, 10));
            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);
            hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, 1, 13));

            hllA.union(hllB);

            assertEquals(hllA.getType(), HLLType.SPARSE/*unchanged*/);
            assertEquals(hllA.cardinality(), 2L/*precomputed*/);
            assertOneRegisterSet(hllA, 1, (byte)13/*max(10,13)*/);
        }
        { // overlapping multisets should union properly
            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);
            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);
            // register index = 3
            final long rawValueA = ProbabilisticTestUtil.constructHLLValue(log2m, 3, 11);

            // register index = 4
            final long rawValueB = ProbabilisticTestUtil.constructHLLValue(log2m, 4, 13);
            final long rawValueBPrime = ProbabilisticTestUtil.constructHLLValue(log2m, 4, 21);

            // register index = 5
            final long rawValueC = ProbabilisticTestUtil.constructHLLValue(log2m, 5, 14);

            hllA.addRaw(rawValueA);
            hllA.addRaw(rawValueB);

            hllB.addRaw(rawValueBPrime);
            hllB.addRaw(rawValueC);

            hllA.union(hllB);
            // union should have three registers set, with partition B set to the
            // max of the two registers
            assertRegisterPresent(hllA, 3, (byte)11);
            assertRegisterPresent(hllA, 4, (byte)21/*max(21,13)*/);
            assertRegisterPresent(hllA, 5, (byte)14);
        }
        { // too-large unions should promote
            final HLL hllA = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);
            final HLL hllB = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, sparseThreshold, HLLType.SPARSE);

            // fill up sets to maxCapacity
            for(int i=0; i<sparseThreshold; i++) {
                hllA.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, i, 1));
                hllB.addRaw(ProbabilisticTestUtil.constructHLLValue(log2m, (i + sparseThreshold)/*non-overlapping*/, 1));
            }

            hllA.union(hllB);

            assertEquals(hllA.getType(), HLLType.FULL);
        }
    }

