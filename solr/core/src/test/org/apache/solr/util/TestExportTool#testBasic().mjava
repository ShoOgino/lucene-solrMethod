  public void testBasic() throws Exception {
    String COLLECTION_NAME = "globalLoaderColl";
    MiniSolrCloudCluster cluster = configureCluster(4)
        .addConfig("conf", configset("cloud-minimal"))
        .configure();

    try {
      CollectionAdminRequest
          .createCollection(COLLECTION_NAME, "conf", 2, 1)
          .setMaxShardsPerNode(100)
          .process(cluster.getSolrClient());
      cluster.waitForActiveCollection(COLLECTION_NAME, 2, 2);

      String tmpFileLoc = new File(cluster.getBaseDir().toFile().getAbsolutePath() +
          File.separator).getPath();

      UpdateRequest ur = new UpdateRequest();
      ur.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);
      int docCount = 1000;

      for (int i = 0; i < docCount; i++) {
        ur.add("id", String.valueOf(i), "desc_s", TestUtil.randomSimpleString(random(), 10, 50));
      }
      cluster.getSolrClient().request(ur, COLLECTION_NAME);

      QueryResponse qr = cluster.getSolrClient().query(COLLECTION_NAME, new SolrQuery("*:*").setRows(0));
      assertEquals(docCount, qr.getResults().getNumFound());

      String url = cluster.getRandomJetty(random()).getBaseUrl() + "/" + COLLECTION_NAME;


      ExportTool.Info info = new ExportTool.Info(url);

      String absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + ".json";
      info.setOutFormat(absolutePath, "jsonl");
      info.setLimit("200");
      info.exportDocsWithCursorMark();

      assertTrue(info.docsWritten >= 200);
      JsonRecordReader jsonReader = JsonRecordReader.getInst("/", Arrays.asList("$FQN:/**"));
      Reader rdr = new FileReader(absolutePath);
      try {
        int[] count = new int[]{0};
        jsonReader.streamRecords(rdr, (record, path) -> count[0]++);
        assertTrue(count[0] >= 200);
      } finally {
        rdr.close();
      }


      info = new ExportTool.Info(url);
      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + ".json";
      info.setOutFormat(absolutePath, "jsonl");
      info.setLimit("-1");
      info.exportDocsWithCursorMark();

      assertTrue(info.docsWritten >= 1000);
      jsonReader = JsonRecordReader.getInst("/", Arrays.asList("$FQN:/**"));
      rdr = new FileReader(absolutePath);
      try {
        int[] count = new int[]{0};
        jsonReader.streamRecords(rdr, (record, path) -> count[0]++);
        assertTrue(count[0] >= 1000);
      } finally {
        rdr.close();
      }


      info = new ExportTool.Info(url);
      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + ".javabin";
      info.setOutFormat(absolutePath, "javabin");
      info.setLimit("200");
      info.exportDocsWithCursorMark();
      assertTrue(info.docsWritten >= 200);

      FileInputStream fis = new FileInputStream(absolutePath);
      try {
        int[] count = new int[]{0};
        FastInputStream in = FastInputStream.wrap(fis);
        new JavaBinUpdateRequestCodec()
            .unmarshal(in, (document, req, commitWithin, override) -> count[0]++);
        assertTrue(count[0] >= 200);
      } finally {
        fis.close();
      }

      info = new ExportTool.Info(url);
      absolutePath = tmpFileLoc + COLLECTION_NAME + random().nextInt(100000) + ".javabin";
      info.setOutFormat(absolutePath, "javabin");
      info.setLimit("-1");
      info.exportDocsWithCursorMark();
      assertTrue(info.docsWritten >= 1000);

      fis = new FileInputStream(absolutePath);
      try {
        int[] count = new int[]{0};
        FastInputStream in = FastInputStream.wrap(fis);
        new JavaBinUpdateRequestCodec()
            .unmarshal(in, (document, req, commitWithin, override) -> count[0]++);
        assertTrue(count[0] >= 1000);
      } finally {
        fis.close();
      }

    } finally {
      cluster.shutdown();

    }
  }

