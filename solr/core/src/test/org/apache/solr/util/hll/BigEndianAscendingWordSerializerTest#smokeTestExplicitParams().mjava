    /**
     */
    @Test
    public void smokeTestExplicitParams() {
        final int shortWordLength = 64/*longs used in LongSetSlab*/;

        {// Should work on an empty sequence, with no padding.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     0/*wordCount*/,
                                                     0/*bytePadding, none*/);

            assert(Arrays.equals(serializer.getBytes(), new byte[0]));
        }
        {// Should work on a byte-divisible sequence, with no padding.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     2/*wordCount*/,
                                                     0/*bytePadding, none*/);

            serializer.writeWord(0xBAAAAAAAAAAAAAACL);
            serializer.writeWord(0x8FFFFFFFFFFFFFF1L);

            // Bytes:
            // ======
            // 0xBA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAA 0xAC
            // 0x8F 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xF1
            //
            // -70 -86 ...                        -84
            // -113 -1 ...                        -15
            final byte[] bytes = serializer.getBytes();
            final byte[] expectedBytes = new byte[] { -70, -86, -86, -86, -86, -86, -86, -84,
                                                      -113, -1, -1, -1, -1, -1, -1, -15 };
            assertTrue(Arrays.equals(bytes, expectedBytes));
        }
        {// Should pad the array correctly.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     1/*wordCount*/,
                                                     1/*bytePadding*/);

            serializer.writeWord(1);
            // 1 byte leading padding | value 1 | trailing padding
            // 0000 0000 | 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0001
            // 0x00 | 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01
            final byte[] bytes = serializer.getBytes();
            final byte[] expectedBytes = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 1 };
            assertTrue(Arrays.equals(bytes, expectedBytes));
        }
    }

