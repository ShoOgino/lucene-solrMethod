  @Test
  @SuppressWarnings({"unchecked"})
  public void testMetrics() throws Exception {
    MetricRegistry registry = new MetricRegistry();
    Counter counter = registry.counter("counter");
    counter.inc();
    Timer timer = registry.timer("timer");
    Timer.Context ctx = timer.time();
    Thread.sleep(150);
    ctx.stop();
    Meter meter = registry.meter("meter");
    meter.mark();
    Histogram histogram = registry.histogram("histogram");
    histogram.update(10);

    // SOLR-14252: check that negative values are supported correctly
    // NB a-d represent the same metric from multiple nodes
    AggregateMetric am1 = new AggregateMetric();
    registry.register("aggregate1", am1);
    am1.set("a", -10);
    am1.set("b", 1);
    am1.set("b", -2);
    am1.set("c", -3);
    am1.set("d", -5);

    // SOLR-14252: check that aggregation of non-Number metrics don't trigger NullPointerException
    AggregateMetric am2 = new AggregateMetric();
    registry.register("aggregate2", am2);
    am2.set("a", false);
    am2.set("b", true);

    Gauge<String> gauge = () -> "foobar";
    registry.register("gauge", gauge);
    Gauge<Long> error = () -> {throw new InternalError("Memory Pool not found error");};
    registry.register("memory.expected.error", error);
    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,
        MetricUtils.PropertyFilter.ALL, false, false, false, false, (k, o) -> {
      @SuppressWarnings({"rawtypes"})
      Map v = (Map)o;
      if (k.startsWith("counter")) {
        assertEquals(1L, v.get("count"));
      } else if (k.startsWith("gauge")) {
        assertEquals("foobar", v.get("value"));
      } else if (k.startsWith("timer")) {
        assertEquals(1L, v.get("count"));
        assertTrue(((Number)v.get("min_ms")).intValue() > 100);
      } else if (k.startsWith("meter")) {
        assertEquals(1L, v.get("count"));
      } else if (k.startsWith("histogram")) {
        assertEquals(1L, v.get("count"));
      } else if (k.startsWith("aggregate1")) {
        assertEquals(4, v.get("count"));
        Map<String, Object> values = (Map<String, Object>)v.get("values");
        assertNotNull(values);
        assertEquals(4, values.size());
        Map<String, Object> update = (Map<String, Object>)values.get("a");
        assertEquals(-10, update.get("value"));
        assertEquals(1, update.get("updateCount"));
        update = (Map<String, Object>)values.get("b");
        assertEquals(-2, update.get("value"));
        assertEquals(2, update.get("updateCount"));
        assertEquals(-10D, v.get("min"));
        assertEquals(-2D, v.get("max"));
        assertEquals(-5D, v.get("mean"));
      } else if (k.startsWith("aggregate2")) {
        // SOLR-14252: non-Number metric aggregations should return 0 rather than throwing NPE
        assertEquals(2, v.get("count"));
        assertEquals(0D, v.get("min"));
        assertEquals(0D, v.get("max"));
        assertEquals(0D, v.get("mean"));
      } else if (k.startsWith("memory.expected.error")) {
        assertNull(v);
      }
    });
    // test compact format
    MetricUtils.toMaps(registry, Collections.singletonList(MetricFilter.ALL), MetricFilter.ALL,
        MetricUtils.PropertyFilter.ALL, false, false, true, false, (k, o) -> {
          if (k.startsWith("counter")) {
            assertTrue(o instanceof Long);
            assertEquals(1L, o);
          } else if (k.startsWith("gauge")) {
            assertTrue(o instanceof String);
            assertEquals("foobar", o);
          } else if (k.startsWith("timer")) {
            assertTrue(o instanceof Map);
            @SuppressWarnings({"rawtypes"})
            Map v = (Map)o;
            assertEquals(1L, v.get("count"));
            assertTrue(((Number)v.get("min_ms")).intValue() > 100);
          } else if (k.startsWith("meter")) {
            assertTrue(o instanceof Map);
            @SuppressWarnings({"rawtypes"})
            Map v = (Map)o;
            assertEquals(1L, v.get("count"));
          } else if (k.startsWith("histogram")) {
            assertTrue(o instanceof Map);
            @SuppressWarnings({"rawtypes"})
            Map v = (Map)o;
            assertEquals(1L, v.get("count"));
          } else if (k.startsWith("aggregate1")) {
            assertTrue(o instanceof Map);
            @SuppressWarnings({"rawtypes"})
            Map v = (Map)o;
            assertEquals(4, v.get("count"));
            Map<String, Object> values = (Map<String, Object>)v.get("values");
            assertNotNull(values);
            assertEquals(4, values.size());
            Map<String, Object> update = (Map<String, Object>)values.get("a");
            assertEquals(-10, update.get("value"));
            assertEquals(1, update.get("updateCount"));
            update = (Map<String, Object>)values.get("b");
            assertEquals(-2, update.get("value"));
            assertEquals(2, update.get("updateCount"));
          } else if (k.startsWith("aggregate2")) {
            assertTrue(o instanceof Map);
            @SuppressWarnings({"rawtypes"})
            Map v = (Map)o;
            assertEquals(2, v.get("count"));
            Map<String, Object> values = (Map<String, Object>)v.get("values");
            assertNotNull(values);
            assertEquals(2, values.size());
            Map<String, Object> update = (Map<String, Object>)values.get("a");
            assertEquals(false, update.get("value"));
            assertEquals(1, update.get("updateCount"));
            update = (Map<String, Object>)values.get("b");
            assertEquals(true, update.get("value"));
            assertEquals(1, update.get("updateCount"));
          } else if (k.startsWith("memory.expected.error")) {
            assertNull(o);
          } else {
            @SuppressWarnings({"rawtypes"})
            Map v = (Map)o;
            assertEquals(1L, v.get("count"));
          }
        });

  }

