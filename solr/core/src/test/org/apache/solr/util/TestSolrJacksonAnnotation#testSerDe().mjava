  public void testSerDe() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    mapper.setAnnotationIntrospector(new SolrJacksonAnnotationInspector());

    TestObj o = new TestObj();
    o.field = "v1";
    o.f2 = "v2";
    o.ifld = 1234;
    String json = mapper.writeValueAsString(o);

    Map m = (Map) Utils.fromJSONString(json);
    assertEquals("v1",  m.get("field"));
    assertEquals("v2",  m.get("friendlyName"));
    assertEquals("1234",  String.valueOf(m.get("friendlyIntFld")));
    TestObj o1 = mapper.readValue(json, TestObj.class);

    assertEquals("v1", o1.field);
    assertEquals("v2", o1.f2);
    assertEquals(1234, o1.ifld);

    Map<String, Object> schema = JsonSchemaCreator.getSchema(TestObj.class);
    assertEquals("string", Utils.getObjectByPath(schema,true,"/properties/friendlyName/type"));
    assertEquals("integer", Utils.getObjectByPath(schema,true,"/properties/friendlyIntFld/type"));
    assertEquals("friendlyName", Utils.getObjectByPath(schema,true,"/required[0]"));


    JsonSchemaValidator validator = new JsonSchemaValidator(schema);
    List<String> errs = validator.validateJson(m);
    assertNull(errs);
    m.remove("friendlyName");
    errs = validator.validateJson(m);
    assertFalse(errs.isEmpty());
    assertTrue(errs.get(0).contains("Missing required attribute"));
    m.put("friendlyIntFld", Boolean.TRUE);
    errs = validator.validateJson(m);
    m.put("friendlyIntFld", "another String");
    assertTrue(errs.get(0).contains("Value is not valid"));
  }

