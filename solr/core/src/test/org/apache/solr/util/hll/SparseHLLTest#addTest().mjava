    /**
     * Tests {@link HLL#addRaw(long)}.
     */
    @Test
    public void addTest() {
        { // insert an element with register value 1 (minimum set value)
            final int registerIndex = 0;
            final int registerValue = 1;
            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);

            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);
            hll.addRaw(rawValue);

            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);
        }
        { // insert an element with register value 31 (maximum set value)
            final int registerIndex = 0;
            final int registerValue = 31;
            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);

            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);
            hll.addRaw(rawValue);

            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);
        }
        { // insert an element that could overflow the register (past 31)
            final int registerIndex = 0;
            final int registerValue = 36;
            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);

            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);
            hll.addRaw(rawValue);

            assertOneRegisterSet(hll, (short)registerIndex, (byte)31/*register max*/);
        }
        { // insert duplicate elements, observe no change
            final int registerIndex = 0;
            final int registerValue = 1;
            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);

            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);
            hll.addRaw(rawValue);
            hll.addRaw(rawValue);

            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);
        }
        { // insert elements that increase a register's value
            final int registerIndex = 0;
            final int registerValue = 1;
            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);

            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);
            hll.addRaw(rawValue);

            final int registerValue2 = 2;
            final long rawValue2 = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue2);
            hll.addRaw(rawValue2);

            assertOneRegisterSet(hll, registerIndex, (byte)registerValue2);
        }
        { // insert elements that have lower register values, observe no change
            final int registerIndex = 0;
            final int registerValue = 2;
            final long rawValue = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue);

            final HLL hll = new HLL(log2m, 5/*regwidth*/, 128/*explicitThreshold, arbitrary, unused*/, 256/*sparseThreshold, arbitrary*/, HLLType.SPARSE);
            hll.addRaw(rawValue);

            final int registerValue2 = 1;
            final long rawValue2 = ProbabilisticTestUtil.constructHLLValue(log2m, registerIndex, registerValue2);
            hll.addRaw(rawValue2);

            assertOneRegisterSet(hll, registerIndex, (byte)registerValue);
        }
    }

