  /**
   * Tests the interactive SolrCloud example; we cannot test the non-interactive because we need control over
   * the port and can only test with one node since the test relies on setting the host and jetty.port system
   * properties, i.e. there is no test coverage for the -noprompt option.
   */
  @Test
  public void testInteractiveSolrCloudExample() throws Exception {
    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);
    if (!solrHomeDir.isDirectory())
      fail(solrHomeDir.getAbsolutePath()+" not found and is required to run this test!");

    Path tmpDir = createTempDir();
    File solrExampleDir = tmpDir.toFile();

    File solrServerDir = solrHomeDir.getParentFile();

    String[] toolArgs = new String[] {
        "-example", "cloud",
        "-serverDir", solrServerDir.getAbsolutePath(),
        "-exampleDir", solrExampleDir.getAbsolutePath()
    };

    int bindPort = -1;
    try (ServerSocket socket = new ServerSocket(0)) {
      bindPort = socket.getLocalPort();
    }

    String collectionName = "testCloudExamplePrompt";

    // sthis test only support launching one SolrCloud node due to how MiniSolrCloudCluster works
    // and the need for setting the host and port system properties ...
    String userInput = "1\n"+bindPort+"\n"+collectionName+"\n2\n2\n_default\n";

    // simulate user input from stdin
    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));

    // capture tool output to stdout
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());

    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);
    closeables.add(executor);

    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);
    try {
      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));
    } catch (Exception e) {
      System.err.println("RunExampleTool failed due to: " + e +
          "; stdout from tool prior to failure: " + baos.toString(StandardCharsets.UTF_8.name()));
      throw e;
    }

    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());

    // verify Solr is running on the expected port and verify the collection exists
    String solrUrl = "http://localhost:"+bindPort+"/solr";
    String collectionListUrl = solrUrl+"/admin/collections?action=list";
    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {
      fail("After running Solr cloud example, test collection '"+collectionName+
          "' not found in Solr at: "+solrUrl+"; tool output: "+toolOutput);
    }

    // index some docs - to verify all is good for both shards
    CloudSolrClient cloudClient = null;

    try {
      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());
      cloudClient.connect();
      cloudClient.setDefaultCollection(collectionName);

      int numDocs = 10;
      for (int d=0; d < numDocs; d++) {
        SolrInputDocument doc = new SolrInputDocument();
        doc.setField("id", "doc"+d);
        doc.setField("str_s", "a");
        cloudClient.add(doc);
      }
      cloudClient.commit();

      QueryResponse qr = cloudClient.query(new SolrQuery("str_s:a"));
      if (qr.getResults().getNumFound() != numDocs) {
        fail("Expected "+numDocs+" to be found in the "+collectionName+
            " collection but only found "+qr.getResults().getNumFound());
      }
    } finally {
      if (cloudClient != null) {
        try {
          cloudClient.close();
        } catch (Exception ignore){}
      }
    }

    File node1SolrHome = new File(solrExampleDir, "cloud/node1/solr");
    if (!node1SolrHome.isDirectory()) {
      fail(node1SolrHome.getAbsolutePath() + " not found! run cloud example failed; tool output: " + toolOutput);
    }

    // delete the collection
    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);
    String[] deleteArgs = new String[]{"-name", collectionName, "-solrUrl", solrUrl};
    deleteTool.runTool(
        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));

    // dump all the output written by the SolrCLI commands to stdout
    //System.out.println(toolOutput);

    // stop the test instance
    executor.execute(org.apache.commons.exec.CommandLine.parse("bin/solr stop -p " + bindPort));
  }

