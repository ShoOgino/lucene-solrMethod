  @Override
  public synchronized NamedList<Object> request(SolrRequest request, String coll) throws SolrServerException, IOException {
    if (coll == null) {
      if (request.getParams() != null) {
        coll = request.getParams().get("collection");
      }
    }
    if (coll == null) {
      coll = "";
    }
    final String collection = coll;
    NamedList<Object> res = new NamedList<>();
    if (request instanceof UpdateRequest) {
      List<SolrInputDocument> docList = ((UpdateRequest) request).getDocuments();
      if (docList != null) {
        docList.forEach(doc -> {
          String id = (String) doc.getFieldValue("id");
          Assert.assertNotNull(doc.toString(), id);
          docs.computeIfAbsent(collection, c -> new LinkedHashMap<>()).put(id, doc);
        });
      }
    } else if (request instanceof QueryRequest) {
      SolrParams params = request.getParams();
      if (params == null) {
        throw new UnsupportedOperationException("invalid request, no params: " + request);
      }
      String query = params.get("q");
      final SolrDocumentList lst = new SolrDocumentList();
      if (query != null) {
        if (query.startsWith("{!term f=id}") || query.startsWith("id:")) {
          String id;
          if (query.startsWith("{!")) {
            id = query.substring(12);
          } else {
            id = query.substring(3);
          }
          Map<String, SolrInputDocument> collDocs = docs.get(collection);
          if (collDocs != null) {
            SolrInputDocument doc = collDocs.get(id);
            if (doc != null) {
              SolrDocument d = new SolrDocument();
              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));
              lst.add(d);
              lst.setNumFound(1);
            }
          }
        } else if (query.equals("*:*")) {
          Map<String, SolrInputDocument> collDocs = docs.get(collection);
          if (collDocs != null) {
            lst.setNumFound(collDocs.size());
            collDocs.values().forEach(doc -> {
              SolrDocument d = new SolrDocument();
              doc.forEach((k, f) -> f.forEach(v -> d.addField(k, v)));
              lst.add(d);
            });
          }
        }
      }
      res.add("response", lst);
    } else {
      throw new UnsupportedOperationException("Unsupported request type: " + request.getClass() + ":" + request);
    }
    return res;
  }

