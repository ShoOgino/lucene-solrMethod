  public void testConfig() throws Exception {
    final ResourceLoader loader = new ResourceLoader() {
      @Override
      public InputStream openResource(String resource) throws IOException {
        switch (resource) {
          case "source1.xml":
            return getStringStream("<!DOCTYPE test [\n" + 
                "<!ENTITY externalTerm SYSTEM \"foo://bar.xyz/external\">\n" + 
                "]>\n" + 
                "<test>&externalTerm;</test>");
          case "source2.xml":
            return getStringStream("<!DOCTYPE test [\n" + 
                "<!ENTITY externalTerm SYSTEM \"./include1.xml\">\n" + 
                "]>\n" + 
                "<test>&externalTerm;</test>");
          case "source3.xml":
            return getStringStream("<foo xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n" + 
                "  <xi:include href=\"./include2.xml\"/>\n" + 
                "</foo>");
          case "include1.xml":
            return getStringStream("Make XML Great Again!™");
          case "include2.xml":
            return getStringStream("<bar>Make XML Great Again!™</bar>");
        }
        throw new IOException("Resource not found: " + resource);
      }

      @Override
      public <T> Class<? extends T> findClass(String cname, Class<T> expectedType) {
        throw new UnsupportedOperationException();
      }

      @Override
      public <T> T newInstance(String cname, Class<T> expectedType) {
        throw new UnsupportedOperationException();
      }
      
    };
    
    IOException ioe = expectThrows(IOException.class, () -> {
      SafeXMLParsing.parseConfigXML(log, loader, "source1.xml");
    });
    assertTrue(ioe.getMessage().contains("Cannot resolve absolute systemIDs"));
    
    Document doc = SafeXMLParsing.parseConfigXML(log, loader, "source2.xml");
    assertEquals("Make XML Great Again!™", doc.getDocumentElement().getTextContent());
    
    doc = SafeXMLParsing.parseConfigXML(log, loader, "source3.xml");
    assertEquals("Make XML Great Again!™", doc.getDocumentElement().getTextContent().trim());
  }

