    /**
     * Smoke test for typical parameters used in practice.
     */
    @Test
    public void smokeTestSparseParams() {
        // XXX: revisit
        final int shortWordLength = 17;
        {// Should work on an empty sequence, with no padding.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     0/*wordCount*/,
                                                     0/*bytePadding, none*/);

            assert(Arrays.equals(serializer.getBytes(), new byte[0]));
        }
        {// Should work on a non-byte-divisible sequence, with no padding.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     3/*wordCount*/,
                                                     0/*bytePadding, none*/);

            serializer.writeWord(9);
            serializer.writeWord(42);
            serializer.writeWord(75);

            // The values:
            // -----------
            // 9                    |42                   |75                   |padding

            // Corresponding bits:
            // ------------------
            // 0000 0000 0000 0100 1|000 0000 0000 1010 10|00 0000 0000 1001 011|0 0000

            // And the hex/decimal (remember Java bytes are signed):
            // -----------------------------------------------------
            // 0000 0000 -> 0x00 -> 0
            // 0000 0100 -> 0x04 -> 4
            // 1000 0000 -> 0x80 -> -128
            // 0000 1010 -> 0x0A -> 10
            // 1000 0000 -> 0x80 -> -128
            // 0000 1001 -> 0x09 -> 9
            // 0110 0000 -> 0x60 -> 96

            final byte[] bytes = serializer.getBytes();
            final byte[] expectedBytes = new byte[] { 0, 4, -128, 10, -128, 9, 96 };
            assertTrue(Arrays.equals(bytes, expectedBytes));
        }
        {// Should work on a byte-divisible sequence, with no padding.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     8/*wordCount*/,
                                                     0/*bytePadding, none*/);

            for(int i=1; i<9; i++) {
                serializer.writeWord(i);
            }

            // Values: 1-8
            // Corresponding bits:
            // ------------------
            // 0000 0000 0000 0000 1
            // 000 0000 0000 0000 10
            // 00 0000 0000 0000 011
            // 0 0000 0000 0000 0100

            // 0000 0000 0000 0010 1
            // 000 0000 0000 0001 10
            // 00 0000 0000 0000 111
            // 0 0000 0000 0000 1000

            // And the hex:
            // ------------
            // 0000 0000 -> 0x00 -> 0
            // 0000 0000 -> 0x00 -> 0
            // 1000 0000 -> 0x80 -> -128
            // 0000 0000 -> 0x00 -> 0
            // 1000 0000 -> 0x80 -> -128
            // 0000 0000 -> 0x00 -> 0
            // 0110 0000 -> 0x60 -> 96
            // 0000 0000 -> 0x00 -> 0
            // 0100 0000 -> 0x40 -> 64
            // 0000 0000 -> 0x00 -> 0
            // 0010 1000 -> 0x28 -> 40
            // 0000 0000 -> 0x00 -> 0
            // 0001 1000 -> 0x18 -> 24
            // 0000 0000 -> 0x00 -> 0
            // 0000 1110 -> 0x0D -> 14
            // 0000 0000 -> 0x00 -> 0
            // 0000 1000 -> 0x08 -> 8

            final byte[] bytes = serializer.getBytes();
            final byte[] expectedBytes = new byte[] { 0, 0, -128, 0, -128, 0, 96, 0, 64, 0, 40, 0, 24, 0, 14, 0, 8 };
            assertTrue(Arrays.equals(bytes, expectedBytes));
        }
        {// Should pad the array correctly.
            final BigEndianAscendingWordSerializer serializer =
                new BigEndianAscendingWordSerializer(shortWordLength,
                                                     1/*wordCount*/,
                                                     1/*bytePadding*/);

            serializer.writeWord(1);
            // 1 byte leading padding | value 1 | trailing padding
            // 0000 0000 | 0000 0000 0000 0000 1|000 0000
            // 0x00 0x00 0x00 0x80
            final byte[] bytes = serializer.getBytes();
            final byte[] expectedBytes = new byte[] { 0, 0, 0, -128 };
            assertTrue(Arrays.equals(bytes, expectedBytes));
        }
    }

