  @Test
  public void testRunInParallel() {
    final int parallelism = atLeast(3);
    
    final ExecutorService controlExecutor = ExecutorUtil.newMDCAwareCachedThreadPool("testRunInParallel_control");
    final OrderedExecutor orderedExecutor = new OrderedExecutor
      (parallelism, ExecutorUtil.newMDCAwareCachedThreadPool("testRunInParallel_test"));

    try {
      // distinct lockIds should be able to be used in parallel, up to the size of the executor,
      // w/o any execute calls blocking... until the test Runables being executed are all
      // waiting on the same cyclic barrier...
      final CyclicBarrier barrier = new CyclicBarrier(parallelism + 1);
      final CountDownLatch preBarrierLatch = new CountDownLatch(parallelism);
      final CountDownLatch postBarrierLatch = new CountDownLatch(parallelism);
      
      for (int i = 0; i < parallelism; i++) {
        final int lockId = i;
        controlExecutor.execute(() -> {
            orderedExecutor.execute(lockId, () -> {
                try {
                  log.info("Worker #{} starting", lockId);
                  preBarrierLatch.countDown();
                  barrier.await(120, TimeUnit.SECONDS);
                  postBarrierLatch.countDown();
                } catch (TimeoutException t) {
                  log.error("Timeout in worker#" + lockId + "awaiting barrier", t);
                } catch (BrokenBarrierException b) {
                  log.error("Broken Barrier in worker#" + lockId, b);
                } catch (InterruptedException e) {
                  log.error("Interrupt in worker#" + lockId + "awaiting barrier", e);
                  Thread.currentThread().interrupt();
                }
              });
          });
      }

      log.info("main thread: about to wait on pre-barrier latch, barrier={}, post-barrier latch={}",
               barrier.getNumberWaiting(), postBarrierLatch.getCount());
      
      try {
        // this latch should have fully counted down by now
        // (or with a small await for thread scheduling but no other external action)
        assertTrue("Timeout awaiting pre barrier latch",
                   preBarrierLatch.await(120, TimeUnit.SECONDS));
      } catch (InterruptedException e) {
        log.error("Interrupt awwaiting pre barrier latch", e);
        Thread.currentThread().interrupt();
        fail("interupt while trying to await the preBarrierLatch");
      }
      
      log.info("main thread: pre-barrier latch done, barrier={}, post-barrier latch={}",
               barrier.getNumberWaiting(), postBarrierLatch.getCount());
      
      // nothing should have counted down yet on the postBarrierLatch
      assertEquals(parallelism, postBarrierLatch.getCount());

      try {
        // if we now await on the the barrier, it should release
        // (once all other threads get to the barrier as well, but no external action needed)
        barrier.await(120, TimeUnit.SECONDS);
        
        log.info("main thread: barrier has released, post-barrier latch={}",
                 postBarrierLatch.getCount());
        
        // and now the post-barrier latch should release immediately
        // (or with a small await for thread scheduling but no other external action)
        assertTrue("Timeout awaiting post barrier latch",
                   postBarrierLatch.await(120, TimeUnit.SECONDS));
      } catch (TimeoutException t) {
        log.error("Timeout awaiting barrier", t);
        fail("barrier timed out");
      } catch (BrokenBarrierException b) {
        log.error("Broken Barrier in main test thread", b);
        fail("broken barrier while trying to release the barrier");
      } catch (InterruptedException e) {
        log.error("Interrupt awwaiting barrier / post barrier latch", e);
        Thread.currentThread().interrupt();
        fail("interupt while trying to release the barrier and await the postBarrierLatch");
      }
    } finally {
      ExecutorUtil.shutdownAndAwaitTermination(controlExecutor);
      orderedExecutor.shutdownAndAwaitTermination();
    }
  }

