    // ------------------------------------------------------------------------
    /**
     * Tests {@link HLL#union(HLL)}.
     */
    @Test
    public void unionTest() {
        {// Unioning two distinct sets should work
            final HLL hllA = newHLL(128/*arbitrary*/);
            final HLL hllB = newHLL(128/*arbitrary*/);
            hllA.addRaw(1L);
            hllA.addRaw(2L);
            hllB.addRaw(3L);

            hllA.union(hllB);
            assertEquals(hllA.cardinality(), 3);
        }
        {// Unioning two sets whose union doesn't exceed the cardinality cap should not promote
            final HLL hllA = newHLL(128/*arbitrary*/);
            final HLL hllB = newHLL(128/*arbitrary*/);
            hllA.addRaw(1L);
            hllA.addRaw(2L);
            hllB.addRaw(1L);

            hllA.union(hllB);
            assertEquals(hllA.cardinality(), 2);
        }
        {// unioning two sets whose union exceeds the cardinality cap should promote
            final HLL hllA = newHLL(128/*arbitrary*/);
            final HLL hllB = newHLL(128/*arbitrary*/);

            // fill up sets to explicitThreshold
            for(long i=0; i<128/*explicitThreshold*/; i++) {
                hllA.addRaw(i);
                hllB.addRaw(i + 128);
            }

            hllA.union(hllB);
            assertEquals(hllA.getType(), HLLType.SPARSE);
        }
    }

