    /**
     * Unions an EMPTY accumulator with SPARSE HLLs, each
     * having a single register set, twice in a row to verify that the set
     * properties are satisfied.
     *
     * Format: cumulative union
     * Tests:
     * - EMPTY U SPARSE
     * - SPARSE U SPARSE
     */
    private static void sparseProbabilisticOverlapTest(final ISchemaVersion schemaVersion) throws IOException {
        final Writer output = openOutput(schemaVersion, "sparse_sparse", TestType.UNION);

        final Random random = new Random(randomLong());

        // the accumulator, starts empty
        final HLL hll = newHLL(HLLType.EMPTY);
        final HLL emptyHLL = newHLL(HLLType.EMPTY);

        cumulativeUnionLine(output, hll, emptyHLL, schemaVersion);

        for(int i=0; i<SPARSE_THRESHOLD; i++) {
            // make a SPARSE set and populate with cardinality 1
            final HLL sparseHLL = newHLL(HLLType.SPARSE);
            final int registerIndex = Math.abs(random.nextInt()) % REGISTER_COUNT;
            final int registerValue = ((Math.abs(random.nextInt()) % REGISTER_MAX_VALUE) + 1);
            final long rawValue = constructHLLValue(LOG2M, registerIndex, registerValue);
            sparseHLL.addRaw(rawValue);

            cumulativeUnionLine(output, hll, sparseHLL, schemaVersion);
        }

        output.flush();
        output.close();
    }

