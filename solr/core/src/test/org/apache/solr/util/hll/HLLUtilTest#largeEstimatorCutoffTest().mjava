    /**
     * Tests that {@link HLLUtil#largeEstimatorCutoff(int, int)} is the same
     * as a trivial implementation.
     */
    @Test
    public void largeEstimatorCutoffTest() {
        for(int log2m=HLL.MINIMUM_LOG2M_PARAM; log2m<=HLL.MAXIMUM_LOG2M_PARAM; log2m++) {
            for(int regWidth=HLL.MINIMUM_REGWIDTH_PARAM; regWidth<=HLL.MINIMUM_REGWIDTH_PARAM; regWidth++) {
                final double cutoff = HLLUtil.largeEstimatorCutoff(log2m, regWidth);

                // See blog post (http://research.neustar.biz/2013/01/24/hyperloglog-googles-take-on-engineering-hll/)
                // and original paper (Fig. 3) for information on 2^L and
                // "large range correction" cutoff.
                final double expected = Math.pow(2, Math.pow(2, regWidth) - 2 + log2m) / 30.0;
                assertEquals(cutoff, expected, 0.0001);
            }
        }
    }

