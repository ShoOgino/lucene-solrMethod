  // When an non-indexed field gets merged, it exhibit the old behavior
  // The field will be merged, docvalues headers updated, but no docvalues for this field
  public void testNonIndexedFieldDoesNonFail() throws Exception {
    // Remove Indexed from fieldType
    removeIndexFrom(h, TEST_FIELD);
    
    assertU(adoc(ID_FIELD, String.valueOf(1), TEST_FIELD, String.valueOf(1)));
    assertU(commit());
    
    addDocValuesTo(h, TEST_FIELD);
    
    assertU(adoc(ID_FIELD, String.valueOf(2), TEST_FIELD, String.valueOf(2)));
    assertU(commit());
    
    assertU(optimize("maxSegments", "1"));
    
    withNewRawReader(h, topReader -> {
      // Assert merged into one segment 
      assertEquals(2, topReader.numDocs());
      assertEquals(1, topReader.leaves().size());
      

      final FieldInfos infos = FieldInfos.getMergedFieldInfos(topReader);
      // The global field type should have docValues because a document with dvs was added
      assertEquals(DocValuesType.SORTED, infos.fieldInfo(TEST_FIELD).getDocValuesType());
      
      for (LeafReaderContext ctx : topReader.leaves()) {
        LeafReader r = ctx.reader();
        SortedDocValues docvalues = r.getSortedDocValues(TEST_FIELD);
        for(int i = 0; i < r.numDocs(); ++i) {
          Document doc = r.document(i);
          String v = doc.getField(TEST_FIELD).stringValue();
          String id = doc.getField(ID_FIELD).stringValue();
          assertEquals(DocValuesType.SORTED, r.getFieldInfos().fieldInfo(TEST_FIELD).getDocValuesType());
          assertEquals(DocValuesType.NONE, r.getFieldInfos().fieldInfo(ID_FIELD).getDocValuesType());
          
         
          if(id.equals("2")) {
            assertTrue(docvalues.advanceExact(i));
            assertEquals(v, docvalues.binaryValue().utf8ToString());
          } else {
            assertFalse(docvalues.advanceExact(i));
          }
          
        }
      }  
    });
  }

