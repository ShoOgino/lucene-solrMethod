  /**Validate a file for signature
   *
   * @param sigs the signatures. atleast one should succeed
   * @param entry The file details
   * @param isFirstAttempt If there is a failure
   */
  public void validate(List<String> sigs,
                       PackageStore.FileEntry entry,
                       boolean isFirstAttempt) throws SolrException, IOException {
    if (!isFirstAttempt) {
      //we are retrying because last validation failed.
      // get all keys again and try again
      packageStore.refresh(KEYS_DIR);
    }

    Map<String, byte[]> keys = packageStore.getKeys();
    if (keys == null || keys.isEmpty()) {
      if(isFirstAttempt) {
        validate(sigs, entry, false);
        return;
      }
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
          "Packagestore does not have any public keys");
    }
    CryptoKeys cryptoKeys = null;
    try {
      cryptoKeys = new CryptoKeys(keys);
    } catch (Exception e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
          "Error parsing public keys in ZooKeeper");
    }
    for (String sig : sigs) {
      Supplier<String> errMsg = () -> "Signature does not match any public key : " + sig + "sha256 " + entry.getMetaData().sha512;
      if (entry.getBuffer() != null) {
        if (cryptoKeys.verify(sig, entry.getBuffer()) == null) {
          if(isFirstAttempt) {
            validate(sigs, entry, false);
            return;
          }
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());
        }
      } else {
        InputStream inputStream = entry.getInputStream();
        if (cryptoKeys.verify(sig, inputStream) == null) {
          if(isFirstAttempt)  {
            validate(sigs, entry, false);
            return;
          }
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, errMsg.get());
        }

      }

    }
  }

