  private synchronized void reload(PackageLoader.Package pkg) {
    String lessThan = maxVersion();
    PackageLoader.Package.Version newest = pkg.getLatest(lessThan);
    if (newest == null) {
      log.error("No latest version available for package : {}", pkg.name());
      return;
    }
    if (lessThan != null) {
      PackageLoader.Package.Version pkgLatest = pkg.getLatest();
      if (pkgLatest != newest) {
        log.info("Using version :{}. latest is {},  params.json has config {} : {}", newest.getVersion(), pkgLatest.getVersion(), pkg.name(), lessThan);
      }
    }

    if (pkgVersion != null) {
      if (newest == pkgVersion) {
        //I'm already using the latest classloder in the package. nothing to do
        return;
      }
    }

    log.info("loading plugin: {} -> {} using  package {}:{}",
        pluginInfo.type, pluginInfo.name, pkg.name(), newest.getVersion());

    Object instance = SolrCore.createInstance(pluginInfo.className,
        pluginMeta.clazz, pluginMeta.getCleanTag(), core, newest.getLoader());
    PluginBag.initInstance(instance, pluginInfo);
    T old = inst;
    inst = (T) instance;
    pkgVersion = newest;
    if (old instanceof AutoCloseable) {
      AutoCloseable closeable = (AutoCloseable) old;
      try {
        closeable.close();
      } catch (Exception e) {
        log.error("error closing plugin", e);
      }
    }
  }

