  // Assumption: quoted is always false
  protected Query getFieldQuery(String field, List<String> queryTerms, boolean raw) throws SyntaxError {
    checkNullField(field);

    SchemaField sf;
    if (field.equals(lastFieldName)) {
      // only look up the SchemaField on a field change... this helps with memory allocation of dynamic fields
      // and large queries like foo_i:(1 2 3 4 5 6 7 8 9 10) when we are passed "foo_i" each time.
      sf = lastField;
    } else {
      // intercept magic field name of "_" to use as a hook for our
      // own functions.
      if (allowSubQueryParsing && field.charAt(0) == '_' && parser != null) {
        MagicFieldName magic = MagicFieldName.get(field);
        if (null != magic) {
          subQParser = parser.subQuery(String.join(" ", queryTerms), magic.subParser);
          return subQParser.getQuery();
        }
      }

      lastFieldName = field;
      sf = lastField = schema.getFieldOrNull(field);
    }

    if (sf != null) {
      FieldType ft = sf.getType();
      // delegate to type for everything except tokenized fields
      if (ft.isTokenized() && sf.indexed()) {
        String queryText = queryTerms.size() == 1 ? queryTerms.get(0) : String.join(" ", queryTerms);
        boolean fieldAutoGenPhraseQueries = ft instanceof TextField && ((TextField)ft).getAutoGeneratePhraseQueries();
        boolean fieldEnableGraphQueries = ft instanceof TextField && ((TextField)ft).getEnableGraphQueries();
        return newFieldQuery
            (getAnalyzer(), field, queryText, false, fieldAutoGenPhraseQueries, fieldEnableGraphQueries);
      } else {
        if (raw) {
          return new RawQuery(sf, queryTerms);
        } else {
          if (queryTerms.size() == 1) {
            return ft.getFieldQuery(parser, sf, queryTerms.get(0));
          } else {
            List<Query> subqs = new ArrayList<>();
            for (String queryTerm : queryTerms) {
              try {
                subqs.add(ft.getFieldQuery(parser, sf, queryTerm));
              } catch (Exception e) { // assumption: raw = false only when called from ExtendedDismaxQueryParser.getQuery()
                // for edismax: ignore parsing failures
              }
            }
            if (subqs.size() == 1) {
              return subqs.get(0);
            } else { // delay building boolean query until we must
              final BooleanClause.Occur occur
                  = operator == AND_OPERATOR ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;
              BooleanQuery.Builder booleanBuilder = newBooleanQuery();
              subqs.forEach(subq -> booleanBuilder.add(subq, occur));
              return booleanBuilder.build();
            }
          }
        }
      }
    }

    // default to a normal field query
    String queryText = queryTerms.size() == 1 ? queryTerms.get(0) : String.join(" ", queryTerms);
    return newFieldQuery(getAnalyzer(), field, queryText, false, false, true);
  }

