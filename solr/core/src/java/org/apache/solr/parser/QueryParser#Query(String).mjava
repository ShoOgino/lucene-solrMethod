  final public Query Query(String field) throws ParseException, SyntaxError {
  List<BooleanClause> clauses = new ArrayList<BooleanClause>();
  Query q;
  int conj, mods;
    if (jj_2_1(2)) {
      MultiTerm(field, clauses);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
      case PLUS:
      case MINUS:
      case BAREOPER:
      case LPAREN:
      case STAR:
      case QUOTED:
      case TERM:
      case PREFIXTERM:
      case WILDTERM:
      case REGEXPTERM:
      case RANGEIN_START:
      case RANGEEX_START:
      case LPARAMS:
      case FILTER:
      case NUMBER:
        mods = Modifiers();
        q = Clause(field);
        addClause(clauses, CONJ_NONE, mods, q);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
      case NOT:
      case PLUS:
      case MINUS:
      case BAREOPER:
      case LPAREN:
      case STAR:
      case QUOTED:
      case TERM:
      case PREFIXTERM:
      case WILDTERM:
      case REGEXPTERM:
      case RANGEIN_START:
      case RANGEEX_START:
      case LPARAMS:
      case FILTER:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      if (jj_2_2(2)) {
        MultiTerm(field, clauses);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case NOT:
        case PLUS:
        case MINUS:
        case BAREOPER:
        case LPAREN:
        case STAR:
        case QUOTED:
        case TERM:
        case PREFIXTERM:
        case WILDTERM:
        case REGEXPTERM:
        case RANGEIN_START:
        case RANGEEX_START:
        case LPARAMS:
        case FILTER:
        case NUMBER:
          conj = Conjunction();
          mods = Modifiers();
          q = Clause(field);
        addClause(clauses, conj, mods, q);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    if (clauses.size() == 1 && clauses.get(0).getOccur() == BooleanClause.Occur.SHOULD) {
      Query firstQuery = clauses.get(0).getQuery();
      if ( ! (firstQuery instanceof RawQuery) || ((RawQuery)firstQuery).getTermCount() == 1) {
        {if (true) return rawToNormal(firstQuery);}
      }
    }
    {if (true) return getBooleanQuery(clauses);}
    throw new Error("Missing return statement in function");
  }

