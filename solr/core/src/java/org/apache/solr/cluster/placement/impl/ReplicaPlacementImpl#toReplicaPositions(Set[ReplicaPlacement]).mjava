  /**
   * Translates a set of {@link ReplicaPlacement} returned by a plugin into a list of {@link ReplicaPosition} expected
   * by {@link org.apache.solr.cloud.api.collections.Assign.AssignStrategy}
   */
  static List<ReplicaPosition> toReplicaPositions(Set<ReplicaPlacement> replicaPlacementSet) {
    // The replica index in ReplicaPosition is not as strict a concept as it might seem. It is used in rules
    // based placement (for sorting replicas) but its presence in ReplicaPosition is not justified (and when the code
    // is executing here, it means rules based placement is not used).
    // Looking at ReplicaAssigner.tryAllPermutations, it is well possible to create replicas with same index
    // living on a given node for the same shard. This likely never happens because of the way replicas are
    // placed on nodes (never two on the same node for same shard). Adopting the same shortcut/bad design here,
    // but index should be removed at some point from ReplicaPosition.
    List<ReplicaPosition> replicaPositions = new ArrayList<>(replicaPlacementSet.size());
    int index = 0; // This really an arbitrary value when adding replicas and a possible source of core name collisions
    for (ReplicaPlacement placement : replicaPlacementSet) {
      replicaPositions.add(new ReplicaPosition(placement.getShardName(), index++, SimpleClusterAbstractionsImpl.ReplicaImpl.toCloudReplicaType(placement.getReplicaType()), placement.getNode().getName()));
    }

    return replicaPositions;
  }

