  /**
   * Accepts JSON add fieldtype request, to URL
   */
  @SuppressWarnings("unchecked")
  @Override
  public Representation put(Representation entity) {
    try {
      if (!getSchema().isMutable()) {
        final String message = "This IndexSchema is not mutable.";
        throw new SolrException(ErrorCode.BAD_REQUEST, message);
      }
      
      if (null == entity.getMediaType())
        entity.setMediaType(MediaType.APPLICATION_JSON);
      
      if (!entity.getMediaType().equals(MediaType.APPLICATION_JSON, true)) {
        String message = "Only media type " + MediaType.APPLICATION_JSON.toString() + " is accepted."
            + "  Request has media type " + entity.getMediaType().toString() + ".";
        log.error(message);
        throw new SolrException(ErrorCode.BAD_REQUEST, message);
      }
      
      Object object = ObjectBuilder.fromJSON(entity.getText());
      if (!(object instanceof Map)) {
        String message = "Invalid JSON type " + object.getClass().getName() + ", expected Map of the form"
            + " (ignore the backslashes): {\"name\":\"text_general\", \"class\":\"solr.TextField\" ...},"
            + " either with or without a \"name\" mapping.  If the \"name\" is specified, it must match the"
            + " name given in the request URL: /schema/fieldtypes/(name)";
        log.error(message);
        throw new SolrException(ErrorCode.BAD_REQUEST, message);
      }
      
      // basic validation passed, let's try to create it!
      addOrUpdateFieldType((Map<String, Object>)object);
      
    } catch (Exception e) {
      getSolrResponse().setException(e);
    }
    handlePostExecution(log);

    return new SolrOutputRepresentation();
  }

