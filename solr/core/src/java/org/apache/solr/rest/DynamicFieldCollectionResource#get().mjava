  @Override
  public Representation get() {
    
    try {
      SchemaField[] dynamicFields = getSchema().getDynamicFieldPrototypes();
      List<SimpleOrderedMap<Object>> props = new ArrayList<SimpleOrderedMap<Object>>(dynamicFields.length);
      if (null != getRequestedFields()) {
        if (0 == getRequestedFields().size()) {
          String message = "Empty " + CommonParams.FL + " parameter value";
          throw new SolrException(ErrorCode.BAD_REQUEST, message);
        }
        for (SchemaField prototype : dynamicFields) {
          if (getRequestedFields().containsKey(prototype.getName())) {
            getRequestedFields().put(prototype.getName(), getFieldProperties(prototype));
          }
        }
        // Use the same order as the fl parameter
        for (Map.Entry<String,SimpleOrderedMap<Object>> requestedField : getRequestedFields().entrySet()) {
          SimpleOrderedMap<Object> fieldProperties = requestedField.getValue();
          // Should there be some form of error condition
          // if one or more of the requested fields were not found?
          if (null != fieldProperties) {
            props.add(fieldProperties);
          }
        }
      } else {
        for (SchemaField prototype : dynamicFields) {
          // omit internal polyfields
          if ( ! prototype.getName().startsWith(INTERNAL_POLY_FIELD_PREFIX)) {
            props.add(getFieldProperties(prototype));
          }
        }
      }
      getSolrResponse().add(SchemaRestApi.DYNAMIC_FIELDS, props);
    } catch (Exception e) {
      getSolrResponse().setException(e);
    }
    handlePostExecution(log);

    return new SolrOutputRepresentation();
  }

