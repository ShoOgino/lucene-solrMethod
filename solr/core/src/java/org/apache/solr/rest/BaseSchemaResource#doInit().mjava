  /**
   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter
   * from the SolrRequestInfo thread local, then gets the SolrCore
   * and IndexSchema and sets up the response.
   * writer.
   * <p/>
   * If an error occurs during initialization, setExisting(false) is
   * called and an error status code and message is set; in this case,
   * Restlet will not continue servicing the request (by calling the
   * method annotated to associate it with GET, etc., but rather will
   * send an error response.
   */
  @Override
  public void doInit() throws ResourceException {
    super.doInit();
    setNegotiated(false); // Turn off content negotiation for now
    if (isExisting()) {
      try {
        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();
        if (null == solrRequestInfo) {
          final String message = "No handler or core found in " + getRequest().getOriginalRef().getPath();
          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);
          setExisting(false);
        } else {
          solrRequest = solrRequestInfo.getReq();
          if (null == solrRequest) {
            final String message = "No handler or core found in " + getRequest().getOriginalRef().getPath();
            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);
            setExisting(false);
          } else {
            solrResponse = solrRequestInfo.getRsp();
            solrCore = solrRequest.getCore();
            schema = solrCore.getSchema();
            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);
            if (null == responseWriterName) {
              responseWriterName = "json"; // Default to json writer
            }
            String indent = solrRequest.getParams().get("indent");
            if (null != indent && ("".equals(indent) || "off".equals(indent))) {
              doIndent = false;
            } else {                       // indent by default
              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());
              newParams.remove(indent);
              newParams.add("indent", "on");
              solrRequest.setParams(newParams);
            }
            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);
            contentType = responseWriter.getContentType(solrRequest, solrResponse);
            final String path = getRequest().getRootRef().getPath();
            final String firstPathElement = path.substring(0, path.indexOf("/", 1));
            solrRequest.getContext().put("webapp", firstPathElement); // Context path
            SolrCore.preDecorateResponse(solrRequest, solrResponse);
          }
        }
      } catch (Throwable t) {
        setExisting(false);
        throw new ResourceException(t);
      }
    }
  }

