  @Override
  public Representation get() {
    
    try {
      List<SimpleOrderedMap<Object>> props = new ArrayList<>();
      if (null == getRequestedFields()) {
        for (IndexSchema.DynamicField dynamicField : getSchema().getDynamicFields()) {
          if ( ! dynamicField.getRegex().startsWith(IndexSchema.INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields
            props.add(getFieldProperties(dynamicField.getPrototype()));
          }
        }
      } else {
        if (0 == getRequestedFields().size()) {
          String message = "Empty " + CommonParams.FL + " parameter value";
          throw new SolrException(ErrorCode.BAD_REQUEST, message);
        }
        Map<String,SchemaField> dynamicFieldsByName = new HashMap<>();
        for (IndexSchema.DynamicField dynamicField : getSchema().getDynamicFields()) {
          dynamicFieldsByName.put(dynamicField.getRegex(), dynamicField.getPrototype());
        }
        // Use the same order as the fl parameter
        for (String dynamicFieldName : getRequestedFields()) {
          final SchemaField dynamicSchemaField = dynamicFieldsByName.get(dynamicFieldName);
          if (null == dynamicSchemaField) {
            log.info("Requested dynamic field '" + dynamicFieldName + "' not found.");
          } else {
            props.add(getFieldProperties(dynamicSchemaField));
          }
        }
      }
      getSolrResponse().add(IndexSchema.DYNAMIC_FIELDS, props);
    } catch (Exception e) {
      getSolrResponse().setException(e);
    }
    handlePostExecution(log);

    return new SolrOutputRepresentation();
  }

