  @Override
  public Collection<LoggerInfo> getAllLoggers() {
    Logger root = LogManager.getRootLogger();
    LoggerContext ctx = (LoggerContext)LogManager.getContext(false);
    Map<String,LoggerInfo> map = new HashMap<>(ctx.getLoggers().size());

    //First let's get the explicitly configured loggers
    Map<String, LoggerConfig> loggers = ctx.getConfiguration().getLoggers();
    for(Map.Entry<String, LoggerConfig> logger : loggers.entrySet()) {
      String name = logger.getKey();

      if (logger == root || root.equals(logger) || isRootLogger(name) || "".equals(name)) {
        continue;
      }
      map.put(name, new Log4j2Info(name, logger.getValue().getLevel()));
    }

    for (org.apache.logging.log4j.core.Logger logger : ctx.getLoggers()) {
      String name = logger.getName();
      if (logger == root || root.equals(logger) || isRootLogger(name))
        continue;

      map.put(name, new Log4j2Info(name, logger.getLevel()));
      while (true) {
        int dot = name.lastIndexOf(".");
        if (dot < 0)
          break;

          name = name.substring(0, dot);
          if (!map.containsKey(name))
            map.put(name, new Log4j2Info(name, null));
      }
    }
    map.put(LoggerInfo.ROOT_NAME, new Log4j2Info(LoggerInfo.ROOT_NAME, root.getLevel()));
    return map.values();
  }

