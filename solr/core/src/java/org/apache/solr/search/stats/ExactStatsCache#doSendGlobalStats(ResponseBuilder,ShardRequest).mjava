  @Override
  protected void doSendGlobalStats(ResponseBuilder rb, ShardRequest outgoing) {
    ModifiableSolrParams params = outgoing.params;
    Set<Term> terms = StatsUtil.termsFromEncodedString((String) rb.req.getContext().get(TERMS_KEY));
    if (!terms.isEmpty()) {
      Set<String> fields = terms.stream().map(t -> t.field()).collect(Collectors.toSet());
      Map<String,TermStats> globalTermStats = new HashMap<>();
      Map<String,CollectionStats> globalColStats = new HashMap<>();
      // aggregate collection stats, only for the field in terms
      String collectionName = rb.req.getCore().getCoreDescriptor().getCollectionName();
      if (collectionName == null) {
        collectionName = rb.req.getCore().getCoreDescriptor().getName();
      }
      List<String> shards = new ArrayList<>();
      for (String shardUrl : rb.shards) {
        String shard = StatsUtil.shardUrlToShard(collectionName, shardUrl);
        if (shard == null) {
          log.warn("Can't determine shard from collectionName=" + collectionName + " and shardUrl=" + shardUrl + ", skipping...");
          continue;
        } else {
          shards.add(shard);
        }
      }
      for (String shard : shards) {
        Map<String,CollectionStats> s = getPerShardColStats(rb, shard);
        if (s == null) {
          continue;
        }
        for (Entry<String,CollectionStats> e : s.entrySet()) {
          if (!fields.contains(e.getKey())) { // skip non-relevant fields
            continue;
          }
          CollectionStats g = globalColStats.get(e.getKey());
          if (g == null) {
            g = new CollectionStats(e.getKey());
            globalColStats.put(e.getKey(), g);
          }
          g.add(e.getValue());
        }
      }
      params.add(COL_STATS_KEY, StatsUtil.colStatsMapToString(globalColStats));
      // sum up only from relevant shards
      params.add(TERMS_KEY, StatsUtil.termsToEncodedString(terms));
      for (Term t : terms) {
        String term = t.toString();
        for (String shard : shards) {
          TermStats termStats = getPerShardTermStats(rb.req, term, shard);
          if (termStats == null || termStats.docFreq == 0) {
            continue;
          }
          TermStats g = globalTermStats.get(term);
          if (g == null) {
            g = new TermStats(term);
            globalTermStats.put(term, g);
          }
          g.add(termStats);
        }
      }
      log.debug("terms={}, termStats={}", terms, globalTermStats);
      // need global TermStats here...
      params.add(TERM_STATS_KEY, StatsUtil.termStatsMapToString(globalTermStats));
    }
  }

