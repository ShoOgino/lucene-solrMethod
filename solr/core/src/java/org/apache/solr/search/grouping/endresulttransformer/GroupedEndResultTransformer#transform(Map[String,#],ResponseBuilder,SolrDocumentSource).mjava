  @Override
  public void transform(Map<String, ?> result, ResponseBuilder rb, SolrDocumentSource solrDocumentSource) {
    NamedList<Object> commands = new SimpleOrderedMap<>();
    SortSpec withinGroupSortSpec = rb.getGroupingSpec().getWithinGroupSortSpec();
    for (Map.Entry<String, ?> entry : result.entrySet()) {
      Object value = entry.getValue();
      if (TopGroups.class.isInstance(value)) {
        @SuppressWarnings("unchecked")
        TopGroups<BytesRef> topGroups = (TopGroups<BytesRef>) value;
        NamedList<Object> command = new SimpleOrderedMap<>();
        command.add("matches", rb.totalHitCount);
        Integer totalGroupCount = rb.mergedGroupCounts.get(entry.getKey());
        if (totalGroupCount != null) {
          command.add("ngroups", totalGroupCount);
        }

        @SuppressWarnings({"rawtypes"})
        List<NamedList> groups = new ArrayList<>();
        SchemaField groupField = searcher.getSchema().getField(entry.getKey());
        FieldType groupFieldType = groupField.getType();
        for (GroupDocs<BytesRef> group : topGroups.groups) {
          SimpleOrderedMap<Object> groupResult = new SimpleOrderedMap<>();
          if (group.groupValue != null) {
            // use createFields so that fields having doc values are also supported
            List<IndexableField> fields = groupField.createFields(group.groupValue.utf8ToString());
            if (CollectionUtils.isNotEmpty(fields)) {
              groupResult.add("groupValue", groupFieldType.toObject(fields.get(0)));
            } else {
              throw new SolrException(ErrorCode.INVALID_STATE,
                  "Couldn't create schema field for grouping, group value: " + group.groupValue.utf8ToString()
                  + ", field: " + groupField);
            }
          } else {
            groupResult.add("groupValue", null);
          }
          SolrDocumentList docList = new SolrDocumentList();
          assert group.totalHits.relation == TotalHits.Relation.EQUAL_TO;
          docList.setNumFound(group.totalHits.value);
          if (!Float.isNaN(group.maxScore)) {
            docList.setMaxScore(group.maxScore);
          }
          docList.setStart(withinGroupSortSpec.getOffset());
          retrieveAndAdd(docList, solrDocumentSource, group.scoreDocs);
          groupResult.add("doclist", docList);
          groups.add(groupResult);
        }
        command.add("groups", groups);
        commands.add(entry.getKey(), command);
      } else if (QueryCommandResult.class.isInstance(value)) {
        QueryCommandResult queryCommandResult = (QueryCommandResult) value;
        NamedList<Object> command = new SimpleOrderedMap<>();
        command.add("matches", queryCommandResult.getMatches());
        SolrDocumentList docList = new SolrDocumentList();
        TopDocs topDocs = queryCommandResult.getTopDocs();
        assert topDocs.totalHits.relation == TotalHits.Relation.EQUAL_TO;
        docList.setNumFound(topDocs.totalHits.value);
        if (!Float.isNaN(queryCommandResult.getMaxScore())) {
          docList.setMaxScore(queryCommandResult.getMaxScore());
        }
        docList.setStart(withinGroupSortSpec.getOffset());
        retrieveAndAdd(docList, solrDocumentSource, queryCommandResult.getTopDocs().scoreDocs);
        command.add("doclist", docList);
        commands.add(entry.getKey(), command);
      }
    }
    rb.rsp.add("grouped", commands);
  }

