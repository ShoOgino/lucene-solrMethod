  @Override
  public Query parse() throws SyntaxError {
    // grab query params and defaults
    SolrParams localParams = getLocalParams();

    Query rootNodeQuery = subQuery(localParams.get(QueryParsing.V), null).getQuery();
    String traversalFilterS = localParams.get("traversalFilter");
    Query traversalFilter = traversalFilterS == null ? null : subQuery(traversalFilterS, null).getQuery();

    // NOTE: the from/to are reversed from {!join}
    String fromField = localParams.get("from", "node_id");
    String toField = localParams.get("to", "edge_ids");

    // only documents that do not have values in the edge id fields.
    boolean onlyLeafNodes = localParams.getBool("returnOnlyLeaf", false);
    // choose if you want to return documents that match the initial query or not.
    boolean returnRootNodes = localParams.getBool("returnRoot", true);
    // enable or disable the use of an automaton term for the frontier traversal.
    int maxDepth = localParams.getInt("maxDepth", -1);
    // if true, an automaton will be compiled to issue the next graph hop
    // this avoid having a large number of boolean clauses. (and it's faster too!)
    boolean useAutn = localParams.getBool("useAutn", false);

    // Construct a graph query object based on parameters passed in.
    GraphQuery gq = new GraphQuery(rootNodeQuery, fromField, toField, traversalFilter);
    // set additional parameters that are not in the constructor.
    gq.setMaxDepth(maxDepth);
    gq.setOnlyLeafNodes(onlyLeafNodes);
    gq.setReturnRoot(returnRootNodes);
    gq.setUseAutn(useAutn);
    // return the parsed graph query.
    return gq;
  }

