  @Override
  protected ShardRequest doRetrieveStatsRequest(ResponseBuilder rb) {
    // check approximately what terms are needed.

    // NOTE: query rewrite only expands to terms that are present in the local index
    // so it's possible that the result will contain less terms than present in all shards.

    // HOWEVER: the absence of these terms is recorded by LRUStatsSource, and they will be
    // force-fetched on next request and cached.

    // check for missing stats from previous requests
    if (!missingColStats.isEmpty() || !missingColStats.isEmpty()) {
      // needs to fetch anyway, so get the full query stats + the missing stats for caching
      ShardRequest sreq = super.doRetrieveStatsRequest(rb);
      if (!missingColStats.isEmpty()) {
        Set<String> requestColStats = missingColStats;
        // there's a small window when new items may be added before
        // creating the request and clearing, so don't clear - instead replace the instance
        missingColStats = ConcurrentHashMap.newKeySet();
        sreq.params.add(FIELDS_KEY, StatsUtil.fieldsToString(requestColStats));
      }
      if (!missingTermStats.isEmpty()) {
        Set<Term> requestTermStats = missingTermStats;
        missingTermStats = ConcurrentHashMap.newKeySet();
        sreq.params.add(TERMS_KEY, StatsUtil.termsToEncodedString(requestTermStats));
      }
      return sreq;
    }

    // rewrite locally to see if there are any missing terms. See the note above for caveats.
    LongAdder missing = new LongAdder();
    try {
      // use ignorableMetrics to avoid counting this checking as real misses
      approxCheckMissingStats(rb, new LRUStatsSource(ignorableMetrics), t -> missing.increment(), f -> missing.increment());
      if (missing.sum() == 0) {
        // it should be (approximately) ok to skip the fetching

        // since we already incremented the stats decrement it here
        statsCacheMetrics.retrieveStats.decrement();
        statsCacheMetrics.useCachedGlobalStats.increment();
        return null;
      } else {
        return super.doRetrieveStatsRequest(rb);
      }
    } catch (IOException e) {
      if (log.isWarnEnabled()) {
        log.warn("Exception checking missing stats for query {}, forcing retrieving stats", rb.getQuery(), e);
      }
      // retrieve anyway
      return super.doRetrieveStatsRequest(rb);
    }
  }

