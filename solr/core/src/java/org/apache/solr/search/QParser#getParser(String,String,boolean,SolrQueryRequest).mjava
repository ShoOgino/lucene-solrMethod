  /**
   * Expert: Create a {@link QParser} to parse {@code qstr} using the {@code parserName} parser, while allowing a
   * toggle for whether local-params may be parsed.
   * The query parser may be overridden by local parameters in the query string itself
   * (assuming {@code allowLocalParams}.
   * For example if parserName=<code>dismax</code> and qstr=<code>foo</code>,
   * then the dismax query parser will be used to parse and construct the query object.
   * However if qstr=<code>{!prefix f=myfield}foo</code> then the prefix query parser will be used.
   *
   * @param allowLocalParams Whether this query parser should parse local-params syntax.
   *                         Note that the "lucene" query parser natively parses local-params regardless.
   * @lucene.internal
   */
  public static QParser getParser(String qstr, String parserName, boolean allowLocalParams, SolrQueryRequest req) throws SyntaxError {
    // SolrParams localParams = QueryParsing.getLocalParams(qstr, req.getParams());
    if (parserName == null) {
      parserName = QParserPlugin.DEFAULT_QTYPE;//"lucene"
    }
    String stringIncludingLocalParams = qstr;
    ModifiableSolrParams localParams = null;
    SolrParams globalParams = req.getParams();
    boolean valFollowedParams = true;
    int localParamsEnd = -1;

    if (allowLocalParams && qstr != null && qstr.startsWith(QueryParsing.LOCALPARAM_START)) {
      localParams = new ModifiableSolrParams();
      localParamsEnd = QueryParsing.parseLocalParams(qstr, 0, localParams, globalParams);

      String val = localParams.get(QueryParsing.V);
      if (val != null) {
        // val was directly specified in localParams via v=<something> or v=$arg
        valFollowedParams = false;
        //TODO if remainder of query string after '}' is non-empty, then what? Throw error? Fall back to lucene QParser?
      } else {
        // use the remainder of the string as the value
        valFollowedParams = true;
        val = qstr.substring(localParamsEnd);
        localParams.set(QueryParsing.V, val);
      }

      parserName = localParams.get(QueryParsing.TYPE,parserName);
      qstr = localParams.get(QueryParsing.V);
    }

    QParserPlugin qplug = req.getCore().getQueryPlugin(parserName);
    if (qplug == null) {
      // there should a way to include parameter for which parsing failed
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
          "invalid query parser '" + parserName + (stringIncludingLocalParams == null?
              "'": "' for query '" + stringIncludingLocalParams + "'"));
    }
    QParser parser =  qplug.createParser(qstr, localParams, req.getParams(), req);

    parser.stringIncludingLocalParams = stringIncludingLocalParams;
    parser.valFollowedParams = valFollowedParams;
    parser.localParamsEnd = localParamsEnd;
    return parser;
  }

