  protected SimpleOrderedMap<Object> refineFacets() throws IOException {
    List leaves = (List)fcontext.facetInfo.get("_l");

    // For leaf refinements, we do full faceting for each leaf bucket.  Any sub-facets of these buckets will be fully evaluated.  Because of this, we should never
    // encounter leaf refinements that have sub-facets that return partial results.

    SimpleOrderedMap<Object> res = new SimpleOrderedMap<>();
    List<SimpleOrderedMap> bucketList = new ArrayList<>(leaves.size());
    res.add("buckets", bucketList);

    // TODO: an alternate implementations can fill all accs at once
    createAccs(-1, 1);

    FieldType ft = sf.getType();
    for (Object bucketVal : leaves) {
      SimpleOrderedMap<Object> bucket = new SimpleOrderedMap<>();
      bucketList.add(bucket);
      bucket.add("val", bucketVal);

      // String internal = ft.toInternal( tobj.toString() );  // TODO - we need a better way to get from object to query...

      Query domainQ = ft.getFieldQuery(null, sf, bucketVal.toString());

      fillBucket(bucket, domainQ, null, false);
    }

    // If there are just a couple of leaves, and if the domain is large, then
    // going by term is likely the most efficient?
    // If the domain is small, or if the number of leaves is large, then doing
    // the normal collection method may be best.

    return res;
  }

