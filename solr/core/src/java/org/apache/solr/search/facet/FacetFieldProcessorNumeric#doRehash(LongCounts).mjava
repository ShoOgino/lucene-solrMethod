  private void doRehash(LongCounts table) {
    if (accs.length == 0) return;  // TODO: FUTURE: only need to resize acc we will sort on

    // Our "count" acc is backed by the hash table and will already be rehashed

    int newTableSize = table.numSlots();
    int numSlots = newTableSize;
    final int oldMissingSlot = missingSlot;
    final int oldAllBucketsSlot = allBucketsSlot;
    if (oldMissingSlot >= 0) {
      missingSlot = numSlots++;
    }
    if (allBucketsSlot >= 0) {
      allBucketsSlot = numSlots++;
    }

    final int finalNumSlots = numSlots;
    final int[] mapping = table.oldToNewMapping;

    SlotAcc.Resizer resizer = new SlotAcc.Resizer() {
      @Override
      public int getNewSize() {
        return finalNumSlots;
      }

      @Override
      public int getNewSlot(int oldSlot) {
        if (oldSlot < mapping.length) {
          return mapping[oldSlot];
        }
        if (oldSlot == oldMissingSlot) {
          return missingSlot;
        }
        if (oldSlot == oldAllBucketsSlot) {
          return allBucketsSlot;
        }
        return -1;
      }
    };

    for (SlotAcc acc : accs) {
      acc.resize( resizer );
    }
  }

