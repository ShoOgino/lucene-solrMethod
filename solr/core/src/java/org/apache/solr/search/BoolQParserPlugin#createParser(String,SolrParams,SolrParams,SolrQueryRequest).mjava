  @Override
  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
    return new FiltersQParser(qstr, localParams, params, req) {
      @Override
      public Query parse() throws SyntaxError {
        return parseImpl();
      }

      @Override
      protected Query unwrapQuery(Query query, BooleanClause.Occur occur) {
        if (occur== BooleanClause.Occur.FILTER) {
          if (!(query instanceof ExtendedQuery) || (
                  ((ExtendedQuery) query).getCache())) {
            return new FilterQuery(query);
          }
        } else {
          if (query instanceof WrappedQuery) {
            return ((WrappedQuery)query).getWrappedQuery();
          }
        }
        return query;
      }

      @Override
      protected Map<QParser, BooleanClause.Occur> clauses() throws SyntaxError {
        Map<QParser, BooleanClause.Occur> clauses = new IdentityHashMap<>();
        SolrParams solrParams = SolrParams.wrapDefaults(localParams, params);
        addQueries(clauses, solrParams.getParams("must"), BooleanClause.Occur.MUST);
        addQueries(clauses, solrParams.getParams("must_not"), BooleanClause.Occur.MUST_NOT);
        addQueries(clauses, solrParams.getParams("filter"), BooleanClause.Occur.FILTER);
        addQueries(clauses, solrParams.getParams("should"), BooleanClause.Occur.SHOULD);
        return clauses;
      }

      private void addQueries(Map<QParser, BooleanClause.Occur> clausesDest, String[] subQueries, BooleanClause.Occur occur) throws SyntaxError {
        if (subQueries != null) {
          for (String subQuery : subQueries) {
            final QParser subParser = subQuery(subQuery, null);
            clausesDest.put(subParser, occur);
          }
        }
      }
    };
  }

