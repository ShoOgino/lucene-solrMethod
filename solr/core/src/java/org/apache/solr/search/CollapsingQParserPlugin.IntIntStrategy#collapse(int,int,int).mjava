    public void collapse(int collapseKey, int contextDoc, int globalDoc) throws IOException {

      // Check to see if we have documents boosted by the QueryElevationComponent
      if(boosts && mergeBoost.boost(globalDoc)) {
        boostDocs.add(globalDoc);
        boostKeys.add(collapseKey);
        return;
      }

      int currentVal = (int) minMaxVals.get(contextDoc);

      if(collapseKey != nullValue) {
        if(cmap.containsKey(collapseKey)) {
          long pointerValue = cmap.lget();
          int testValue = (int)pointerValue;
          if(comp.test(currentVal, testValue)) {
            pointerValue = (pointerValue-testValue)+currentVal;
            cmap.lset(pointerValue);
            int pointer = (int)(pointerValue>>32);
            if(needsScores) {
              float score = scorer.score();
              long docScore = (((long)globalDoc)<<32)+Float.floatToIntBits(score);
              docScores.set(pointer, docScore);
            } else {
              docs.set(pointer, globalDoc);
            }
          }
        } else {
          ++index;
          //The index provides a pointer into docs or docScore lists.
          //Combined the pointer with the current value into a long
          long pointerValue = (((long)index)<<32)+currentVal;
          cmap.put(collapseKey, pointerValue);
          if(needsScores) {
            float score = scorer.score();
            long docScore = (((long)globalDoc)<<32)+Float.floatToIntBits(score);
            docScores.add(docScore);
          } else {
            docs.add(globalDoc);
          }
        }
      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {
        if(comp.test(currentVal, nullCompVal)) {
          nullCompVal = currentVal;
          nullDoc = globalDoc;
          if(needsScores) {
            nullScore = scorer.score();
          }
        }
      } else if(this.nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {
        this.collapsedSet.set(globalDoc);
        if(needsScores) {
          nullScores.add(scorer.score());
        }
      }
    }

