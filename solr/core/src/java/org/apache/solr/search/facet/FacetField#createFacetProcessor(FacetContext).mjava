  @Override
  public FacetProcessor createFacetProcessor(FacetContext fcontext) {
    SchemaField sf = fcontext.searcher.getSchema().getField(field);
    FieldType ft = sf.getType();
    boolean multiToken = sf.multiValued() || ft.multiValuedFieldCache();

    if (method == FacetMethod.ENUM && sf.indexed()) {
      throw new UnsupportedOperationException();
    } else if (method == FacetMethod.STREAM && sf.indexed()) {
      return new FacetFieldProcessorStream(fcontext, this, sf);
    }

    org.apache.lucene.document.FieldType.LegacyNumericType ntype = ft.getNumericType();

    if (sf.hasDocValues() && ntype==null) {
      // single and multi-valued string docValues
      return new FacetFieldProcessorDV(fcontext, this, sf);
    }

    if (!multiToken) {
      if (sf.getType().getNumericType() != null) {
        // single valued numeric (docvalues or fieldcache)
        return new FacetFieldProcessorNumeric(fcontext, this, sf);
      } else {
        // single valued string...
        return new FacetFieldProcessorDV(fcontext, this, sf);
      }
    }

    // multivalued but field doesn't have docValues
    if (method == FacetMethod.DV) {
      return new FacetFieldProcessorDV(fcontext, this, sf);
    }

    // Top-level multi-valued field cache (UIF)
    return new FacetFieldProcessorUIF(fcontext, this, sf);
  }

