  @Override
  public FacetProcessor createFacetProcessor(FacetContext fcontext) {
    SchemaField sf = fcontext.searcher.getSchema().getField(field);
    FieldType ft = sf.getType();
    boolean multiToken = sf.multiValued() || ft.multiValuedFieldCache();

    if (method == FacetMethod.ENUM && sf.indexed()) {
      throw new UnsupportedOperationException();
    } else if (method == FacetMethod.STREAM && sf.indexed()) {
      return new FacetFieldProcessorByEnumTermsStream(fcontext, this, sf);
    }

    org.apache.lucene.document.FieldType.LegacyNumericType ntype = ft.getNumericType();

    if (!multiToken) {
      if (ntype != null) {
        // single valued numeric (docvalues or fieldcache)
        return new FacetFieldProcessorByHashNumeric(fcontext, this, sf);
      } else {
        // single valued string...
        return new FacetFieldProcessorByArrayDV(fcontext, this, sf);
      }
    }

    // multi-valued after this point

    if (sf.hasDocValues() || method == FacetMethod.DV) {
      // single and multi-valued string docValues
      return new FacetFieldProcessorByArrayDV(fcontext, this, sf);
    }

    // Top-level multi-valued field cache (UIF)
    return new FacetFieldProcessorByArrayUIF(fcontext, this, sf);
  }

