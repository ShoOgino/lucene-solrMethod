      /**
       * Given a <code>Domain</code>, and a (JSON) map specifying the configuration for that Domain,
       * validates if a '<code>join</code>' is specified, and if so creates a <code>JoinField</code>
       * and sets it on the <code>Domain</code>.
       *
       * (params must not be null)
       */
      public static void createJoinField(FacetRequest.Domain domain, Map<String,Object> domainMap) {
        assert null != domain;
        assert null != domainMap;

        final Object queryJoin = domainMap.get("join");
        if (null != queryJoin) {
          // TODO: maybe allow simple string (instead of map) to mean "self join on this field name" ?
          if (! (queryJoin instanceof Map)) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                "'join' domain change requires a map containing the 'from' and 'to' fields");
          }
          @SuppressWarnings({"unchecked"})
          final Map<String,String> join = (Map<String,String>) queryJoin;
          if (! (join.containsKey(FROM_PARAM) && join.containsKey(TO_PARAM) &&
              null != join.get(FROM_PARAM) && null != join.get(TO_PARAM)) ) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                "'join' domain change requires non-null 'from' and 'to' field names");
          }

          for (String providedKey : join.keySet()) {
            if (! SUPPORTED_JOIN_PROPERTIES.contains(providedKey)) {
              final String supportedPropsStr = String.join(", ", SUPPORTED_JOIN_PROPERTIES);
              final String message = String.format(Locale.ROOT,
                  "'join' domain change contains unexpected key [%s], only %s supported", providedKey, supportedPropsStr);
              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, message);
            }
          }

          final String method = join.containsKey(METHOD_PARAM) ? join.get(METHOD_PARAM) : "index";
          domain.joinField = new JoinField(join.get(FROM_PARAM), join.get(TO_PARAM), method);
        }
      }

