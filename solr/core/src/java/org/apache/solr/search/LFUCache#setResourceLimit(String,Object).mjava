  @Override
  public synchronized void setResourceLimit(String limitName, Object val) {
    if (TIME_DECAY_PARAM.equals(limitName) || CLEANUP_THREAD_PARAM.equals(limitName)) {
      Boolean value;
      try {
        value = Boolean.parseBoolean(String.valueOf(val));
      } catch (Exception e) {
        throw new IllegalArgumentException("Invalid value of boolean limit '" + limitName + "': " + val);
      }
      switch (limitName) {
        case TIME_DECAY_PARAM:
          timeDecay = value;
          cache.setTimeDecay(timeDecay);
          break;
        case CLEANUP_THREAD_PARAM:
          cleanupThread = value;
          cache.setRunCleanupThread(cleanupThread);
          break;
      }
    } else {
      Number value;
      try {
        value = Long.parseLong(String.valueOf(val));
      } catch (Exception e) {
        throw new IllegalArgumentException("Invalid new value for numeric limit '" + limitName +"': " + val);
      }
      if (value.intValue() <= 1 || value.longValue() > Integer.MAX_VALUE) {
        throw new IllegalArgumentException("Out of range new value for numeric limit '" + limitName +"': " + value);
      }
      switch (limitName) {
        case SIZE_PARAM:
          sizeLimit = value.intValue();
          checkAndAdjustLimits();
          cache.setUpperWaterMark(sizeLimit);
          cache.setLowerWaterMark(minSizeLimit);
          break;
        case MIN_SIZE_PARAM:
          minSizeLimit = value.intValue();
          checkAndAdjustLimits();
          cache.setUpperWaterMark(sizeLimit);
          cache.setLowerWaterMark(minSizeLimit);
          break;
        case ACCEPTABLE_SIZE_PARAM:
          acceptableSize = value.intValue();
          acceptableSize = Math.max(minSizeLimit, acceptableSize);
          cache.setAcceptableWaterMark(acceptableSize);
          break;
        case AUTOWARM_COUNT_PARAM:
          autowarmCount = value.intValue();
          break;
        case SHOW_ITEMS_PARAM:
          showItems = value.intValue();
          break;
        default:
          throw new IllegalArgumentException("Unsupported numeric limit '" + limitName + "'");
      }
    }
    description = generateDescription();
  }

