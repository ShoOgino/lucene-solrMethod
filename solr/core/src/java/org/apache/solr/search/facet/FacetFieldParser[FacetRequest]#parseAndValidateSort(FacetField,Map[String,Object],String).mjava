  /**
   * Parses, validates and returns the {@link FacetRequest.FacetSort} for given sortParam
   * and facet field
   * <p>
   *   Currently, supported sort specifications are 'mystat desc' OR {mystat: 'desc'}
   *   index - This is equivalent to 'index asc'
   *   count - This is equivalent to 'count desc'
   * </p>
   *
   * @param facet {@link FacetField} for which sort needs to be parsed and validated
   * @param args map containing the sortVal for given sortParam
   * @param sortParam parameter for which sort needs to parsed and validated
   * @return parsed facet sort
   */
  private static FacetRequest.FacetSort parseAndValidateSort(FacetField facet, Map<String, Object> args, String sortParam) {
    Object sort = args.get(sortParam);
    if (sort == null) {
      return null;
    }

    FacetRequest.FacetSort facetSort = null;

    if (sort instanceof String) {
      String sortStr = (String)sort;
      if (sortStr.endsWith(" asc")) {
        facetSort =  new FacetRequest.FacetSort(sortStr.substring(0, sortStr.length()-" asc".length()),
            FacetRequest.SortDirection.asc);
      } else if (sortStr.endsWith(" desc")) {
        facetSort =  new FacetRequest.FacetSort(sortStr.substring(0, sortStr.length()-" desc".length()),
            FacetRequest.SortDirection.desc);
      } else {
        facetSort =  new FacetRequest.FacetSort(sortStr,
            // default direction for "index" is ascending
            ("index".equals(sortStr)
                ? FacetRequest.SortDirection.asc
                : FacetRequest.SortDirection.desc));
      }
    } else if (sort instanceof Map) {
      // { myvar : 'desc' }
      Optional<Map.Entry<String,Object>> optional = ((Map<String,Object>)sort).entrySet().stream().findFirst();
      if (optional.isPresent()) {
        Map.Entry<String, Object> entry = optional.get();
        facetSort = new FacetRequest.FacetSort(entry.getKey(), FacetRequest.SortDirection.fromObj(entry.getValue()));
      }
    } else {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
          "Expected string/map for '" + sortParam +"', received "+ sort.getClass().getSimpleName() + "=" + sort);
    }

    Map<String, AggValueSource> facetStats = facet.facetStats;
    // validate facet sort
    boolean isValidSort = facetSort == null ||
        "index".equals(facetSort.sortVariable) ||
        "count".equals(facetSort.sortVariable) ||
        (facetStats != null && facetStats.containsKey(facetSort.sortVariable));

    if (!isValidSort) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
          "Invalid " + sortParam + " option '" + sort + "' for field '" + facet.field + "'");
    }
    return facetSort;
  }

