  @Override
  public int distributedProcess(ResponseBuilder rb) throws IOException {
    FacetComponentState facetState = getFacetComponentState(rb);
    if (facetState == null) return ResponseBuilder.STAGE_DONE;

    if (rb.stage != ResponseBuilder.STAGE_GET_FIELDS) {
      return ResponseBuilder.STAGE_DONE;
    }

    // Check if there are any refinements possible
    if (facetState.mcontext.getSubsWithRefinement(facetState.facetRequest).isEmpty()) {
      clearFaceting(rb.outgoing);
      return ResponseBuilder.STAGE_DONE;
    }

    // Overlap facet refinement requests (those shards that we need a count
    // for particular facet values from), where possible, with
    // the requests to get fields (because we know that is the
    // only other required phase).
    // We do this in distributedProcess so we can look at all of the
    // requests in the outgoing queue at once.

    assert rb.shards.length == facetState.mcontext.numShards;
    for (String shard : rb.shards) {
      facetState.mcontext.setShard(shard);

      // shard-specific refinement
      Map<String,Object> refinement = facetState.merger.getRefinement(facetState.mcontext);
      if (refinement == null) continue;

      boolean newRequest = false;
      ShardRequest shardsRefineRequest = null;

      // try to find a request that is already going out to that shard.
      // If nshards becomes too great, we may want to move to hashing for
      // better scalability.
      for (ShardRequest sreq : rb.outgoing) {
        if ( (sreq.purpose & (ShardRequest.PURPOSE_GET_FIELDS|ShardRequest.PURPOSE_REFINE_FACETS|ShardRequest.PURPOSE_REFINE_PIVOT_FACETS)) != 0
            && sreq.shards != null
            && sreq.shards.length == 1
            && sreq.shards[0].equals(shard))
        {
          shardsRefineRequest = sreq;
          break;
        }
      }

      if (shardsRefineRequest == null) {
        // we didn't find any other suitable requests going out to that shard,
        // so create one ourselves.
        newRequest = true;
        shardsRefineRequest = new ShardRequest();
        shardsRefineRequest.shards = new String[] { shard };
        shardsRefineRequest.params = new ModifiableSolrParams(rb.req.getParams());
        // don't request any documents
        shardsRefineRequest.params.remove(CommonParams.START);
        shardsRefineRequest.params.set(CommonParams.ROWS, "0");
        shardsRefineRequest.params.set(FacetParams.FACET, false);
      }

      shardsRefineRequest.purpose |= PURPOSE_REFINE_JSON_FACETS;

      Map<String,Object> finfo = new HashMap<>(1);
      finfo.put(FACET_REFINE, refinement);
      String finfoStr = JSONUtil.toJSON(finfo);
      shardsRefineRequest.params.add(FACET_INFO, finfoStr);

      if (newRequest) {
        rb.addRequest(this, shardsRefineRequest);
      }
    }

    // clearFaceting(rb.outgoing);
    return ResponseBuilder.STAGE_DONE;
  }

