  @VisibleForTesting
  static List<List<Integer>> asInts2D(final int columns, final int rows, final int[] counts) {
    //Returns a view versus returning a copy. This saves memory.
    //The data is oriented naturally for human/developer viewing: one row at a time top-down
    return new AbstractList<List<Integer>>() {
      @Override
      public List<Integer> get(final int rowIdx) {//top-down remember; the heatmap.counts is bottom up
        //check if all zeroes and return null if so
        boolean hasNonZero = false;
        int y = rows - rowIdx - 1;//flip direction for 'y'
        for (int c = 0; c < columns; c++) {
          if (counts[c * rows + y] > 0) {
            hasNonZero = true;
            break;
          }
        }
        if (!hasNonZero) {
          return null;
        }

        return new AbstractList<Integer>() {
          @Override
          public Integer get(int columnIdx) {
            return counts[columnIdx * rows + y];
          }

          @Override
          public int size() {
            return columns;
          }
        };
      }

      @Override
      public int size() {
        return rows;
      }
    };
  }

