  @Override
  public void returnLocalStats(ResponseBuilder rb, SolrIndexSearcher searcher) {
    Query q = rb.getQuery();
    try {
      HashSet<Term> terms = new HashSet<>();
      searcher.createWeight(searcher.rewrite(q), ScoreMode.COMPLETE, 1).extractTerms(terms);
      IndexReaderContext context = searcher.getTopReaderContext();
      HashMap<String,TermStats> statsMap = new HashMap<>();
      HashMap<String,CollectionStats> colMap = new HashMap<>();
      for (Term t : terms) {
        TermStates termStates = TermStates.build(context, t, true);

        if (!colMap.containsKey(t.field())) { // collection stats for this field
          CollectionStatistics collectionStatistics = searcher.localCollectionStatistics(t.field());
          if (collectionStatistics != null) {
            colMap.put(t.field(), new CollectionStats(collectionStatistics));
          }
        }

        TermStatistics tst = searcher.localTermStatistics(t, termStates);
        if (tst == null) { // skip terms that are not present here
          continue;
        }

        statsMap.put(t.toString(), new TermStats(t.field(), tst));
        rb.rsp.add(TERMS_KEY, t.toString());
      }
      if (statsMap.size() != 0) { //Don't add empty keys
        String termStatsString = StatsUtil.termStatsMapToString(statsMap);
        rb.rsp.add(TERM_STATS_KEY, termStatsString);
        if (log.isDebugEnabled()) {
          log.debug("termStats={}, terms={}, numDocs={}", termStatsString, terms, searcher.maxDoc());
        }
      }
      if (colMap.size() != 0){
        String colStatsString = StatsUtil.colStatsMapToString(colMap);
        rb.rsp.add(COL_STATS_KEY, colStatsString);
        if (log.isDebugEnabled()) {
          log.debug("collectionStats={}, terms={}, numDocs={}", colStatsString, terms, searcher.maxDoc());
        }
      }
    } catch (IOException e) {
      log.error("Error collecting local stats, query='" + q.toString() + "'", e);
      throw new SolrException(ErrorCode.SERVER_ERROR, "Error collecting local stats.", e);
    }
  }

