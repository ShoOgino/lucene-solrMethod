    /**
     * Called by processors if they support sweeping. Implementations will often
     * return self or null (the latter indicating that all necessary collection will
     * be covered by the "sweeping" data structures registered with the specified
     * baseSweepingAcc as a result of the call to this method).
     *
     * If an implementing instance chooses to replace itself with another {@link SlotAcc}, it must
     * call {@link SweepingCountSlotAcc#registerMapping(SlotAcc, SlotAcc)} on the specified
     * baseSweepingAcc to notify it of the mapping from original SlotAcc to the SlotAcc that should
     * be used for purposes of read access. It is the responsibility of the specified {@link SweepingCountSlotAcc}
     * to ensure proper placement/accessibility of the SlotAcc to be used for read access.
     * 
     * The replacement SlotAcc registered via {@link SweepingCountSlotAcc#registerMapping(SlotAcc, SlotAcc)}
     * will be responsible for output via its {@link SlotAcc#setValues(SimpleOrderedMap, int)} method.
     * An implementer of this method may register such a replacement, and also return a non-null
     * SlotAcc to be used for normal collection (via {@link FacetFieldProcessor#collectAcc}). In this case,
     * the implementer should take care that the returned {@link SlotAcc} is different from the {@link SlotAcc}
     * registered for the purpose of output -- with the former overriding {@link SlotAcc#setValues(SimpleOrderedMap, int)}
     * as a no-op, to prevent setting duplicate values.
     *
     * @param baseSweepingAcc - never null, where the SlotAcc may register domains for sweep collection,
     * and must register mappings of new read-access SlotAccs that result from this call.
     * @return SlotAcc to be used for purpose of collection. If null then collect methods will
     * never be called on this SlotAcc.
     */
    public T registerSweepingAccs(SweepingCountSlotAcc baseSweepingAcc);

