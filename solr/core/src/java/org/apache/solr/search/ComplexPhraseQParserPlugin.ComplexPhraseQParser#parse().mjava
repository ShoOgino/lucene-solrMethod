    @Override
    public Query parse() throws SyntaxError {
      String qstr = getString();

      String defaultField = getParam(CommonParams.DF);
      if (defaultField == null) {
        defaultField = getReq().getSchema().getDefaultSearchFieldName();
      }

      SolrQueryParserDelegate reverseAwareParser = new SolrQueryParserDelegate(this, defaultField);
      
      lparser = new ComplexPhraseQueryParser(defaultField, getReq().getSchema().getQueryAnalyzer())
          {
              protected Query newWildcardQuery(org.apache.lucene.index.Term t) {
                try {
                  org.apache.lucene.search.Query wildcardQuery = reverseAwareParser.getWildcardQuery(t.field(), t.text());
                  setRewriteMethod(wildcardQuery);
                  return wildcardQuery;
                } catch (SyntaxError e) {
                  throw new RuntimeException(e);
                }
              }

              private Query setRewriteMethod(org.apache.lucene.search.Query query) {
                if (query instanceof MultiTermQuery) {
                  ((MultiTermQuery) query).setRewriteMethod(
                      org.apache.lucene.search.MultiTermQuery.SCORING_BOOLEAN_REWRITE);
                }
                return query;
              }
              
              protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive,
                  boolean endInclusive) {
                boolean reverse = reverseAwareParser.isRangeShouldBeProtectedFromReverse(field, part1);
                return super.newRangeQuery(field, 
                                            reverse ? reverseAwareParser.getLowerBoundForReverse() : part1, 
                                            part2,
                                            startInclusive || reverse, 
                                            endInclusive);
              }
          }
          ;

      lparser.setAllowLeadingWildcard(true);
          
      if (localParams != null) {
        inOrder = localParams.getBool("inOrder", inOrder);
      }
      
      lparser.setInOrder(inOrder);

      QueryParser.Operator defaultOperator = QueryParsing.parseOP(getParam(QueryParsing.OP));

      if (QueryParser.Operator.AND.equals(defaultOperator))
        lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.AND);
      else
        lparser.setDefaultOperator(org.apache.lucene.queryparser.classic.QueryParser.Operator.OR);

      try {
        return lparser.parse(qstr);
      } catch (ParseException pe) {
        throw new SyntaxError(pe);
      }
    }

