  @Override
  public void setResourceLimit(String limitName, Object val) {
    if (CLEANUP_THREAD_PARAM.equals(limitName)) {
      Boolean value;
      try {
        value = Boolean.parseBoolean(val.toString());
        cleanupThread = value;
        cache.setRunCleanupThread(cleanupThread);
      } catch (Exception e) {
        throw new IllegalArgumentException("Invalid new value for boolean limit '" + limitName + "': " + val);
      }
    }
    Number value;
    try {
      value = Long.parseLong(String.valueOf(val));
    } catch (Exception e) {
      throw new IllegalArgumentException("Invalid new value for numeric limit '" + limitName +"': " + val);
    }
    if (!limitName.equals(MAX_RAM_MB_PARAM)) {
      if (value.intValue() <= 1) {
        throw new IllegalArgumentException("Invalid new value for numeric limit '" + limitName +"': " + value);
      }
    }
    if (value.longValue() > Integer.MAX_VALUE) {
      throw new IllegalArgumentException("Invalid new value for numeric limit '" + limitName +"': " + value);
    }
    switch (limitName) {
      case SIZE_PARAM:
        sizeLimit = value.intValue();
        checkAndAdjustLimits();
        cache.setUpperWaterMark(sizeLimit);
        cache.setLowerWaterMark(minSizeLimit);
        break;
      case MIN_SIZE_PARAM:
        minSizeLimit = value.intValue();
        checkAndAdjustLimits();
        cache.setUpperWaterMark(sizeLimit);
        cache.setLowerWaterMark(minSizeLimit);
        break;
      case ACCEPTABLE_SIZE_PARAM:
        acceptableSize = value.intValue();
        acceptableSize = Math.max(minSizeLimit, acceptableSize);
        cache.setAcceptableWaterMark(acceptableSize);
        break;
      case MAX_RAM_MB_PARAM:
        long maxRamMB = value.intValue();
        maxRamBytes = maxRamMB < 0 ? Long.MAX_VALUE : maxRamMB * 1024L * 1024L;
        if (maxRamMB < 0) {
          ramLowerWatermark = Long.MIN_VALUE;
        } else {
          ramLowerWatermark = Math.round(maxRamBytes * 0.8);
        }
        cache.setRamUpperWatermark(maxRamBytes);
        cache.setRamLowerWatermark(ramLowerWatermark);
        break;
      case SHOW_ITEMS_PARAM:
        showItems = value.intValue();
        break;
      default:
        throw new IllegalArgumentException("Unsupported limit '" + limitName + "'");
    }
    description = generateDescription();
  }

