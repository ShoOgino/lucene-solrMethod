  /** @lucene.experimental */
  public AggValueSource parseAgg(int flags) throws SyntaxError {
    String origId = sp.getId();
    AggValueSource vs = null;
    boolean hasParen;

    if ("agg".equals(origId)) {
      hasParen = sp.opt("(");
      vs = parseAgg(flags | FLAG_IS_AGG);
    } else {
      // parse as an aggregation...
      String id = origId.startsWith("agg_")? origId: "agg_" + origId;
      hasParen = sp.opt("(");

      ValueSourceParser argParser = req.getCore().getValueSourceParser(id);
      if (argParser == null) {
        argParser = req.getCore().getValueSourceParser(origId);
        if (argParser == null) {
          throw new SyntaxError("Unknown aggregation '" + origId + "' in input (" + sp + ")");
        } else {
          throw new SyntaxError("Expected multi-doc aggregation from '" +  origId +
              "' but got per-doc function in input (" + sp + ")");
        }
      }

      ValueSource vv = argParser.parse(this);
      if (!(vv instanceof AggValueSource)) {
        throw new SyntaxError("Expected multi-doc aggregation from '" + origId +
            "' but got (" + vv + ") in (" + sp + ")");
      }
      vs = (AggValueSource) vv;
    }

    if (hasParen) {
      sp.expect(")");
    }

    if ((flags & FLAG_CONSUME_DELIMITER) != 0) {
      consumeArgumentDelimiter();
    }

    return vs;
  }

