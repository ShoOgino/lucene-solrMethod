  @Override
  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {
    final int off = readerContext.docBase;
    final LeafReader r;
    Object o = context.get("searcher");
    if (o instanceof SolrIndexSearcher) {
      @SuppressWarnings("resource") final SolrIndexSearcher is = (SolrIndexSearcher) o;
      SchemaField sf = is.getSchema().getFieldOrNull(field);
      if (sf != null && sf.getType().isPointField()) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, 
            "ord() is not supported over Points based field " + field);
      }
      if (sf != null && sf.hasDocValues() == false && sf.multiValued() == false && sf.getType().getNumberType() != null) {
        // it's a single-valued numeric field: we must currently create insanity :(
        List<LeafReaderContext> leaves = is.getIndexReader().leaves();
        LeafReader insaneLeaves[] = new LeafReader[leaves.size()];
        int upto = 0;
        for (LeafReaderContext raw : leaves) {
          insaneLeaves[upto++] = Insanity.wrapInsanity(raw.reader(), field);
        }
        r = SlowCompositeReaderWrapper.wrap(new MultiReader(insaneLeaves));
      } else {
        // reuse ordinalmap
        r = ((SolrIndexSearcher)o).getSlowAtomicReader();
      }
    } else {
      IndexReader topReader = ReaderUtil.getTopLevelContext(readerContext).reader();
      r = SlowCompositeReaderWrapper.wrap(topReader);
    }
    // if it's e.g. tokenized/multivalued, emulate old behavior of single-valued fc
    final SortedDocValues sindex = SortedSetSelector.wrap(DocValues.getSortedSet(r, field), SortedSetSelector.Type.MIN);
    return new IntDocValues(this) {

      private int lastDocID;

      private int getOrdForDoc(int docID) throws IOException {
        if (docID < lastDocID) {
          throw new IllegalArgumentException("docs out of order: lastDocID=" + lastDocID + " docID=" + docID);
        }
        if (docID > sindex.docID()) {
          sindex.advance(docID);
        }
        if (docID == sindex.docID()) {
          return sindex.ordValue();
        } else {
          return -1;
        }
      }
      
      protected String toTerm(String readableValue) {
        return readableValue;
      }
      @Override
      public int intVal(int doc) throws IOException {
        return getOrdForDoc(doc+off);
      }
      @Override
      public int ordVal(int doc) throws IOException {
        return getOrdForDoc(doc+off);
      }
      @Override
      public int numOrd() {
        return sindex.getValueCount();
      }

      @Override
      public boolean exists(int doc) throws IOException {
        return getOrdForDoc(doc+off) != 0;
      }

      @Override
      public ValueFiller getValueFiller() {
        return new ValueFiller() {
          private final MutableValueInt mval = new MutableValueInt();

          @Override
          public MutableValue getValue() {
            return mval;
          }

          @Override
          public void fillValue(int doc) throws IOException {
            mval.value = getOrdForDoc(doc);
            mval.exists = mval.value!=0;
          }
        };
      }
    };
  }

