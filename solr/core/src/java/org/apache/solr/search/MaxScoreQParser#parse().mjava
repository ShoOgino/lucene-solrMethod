  /**
   * Parses the query exactly like the Lucene parser does, but
   * delegates all SHOULD clauses to DisjunctionMaxQuery with
   * meaning only the clause with the max score will contribute
   * to the overall score, unless the tie parameter is specified.
   * <br/>
   * The max() is only calculated from the SHOULD clauses.
   * Any MUST clauses will be passed through as separate
   * BooleanClauses and thus always contribute to the score.
   * @return the resulting Query
   * @throws org.apache.solr.search.SyntaxError if parsing fails
   */
  @Override
  public Query parse() throws SyntaxError {
    Query q = super.parse();
    if (!(q instanceof BooleanQuery)) {
      return q;
    }
    BooleanQuery obq = (BooleanQuery)q;
    Collection<Query> should = new ArrayList<>();
    Collection<BooleanClause> prohibOrReq = new ArrayList<>();
    BooleanQuery newq = new BooleanQuery();

    for (BooleanClause clause : obq.getClauses()) {
      if(clause.isProhibited() || clause.isRequired()) {
        prohibOrReq.add(clause);
      } else {
        BooleanQuery bq = new BooleanQuery();
        bq.add(clause);
        should.add(bq);
      }
    }
    if (should.size() > 0) {
      DisjunctionMaxQuery dmq = new DisjunctionMaxQuery(should, tie);
      newq.add(dmq, BooleanClause.Occur.SHOULD);
    }
    for(BooleanClause c : prohibOrReq) {
      newq.add(c);
    }
    newq.setBoost(obq.getBoost());
    return newq;
  }

