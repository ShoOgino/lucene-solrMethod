  /**
   * Parses the range given in format {from:val1, to:val2, inclusive_to:true}
   * and returns the {@link Range}
   *
   * @param rangeMap Map containing the range info
   * @return {@link Range}
   */
  private Range getRangeByNewFormat(Map<String, Object> rangeMap) {
    Object fromObj = rangeMap.get("from");
    Object toObj = rangeMap.get("to");

    String fromStr = fromObj == null? "*" : fromObj.toString();
    String toStr = toObj == null? "*": toObj.toString();
    boolean includeUpper = getBoolean(rangeMap, "inclusive_to", false);
    boolean includeLower = getBoolean(rangeMap, "inclusive_from", true);

    Object key = rangeMap.get("key");
    // if (key == null) {
    //  key = (includeLower? "[": "(") + fromStr + "," + toStr + (includeUpper? "]": ")");
    // }
    // using the default key as custom key won't work with refine
    // refine would need both low and high values
    key = (includeLower? "[": "(") + fromStr + "," + toStr + (includeUpper? "]": ")");

    Comparable from = getComparableFromString(fromStr);
    Comparable to = getComparableFromString(toStr);
    if (from != null && to != null && from.compareTo(to) > 0) {
      // allowing from and to be same
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "'from' is higher than 'to' in range for key: " + key);
    }

    return new Range(key, from, to, includeLower, includeUpper);
  }

