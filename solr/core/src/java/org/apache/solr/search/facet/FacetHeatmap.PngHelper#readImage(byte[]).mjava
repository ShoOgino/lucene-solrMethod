    static BufferedImage readImage(final byte[] bytes) {
      // Wrap ImageInputStream around the bytes.  We could use MemoryCacheImageInputStream but it will
      // cache the data which is quite unnecessary given we have it all in-memory already.
      ImageInputStream imageInputStream = new ImageInputStreamImpl() {
        //TODO re-use this instance; superclass has 8KB buffer.

        @Override
        public int read() throws IOException {
          checkClosed();
          bitOffset = 0;
          if (streamPos >= bytes.length) {
            return -1;
          } else {
            return bytes[(int) streamPos++];
          }
        }

        @Override
        public int read(byte[] b, int off, int len) throws IOException {
          checkClosed();
          bitOffset = 0;
          if (streamPos >= bytes.length) {
            return -1;
          } else {
            int copyLen = Math.min(len, bytes.length - (int)streamPos);
            System.arraycopy(bytes, (int)streamPos, b, off, copyLen);
            streamPos += copyLen;
            return copyLen;
          }
        }

        @Override
        public long length() {
          return bytes.length;
        }

        @Override
        public boolean isCached() {
          return true;
        }

        @Override
        public boolean isCachedMemory() {
          return true;
        }
      };
      try {
        //TODO can/should we re-use an imageReader instance on FacetInfo?
        ImageReader imageReader = imageReaderSpi.createReaderInstance();

        imageReader.setInput(imageInputStream,
            false,//forwardOnly
            true);//ignoreMetadata
        return imageReader.read(0);//read first & only image
      } catch (IOException e) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Problem reading png heatmap: " + e);
      }
    }

