    private TupleStream createCloudSolrStream(SolrClientCache solrClientCache) throws IOException {
      String streamZkHost;
      if (zkHost != null) {
        streamZkHost = zkHost;
      } else {
        streamZkHost = searcher.getCore().getCoreContainer().getZkController().getZkServerAddress();
      }

      ModifiableSolrParams params = new ModifiableSolrParams(otherParams);
      params.set(CommonParams.Q, query);
      String fq = createHashRangeFq();
      if (fq != null) {
        params.add(CommonParams.FQ, fq);
      }
      params.set(CommonParams.FL, fromField);
      params.set(CommonParams.SORT, fromField + " asc");
      params.set(CommonParams.QT, "/export");
      params.set(CommonParams.WT, CommonParams.JAVABIN);

      StreamContext streamContext = new StreamContext();
      streamContext.setSolrClientCache(solrClientCache);

      TupleStream cloudSolrStream = new CloudSolrStream(streamZkHost, collection, params);
      TupleStream uniqueStream = new UniqueStream(cloudSolrStream, new FieldEqualitor(fromField));
      uniqueStream.setStreamContext(streamContext);
      return uniqueStream;
    }

