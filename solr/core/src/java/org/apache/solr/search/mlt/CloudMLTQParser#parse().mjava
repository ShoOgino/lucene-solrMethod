  public Query parse() {
    String id = localParams.get(QueryParsing.V);
    // Do a Real Time Get for the document
    SolrDocument doc = getDocument(id);
    
    MoreLikeThis mlt = new MoreLikeThis(req.getSearcher().getIndexReader());
    // TODO: Are the mintf and mindf defaults ok at 1/0 ?
    
    mlt.setMinTermFreq(localParams.getInt("mintf", 1));
    mlt.setMinDocFreq(localParams.getInt("mindf", 0));
    if(localParams.get("minwl") != null)
      mlt.setMinWordLen(localParams.getInt("minwl"));
    
    if(localParams.get("maxwl") != null)
      mlt.setMaxWordLen(localParams.getInt("maxwl"));

    mlt.setAnalyzer(req.getSchema().getIndexAnalyzer());

    String[] qf = localParams.getParams("qf");
    Map<String, Collection<Object>> filteredDocument = new HashMap();

    if (qf != null) {
      mlt.setFieldNames(qf);
      for (String field : qf) {
        filteredDocument.put(field, doc.getFieldValues(field));
      }
    } else {
      Map<String, SchemaField> fields = req.getSchema().getFields();
      ArrayList<String> fieldNames = new ArrayList();
      for (String field : doc.getFieldNames()) {
        // Only use fields that are stored and have an explicit analyzer.
        // This makes sense as the query uses tf/idf/.. for query construction.
        // We might want to relook and change this in the future though.
        if(fields.get(field).stored() 
            && fields.get(field).getType().isExplicitAnalyzer()) {
          fieldNames.add(field);
          filteredDocument.put(field, doc.getFieldValues(field));
        }
      }
      mlt.setFieldNames(fieldNames.toArray(new String[fieldNames.size()]));
    }

    try {
      return mlt.like(filteredDocument);
    } catch (IOException e) {
      e.printStackTrace();
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Bad Request");
    }

  }

