  @Override
  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {
    this.registryName = registry;
    this.metricManager = manager;
    manager.registerGauge(this, registry, () -> name, tag, true, "searcherName", Category.SEARCHER.toString(), scope);
    manager.registerGauge(this, registry, () -> cachingEnabled, tag, true, "caching", Category.SEARCHER.toString(), scope);
    manager.registerGauge(this, registry, () -> openTime, tag, true, "openedAt", Category.SEARCHER.toString(), scope);
    manager.registerGauge(this, registry, () -> warmupTime, tag, true, "warmupTime", Category.SEARCHER.toString(), scope);
    manager.registerGauge(this, registry, () -> registerTime, tag, true, "registeredAt", Category.SEARCHER.toString(), scope);
    // reader stats
    manager.registerGauge(this, registry, () -> reader.numDocs(), tag, true, "numDocs", Category.SEARCHER.toString(), scope);
    manager.registerGauge(this, registry, () -> reader.maxDoc(), tag, true, "maxDoc", Category.SEARCHER.toString(), scope);
    manager.registerGauge(this, registry, () -> reader.maxDoc() - reader.numDocs(), tag, true, "deletedDocs", Category.SEARCHER.toString(), scope);
    manager.registerGauge(this, registry, () -> reader.toString(), tag, true, "reader", Category.SEARCHER.toString(), scope);
    manager.registerGauge(this, registry, () -> reader.directory().toString(), tag, true, "readerDir", Category.SEARCHER.toString(), scope);
    manager.registerGauge(this, registry, () -> reader.getVersion(), tag, true, "indexVersion", Category.SEARCHER.toString(), scope);
    // size of the currently opened commit
    manager.registerGauge(this, registry, () -> {
      try {
        Collection<String> files = reader.getIndexCommit().getFileNames();
        long total = 0;
        for (String file : files) {
          total += DirectoryFactory.sizeOf(reader.directory(), file);
        }
        return total;
      } catch (Exception e) {
        return -1;
      }
    }, tag, true, "indexCommitSize", Category.SEARCHER.toString(), scope);
    // statsCache metrics
    manager.registerGauge(this, registry,
        new MetricsMap((detailed, map) -> {
          statsCache.getCacheMetrics().getSnapshot(map::put);
          map.put("statsCacheImpl", statsCache.getClass().getSimpleName());
        }),
        tag, true, "statsCache", Category.CACHE.toString(), scope);
  }

