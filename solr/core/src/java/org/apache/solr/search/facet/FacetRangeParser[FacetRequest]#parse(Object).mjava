  public FacetRange parse(Object arg) throws SyntaxError {
    parseCommonParams(arg);

    if (!(arg instanceof Map)) {
      throw err("Missing range facet arguments");
    }

    Map<String, Object> m = (Map<String, Object>) arg;

    facet.field = getString(m, "field", null);

    facet.start = getVal(m, "start", true);
    facet.end = getVal(m, "end", true);
    facet.gap = getVal(m, "gap", true);
    facet.hardend = getBoolean(m, "hardend", facet.hardend);
    facet.mincount = getLong(m, "mincount", 0);

    // TODO: refactor list-of-options code

    List<String> list = getStringList(m, "include", false);
    String[] includeList = null;
    if (list != null) {
      includeList = (String[])list.toArray(new String[list.size()]);
    }
    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );
    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);

    List<String> other = getStringList(m, "other", false);
    if (other != null) {
      for (String otherStr : other) {
        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );
      }
    }

    Object facetObj = m.get("facet");
    parseSubs(facetObj);

    return facet;
  }

