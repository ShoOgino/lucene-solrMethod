  private SimpleOrderedMap<Object> calcFacets() throws IOException {
    SimpleOrderedMap<Object> refineResult = null;
    boolean skipThisFacet = (fcontext.flags & SKIP_FACET) != 0;

    if (fcontext.facetInfo != null) {
      refineResult = refineFacets();
      // if we've seen this facet bucket, then refining can be done.  If we haven't, we still
      // only need to continue if we need allBuckets or numBuckets info.
      if (skipThisFacet || !freq.allBuckets) return refineResult;
    }

    String prefix = freq.prefix;
    if (prefix == null || prefix.length() == 0) {
      prefixRef = null;
    } else {
      prefixRef = new BytesRefBuilder();
      prefixRef.copyChars(prefix);
    }

    findStartAndEndOrds();

    if (refineResult != null) {
      if (freq.allBuckets) {
        // count is irrelevant, but hardcoded in collect(...), so intercept/mask normal counts.
        // Set here to prevent createAccs(...) from creating a 1-slot countAcc that will fail with AIOOBE
        // NOTE: because collectAcc will be null, it is fine/irrelevant to set a countAcc that doesn't support sweeping
        countAcc = SlotAcc.DEV_NULL_SLOT_ACC;
        createAccs(nDocs, 1);
        assert collectAcc == null;
        otherAccs = accs; // accs is created above and set on allBucketsAcc; but during collection, setNextReader is called on otherAccs.
        allBucketsAcc = new SpecialSlotAcc(fcontext, null, -1, accs, 0);
        collectDocs();

        SimpleOrderedMap<Object> allBuckets = new SimpleOrderedMap<>();
        allBuckets.add("count", allBucketsAcc.getSpecialCount());
        allBucketsAcc.setValues(allBuckets, -1); // -1 slotNum is unused for SpecialSlotAcc
        refineResult.add("allBuckets", allBuckets);
        return refineResult;
      }
    }

    maxSlots = nTerms;

    if (freq.allBuckets) {
      allBucketsSlot = maxSlots++;
    }

    createCollectAcc(nDocs, maxSlots);

    if (freq.allBuckets) {
      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);
    }

    collectDocs();

    return super.findTopSlots(nTerms, nTerms,
        slotNum -> { // getBucketValFromSlotNum
          try {
            return (Comparable) sf.getType().toObject(sf, lookupOrd(slotNum + startTermIndex));
          } catch (IOException e) {
            throw new RuntimeException(e);
          }
        },
        obj -> valueObjToString(obj)
    );
  }

