  @Override
  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {
    parentContext.gauge(() -> name, true, "searcherName", Category.SEARCHER.toString(), scope);
    parentContext.gauge(() -> cachingEnabled, true, "caching", Category.SEARCHER.toString(), scope);
    parentContext.gauge(() -> openTime, true, "openedAt", Category.SEARCHER.toString(), scope);
    parentContext.gauge(() -> warmupTime, true, "warmupTime", Category.SEARCHER.toString(), scope);
    parentContext.gauge(() -> registerTime, true, "registeredAt", Category.SEARCHER.toString(), scope);
    // reader stats
    parentContext.gauge(rgauge(-1, () -> reader.numDocs()), true, "numDocs", Category.SEARCHER.toString(), scope);
    parentContext.gauge(rgauge(-1, () -> reader.maxDoc()), true, "maxDoc", Category.SEARCHER.toString(), scope);
    parentContext.gauge(rgauge(-1, () -> reader.maxDoc() - reader.numDocs()), true, "deletedDocs", Category.SEARCHER.toString(), scope);
    parentContext.gauge(rgauge(-1, () -> reader.toString()), true, "reader", Category.SEARCHER.toString(), scope);
    parentContext.gauge(rgauge("", () -> reader.directory().toString()), true, "readerDir", Category.SEARCHER.toString(), scope);
    parentContext.gauge(rgauge(-1, () -> reader.getVersion()), true, "indexVersion", Category.SEARCHER.toString(), scope);
    // size of the currently opened commit
    parentContext.gauge(() -> {
      try {
        Collection<String> files = reader.getIndexCommit().getFileNames();
        long total = 0;
        for (String file : files) {
          total += DirectoryFactory.sizeOf(reader.directory(), file);
        }
        return total;
      } catch (Exception e) {
        return -1;
      }
    }, true, "indexCommitSize", Category.SEARCHER.toString(), scope);
    // statsCache metrics
    parentContext.gauge(
        new MetricsMap(map -> {
          statsCache.getCacheMetrics().getSnapshot(map::putNoEx);
          map.put("statsCacheImpl", statsCache.getClass().getSimpleName());
        }), true, "statsCache", Category.CACHE.toString(), scope);
  }

