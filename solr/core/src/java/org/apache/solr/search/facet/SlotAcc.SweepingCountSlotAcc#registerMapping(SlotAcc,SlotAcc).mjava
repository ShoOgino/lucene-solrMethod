    /**
     * When a {@link SweepableSlotAcc} replaces itself (for the purpose of collection) with a different {@link SlotAcc}
     * instance, it must register that replacement by calling this method with itself as the fromAcc param, and with the
     * new replacement {@link SlotAcc} as the toAcc param. The two SlotAccs must have the same {@link SlotAcc#key}.
     * 
     * It is the responsibility of this method to insure that {@link FacetFieldProcessor} references to fromAcc (other than
     * those within {@link FacetFieldProcessor#collectAcc}, which are set directly by the return value of
     * {@link SweepableSlotAcc#registerSweepingAccs(SweepingCountSlotAcc)}) are replaced
     * by references to toAcc. Such references would include, e.g., {@link FacetFieldProcessor#sortAcc}.
     * 
     * It is also this method's responsibility to insure that read access to toAcc (via toAcc's {@link SlotAcc#setValues(SimpleOrderedMap, int)}
     * method) is provided via this instance's {@link #setValues(SimpleOrderedMap, int)} method.
     * 
     * @param fromAcc - the {@link SlotAcc} to be replaced (this will normally be the caller of this method).
     * @param toAcc - the replacement {@link SlotAcc}
     * 
     * @see SweepableSlotAcc#registerSweepingAccs(SweepingCountSlotAcc)
     */
    public void registerMapping(SlotAcc fromAcc, SlotAcc toAcc) {
      assert fromAcc.key.equals(toAcc.key);
      output.add(toAcc);
      if (p.sortAcc == fromAcc) {
        p.sortAcc = toAcc;
      }
      if (null != debug) {
        @SuppressWarnings("unchecked")
        List<String> mappedDebug = (List<String>) debug.get("mapped");
        mappedDebug.add(fromAcc.toString());
      }
    }

