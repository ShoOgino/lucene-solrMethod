  /** 
   * Does an unordered comparison of the elements of two lists of queries starting at 
   * the specified start index.
   * 
   * This method should only be called on lists which are the same size, and where 
   * all items with an index less then the specified start index are the same.
   *
   * @return true if the list items after start are equivilent other then the ordering
   */
  private static boolean unorderedCompare(List<Query> fqList1, List<Query> fqList2, int start) {
    assert null != fqList1;
    assert null != fqList2;

    final int sz = fqList1.size();
    assert fqList2.size() == sz;

    // SOLR-5618: if we had a garuntee that the lists never contained any duplicates,
    // this logic could be a lot simplier 
    //
    // (And of course: if the SolrIndexSearcher / QueryCommmand was ever changed to
    // sort the filter query list, then this whole method could be eliminated).

    final ArrayList<Query> set2 = new ArrayList<Query>(fqList2.subList(start, sz));
    for (int i = start; i < sz; i++) {
      Query q1 = fqList1.get(i);
      if ( ! set2.remove(q1) ) {
        return false;
      }
    }
    return set2.isEmpty();
  }

