  @Override
  Map<String, Object> getRefinementSpecial(Context mcontext, Map<String, Object> refinement, Collection<String> tagsWithPartial) {
    if (!tagsWithPartial.isEmpty()) {
      // Since 'other' buckets will always be included, we only need to worry about subfacets being partial.

      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, beforeBucket, FacetParams.FacetRangeOther.BEFORE.toString());
      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, afterBucket, FacetParams.FacetRangeOther.AFTER.toString());
      refinement = getRefinementSpecial(mcontext, refinement, tagsWithPartial, betweenBucket, FacetParams.FacetRangeOther.BETWEEN.toString());

      // if we need an actual end to compute either of these buckets,
      // and it's been returned to us by at least one shard
      // send it back as part of the refinement request
      if ( (!freq.hardend) &&
           actual_end != null &&
           refinement != null &&
           (refinement.containsKey(FacetParams.FacetRangeOther.AFTER.toString()) ||
            refinement.containsKey(FacetParams.FacetRangeOther.BETWEEN.toString())) ) {
        refinement.put("_actual_end", actual_end);
      }
    }
    return refinement;
  }

