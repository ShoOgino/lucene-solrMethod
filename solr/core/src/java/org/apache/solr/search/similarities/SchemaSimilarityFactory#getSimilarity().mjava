  @Override
  public Similarity getSimilarity() {
    if (null == core) {
      throw new IllegalStateException("SchemaSimilarityFactory can not be used until SolrCoreAware.inform has been called");
    }
    if (null == similarity) {
      // Need to instantiate lazily, can't do this in inform(SolrCore) because of chicken/egg
      // circular initialization hell with core.getLatestSchema() to lookup defaultSimFromFieldType
      
      Similarity defaultSim = null;
      if (null == defaultSimFromFieldType) {
        // nothing configured, choose a sensible implicit default...
        defaultSim = this.core.getSolrConfig().luceneMatchVersion.onOrAfter(Version.LUCENE_6_0_0)
          ? new BM25Similarity()
          : new ClassicSimilarity();
      } else {
        FieldType defSimFT = core.getLatestSchema().getFieldTypeByName(defaultSimFromFieldType);
        if (null == defSimFT) {
          throw new SolrException(ErrorCode.SERVER_ERROR,
                                  "SchemaSimilarityFactory configured with " + INIT_OPT + "='" +
                                  defaultSimFromFieldType + "' but that <fieldType> does not exist");
                                  
        }
        defaultSim = defSimFT.getSimilarity();
        if (null == defaultSim) {
          throw new SolrException(ErrorCode.SERVER_ERROR,
                                  "SchemaSimilarityFactory configured with " + INIT_OPT + "='" + 
                                  defaultSimFromFieldType +
                                  "' but that <fieldType> does not define a <similarity>");
        }
      }
      assert null != defaultSim;
      final Similarity defaultSimilarity = defaultSim;
      similarity = new PerFieldSimilarityWrapper() {
        @Override
        public Similarity get(String name) {
          FieldType fieldType = core.getLatestSchema().getFieldTypeNoEx(name);
          if (fieldType == null) {
            return defaultSimilarity;
          } else {
            Similarity similarity = fieldType.getSimilarity();
            return similarity == null ? defaultSimilarity : similarity;
          }
        }
      };
    }
    return similarity;
  }

