  /**
   * Adds X and Y fields to the given schema for each field with this class as its field type.
   * 
   * {@inheritDoc}
   * 
   * @param schema {@inheritDoc}
   *
   */
  @Override
  public void inform(IndexSchema schema) {
    FieldType fieldType = schema.getFieldTypeByName(numberFieldName);
    if( fieldType == null ) {
      throw new RuntimeException( "Can not find number field: "+ numberFieldName);
    }
    //TODO support other numeric types in the future
    if( !(fieldType instanceof TrieDoubleField) ) {
      throw new RuntimeException( "field type must be TrieDoubleField: "+ fieldType);
    }
    precisionStep = ((TrieField)fieldType).getPrecisionStep();

    // NOTE: the SchemaField constructor we're using ignores any properties of the fieldType
    // so only the ones we're explicitly setting get used.
    //
    // In theory we should fix this, but since this class is already deprecated, we'll leave it alone
    // to simplify the risk of back-compat break for existing users.
    final int p = (INDEXED | TOKENIZED | OMIT_NORMS | OMIT_TF_POSITIONS | UNINVERTIBLE);
    List<SchemaField> newFields = new ArrayList<>();
    for( SchemaField sf : schema.getFields().values() ) {
      if( sf.getType() == this ) {
        String name = sf.getName();
        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_X, fieldType, p, null));
        newFields.add(new SchemaField(name + PointVectorStrategy.SUFFIX_Y, fieldType, p, null));
      }
    }
    for (SchemaField newField : newFields) {
      schema.getFields().put(newField.getName(), newField);
    }
  }

