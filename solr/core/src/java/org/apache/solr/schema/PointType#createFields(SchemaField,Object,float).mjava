  @Override
  public StorableField[] createFields(SchemaField field, Object value, float boost) {
    String externalVal = value.toString();
    String[] point = new String[0];
    try {
      point = ParseUtils.parsePoint(null, externalVal, dimension);
    } catch (InvalidShapeException e) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);
    }

    // TODO: this doesn't currently support polyFields as sub-field types
    StorableField[] f = new StorableField[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];

    if (field.indexed()) {
      for (int i=0; i<dimension; i++) {
        SchemaField sf = subField(field, i);
        f[i] = sf.createField(point[i], sf.indexed() && !sf.omitNorms() ? boost : 1f);
      }
    }

    if (field.stored()) {
      String storedVal = externalVal;  // normalize or not?
      FieldType customType = new FieldType();
      customType.setStored(true);
      f[f.length - 1] = createField(field.getName(), storedVal, customType, 1f);
    }
    
    return f;
  }

