  @Override
  public List<IndexableField> createFields(SchemaField sf, Object value, float boost) {
    if (!(sf.hasDocValues() || sf.stored())) {
      return Collections.singletonList(createField(sf, value, boost));
    }
    List<IndexableField> fields = new ArrayList<>();
    final IndexableField field = createField(sf, value, boost);
    fields.add(field);
    
    if (sf.hasDocValues()) {
      final long bits;
      if (!sf.multiValued()) {
        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {
          bits = field.numericValue().longValue();
        } else if (field.numericValue() instanceof Float) {
          bits = Float.floatToIntBits(field.numericValue().floatValue());
        } else {
          assert field.numericValue() instanceof Double;
          bits = Double.doubleToLongBits(field.numericValue().doubleValue());
        }
        fields.add(new NumericDocValuesField(sf.getName(), bits));
      } else {
        // MultiValued
        if (field.numericValue() instanceof Integer || field.numericValue() instanceof Long) {
          bits = field.numericValue().longValue();
        } else if (field.numericValue() instanceof Float) {
          bits = NumericUtils.floatToSortableInt(field.numericValue().floatValue());
        } else {
          assert field.numericValue() instanceof Double;
          bits = NumericUtils.doubleToSortableLong(field.numericValue().doubleValue());
        }
        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));
      }
    } 
    if (sf.stored()) {
      fields.add(getStoredField(sf, value));
    }
    return fields;
  }

