    @Override
    public DocIdSetIterator iterator() {
      return new DocIdSetIterator() {

        @Override
        public int docID() {
          return doc;
        }

        // instead of matching all docs, we could also embed a query.
        // the score could either ignore the subscore, or boost it.
        // Containment:  floatline(foo:myTerm, "myFloatField", 1.0, 0.0f)
        // Boost:        foo:myTerm^floatline("myFloatField",1.0,0.0f)
        @Override
        public int nextDoc() throws IOException {
          for(;;) {
            ++doc;
            if (doc>=maxDoc) {
              return doc=NO_MORE_DOCS;
            }
            if (!match()) continue;
            return doc;
          }
        }

        @Override
        public int advance(int target) throws IOException {
          // this will work even if target==NO_MORE_DOCS
          doc=target-1;
          return nextDoc();
        }

        @Override
        public long cost() {
          return maxDoc;
        }

      };
    }

