  /**
   * Helper method for creating a dynamic field SchemaField prototype.  Returns a {@link SchemaField} with
   * the {@link FieldType} given and a name of "*" + {@link FieldType#POLY_FIELD_SEPARATOR} + {@link FieldType#typeName}
   * and props of indexed=true, stored=false.
   *
   * @param schema the IndexSchema
   * @param subType   The {@link FieldType} of the prototype.
   * @param polyField   The poly {@link FieldType}.
   * @return The {@link SchemaField}
   */

  static SchemaField registerPolyFieldDynamicPrototype(IndexSchema schema, FieldType subType, FieldType polyField) {
    String name = "*" + FieldType.POLY_FIELD_SEPARATOR + subType.typeName;
    Map<String, String> props = new HashMap<>();
    //Just set these, delegate everything else to the field type
    props.put("indexed", "true");
    props.put("stored", "false");
    props.put("multiValued", "false");
    // if polyField enables dv, add them to the subtypes
    if (polyField.hasProperty(DOC_VALUES)) {
      props.put("docValues", "true");
    }
    int p = SchemaField.calcProps(name, subType, props);
    SchemaField proto = SchemaField.create(name,
        subType, p, null);
    schema.registerDynamicFields(proto);
    return proto;
  }

