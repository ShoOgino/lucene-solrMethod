  /**
   * {@inheritDoc}
   */
  @Override
  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {
    Integer minValue = stringValueToIntValue(min);
    Integer maxValue = stringValueToIntValue(max);

    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {
      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct
      return super.getRangeQuery(parser, field, minValue.toString(), maxValue.toString(), minInclusive, maxInclusive);
    }
    Query query = null;
    final boolean matchOnly = field.hasDocValues() && !field.indexed();
    if (matchOnly) {
      query = new ConstantScoreQuery(DocValuesRangeFilter.newIntRange(field.getName(),
              min == null ? null : minValue,
              max == null ? null : maxValue,
              minInclusive, maxInclusive));
    } else {
      query = NumericRangeQuery.newIntRange(field.getName(), DEFAULT_PRECISION_STEP,
              min == null ? null : minValue,
              max == null ? null : maxValue,
              minInclusive, maxInclusive);
    }

    return query;
  }

