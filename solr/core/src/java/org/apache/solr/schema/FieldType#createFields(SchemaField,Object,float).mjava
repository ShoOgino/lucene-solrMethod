  /**
   * Given a {@link org.apache.solr.schema.SchemaField}, create one or more {@link org.apache.lucene.index.IndexableField} instances
   * @param field the {@link org.apache.solr.schema.SchemaField}
   * @param value The value to add to the field
   * @param boost The boost to apply
   * @return An array of {@link org.apache.lucene.index.IndexableField}
   *
   * @see #createField(SchemaField, Object, float)
   * @see #isPolyField()
   */
  public List<StorableField> createFields(SchemaField field, Object value, float boost) {
    StorableField f = createField( field, value, boost);
    if (field.hasDocValues() && f.fieldType().docValuesType() == null) {
      // field types that support doc values should either override createField
      // to return a field with doc values or extend createFields if this can't
      // be done in a single field instance (see StrField for example)
      throw new UnsupportedOperationException("This field type does not support doc values: " + this);
    }
    return f==null ? Collections.<StorableField>emptyList() : Collections.singletonList(f);
  }

