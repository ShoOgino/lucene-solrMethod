  /** 
   * Returns a description of the given analyzer, by either reporting the Analyzer class
   * name (and optionally luceneMatchVersion) if it's not a TokenizerChain, or if it is,
   * querying each analysis factory for its name and args.
   */
  protected static SimpleOrderedMap<Object> getAnalyzerProperties(Analyzer analyzer) {
    SimpleOrderedMap<Object> analyzerProps = new SimpleOrderedMap<>();

    if (analyzer instanceof TokenizerChain) {
      Map<String,String> factoryArgs;
      TokenizerChain tokenizerChain = (TokenizerChain)analyzer;
      CharFilterFactory[] charFilterFactories = tokenizerChain.getCharFilterFactories();
      if (0 < charFilterFactories.length) {
        List<SimpleOrderedMap<Object>> charFilterProps = new ArrayList<>();
        for (CharFilterFactory charFilterFactory : charFilterFactories) {
          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();
          factoryArgs = charFilterFactory.getOriginalArgs();
          if (!factoryArgs.containsKey(TYPE_NAME)) {
            props.add(CLASS_NAME, charFilterFactory.getClassArg());
          }
          if (null != factoryArgs) {
            for (Map.Entry<String, String> entry : factoryArgs.entrySet()) {
              String key = entry.getKey();
              if ( ! CLASS_NAME.equals(key)) {
                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {
                  if (charFilterFactory.isExplicitLuceneMatchVersion()) {
                    props.add(key, entry.getValue());
                  }
                } else {
                   props.add(key, entry.getValue());
                }
              }
            }
          }
          charFilterProps.add(props);
        }
        analyzerProps.add(CHAR_FILTERS, charFilterProps);
      }

      SimpleOrderedMap<Object> tokenizerProps = new SimpleOrderedMap<>();
      TokenizerFactory tokenizerFactory = tokenizerChain.getTokenizerFactory();
      factoryArgs = tokenizerFactory.getOriginalArgs();
      if (!factoryArgs.containsKey(TYPE_NAME)) {
        tokenizerProps.add(CLASS_NAME, tokenizerFactory.getClassArg());
      }
      if (null != factoryArgs) {
        for (Map.Entry<String, String> entry : factoryArgs.entrySet()) {
          String key = entry.getKey();
          if ( ! CLASS_NAME.equals(key)) {
            if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {
              if (tokenizerFactory.isExplicitLuceneMatchVersion()) {
                tokenizerProps.add(key, entry.getValue());
              }
            } else {
              tokenizerProps.add(key, entry.getValue());
            }
          }
        }
      }
      analyzerProps.add(TOKENIZER, tokenizerProps);

      TokenFilterFactory[] filterFactories = tokenizerChain.getTokenFilterFactories();
      if (0 < filterFactories.length) {
        List<SimpleOrderedMap<Object>> filterProps = new ArrayList<>();
        for (TokenFilterFactory filterFactory : filterFactories) {
          SimpleOrderedMap<Object> props = new SimpleOrderedMap<>();
          factoryArgs = filterFactory.getOriginalArgs();
          if (!factoryArgs.containsKey(TYPE_NAME)) {
            props.add(CLASS_NAME, filterFactory.getClassArg());
          }
          if (null != factoryArgs) {
            for (Map.Entry<String, String> entry : factoryArgs.entrySet()) {
              String key = entry.getKey();
              if ( ! CLASS_NAME.equals(key)) {
                if (LUCENE_MATCH_VERSION_PARAM.equals(key)) {
                  if (filterFactory.isExplicitLuceneMatchVersion()) {
                    props.add(key, entry.getValue());
                  }
                } else {
                  props.add(key, entry.getValue());
                }
              }
            }
          }
          filterProps.add(props);
        }
        analyzerProps.add(FILTERS, filterProps);
      }
    } else { // analyzer is not instanceof TokenizerChain
      analyzerProps.add(CLASS_NAME, analyzer.getClass().getName());
      if (analyzer.getVersion() != Version.LATEST) {
        analyzerProps.add(LUCENE_MATCH_VERSION_PARAM, analyzer.getVersion().toString());
      }
    }
    return analyzerProps;
  }

