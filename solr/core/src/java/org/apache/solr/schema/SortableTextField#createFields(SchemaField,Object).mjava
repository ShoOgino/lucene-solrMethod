  @Override
  public List<IndexableField> createFields(SchemaField field, Object value) {
    IndexableField f = createField( field, value);
    if (! field.hasDocValues()) {
      return Collections.singletonList(f);
    }
    final String origString = value.toString();
    final int origLegth = origString.length();
    final boolean truncate = maxCharsForDocValues < origLegth;
    if (field.useDocValuesAsStored() && truncate) {
      // if the user has explicitly configured useDocValuesAsStored, we need a special
      // check to fail docs where the values are too long -- we don't want to silently
      // accept and then have search queries returning partial values
      throw new SolrException
        (SolrException.ErrorCode.BAD_REQUEST,
         "Can not use field " + field.getName() + " with values longer then maxCharsForDocValues=" +
         maxCharsForDocValues + " when useDocValuesAsStored=true (length=" + origLegth + ")");
    }
    final BytesRef bytes = new BytesRef(truncate ? origString.subSequence(0, maxCharsForDocValues) : origString);
                                        
    final IndexableField docval = field.multiValued()
      ? new SortedSetDocValuesField(field.getName(), bytes)
      : new SortedDocValuesField(field.getName(), bytes);
    
    if (null == f) {
      return Collections.singletonList(docval);
    } 
    return Arrays.asList(f, docval);
  }

