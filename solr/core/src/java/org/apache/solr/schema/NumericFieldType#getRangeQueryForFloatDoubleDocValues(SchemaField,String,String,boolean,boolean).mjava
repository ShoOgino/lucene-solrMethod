  protected Query getRangeQueryForFloatDoubleDocValues(SchemaField sf, String min, String max, boolean minInclusive, boolean maxInclusive) {
    Query query;
    String fieldName = sf.getName();
    long minBits, maxBits;
    boolean minNegative, maxNegative;
    Number minVal, maxVal;
    if (getNumberType() == NumberType.FLOAT) {
      if (min == null) {
        minVal = Float.NEGATIVE_INFINITY;
      } else {
        minVal = parseFloatFromUser(sf.getName(), min);
        if (!minInclusive) {
          if (minVal.floatValue() == Float.POSITIVE_INFINITY) return new MatchNoDocsQuery();
          minVal = FloatPoint.nextUp(minVal.floatValue());
        }
      }
      if (max == null) {
        maxVal = Float.POSITIVE_INFINITY;
      } else {
        maxVal = parseFloatFromUser(sf.getName(), max);
        if (!maxInclusive) {
          if (maxVal.floatValue() == Float.NEGATIVE_INFINITY) return new MatchNoDocsQuery();
          maxVal = FloatPoint.nextDown(maxVal.floatValue());
        }
      }
      minBits = Float.floatToIntBits(minVal.floatValue());
      maxBits = Float.floatToIntBits(maxVal.floatValue());
      minNegative = minVal.floatValue() < 0f || minBits == FLOAT_MINUS_ZERO_BITS;
      maxNegative = maxVal.floatValue() < 0f || maxBits == FLOAT_MINUS_ZERO_BITS;
    } else {
      assert getNumberType() == NumberType.DOUBLE;
      if (min == null) {
        minVal = Double.NEGATIVE_INFINITY;
      } else {
        minVal = parseDoubleFromUser(sf.getName(), min);
        if (!minInclusive) {
          if (minVal.doubleValue() == Double.POSITIVE_INFINITY) return new MatchNoDocsQuery();
          minVal = DoublePoint.nextUp(minVal.doubleValue());
        }
      }
      if (max == null) {
        maxVal = Double.POSITIVE_INFINITY;
      } else {
        maxVal = parseDoubleFromUser(sf.getName(), max);
        if (!maxInclusive) {
          if (maxVal.doubleValue() == Double.NEGATIVE_INFINITY) return new MatchNoDocsQuery();
          maxVal = DoublePoint.nextDown(maxVal.doubleValue());
        }
      }
      minBits = Double.doubleToLongBits(minVal.doubleValue());
      maxBits = Double.doubleToLongBits(maxVal.doubleValue());
      minNegative = minVal.doubleValue() < 0d || minBits == DOUBLE_MINUS_ZERO_BITS;
      maxNegative = maxVal.doubleValue() < 0d || maxBits == DOUBLE_MINUS_ZERO_BITS;
    }
    // If min is negative (or -0d) and max is positive (or +0d), then issue a FunctionRangeQuery
    if (minNegative && !maxNegative) {
      ValueSource vs = getValueSource(sf, null);
      query = new FunctionRangeQuery(new ValueSourceRangeFilter(vs, minVal.toString(), maxVal.toString(), true, true));
    } else if (minNegative && maxNegative) {// If both max and min are negative (or -0d), then issue range query with max and min reversed
      query = numericDocValuesRangeQuery
          (fieldName, maxBits, minBits, true, true, false);
    } else { // If both max and min are positive, then issue range query
      query = numericDocValuesRangeQuery
          (fieldName, minBits, maxBits, true, true, false);
    }
    return query;
  }

