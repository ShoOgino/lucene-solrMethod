      @Override
      public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {
        return new DoubleDocValues(this) {
          @SuppressWarnings("unchecked")
          final FieldComparator<Double> comparator =
              (FieldComparator<Double>) getSortField(false).getComparator(1, 1);
          final LeafFieldComparator leafComparator = comparator.getLeafComparator(readerContext);
          final double mult = multiplier; // so it's a local field

          // Since this computation is expensive, it's worth caching it just in case.
          double cacheDoc = -1;
          double cacheVal = Double.POSITIVE_INFINITY;

          @Override
          public double doubleVal(int doc) {
            if (cacheDoc != doc) {
              try {
                leafComparator.copy(0, doc);
                cacheVal = comparator.value(0) * mult;
                cacheDoc = doc;
              } catch (IOException e) {
                throw new RuntimeException(e);
              }
            }
            return cacheVal;
          }

          @Override
          public boolean exists(int doc) {
            return !Double.isInfinite(doubleVal(doc));
          }
        };
      }

