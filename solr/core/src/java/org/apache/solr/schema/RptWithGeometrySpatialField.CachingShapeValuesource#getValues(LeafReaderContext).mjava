    @Override
    public ShapeValues getValues(LeafReaderContext readerContext) throws IOException {
      final ShapeValues targetFuncValues = targetValueSource.getValues(readerContext);
      // The key is a pair of leaf reader with a docId relative to that reader. The value is a Map from field to Shape.
      final SolrCache<PerSegCacheKey,Shape> cache =
          SolrRequestInfo.getRequestInfo().getReq().getSearcher().getCache(CACHE_KEY_PREFIX + fieldName);
      if (cache == null) {
        return targetFuncValues; // no caching; no configured cache
      }

      return new ShapeValues() {
        int docId = -1;

        @Override
        public Shape value() throws IOException {
          //lookup in cache
          IndexReader.CacheHelper cacheHelper = readerContext.reader().getCoreCacheHelper();
          if (cacheHelper == null) {
            throw new IllegalStateException("Leaf " + readerContext.reader() + " is not suited for caching");
          }
          PerSegCacheKey key = new PerSegCacheKey(cacheHelper.getKey(), docId);
          Shape shape = cache.computeIfAbsent(key, k -> {
            try {
              return targetFuncValues.value();
            } catch (IOException e) {
              return null;
            }
          });
          if (shape != null) {
            //optimize shape on a cache hit if possible. This must be thread-safe and it is.
            if (shape instanceof JtsGeometry) {
              ((JtsGeometry) shape).index(); // TODO would be nice if some day we didn't have to cast
            }
          }
          return shape;
        }

        @Override
        public boolean advanceExact(int doc) throws IOException {
          this.docId = doc;
          return targetFuncValues.advanceExact(doc);
        }

      };

    }

