    /** 
     * Takes in a FieldType and the initArgs Map used for that type, removing the keys
     * that specify the enum.
     *
     * @param schema for opening resources
     * @param fieldType Used for logging or error messages
     * @param args the init args to comsume the enum name + config file from
     */
    public EnumMapping(IndexSchema schema, FieldType fieldType, Map<String, String> args) {
      final String ftName = fieldType.getTypeName();
      
      // NOTE: ghosting member variables for most of constructor
      final Map<String, Integer> enumStringToIntMap = new HashMap<>();
      final Map<Integer, String> enumIntToStringMap = new HashMap<>();
      
      enumsConfigFile = args.get(PARAM_ENUMS_CONFIG);
      if (enumsConfigFile == null) {
        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,
                                ftName + ": No enums config file was configured.");
      }
      enumName = args.get(PARAM_ENUM_NAME);
      if (enumName == null) {
        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,
                                ftName + ": No enum name was configured.");
      }
      
      final SolrResourceLoader loader = schema.getResourceLoader(); 
      try {
        log.debug("Reloading enums config file from {}", enumsConfigFile);
        Document doc = SafeXMLParsing.parseConfigXML(log, loader, enumsConfigFile);
        final XPathFactory xpathFactory = XPathFactory.newInstance();
        final XPath xpath = xpathFactory.newXPath();
        final String xpathStr = String.format(Locale.ROOT, "/enumsConfig/enum[@name='%s']", enumName);
        final NodeList nodes = (NodeList) xpath.evaluate(xpathStr, doc, XPathConstants.NODESET);
        final int nodesLength = nodes.getLength();
        if (nodesLength == 0) {
          String exceptionMessage = String.format
            (Locale.ENGLISH, "%s: No enum configuration found for enum '%s' in %s.",
             ftName, enumName, enumsConfigFile);
          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);
        }
        if (nodesLength > 1) {
          log.warn("{}: More than one enum configuration found for enum '{}' in {}. The last one was taken."
              , ftName, enumName, enumsConfigFile);
        }
        final Node enumNode = nodes.item(nodesLength - 1);
        final NodeList valueNodes = (NodeList) xpath.evaluate("value", enumNode, XPathConstants.NODESET);
        for (int i = 0; i < valueNodes.getLength(); i++) {
          final Node valueNode = valueNodes.item(i);
          final String valueStr = valueNode.getTextContent();
          if ((valueStr == null) || (valueStr.length() == 0)) {
            final String exceptionMessage = String.format
              (Locale.ENGLISH, "%s: A value was defined with an no value in enum '%s' in %s.",
               ftName, enumName, enumsConfigFile);
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);
          }
          if (enumStringToIntMap.containsKey(valueStr)) {
            final String exceptionMessage = String.format
              (Locale.ENGLISH, "%s: A duplicated definition was found for value '%s' in enum '%s' in %s.",
               ftName, valueStr, enumName, enumsConfigFile);
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMessage);
          }
          enumIntToStringMap.put(i, valueStr);
          enumStringToIntMap.put(valueStr, i);
        }
      } catch (IOException | SAXException | XPathExpressionException e) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                                ftName + ": Error while parsing enums config.", e);
      }
      
      if ((enumStringToIntMap.size() == 0) || (enumIntToStringMap.size() == 0)) {
        String exceptionMessage = String.format
          (Locale.ENGLISH, "%s: Invalid configuration was defined for enum '%s' in %s.",
           ftName, enumName, enumsConfigFile);
        throw new SolrException(SolrException.ErrorCode.NOT_FOUND, exceptionMessage);
      }
      
      this.enumStringToIntMap = Collections.unmodifiableMap(enumStringToIntMap);
      this.enumIntToStringMap = Collections.unmodifiableMap(enumIntToStringMap);
      
      args.remove(PARAM_ENUMS_CONFIG);
      args.remove(PARAM_ENUM_NAME);
    }

