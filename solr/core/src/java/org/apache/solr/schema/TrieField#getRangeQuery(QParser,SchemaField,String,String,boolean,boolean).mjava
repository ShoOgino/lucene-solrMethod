  @Override
  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive, boolean maxInclusive) {
    if (field.multiValued() && field.hasDocValues() && !field.indexed()) {
      // for the multi-valued dv-case, the default rangeimpl over toInternal is correct
      return super.getRangeQuery(parser, field, min, max, minInclusive, maxInclusive);
    }
    int ps = precisionStep;
    Query query;
    
    if (field.hasDocValues() && !field.indexed()) {
      return getDocValuesRangeQuery(parser, field, min, max, minInclusive, maxInclusive);
    }

    switch (type) {
      case INTEGER:
        query = LegacyNumericRangeQuery.newIntRange(field.getName(), ps,
            min == null ? null : parseIntFromUser(field.getName(), min),
            max == null ? null : parseIntFromUser(field.getName(), max),
            minInclusive, maxInclusive);
        break;
      case FLOAT:
        query = LegacyNumericRangeQuery.newFloatRange(field.getName(), ps,
            min == null ? null : parseFloatFromUser(field.getName(), min),
            max == null ? null : parseFloatFromUser(field.getName(), max),
            minInclusive, maxInclusive);
        break;
      case LONG:
        query = LegacyNumericRangeQuery.newLongRange(field.getName(), ps,
            min == null ? null : parseLongFromUser(field.getName(), min),
            max == null ? null : parseLongFromUser(field.getName(), max),
            minInclusive, maxInclusive);
        break;
      case DOUBLE:
        query = LegacyNumericRangeQuery.newDoubleRange(field.getName(), ps,
            min == null ? null : parseDoubleFromUser(field.getName(), min),
            max == null ? null : parseDoubleFromUser(field.getName(), max),
            minInclusive, maxInclusive);
        break;
      case DATE:
        query = LegacyNumericRangeQuery.newLongRange(field.getName(), ps,
            min == null ? null : DateMathParser.parseMath(null, min).getTime(),
            max == null ? null : DateMathParser.parseMath(null, max).getTime(),
            minInclusive, maxInclusive);
        break;
      default:
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Unknown type for trie field");
    }
    return query;
  }

