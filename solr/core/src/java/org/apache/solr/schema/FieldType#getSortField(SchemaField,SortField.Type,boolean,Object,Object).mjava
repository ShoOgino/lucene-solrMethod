  /**
   * <p>A Helper utility method for use by subclasses.</p>
   * <p>This method deals with:</p>
   * <ul>
   *  <li>{@link SchemaField#checkSortability}</li>
   *  <li>Creating a {@link SortField} on <code>field</code> with the specified 
   *      <code>reverse</code> &amp; <code>sortType</code></li>
   *  <li>Setting the {@link SortField#setMissingValue} to <code>missingLow</code> or <code>missingHigh</code>
   *      as appropriate based on the value of <code>reverse</code> and the 
   *      <code>sortMissingFirst</code> &amp; <code>sortMissingLast</code> properties of the 
   *      <code>field</code></li>
   * </ul>
   *
   * @param field The SchemaField to sort on.  May use <code>sortMissingFirst</code> or <code>sortMissingLast</code> or neither.
   * @param sortType The sort Type of the underlying values in the <code>field</code>
   * @param reverse True if natural order of the <code>sortType</code> should be reversed
   * @param missingLow The <code>missingValue</code> to be used if the other params indicate that docs w/o values should sort as "low" as possible.
   * @param missingHigh The <code>missingValue</code> to be used if the other params indicate that docs w/o values should sort as "high" as possible.
   * @see #getSortedSetSortField
   */
  protected static SortField getSortField(SchemaField field, SortField.Type sortType, boolean reverse,
                                          Object missingLow, Object missingHigh) {
    field.checkSortability();

    SortField sf = new SortField(field.getName(), sortType, reverse);
    applySetMissingValue(field, sf, missingLow, missingHigh);
    
    return sf;
  }

