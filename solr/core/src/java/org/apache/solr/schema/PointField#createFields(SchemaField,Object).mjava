  @Override
  public List<IndexableField> createFields(SchemaField sf, Object value) {
    if (!isFieldUsed(sf)) {
      return Collections.emptyList();
    }
    List<IndexableField> fields = new ArrayList<>(3);
    IndexableField field = null;
    if (sf.indexed()) {
      field = createField(sf, value);
      fields.add(field);
    }
    
    if (sf.hasDocValues()) {
      final Number numericValue;
      if (field == null) {
        final Object nativeTypeObject = toNativeType(value);
        if (getNumberType() == NumberType.DATE) {
          numericValue = ((Date)nativeTypeObject).getTime();
        } else {
          numericValue = (Number) nativeTypeObject;
        }
      } else {
        numericValue = field.numericValue();
      }
      final long bits;
      if (!sf.multiValued()) {
        if (numericValue instanceof Integer || numericValue instanceof Long) {
          bits = numericValue.longValue();
        } else if (numericValue instanceof Float) {
          bits = Float.floatToIntBits(numericValue.floatValue());
        } else {
          assert numericValue instanceof Double;
          bits = Double.doubleToLongBits(numericValue.doubleValue());
        }
        fields.add(new NumericDocValuesField(sf.getName(), bits));
      } else {
        // MultiValued
        if (numericValue instanceof Integer || numericValue instanceof Long) {
          bits = numericValue.longValue();
        } else if (numericValue instanceof Float) {
          bits = NumericUtils.floatToSortableInt(numericValue.floatValue());
        } else {
          assert numericValue instanceof Double;
          bits = NumericUtils.doubleToSortableLong(numericValue.doubleValue());
        }
        fields.add(new SortedNumericDocValuesField(sf.getName(), bits));
      }
    } 
    if (sf.stored()) {
      fields.add(getStoredField(sf, value));
    }
    return fields;
  }

