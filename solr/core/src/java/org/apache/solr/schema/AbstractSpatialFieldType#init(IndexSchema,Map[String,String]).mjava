  @Override
  protected void init(IndexSchema schema, Map<String, String> args) {
    super.init(schema, args);

    if(ctx==null) { // subclass can set this directly
      //Solr expects us to remove the parameters we've used.
      MapListener<String, String> argsWrap = new MapListener<>(args);
      ctx = SpatialContextFactory.makeSpatialContext(argsWrap, schema.getResourceLoader().getClassLoader());
      args.keySet().removeAll(argsWrap.getSeenKeys());
    }
    
    final String unitsErrMsg = "units parameter is deprecated, please use distanceUnits instead for field types with class " +
        getClass().getSimpleName();
    this.units = args.remove("units");//deprecated
    if (units != null) {
      if ("degrees".equals(units)) {
        log.warn(unitsErrMsg);
      } else {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);
      }
    }

    final String distanceUnitsStr = args.remove("distanceUnits");
    if (distanceUnitsStr == null) {
      if (units != null) {
        this.distanceUnits = DistanceUnits.BACKCOMPAT;
      } else {
        this.distanceUnits = ctx.isGeo() ? DistanceUnits.KILOMETERS : DistanceUnits.DEGREES;
      }
    } else {
      // If both units and distanceUnits was specified
      if (units != null) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, unitsErrMsg);
      }
      this.distanceUnits = parseDistanceUnits(distanceUnitsStr);
      if (this.distanceUnits == null)
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
            "Must specify distanceUnits as one of "+ DistanceUnits.getSupportedUnits() +
                " on field types with class "+getClass().getSimpleName());
    }

    argsParser = newSpatialArgsParser();
  }

