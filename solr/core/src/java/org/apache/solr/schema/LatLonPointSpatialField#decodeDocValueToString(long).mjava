  /**
   * Decodes the docValues number into latitude and longitude components, formatting as "lat,lon".
   * The encoding is governed by {@code LatLonDocValuesField}.  The decimal output representation is reflective
   * of the available precision.
   * @param value Non-null; stored location field data
   * @return Non-null; "lat, lon"
   */
  public static String decodeDocValueToString(long value) {
    final double latDouble = GeoEncodingUtils.decodeLatitude((int) (value >> 32));
    final double lonDouble = GeoEncodingUtils.decodeLongitude((int) (value & 0xFFFFFFFFL));
    // This # decimal places gets us close to our available precision to 1.40cm; we have a test for it.
    // CEILING round-trips (decode then re-encode then decode to get identical results). Others did not. It also
    //   reverses the "floor" that occurred when we encoded.
    final int DECIMAL_PLACES = 7;
    final RoundingMode ROUND_MODE = CEILING;
    BigDecimal latitudeDecoded = BigDecimal.valueOf(latDouble).setScale(DECIMAL_PLACES, ROUND_MODE);
    BigDecimal longitudeDecoded = BigDecimal.valueOf(lonDouble).setScale(DECIMAL_PLACES, ROUND_MODE);
    return latitudeDecoded.stripTrailingZeros().toPlainString() + ","
        + longitudeDecoded.stripTrailingZeros().toPlainString();
    // return ((float)latDouble) + "," + ((float)lonDouble);  crude but not quite as accurate
  }

