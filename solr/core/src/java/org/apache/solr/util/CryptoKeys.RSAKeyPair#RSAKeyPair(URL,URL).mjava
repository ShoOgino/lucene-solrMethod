    /**
     * Initialize an RSA key pair from previously saved keys. The formats listed below have been tested, other formats may
     * also be acceptable but are not guaranteed to work.
     * @param privateKeyResourceName path to private key file, encoded as a PKCS#8 in a PEM file
     * @param publicKeyResourceName path to public key file, encoded as X509 in a DER file
     * @throws IOException if an I/O error occurs reading either key file
     * @throws InvalidKeySpecException if either key file is inappropriate for an RSA key
     */
    public RSAKeyPair(URL privateKeyResourceName, URL publicKeyResourceName) throws IOException, InvalidKeySpecException {
      try (InputStream inPrivate = privateKeyResourceName.openStream()) {
        String privateString = new String(inPrivate.readAllBytes(), StandardCharsets.UTF_8)
            .replaceAll("-----[A-Z ]*-----", "")
            .replaceAll("\\n", "");

        PKCS8EncodedKeySpec privateSpec = new PKCS8EncodedKeySpec(Base64.base64ToByteArray(privateString));
        KeyFactory rsaFactory = KeyFactory.getInstance("RSA");
        privateKey = rsaFactory.generatePrivate(privateSpec);
      } catch (NoSuchAlgorithmException e) {
        throw new AssertionError("JVM spec is required to support RSA", e);
      }

      try (InputStream inPublic = publicKeyResourceName.openStream()) {
        publicKey = getX509PublicKey(inPublic.readAllBytes());
        pubKeyStr = Base64.byteArrayToBase64(publicKey.getEncoded());
      }
    }

