  /**
   * Convert a {@link Meter} to a map.
   * @param name metric name
   * @param meter meter instance
   * @param propertyFilter limit what properties of a metric are returned
   * @param simple use simplified representation for complex metrics - instead of a (name, map)
   *             only the selected (name "." key, value) pairs will be produced.
   * @param consumer consumer that accepts produced objects
   */
  static void convertMeter(String name, Meter meter, Predicate<CharSequence> propertyFilter, boolean simple, String separator, BiConsumer<String, Object> consumer) {
    if (simple) {
      if (propertyFilter.test("count")) {
        consumer.accept(name + separator + "count", meter.getCount());
      }
    } else {
      MapWriter writer = ew -> {
        BiConsumer<String, Object> filter = (k, v) -> {
          if (propertyFilter.test(k)) {
            ew.putNoEx(k, v);
          }
        };
        filter.accept("count", meter.getCount());
        filter.accept("meanRate", meter.getMeanRate());
        filter.accept("1minRate", meter.getOneMinuteRate());
        filter.accept("5minRate", meter.getFiveMinuteRate());
        filter.accept("15minRate", meter.getFifteenMinuteRate());
      };
      if (writer._size() > 0) {
        consumer.accept(name, writer);
      }
    }
  }

