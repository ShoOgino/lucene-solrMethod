  /**
   * The generated SpanQuery will be either a SpanTermQuery or an ordered, zero slop SpanNearQuery, depending
   * on how many tokens are emitted.
   */
  public static SpanQuery createSpanQuery(String field, String value, Analyzer analyzer) throws IOException {
    // adapted this from QueryBuilder.createSpanQuery (which isn't currently public) and added reset(), end(), and close() calls
    List<SpanTermQuery> terms = new ArrayList<>();
    try (TokenStream in = analyzer.tokenStream(field, value)) {
      in.reset();

      TermToBytesRefAttribute termAtt = in.getAttribute(TermToBytesRefAttribute.class);
      while (in.incrementToken()) {
        terms.add(new SpanTermQuery(new Term(field, termAtt.getBytesRef())));
      }
      in.end();
    }

    SpanQuery query;
    if (terms.isEmpty()) {
      query = null;
    } else if (terms.size() == 1) {
      query = terms.get(0);
    } else {
      query = new SpanNearQuery(terms.toArray(new SpanTermQuery[terms.size()]), 0, true);
    }
    return query;
  }

