  public static int base10toBase10kSortableInt(char[] arr, int start, int end,
                                               char[] out, int outend
                                    )
  {
    int wpos=outend;  // write position
    boolean neg=false;
    --end;  // position end pointer *on* the last char

    // read signs and leading zeros
    while (start <= end) {
      char val = arr[start];
      if (val=='-') neg=!neg;
      else if (val>='1' && val<='9') break;
      start++;
    }

    // eat whitespace on RHS?
    outer: while (start <= end) {
      switch(arr[end]) {
        case ' ': // fallthrough
        case '\t': // fallthrough
        case '\n': // fallthrough
        case '\r': end--; break;
        default: break outer;
      }
    }

    int exp=0;

    /******************************************************
     * remove RHS zero normalization since it only helps 1 in 100
     * numbers and complicates both encoding and decoding.

    // remove pairs of zeros on the RHS and keep track of
    // the count.
    while (start <= end) {
      char val = arr[end];

      if (val=='0' && start <= end) {
        val=arr[end-1];
        if (val=='0') {
          hundreds++;
          end-=2;
          continue;
        }
      }

      break;
    }
    *************************************************************/


    // now start at the end and work our way forward
    // encoding two base 10 digits into 1 base 100 digit
    while (start <= end) {
      int val = arr[end--] - '0';          // ones
      if (start <= end) {
        val += (arr[end--] - '0')*10;      // tens
        if (start <= end) {
          val += (arr[end--] - '0')*100;    // hundreds
          if (start <= end) {
            val += (arr[end--] - '0')*1000;  // thousands
          }
        }
      }
      out[--wpos] = neg ? (char)(9999-val) : (char)val;
    }


    /****** FUTURE: not needed for this implementation of exponent combined with sign
    // normalize all zeros to positive values
    if (wpos==outend) neg=false;
    ******/

    // adjust exponent by the number of base 100 chars written
    exp += outend - wpos;

    // write the exponent and sign combined
    out[--wpos] = neg ? (char)(ZERO_EXPONENT - exp) : (char)(ZERO_EXPONENT + exp);

    return outend-wpos;  // the length of the base100 int
  }

