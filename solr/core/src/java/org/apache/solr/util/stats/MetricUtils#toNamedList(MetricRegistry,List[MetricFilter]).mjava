  /**
   * Returns a NamedList respresentation of the given metric registry. Only those metrics
   * are converted to NamedList which match at least one of the given MetricFilter instances.
   *
   * @param registry      the {@link MetricRegistry} to be converted to NamedList
   * @param metricFilters a list of {@link MetricFilter} instances
   * @return a {@link NamedList}
   */
  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {
    NamedList response = new NamedList();
    Map<String, Metric> metrics = registry.getMetrics();
    SortedSet<String> names = registry.getNames();
    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {
      Metric metric = metrics.get(n);
      if (metric instanceof Counter) {
        Counter counter = (Counter) metric;
        response.add(n, counterToNamedList(counter));
      } else if (metric instanceof Gauge) {
        Gauge gauge = (Gauge) metric;
        response.add(n, gaugeToNamedList(gauge));
      } else if (metric instanceof Meter) {
        Meter meter = (Meter) metric;
        response.add(n, meterToNamedList(meter));
      } else if (metric instanceof Timer) {
        Timer timer = (Timer) metric;
        response.add(n, timerToNamedList(timer));
      } else if (metric instanceof Histogram) {
        Histogram histogram = (Histogram) metric;
        response.add(n, histogramToNamedList(histogram));
      }
    });
    return response;
  }

