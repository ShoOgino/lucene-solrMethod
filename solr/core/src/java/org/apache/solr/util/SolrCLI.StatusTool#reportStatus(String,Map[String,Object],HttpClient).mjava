    protected Map<String,Object> reportStatus(String solrUrl, Map<String,Object> info, HttpClient httpClient) 
        throws Exception
    {
      Map<String,Object> status = new LinkedHashMap<String,Object>();
      
      status.put("version", asString("/lucene/solr-impl-version", info));      
      status.put("startTime", asString("/jvm/jmx/startTime", info));
      status.put("uptime", uptime(asLong("/jvm/jmx/upTimeMS", info)));
      
      String usedMemory = asString("/jvm/memory/used", info);
      String totalMemory = asString("/jvm/memory/total", info);
      status.put("memory", usedMemory+" of "+totalMemory);
      
      // if this is a Solr in solrcloud mode, gather some basic cluster info
      if ("solrcloud".equals(info.get("mode"))) {
        
        // TODO: Need a better way to get the zkHost from a running server
        // as it can be set from solr.xml vs. on the command-line
        String zkHost = null;
        List<String> args = asList("/jvm/jmx/commandLineArgs", info);
        if (args != null) {
          for (String arg : args) {
            if (arg.startsWith("-DzkHost=")) {
              zkHost = arg.substring("-DzkHost=".length());
              break;
            } else if (arg.startsWith("-DzkRun")) {
              URL serverUrl = new URL(solrUrl);
              String host = serverUrl.getHost();
              int port = serverUrl.getPort();
              zkHost = host+":"+(port+1000)+" (embedded)";
              break;
            }
          }
        }
        
        status.put("cloud", getCloudStatus(httpClient, solrUrl, zkHost));
      }
      
      return status;
    }

