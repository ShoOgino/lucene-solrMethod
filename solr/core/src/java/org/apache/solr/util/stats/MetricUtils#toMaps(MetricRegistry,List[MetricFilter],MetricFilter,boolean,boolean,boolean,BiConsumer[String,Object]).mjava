  public static void toMaps(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,
                            MetricFilter mustMatchFilter, boolean skipHistograms, boolean skipAggregateValues,
                            boolean compact,
                            BiConsumer<String, Object> consumer) {
    Map<String, Metric> metrics = registry.getMetrics();
    SortedSet<String> names = registry.getNames();
    names.stream()
        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))
        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))
        .forEach(n -> {
          Metric metric = metrics.get(n);
          if (metric instanceof Counter) {
            Counter counter = (Counter) metric;
            consumer.accept(n, convertCounter(counter, compact));
          } else if (metric instanceof Gauge) {
            Gauge gauge = (Gauge) metric;
            try {
              consumer.accept(n, convertGauge(gauge, compact));
            } catch (InternalError ie) {
              if (n.startsWith("memory.") && ie.getMessage().contains("Memory Pool not found")) {
                LOG.warn("Error converting gauge '" + n + "', possible JDK bug: SOLR-10362", ie);
                consumer.accept(n, null);
              } else {
                throw ie;
              }
            }
          } else if (metric instanceof Meter) {
            Meter meter = (Meter) metric;
            consumer.accept(n, convertMeter(meter));
          } else if (metric instanceof Timer) {
            Timer timer = (Timer) metric;
            consumer.accept(n, convertTimer(timer, skipHistograms));
          } else if (metric instanceof Histogram) {
            if (!skipHistograms) {
              Histogram histogram = (Histogram) metric;
              consumer.accept(n, convertHistogram(histogram));
            }
          } else if (metric instanceof AggregateMetric) {
            consumer.accept(n, convertAggregateMetric((AggregateMetric)metric, skipAggregateValues));
          }
        });
  }

