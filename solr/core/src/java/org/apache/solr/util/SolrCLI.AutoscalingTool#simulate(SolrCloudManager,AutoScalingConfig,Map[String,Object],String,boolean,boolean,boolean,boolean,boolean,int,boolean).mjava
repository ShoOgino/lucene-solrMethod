    private void simulate(SolrCloudManager cloudManager,
                          AutoScalingConfig config,
                          Map<String, Object> results,
                          String saveSimulated,
                          boolean withClusterState,
                          boolean withStats,
                          boolean withSuggestions,
                          boolean withSortedNodes,
                          boolean withDiagnostics, int iterations, boolean redact) throws Exception {
      File saveDir = null;
      if (saveSimulated != null) {
        saveDir = new File(saveSimulated);
        if (!saveDir.exists()) {
          if (!saveDir.mkdirs()) {
            throw new Exception("Unable to create 'saveSimulated' directory: " + saveDir.getAbsolutePath());
          }
        } else if (!saveDir.isDirectory()) {
          throw new Exception("'saveSimulated' path exists and is not a directory! " + saveDir.getAbsolutePath());
        }
      }
      int SPEED = 50;
      SimCloudManager simCloudManager = SimCloudManager.createCluster(cloudManager, config, TimeSource.get("simTime:" + SPEED));
      int loop = 0;
      List<Suggester.SuggestionInfo> suggestions = Collections.emptyList();
      Map<String, Object> intermediate = new LinkedHashMap<>();
      results.put("intermediate", intermediate);
      while (loop < iterations) {
        LinkedHashMap<String, Object> perStep = new LinkedHashMap<>();
        long start = TimeSource.NANO_TIME.getTimeNs();
        suggestions = PolicyHelper.getSuggestions(config, simCloudManager);
        CLIO.err("-- step " + loop + ", " + suggestions.size() + " suggestions.");
        long end = TimeSource.NANO_TIME.getTimeNs();
        CLIO.err("   - calculated in " + TimeUnit.NANOSECONDS.toMillis(end - start) + " ms (real time â‰ˆ simulated time)");
        if (suggestions.isEmpty()) {
          break;
        }
        SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(simCloudManager, config);
        if (saveDir != null) {
          File target = new File(saveDir, "step" + loop + "_start");
          snapshotCloudManager.saveSnapshot(target, true, redact);
        }
        if (verbose) {
          Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(false, redact);
          snapshot.remove(SnapshotCloudManager.DISTRIB_STATE_KEY);
          snapshot.remove(SnapshotCloudManager.MANAGER_STATE_KEY);
          perStep.put("snapshotStart", snapshot);
        }
        intermediate.put("step" + loop, perStep);
        int unresolvedCount = 0;
        start = TimeSource.NANO_TIME.getTimeNs();
        List<Map<String, Object>> perStepOps = new ArrayList<>(suggestions.size());
        if (withSuggestions) {
          perStep.put("suggestions", suggestions);
          perStep.put("opDetails", perStepOps);
        }
        for (Suggester.SuggestionInfo suggestion : suggestions) {
          SolrRequest<?> operation = suggestion.getOperation();
          if (operation == null) {
            unresolvedCount++;
            if (suggestion.getViolation() == null) {
              CLIO.err("   - ignoring suggestion without violation and without operation: " + suggestion);
            }
            continue;
          }
          SolrParams params = operation.getParams();
          if (operation instanceof V2Request) {
            params = SimUtils.v2AdminRequestToV1Params((V2Request)operation);
          }
          Map<String, Object> paramsMap = new LinkedHashMap<>();
          params.toMap(paramsMap);
          Replica info = simCloudManager.getSimClusterStateProvider().simGetReplicaInfo(
              params.get(CollectionAdminParams.COLLECTION), params.get("replica"));
          if (info == null) {
            CLIO.err("Could not find ReplicaInfo for params: " + params);
          } else if (verbose) {
            paramsMap.put("replicaInfo", info);
          } else if (info.get(Variable.Type.CORE_IDX.tagName) != null) {
            paramsMap.put(Variable.Type.CORE_IDX.tagName, info.get(Variable.Type.CORE_IDX.tagName));
          }
          if (withSuggestions) {
            perStepOps.add(paramsMap);
          }
          try {
            simCloudManager.request(operation);
          } catch (Exception e) {
            CLIO.err("Aborting - error executing suggestion " + suggestion + ": " + e);
            Map<String, Object> error = new HashMap<>();
            error.put("suggestion", suggestion);
            error.put("replicaInfo", info);
            error.put("exception", e);
            perStep.put("error", error);
            break;
          }
        }
        end = TimeSource.NANO_TIME.getTimeNs();
        long realTime = TimeUnit.NANOSECONDS.toMillis(end - start);
        long simTime = realTime * SPEED;
        CLIO.err("   - executed in " + realTime + " ms (real time), " + simTime + " ms (simulated time)");
        if (unresolvedCount == suggestions.size()) {
          CLIO.err("--- aborting simulation, only unresolved violations remain");
          break;
        }
        if (withStats) {
          perStep.put("statsExecutionStop", SimUtils.calculateStats(simCloudManager, config, verbose));
        }
        snapshotCloudManager = new SnapshotCloudManager(simCloudManager, config);
        if (saveDir != null) {
          File target = new File(saveDir, "step" + loop + "_stop");
          snapshotCloudManager.saveSnapshot(target, true, redact);
        }
        if (verbose) {
          Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(false, redact);
          snapshot.remove(SnapshotCloudManager.DISTRIB_STATE_KEY);
          snapshot.remove(SnapshotCloudManager.MANAGER_STATE_KEY);
          perStep.put("snapshotStop", snapshot);
        }
        loop++;
      }
      if (loop == iterations && !suggestions.isEmpty()) {
        CLIO.err("### Failed to apply all suggestions in " + iterations + " steps. Remaining suggestions: " + suggestions + "\n");
      }
      results.put("finalState", prepareResults(simCloudManager, config, withClusterState, withStats,
          withSuggestions, withSortedNodes, withDiagnostics));
    }

