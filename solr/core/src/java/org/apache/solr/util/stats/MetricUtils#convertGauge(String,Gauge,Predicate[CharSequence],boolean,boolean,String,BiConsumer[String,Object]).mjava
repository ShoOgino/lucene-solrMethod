  /**
   * Convert a {@link Gauge}.
   * @param name metric name
   * @param gauge gauge instance
   * @param propertyFilter limit what properties of a metric are returned
   * @param simple use simplified representation for complex metrics - instead of a (name, map)
   *             only the selected (name "." key, value) pairs will be produced.
   * @param compact if true then only return {@link Gauge#getValue()}. If false
   *                then return a map with a "value" field.
   * @param consumer consumer that accepts produced objects
   */
  static void convertGauge(String name,
                           @SuppressWarnings({"rawtypes"})Gauge gauge,
                           Predicate<CharSequence> propertyFilter, boolean simple, boolean compact,
                           String separator, BiConsumer<String, Object> consumer) {
    if (compact || simple) {
      Object o = gauge.getValue();
      if (o instanceof Map) {
        if (simple) {
          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {
            String prop = entry.getKey().toString();
            if (propertyFilter.test(prop)) {
              consumer.accept(name + separator + prop, entry.getValue());
            }
          }
        } else {
          boolean notEmpty = ((Map<?, ?>)o).entrySet().stream()
              .anyMatch(entry -> propertyFilter.test(entry.getKey().toString()));
          MapWriter writer = ew -> {
            for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {
              String prop = entry.getKey().toString();
              if (propertyFilter.test(prop)) {
                ew.putNoEx(prop, entry.getValue());
              }
            }
          };
          if (notEmpty) {
            consumer.accept(name, writer);
          }
        }
      } else {
        consumer.accept(name, o);
      }
    } else {
      Object o = gauge.getValue();
      if (o instanceof Map) {
        boolean notEmpty = ((Map<?, ?>)o).entrySet().stream()
            .anyMatch(entry -> propertyFilter.test(entry.getKey().toString()));
        if (notEmpty) {
          consumer.accept(name, (MapWriter) ew -> {
            ew.putNoEx("value", (MapWriter) ew1 -> {
              for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {
                String prop = entry.getKey().toString();
                if (propertyFilter.test(prop)) {
                  ew1.put(prop, entry.getValue());
                }
              }
            });
          });
        }
      } else {
        if (propertyFilter.test("value")) {
          consumer.accept(name, (MapWriter) ew -> ew.putNoEx("value", o));
        }
      }
    }
  }

