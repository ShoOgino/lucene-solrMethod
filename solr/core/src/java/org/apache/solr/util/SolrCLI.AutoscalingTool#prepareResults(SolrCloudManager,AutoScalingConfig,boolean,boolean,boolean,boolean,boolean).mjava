    private Map<String, Object> prepareResults(SolrCloudManager clientCloudManager,
                                               AutoScalingConfig config,
                                               boolean withClusterState,
                                               boolean withStats,
                                               boolean withSuggestions,
                                               boolean withSortedNodes,
                                               boolean withDiagnostics) throws Exception {
      Policy.Session session = config.getPolicy().createSession(clientCloudManager);
      ClusterState clusterState = clientCloudManager.getClusterStateProvider().getClusterState();
      List<Suggester.SuggestionInfo> suggestions = Collections.emptyList();
      long start, end;
      if (withSuggestions) {
        CLIO.err("- calculating suggestions...");
        start = TimeSource.NANO_TIME.getTimeNs();
        suggestions = PolicyHelper.getSuggestions(config, clientCloudManager);
        end = TimeSource.NANO_TIME.getTimeNs();
        CLIO.err("  (took " + TimeUnit.NANOSECONDS.toMillis(end - start) + " ms)");
      }
      Map<String, Object> diagnostics = Collections.emptyMap();
      if (withDiagnostics) {
        CLIO.err("- calculating diagnostics...");
        start = TimeSource.NANO_TIME.getTimeNs();
        MapWriter mw = PolicyHelper.getDiagnostics(session);
        diagnostics = new LinkedHashMap<>();
        mw.toMap(diagnostics);
        end = TimeSource.NANO_TIME.getTimeNs();
        CLIO.err("  (took " + TimeUnit.NANOSECONDS.toMillis(end - start) + " ms)");
      }
      Map<String, Object> results = new LinkedHashMap<>();
      if (withClusterState) {
        Map<String, Object> map = new LinkedHashMap<>();
        map.put("liveNodes", new TreeSet<>(clusterState.getLiveNodes()));
        map.put("collections", clusterState.getCollectionsMap());
        results.put("CLUSTERSTATE", map);
      }
      if (withStats) {
        results.put("STATISTICS", SimUtils.calculateStats(clientCloudManager, config, verbose));
      }
      if (withSuggestions) {
        results.put("SUGGESTIONS", suggestions);
      }
      if (!withSortedNodes) {
        diagnostics.remove("sortedNodes");
      }
      if (withDiagnostics) {
        results.put("DIAGNOSTICS", diagnostics);
      }
      return results;
    }

