  /**

  /**
   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by "~".
   *
   * @param fieldLists - an array of Strings eg. <code>{"fieldOne^2.3", "fieldTwo", fieldThree~5^-0.4}</code>
   * @param wordGrams - (0=all words, 2,3 = shingle size)
   * @param defaultSlop - the default slop for this param
   * @return - FieldParams containing the fieldname,boost,slop,and shingle size
   */
  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {
    if (null == fieldLists || 0 == fieldLists.length) {
        return new ArrayList<>();
    }
    List<FieldParams> out = new ArrayList<>();
    for (String in : fieldLists) {
      if (null == in) {
        continue;
      }
      in = in.trim();
      if(in.length()==0) {
        continue;
      }
      String[] fieldConfigs = whitespacePattern.split(in);
      for (String s : fieldConfigs) {
        String[] fieldAndSlopVsBoost = caratPattern.split(s);
        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);
        String field = fieldVsSlop[0];
        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;
        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);
        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);
        out.add(fp);
      }
    }
    return out;
  }

