  /**
   * Returns a modified time by "rounding" down to the specified unit
   *
   * @exception IllegalArgumentException if unit isn't recognized.
   * @see #CALENDAR_UNITS
   */
  private static LocalDateTime round(LocalDateTime t, String unit) {
    ChronoUnit uu = CALENDAR_UNITS.get(unit);
    if (null == uu) {
      throw new IllegalArgumentException("Rounding Unit not recognized: "
                                         + unit);
    }
    // note: OffsetDateTime.truncatedTo does not support >= DAYS units so we handle those
    switch (uu) {
      case YEARS:
        return LocalDateTime.of(LocalDate.of(t.getYear(), 1, 1), LocalTime.MIDNIGHT); // midnight is 00:00:00
      case MONTHS:
        return LocalDateTime.of(LocalDate.of(t.getYear(), t.getMonth(), 1), LocalTime.MIDNIGHT);
      case DAYS:
        return LocalDateTime.of(t.toLocalDate(), LocalTime.MIDNIGHT);
      default:
        assert !uu.isDateBased();// >= DAY
        return t.truncatedTo(uu);
    }
  }

