  /**
   * Opens the file and posts its contents to the solrUrl,
   * writes to response to output. 
   */
  public void postFile(File file, OutputStream output, String type) {
    InputStream is = null;
    try {
      URL url = solrUrl;
      String suffix = "";
      if(auto) {
        if(type == null) {
          type = guessType(file);
        }
        // TODO: Add a flag that disables /update and sends all to /update/extract, to avoid CSV, JSON, and XML files
        // TODO: from being interpreted as Solr documents internally
        if (type.equals("application/json") && !"solr".equals(format))  {
          suffix = "/json/docs";
          String urlStr = appendUrlPath(solrUrl, suffix).toString();
          url = new URL(urlStr);
        } else if (type.equals("application/xml") || type.equals("text/csv") || type.equals("application/json")) {
          // Default handler
        } else {
          // SolrCell
          suffix = "/extract";
          String urlStr = appendUrlPath(solrUrl, suffix).toString();
          if(urlStr.indexOf("resource.name")==-1)
            urlStr = appendParam(urlStr, "resource.name=" + URLEncoder.encode(file.getAbsolutePath(), "UTF-8"));
          if(urlStr.indexOf("literal.id")==-1)
            urlStr = appendParam(urlStr, "literal.id=" + URLEncoder.encode(file.getAbsolutePath(), "UTF-8"));
          url = new URL(urlStr);
        }
      } else {
        if(type == null) type = DEFAULT_CONTENT_TYPE;
      }
      info("POSTing file " + file.getName() + (auto?" ("+type+")":"") + " to [base]" + suffix + (mockMode ? " MOCK!":""));
      is = new FileInputStream(file);
      postData(is, file.length(), output, type, url);
    } catch (IOException e) {
      e.printStackTrace();
      warn("Can't open/read file: " + file);
    } finally {
      try {
        if(is!=null) is.close();
      } catch (IOException e) {
        fatal("IOException while closing file: "+ e);
      }
    }
  }

