  /**
   * Set default-ish params on a SolrQueryRequest.
   *
   * RequestHandlers can use this method to ensure their defaults and
   * overrides are visible to other components such as the response writer
   *
   * @param req The request whose params we are interested i
   * @param defaults values to be used if no values are specified in the request params
   * @param appends values to be appended to those from the request (or defaults) when dealing with multi-val params, or treated as another layer of defaults for singl-val params.
   * @param invariants values which will be used instead of any request, or default values, regardless of context.
   */
  public static void setDefaults(SolrQueryRequest req, SolrParams defaults,
                                 SolrParams appends, SolrParams invariants) {
      String useParams = req.getParams().get("useParam");
      if(useParams !=null){
        for (String name : StrUtils.splitSmart(useParams,',')) {
          InitParams initParams = req.getCore().getSolrConfig().getInitParams().get(name);
          if(initParams !=null){
            if(initParams.defaults != null) defaults = SolrParams.wrapDefaults(SolrParams.toSolrParams(initParams.defaults) , defaults);
            if(initParams.invariants != null) invariants = SolrParams.wrapDefaults(invariants, SolrParams.toSolrParams(initParams.invariants));
            if(initParams.appends != null)  appends = SolrParams.wrapAppended(appends, SolrParams.toSolrParams(initParams.appends));
          }
        }
      }

      SolrParams p = req.getParams();
      p = SolrParams.wrapDefaults(p, defaults);
      p = SolrParams.wrapAppended(p, appends);
      p = SolrParams.wrapDefaults(invariants, p);

      req.setParams(p);
  }

