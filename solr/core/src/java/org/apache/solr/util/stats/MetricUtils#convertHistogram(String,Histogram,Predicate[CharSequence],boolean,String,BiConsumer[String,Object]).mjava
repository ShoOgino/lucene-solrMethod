  /**
   * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time
   * based values that don't require unit conversion.
   * @param name metric name
   * @param histogram an instance of {@link Histogram}
   * @param propertyFilter limit what properties of a metric are returned
   * @param simple use simplified representation for complex metrics - instead of a (name, map)
   *             only the selected (name "." key, value) pairs will be produced.
   * @param consumer consumer that accepts produced objects
   */
  static void convertHistogram(String name, Histogram histogram, Predicate<CharSequence> propertyFilter,
                                              boolean simple, String separator, BiConsumer<String, Object> consumer) {
    Snapshot snapshot = histogram.getSnapshot();
    if (simple) {
      if (propertyFilter.test(MEAN)) {
        consumer.accept(name + separator + MEAN, snapshot.getMean());
      }
    } else {
      MapWriter writer = ew -> {
        String prop = "count";
        if (propertyFilter.test(prop)) {
          ew.putNoEx(prop, histogram.getCount());
        }
        // non-time based values
        addSnapshot(ew, snapshot, propertyFilter, false);
      };
      consumer.accept(name, writer);
    }
  }

