  /**
   * Parses {@code str} in the format of '[minPoint TO maxPoint]' where {@code minPoint} is the lower left corner
   * and maxPoint is the upper-right corner of the bounding box.  Both corners may optionally be wrapped with a quote
   * and then it's parsed via {@link #parsePoint(String, org.locationtech.spatial4j.context.SpatialContext)}.
   * @param str Non-null; may *not* have leading or trailing spaces
   * @param ctx Non-null
   * @return the Rectangle
   * @throws InvalidShapeException If for any reason there was a problem parsing the string or creating the rectangle.
   */
  public static Rectangle parseRectangle(String str, SpatialContext ctx) throws InvalidShapeException {
    //note we don't do generic whitespace, just a literal space char detection
    try {
      int toIdx = str.indexOf(" TO ");
      if (toIdx == -1 || str.charAt(0) != '[' || str.charAt(str.length() - 1) != ']') {
        throw new InvalidShapeException("expecting '[bottomLeft TO topRight]'");
      }
      String leftPart = unwrapQuotes(str.substring(1, toIdx).trim());
      String rightPart = unwrapQuotes(str.substring(toIdx + " TO ".length(), str.length() - 1).trim());
      return ctx.makeRectangle(parsePoint(leftPart, ctx), parsePoint(rightPart, ctx));
    } catch (InvalidShapeException e) {
      throw e;
    } catch (Exception e) {
      throw new InvalidShapeException(e.toString(), e);
    }
  }

