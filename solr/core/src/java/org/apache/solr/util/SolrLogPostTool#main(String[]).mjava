  public static void main(String[] args) throws Exception {

    if(args.length != 2) {
      CLIO.out("");
      CLIO.out("postlogs is a simple tool for indexing Solr logs.");
      CLIO.out("");
      CLIO.out("parameters:");
      CLIO.out("");
      CLIO.out("-- baseUrl: Example http://localhost:8983/solr/collection1");
      CLIO.out("-- rootDir: All files found at or below the root will be indexed.");
      CLIO.out("");
      CLIO.out("Sample syntax: ./bin/postlogs http://localhost:8983/solr/collection1 /user/foo/logs");
      CLIO.out("");
      return;
    }

    String baseUrl = args[0];
    String root = args[1];

    HttpSolrClient.Builder builder = new HttpSolrClient.Builder();
    SolrClient client = null;
    try {
      client = builder.withBaseSolrUrl(baseUrl).build();
      File rf = new File(root);
      List<File> files = new ArrayList();
      gatherFiles(rf, files);
      int rec = 0;
      UpdateRequest request = new UpdateRequest();

      for (File file : files) {

        LineNumberReader bufferedReader = null;

        try {
          bufferedReader = new LineNumberReader(new InputStreamReader(new FileInputStream(file), Charset.defaultCharset()));
          LogRecordReader recordReader = new LogRecordReader(bufferedReader);
          SolrInputDocument doc = null;
          String fileName = file.getName();
          while (true) {
            try {
              doc = recordReader.readRecord();
            } catch (Throwable t) {
              CLIO.err("Error reading log record:"+ bufferedReader.getLineNumber() +" from file:"+ fileName);
              CLIO.err(t.getMessage());
              continue;
            }

            if(doc == null) {
              break;
            }

            rec++;
            UUID id = UUID.randomUUID();
            doc.addField("id", id.toString());
            doc.addField("file_s", fileName);
            request.add(doc);
            if (rec == 300) {
              CLIO.out("Sending batch of 300 log records...");
              request.process(client);
              CLIO.out("Batch sent");
              request = new UpdateRequest();
              rec = 0;
            }
          }
        } finally {
          bufferedReader.close();
        }
      }

      if (rec > 0) {
        //Process last batch
        CLIO.out("Sending last batch ...");
        request.process(client);
        client.commit();
        CLIO.out("Committed");
      }
    } finally {
      client.close();
    }
  }

