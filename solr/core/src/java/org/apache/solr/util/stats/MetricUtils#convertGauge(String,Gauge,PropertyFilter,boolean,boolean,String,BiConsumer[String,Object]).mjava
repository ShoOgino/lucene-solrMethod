  /**
   * Convert a {@link Gauge}.
   * @param name metric name
   * @param gauge gauge instance
   * @param propertyFilter limit what properties of a metric are returned
   * @param simple use simplified representation for complex metrics - instead of a (name, map)
   *             only the selected (name "." key, value) pairs will be produced.
   * @param compact if true then only return {@link Gauge#getValue()}. If false
   *                then return a map with a "value" field.
   * @param consumer consumer that accepts produced objects
   */
  static void convertGauge(String name, Gauge gauge, PropertyFilter propertyFilter, boolean simple, boolean compact,
                             String separator, BiConsumer<String, Object> consumer) {
    if (compact || simple) {
      Object o = gauge.getValue();
      if (o instanceof Map) {
        if (simple) {
          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {
            String prop = entry.getKey().toString();
            if (propertyFilter.accept(prop)) {
              consumer.accept(name + separator + prop, entry.getValue());
            }
          }
        } else {
          Map<String, Object> val = new HashMap<>();
          for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {
            String prop = entry.getKey().toString();
            if (propertyFilter.accept(prop)) {
              val.put(prop, entry.getValue());
            }
          }
          if (!val.isEmpty()) {
            consumer.accept(name, val);
          }
        }
      } else {
        consumer.accept(name, o);
      }
    } else {
      Object o = gauge.getValue();
      Map<String, Object> response = new LinkedHashMap<>();
      if (o instanceof Map) {
        for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {
          String prop = entry.getKey().toString();
          if (propertyFilter.accept(prop)) {
            response.put(prop, entry.getValue());
          }
        }
        if (!response.isEmpty()) {
          consumer.accept(name, Collections.singletonMap("value", response));
        }
      } else {
        if (propertyFilter.accept("value")) {
          response.put("value", o);
          consumer.accept(name, response);
        }
      }
    }
  }

