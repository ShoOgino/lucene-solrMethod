  public static CommandLine parseCmdLine(String[] args, Option[] toolOptions) throws Exception {

    String builderClassName = System.getProperty("solr.authentication.httpclient.builder");
    if (builderClassName!=null) {
      try {
        Class c = Class.forName(builderClassName);
        SolrHttpClientBuilder builder = (SolrHttpClientBuilder)c.newInstance();
        HttpClientUtil.setHttpClientBuilder(builder);
        log.info("Set HttpClientConfigurer from: "+builderClassName);
      } catch (Exception ex) {
        log.error(ex.getMessage());
        throw new RuntimeException("Error during loading of configurer '"+builderClassName+"'.", ex);
      }
    }

    // the parser doesn't like -D props
    List<String> toolArgList = new ArrayList<String>();
    List<String> dashDList = new ArrayList<String>();
    for (int a=1; a < args.length; a++) {
      String arg = args[a];
      if (arg.startsWith("-D")) {
        dashDList.add(arg);
      } else {
        toolArgList.add(arg);
      }
    }
    String[] toolArgs = toolArgList.toArray(new String[0]);

    // process command-line args to configure this application
    CommandLine cli = 
        processCommandLineArgs(joinCommonAndToolOptions(toolOptions), toolArgs);

    List argList = cli.getArgList();
    argList.addAll(dashDList);

    // for SSL support, try to accommodate relative paths set for SSL store props
    String solrInstallDir = System.getProperty("solr.install.dir");
    if (solrInstallDir != null) {
      checkSslStoreSysProp(solrInstallDir, "keyStore");
      checkSslStoreSysProp(solrInstallDir, "trustStore");
    }

    return cli;
  }

