  /**
   * Returns a representation of the given metric registry as a list of {@link SolrInputDocument}-s.
   Only those metrics
   * are converted to NamedList which match at least one of the given MetricFilter instances.
   *
   * @param registry      the {@link MetricRegistry} to be converted to NamedList
   * @param shouldMatchFilters a list of {@link MetricFilter} instances.
   *                           A metric must match <em>any one</em> of the filters from this list to be
   *                           included in the output
   * @param mustMatchFilter a {@link MetricFilter}.
   *                        A metric <em>must</em> match this filter to be included in the output.
   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.
   * @param compact use compact representation for counters and gauges.
   * @param metadata optional metadata. If not null and not empty then this map will be added under a
   *                 {@code _metadata_} key.
   * @return a list of {@link SolrInputDocument}-s
   */
  public static List<SolrInputDocument> toSolrInputDocuments(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,
                                                             MetricFilter mustMatchFilter, boolean skipHistograms,
                                                             boolean skipAggregateValues, boolean compact,
                                                             Map<String, Object> metadata) {
    List<SolrInputDocument> result = new LinkedList<>();
    toSolrInputDocuments(registry, shouldMatchFilters, mustMatchFilter, skipHistograms,
        skipAggregateValues, compact, metadata, doc -> {
      result.add(doc);
    });
    return result;
  }

