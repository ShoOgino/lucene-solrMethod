  /**
   * Convert an instance of {@link AggregateMetric}.
   * @param name metric name
   * @param metric an instance of {@link AggregateMetric}
   * @param propertyFilter limit what properties of a metric are returned
   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.
   * @param simple use simplified representation for complex metrics - instead of a (name, map)
   *             only the selected (name "." key, value) pairs will be produced.
   * @param consumer consumer that accepts produced objects
   */
  static void convertAggregateMetric(String name, AggregateMetric metric,
      Predicate<CharSequence> propertyFilter,
      boolean skipAggregateValues, boolean simple, String separator, BiConsumer<String, Object> consumer) {
    if (simple) {
      if (propertyFilter.test(MEAN)) {
        consumer.accept(name + separator + MEAN, metric.getMean());
      }
    } else {
      MapWriter writer = ew -> {
        BiConsumer<String, Object> filter = (k, v) -> {
          if (propertyFilter.test(k)) {
            ew.putNoEx(k, v);
          }
        };
        filter.accept("count", metric.size());
        filter.accept(MAX, metric.getMax());
        filter.accept(MIN, metric.getMin());
        filter.accept(MEAN, metric.getMean());
        filter.accept(STDDEV, metric.getStdDev());
        filter.accept(SUM, metric.getSum());
        if (!(metric.isEmpty() || skipAggregateValues)) {
          ew.putNoEx(VALUES, (MapWriter) ew1 -> {
            metric.getValues().forEach((k, v) -> {
              ew1.putNoEx(k, (MapWriter) ew2 -> {
                ew2.putNoEx("value", v.value);
                ew2.putNoEx("updateCount", v.updateCount.get());
              });
            });
          });
        }
      };
      if (writer._size() > 0) {
        consumer.accept(name, writer);
      }
    }
  }

