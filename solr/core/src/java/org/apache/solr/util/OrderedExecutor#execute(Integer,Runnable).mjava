  /**
   * Execute the given command in the future.
   * If another command with same {@code lockId} is waiting in the queue or running,
   * this method will block until that command finish.
   * Therefore different commands with same {@code hash} will be executed in order of calling this method.
   *
   * If multiple caller are waiting for a command to finish, there are no guarantee that the earliest call will win.
   *
   * @param lockId of the {@code command}, if null then a random hash will be generated
   * @param command the runnable task
   *
   * @throws RejectedExecutionException if this task cannot be accepted for execution
   */
  public void execute(Integer lockId, Runnable command) {
    try {
      sparseStripedLock.add(lockId);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      return;
    }

    try {
      if (delegate.isShutdown()) throw new RejectedExecutionException();

      delegate.execute(() -> {
        try {
          command.run();
        } finally {
          sparseStripedLock.remove(lockId);
        }
      });
    } catch (RejectedExecutionException e) {
      sparseStripedLock.remove(lockId);
      throw e;
    }
  }

