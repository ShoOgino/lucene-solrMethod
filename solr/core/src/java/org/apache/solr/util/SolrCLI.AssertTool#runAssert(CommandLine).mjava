    /**
     * Custom run method which may return exit code
     * @param cli the command line object
     * @return 0 on success, or a number corresponding to number of tests that failed
     * @throws Exception if a tool failed, e.g. authentication failure
     */
    protected int runAssert(CommandLine cli) throws Exception {
      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption("h")) {
        new HelpFormatter().printHelp("bin/solr assert [-m <message>] [-e] [-rR] [-s <url>] [-S <url>] [-c <url>] [-C <url>] [-u <dir>] [-x <dir>] [-X <dir>]", getToolOptions(this));
        return 1;
      }
      if (cli.hasOption("m")) {
        message = cli.getOptionValue("m");
      }
      if (cli.hasOption("t")) {
        timeoutMs = Optional.of(Long.parseLong(cli.getOptionValue("t")));
      }
      if (cli.hasOption("e")) {
        useExitCode = true;
      }

      int ret = 0;
      if (cli.hasOption("r")) {
        ret += assertRootUser();
      }
      if (cli.hasOption("R")) {
        ret += assertNotRootUser();
      }
      if (cli.hasOption("x")) {
        ret += assertFileExists(cli.getOptionValue("x"));
      }
      if (cli.hasOption("X")) {
        ret += assertFileNotExists(cli.getOptionValue("X"));
      }
      if (cli.hasOption("u")) {
        ret += sameUser(cli.getOptionValue("u"));
      }
      if (cli.hasOption("s")) {
        ret += assertSolrRunning(cli.getOptionValue("s"));
      }
      if (cli.hasOption("S")) {
        ret += assertSolrNotRunning(cli.getOptionValue("S"));
      }
      if (cli.hasOption("c")) {
        ret += assertSolrRunningInCloudMode(cli.getOptionValue("c"));
      }
      if (cli.hasOption("C")) {
        ret += assertSolrNotRunningInCloudMode(cli.getOptionValue("C"));
      }
      return ret;
    }

