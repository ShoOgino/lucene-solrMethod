  /**
   * Convert a {@link Timer} to a map.
   * @param name metric name
   * @param timer timer instance
   * @param skipHistograms if true then discard the histogram part of the timer.
   * @param simple use simplified representation for complex metrics - instead of a (name, map)
   *             only the selected (name "." key, value) pairs will be produced.
   * @param consumer consumer that accepts produced objects
   */
  public static void convertTimer(String name, Timer timer, boolean skipHistograms,
                                                boolean simple, BiConsumer<String, Object> consumer) {
    if (simple) {
      consumer.accept(name + ".meanRate", timer.getMeanRate());
    } else {
      Map<String, Object> response = new LinkedHashMap<>();
      response.put("count", timer.getCount());
      response.put("meanRate", timer.getMeanRate());
      response.put("1minRate", timer.getOneMinuteRate());
      response.put("5minRate", timer.getFiveMinuteRate());
      response.put("15minRate", timer.getFifteenMinuteRate());
      if (!skipHistograms) {
        // time-based values in nanoseconds
        addSnapshot(response, timer.getSnapshot(), true);
      }
      consumer.accept(name, response);
    }
  }

