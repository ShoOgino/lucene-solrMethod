    protected void runCloudTool(CloudSolrClient cloudSolrClient, CommandLine cli) throws Exception {

      Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();
      if (liveNodes.isEmpty())
        throw new IllegalStateException("No live nodes found! Cannot create a collection until " +
            "there is at least 1 live node in the cluster.");
      
      String baseUrl = cli.getOptionValue("solrUrl");
      if (baseUrl == null) {
        String firstLiveNode = liveNodes.iterator().next();
        baseUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);
      }

      String collectionName = cli.getOptionValue(NAME);

      // build a URL to create the collection
      int numShards = optionAsInt(cli, "shards", 1);
      int replicationFactor = optionAsInt(cli, "replicationFactor", 1);
      int maxShardsPerNode = -1;

      if (cli.hasOption("maxShardsPerNode")) {
        maxShardsPerNode = Integer.parseInt(cli.getOptionValue("maxShardsPerNode"));
      } else {
        // need number of live nodes to determine maxShardsPerNode if it is not set
        int numNodes = liveNodes.size();
        maxShardsPerNode = ((numShards*replicationFactor)+numNodes-1)/numNodes;
      }

      String confname = cli.getOptionValue("confname", collectionName);
      boolean configExistsInZk =
          cloudSolrClient.getZkStateReader().getZkClient().exists("/configs/" + confname, true);

      if (".system".equals(collectionName)) {
        //do nothing
      } else if (configExistsInZk) {
        echo("Re-using existing configuration directory "+confname);
      } else {
        String configSet = cli.getOptionValue("confdir", DEFAULT_CONFIG_SET);
        File configSetDir = null;
        // we try to be flexible and allow the user to specify a configuration directory instead of a configset name
        File possibleConfigDir = new File(configSet);
        if (possibleConfigDir.isDirectory()) {
          configSetDir = possibleConfigDir;
        } else {
          File configsetsDir = new File(cli.getOptionValue("configsetsDir"));
          if (!configsetsDir.isDirectory())
            throw new FileNotFoundException(configsetsDir.getAbsolutePath()+" not found!");

          // upload the configset if it exists
          configSetDir = new File(configsetsDir, configSet);
          if (!configSetDir.isDirectory()) {
            throw new FileNotFoundException("Specified config " + configSet +
                " not found in " + configsetsDir.getAbsolutePath());
          }
        }

        File confDir = new File(configSetDir, "conf");
        if (!confDir.isDirectory()) {
          // config dir should contain a conf sub-directory but if not and there's a solrconfig.xml, then use it
          if ((new File(configSetDir, "solrconfig.xml")).isFile()) {
            confDir = configSetDir;
          } else {
            throw new IllegalArgumentException("Specified configuration directory "+configSetDir.getAbsolutePath()+
                " is invalid;\nit should contain either conf sub-directory or solrconfig.xml");
          }
        }

        // test to see if that config exists in ZK
        echo("Uploading "+confDir.getAbsolutePath()+
            " for config "+confname+" to ZooKeeper at "+cloudSolrClient.getZkHost());
        cloudSolrClient.uploadConfig(confDir.toPath(), confname);
      }

      // since creating a collection is a heavy-weight operation, check for existence first
      String collectionListUrl = baseUrl+"/admin/collections?action=list";
      if (safeCheckCollectionExists(collectionListUrl, collectionName)) {
        throw new IllegalStateException("\nCollection '"+collectionName+
            "' already exists!\nChecked collection existence using Collections API command:\n"+
            collectionListUrl);
      }

      // doesn't seem to exist ... try to create
      String createCollectionUrl =
          String.format(Locale.ROOT,
              "%s/admin/collections?action=CREATE&name=%s&numShards=%d&replicationFactor=%d&maxShardsPerNode=%d&collection.configName=%s",
              baseUrl,
              collectionName,
              numShards,
              replicationFactor,
              maxShardsPerNode,
              confname);

      echo("\nCreating new collection '"+collectionName+"' using command:\n"+createCollectionUrl+"\n");

      Map<String,Object> json = null;
      try {
        json = getJson(createCollectionUrl);
      } catch (SolrServerException sse) {
        // check if already exists
        if (safeCheckCollectionExists(collectionListUrl, collectionName)) {
          throw new IllegalArgumentException("Collection '"+collectionName+
              "' already exists!\nChecked collection existence using Collections API command:\n"+collectionListUrl);
        } else {
          throw new Exception("Failed to create collection '"+collectionName+"' due to: "+sse.getMessage());
        }
      }

      CharArr arr = new CharArr();
      new JSONWriter(arr, 2).write(json);
      echo(arr.toString());
    }

