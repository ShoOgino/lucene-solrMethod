  @SuppressForbidden(reason = "Need currentTimeMillis, because COMMIT_TIME_MSEC_KEY use currentTimeMillis as value")
  public static boolean waitForInSyncWithLeader(SolrCore core, ZkController zkController, String collection, String shardId) throws InterruptedException {
    if (waitForReplicasInSync == null) return true;
    log.info("Start waiting for replica in sync with leader");
    long currentTime = System.currentTimeMillis();
    Pair<Boolean,Integer> pair = parseValue(waitForReplicasInSync);
    boolean enabled = pair.first();
    if (!enabled) return true;
    long t = System.currentTimeMillis() - 200;
    try {
      for (int i = 0; i < pair.second(); i++) {
        if (core.isClosed()) return true;
        Replica leaderReplica = zkController.getZkStateReader().getLeaderRetry(
            collection, shardId);
        try (HttpSolrClient leaderClient = new HttpSolrClient.Builder(leaderReplica.getCoreUrl()).build()) {
          ModifiableSolrParams params = new ModifiableSolrParams();
          params.set(CommonParams.QT, ReplicationHandler.PATH);
          params.set(COMMAND, CMD_DETAILS);

          NamedList<Object> response = leaderClient.request(new QueryRequest(params));
          long leaderVersion = (long) ((NamedList)response.get("details")).get("indexVersion");
          RefCounted<SolrIndexSearcher> searcher = core.getSearcher();
          try {
            String localVersion = searcher.get().getIndexReader().getIndexCommit().getUserData().get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);
            if (localVersion == null && leaderVersion == 0 && !core.getUpdateHandler().getUpdateLog().hasUncommittedChanges()) return true;
            if (localVersion != null && Long.parseLong(localVersion) == leaderVersion && (leaderVersion >= t || i >= 6)) {
              log.info("Waiting time for replica in sync with leader: {}", System.currentTimeMillis()-currentTime);
              return true;
            } else {
              Thread.sleep(500);
            }
          } finally {
            searcher.decref();
          }

        }
      }

    } catch (Exception e) {
      log.error("Exception when wait for replicas in sync with master");
    }

    return false;
  }

