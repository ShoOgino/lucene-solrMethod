  /**
   * Convert a {@link Gauge}.
   * @param name metric name
   * @param gauge gauge instance
   * @param simple use simplified representation for complex metrics - instead of a (name, map)
   *             only the selected (name "." key, value) pairs will be produced.
   * @param compact if true then only return {@link Gauge#getValue()}. If false
   *                then return a map with a "value" field.
   * @param consumer consumer that accepts produced objects
   */
  static void convertGauge(String name, Gauge gauge, boolean simple, boolean compact,
                             BiConsumer<String, Object> consumer) {
    if (compact || simple) {
      Object o = gauge.getValue();
      if (simple && (o instanceof Map)) {
        for (Map.Entry<?, ?> entry : ((Map<?, ?>)o).entrySet()) {
          consumer.accept(name + "." + entry.getKey().toString(), entry.getValue());
        }
      } else {
        consumer.accept(name, o);
      }
    } else {
      Map<String, Object> response = new LinkedHashMap<>();
      response.put("value", gauge.getValue());
      consumer.accept(name, response);
    }
  }

