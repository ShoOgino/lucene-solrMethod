    private void validateSchema(Map jsonSchema, List<String> errs) {
      Object typeStr = jsonSchema.get("type");
      if (typeStr == null) {
        errs.add("'type' is missing ");
      }
      Type type = Type.get(typeStr);
      if (type == null) {
        errs.add ("Unknown type " + typeStr + " in object "+ Utils.toJSONString(jsonSchema));
        return;
      }
      this.type = type;

      for (SchemaAttribute schemaAttribute : SchemaAttribute.values()) {
        schemaAttribute.validateSchema(jsonSchema, this, errs);
      }
      jsonSchema.keySet().forEach(o -> {
        if (!knownAttributes.containsKey(o)) errs.add("Unknown key : " + o);
      });
      if (!errs.isEmpty()) return;

      if (type == Type.OBJECT) {
        Map m = (Map) jsonSchema.get("properties");
        if (m != null) {
          for (Object o : m.entrySet()) {
            Map.Entry e = (Map.Entry) o;
            if (e.getValue() instanceof Map) {
              Map od = (Map) e.getValue();
              if (children == null) children = new LinkedHashMap<>();
              SchemaNode child = new SchemaNode(this);
              children.put((String) e.getKey(), child);
              child.validateSchema(od, errs);
            } else {
              errs.add("Invalid Object definition for field " + e.getKey());
            }
          }
        } else {
          additionalProperties = Boolean.TRUE;
        }
      }
      for (SchemaAttribute attr : SchemaAttribute.values()) {
        attr.postValidateSchema(jsonSchema, this, errs);
      }

    }

