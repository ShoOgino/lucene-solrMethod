  /*
    Must be called after acquiring markAndSweepLock
   */
  private void markAndSweepByRamSize() {
    assert markAndSweepLock.isHeldByCurrentThread() : "markAndSweepLock held by another thread";
    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());
    map.forEach((o, kvCacheEntry) -> {
      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons
      entriesInAccessOrder.add(kvCacheEntry);
    });

    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger

    // iterate in oldest to newest order
    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {
      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);
      evictEntry(kvCacheEntry.key);
      if (ramBytes.sum() <= ramLowerWatermark)  {
        break; // we are done!
      }
    }
  }

