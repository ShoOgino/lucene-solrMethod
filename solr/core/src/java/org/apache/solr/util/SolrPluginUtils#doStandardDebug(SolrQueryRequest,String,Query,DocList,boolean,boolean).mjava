  /**
   * <p>
   * Returns a NamedList containing many "standard" pieces of debugging
   * information.
   * </p>
   *
   * <ul>
   * <li>rawquerystring - the 'q' param exactly as specified by the client
   * </li>
   * <li>querystring - the 'q' param after any preprocessing done by the plugin
   * </li>
   * <li>parsedquery - the main query executed formated by the Solr
   *     QueryParsing utils class (which knows about field types)
   * </li>
   * <li>parsedquery_toString - the main query executed formated by it's
   *     own toString method (in case it has internal state Solr
   *     doesn't know about)
   * </li>
   * <li>explain - the list of score explanations for each document in
   *     results against query.
   * </li>
   * <li>otherQuery - the query string specified in 'explainOther' query param.
   * </li>
   * <li>explainOther - the list of score explanations for each document in
   *     results against 'otherQuery'
   * </li>
   * </ul>
   *
   * @param req the request we are dealing with
   * @param userQuery the users query as a string, after any basic
   *                  preprocessing has been done
   * @param query the query built from the userQuery
   *              (and perhaps other clauses) that identifies the main
   *              result set of the response.
   * @param results the main result set of the response
   * @return The debug info
   * @throws java.io.IOException if there was an IO error
   */
  public static NamedList doStandardDebug(SolrQueryRequest req,
                                          String userQuery,
                                          Query query,
                                          DocList results, boolean dbgQuery, boolean dbgResults)
    throws IOException {

    NamedList dbg = null;

    dbg = new SimpleOrderedMap();

    SolrIndexSearcher searcher = req.getSearcher();
    IndexSchema schema = req.getSchema();

    boolean explainStruct
            = req.getParams().getBool(CommonParams.EXPLAIN_STRUCT, false);

    /* userQuery may have been pre-processes .. expose that */
    if (dbgQuery) {
      dbg.add("rawquerystring", req.getParams().get(CommonParams.Q));
      dbg.add("querystring", userQuery);

      /* QueryParsing.toString isn't perfect, use it to see converted
      * values, use regular toString to see any attributes of the
      * underlying Query it may have missed.
      */
      dbg.add("parsedquery", QueryParsing.toString(query, schema));
      dbg.add("parsedquery_toString", query.toString());
    }

    if (dbgResults) {
      NamedList<Explanation> explain
              = getExplanations(query, results, searcher, schema);
      dbg.add("explain", explainStruct ?
              explanationsToNamedLists(explain) :
              explanationsToStrings(explain));

      String otherQueryS = req.getParams().get(CommonParams.EXPLAIN_OTHER);
      if (otherQueryS != null && otherQueryS.length() > 0) {
        DocList otherResults = doSimpleQuery
                (otherQueryS, req, 0, 10);
        dbg.add("otherQuery", otherQueryS);
        NamedList<Explanation> explainO
                = getExplanations(query, otherResults, searcher, schema);
        dbg.add("explainOther", explainStruct ?
                explanationsToNamedLists(explainO) :
                explanationsToStrings(explainO));
      }
    }


    return dbg;
  }

