    // ========================================================================
    /**
     * @param wordLength the length in bits of the words to be serialized. Must
     *        be greater than or equal to 1 and less than or equal to 64.
     * @param wordCount the number of words to be serialized. Must be greater than
     *        or equal to zero.
     * @param bytePadding the number of leading bytes that should pad the
     *        serialized words. Must be greater than or equal to zero.
     */
    public BigEndianAscendingWordSerializer(final int wordLength, final int wordCount, final int bytePadding) {
        if((wordLength < 1) || (wordLength > 64)) {
            throw new IllegalArgumentException("Word length must be >= 1 and <= 64. (was: " + wordLength + ")");
        }
        if(wordCount < 0) {
            throw new IllegalArgumentException("Word count must be >= 0. (was: " + wordCount + ")");
        }
        if(bytePadding < 0) {
            throw new IllegalArgumentException("Byte padding must be must be >= 0. (was: " + bytePadding + ")");
        }

        this.wordLength = wordLength;
        this.wordCount = wordCount;

        final long bitsRequired = ((long)wordLength) * ((long)wordCount);
        final boolean leftoverBits = ((bitsRequired % BITS_PER_BYTE) != 0);
        final int bytesRequired = (int)(bitsRequired / BITS_PER_BYTE) + (leftoverBits ? 1 : 0) + bytePadding;
        bytes = new byte[bytesRequired];

        bitsLeftInByte = BITS_PER_BYTE;
        byteIndex = bytePadding;
        wordsWritten = 0;
    }

