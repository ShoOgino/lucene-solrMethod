    @Override
    public int runTool(CommandLine cli) throws Exception {
      if (cli.getOptions().length == 0 || cli.getArgs().length > 0 || cli.hasOption("h")) {
        new HelpFormatter().printHelp("bin/solr auth [OPTIONS]", getToolOptions(this));
        return 1;
      }

      String type = cli.getOptionValue("type", "basicAuth");
      if (type.equalsIgnoreCase("basicAuth") == false) {
        System.out.println("Only type=basicAuth supported at the moment.");
        exit(1);
      }

      if (cli.hasOption("enable") && cli.hasOption("disable")) {
        System.out.println("You have specified both -enable and -disable. Only one should be provided.");
        return 1;
      }
      if  (cli.hasOption("enable")) {
        String zkHost = getZkHost(cli);
        if (zkHost == null) {
          System.out.println("ZK Host not found. Solr should be running in cloud mode");
          exit(1);
        }

        
        if (cli.hasOption("credentials") == false && cli.hasOption("prompt") == false) {
          System.out.println("Option -credentials or -prompt is required with -enable.");
          new HelpFormatter().printHelp("bin/solr auth [OPTIONS]", getToolOptions(this));
          exit(1);
        } else if (cli.hasOption("prompt") == false &&
            (cli.getOptionValue("credentials") == null || !cli.getOptionValue("credentials").contains(":"))) {
          System.out.println("Option -credentials is not in correct format.");
          new HelpFormatter().printHelp("bin/solr auth [OPTIONS]", getToolOptions(this));
          exit(1);
        }

        String username, password;
        if (cli.hasOption("credentials")) {
          String credentials = cli.getOptionValue("credentials");
          username = credentials.split(":")[0];
          password = credentials.split(":")[1];
        } else {
          Console console = System.console();
          username = console.readLine("Enter username: ");
          password = new String(console.readPassword("Enter password: "));
        }
        // check if security is already enabled or not
        try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {
          if (zkClient.exists("/security.json", true)) {
            byte oldSecurityBytes[] = zkClient.getData("/security.json", null, null, true);
            if (!"{}".equals(new String(oldSecurityBytes, StandardCharsets.UTF_8).trim())) {
              System.out.println("Security is already enabled. You can disable it with 'bin/solr auth -disable'. Existing security.json: \n"
                  + new String(oldSecurityBytes, StandardCharsets.UTF_8));
              exit(1);
            }
          }
        }

        boolean blockUnknown = cli.getOptionValue("blockUnknown") == null ?
            cli.hasOption("blockUnknown"): Boolean.valueOf(cli.getOptionValue("blockUnknown"));

            String securityJson = "{" +
                "\n  \"authentication\":{" +
                "\n   \"blockUnknown\": " + blockUnknown + "," +
                "\n   \"class\":\"solr.BasicAuthPlugin\"," +
                "\n   \"credentials\":{\""+username+"\":\"" + Sha256AuthenticationProvider.getSaltedHashedValue(password) + "\"}" +
                "\n  }," +
                "\n  \"authorization\":{" +
                "\n   \"class\":\"solr.RuleBasedAuthorizationPlugin\"," +
                "\n   \"permissions\":[" +
                "\n {\"name\":\"security-edit\", \"role\":\"admin\"}," +
                "\n {\"name\":\"collection-admin-edit\", \"role\":\"admin\"}," +
                "\n {\"name\":\"core-admin-edit\", \"role\":\"admin\"}" +
                "\n   ]," +
                "\n   \"user-role\":{\""+username+"\":\"admin\"}" +
                "\n  }" +
                "\n}";
            System.out.println("Uploading following security.json: " + securityJson);

            try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {
              zkClient.setData("/security.json", securityJson.getBytes(StandardCharsets.UTF_8), true);
            }

            String solrIncludeFilename = cli.getOptionValue("solrIncludeFile");
            File includeFile = new File(solrIncludeFilename);
            if (includeFile.exists() == false || includeFile.canWrite() == false) {
              System.out.println("Solr include file " + solrIncludeFilename + " doesn't exist or is not writeable.");
              printAuthEnablingInstructions(username, password);
              System.exit(0);
            }
            File basicAuthConfFile = new File(includeFile.getParent() + File.separator + "basicAuth.conf");
            
            if (basicAuthConfFile.getParentFile().canWrite() == false) {
              System.out.println("Cannot write to file: " + basicAuthConfFile.getAbsolutePath());
              printAuthEnablingInstructions(username, password);
              System.exit(0);
            }
            
            FileUtils.writeStringToFile(basicAuthConfFile, 
                "httpBasicAuthUser=" + username + "\nhttpBasicAuthPassword=" + password, StandardCharsets.UTF_8);

            // update the solr.in.sh file to contain the necessary authentication lines
            updateIncludeFileEnableAuth(includeFile, basicAuthConfFile.getAbsolutePath(), username, password);
            return 0;
      } else if (cli.hasOption("disable")) {
        String zkHost = getZkHost(cli);
        if (zkHost == null) {
          stdout.print("ZK Host not found. Solr should be running in cloud mode");
          exit(1);
        }

        System.out.println("Uploading following security.json: {}");

        try (SolrZkClient zkClient = new SolrZkClient(zkHost, 10000)) {
          zkClient.setData("/security.json", "{}".getBytes(StandardCharsets.UTF_8), true);
        }

        String solrIncludeFilename = cli.getOptionValue("solrIncludeFile");
        File includeFile = new File(solrIncludeFilename);
        if (includeFile.exists() == false || includeFile.canWrite() == false) {
          System.out.println("Solr include file " + solrIncludeFilename + " doesn't exist or is not writeable.");
          System.out.println("Security has been disabled. Please remove any SOLR_AUTH_TYPE or SOLR_AUTHENTICATION_OPTS configuration from solr.in.sh/solr.in.cmd.\n");
          System.exit(0);
        }

        // update the solr.in.sh file to comment out the necessary authentication lines
        updateIncludeFileDisableAuth(includeFile);
        return 0;
      }

      System.out.println("Options not understood (should be -enable or -disable).");
      new HelpFormatter().printHelp("bin/solr auth [OPTIONS]", getToolOptions(this));
      return 1;
    }

