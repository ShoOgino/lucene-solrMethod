  /*
    Must be called after acquiring markAndSweepLock
   */
  private void markAndSweepByIdleTime() {
    assert markAndSweepLock.isHeldByCurrentThread() : "markAndSweepLock held by another thread";
    Iterator<Map.Entry<Object, CacheEntry<K, V>>> iterator = map.entrySet().iterator();
    long idleCutoff = timeSource.getEpochTimeNs() - maxIdleTimeNs;
    long currentOldestEntry = Long.MAX_VALUE;
    while (iterator.hasNext()) {
      Map.Entry<Object, CacheEntry<K, V>> entry = iterator.next();
      if (entry.getValue().createTime < idleCutoff) {
        iterator.remove();
        stats.evictionIdleCounter.incrementAndGet();
        postRemoveEntry(entry.getValue());
      } else {
        if (entry.getValue().createTime < currentOldestEntry) {
          currentOldestEntry = entry.getValue().createTime;
        }
      }
    }
    if (currentOldestEntry != Long.MAX_VALUE) {
      oldestEntryNs.set(currentOldestEntry);
    }
  }

