  /**
   * Given a package and list of collections, verify if the package is installed
   * in those collections. It uses the verify command of every plugin in the package (if defined).
   */
  public boolean verify(SolrPackageInstance pkg, List<String> collections) {
    boolean success = true;
    for (Plugin plugin: pkg.plugins) {
      Command cmd = plugin.verifyCommand;
      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {
        for (String collection: collections) {
          Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);

          Map<String, String> systemParams = Map.of("collection", collection, "package-name", pkg.name, "package-version", pkg.version);
          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);
          PackageUtils.printGreen("Executing " + url + " for collection:" + collection);

          if ("GET".equalsIgnoreCase(cmd.method)) {
            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);
            PackageUtils.printGreen(response);
            String actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())
                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));
            String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);
            PackageUtils.printGreen("Actual: "+actualValue+", expected: "+expectedValue);
            if (!expectedValue.equals(actualValue)) {
              PackageUtils.printRed("Failed to deploy plugin: " + plugin.name);
              success = false;
            }
          } else {
            throw new SolrException(ErrorCode.BAD_REQUEST, "Non-GET method not supported for setup commands");
          }
        }
      }
    }
    return success;
  }

