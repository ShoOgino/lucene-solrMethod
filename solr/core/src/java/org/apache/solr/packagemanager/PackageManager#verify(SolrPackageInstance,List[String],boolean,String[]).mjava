  /**
   * Given a package and list of collections, verify if the package is installed
   * in those collections. It uses the verify command of every plugin in the package (if defined).
   * 
   * @param overrides are needed only when shouldDeployClusterPlugins is true, since collection level plugins will get their overrides from ZK (collection params API)
   */
  public boolean verify(SolrPackageInstance pkg, List<String> collections, boolean shouldDeployClusterPlugins, String overrides[]) {
    boolean success = true;
    for (Plugin plugin: pkg.plugins) {
      Command cmd = plugin.verifyCommand;
      if (plugin.verifyCommand != null && !Strings.isNullOrEmpty(cmd.path)) {
        if ("cluster".equalsIgnoreCase(plugin.type)) {
          if (!shouldDeployClusterPlugins) continue; // Plugins of type "cluster"
          Map<String, String> overridesMap = getParameterOverrides(overrides);
          Map<String, String> systemParams = Map.of("package-name", pkg.name, "package-version", pkg.version, "plugin-name", plugin.name);
          String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, overridesMap, systemParams);
          PackageUtils.printGreen("Executing " + url + " for cluster level plugin");

          if ("GET".equalsIgnoreCase(cmd.method)) {
            String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);
            PackageUtils.printGreen(response);
            String actualValue = null;
            try {
              actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())
                .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, overridesMap, systemParams));
            } catch (PathNotFoundException ex) {
              PackageUtils.printRed("Failed to deploy plugin: " + plugin.name);
              success = false;
            }
            if (actualValue != null) {
              String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, overridesMap, systemParams);
              PackageUtils.printGreen("Actual: " + actualValue + ", expected: " + expectedValue);
              if (!expectedValue.equals(actualValue)) {
                PackageUtils.printRed("Failed to deploy plugin: " + plugin.name);
                success = false;
              }
            }
          } else {
            throw new SolrException(ErrorCode.BAD_REQUEST, "Non-GET method not supported for verify commands");
          }          
        } else {
          // Plugins of type "collection"
          for (String collection: collections) {
            Map<String, String> collectionParameterOverrides = getPackageParams(pkg.name, collection);
  
            Map<String, String> systemParams = Map.of("collection", collection, "package-name", pkg.name, "package-version", pkg.version, "plugin-name", plugin.name);
            String url = solrBaseUrl + PackageUtils.resolve(cmd.path, pkg.parameterDefaults, collectionParameterOverrides, systemParams);
            PackageUtils.printGreen("Executing " + url + " for collection:" + collection);
  
            if ("GET".equalsIgnoreCase(cmd.method)) {
              String response = PackageUtils.getJsonStringFromUrl(solrClient.getHttpClient(), url);
              PackageUtils.printGreen(response);
              String actualValue = null;
              try {
                actualValue = JsonPath.parse(response, PackageUtils.jsonPathConfiguration())
                    .read(PackageUtils.resolve(cmd.condition, pkg.parameterDefaults, collectionParameterOverrides, systemParams));
              } catch (PathNotFoundException ex) {
                PackageUtils.printRed("Failed to deploy plugin: " + plugin.name);
                success = false;
              }
              if (actualValue != null) {
                String expectedValue = PackageUtils.resolve(cmd.expected, pkg.parameterDefaults, collectionParameterOverrides, systemParams);
                PackageUtils.printGreen("Actual: " + actualValue + ", expected: "+expectedValue);
                if (!expectedValue.equals(actualValue)) {
                  PackageUtils.printRed("Failed to deploy plugin: " + plugin.name);
                  success = false;
                }
              }
            } else {
              throw new SolrException(ErrorCode.BAD_REQUEST, "Non-GET method not supported for verify commands");
            }
          }
        }
      }
    }
    return success;
  }

