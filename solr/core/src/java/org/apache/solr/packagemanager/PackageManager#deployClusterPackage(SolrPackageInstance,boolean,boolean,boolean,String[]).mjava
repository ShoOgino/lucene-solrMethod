  @SuppressWarnings("unchecked")
  private boolean deployClusterPackage(SolrPackageInstance packageInstance, boolean isUpdate, boolean noprompt,
      boolean shouldDeployClusterPlugins, String[] overrides) {
    boolean cluasterPluginFailed = false;

    if (isUpdate) {
      for (Plugin plugin: packageInstance.plugins) {
        if (!shouldDeployClusterPlugins || "cluster".equalsIgnoreCase(plugin.type) == false) continue;
        SolrPackageInstance deployedPackage = getPackagesDeployedAsClusterLevelPlugins().get(packageInstance.name);
        if (deployedPackage == null) {
          PackageUtils.printRed("Cluster level plugin " + plugin.name + " from package " + packageInstance.name + " not deployed. To deploy, remove the --update parameter.");
          cluasterPluginFailed = true;
          continue;
        }
        for (PluginMeta pluginMeta: (List<PluginMeta>)deployedPackage.getCustomData()) {
          PackageUtils.printGreen("Updating this plugin: " + pluginMeta);
          try {
            pluginMeta.version = packageInstance.version; // just update the version, let the other metadata same
            String postBody = "{\"update\": " + Utils.toJSONString(pluginMeta) + "}";
            PackageUtils.printGreen("Posting " + postBody + " to " + PackageUtils.CLUSTER_PLUGINS_PATH);
            SolrCLI.postJsonToSolr(solrClient, PackageUtils.CLUSTER_PLUGINS_PATH, postBody);
          } catch (Exception e) {
            throw new SolrException(ErrorCode.SERVER_ERROR, e);
          }
        }
      }
    } else {
      for (Plugin plugin: packageInstance.plugins) {
        if (!shouldDeployClusterPlugins || "cluster".equalsIgnoreCase(plugin.type) == false) continue;
        // Check if this cluster level plugin is already deployed
        {
          Map<String, Object> clusterprops = null;
          try {
            clusterprops = PackageUtils.getJson(solrClient.getHttpClient(), solrBaseUrl + PackageUtils.CLUSTERPROPS_PATH, Map.class);
          } catch (SolrException ex) {
            if (ex.code() == ErrorCode.NOT_FOUND.code) {
              // Ignore this, as clusterprops may not have been created yet. This means package isn't already installed.
            } else throw ex;
          }
          if (clusterprops != null) {
            Object pkg = ((Map<String, Object>)clusterprops.getOrDefault("plugin", Collections.emptyMap())).get(packageInstance.name+":"+plugin.name);
            if (pkg != null) {
              PackageUtils.printRed("Cluster level plugin " + plugin.name + " from package " + packageInstance.name + " already deployed. To update to " + packageInstance + ", pass --update parameter.");
              cluasterPluginFailed = true;
              continue;
            }
          }
        }

        // Lets install this plugin now
        Map<String, String> systemParams = Map.of("package-name", packageInstance.name, "package-version", packageInstance.version, "plugin-name", plugin.name);
        Command cmd = plugin.setupCommand;
        if (cmd != null && !Strings.isNullOrEmpty(cmd.method)) {
          if ("POST".equalsIgnoreCase(cmd.method)) {
            try {
              Map<String, String> overridesMap = getParameterOverrides(overrides);
              String payload = PackageUtils.resolve(getMapper().writeValueAsString(cmd.payload), packageInstance.parameterDefaults, overridesMap, systemParams);
              String path = PackageUtils.resolve(cmd.path, packageInstance.parameterDefaults, overridesMap, systemParams);
              PackageUtils.printGreen("Executing " + payload + " for path:" + path);
              boolean shouldExecute = true;
              if (!noprompt) { // show a prompt asking user to execute the setup command for the plugin
                PackageUtils.print(PackageUtils.YELLOW, "Execute this command (y/n): ");
                try (Scanner scanner = new Scanner(System.in, "UTF-8")) {
                  String userInput = scanner.next();
                  if (!"yes".equalsIgnoreCase(userInput) && !"y".equalsIgnoreCase(userInput)) {
                    shouldExecute = false;
                    PackageUtils.printRed("Skipping setup command for deploying (deployment verification may fail)."
                        + " Please run this step manually or refer to package documentation.");
                  }
                }
              }
              if (shouldExecute) {
                SolrCLI.postJsonToSolr(solrClient, path, payload);
              }
            } catch (Exception ex) {
              throw new SolrException(ErrorCode.SERVER_ERROR, ex);
            }
          } else {
            throw new SolrException(ErrorCode.BAD_REQUEST, "Non-POST method not supported for setup commands");
          }
        } else {
          PackageUtils.printRed("There is no setup command to execute for plugin: " + plugin.name);
        }
      }
    }
    return !cluasterPluginFailed;
  }

