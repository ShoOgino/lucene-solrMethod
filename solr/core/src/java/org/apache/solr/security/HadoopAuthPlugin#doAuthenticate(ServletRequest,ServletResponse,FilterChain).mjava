  @Override
  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)
      throws Exception {
    final HttpServletResponse frsp = (HttpServletResponse)response;

    if (TRACE_HTTP) {
      HttpServletRequest req = (HttpServletRequest) request;
      log.info("----------HTTP Request---------");
      log.info("{} : {}", req.getMethod(), req.getRequestURI());
      log.info("Query : {}", req.getQueryString());
      log.info("Headers :");
      Enumeration<String> headers = req.getHeaderNames();
      while (headers.hasMoreElements()) {
        String name = headers.nextElement();
        Enumeration<String> hvals = req.getHeaders(name);
        while (hvals.hasMoreElements()) {
          log.info("{} : {}", name, hvals.nextElement());
        }
      }
      log.info("-------------------------------");
    }

    // Workaround until HADOOP-13346 is fixed.
    HttpServletResponse rspCloseShield = new HttpServletResponseWrapper(frsp) {
      @SuppressForbidden(reason = "Hadoop DelegationTokenAuthenticationFilter uses response writer, this" +
          "is providing a CloseShield on top of that")
      @Override
      public PrintWriter getWriter() throws IOException {
        final PrintWriter pw = new PrintWriterWrapper(frsp.getWriter()) {
          @Override
          public void close() {};
        };
        return pw;
      }
    };
    authFilter.doFilter(request, rspCloseShield, filterChain);

    if (TRACE_HTTP) {
      log.info("----------HTTP Response---------");
      log.info("Status : {}", frsp.getStatus());
      log.info("Headers :");
      for (String name : frsp.getHeaderNames()) {
        for (String value : frsp.getHeaders(name)) {
          log.info("{} : {}", name, value);
        }
      }
      log.info("-------------------------------");
    }


    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.
      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);
      if (requestContinuesAttr == null) {
        log.warn("Could not find " + REQUEST_CONTINUES_ATTR);
        return false;
      } else {
        return Boolean.parseBoolean(requestContinuesAttr);
      }
    }

    return true;
  }

