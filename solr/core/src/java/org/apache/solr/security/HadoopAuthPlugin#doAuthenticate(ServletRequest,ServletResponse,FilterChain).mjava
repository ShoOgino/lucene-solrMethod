  @Override
  public boolean doAuthenticate(ServletRequest request, ServletResponse response, FilterChain filterChain)
      throws Exception {
    final HttpServletResponse frsp = (HttpServletResponse)response;

    if (TRACE_HTTP) {
      HttpServletRequest req = (HttpServletRequest) request;
      log.info("----------HTTP Request---------{}");
      if (log.isInfoEnabled()) {
        log.info("{} : {}", req.getMethod(), req.getRequestURI());
      }
      if (log.isInfoEnabled()) {
        log.info("Query : {}", req.getQueryString());
      }
      log.info("Headers :");
      Enumeration<String> headers = req.getHeaderNames();
      while (headers.hasMoreElements()) {
        String name = headers.nextElement();
        Enumeration<String> hvals = req.getHeaders(name);
        while (hvals.hasMoreElements()) {
          if (log.isInfoEnabled()) {
            log.info("{} : {}", name, hvals.nextElement());
          }
        }
      }
      log.info("-------------------------------");
    }

    authFilter.doFilter(request, frsp, filterChain);

    switch (frsp.getStatus()) {
      case HttpServletResponse.SC_UNAUTHORIZED:
        // Cannot tell whether the 401 is due to wrong or missing credentials
        numWrongCredentials.inc();
        break;

      case HttpServletResponse.SC_FORBIDDEN:
        // Are there other status codes which should also translate to error?
        numErrors.mark();
        break;
      default:
        if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {
          numAuthenticated.inc();
        } else {
          numErrors.mark();
        }
    }
     
    if (TRACE_HTTP) {
      log.info("----------HTTP Response---------");
      if (log.isInfoEnabled()) {
        log.info("Status : {}", frsp.getStatus());
      }
      log.info("Headers :");
      for (String name : frsp.getHeaderNames()) {
        for (String value : frsp.getHeaders(name)) {
          log.info("{} : {}", name, value);
        }
      }
      log.info("-------------------------------");
    }


    if (authFilter instanceof HadoopAuthFilter) { // delegation token mgmt.
      String requestContinuesAttr = (String)request.getAttribute(REQUEST_CONTINUES_ATTR);
      if (requestContinuesAttr == null) {
        log.warn("Could not find {}", REQUEST_CONTINUES_ATTR);
        return false;
      } else {
        return Boolean.parseBoolean(requestContinuesAttr);
      }
    }

    return true;
  }

