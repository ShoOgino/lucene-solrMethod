  @Override
  public Key resolveKey(JsonWebSignature jws, List<JsonWebStructure> nestingContext) throws UnresolvableKeyException {
    JsonWebKey theChosenOne;
    List<JsonWebKey> jsonWebKeys = new ArrayList<>();

    String keysSource = "N/A";
    try {
      String tokenIssuer = JwtClaims.parse(jws.getUnverifiedPayload()).getIssuer();
      JWTIssuerConfig issuerConfig;
      if (tokenIssuer == null) {
        if (requireIssuer) {
          throw new UnresolvableKeyException("Token does not contain required issuer claim");
        } else if (issuerConfigs.size() == 1) {
          issuerConfig = issuerConfigs.values().iterator().next();
        } else {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
              "Signature verifiction not supported for multiple issuers without 'iss' claim in token.");
        }
      } else {
        issuerConfig = issuerConfigs.get(tokenIssuer);
        if (issuerConfig == null) {
          if (issuerConfigs.size() > 1) {
            throw new UnresolvableKeyException("No issuers configured for iss='" + tokenIssuer + "', cannot validate signature");
          } else if (issuerConfigs.size() == 1) {
            issuerConfig = issuerConfigs.values().iterator().next();
            log.debug("No issuer matching token's iss claim, but exactly one configured, selecting that one");
          } else {
            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
                "Signature verifiction failed due to no configured issuer with id " + tokenIssuer);
          }
        }
      }

      // Add all keys into a master list
      if (issuerConfig.usesHttpsJwk()) {
        keysSource = "[" + String.join(", ", issuerConfig.getJwksUrls()) + "]";
        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {
          jsonWebKeys.addAll(hjwks.getJsonWebKeys());
        }
      } else {
        keysSource = "static list of keys in security.json";
        jsonWebKeys.addAll(issuerConfig.getJsonWebKeySet().getJsonWebKeys());
      }

      theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);
      if (theChosenOne == null && issuerConfig.usesHttpsJwk()) {
        if (log.isDebugEnabled()) {
          log.debug("Refreshing JWKs from all {} locations, as no suitable verification key for JWS w/ header {} was found in {}",
              issuerConfig.getHttpsJwks().size(), jws.getHeaders().getFullHeaderAsJsonString(), jsonWebKeys);
        }

        jsonWebKeys.clear();
        for (HttpsJwks hjwks : issuerConfig.getHttpsJwks()) {
          hjwks.refresh();
          jsonWebKeys.addAll(hjwks.getJsonWebKeys());
        }
        theChosenOne = verificationJwkSelector.select(jws, jsonWebKeys);
      }
    } catch (JoseException | IOException | InvalidJwtException | MalformedClaimException e) {
      StringBuilder sb = new StringBuilder();
      sb.append("Unable to find a suitable verification key for JWS w/ header ").append(jws.getHeaders().getFullHeaderAsJsonString());
      sb.append(" due to an unexpected exception (").append(e).append(") while obtaining or using keys from source ");
      sb.append(keysSource);
      throw new UnresolvableKeyException(sb.toString(), e);
    }

    if (theChosenOne == null) {
      StringBuilder sb = new StringBuilder();
      sb.append("Unable to find a suitable verification key for JWS w/ header ").append(jws.getHeaders().getFullHeaderAsJsonString());
      sb.append(" from ").append(jsonWebKeys.size()).append(" keys from source ").append(keysSource);
      throw new UnresolvableKeyException(sb.toString());
    }

    return theChosenOne.getKey();
  }

