  @Override
  public void initializeMetrics(SolrMetricsContext parentContext, final String scope) {
    solrMetricsContext = parentContext.getChildContext(this);
    String className = this.getClass().getSimpleName();
    log.debug("Initializing metrics for {}", className);
    numErrors = solrMetricsContext.meter(this, "errors", getCategory().toString(), scope, className);
    numLost = solrMetricsContext.meter(this, "lost", getCategory().toString(), scope, className);
    numLogged = solrMetricsContext.meter(this, "count", getCategory().toString(), scope, className);
    requestTimes = solrMetricsContext.timer(this, "requestTimes", getCategory().toString(), scope, className);
    totalTime = solrMetricsContext.counter(this, "totalTime", getCategory().toString(), scope, className);
    if (async) {
      solrMetricsContext.gauge(this, () -> blockingQueueSize, true, "queueCapacity", getCategory().toString(), scope, className);
      solrMetricsContext.gauge(this, () -> blockingQueueSize - queue.remainingCapacity(), true, "queueSize", getCategory().toString(), scope, className);
      queuedTime = solrMetricsContext.timer(this, "queuedTime", getCategory().toString(), scope, className);
    }
    solrMetricsContext.gauge(this, () -> async, true, "async", getCategory().toString(), scope, className);
  }

