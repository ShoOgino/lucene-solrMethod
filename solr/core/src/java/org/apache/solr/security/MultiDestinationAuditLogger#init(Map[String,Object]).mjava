  /**
   * Initialize the plugin from security.json
   * @param pluginConfig the config for the plugin
   */
  @Override
  public void init(Map<String, Object> pluginConfig) {
    pluginConfig.put(PARAM_ASYNC, false); // Force the multi plugin to synchronous operation
    super.init(pluginConfig);
    if (!pluginConfig.containsKey(PARAM_PLUGINS)) {
      log.warn("No plugins configured");
    } else {
      @SuppressWarnings("unchecked")
      List<Map<String, Object>> pluginList = (List<Map<String, Object>>) pluginConfig.get(PARAM_PLUGINS);
      pluginList.forEach(pluginConf -> plugins.add(createPlugin(pluginConf)));
      pluginConfig.remove(PARAM_PLUGINS);
      pluginNames = plugins.stream().map(AuditLoggerPlugin::getName).collect(Collectors.toList());
    }
    if (pluginConfig.size() > 0) {
      log.error("Plugin config was not fully consumed. Remaining parameters are {}", pluginConfig);
    }
    if (log.isInfoEnabled()) {
      log.info("Initialized {} audit plugins: {}", plugins.size(), pluginNames);
    }
  }

