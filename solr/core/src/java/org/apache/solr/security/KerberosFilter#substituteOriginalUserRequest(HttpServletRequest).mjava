  /**
   * If principal is an admin user, i.e. has ALL permissions (e.g. request coming from Solr
   * node), and "originalUserPrincipal" is specified, then set originalUserPrincipal
   * as the principal. This is the case in forwarded/remote requests
   * through KerberosPlugin. This is needed because the original node that received
   * this request did not perform any authorization, and hence we are the first ones
   * to authorize the request (and we need the original user principal to do so).
   * @return Substituted request, if applicable, or the original request
   */
  private HttpServletRequest substituteOriginalUserRequest(HttpServletRequest request) {
    final HttpServletRequest originalRequest = request;
    AuthorizationPlugin authzPlugin = coreContainer.getAuthorizationPlugin();
    if (authzPlugin instanceof RuleBasedAuthorizationPlugin) {
      RuleBasedAuthorizationPlugin ruleBased = (RuleBasedAuthorizationPlugin) authzPlugin;
      if (request.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER) != null &&
          ruleBased.doesUserHavePermission(request.getUserPrincipal().getName(), PermissionNameProvider.Name.ALL)) {
        request = new HttpServletRequestWrapper(request) {
          @Override
          public Principal getUserPrincipal() {
            String originalUserPrincipal = originalRequest.getHeader(KerberosPlugin.ORIGINAL_USER_PRINCIPAL_HEADER);
            log.info("Substituting user principal from {} to {}.", originalRequest.getUserPrincipal(), originalUserPrincipal);
            return new Principal() {
              @Override
              public String getName() {
                return originalUserPrincipal;
              }
              @Override
              public String toString() {
                return originalUserPrincipal;
              }
            };
          }
        };
      }
    }
    return request;
  }

