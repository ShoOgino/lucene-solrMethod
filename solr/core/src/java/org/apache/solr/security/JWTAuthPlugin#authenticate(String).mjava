  /**
   * Testable authentication method
   *
   * @param authorizationHeader the http header "Authentication"
   * @return AuthenticationResponse object
   */
  protected JWTAuthenticationResponse authenticate(String authorizationHeader) {
    if (authorizationHeader != null) {
      StringTokenizer st = new StringTokenizer(authorizationHeader);
      if (st.hasMoreTokens()) {
        String bearer = st.nextToken();
        if (bearer.equalsIgnoreCase("Bearer") && st.hasMoreTokens()) {
          try {
            String jwtCompact = st.nextToken();
            try {
              JwtClaims jwtClaims = jwtConsumer.processToClaims(jwtCompact);
              String principal = jwtClaims.getStringClaimValue(principalClaim);
              if (principal == null || principal.isEmpty()) {
                return new JWTAuthenticationResponse(AuthCode.PRINCIPAL_MISSING, "Cannot identify principal from JWT. Required claim " + principalClaim + " missing. Cannot authenticate");
              }
              if (claimsMatchCompiled != null) {
                for (Map.Entry<String, Pattern> entry : claimsMatchCompiled.entrySet()) {
                  String claim = entry.getKey();
                  if (jwtClaims.hasClaim(claim)) {
                    if (!entry.getValue().matcher(jwtClaims.getStringClaimValue(claim)).matches()) {
                      return new JWTAuthenticationResponse(AuthCode.CLAIM_MISMATCH,
                          "Claim " + claim + "=" + jwtClaims.getStringClaimValue(claim)
                              + " does not match required regular expression " + entry.getValue().pattern());
                    }
                  } else {
                    return new JWTAuthenticationResponse(AuthCode.CLAIM_MISMATCH, "Claim " + claim + " is required but does not exist in JWT");
                  }
                }
              }
              if (!requiredScopes.isEmpty() && !jwtClaims.hasClaim(CLAIM_SCOPE)) {
                // Fail if we require scopes but they don't exist
                return new JWTAuthenticationResponse(AuthCode.CLAIM_MISMATCH, "Claim " + CLAIM_SCOPE + " is required but does not exist in JWT");
              }
              Set<String> scopes = Collections.emptySet();
              Object scopesObj = jwtClaims.getClaimValue(CLAIM_SCOPE);
              if (scopesObj != null) {
                if (scopesObj instanceof String) {
                  scopes = new HashSet<>(Arrays.asList(((String) scopesObj).split("\\s+")));
                } else if (scopesObj instanceof List) {
                  scopes = new HashSet<>(jwtClaims.getStringListClaimValue(CLAIM_SCOPE));
                }
                // Validate that at least one of the required scopes are present in the scope claim 
                if (!requiredScopes.isEmpty()) {
                  if (scopes.stream().noneMatch(requiredScopes::contains)) {
                    return new JWTAuthenticationResponse(AuthCode.SCOPE_MISSING, "Claim " + CLAIM_SCOPE + " does not contain any of the required scopes: " + requiredScopes);
                  }
                }
                final Set<String> finalScopes = new HashSet<>(scopes);
                finalScopes.remove("openid"); // Remove standard scope
                // Pass scopes with principal to signal to any Authorization plugins that user has some verified role claims
                return new JWTAuthenticationResponse(AuthCode.AUTHENTICATED, new JWTPrincipalWithUserRoles(principal, jwtCompact, jwtClaims.getClaimsMap(), finalScopes));
              } else {
                return new JWTAuthenticationResponse(AuthCode.AUTHENTICATED, new JWTPrincipal(principal, jwtCompact, jwtClaims.getClaimsMap()));
              }
            } catch (InvalidJwtException e) {
              // Whether or not the JWT has expired being one common reason for invalidity
              if (e.hasExpired()) {
                return new JWTAuthenticationResponse(AuthCode.JWT_EXPIRED, "Authentication failed due to expired JWT token. Expired at " + e.getJwtContext().getJwtClaims().getExpirationTime());
              }
              if (e.getCause() != null && e.getCause() instanceof JoseException && e.getCause().getMessage().contains("Invalid JOSE Compact Serialization")) {
                return new JWTAuthenticationResponse(AuthCode.JWT_PARSE_ERROR, e.getCause().getMessage());
              }
              return new JWTAuthenticationResponse(AuthCode.JWT_VALIDATION_EXCEPTION, e);
            }
          } catch (MalformedClaimException e) {
            return new JWTAuthenticationResponse(AuthCode.JWT_PARSE_ERROR, "Malformed claim, error was: " + e.getMessage());
          }
        } else {
          return new JWTAuthenticationResponse(AuthCode.AUTZ_HEADER_PROBLEM, "Authorization header is not in correct format");
        }
      } else {
        return new JWTAuthenticationResponse(AuthCode.AUTZ_HEADER_PROBLEM, "Authorization header is not in correct format");
      }
    } else {
      // No Authorization header
      if (blockUnknown) {
        return new JWTAuthenticationResponse(AuthCode.NO_AUTZ_HEADER, "Missing Authorization header");
      } else {
        log.debug("No user authenticated, but blockUnknown=false, so letting request through");
        return new JWTAuthenticationResponse(AuthCode.PASS_THROUGH);
      }
    }
  }

