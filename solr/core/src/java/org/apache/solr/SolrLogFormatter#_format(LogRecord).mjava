  public String _format(LogRecord record) {
    String message = record.getMessage();
    
    StringBuilder sb = new StringBuilder(message.length() + 80);
    
    long now = record.getMillis();
    long timeFromStart = now - startTime;
    long timeSinceLast = now - lastTime;
    lastTime = now;
    String shortClassName = getShortClassName(record.getSourceClassName(), record.getSourceMethodName());

/***
    sb.append(timeFromStart).append(' ').append(timeSinceLast);
    sb.append(' ');
    sb.append(record.getSourceClassName()).append('.').append(record.getSourceMethodName());
    sb.append(' ');
    sb.append(record.getLevel());
***/

    SolrRequestInfo requestInfo = SolrRequestInfo.getRequestInfo();
    SolrQueryRequest req = requestInfo == null ? null : requestInfo.getReq();
    SolrCore core = req == null ? null : req.getCore();
    ZkController zkController = null;
    CoreInfo info = null;
    
    if (core != null) {
      info = coreInfoMap.get(core);
      if (info == null) {
        info = new CoreInfo();
        info.shortId = "C"+Integer.toString(CoreInfo.maxCoreNum++);
        coreInfoMap.put(core, info);

        if (sb.length() == 0) sb.append("ASYNC ");
        sb.append(" NEW_CORE "+info.shortId);
        sb.append(" name=" + core.getName());
        sb.append(" " + core);
      }

      if (zkController == null) {
        zkController = core.getCoreDescriptor().getCoreContainer().getZkController();
      }
      if (zkController != null) {
        if (info.url == null) {
          info.url = zkController.getBaseUrl() + "/" + core.getName();
          sb.append(" url="+info.url + " node="+zkController.getNodeName());
        }

        if(info.coreProps == null) {
          info.coreProps = getCoreProps(zkController, core);
        }

        Map<String, String> coreProps = getCoreProps(zkController, core);
        if(!coreProps.equals(info.coreProps)) {
          info.coreProps = coreProps;
          final String corePropsString = "coll:" + core.getCoreDescriptor().getCloudDescriptor().getCollectionName() + " core:" + core.getName() + " props:" + coreProps;
          sb.append(" " + info.shortId + "_STATE=" + corePropsString);
        }
      }
    }


    if (sb.length() > 0) sb.append('\n');
    sb.append(timeFromStart);

//     sb.append("\nL").append(record.getSequenceNumber());     // log number is useful for sequencing when looking at multiple parts of a log file, but ms since start should be fine.
   appendThread(sb, record);


    if (info != null) {
      sb.append(' ').append(info.shortId);                     // core
    }
    if (zkController != null) {
      sb.append(" P").append(zkController.getHostPort());      // todo: should be able to get this from core container for non zk tests
    }

    if (shortClassName.length() > 0) {
      sb.append(' ').append(shortClassName);
    }

    if (record.getLevel() != Level.INFO) {
      sb.append(' ').append(record.getLevel());
    }

    sb.append(' ');
    appendMultiLineString(sb, message);
    Throwable th = record.getThrown();
    if (th != null) {
      sb.append(' ');
      String err = SolrException.toStr(th);
      String ignoredMsg = SolrException.doIgnore(th, err);
      if (ignoredMsg != null) {
        sb.append(ignoredMsg);
      } else {
        sb.append(err);
      }
    }

    sb.append('\n');

    /*** Isn't core specific... prob better logged from zkController
    if (info != null) {
      ClusterState clusterState = zkController.getClusterState();
      if (info.clusterState != clusterState) {
        // something has changed in the matrix...
        sb.append(zkController.getBaseUrl() + " sees new ClusterState:");
      }
    }
    ***/
    
    return sb.toString();
  }

