  protected void init() throws Exception {
    String path = this.path;
    final String fullPath = path = path.substring(7);//strip off '/____v2'
    try {
      pieces = getPathSegments(path);
      if (pieces.size() == 0 || (pieces.size() == 1 && path.endsWith(CommonParams.INTROSPECT))) {
        api = new Api(null) {
          @Override
          public void call(SolrQueryRequest req, SolrQueryResponse rsp) {
            rsp.add("documentation", "https://lucene.apache.org/solr/guide/v2-api.html");
            rsp.add("description", "V2 API root path");
          }
        };
        initAdminRequest(path);
        return;
      } else {
        prefix = pieces.get(0);
      }

      boolean isCompositeApi = false;
      if (knownPrefixes.contains(prefix)) {
        api = getApiInfo(cores.getRequestHandlers(), path, req.getMethod(), fullPath, parts);
        if (api != null) {
          isCompositeApi = api instanceof CompositeApi;
          if (!isCompositeApi) {
            initAdminRequest(path);
            return;
          }
        }
      }

      if ("c".equals(prefix) || "collections".equals(prefix)) {
        String collectionName = origCorename = corename = pieces.get(1);
        DocCollection collection = getDocCollection(collectionName);
        if (collection == null) {
           if ( ! path.endsWith(CommonParams.INTROSPECT)) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "no such collection or alias");
          }
        } else {
          boolean isPreferLeader = false;
          if (path.endsWith("/update") || path.contains("/update/")) {
            isPreferLeader = true;
          }
          core = getCoreByCollection(collection.getName(), isPreferLeader);
          if (core == null) {
            //this collection exists , but this node does not have a replica for that collection
            //todo find a better way to compute remote
            extractRemotePath(corename, origCorename, 0);
            return;
          }
        }
      } else if ("cores".equals(prefix)) {
        origCorename = corename = pieces.get(1);
        core = cores.getCore(corename);
      }
      if (core == null) {
        log.error(">> path: '" + path + "'");
        if (path.endsWith(CommonParams.INTROSPECT)) {
          initAdminRequest(path);
          return;
        } else {
          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, "no core retrieved for " + corename);
        }
      }

      this.path = path = path.substring(prefix.length() + pieces.get(1).length() + 2);
      Api apiInfo = getApiInfo(core.getRequestHandlers(), path, req.getMethod(), fullPath, parts);
      if (isCompositeApi && apiInfo instanceof CompositeApi) {
        ((CompositeApi) this.api).add(apiInfo);
      } else {
        api = apiInfo == null ? api : apiInfo;
      }
      MDCLoggingContext.setCore(core);
      parseRequest();

      if (usingAliases) {
        processAliases(aliases, collectionsList);
      }

      action = PROCESS;
      // we are done with a valid handler
    } catch (RuntimeException rte) {
      log.error("Error in init()", rte);
      throw rte;
    } finally {
      if (api == null) action = PROCESS;
      if (solrReq != null) solrReq.getContext().put(CommonParams.PATH, path);
    }
  }

