    Cmd(String command, Object obj, Method method) {
      if (Modifier.isPublic(method.getModifiers())) {
        this.command = command;
        this.obj = obj;
        this.method = method;
        Class<?>[] parameterTypes = method.getParameterTypes();
        paramsCount = parameterTypes.length;
        if (parameterTypes[0] != SolrQueryRequest.class || parameterTypes[1] != SolrQueryResponse.class) {
          throw new RuntimeException("Invalid params for method " + method);
        }
        if (parameterTypes.length == 3) {
          Type t = method.getGenericParameterTypes()[2];
          if (t instanceof ParameterizedType) {
            ParameterizedType typ = (ParameterizedType) t;
            if (typ.getRawType() == PayloadObj.class) {
              isWrappedInPayloadObj = true;
              Type t1 = typ.getActualTypeArguments()[0];
              if (t1 instanceof ParameterizedType) {
                ParameterizedType parameterizedType = (ParameterizedType) t1;
                c = (Class) parameterizedType.getRawType();
              } else {
                c = (Class) typ.getActualTypeArguments()[0];
              }
            }
          } else {
            c = (Class) t;
          }
        }
        if (parameterTypes.length > 3) {
          throw new RuntimeException("Invalid params count for method " + method);

        }
      } else {
        throw new RuntimeException(method.toString() + " is not a public static method");
      }

    }

