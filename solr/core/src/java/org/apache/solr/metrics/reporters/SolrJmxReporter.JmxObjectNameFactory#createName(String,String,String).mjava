    /**
     * Create a hierarchical name of a metric.
     *
     * @param type    metric class, eg. "counters"
     * @param currentDomain  JMX domain
     * @param name    metric name
     */
    @Override
    public ObjectName createName(String type, String currentDomain, String name) {
      SolrMetricInfo metricInfo = SolrMetricInfo.of(name);

      // It turns out that ObjectName(String) mostly preserves key ordering
      // as specified in the constructor (except for the 'type' key that ends
      // up at top level) - unlike ObjectName(String, Map) constructor
      // that seems to have a mind of its own...
      StringBuilder sb = new StringBuilder();
      if (domain.equals(currentDomain)) {
        if (subdomains != null && subdomains.length > 1) {
          // use only first segment as domain
          sb.append(subdomains[0]);
          sb.append(':');
          // use remaining segments as properties
          for (int i = 1; i < subdomains.length; i++) {
            if (i > 1) {
              sb.append(',');
            }
            sb.append("dom");
            sb.append(String.valueOf(i));
            sb.append('=');
            sb.append(subdomains[i]);
          }
          sb.append(','); // separate from other properties
        } else {
          sb.append(currentDomain);
          sb.append(':');
        }
      } else {
        sb.append(currentDomain);
        sb.append(':');
      }
      sb.append("reporter=");
      sb.append(reporterName);
      sb.append(',');
      if (metricInfo != null) {
        sb.append("category=");
        sb.append(metricInfo.category.toString());
        sb.append(",scope=");
        sb.append(metricInfo.scope);
        // we could also split by type, but don't call it 'type' :)
        // sb.append(",class=");
        //sb.append(type);
        sb.append(",name=");
        sb.append(metricInfo.name);
      } else {
        // make dotted names into hierarchies
        String[] path = name.split("\\.");
        for (int i = 0; i < path.length - 1; i++) {
          if (i > 0) {
            sb.append(',');
          }
          sb.append("name"); sb.append(String.valueOf(i));
          sb.append('=');
          sb.append(path[i]);
        }
        if (path.length > 1) {
          sb.append(',');
        }
        // split by type
        // sb.append("class=");
        // sb.append(type);
        sb.append("name=");
        sb.append(path[path.length - 1]);
      }

      ObjectName objectName;

      try {
        objectName = new ObjectName(sb.toString());
      } catch (MalformedObjectNameException e) {
        throw new RuntimeException(sb.toString(), e);
      }

      return objectName;
    }

