  public void init(PluginInfo pluginInfo, SolrCore core) {
    super.init(pluginInfo);
    if (reporter != null) {
      reporter.close();
    }
    if (!enabled) {
      log.info("Reporter disabled for registry " + registryName);
      return;
    }
    if (core.getCoreDescriptor().getCloudDescriptor() == null) {
      // not a cloud core
      log.warn("Not initializing shard reporter for non-cloud core " + core.getName());
      return;
    }
    if (period < 1) { // don't start it
      log.warn("period=" + period + ", not starting shard reporter ");
      return;
    }
    // our id is coreNodeName
    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();
    // target registry is the leaderRegistryName
    String groupId = core.getCoreMetricManager().getLeaderRegistryName();
    if (groupId == null) {
      log.warn("No leaderRegistryName for core " + core + ", not starting the reporter...");
      return;
    }
    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);
    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))
        .convertRatesTo(TimeUnit.SECONDS)
        .convertDurationsTo(TimeUnit.MILLISECONDS)
        .withHandler(handler)
        .withReporterId(id)
        .setCompact(true)
        .cloudClient(false) // we want to send reports specifically to a selected leader instance
        .skipAggregateValues(true) // we don't want to transport details of aggregates
        .skipHistograms(true) // we don't want to transport histograms
        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));

    reporter.start(period, TimeUnit.SECONDS);
  }

