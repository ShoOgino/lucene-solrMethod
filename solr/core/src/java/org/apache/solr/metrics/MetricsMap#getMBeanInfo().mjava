  @Override
  public MBeanInfo getMBeanInfo() {
    ArrayList<MBeanAttributeInfo> attrInfoList = new ArrayList<>();
    Map<String,Object> stats = getValue(true);
    if (useCachedStatsBetweenGetMBeanInfoCalls) {
      cachedValue = stats;
    }
    if (jmxAttributes != null) {
      jmxAttributes.forEach((k, v) -> {
        attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),
            null, true, false, false));
      });
    }
    try {
      stats.forEach((k, v) -> {
        if (jmxAttributes != null && jmxAttributes.containsKey(k)) {
          return;
        }
        @SuppressWarnings({"rawtypes"})
        Class type = v.getClass();
        @SuppressWarnings({"rawtypes"})
        OpenType typeBox = determineType(type);
        if (type.equals(String.class) || typeBox == null) {
          attrInfoList.add(new MBeanAttributeInfo(k, String.class.getName(),
              null, true, false, false));
        } else {
          attrInfoList.add(new OpenMBeanAttributeInfoSupport(
              k, k, typeBox, true, false, false));
        }
      });
    } catch (Exception e) {
      // don't log issue if the core is closing
      if (!(SolrException.getRootCause(e) instanceof AlreadyClosedException))
        log.warn("Could not get attributes of MetricsMap: {}", this, e);
    }
    MBeanAttributeInfo[] attrInfoArr = attrInfoList
        .toArray(new MBeanAttributeInfo[attrInfoList.size()]);
    return new MBeanInfo(getClass().getName(), "MetricsMap", attrInfoArr, null, null, null);
  }

