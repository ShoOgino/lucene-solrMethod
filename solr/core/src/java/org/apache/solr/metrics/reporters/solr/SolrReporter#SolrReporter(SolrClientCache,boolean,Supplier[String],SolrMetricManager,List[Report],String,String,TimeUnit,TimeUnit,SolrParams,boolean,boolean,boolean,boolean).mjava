  /**
   * Create a SolrReporter instance.
   * @param solrClientCache client cache to use for constructing SolrClient instances.
   * @param urlProvider what URL to send to.
   * @param metricManager metric manager
   * @param metrics metric specifications to report
   * @param handler handler name to report to
   * @param reporterId my reporter id
   * @param rateUnit rate unit
   * @param durationUnit duration unit
   * @param params request parameters
   * @param skipHistograms if true then don't send histogram metrics
   * @param skipAggregateValues if true then don't send aggregate metrics' individual values
   * @param cloudClient if true then use CloudSolrClient, plain HttpSolrClient otherwise.
   * @param compact if true then use compact representation.
   */
  public SolrReporter(SolrClientCache solrClientCache, boolean closeClientCache,
                      Supplier<String> urlProvider, SolrMetricManager metricManager,
                      List<Report> metrics, String handler,
                      String reporterId, TimeUnit rateUnit, TimeUnit durationUnit,
                      SolrParams params, boolean skipHistograms, boolean skipAggregateValues,
                      boolean cloudClient, boolean compact) {
    super(dummyRegistry, "solr-reporter", MetricFilter.ALL, rateUnit, durationUnit, null, true);

    this.metricManager = metricManager;
    this.urlProvider = urlProvider;
    this.reporterId = reporterId;
    if (handler == null) {
      handler = MetricsCollectorHandler.HANDLER_PATH;
    }
    this.handler = handler;
    this.clientCache = solrClientCache;
    this.closeClientCache = closeClientCache;
    this.compiledReports = new ArrayList<>();
    metrics.forEach(report -> {
      MetricFilter filter = new SolrMetricManager.RegexFilter(report.metricFilters);
      try {
        CompiledReport cs = new CompiledReport(report);
        compiledReports.add(cs);
      } catch (PatternSyntaxException e) {
        log.warn("Skipping report with invalid registryPattern: {}", report.registryPattern, e);
      }
    });
    this.skipHistograms = skipHistograms;
    this.skipAggregateValues = skipAggregateValues;
    this.cloudClient = cloudClient;
    this.compact = compact;
    this.params = new ModifiableSolrParams();
    this.params.set(REPORTER_ID, reporterId);
    // allow overrides to take precedence
    if (params != null) {
      this.params.add(params);
    }
    metadata = new HashMap<>();
    metadata.put(REPORTER_ID, reporterId);
  }

