  /**
   * Create and register an instance of {@link SolrMetricReporter}.
   * @param registry reporter is associated with this registry
   * @param loader loader to use when creating an instance of the reporter
   * @param pluginInfo plugin configuration. Plugin "name" and "class" attributes are required.
   * @throws Exception if any argument is missing or invalid
   */
  public void loadReporter(String registry, SolrResourceLoader loader, PluginInfo pluginInfo) throws Exception {
    if (registry == null || pluginInfo == null || pluginInfo.name == null || pluginInfo.className == null) {
      throw new IllegalArgumentException("loadReporter called with missing arguments: " +
          "registry=" + registry + ", loader=" + loader + ", pluginInfo=" + pluginInfo);
    }
    // make sure we use a name with prefix, with overrides
    registry = overridableRegistryName(registry);
    SolrMetricReporter reporter = loader.newInstance(
        pluginInfo.className,
        SolrMetricReporter.class,
        new String[0],
        new Class[] { SolrMetricManager.class, String.class },
        new Object[] { this, registry }
    );
    try {
      reporter.init(pluginInfo);
    } catch (IllegalStateException e) {
      throw new IllegalArgumentException("reporter init failed: " + pluginInfo, e);
    }
    try {
      if (!reportersLock.tryLock(10, TimeUnit.SECONDS)) {
        throw new Exception("Could not obtain lock to modify reporters registry: " + registry);
      }
    } catch (InterruptedException e) {
      throw new Exception("Interrupted while trying to obtain lock to modify reporters registry: " + registry);
    }
    try {
      Map<String, SolrMetricReporter> perRegistry = reporters.get(registry);
      if (perRegistry == null) {
        perRegistry = new HashMap<>();
        reporters.put(registry, perRegistry);
      }
      SolrMetricReporter oldReporter = perRegistry.get(pluginInfo.name);
      if (oldReporter != null) { // close it
        log.info("Replacing existing reporter '" + pluginInfo.name + "' in registry '" + registry + "': " + oldReporter.toString());
        oldReporter.close();
      }
      perRegistry.put(pluginInfo.name, reporter);

    } finally {
      reportersLock.unlock();
    }
  }

