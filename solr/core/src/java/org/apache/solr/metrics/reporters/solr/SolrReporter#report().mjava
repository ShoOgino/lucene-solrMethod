  @Override
  public void report() {
    String url = urlProvider.get();
    // if null then suppress reporting
    if (url == null) {
      return;
    }

    SolrClient solr;
    if (cloudClient) {
      solr = clientCache.getCloudSolrClient(url);
    } else {
      solr = clientCache.getHttpSolrClient(url);
    }
    UpdateRequest req = new UpdateRequest(handler);
    req.setParams(params);
    compiledReports.forEach(report -> {
      Set<String> registryNames = metricManager.registryNames(report.registryPattern);
      registryNames.forEach(registryName -> {
        String label = report.label;
        if (label != null && label.indexOf('$') != -1) {
          // label with back-references
          Matcher m = report.registryPattern.matcher(registryName);
          label = m.replaceFirst(label);
        }
        final String effectiveLabel = label;
        String group = report.group;
        if (group.indexOf('$') != -1) {
          // group with back-references
          Matcher m = report.registryPattern.matcher(registryName);
          group = m.replaceFirst(group);
        }
        final String effectiveGroup = group;
        MetricUtils.toSolrInputDocuments(metricManager.registry(registryName), Collections.singletonList(report.filter), MetricFilter.ALL,
            MetricUtils.PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, metadata, doc -> {
              doc.setField(REGISTRY_ID, registryName);
              doc.setField(GROUP_ID, effectiveGroup);
              if (effectiveLabel != null) {
                doc.setField(LABEL_ID, effectiveLabel);
              }
              req.add(doc);
            });
      });
    });

    // if no docs added then don't send a report
    if (req.getDocuments() == null || req.getDocuments().isEmpty()) {
      return;
    }
    try {
      //log.info("%%% sending to " + url + ": " + req.getParams());
      solr.request(req);
    } catch (Exception e) {
      if (log.isDebugEnabled()) {
        log.debug("Error sending metric report: {}", e);
      }
    }

  }

