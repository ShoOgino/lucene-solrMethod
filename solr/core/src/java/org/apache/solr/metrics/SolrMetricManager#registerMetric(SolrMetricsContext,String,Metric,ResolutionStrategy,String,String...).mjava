  /**
   * Register an instance of {@link Metric}.
   *
   * @param registry   registry name
   * @param metric     metric instance
   * @param strategy   the conflict resolution strategy to use if the named metric already exists.
   * @param metricName metric name, either final name or a fully-qualified name
   *                   using dotted notation
   * @param metricPath (optional) additional top-most metric name path elements
   */
  public void registerMetric(SolrMetricsContext context, String registry, Metric metric, ResolutionStrategy strategy, String metricName, String... metricPath) {
    MetricRegistry metricRegistry = registry(registry);
    String fullName = mkName(metricName, metricPath);
    if (context != null) {
      context.registerMetricName(fullName);
    }
    synchronized (metricRegistry) { // prevent race; register() throws if metric is already present
      if (strategy == ResolutionStrategy.REPLACE) { // must remove any existing one if present
        metricRegistry.remove(fullName);
      } else if (strategy == ResolutionStrategy.IGNORE && metricRegistry.getMetrics().containsKey(fullName)) {
        return;
      } // strategy == ERROR will fail when we try to register
      metricRegistry.register(fullName, metric);
    }
  }

