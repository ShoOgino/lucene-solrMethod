    static List<String> dimensionCollectionListView(int index, Aliases aliases, Deffered<DimensionalRoutedAlias> dra, String[] context, boolean ordered) {
      List<String> cols = aliases.getCollectionAliasListMap().get(dra.get().name);
      LinkedHashSet<String> view = new LinkedHashSet<>(cols.size());
      List<RoutedAlias> dimensions = dra.get().dimensions;
      for (String col : cols) {
        Matcher m = SEP_MATCHER.matcher(col);
        if (!m.find()) {
          throw new IllegalStateException("Invalid Dimensional Routed Alias name:" + col);
        }
        String[] split = SEP_MATCHER.split(col);
        if (split.length != dimensions.size() + 1) {
          throw new IllegalStateException("Dimension Routed Alias collection with wrong number of dimensions. (" +
              col + ") expecting " + dimensions.stream().map(d ->
              d.getRoutedAliasType().toString()).collect(Collectors.toList()));
        }
        boolean matchesAllHigherDims = index == 0;
        boolean matchesAllLowerDims =  context == null || index == context.length - 1;
        if (context != null) {
          for (int i = 0; i < context.length; i++) {
            if (i == index) {
              continue;
            }
            String s = split[i+1];
            String ctx = context[i];
            if (i <= index) {
              matchesAllHigherDims |= s.equals(ctx);
            } else {
              matchesAllLowerDims |= s.equals(ctx);
            }
          }
        } else {
          matchesAllHigherDims = true;
          matchesAllLowerDims = true;
        }
        // dimensions with an implicit order need to start from their initial configuration
        // and count up to maintain order in the alias collection list with respect to that dimension
        if (matchesAllHigherDims && !ordered || matchesAllHigherDims && matchesAllLowerDims) {
          view.add("" + getSeparatorPrefix(dimensions.get(index)) + split[index + 1]);
        }
      }
      return new ArrayList<>(view);
    }

