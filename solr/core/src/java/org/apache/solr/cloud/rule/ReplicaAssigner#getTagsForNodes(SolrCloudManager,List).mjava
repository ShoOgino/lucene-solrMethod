  /**
   * This method uses the snitches and get the tags for all the nodes
   */
  @SuppressWarnings({"unchecked"})
  private Map<String, Map<String, Object>> getTagsForNodes(final SolrCloudManager cloudManager, @SuppressWarnings({"rawtypes"})List snitchConf) {

    @SuppressWarnings({"rawtypes"})
    Map<Class, SnitchInfoImpl> snitches = getSnitchInfos(cloudManager, snitchConf);
    for (@SuppressWarnings({"rawtypes"})Class c : Snitch.WELL_KNOWN_SNITCHES) {
      if (snitches.containsKey(c)) continue;// it is already specified explicitly , ignore
      try {
        snitches.put(c, new SnitchInfoImpl(Collections.EMPTY_MAP, (Snitch) c.getConstructor().newInstance(), cloudManager));
      } catch (Exception e) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Error instantiating Snitch " + c.getName());
      }
    }
    for (String tagName : tagNames) {
      //identify which snitch is going to provide values for a given tag
      boolean foundProvider = false;
      for (SnitchInfoImpl info : snitches.values()) {
        if (info.snitch.isKnownTag(tagName)) {
          foundProvider = true;
          info.myTags.add(tagName);
          break;
        }
      }
      if (!foundProvider)
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Unknown tag in rules " + tagName);
    }


    for (String node : participatingLiveNodes) {
      //now use the Snitch to get the tags
      for (SnitchInfoImpl info : snitches.values()) {
        if (!info.myTags.isEmpty()) {
          SnitchContext context = getSnitchCtx(node, info, cloudManager);
          info.nodeVsContext.put(node, context);
          try {
            info.snitch.getTags(node, info.myTags, context);
          } catch (Exception e) {
            context.exception = e;
          }
        }
      }
    }

    Map<String, Map<String, Object>> result = new HashMap<>();
    for (SnitchInfoImpl info : snitches.values()) {
      for (Map.Entry<String, SnitchContext> e : info.nodeVsContext.entrySet()) {
        SnitchContext context = e.getValue();
        String node = e.getKey();
        if (context.exception != null) {
          failedNodes.put(node, context);
          participatingLiveNodes.remove(node);
          log.warn("Not all tags were obtained from node {}", node, context.exception);
          context.exception = new SolrException(SolrException.ErrorCode.SERVER_ERROR,
              "Not all tags were obtained from node " + node);
        } else {
          Map<String, Object> tags = result.get(node);
          if (tags == null) {
            tags = new HashMap<>();
            result.put(node, tags);
          }
          tags.putAll(context.getTags());
        }
      }
    }

    if (participatingLiveNodes.isEmpty()) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Could not get all tags for any nodes");

    }
    return result;

  }

