  private boolean createCollection(CloudState cloudState, ZkNodeProps message) {
    
    // look at the replication factor and see if it matches reality
    // if it does not, find best nodes to create more cores
    
    String numReplicasString = message.get("numReplicas");
    int numReplicas;
    try {
      numReplicas = numReplicasString == null ? 0 : Integer.parseInt(numReplicasString);
    } catch (Exception ex) {
      SolrException.log(log, "Could not parse numReplicas", ex);
      return false;
    }
    String numShardsString = message.get("numShards");
    int numShards;
    try {
      numShards = numShardsString == null ? 0 : Integer.parseInt(numShardsString);
    } catch (Exception ex) {
      SolrException.log(log, "Could not parse numShards", ex);
      return false;
    }
    
    String name = message.get("name");
    String configName = message.get("collection.configName");
    
    // we need to look at every node and see how many cores it serves
    // add our new cores to existing nodes serving the least number of cores
    // but (for now) require that each core goes on a distinct node.
    
    ModifiableSolrParams params = new ModifiableSolrParams();
    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());
    
    
    // TODO: add smarter options that look at the current number of cores per node?
    // for now we just go random
    Set<String> nodes = cloudState.getLiveNodes();
    List<String> nodeList = new ArrayList<String>(nodes.size());
    nodeList.addAll(nodes);
    Collections.shuffle(nodeList);
    
    int numNodes = numShards * (numReplicas + 1);
    List<String> createOnNodes = nodeList.subList(0, Math.min(nodeList.size(), numNodes));
    
    log.info("Create collection " + name + " on " + createOnNodes);
    
    for (String replica : createOnNodes) {
      // TODO: this does not work if original url had _ in it
      // We should have a master list
      replica = replica.replaceAll("_", "/");
      params.set(CoreAdminParams.NAME, name);
      params.set("collection.configName", configName);
      params.set("numShards", numShards);
      ShardRequest sreq = new ShardRequest();
      params.set("qt", adminPath);
      sreq.purpose = 1;
      // TODO: this sucks
      if (replica.startsWith("http://")) replica = replica.substring(7);
      sreq.shards = new String[] {replica};
      sreq.actualShards = sreq.shards;
      sreq.params = params;
      
      shardHandler.submit(sreq, replica, sreq.params);
    }
    
    int failed = 0;
    ShardResponse srsp;
    do {
      srsp = shardHandler.takeCompletedOrError();
      if (srsp != null) {
        Throwable e = srsp.getException();
        if (e != null) {
          // should we retry?
          // TODO: we should return errors to the client
          // TODO: what if one fails and others succeed?
          failed++;
          log.error("Error talking to shard: " + srsp.getShard(), e);
        }
      }
    } while (srsp != null);

    
    // if all calls succeeded, return true
    if (failed > 0) {
      return false;
    }
    return true;
  }

