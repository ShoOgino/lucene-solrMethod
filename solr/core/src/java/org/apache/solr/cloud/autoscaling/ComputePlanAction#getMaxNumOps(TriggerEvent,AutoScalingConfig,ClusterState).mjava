  protected int getMaxNumOps(TriggerEvent event, AutoScalingConfig autoScalingConfig, ClusterState clusterState) {
    // estimate a maximum default limit that should be sufficient for most purposes:
    // number of nodes * total number of replicas * 3
    AtomicInteger totalRF = new AtomicInteger();
    clusterState.forEachCollection(coll -> {
      Integer rf = coll.getReplicationFactor();
      if (rf == null) {
        rf = coll.getReplicas().size() / coll.getSlices().size();
      }
      totalRF.addAndGet(rf * coll.getSlices().size());
    });
    int totalMax = clusterState.getLiveNodes().size() * totalRF.get() * 3;
    int maxOp = (Integer) autoScalingConfig.getProperties().getOrDefault(AutoScalingParams.MAX_COMPUTE_OPERATIONS, totalMax);
    Object o = event.getProperty(AutoScalingParams.MAX_COMPUTE_OPERATIONS, maxOp);
    try {
      return Integer.parseInt(String.valueOf(o));
    } catch (Exception e) {
      log.warn("Invalid '" + AutoScalingParams.MAX_COMPUTE_OPERATIONS + "' event property: " + o + ", using default " + maxOp);
      return maxOp;
    }
  }

