  @Override
  public void run() {
    AutoScaling.TriggerEventProcessor processor = processorRef.get();
    if (processor == null) {
      return;
    }

    Map<String, Map<String, List<ReplicaInfo>>> collectionRates = new HashMap<>();
    Map<String, AtomicDouble> nodeRates = new HashMap<>();

    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()
        .withClusterStateProvider(new ZkClientClusterStateProvider(container.getZkController().getZkStateReader()))
        .build()) {

      SolrClientDataProvider dataProvider = new SolrClientDataProvider(cloudSolrClient);

      for (String node : dataProvider.getNodes()) {
        Map<String, ReplicaInfo> metricTags = new HashMap<>();
        // coll, shard, replica
        Map<String, Map<String, List<ReplicaInfo>>> infos = dataProvider.getReplicaInfo(node, Collections.emptyList());
        infos.forEach((coll, shards) -> {
          shards.forEach((sh, replicas) -> {
            replicas.forEach(replica -> {
              // we have to translate to the metrics registry name, which uses "_replica_nN" as suffix
              String replicaName = SolrCoreMetricManager.parseReplicaName(coll, replica.getCore());
              if (replicaName == null) { // should never happen???
                replicaName = replica.getName(); // which is actually coreNode name...
              }
              String registry = SolrCoreMetricManager.createRegistryName(true, coll, sh, replicaName, null);
              String tag = "metrics:" + registry
                  + ":QUERY." + handler + ".requestTimes:1minRate";
              metricTags.put(tag, replica);
            });
          });
        });
        Map<String, Object> rates = dataProvider.getNodeValues(node, metricTags.keySet());
        rates.forEach((tag, rate) -> {
          ReplicaInfo info = metricTags.get(tag);
          if (info == null) {
            log.warn("Missing replica info for response tag " + tag);
          } else {
            Map<String, List<ReplicaInfo>> perCollection = collectionRates.computeIfAbsent(info.getCollection(), s -> new HashMap<>());
            List<ReplicaInfo> perShard = perCollection.computeIfAbsent(info.getShard(), s -> new ArrayList<>());
            info.getVariables().put(AutoScalingParams.RATE, rate);
            perShard.add(info);
            AtomicDouble perNode = nodeRates.computeIfAbsent(node, s -> new AtomicDouble());
            perNode.addAndGet((Double)rate);
          }
        });
      }
    } catch (IOException e) {
      log.warn("Exception getting node values", e);
      return;
    }

    long now = timeSource.getTime();
    // check for exceeded rates and filter out those with less than waitFor from previous events
    Map<String, Double> hotNodes = nodeRates.entrySet().stream()
        .filter(entry -> node.equals(Policy.ANY) || node.equals(entry.getKey()))
        .filter(entry -> waitForElapsed(entry.getKey(), now, lastNodeEvent))
        .filter(entry -> entry.getValue().get() > rate)
        .collect(Collectors.toMap(entry -> entry.getKey(), entry -> entry.getValue().get()));

    Map<String, Map<String, Double>> hotShards = new HashMap<>();
    Map<String, String> warmShards = new HashMap<>();
    List<ReplicaInfo> hotReplicas = new ArrayList<>();
    collectionRates.forEach((coll, shardRates) -> {
      final Object[] warmShard = new Object[2];
      shardRates.forEach((sh, replicaRates) -> {
        double shardRate = replicaRates.stream()
            .map(r -> {
              if (waitForElapsed(r.getCollection() + "." + r.getCore(), now, lastReplicaEvent) &&
                  ((Double)r.getVariable(AutoScalingParams.RATE) > rate)) {
                hotReplicas.add(r);
              }
              return r;
            })
            .mapToDouble(r -> (Double)r.getVariable(AutoScalingParams.RATE)).sum();
        if (warmShard[0] == null) {
          warmShard[0] = sh;
          warmShard[1] = shardRate;
        }
        if (shardRate > (double)warmShard[1]) {
          warmShard[0] = sh;
          warmShard[1] = shardRate;
        }
        if (waitForElapsed(coll + "." + sh, now, lastShardEvent) &&
            (shardRate > rate) &&
            (collection.equals(Policy.ANY) || collection.equals(coll)) &&
            (shard.equals(Policy.ANY) || shard.equals(sh))) {
          hotShards.computeIfAbsent(coll, s -> new HashMap<>()).put(sh, shardRate);
        }
      });
      warmShards.put(coll, (String)warmShard[0]);
    });

    Map<String, Double> hotCollections = new HashMap<>();
    collectionRates.forEach((coll, shRates) -> {
      double total = shRates.entrySet().stream()
          .mapToDouble(e -> e.getValue().stream()
              .mapToDouble(r -> (Double)r.getVariable(AutoScalingParams.RATE)).sum()).sum();
      if (waitForElapsed(coll, now, lastCollectionEvent) &&
          (total > rate) &&
          (collection.equals(Policy.ANY) || collection.equals(coll))) {
        hotCollections.put(coll, total);
      }
    });

    if (hotCollections.isEmpty() && hotShards.isEmpty() && hotReplicas.isEmpty() && hotNodes.isEmpty()) {
      return;
    }

    // generate event

    if (processor.process(new SearchRateEvent(getName(), now, hotNodes, hotCollections, hotShards, hotReplicas, warmShards))) {
      // update lastEvent times
      hotNodes.keySet().forEach(node -> lastNodeEvent.put(node, now));
      hotCollections.keySet().forEach(coll -> lastCollectionEvent.put(coll, now));
      hotShards.entrySet().forEach(e -> e.getValue()
          .forEach((sh, rate) -> lastShardEvent.put(e.getKey() + "." + sh, now)));
      hotReplicas.forEach(r -> lastReplicaEvent.put(r.getCollection() + "." + r.getCore(), now));
    }
  }

