  @Override
  public void call(ClusterState state, ZkNodeProps message, NamedList results)
      throws Exception {
    final String aliasName = message.getStr(CommonParams.NAME);
    ZkStateReader zkStateReader = ocmh.zkStateReader;
    ZkStateReader.AliasesManager holder = zkStateReader.aliasesHolder;

    //TODO refactor callCreatePlainAlias
    if (!anyRoutingParams(message)) {

      final List<String> canonicalCollectionList = parseCollectionsParameter(message.get("collections"));
      final String canonicalCollectionsString = StrUtils.join(canonicalCollectionList, ',');
      validateAllCollectionsExistAndNoDups(canonicalCollectionList, zkStateReader);
      holder.applyModificationAndExportToZk(aliases -> aliases.cloneWithCollectionAlias(aliasName, canonicalCollectionsString));

    } else { //TODO refactor callCreateRoutedAlias

      // Validate we got everything we need
      if (!message.getProperties().keySet().containsAll(REQUIRED_ROUTER_PARAMS)) {
        throw new SolrException(BAD_REQUEST, "A routed alias requires these params: " + REQUIRED_ROUTER_PARAMS
        + " plus some create-collection prefixed ones.");
      }

      Map<String, String> aliasMetadata = new LinkedHashMap<>();
      message.getProperties().entrySet().stream()
          .filter(entry -> PARAM_IS_METADATA.test(entry.getKey()))
          .forEach(entry -> aliasMetadata.put(entry.getKey(), (String) entry.getValue()));

      //TODO read these from metadata where appropriate. This leads to consistent logic between initial routed alias
      //  collection creation, and subsequent collections to be created.

      final String routingType = message.getStr(ROUTER_TYPE);
      final String tz = message.getStr(TZ);
      final String start = message.getStr(ROUTER_START);
      final String increment = message.getStr(ROUTER_INCREMENT);
      final String maxFutureMs = message.getStr(ROUTER_MAX_FUTURE);

      try {
        if (maxFutureMs != null && 0 > Long.parseLong(maxFutureMs)) {
          throw new NumberFormatException("Negative value not allowed here");
        }
      } catch (NumberFormatException e) {
        throw new SolrException(BAD_REQUEST, ROUTER_MAX_FUTURE + " must be a valid long integer representing a number " +
            "of milliseconds greater than or equal to zero");
      }

      if (!"time".equals(routingType)) {
        throw new SolrException(BAD_REQUEST, "Only time based routing is supported at this time");
      }

      // Check for invalid timezone
      TimeZone zone = TimeZoneUtils.parseTimezone(tz);

      // check that the increment is valid date math
      try {
        new DateMathParser(zone).parseMath(increment);
      } catch (ParseException e) {
        throw new SolrException(BAD_REQUEST,e.getMessage(),e);
      }

      Instant startTime = parseStart(start, zone);

      // It's too much work to check the routed field against the schema, there seems to be no good way to get
      // a copy of the schema aside from loading it directly from zookeeper based on the config name, but that
      // also requires I load solrconfig.xml to check what the value for managedSchemaResourceName is too, (or
      // discover that managed schema is not turned on and read schema.xml instead... and check for dynamic
      // field patterns too. As much as it would be nice to validate all inputs it's not worth the effort.

      String initialCollectionName = TimeRoutedAliasUpdateProcessor
          .formatCollectionNameFromInstant(aliasName, startTime);

      // Create the collection
      NamedList createResults = new NamedList();
      RoutedAliasCreateCollectionCmd.createCollectionAndWait(state, createResults, aliasName, aliasMetadata, initialCollectionName, ocmh);
      validateAllCollectionsExistAndNoDups(Collections.singletonList(initialCollectionName), zkStateReader);

      // Create/update the alias
      holder.applyModificationAndExportToZk(aliases -> aliases
          .cloneWithCollectionAlias(aliasName, initialCollectionName)
          .cloneWithCollectionAliasMetadata(aliasName, aliasMetadata));
    }

    // Sleep a bit to allow ZooKeeper state propagation.
    //
    // THIS IS A KLUDGE.
    //
    // Solr's view of the cluster is eventually consistent. *Eventually* all nodes and CloudSolrClients will be aware of
    // alias changes, but not immediately. If a newly created alias is queried, things should work right away since Solr
    // will attempt to see if it needs to get the latest aliases when it can't otherwise resolve the name.  However
    // modifications to an alias will take some time.
    //
    // We could levy this requirement on the client but they would probably always add an obligatory sleep, which is
    // just kicking the can down the road.  Perhaps ideally at this juncture here we could somehow wait until all
    // Solr nodes in the cluster have the latest aliases?
    Thread.sleep(100);
  }

