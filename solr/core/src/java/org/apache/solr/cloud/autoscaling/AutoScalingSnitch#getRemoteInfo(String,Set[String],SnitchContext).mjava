  @Override
  protected void getRemoteInfo(String solrNode, Set<String> requestedTags, SnitchContext ctx) {
    ServerSnitchContext snitchContext = (ServerSnitchContext) ctx;
    List<String> groups = new ArrayList<>();
    List<String> prefixes = new ArrayList<>();
    if (requestedTags.contains(DISK)) {
      groups.add("solr.node");
      prefixes.add("CONTAINER.fs.usableSpace");
    }
    if (requestedTags.contains(CORES)) {
      groups.add("solr.core");
      prefixes.add("CORE.coreName");
    }
    if(groups.isEmpty() || prefixes.isEmpty()) return;

    ModifiableSolrParams params = new ModifiableSolrParams();
    params.add("group", StrUtils.join(groups, ','));
    params.add("prefix", StrUtils.join(prefixes,','));

    try {
      SimpleSolrResponse rsp = snitchContext.invoke(solrNode, CommonParams.METRICS_PATH, params);
      Map m = rsp.nl.asMap(4);
      if(requestedTags.contains(DISK)){
        Number n = (Number) Utils.getObjectByPath(m,true, "metrics/solr.node/CONTAINER.fs.usableSpace");
        if(n != null) ctx.getTags().put(DISK, n.longValue());
      }
      if(requestedTags.contains(CORES)){
        int count = 0;
        Map cores  = (Map) m.get("metrics");
        for (Object o : cores.keySet()) {
          if(o.toString().startsWith("solr.core.")) count++;
        }
        ctx.getTags().put(CORES, count);
      }

    } catch (Exception e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "", e);
    }

  }

