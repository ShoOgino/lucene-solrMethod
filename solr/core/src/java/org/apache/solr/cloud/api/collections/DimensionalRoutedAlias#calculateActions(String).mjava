  /**
   * Determine the combination of adds/deletes implied by the arrival of a document destined for the
   * specified collection.
   *
   * @param targetCol the collection for which a document is destined.
   * @return A list of actions across the DRA.
   */
  @Override
  protected List<Action> calculateActions(String targetCol) {
    String[] routeValues = SEP_MATCHER.split(targetCol);
    // remove the alias name to avoid all manner of off by one errors...
    routeValues = Arrays.copyOfRange(routeValues,1,routeValues.length);
    List<List<Action>> dimActs = new ArrayList<>(routeValues.length);
    contextualizeDimensions(routeValues);
    for (int i = 0; i < routeValues.length; i++) {
      String routeValue = routeValues[i];
      RoutedAlias dim = dimensions.get(i);
      dimActs.add(dim.calculateActions(dim.getAliasName() + getSeparatorPrefix(dim)+ routeValue) );
    }
    Set <Action> result = new LinkedHashSet<>();
    StringBuilder currentSuffix = new StringBuilder();
    for (int i = routeValues.length -1; i >=0 ; i--) { // also lowest up to match
      String routeValue = routeValues[i];
      RoutedAlias dim = dimensions.get(i);
      String dimStr = dim.getRoutedAliasType().getSeparatorPrefix() + routeValue;
      List<Action> actions = dimActs.get(i);
      for (Iterator<Action> iterator = actions.iterator(); iterator.hasNext(); ) {
        Action action = iterator.next();
        iterator.remove();
        result.add(new Action(action.sourceAlias, action.actionType, action.targetCollection + currentSuffix));
      }
      result.addAll(actions);
      Set <Action> revisedResult = new LinkedHashSet<>();

      for (Action action : result) {
        if (action.sourceAlias == dim) {
          revisedResult.add(action); // should already have the present value
          continue;
        }
        // the rest are from lower dimensions and thus require a prefix.
        revisedResult.add(new Action(action.sourceAlias, action.actionType,dimStr + action.targetCollection));
      }
      result = revisedResult;
      currentSuffix.append(dimStr);
    }
    Set <Action> revisedResult = new LinkedHashSet<>();
    for (Action action : result) {
      revisedResult.add(new Action(action.sourceAlias, action.actionType,getAliasName() + action.targetCollection));
    }
    return new ArrayList<>(revisedResult);
  }

