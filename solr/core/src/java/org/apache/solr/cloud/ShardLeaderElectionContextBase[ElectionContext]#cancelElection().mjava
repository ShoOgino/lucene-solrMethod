  @Override
  public void cancelElection() throws InterruptedException, KeeperException {
    super.cancelElection();
    if (leaderZkNodeParentVersion != null) {
      try {
        // We need to be careful and make sure we *only* delete our own leader registration node.
        // We do this by using a multi and ensuring the parent znode of the leader registration node
        // matches the version we expect - there is a setData call that increments the parent's znode
        // version whenever a leader registers.
        log.info("Removing leader registration node on cancel: {} {}", leaderPath, leaderZkNodeParentVersion);
        List<Op> ops = new ArrayList<>(2);
        ops.add(Op.check(new Path(leaderPath).getParent().toString(), leaderZkNodeParentVersion));
        ops.add(Op.delete(leaderPath, -1));
        zkClient.multi(ops, true);
      } catch (KeeperException.NoNodeException nne) {
        // no problem
        log.info("No leader registration node found to remove: {}", leaderPath);
      } catch (KeeperException.BadVersionException bve) {
        log.info("Cannot remove leader registration node because the current registered node is not ours: {}", leaderPath);
        // no problem
      } catch (InterruptedException e) {
        throw e;
      } catch (Exception e) {
        SolrException.log(log, e);
      }
      leaderZkNodeParentVersion = null;
    } else {
      log.info("No version found for ephemeral leader parent node, won't remove previous leader registration.");
    }
  }

