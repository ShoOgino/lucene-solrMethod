  /**
   * Applies the given {@link ZkWriteCommand} on the <code>prevState</code>. The modified
   * {@link ClusterState} is returned and it is expected that the caller will use the returned
   * cluster state for the subsequent invocation of this method.
   * <p>
   * The modified state may be buffered or flushed to ZooKeeper depending on the internal buffering
   * logic of this class. The {@link #hasPendingUpdates()} method may be used to determine if the
   * last enqueue operation resulted in buffered state. The method {@link #writePendingUpdates()} can
   * be used to force an immediate flush of pending cluster state changes.
   *
   * @param prevState the cluster state information on which the given <code>cmd</code> is applied
   * @param cmd       the {@link ZkWriteCommand} which specifies the change to be applied to cluster state
   * @param callback  a {@link org.apache.solr.cloud.overseer.ZkStateWriter.ZkWriteCallback} object to be used
   *                  for any callbacks
   * @return modified cluster state created after applying <code>cmd</code> to <code>prevState</code>. If
   * <code>cmd</code> is a no-op ({@link #NO_OP}) then the <code>prevState</code> is returned unmodified.
   * @throws IllegalStateException if the current instance is no longer usable. The current instance must be
   *                               discarded.
   * @throws Exception             on an error in ZK operations or callback. If a flush to ZooKeeper results
   *                               in a {@link org.apache.zookeeper.KeeperException.BadVersionException} this instance becomes unusable and
   *                               must be discarded
   */
  public ClusterState enqueueUpdate(ClusterState prevState, ZkWriteCommand cmd, ZkWriteCallback callback) throws IllegalStateException, Exception {
    if (invalidState) {
      throw new IllegalStateException("ZkStateWriter has seen a tragic error, this instance can no longer be used");
    }
    if (cmd == NO_OP) return prevState;

    if (maybeFlushBefore(cmd)) {
      // we must update the prev state to the new one
      prevState = clusterState = writePendingUpdates();
      if (callback != null) {
        callback.onWrite();
      }
    }

    if (callback != null) {
      callback.onEnqueue();
    }

    if (cmd.collection == null) {
      isClusterStateModified = true;
      clusterState = prevState.copyWith(cmd.name, null);
      updates.put(cmd.name, null);
    } else {
      if (cmd.collection.getStateFormat() > 1) {
        updates.put(cmd.name, cmd.collection);
      } else {
        isClusterStateModified = true;
      }
      clusterState = prevState.copyWith(cmd.name, cmd.collection);
    }

    if (maybeFlushAfter(cmd)) {
      ClusterState state = writePendingUpdates();
      if (callback != null) {
        callback.onWrite();
      }
      return state;
    }

    return clusterState;
  }

