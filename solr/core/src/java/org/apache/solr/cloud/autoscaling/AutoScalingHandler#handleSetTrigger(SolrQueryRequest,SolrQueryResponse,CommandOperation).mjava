  private void handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {
    String triggerName = op.getStr("name");

    if (triggerName == null || triggerName.trim().length() == 0) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "The trigger name cannot be null or empty");
    }

    String eventTypeStr = op.getStr("event");
    if (eventTypeStr == null || eventTypeStr.trim().length() == 0) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "The event type cannot be null or empty in trigger: " + triggerName);
    }
    AutoScaling.EventType eventType = AutoScaling.EventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));

    String waitForStr = op.getStr("waitFor", null);
    if (waitForStr != null) {
      char c = waitForStr.charAt(waitForStr.length() - 1);
      long waitForValue = Long.parseLong(waitForStr.substring(0, waitForStr.length() - 1));
      int seconds;
      switch (c) {
        case 'h':
          seconds = (int) TimeUnit.HOURS.toSeconds(waitForValue);
          break;
        case 'm':
          seconds = (int) TimeUnit.MINUTES.toSeconds(waitForValue);
          break;
        case 's':
          seconds = (int) waitForValue;
          break;
        default:
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Invalid 'waitFor' value in trigger: " + triggerName);
      }
      op.getDataMap().put("waitFor", seconds);
    }

    Integer lowerBound = op.getInt("lowerBound", null);
    Integer upperBound = op.getInt("upperBound", null);

    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal("actions");
    if (actions == null) {
      actions = DEFAULT_ACTIONS;
    }

    // validate that we can load all the actions
    // todo nocommit -- what about MemClassLoader?
    for (Map<String, String> action : actions) {
      if (!action.containsKey("name") || !action.containsKey("class")) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "No 'name' or 'class' specified for action: " + action);
      }
      String klass = action.get("class");
      try {
        container.getResourceLoader().findClass(klass, TriggerAction.class);
      } catch (Exception e) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Error trying to find Action: " + klass, e);
      }
    }

    zkSetTrigger(container.getZkController().getZkStateReader(), triggerName, op.getValuesExcluding("name"));
    rsp.getValues().add("result", "success");
  }

