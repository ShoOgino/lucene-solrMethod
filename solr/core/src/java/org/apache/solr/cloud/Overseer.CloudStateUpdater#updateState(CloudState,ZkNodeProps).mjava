      /**
       * Try to assign core to the cluster. 
       * @throws KeeperException 
       * @throws InterruptedException 
       */
      private CloudState updateState(CloudState state, final ZkNodeProps message) throws KeeperException, InterruptedException {
        final String collection = message.get(ZkStateReader.COLLECTION_PROP);
        final String zkCoreNodeName = message.get(ZkStateReader.NODE_NAME_PROP) + "_" + message.get(ZkStateReader.CORE_NAME_PROP);
        final Integer numShards = message.get(ZkStateReader.NUM_SHARDS_PROP)!=null?Integer.parseInt(message.get(ZkStateReader.NUM_SHARDS_PROP)):null;
        
        //collection does not yet exist, create placeholders if num shards is specified
        if (!state.getCollections().contains(collection)
            && numShards!=null) {
          state = createCollection(state, collection, numShards);
        }
        
        // use the provided non null shardId
        String shardId = message.get(ZkStateReader.SHARD_ID_PROP);
        if (shardId == null) {
          String nodeName = message.get(ZkStateReader.NODE_NAME_PROP);
          //get shardId from CloudState
          shardId = getAssignedId(state, nodeName, message);
        }
        if(shardId == null) {
          //request new shardId 
          shardId = AssignShard.assignShard(collection, state, numShards);
        }
          
          Map<String,String> props = new HashMap<String,String>();
          Map<String,String> coreProps = new HashMap<String,String>(message.getProperties().size());
          coreProps.putAll(message.getProperties());
          // we don't put num_shards in the clusterstate
          coreProps.remove(ZkStateReader.NUM_SHARDS_PROP);
          coreProps.remove(QUEUE_OPERATION);
          for (Entry<String,String> entry : coreProps.entrySet()) {
            props.put(entry.getKey(), entry.getValue());
          }
          ZkNodeProps zkProps = new ZkNodeProps(props);
          Slice slice = state.getSlice(collection, shardId);
          Map<String,ZkNodeProps> shardProps;
          if (slice == null) {
            shardProps = new HashMap<String,ZkNodeProps>();
          } else {
            shardProps = state.getSlice(collection, shardId).getShardsCopy();
          }
          shardProps.put(zkCoreNodeName, zkProps);

          slice = new Slice(shardId, shardProps);
          CloudState newCloudState = updateSlice(state, collection, slice);
          return newCloudState;
      }

