  Map<Position, String> identifyNodes(ClusterState clusterState,
                                      List<String> nodeList,
                                      ZkNodeProps message,
                                      List<String> shardNames,
                                      int repFactor) throws IOException, KeeperException, InterruptedException {
    List<Map> rulesMap = (List) message.get("rule");
    Map m = zkStateReader.getZkClient().getJson(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);
    boolean useAutoScalingPolicy = false;
    String policyName = message.getStr("policy");
    if (rulesMap != null && (m.get(Policy.CLUSTER_POLICY) == null || m.get(Policy.CLUSTER_PREFERENCE) != null || policyName == null)) {
      useAutoScalingPolicy = true;
    }

      if (rulesMap == null && !useAutoScalingPolicy) {
        int i = 0;
        Map<Position, String> result = new HashMap<>();
        for (String aShard : shardNames) {
          for (int j = 0; j < repFactor; j++) {
            result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));
            i++;
          }
        }
        return result;
      }


      if (useAutoScalingPolicy) {
        String tmpCollName = "coll_" + System.nanoTime();
        String collName = message.getStr(CommonParams.NAME, tmpCollName);
        try (CloudSolrClient csc = new CloudSolrClient.Builder()
            .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))
            .build()) {
          SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);
          Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,
              zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),
              clientDataProvider, Collections.singletonMap(tmpCollName, policyName), shardNames, repFactor);
          Map<Position, String> result = new HashMap<>();
          for (Map.Entry<String, List<String>> e : locations.entrySet()) {
            List<String> value = e.getValue();
            for (int i = 0; i < value.size(); i++) {
              result.put(new Position(e.getKey(), i), value.get(i));
            }
          }
          return result;
        }

      } else {
        List<Rule> rules = new ArrayList<>();
        for (Object map : rulesMap) rules.add(new Rule((Map) map));

        Map<String, Integer> sharVsReplicaCount = new HashMap<>();

        for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);
        ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,
            sharVsReplicaCount,
            (List<Map>) message.get(SNITCH),
            new HashMap<>(),//this is a new collection. So, there are no nodes in any shard
            nodeList,
            overseer.getZkController().getCoreContainer(),
            clusterState);

        return replicaAssigner.getNodeMappings();
      }
    }

