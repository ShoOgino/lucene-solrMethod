  /**
   * Add a watch for node containing shard leaders for a collection
   * @param collection
   * @throws KeeperException
   * @throws InterruptedException
   */
  private void addShardLeadersWatch(final String collection) throws KeeperException,
      InterruptedException {
    
    zkCmdExecutor.ensureExists(ZkStateReader.getShardLeadersPath(collection, null), zkClient);
    
    final List<String> leaderNodes = zkClient.getChildren(
        ZkStateReader.getShardLeadersPath(collection, null), new Watcher() {
          
          @Override
          public void process(WatchedEvent event) {
            try {
              List<String> leaderNodes = zkClient.getChildren(
                  ZkStateReader.getShardLeadersPath(collection, null), this, true);
              
              processLeaderNodesChanged(collection, leaderNodes);
            } catch (KeeperException e) {
              if (e.code() == KeeperException.Code.SESSIONEXPIRED
                  || e.code() == KeeperException.Code.CONNECTIONLOSS) {
                log.warn("ZooKeeper watch triggered, but Solr cannot talk to ZK");
                return;
              }
              SolrException.log(log, "", e);
              throw new ZooKeeperException(
                  SolrException.ErrorCode.SERVER_ERROR, "", e);
            } catch (InterruptedException e) {
              // Restore the interrupted status
              Thread.currentThread().interrupt();
            }
          }
        }, true);
    
    processLeaderNodesChanged(collection, leaderNodes);
  }

