    @Override
    @SuppressWarnings({"unchecked"})
    public void execute(SimScenario scenario) throws Exception {
      boolean redact = Boolean.parseBoolean(params.get("redact", "false"));
      boolean withData = Boolean.parseBoolean(params.get("withData", "false"));
      boolean withStats = Boolean.parseBoolean(params.get("withStats", "false"));
      boolean withSuggestions = Boolean.parseBoolean(params.get("withSuggestions", "true"));
      boolean withDiagnostics = Boolean.parseBoolean(params.get("withDiagnostics", "false"));
      boolean withNodeState = Boolean.parseBoolean(params.get("withNodeState", "false"));
      boolean withClusterState = Boolean.parseBoolean(params.get("withClusterState", "false"));
      boolean withManagerState = Boolean.parseBoolean(params.get("withManagerState", "false"));
      SnapshotCloudManager snapshotCloudManager = new SnapshotCloudManager(scenario.cluster, null);
      Map<String, Object> snapshot = snapshotCloudManager.getSnapshot(true, redact);
      if (!withData) {
        snapshot.remove(SnapshotCloudManager.DISTRIB_STATE_KEY);
      }
      if (!withNodeState) {
        snapshot.remove(SnapshotCloudManager.NODE_STATE_KEY);
      }
      if (!withClusterState) {
        snapshot.remove(SnapshotCloudManager.CLUSTER_STATE_KEY);
      }
      if (!withStats) {
        snapshot.remove(SnapshotCloudManager.STATISTICS_STATE_KEY);
      }
      if (!withManagerState) {
        snapshot.remove(SnapshotCloudManager.MANAGER_STATE_KEY);
      }
      if (!withDiagnostics) {
        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove("diagnostics");
      }
      if (!withSuggestions) {
        ((Map<String, Object>)snapshot.get(SnapshotCloudManager.AUTOSCALING_STATE_KEY)).remove("suggestions");
      }
      String data = Utils.toJSONString(snapshot);
      if (redact) {
        RedactionUtils.RedactionContext ctx = SimUtils.getRedactionContext(snapshotCloudManager.getClusterStateProvider().getClusterState());
        data = RedactionUtils.redactNames(ctx.getRedactions(), data);
      }
      snapshotCloudManager.close();
      scenario.console.println(data);
    }

