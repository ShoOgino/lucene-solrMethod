  @Override
  public void process(TriggerEvent event, ActionContext context) throws Exception {
    log.debug("-- processing event: {} with context properties: {}", event, context.getProperties());
    SolrCloudManager cloudManager = context.getCloudManager();
    List<SolrRequest> operations = (List<SolrRequest>) context.getProperty("operations");
    if (operations == null || operations.isEmpty()) {
      log.info("No operations to execute for event: {}", event);
      return;
    }
    try {
      for (SolrRequest operation : operations) {
        log.debug("Executing operation: {}", operation.getParams());
        try {
          SolrResponse response = null;
          int counter = 0;
          if (operation instanceof CollectionAdminRequest.AsyncCollectionAdminRequest) {
            CollectionAdminRequest.AsyncCollectionAdminRequest req = (CollectionAdminRequest.AsyncCollectionAdminRequest) operation;
            // waitForFinalState so that the end effects of operations are visible
            req.setWaitForFinalState(true);
            String asyncId = event.getSource() + '/' + event.getId() + '/' + counter;
            String znode = saveAsyncId(cloudManager.getDistribStateManager(), event, asyncId);
            log.trace("Saved requestId: {} in znode: {}", asyncId, znode);
            // TODO: find a better way of using async calls using dataProvider API !!!
            req.setAsyncId(asyncId);
            SolrResponse asyncResponse = cloudManager.request(req);
            if (asyncResponse.getResponse().get("error") != null) {
              throw new IOException("" + asyncResponse.getResponse().get("error"));
            }
            asyncId = (String)asyncResponse.getResponse().get("requestid");
            CollectionAdminRequest.RequestStatusResponse statusResponse = waitForTaskToFinish(cloudManager, asyncId,
                DEFAULT_TASK_TIMEOUT_SECONDS, TimeUnit.SECONDS);
            if (statusResponse != null) {
              RequestStatusState state = statusResponse.getRequestStatus();
              if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED || state == RequestStatusState.NOT_FOUND) {
                try {
                  cloudManager.getDistribStateManager().removeData(znode, -1);
                } catch (Exception e) {
                  log.warn("Unexpected exception while trying to delete znode: " + znode, e);
                }
              }
              response = statusResponse;
            }
          } else {
            response = cloudManager.request(operation);
          }
          NamedList<Object> result = response.getResponse();
          context.getProperties().compute("responses", (s, o) -> {
            List<NamedList<Object>> responses = (List<NamedList<Object>>) o;
            if (responses == null)  responses = new ArrayList<>(operations.size());
            responses.add(result);
            return responses;
          });
        } catch (IOException e) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
              "Unexpected exception executing operation: " + operation.getParams(), e);
        } catch (InterruptedException e) {
          Thread.currentThread().interrupt();
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "ExecutePlanAction was interrupted", e);
        } catch (Exception e) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
              "Unexpected exception executing operation: " + operation.getParams(), e);
        }
      }
    } catch (Exception e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
          "Unexpected exception while processing event: " + event, e);
    }
  }

