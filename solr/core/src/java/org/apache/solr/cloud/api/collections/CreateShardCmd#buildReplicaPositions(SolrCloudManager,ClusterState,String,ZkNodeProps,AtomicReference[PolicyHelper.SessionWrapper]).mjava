  public static List<ReplicaPosition> buildReplicaPositions(SolrCloudManager cloudManager, ClusterState clusterState,
         String collectionName, ZkNodeProps message, AtomicReference< PolicyHelper.SessionWrapper> sessionWrapper) throws IOException, InterruptedException {
    String sliceName = message.getStr(SHARD_ID_PROP);
    DocCollection collection = clusterState.getCollection(collectionName);

    int numNrtReplicas = message.getInt(NRT_REPLICAS, message.getInt(REPLICATION_FACTOR, collection.getInt(NRT_REPLICAS, collection.getInt(REPLICATION_FACTOR, 1))));
    int numPullReplicas = message.getInt(PULL_REPLICAS, collection.getInt(PULL_REPLICAS, 0));
    int numTlogReplicas = message.getInt(TLOG_REPLICAS, collection.getInt(TLOG_REPLICAS, 0));
    int totalReplicas = numNrtReplicas + numPullReplicas + numTlogReplicas;

    if (numNrtReplicas + numTlogReplicas <= 0) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, NRT_REPLICAS + " + " + TLOG_REPLICAS + " must be greater than 0");
    }

    Object createNodeSetStr = message.get(OverseerCollectionMessageHandler.CREATE_NODE_SET);

    boolean usePolicyFramework = CloudUtil.usePolicyFramework(collection, cloudManager);
    List<ReplicaPosition> positions;
    if (usePolicyFramework) {
      if (collection.getPolicyName() != null) message.getProperties().put(Policy.POLICY, collection.getPolicyName());
      positions = Assign.identifyNodes(cloudManager,
          clusterState,
          Assign.getLiveOrLiveAndCreateNodeSetList(clusterState.getLiveNodes(), message, OverseerCollectionMessageHandler.RANDOM),
          collection.getName(),
          message,
          Collections.singletonList(sliceName),
          numNrtReplicas,
          numTlogReplicas,
          numPullReplicas);
      sessionWrapper.set(PolicyHelper.getLastSessionWrapper(true));
    } else {
      List<Assign.ReplicaCount> sortedNodeList = Assign.getNodesForNewReplicas(clusterState, collection.getName(), sliceName, totalReplicas,
          createNodeSetStr, cloudManager);
      int i = 0;
      positions = new ArrayList<>();
      for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,
          Replica.Type.TLOG, numTlogReplicas,
          Replica.Type.PULL, numPullReplicas
      ).entrySet()) {
        for (int j = 0; j < e.getValue(); j++) {
          positions.add(new ReplicaPosition(sliceName, j + 1, e.getKey(), sortedNodeList.get(i % sortedNodeList.size()).nodeName));
          i++;
        }
      }
    }
    return positions;
  }

