  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) throws IOException {
    Suggester suggester;
    switch (event.getEventType()) {
      case NODEADDED:
        suggester = getNodeAddedSuggester(cloudManager, session, event);
        break;
      case NODELOST:
        suggester = session.getSuggester(CollectionParams.CollectionAction.MOVEREPLICA)
            .hint(Suggester.Hint.SRC_NODE, event.getProperty(TriggerEvent.NODE_NAMES));
        break;
      case SEARCHRATE:
      case METRIC:
      case INDEXSIZE:
        List<TriggerEvent.Op> ops = (List<TriggerEvent.Op>)event.getProperty(TriggerEvent.REQUESTED_OPS, Collections.emptyList());
        int start = (Integer)event.getProperty(START, 0);
        if (ops.isEmpty() || start >= ops.size()) {
          return NoneSuggester.get(session);
        }
        TriggerEvent.Op op = ops.get(start);
        suggester = session.getSuggester(op.getAction());
        if (suggester instanceof UnsupportedSuggester) {
          List<TriggerEvent.Op> unsupportedOps = (List<TriggerEvent.Op>)context.getProperties().computeIfAbsent(TriggerEvent.UNSUPPORTED_OPS, k -> new ArrayList<TriggerEvent.Op>());
          unsupportedOps.add(op);
        }
        for (Map.Entry<Suggester.Hint, Object> e : op.getHints().entrySet()) {
          suggester = suggester.hint(e.getKey(), e.getValue());
        }
        suggester = suggester.forceOperation(true);
        start++;
        event.getProperties().put(START, start);
        break;
      case SCHEDULED:
        String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());
        CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);
        suggester = session.getSuggester(action);
        break;
      default:
        throw new UnsupportedOperationException("No support for events other than nodeAdded, nodeLost, searchRate, metric and indexSize. Received: " + event.getEventType());
    }
    return suggester;
  }

