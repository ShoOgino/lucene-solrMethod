  @Override
  public void onEvent(TriggerEvent event, TriggerEventProcessorStage stage, String actionName, ActionContext context, Throwable error, String message) {
    Properties properties = new Properties();
    properties.setProperty("stage", stage.toString());
    // if configuration used "actionName" but we're in a non-action related stage then PropertiesUtil will
    // throws an exception on missing value - so replace it with an empty string
    if (actionName == null) {
      actionName = "";
    }
    properties.setProperty("actionName", actionName);
    if (context != null) {
      context.getProperties().forEach((k, v) -> {
        properties.setProperty("context." + k, String.valueOf(v));
      });
    }
    if (error != null) {
      properties.setProperty("error", error.toString());
    } else {
      properties.setProperty("error", "");
    }
    if (message != null) {
      properties.setProperty("message", message);
    } else {
      properties.setProperty("message", "");
    }
    // add event properties
    properties.setProperty("event.id", event.getId());
    properties.setProperty("event.source", event.getSource());
    properties.setProperty("event.eventTime", String.valueOf(event.eventTime));
    properties.setProperty("event.eventType", event.getEventType().toString());
    event.getProperties().forEach((k, v) -> {
      properties.setProperty("event.properties." + k, String.valueOf(v));
    });
    // add config properties
    properties.setProperty("config.name", config.name);
    properties.setProperty("config.trigger", config.trigger);
    properties.setProperty("config.listenerClass", config.listenerClass);
    properties.setProperty("config.beforeActions", String.join(",", config.beforeActions));
    properties.setProperty("config.afterActions", String.join(",", config.afterActions));
    StringJoiner joiner = new StringJoiner(",");
    config.stages.forEach(s -> joiner.add(s.toString()));
    properties.setProperty("config.stages", joiner.toString());
    config.properties.forEach((k, v) -> {
      properties.setProperty("config.properties." + k, String.valueOf(v));
    });
    String url = PropertiesUtil.substituteProperty(urlTemplate, properties);
    String payload;
    String type;
    if (payloadTemplate != null) {
      payload = PropertiesUtil.substituteProperty(payloadTemplate, properties);
      if (contentType != null) {
        type = contentType;
      } else {
        type = "application/json";
      }
    } else {
      payload = Utils.toJSONString(properties);
      type = "application/json";
    }
    HttpPost post = new HttpPost(url);
    HttpEntity entity = new StringEntity(payload, "UTF-8");
    headerTemplates.forEach((k, v) -> {
      String headerVal = PropertiesUtil.substituteProperty(v, properties);
      if (!headerVal.isEmpty()) {
        post.addHeader(k, headerVal);
      }
    });
    post.setEntity(entity);
    post.setHeader("Content-Type", type);
    org.apache.http.client.config.RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();
    requestConfigBuilder.setSocketTimeout(timeout);
    requestConfigBuilder.setConnectTimeout(timeout);
    requestConfigBuilder.setRedirectsEnabled(followRedirects);

    post.setConfig(requestConfigBuilder.build());
    try {
      HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();
      HttpResponse rsp = httpClient.execute(post, httpClientRequestContext);
      int statusCode = rsp.getStatusLine().getStatusCode();
      if (statusCode != 200) {
        LOG.warn("Error sending request for event " + event + ", HTTP response: " + rsp.toString());
      }
      HttpEntity responseEntity = rsp.getEntity();
      Utils.consumeFully(responseEntity);
    } catch (IOException e) {
      LOG.warn("Exception sending request for event " + event, e);
    }
  }

