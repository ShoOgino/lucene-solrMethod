  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,
                                                    ClusterState clusterState,
                                                    List<String> nodeList,
                                                    String collectionName,
                                                    ZkNodeProps message,
                                                    List<String> shardNames,
                                                    int numNrtReplicas,
                                                    int numTlogReplicas,
                                                    int numPullReplicas) throws IOException, InterruptedException {
    List<Map> rulesMap = (List) message.get("rule");
    String policyName = message.getStr(POLICY);
    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();

    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {
      log.debug("Identify nodes using default");
      int i = 0;
      List<ReplicaPosition> result = new ArrayList<>();
      for (String aShard : shardNames)
        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,
            Replica.Type.TLOG, numTlogReplicas,
            Replica.Type.PULL, numPullReplicas
        ).entrySet()) {
          for (int j = 0; j < e.getValue(); j++){
            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));
            i++;
          }
        }
      return result;
    } else {
      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
            Replica.Type.TLOG + " or " + Replica.Type.PULL + " replica types not supported with placement rules or cluster policies");
      }
    }

    if (rulesMap != null && !rulesMap.isEmpty()) {
      List<Rule> rules = new ArrayList<>();
      for (Object map : rulesMap) rules.add(new Rule((Map) map));
      Map<String, Integer> sharVsReplicaCount = new HashMap<>();

      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);
      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,
          sharVsReplicaCount,
          (List<Map>) message.get(SNITCH),
          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard
          nodeList,
          cloudManager,
          clusterState);

      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();
      return nodeMappings.entrySet().stream()
          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))
          .collect(Collectors.toList());
    } else  {
      if (message.getStr(CREATE_NODE_SET) == null)
        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy
      return getPositionsUsingPolicy(collectionName,
          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);
    }
  }

