  @Override
  public void process(TriggerEvent event, ActionContext context) throws Exception {
    SolrCloudManager cloudManager = context.getCloudManager();
    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();
    Map<String, List<String>> cleanup = new LinkedHashMap<>();
    Map<String, List<String>> inactive = new LinkedHashMap<>();
    Map<String, Map<String, Object>> staleLocks = new LinkedHashMap<>();
    state.forEachCollection(coll ->
      coll.getSlices().forEach(s -> {
        if (Slice.State.INACTIVE.equals(s.getState())) {
          inactive.computeIfAbsent(coll.getName(), c -> new ArrayList<>()).add(s.getName());
          String tstampStr = s.getStr(ZkStateReader.STATE_TIMESTAMP_PROP);
          if (tstampStr == null || tstampStr.isEmpty()) {
            return;
          }
          long timestamp = Long.parseLong(tstampStr);
          // this timestamp uses epoch time
          long currentTime = cloudManager.getTimeSource().getEpochTimeNs();
          long delta = TimeUnit.NANOSECONDS.toSeconds(currentTime - timestamp);
          if (log.isDebugEnabled()) {
            log.debug("{}/{}: tstamp={}, time={}, delta={}", coll.getName(), s.getName(), timestamp, currentTime, delta);
          }
          if (delta > cleanupTTL) {
            if (log.isDebugEnabled()) {
              log.debug("-- delete inactive {} / {}", coll.getName(), s.getName());
            }
            List<SolrRequest> operations = (List<SolrRequest>)context.getProperties().computeIfAbsent("operations", k -> new ArrayList<>());
            operations.add(CollectionAdminRequest.deleteShard(coll.getName(), s.getName()));
            cleanup.computeIfAbsent(coll.getName(), c -> new ArrayList<>()).add(s.getName());
          }
        }
        // check for stale shard split locks
        String parentPath = ZkStateReader.COLLECTIONS_ZKNODE + "/" + coll.getName();
        List<String> locks;
        try {
          locks = cloudManager.getDistribStateManager().listData(parentPath).stream()
              .filter(name -> name.endsWith("-splitting"))
              .collect(Collectors.toList());
          for (String lock : locks) {
            try {
              String lockPath = parentPath + "/" + lock;
              Map<String, Object> lockData = Utils.getJson(cloudManager.getDistribStateManager(), lockPath);
              String tstampStr = (String)lockData.get(ZkStateReader.STATE_TIMESTAMP_PROP);
              if (tstampStr == null || tstampStr.isEmpty()) {
                return;
              }
              long timestamp = Long.parseLong(tstampStr);
              // this timestamp uses epoch time
              long currentTime = cloudManager.getTimeSource().getEpochTimeNs();
              long delta = TimeUnit.NANOSECONDS.toSeconds(currentTime - timestamp);
              if (log.isDebugEnabled()) {
                log.debug("{}/{}: locktstamp={}, time={}, delta={}", coll.getName(), lock, timestamp, currentTime, delta);
              }
              if (delta > cleanupTTL) {
                if (log.isDebugEnabled()) {
                  log.debug("-- delete inactive split lock for {}/{}, delta={}", coll.getName(), lock, delta);
                }
                cloudManager.getDistribStateManager().removeData(lockPath, -1);
                lockData.put("currentTimeNs", currentTime);
                lockData.put("deltaSec", delta);
                lockData.put("ttlSec", cleanupTTL);
                staleLocks.put(coll.getName() + "/" + lock, lockData);
              } else {
                if (log.isDebugEnabled()) {
                  log.debug("-- lock {}/{} still active (delta={})", coll.getName(), lock, delta);
                }
              }
            } catch (NoSuchElementException nse) {
              // already removed by someone else - ignore
            }
          }
        } catch (Exception e) {
          log.warn("Exception checking for inactive shard split locks in {}", parentPath, e);
        }
      })
    );
    Map<String, Object> results = new LinkedHashMap<>();
    if (!cleanup.isEmpty()) {
      results.put("inactive", inactive);
      results.put("cleanup", cleanup);
    }
    if (!staleLocks.isEmpty()) {
      results.put("staleLocks", staleLocks);
    }
    if (!results.isEmpty()) {
      context.getProperties().put(getName(), results);
    }
  }

