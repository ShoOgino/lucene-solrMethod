  private void handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {
    String listenerName = op.getStr(NAME);
    String triggerName = op.getStr(TRIGGER);
    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());
    String listenerClass = op.getStr(CLASS);
    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());
    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());

    if (listenerName == null || listenerName.trim().length() == 0) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "The listener name cannot be null or empty");
    }

    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());
    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get("triggers");
    if (triggers == null || !triggers.containsKey(triggerName)) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "A trigger with the name " + triggerName + " does not exist");
    }
    Map<String, Object> triggerProps = (Map<String, Object>) triggers.get(triggerName);

    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Either 'stage' or 'beforeAction' or 'afterAction' must be specified");
    }

    for (String stage : stageNames) {
      try {
        AutoScaling.TriggerStage.valueOf(stage);
      } catch (IllegalArgumentException e) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Invalid stage name: " + stage);
      }
    }

    if (listenerClass == null || listenerClass.trim().length() == 0) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "The 'class' of the listener cannot be null or empty");
    }
    // validate that we can load the listener class
    // todo nocommit -- what about MemClassLoader?
    try {
      container.getResourceLoader().findClass(listenerClass, AutoScaling.TriggerListener.class);
    } catch (Exception e) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Listener not found: " + listenerClass, e);
    }

    List<Map<String, String>> actions = (List<Map<String, String>>) triggerProps.get("actions");
    Set<String> actionNames = new HashSet<>();
    actionNames.addAll(beforeActions);
    actionNames.addAll(afterActions);
    for (Map<String, String> action : actions) {
      actionNames.remove(action.get(NAME));
    }
    if (!actionNames.isEmpty()) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "The trigger '" + triggerName + "' does not have actions named: " + actionNames);
    }

    // todo - handle races between competing set-trigger and set-listener invocations
    zkSetListener(container.getZkController().getZkStateReader(), listenerName, op.getValuesExcluding("name"));
    rsp.getValues().add("result", "success");
  }

