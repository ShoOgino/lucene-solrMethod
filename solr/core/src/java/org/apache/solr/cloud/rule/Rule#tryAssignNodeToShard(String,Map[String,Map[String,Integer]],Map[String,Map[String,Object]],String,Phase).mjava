  /**
   * Check if it is possible to assign this node as a replica of the given shard
   * without violating this rule
   *
   * @param testNode       The node in question
   * @param shardVsNodeSet Set of nodes for every shard 
   * @param nodeVsTags     The pre-fetched tags for all the nodes
   * @param shardName      The shard to which this node should be attempted
   * @return MatchStatus
   */
  MatchStatus tryAssignNodeToShard(String testNode,
                                   Map<String, Map<String,Integer>> shardVsNodeSet,
                                   Map<String, Map<String, Object>> nodeVsTags,
                                   String shardName, Phase phase) {

    if (tag.isWildCard()) {
      //this is ensuring uniqueness across a certain tag
      //eg: rack:r168
      if (!shard.isWildCard() && shardName.equals(shard.val)) return NOT_APPLICABLE;
      Object tagValueForThisNode = nodeVsTags.get(testNode).get(tag.name);
      int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet,
          shardName, new Condition(tag.name, tagValueForThisNode, EQUAL), phase);
      if (phase == Phase.ASSIGN || phase == Phase.FUZZY_ASSIGN)
        v++;//v++ because including this node , it becomes v+1 during ASSIGN
      return replica.canMatch(v, phase) ?
          NODE_CAN_BE_ASSIGNED :
          CANNOT_ASSIGN_FAIL;
    } else {
      if (!shard.isWildCard() && !shardName.equals(shard.val)) return NOT_APPLICABLE;
      if (replica.isWildCard()) {
        //this means for each replica, the value must match
        //shard match is already tested
        if (tag.canMatch(nodeVsTags.get(testNode).get(tag.name), phase)) return NODE_CAN_BE_ASSIGNED;
        else return CANNOT_ASSIGN_FAIL;
      } else {
        int v = getNumberOfNodesWithSameTagVal(shard, nodeVsTags, shardVsNodeSet, shardName, tag, phase);
        return replica.canMatch(v, phase) ? NODE_CAN_BE_ASSIGNED : CANNOT_ASSIGN_FAIL;

      }

    }
  }

