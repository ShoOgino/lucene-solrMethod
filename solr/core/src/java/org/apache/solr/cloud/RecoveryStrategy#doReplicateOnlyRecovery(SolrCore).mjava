  final private void doReplicateOnlyRecovery(SolrCore core) throws InterruptedException {
    boolean successfulRecovery = false;

//  if (core.getUpdateHandler().getUpdateLog() != null) {
//    SolrException.log(LOG, "'replicate-only' recovery strategy should only be used if no update logs are present, but this core has one: "
//        + core.getUpdateHandler().getUpdateLog());
//    return;
//  }
  while (!successfulRecovery && !Thread.currentThread().isInterrupted() && !isClosed()) { // don't use interruption or it will close channels though
    try {
      CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();
      ZkNodeProps leaderprops = zkStateReader.getLeaderRetry(
          cloudDesc.getCollectionName(), cloudDesc.getShardId());
      final String leaderBaseUrl = leaderprops.getStr(ZkStateReader.BASE_URL_PROP);
      final String leaderCoreName = leaderprops.getStr(ZkStateReader.CORE_NAME_PROP);

      String leaderUrl = ZkCoreNodeProps.getCoreUrl(leaderBaseUrl, leaderCoreName);

      String ourUrl = ZkCoreNodeProps.getCoreUrl(baseUrl, coreName);

      boolean isLeader = leaderUrl.equals(ourUrl); //TODO: We can probably delete most of this code if we say this strategy can only be used for pull replicas
      if (isLeader && !cloudDesc.isLeader()) {
        throw new SolrException(ErrorCode.SERVER_ERROR, "Cloud state still says we are leader.");
      }
      if (cloudDesc.isLeader()) {
        assert cloudDesc.getReplicaType() != Replica.Type.PULL;
        // we are now the leader - no one else must have been suitable
        LOG.warn("We have not yet recovered - but we are now the leader!");
        LOG.info("Finished recovery process.");
        zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);
        return;
      }
      
      
      LOG.info("Publishing state of core [{}] as recovering, leader is [{}] and I am [{}]", core.getName(), leaderUrl,
          ourUrl);
      zkController.publish(core.getCoreDescriptor(), Replica.State.RECOVERING);
      
      if (isClosed()) {
        LOG.info("Recovery for core {} has been closed", core.getName());
        break;
      }
      LOG.info("Starting Replication Recovery.");

      try {
        LOG.info("Stopping background replicate from leader process");
        zkController.stopReplicationFromLeader(coreName);
        replicate(zkController.getNodeName(), core, leaderprops);

        if (isClosed()) {
          LOG.info("Recovery for core {} has been closed", core.getName());
          break;
        }

        LOG.info("Replication Recovery was successful.");
        successfulRecovery = true;
      } catch (Exception e) {
        SolrException.log(LOG, "Error while trying to recover", e);
      }

    } catch (Exception e) {
      SolrException.log(LOG, "Error while trying to recover. core=" + coreName, e);
    } finally {
      if (successfulRecovery) {
        LOG.info("Restaring background replicate from leader process");
        zkController.startReplicationFromLeader(coreName, false);
        LOG.info("Registering as Active after recovery.");
        try {
          zkController.publish(core.getCoreDescriptor(), Replica.State.ACTIVE);
        } catch (Exception e) {
          LOG.error("Could not publish as ACTIVE after succesful recovery", e);
          successfulRecovery = false;
        }
        
        if (successfulRecovery) {
          close = true;
          recoveryListener.recovered();
        }
      }
    }

    if (!successfulRecovery) {
      // lets pause for a moment and we need to try again...
      // TODO: we don't want to retry for some problems?
      // Or do a fall off retry...
      try {

        if (isClosed()) {
          LOG.info("Recovery for core {} has been closed", core.getName());
          break;
        }
        
        LOG.error("Recovery failed - trying again... (" + retries + ")");
        
        retries++;
        if (retries >= maxRetries) {
          SolrException.log(LOG, "Recovery failed - max retries exceeded (" + retries + ").");
          try {
            recoveryFailed(core, zkController, baseUrl, coreZkNodeName, core.getCoreDescriptor());
          } catch (Exception e) {
            SolrException.log(LOG, "Could not publish that recovery failed", e);
          }
          break;
        }
      } catch (Exception e) {
        SolrException.log(LOG, "An error has occurred during recovery", e);
      }

      try {
        // Wait an exponential interval between retries, start at 5 seconds and work up to a minute.
        // If we're at attempt >= 4, there's no point computing pow(2, retries) because the result
        // will always be the minimum of the two (12). Since we sleep at 5 seconds sub-intervals in
        // order to check if we were closed, 12 is chosen as the maximum loopCount (5s * 12 = 1m).
        int loopCount = retries < 4 ? (int) Math.min(Math.pow(2, retries), 12) : 12;
        LOG.info("Wait [{}] seconds before trying to recover again (attempt={})",
            TimeUnit.MILLISECONDS.toSeconds(loopCount * startingRecoveryDelayMilliSeconds), retries);
        for (int i = 0; i < loopCount; i++) {
          if (isClosed()) {
            LOG.info("Recovery for core {} has been closed", core.getName());
            break; // check if someone closed us
          }
          Thread.sleep(startingRecoveryDelayMilliSeconds);
        }
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        LOG.warn("Recovery was interrupted.", e);
        close = true;
      }
    }

  }
  // We skip core.seedVersionBuckets(); We don't have a transaction log
  LOG.info("Finished recovery process, successful=[{}]", Boolean.toString(successfulRecovery));
}

