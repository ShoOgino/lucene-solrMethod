      /**
       * Try to assign core to the cluster. 
       * @throws KeeperException 
       * @throws InterruptedException 
       */
      private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {
        String collection = coreState.getCollectionName();
        String zkCoreNodeName = coreState.getCoreNodeName();

        // use the provided non null shardId
        String shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);
        if(shardId==null) {
          //use shardId from CloudState
          shardId = getAssignedId(state, nodeName, coreState);
        }
        if(shardId==null) {
          //request new shardId 
          shardId = AssignShard.assignShard(collection, state);
        }
          
          Map<String,String> props = new HashMap<String,String>();
          for (Entry<String,String> entry : coreState.getProperties().entrySet()) {
            props.put(entry.getKey(), entry.getValue());
          }
          ZkNodeProps zkProps = new ZkNodeProps(props);
          Slice slice = state.getSlice(collection, shardId);
          Map<String,ZkNodeProps> shardProps;
          if (slice == null) {
            shardProps = new HashMap<String,ZkNodeProps>();
          } else {
            shardProps = state.getSlice(collection, shardId).getShardsCopy();
          }
          shardProps.put(zkCoreNodeName, zkProps);

          slice = new Slice(shardId, shardProps);
          CloudState newCloudState = updateSlice(state, collection, slice);
          return newCloudState;
      }

