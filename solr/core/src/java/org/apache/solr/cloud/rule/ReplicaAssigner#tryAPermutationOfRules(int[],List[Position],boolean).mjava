  private Map<Position, String> tryAPermutationOfRules(int[] rulePermutation, List<Position> positions, boolean fuzzyPhase) {
    Map<String, Map<String, Object>> nodeVsTagsCopy = getDeepCopy(nodeVsTags, 2);
    Map<Position, String> result = new LinkedHashMap<>();
    int startPosition = 0;
    Map<String, Map<String, Integer>> copyOfCurrentState = getDeepCopy(shardVsNodes, 2);
    List<String> sortedLiveNodes = new ArrayList<>(this.participatingLiveNodes);
    Collections.sort(sortedLiveNodes, (n1, n2) -> {
      int result1 = 0;
      for (int i = 0; i < rulePermutation.length; i++) {
        Rule rule = rules.get(rulePermutation[i]);
        int val = rule.compare(n1, n2, nodeVsTagsCopy, copyOfCurrentState);
        if (val != 0) {//atleast one non-zero compare break now
          result1 = val;
          break;
        }
        if (result1 == 0) {//if all else is equal, prefer nodes with fewer cores
          AtomicInteger n1Count = nodeVsCores.get(n1);
          AtomicInteger n2Count = nodeVsCores.get(n2);
          int a = n1Count == null ? 0 : n1Count.get();
          int b = n2Count == null ? 0 : n2Count.get();
          result1 = a > b ? 1 : a == b ? 0 : -1;
        }

      }
      return result1;
    });
    forEachPosition:
    for (Position position : positions) {
      //trying to assign a node by verifying each rule in this rulePermutation
      forEachNode:
      for (int j = 0; j < sortedLiveNodes.size(); j++) {
        String liveNode = sortedLiveNodes.get(startPosition % sortedLiveNodes.size());
        startPosition++;
        for (int i = 0; i < rulePermutation.length; i++) {
          Rule rule = rules.get(rulePermutation[i]);
          //trying to assign a replica into this node in this shard
          Rule.MatchStatus status = rule.tryAssignNodeToShard(liveNode,
              copyOfCurrentState, nodeVsTagsCopy, position.shard, fuzzyPhase ? FUZZY_ASSIGN : ASSIGN);
          if (status == Rule.MatchStatus.CANNOT_ASSIGN_FAIL) {
            continue forEachNode;//try another node for this position
          }
        }
        //We have reached this far means this node can be applied to this position
        //and all rules are fine. So let us change the currentState
        result.put(position, liveNode);
        Map<String, Integer> nodeNames = copyOfCurrentState.get(position.shard);
        if (nodeNames == null) copyOfCurrentState.put(position.shard, nodeNames = new HashMap<>());
        Integer n = nodeNames.get(liveNode);
        n = n == null ? 1 : n + 1;
        nodeNames.put(liveNode, n);
        Map<String, Object> tagsMap = nodeVsTagsCopy.get(liveNode);
        Number coreCount = tagsMap == null ? null: (Number) tagsMap.get(ImplicitSnitch.CORES);
        if (coreCount != null) {
          nodeVsTagsCopy.get(liveNode).put(ImplicitSnitch.CORES, coreCount.intValue() + 1);
        }

        continue forEachPosition;
      }
      //if it reached here, we could not find a node for this position
      return null;
    }

    if (positions.size() > result.size()) {
      return null;
    }

    for (Map.Entry<Position, String> e : result.entrySet()) {
      for (int i = 0; i < rulePermutation.length; i++) {
        Rule rule = rules.get(rulePermutation[i]);
        Rule.MatchStatus matchStatus = rule.tryAssignNodeToShard(e.getValue(),
            copyOfCurrentState, nodeVsTagsCopy, e.getKey().shard, fuzzyPhase ? FUZZY_VERIFY : VERIFY);
        if (matchStatus != NODE_CAN_BE_ASSIGNED && matchStatus != NOT_APPLICABLE) return null;
      }
    }
    return result;
  }

