  /**
   * Returns the name if the first known child node, or {@code null} if the queue is empty.
   * This is the only place {@link #knownChildren} is ever updated!
   * The caller must double check that the actual node still exists, since the in-memory
   * list is inherently stale.
   */
  private String firstChild(boolean remove) throws KeeperException, InterruptedException {
    updateLock.lockInterruptibly();
    try {
      // If we're not in a dirty state, and we have in-memory children, return from in-memory.
      if (lastWatcher != null && !knownChildren.isEmpty()) {
        return remove ? knownChildren.pollFirst() : knownChildren.first();
      }

      // Try to fetch an updated list of children from ZK.
      ChildWatcher newWatcher = new ChildWatcher();
      knownChildren = fetchZkChildren(newWatcher);
      lastWatcher = newWatcher; // only set after fetchZkChildren returns successfully
      if (knownChildren.isEmpty()) {
        return null;
      }
      changed.signalAll();
      return remove ? knownChildren.pollFirst() : knownChildren.first();
    } finally {
      updateLock.unlock();
    }
  }

