    private boolean balanceProperty() {
      if (collectCurrentPropStats() == false) {
        return false;
      }

      // we have two lists based on nodeName
      // 1> all the nodes that _could_ host a property for the slice
      // 2> all the nodes that _currently_ host a property for the slice.

      // So, remove a replica from the nodes that have too many
      removeOverallocatedReplicas();

      // prune replicas belonging to a slice that have the property currently assigned from the list of replicas
      // that could host the property.
      for (Map.Entry<String, List<SliceReplica>> entProp : nodesHostingProp.entrySet()) {
        for (SliceReplica srHosting : entProp.getValue()) {
          removeSliceAlreadyHostedFromPossibles(srHosting.slice.getName());
        }
      }

      // Assemble the list of slices that do not have any replica hosting the property:
      for (Map.Entry<String, List<SliceReplica>> ent : nodesHostingReplicas.entrySet()) {
        ListIterator<SliceReplica> iter = ent.getValue().listIterator();
        while (iter.hasNext()) {
          SliceReplica sr = iter.next();
          shardsNeedingHosts.add(sr.slice.getName());
        }
      }

      // At this point, nodesHostingProp should contain _only_ lists of replicas that belong to slices that do _not_
      // have any replica hosting the property. So let's assign them.

      balanceUnassignedReplicas();
      for (Slice newSlice : changedSlices.values()) {
        clusterState = updater.updateSlice(clusterState, collectionName, newSlice);
      }
      return true;
    }

