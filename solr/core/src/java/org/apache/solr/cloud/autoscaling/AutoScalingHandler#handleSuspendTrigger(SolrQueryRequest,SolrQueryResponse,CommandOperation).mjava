  private void handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {
    String triggerName = op.getStr(NAME);

    if (triggerName == null || triggerName.trim().length() == 0) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "The trigger name cannot be null or empty");
    }

    String timeout = op.getStr(TIMEOUT, null);
    Date resumeTime = null;
    if (timeout != null) {
      try {
        int timeoutSeconds = parseHumanTime(timeout);
        resumeTime = new Date(TimeUnit.MILLISECONDS.convert(timeSource.getTime(), TimeUnit.NANOSECONDS)
            + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));
      } catch (IllegalArgumentException e) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Invalid 'timeout' value for suspend trigger: " + triggerName);
      }
    }

    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());
    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get("triggers");
    Set<String> changed = new HashSet<>();

    if (triggers == null) {
      if (Policy.EACH.equals(triggerName)) {
      // no harm no foul
      } else {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "No trigger exists with name: " + triggerName);
      }
    } else {
      if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "No trigger exists with name: " + triggerName);
      }
      for (Map.Entry<String, Object> entry : triggers.entrySet()) {
        if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {
          Map<String, Object> triggerProps = (Map<String, Object>) entry.getValue();
          Boolean enabled = (Boolean)triggerProps.get(ENABLED);
          if (enabled == null || enabled) {
            triggerProps.put(ENABLED, false);
            if (resumeTime != null) {
              triggerProps.put(RESUME_AT, resumeTime.getTime());
            }
            zkSetTrigger(container.getZkController().getZkStateReader(), entry.getKey(), triggerProps);
            changed.add(entry.getKey());
          }
        }
      }
    }
    rsp.getValues().add("changed", changed);
    rsp.getValues().add("result", "success");
  }

