  private Instant parseStartTime(Date now, String startTimeStr, String timeZoneStr) throws TriggerValidationException {
    try {
      // try parsing startTime as an ISO-8601 date time string
      return DateMathParser.parseMath(now, startTimeStr).toInstant();
    } catch (SolrException e) {
      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code) {
        throw new TriggerValidationException("startTime", "error parsing value '" + startTimeStr + "': " + e.toString());
      }
    }
    if (timeZoneStr == null)  {
      throw new TriggerValidationException("timeZone",
          "Either 'startTime' should be an ISO-8601 date time string or 'timeZone' must be not be null");
    }
    TimeZone timeZone = TimeZone.getTimeZone(timeZoneStr);
    DateTimeFormatter dateTimeFormatter = new DateTimeFormatterBuilder()
        .append(DateTimeFormatter.ISO_LOCAL_DATE).appendPattern("['T'[HH[:mm[:ss]]]]")
        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)
        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)
        .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)
        .toFormatter(Locale.ROOT).withZone(timeZone.toZoneId());
    try {
      return Instant.from(dateTimeFormatter.parse(startTimeStr));
    } catch (Exception e) {
      throw new TriggerValidationException("startTime", "error parsing startTime '" + startTimeStr + "': " + e.toString());
    }
  }

