  public List<ZkWriteCommand> downNode(ClusterState clusterState, ZkNodeProps message) {
    List<ZkWriteCommand> zkWriteCommands = new ArrayList<>();
    String nodeName = message.getStr(ZkStateReader.NODE_NAME_PROP);

    log.debug("DownNode state invoked for node: {}", nodeName);

    Map<String, DocCollection> collections = clusterState.getCollectionsMap();
    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {
      String collection = entry.getKey();
      DocCollection docCollection = entry.getValue();

      Map<String,Slice> slicesCopy = new LinkedHashMap<>(docCollection.getSlicesMap());

      boolean needToUpdateCollection = false;
      for (Entry<String, Slice> sliceEntry : slicesCopy.entrySet()) {
        Slice slice = sliceEntry.getValue();
        Map<String, Replica> newReplicas = slice.getReplicasCopy();

        Collection<Replica> replicas = slice.getReplicas();
        for (Replica replica : replicas) {
          String rNodeName = replica.getNodeName();
          if (rNodeName == null) {
            throw new RuntimeException("Replica without node name! " + replica);
          }
          if (rNodeName.equals(nodeName)) {
            log.debug("Update replica state for {} to {}", replica, Replica.State.DOWN);
            Map<String, Object> props = replica.shallowCopy();
            props.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());
            Replica newReplica = new Replica(replica.getName(), props, collection, slice.getName());
            newReplicas.put(replica.getName(), newReplica);
            needToUpdateCollection = true;
          }
        }

        Slice newSlice = new Slice(slice.getName(), newReplicas, slice.shallowCopy(),collection);
        slicesCopy.put(slice.getName(), newSlice);
      }

      if (needToUpdateCollection) {
        zkWriteCommands.add(new ZkWriteCommand(collection, docCollection.copyWithSlices(slicesCopy)));
      }
    }

    return zkWriteCommands;
  }

