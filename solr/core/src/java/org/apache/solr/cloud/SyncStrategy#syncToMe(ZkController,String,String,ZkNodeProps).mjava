  private void syncToMe(ZkController zkController, String collection,
      String shardId, ZkNodeProps leaderProps) throws MalformedURLException,
      SolrServerException, IOException {
    
    // sync everyone else
    // TODO: we should do this in parallel at least
    List<ZkCoreNodeProps> nodes = zkController
        .getZkStateReader()
        .getReplicaProps(collection, shardId,
            leaderProps.get(ZkStateReader.NODE_NAME_PROP),
            leaderProps.get(ZkStateReader.CORE_NAME_PROP), ZkStateReader.ACTIVE);
    if (nodes == null) {
      // System.out.println("I have no replicas");
      // I have no replicas
      return;
    }
    //System.out.println("tell my replicas to sync");
    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);
    for (ZkCoreNodeProps node : nodes) {
      try {
//         System.out
//             .println("try and ask " + node.getCoreUrl() + " to sync");
        log.info("try and ask " + node.getCoreUrl() + " to sync");
        requestSync(zkLeader.getCoreUrl(), node.getCoreName());

      } catch (Exception e) {
        SolrException.log(log, "Error syncing replica to leader", e);
      }
    }
    
    
    for(;;) {
      ShardResponse srsp = shardHandler.takeCompletedOrError();
      if (srsp == null) break;
      boolean success = handleResponse(srsp);
      //System.out.println("got response:" + success);
      if (!success) {
         try {
           log.info("Sync failed - asking replica to recover.");
           //System.out.println("Sync failed - asking replica to recover.");
           RequestRecovery recoverRequestCmd = new RequestRecovery();
           recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);
           recoverRequestCmd.setCoreName(((SyncShardRequest)srsp.getShardRequest()).coreName);
           
           CommonsHttpSolrServer server = new CommonsHttpSolrServer(zkLeader.getBaseUrl());
           server.request(recoverRequestCmd);
         } catch (Exception e) {
           log.info("Could not tell a replica to recover", e);
         }
         shardHandler.cancelAll();
        break;
      }
    }
  }

