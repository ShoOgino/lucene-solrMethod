    public MetricBreachedEvent(String source, String collection, String shard, String preferredOp, long eventTime, String metric, Map<String, Number> hotNodes) {
      super(TriggerEventType.METRIC, source, eventTime, null);
      properties.put(METRIC, metric);
      properties.put(AutoScalingParams.NODE, hotNodes);
      if (!collection.equals(Policy.ANY)) {
        properties.put(AutoScalingParams.COLLECTION, collection);
      }
      if (!shard.equals(Policy.ANY))  {
        properties.put(AutoScalingParams.SHARD, shard);
      }
      properties.put(PREFERRED_OP, preferredOp);

      // specify requested ops
      List<Op> ops = new ArrayList<>(hotNodes.size());
      for (String n : hotNodes.keySet()) {
        Op op = new Op(CollectionParams.CollectionAction.get(preferredOp));
        op.setHint(Suggester.Hint.SRC_NODE, n);
        if (!collection.equals(Policy.ANY)) {
          if (!shard.equals(Policy.ANY)) {
            op.setHint(Suggester.Hint.COLL_SHARD, new Pair<>(collection, shard));
          } else {
            op.setHint(Suggester.Hint.COLL, collection);
          }
        }
        ops.add(op);
      }
      properties.put(TriggerEvent.REQUESTED_OPS, ops);
    }

