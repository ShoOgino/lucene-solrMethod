  static HashMap<String, ReplicaCount> getNodeNameVsShardCount(String collectionName,
                                                                       ClusterState clusterState, List<String> createNodeList) {
    HashMap<String, ReplicaCount> nodeNameVsShardCount = new HashMap<>();
    List<String> liveNodes = createNodeList == null || createNodeList.isEmpty() ?
        new ArrayList<>(clusterState.getLiveNodes()) :
        checkLiveNodes(createNodeList, clusterState);

    for (String s : liveNodes) {
      nodeNameVsShardCount.put(s, new ReplicaCount(s));
    }

    // if we were given a list, just use that, don't worry about counts
    if (createNodeList != null) { // Overrides petty considerations about maxShardsPerNode
      return nodeNameVsShardCount;
    }

    // if we get here we were not given a createNodeList, build a map with real counts.
    DocCollection coll = clusterState.getCollection(collectionName);
    int maxShardsPerNode = coll.getMaxShardsPerNode() == -1 ? Integer.MAX_VALUE : coll.getMaxShardsPerNode();
    Map<String, DocCollection> collections = clusterState.getCollectionsMap();
    for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {
      DocCollection c = entry.getValue();
      //identify suitable nodes  by checking the no:of cores in each of them
      for (Slice slice : c.getSlices()) {
        Collection<Replica> replicas = slice.getReplicas();
        for (Replica replica : replicas) {
          ReplicaCount count = nodeNameVsShardCount.get(replica.getNodeName());
          if (count != null) {
            count.totalNodes++; // Used to "weigh" whether this node should be used later.
            if (entry.getKey().equals(collectionName)) {
              count.thisCollectionNodes++;
              if (count.thisCollectionNodes >= maxShardsPerNode) nodeNameVsShardCount.remove(replica.getNodeName());
            }
          }
        }
      }
    }

    return nodeNameVsShardCount;
  }

