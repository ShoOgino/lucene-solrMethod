  public static SimCloudManager createCluster(SolrCloudManager other, AutoScalingConfig config, TimeSource timeSource) throws Exception {
    SimDistribStateManager distribStateManager = new SimDistribStateManager(SimDistribStateManager.createNewRootNode());
    distribStateManager.copyFrom(other.getDistribStateManager(), false);
    SimCloudManager cloudManager = new SimCloudManager(timeSource, distribStateManager);
    if (config != null) {
      cloudManager.getSimDistribStateManager().simSetAutoScalingConfig(config);
    } else {
      config = cloudManager.getDistribStateManager().getAutoScalingConfig();
    }
    Set<String> nodeTags = new HashSet<>(SimUtils.COMMON_NODE_TAGS);
    nodeTags.addAll(config.getPolicy().getParamNames());
    Set<String> replicaTags = new HashSet<>(SimUtils.COMMON_REPLICA_TAGS);
    replicaTags.addAll(config.getPolicy().getPerReplicaAttributes());
    cloudManager.getSimClusterStateProvider().copyFrom(other.getClusterStateProvider());
    for (String node : other.getClusterStateProvider().getLiveNodes()) {
      SimClusterStateProvider simClusterStateProvider = cloudManager.getSimClusterStateProvider();
      cloudManager.getSimNodeStateProvider().simSetNodeValues(node, other.getNodeStateProvider().getNodeValues(node, nodeTags));
      Map<String, Map<String, List<ReplicaInfo>>> infos = other.getNodeStateProvider().getReplicaInfo(node, replicaTags);
      simClusterStateProvider.simSetReplicaValues(node, infos, true);
    }
    SimUtils.checkConsistency(cloudManager, config);
    return cloudManager;
  }

