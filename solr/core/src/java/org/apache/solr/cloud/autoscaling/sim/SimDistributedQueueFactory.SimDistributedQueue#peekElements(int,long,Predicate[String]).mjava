    @Override
    public Collection<Pair<String, byte[]>> peekElements(int max, long waitMillis, Predicate<String> acceptFilter) throws Exception {
      updateLock.lockInterruptibly();
      try {
        List<Pair<String, byte[]>> res = new LinkedList<>();
        final int maximum = max < 0 ? Integer.MAX_VALUE : max;
        final AtomicReference<Pair<String, byte[]>> pairRef = new AtomicReference<>();
        queue.forEach(pair -> {
          if (acceptFilter != null && !acceptFilter.test(pair.first())) {
            return;
          }
          if (res.size() < maximum) {
            pairRef.set(pair);
            res.add(pair);
          }
        });
        if (res.size() < maximum && waitMillis > 0) {
          long waitNanos = TimeUnit.MILLISECONDS.toNanos(waitMillis);
          waitNanos = changed.awaitNanos(waitNanos);
          if (waitNanos < 0) {
            return res;
          }
          AtomicBoolean seen = new AtomicBoolean(false);
          queue.forEach(pair -> {
            if (!seen.get()) {
              if (pairRef.get() == null) {
                seen.set(true);
              } else {
                if (pairRef.get().first().equals(pair.first())) {
                  seen.set(true);
                  return;
                }
              }
            }
            if (!seen.get()) {
              return;
            }
            if (!acceptFilter.test(pair.first())) {
              return;
            }
            if (res.size() < maximum) {
              res.add(pair);
              pairRef.set(pair);
            } else {
              return;
            }
          });
        }
        return res;
      } finally {
        updateLock.unlock();
      }
    }

