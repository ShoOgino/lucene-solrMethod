  @Deprecated
  private void startLeaderInitiatedRecoveryOnReplicas(String coreName) throws Exception {
    try (SolrCore core = cc.getCore(coreName)) {
      CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();
      String coll = cloudDesc.getCollectionName();
      String shardId = cloudDesc.getShardId();
      String coreNodeName = cloudDesc.getCoreNodeName();

      if (coll == null || shardId == null) {
        log.error("Cannot start leader-initiated recovery on new leader (core="+
            coreName+",coreNodeName=" + coreNodeName + ") because collection and/or shard is null!");
        return;
      }

      String znodePath = zkController.getLeaderInitiatedRecoveryZnodePath(coll, shardId);
      List<String> replicas = null;
      try {
        replicas = zkClient.getChildren(znodePath, null, false);
      } catch (NoNodeException nne) {
        // this can be ignored
      }

      if (replicas != null && replicas.size() > 0) {
        // set of replicas which is running in new LIR but lirState=DOWN
        Set<String> replicasMustBeInLowerTerm = new HashSet<>();
        for (String replicaCoreNodeName : replicas) {

          if (coreNodeName.equals(replicaCoreNodeName))
            continue; // added safe-guard so we don't mark this core as down

          final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(coll, shardId, replicaCoreNodeName);
          if (lirState == Replica.State.DOWN || lirState == Replica.State.RECOVERY_FAILED) {
            log.info("After core={} coreNodeName={} was elected leader, a replica coreNodeName={} was found in state: "
                + lirState.toString() + " and needing recovery.", coreName, coreNodeName, replicaCoreNodeName);
            List<Replica> replicasProps =
                zkController.getZkStateReader().getClusterState().getCollection(collection)
                    .getSlice(shardId).getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));

            if (replicasProps != null && replicasProps.size() > 0) {
              ZkCoreNodeProps coreNodeProps = null;
              for (Replica p : replicasProps) {
                if (p.getName().equals(replicaCoreNodeName)) {
                  coreNodeProps = new ZkCoreNodeProps(p);
                  break;
                }
              }

              if (zkController.getShardTerms(collection, shardId).registered(replicaCoreNodeName)) {
                replicasMustBeInLowerTerm.add(replicaCoreNodeName);
              } else {
                zkController.ensureReplicaInLeaderInitiatedRecovery(cc,
                    collection, shardId, coreNodeProps, core.getCoreDescriptor(),
                    false /* forcePublishState */);
              }
            }
          }
        }
        // these replicas registered their terms so it is running with the new LIR implementation
        // we can put this replica into recovery by increase our terms
        zkController.getShardTerms(collection, shardId).ensureTermsIsHigher(coreNodeName, replicasMustBeInLowerTerm);
      }
    } // core gets closed automagically
  }

