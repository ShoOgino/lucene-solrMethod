  /**
   * Removes the head of the queue and returns it, blocks until it succeeds.
   * 
   * @return The former head of the queue
   * @throws NoSuchElementException
   * @throws KeeperException
   * @throws InterruptedException
   */
  public byte[] take() throws KeeperException, InterruptedException {
    TreeMap<Long,String> orderedChildren;
    // Same as for element. Should refactor this.
    while (true) {
      LatchChildWatcher childWatcher = new LatchChildWatcher();
      try {
        orderedChildren = orderedChildren(childWatcher);
      } catch (KeeperException.NoNodeException e) {
        zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);
        continue;
      }
      if (orderedChildren.size() == 0) {
        childWatcher.await();
        continue;
      }
      
      for (String headNode : orderedChildren.values()) {
        String path = dir + "/" + headNode;
        try {
          byte[] data = zookeeper.getData(path, false, null);
          zookeeper.delete(path, -1);
          return data;
        } catch (KeeperException.NoNodeException e) {
          // Another client deleted the node first.
        }
      }
    }
  }

