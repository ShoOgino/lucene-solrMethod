  /**
   * Prepare collection and node / host names for redaction.
   * @param clusterState cluster state
   */
  public static RedactionUtils.RedactionContext getRedactionContext(ClusterState clusterState) {
    RedactionUtils.RedactionContext ctx = new RedactionUtils.RedactionContext();
    TreeSet<String> names = new TreeSet<>(clusterState.getLiveNodes());
    for (String nodeName : names) {
      String urlString = Utils.getBaseUrlForNodeName(nodeName, "http");
      try {
        URL u = new URL(urlString);
        // protocol format
        String hostPort = u.getHost() + ":" + u.getPort();
        ctx.addName(u.getHost() + ":" + u.getPort(), RedactionUtils.NODE_REDACTION_PREFIX);
        // node name format
        ctx.addEquivalentName(hostPort, u.getHost() + "_" + u.getPort() + "_", RedactionUtils.NODE_REDACTION_PREFIX);
      } catch (MalformedURLException e) {
        log.warn("Invalid URL for node name " + nodeName + ", replacing including protocol and path", e);
        ctx.addName(urlString, RedactionUtils.NODE_REDACTION_PREFIX);
        ctx.addEquivalentName(urlString, Utils.getBaseUrlForNodeName(nodeName, "https"), RedactionUtils.NODE_REDACTION_PREFIX);
      }
    }
    names.clear();
    names.addAll(clusterState.getCollectionStates().keySet());
    names.forEach(n -> ctx.addName(n, RedactionUtils.COLL_REDACTION_PREFIX));
    return ctx;
  }

