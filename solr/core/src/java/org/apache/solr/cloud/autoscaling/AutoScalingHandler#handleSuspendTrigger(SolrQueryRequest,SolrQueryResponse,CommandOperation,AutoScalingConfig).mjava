  private AutoScalingConfig handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,
                                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {
    String triggerName = op.getStr(NAME);
    if (op.hasError()) return currentConfig;
    String timeout = op.getStr(TIMEOUT, null);
    Date resumeTime = null;
    if (timeout != null) {
      try {
        int timeoutSeconds = parseHumanTime(timeout);
        resumeTime = new Date(TimeUnit.MILLISECONDS.convert(timeSource.getTimeNs(), TimeUnit.NANOSECONDS)
            + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));
      } catch (IllegalArgumentException e) {
        op.addError("Invalid 'timeout' value for suspend trigger: " + triggerName);
        return currentConfig;
      }
    }

    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();
    Set<String> changed = new HashSet<>();

    if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {
      op.addError("No trigger exists with name: " + triggerName);
      return currentConfig;
    }
    Map<String, AutoScalingConfig.TriggerConfig> newTriggers = new HashMap<>();
    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {
      if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {
        AutoScalingConfig.TriggerConfig trigger = entry.getValue();
        if (trigger.enabled) {
          trigger = trigger.withEnabled(false);
          if (resumeTime != null) {
            trigger = trigger.withProperty(RESUME_AT, resumeTime.getTime());
          }
          newTriggers.put(entry.getKey(), trigger);
          changed.add(trigger.name);
        } else {
          newTriggers.put(entry.getKey(), entry.getValue());
        }
      } else {
        newTriggers.put(entry.getKey(), entry.getValue());
      }
    }
    rsp.getValues().add("changed", changed);
    if (!changed.isEmpty()) {
      currentConfig = currentConfig.withTriggerConfigs(newTriggers);
    }
    return currentConfig;
  }

