  /**
   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}
   * @param req request
   * @return request payload and parameters converted to V1 params
   */
  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {
    Map<String, Object> reqMap = new HashMap<>();
    req.toMap(reqMap);
    String path = (String)reqMap.get("path");
    if (!(path.startsWith("/c/") || path.startsWith("/collections/")) || path.length() < 4) {
      throw new UnsupportedOperationException("Unsupported V2 request path: " + reqMap);
    }
    Map<String, Object> cmd;
    Object cmdObj = reqMap.get("command");
    if (cmdObj instanceof String) {
      cmd = (Map<String, Object>)Utils.fromJSONString((String)cmdObj);
    } else if (cmdObj instanceof Map) {
      cmd = (Map<String, Object>)cmdObj;
    } else {
      throw new UnsupportedOperationException("Unsupported 'command': " + cmdObj + " (of type " + cmdObj.getClass() + ")");
    }
    if (cmd.size() != 1) {
      throw new UnsupportedOperationException("Unsupported multi-command V2 request: " + reqMap);
    }
    String a = cmd.keySet().iterator().next();
    ModifiableSolrParams params = new ModifiableSolrParams();
    params.set("path", "/admin/collections");
    if (req.getParams() != null) {
      params.add(req.getParams());
    }
    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);
    for (Map.Entry<String, Object> e : reqParams.entrySet()) {
      params.add(e.getKey(), e.getValue().toString());
    }
    // trim the leading /
    path = path.substring(1);
    String[] pathEls = path.split("/");
    if (pathEls.length < 2) {
      throw new UnsupportedOperationException("Unsupported V2 request path: " + reqMap);
    }
    params.set(CollectionAdminParams.COLLECTION, pathEls[1]);
    if (pathEls.length > 3) {
      if (!pathEls[2].equals("shards")) {
        throw new UnsupportedOperationException("Invalid V2 request path: expected 'shards' but was '" + pathEls[2] + "'");
      }
      if (!pathEls[3].isBlank()) {
        params.set("shard", pathEls[3]);
      }
    }
    if (pathEls.length > 4 && !pathEls[4].isBlank()) {
      params.set("replica", pathEls[4]);
    }
    // re-map from v2 to v1 action
    a = v2v1Mapping.get(a);
    if (a == null) {
      throw new UnsupportedOperationException("Unsupported V2 request: " + reqMap);
    }
    params.add(CoreAdminParams.ACTION, a);
    return params;
  }

