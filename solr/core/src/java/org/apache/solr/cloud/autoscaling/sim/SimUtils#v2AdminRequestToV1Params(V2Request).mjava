  /**
   * Convert a V2 {@link org.apache.solr.client.solrj.request.CollectionAdminRequest} to regular {@link org.apache.solr.common.params.SolrParams}
   * @param req request
   * @return payload converted to V1 params
   */
  public static ModifiableSolrParams v2AdminRequestToV1Params(V2Request req) {
    Map<String, Object> reqMap = new HashMap<>();
    ((V2Request)req).toMap(reqMap);
    String path = (String)reqMap.get("path");
    if (!path.startsWith("/c/") || path.length() < 4) {
      throw new UnsupportedOperationException("Unsupported V2 request path: " + reqMap);
    }
    Map<String, Object> cmd = (Map<String, Object>)reqMap.get("command");
    if (cmd.size() != 1) {
      throw new UnsupportedOperationException("Unsupported multi-command V2 request: " + reqMap);
    }
    String a = cmd.keySet().iterator().next();
    ModifiableSolrParams params = new ModifiableSolrParams();
    params.add(CollectionAdminParams.COLLECTION, path.substring(3));
    if (req.getParams() != null) {
      params.add(req.getParams());
    }
    Map<String, Object> reqParams = (Map<String, Object>)cmd.get(a);
    for (Map.Entry<String, Object> e : reqParams.entrySet()) {
      params.add(e.getKey(), e.getValue().toString());
    }
    // re-map from v2 to v1 action
    a = v2v1Mapping.get(a);
    if (a == null) {
      throw new UnsupportedOperationException("Unsupported V2 request: " + reqMap);
    }
    params.add(CoreAdminParams.ACTION, a);
    return params;
  }

