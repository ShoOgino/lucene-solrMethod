  @Override
  void runLeaderProcess(boolean weAreReplacement)
      throws KeeperException, InterruptedException, IOException {
    if (cc != null) {
      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);
      SolrCore core = null;
      try {
     
        core = cc.getCore(coreName);

        if (core == null) {
          cancelElection();
          throw new SolrException(ErrorCode.SERVER_ERROR, "Fatal Error, SolrCore not found:" + coreName + " in " + cc.getCoreNames());
        }
        // should I be leader?
        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {
          // System.out.println("there is a better leader candidate it appears");
          rejoinLeaderElection(leaderSeqPath, core);
          return;
        }

        if (weAreReplacement) {
          if (zkClient.exists(leaderPath, true)) {
            zkClient.delete(leaderPath, -1, true);
          }
//          System.out.println("I may be the new Leader:" + leaderPath
//              + " - I need to try and sync");
          boolean success = syncStrategy.sync(zkController, core, leaderProps);
          if (!success && anyoneElseActive()) {
            rejoinLeaderElection(leaderSeqPath, core);
            return;
          } 
        }
        
        // If I am going to be the leader I have to be active
        // System.out.println("I am leader go active");
        core.getUpdateHandler().getSolrCoreState().cancelRecovery();
        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);
        
      } finally {
        if (core != null ) {
          core.close();
        }
      }
      
    }
    
    super.runLeaderProcess(weAreReplacement);
  }

