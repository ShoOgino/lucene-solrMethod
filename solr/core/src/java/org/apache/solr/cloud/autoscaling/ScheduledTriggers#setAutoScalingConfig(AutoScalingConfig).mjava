  /**
   * Set the current autoscaling config. This is invoked by {@link OverseerTriggerThread} when autoscaling.json is updated,
   * and it re-initializes trigger listeners and other properties used by the framework
   * @param autoScalingConfig current autoscaling.json
   */
  public void setAutoScalingConfig(AutoScalingConfig autoScalingConfig) {
    Map<String, Object> currentProps = new HashMap<>(DEFAULT_PROPERTIES);
    if (this.autoScalingConfig != null) {
      currentProps.putAll(this.autoScalingConfig.getProperties());
    }
    for (Map.Entry<String, Object> entry : currentProps.entrySet()) {
      Map<String, Object> newProps = autoScalingConfig.getProperties();
      String key = entry.getKey();
      if (newProps.containsKey(key) && !entry.getValue().equals(newProps.get(key))) {
        log.debug("Changing value of autoscaling property: {} from: {} to: {}", key, entry.getValue(), newProps.get(key));
        switch (key) {
          case TRIGGER_SCHEDULE_DELAY_SECONDS:
            triggerDelay.set(((Number) newProps.get(key)).intValue());
            synchronized (this) {
              scheduledTriggers.forEach((s, scheduledTrigger) -> {
                if (scheduledTrigger.scheduledFuture.cancel(false)) {
                  scheduledTrigger.scheduledFuture = scheduledThreadPoolExecutor.scheduleWithFixedDelay(
                      scheduledTrigger, 0,
                      cloudManager.getTimeSource().convertDelay(TimeUnit.SECONDS, triggerDelay.get(), TimeUnit.MILLISECONDS),
                      TimeUnit.MILLISECONDS);
                } else  {
                  log.debug("Failed to cancel scheduled task: {}", s);
                }
              });
            }
            break;
          case TRIGGER_COOLDOWN_PERIOD_SECONDS:
            cooldownPeriod.set(TimeUnit.SECONDS.toNanos(((Number) newProps.get(key)).longValue()));
            break;
          case TRIGGER_CORE_POOL_SIZE:
            this.scheduledThreadPoolExecutor.setCorePoolSize(((Number) newProps.get(key)).intValue());
            break;
        }
      }
    }
    this.autoScalingConfig = autoScalingConfig;

    // reset cooldown
    cooldownStart.set(cloudManager.getTimeSource().getTime() - cooldownPeriod.get());

    listeners.setAutoScalingConfig(autoScalingConfig);
  }

