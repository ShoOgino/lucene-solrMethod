  @Override
  void runLeaderProcess(String leaderSeqPath, boolean weAreReplacement, SolrCore startupCore)
      throws KeeperException, InterruptedException, IOException {
    if (cc != null) {
      String coreName = leaderProps.get(ZkStateReader.CORE_NAME_PROP);
      SolrCore core = null;
      try {
        // the first time we are run, we will get a startupCore - after
        // we will get null and must use cc.getCore
        if (startupCore == null) {
          core = cc.getCore(coreName);
        } else {
          core = startupCore;
        }
        if (core == null) {
          throw new SolrException(ErrorCode.SERVER_ERROR, "Core not found:" + coreName);
        }
        // should I be leader?
        if (weAreReplacement && !shouldIBeLeader(leaderProps)) {
          // System.out.println("there is a better leader candidate it appears");
          rejoinLeaderElection(leaderSeqPath, core);
          return;
        }
        
        if (weAreReplacement) {
          if (zkClient.exists(leaderPath, true)) {
            zkClient.delete(leaderPath, -1, true);
          }
//          System.out.println("I may be the new Leader:" + leaderPath
//              + " - I need to try and sync");
          boolean success = syncStrategy.sync(zkController, core, leaderProps);
          if (!success) {
            // TODO: what if no one can be the leader in a loop?
            // perhaps we look down the list and if no one is active, we
            // accept leader role anyhow
            core.getUpdateHandler().getSolrCoreState().doRecovery(core);
            
            rejoinLeaderElection(leaderSeqPath, core);
            return;
          } 
        }
        
        // If I am going to be the leader I have to be active
        
        core.getUpdateHandler().getSolrCoreState().cancelRecovery();
        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);
        
      } finally {
        if (core != null && startupCore == null) {
          core.close();
        }
      }
      
    }
    
    super.runLeaderProcess(leaderSeqPath, weAreReplacement, startupCore);
  }

