  private String getLeader(final CloudDescriptor cloudDesc) {
    
    String collection = cloudDesc.getCollectionName();
    String shardId = cloudDesc.getShardId();
    // rather than look in the cluster state file, we go straight to the zknodes
    // here, because on cluster restart there could be stale leader info in the
    // cluster state node that won't be updated for a moment
    String leaderUrl;
    try {
      leaderUrl = getLeaderProps(collection, cloudDesc.getShardId())
          .getCoreUrl();
      
      // now wait until our currently cloud state contains the latest leader
      String clusterStateLeader = zkStateReader.getLeaderUrl(collection,
          shardId, 30000);
      int tries = 0;
      while (!leaderUrl.equals(clusterStateLeader)) {
        if (tries == 60) {
          throw new SolrException(ErrorCode.SERVER_ERROR,
              "There is conflicting information about the leader of shard: "
                  + cloudDesc.getShardId() + " our state says:"
                  + clusterStateLeader + " but zookeeper says:" + leaderUrl);
        }
        Thread.sleep(1000);
        tries++;
        clusterStateLeader = zkStateReader.getLeaderUrl(collection, shardId,
            30000);
        leaderUrl = getLeaderProps(collection, cloudDesc.getShardId())
            .getCoreUrl();
      }
      
    } catch (Exception e) {
      log.error("Error getting leader from zk", e);
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
          "Error getting leader from zk", e);
    } 
    return leaderUrl;
  }

