  /**
   * Returns the data at the first element of the queue, or null if the queue is
   * empty after wait ms.
   * 
   * @param wait max wait time in ms.
   * @return data at the first element of the queue, or null.
   */
  public QueueEvent peek(long wait) throws KeeperException, InterruptedException {
    TimerContext time = null;
    if (wait == Long.MAX_VALUE) {
      time = stats.time(dir + "_peek_wait_forever");
    } else {
      time = stats.time(dir + "_peek_wait" + wait);
    }
    try {
      if (wait == 0) {
        return element();
      }

      TreeMap<Long, String> orderedChildren;
      boolean waitedEnough = false;
      while (true) {
        LatchChildWatcher childWatcher = new LatchChildWatcher();
        try {
          orderedChildren = orderedChildren(childWatcher);
        } catch (KeeperException.NoNodeException e) {
          zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT, true);
          continue;
        }
        if (waitedEnough) {
          if (orderedChildren.isEmpty()) return null;
        }
        if (orderedChildren.size() == 0) {
          childWatcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);
          waitedEnough = wait != Long.MAX_VALUE;
          continue;
        }

        for (String headNode : orderedChildren.values()) {
          String path = dir + "/" + headNode;
          try {
            byte[] data = zookeeper.getData(path, null, null, true);
            return new QueueEvent(path, data, childWatcher.getWatchedEvent());
          } catch (KeeperException.NoNodeException e) {
            // Another client deleted the node first.
          }
        }
      }
    } finally {
      time.stop();
    }
  }

