  Map<Position, String> identifyNodes(ClusterState clusterState,
                                      List<String> nodeList,
                                      ZkNodeProps message,
                                      List<String> shardNames,
                                      int numNrtReplicas, 
                                      int numTlogReplicas,
                                      int numPullReplicas) throws KeeperException, InterruptedException {
    List<Map> rulesMap = (List) message.get("rule");
    String policyName = message.getStr(POLICY);
    Map autoScalingJson = Utils.getJson(zkStateReader.getZkClient(), SOLR_AUTOSCALING_CONF_PATH, true);

    if (rulesMap == null && policyName == null) {
      int i = 0;
      Map<Position, String> result = new HashMap<>();
      for (String aShard : shardNames) {
        for (int j = 0; j < numNrtReplicas; j++){
          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));
          i++;
        }
        for (int j = 0; j < numTlogReplicas; j++){
          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));
          i++;
        }
        for (int j = 0; j < numPullReplicas; j++){
          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));
          i++;
        }
      }
      return result;
    } else {
      if (numTlogReplicas + numPullReplicas != 0) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
            Replica.Type.TLOG + " or " + Replica.Type.PULL + " replica types not supported with placement rules or cluster policies");
      }
    }

    if (policyName != null || autoScalingJson.get(Policy.CLUSTER_POLICY) != null) {
      return Assign.getPositionsUsingPolicy(message.getStr(COLLECTION_PROP, message.getStr(NAME)),
          shardNames, numNrtReplicas, policyName, zkStateReader);

    } else {
      List<Rule> rules = new ArrayList<>();
      for (Object map : rulesMap) rules.add(new Rule((Map) map));

      Map<String, Integer> sharVsReplicaCount = new HashMap<>();

      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);
      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,
          sharVsReplicaCount,
          (List<Map>) message.get(SNITCH),
          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard
          nodeList,
          overseer.getZkController().getCoreContainer(),
          clusterState);

      return replicaAssigner.getNodeMappings();
    }
  }

