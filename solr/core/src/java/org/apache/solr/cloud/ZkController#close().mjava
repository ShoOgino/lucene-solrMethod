  /**
   * Closes the underlying ZooKeeper client.
   */
  public void close() {
    this.isClosed = true;

    ForkJoinPool customThreadPool = new ForkJoinPool(10);

    customThreadPool.submit(() -> Collections.singleton(overseerElector.getContext()).parallelStream().forEach(c -> {
      IOUtils.closeQuietly(c);
    }));

    customThreadPool.submit(() -> Collections.singleton(overseer).parallelStream().forEach(c -> {
      IOUtils.closeQuietly(c);
    }));

    synchronized (collectionToTerms) {
      customThreadPool.submit(() -> collectionToTerms.values().parallelStream().forEach(c -> {
        c.close();
      }));
    }
    try {

      customThreadPool.submit(() -> replicateFromLeaders.values().parallelStream().forEach(c -> {
        c.stopReplication();
      }));

      customThreadPool.submit(() -> electionContexts.values().parallelStream().forEach(c -> {
        IOUtils.closeQuietly(c);
      }));

    } finally {

      customThreadPool.submit(() -> Collections.singleton(cloudSolrClient).parallelStream().forEach(c -> {
        IOUtils.closeQuietly(c);
      }));
      customThreadPool.submit(() -> Collections.singleton(cloudManager).parallelStream().forEach(c -> {
        IOUtils.closeQuietly(c);
      }));

      try {
        try {
          zkStateReader.close();
        } catch (Exception e) {
          log.error("Error closing zkStateReader", e);
        }
      } finally {
        try {
          zkClient.close();
        } catch (Exception e) {
          log.error("Error closing zkClient", e);
        } finally {

          // just in case the OverseerElectionContext managed to start another Overseer
          IOUtils.closeQuietly(overseer);

          ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);
        }

      }

    }
    assert ObjectReleaseTracker.release(this);
  }

