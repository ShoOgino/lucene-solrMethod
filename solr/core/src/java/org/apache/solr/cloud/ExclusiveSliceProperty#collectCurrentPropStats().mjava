  private boolean collectCurrentPropStats() {
    int maxAssigned = 0;
    // Get a list of potential replicas that can host the property _and_ their counts
    // Move any obvious entries to a list of replicas to change the property on
    Set<String> allHosts = new HashSet<>();
    for (Slice slice : collection.getSlices()) {
      boolean sliceHasProp = false;
      for (Replica replica : slice.getReplicas()) {
        if (onlyActiveNodes && isActive(replica) == false) {
          if (StringUtils.isNotBlank(replica.getStr(property))) {
            removeProp(slice, replica.getName()); // Note, we won't be committing this to ZK until later.
          }
          continue;
        }
        allHosts.add(replica.getNodeName());
        String nodeName = replica.getNodeName();
        if (StringUtils.isNotBlank(replica.getStr(property))) {
          if (sliceHasProp) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                "'" + BALANCESHARDUNIQUE + "' should only be called for properties that have at most one member " +
                    "in any slice with the property set. No action taken.");
          }
          if (nodesHostingProp.containsKey(nodeName) == false) {
            nodesHostingProp.put(nodeName, new ArrayList<>());
          }
          nodesHostingProp.get(nodeName).add(new SliceReplica(slice, replica));
          ++assigned;
          maxAssigned = Math.max(maxAssigned, nodesHostingProp.get(nodeName).size());
          sliceHasProp = true;
        }
        if (nodesHostingReplicas.containsKey(nodeName) == false) {
          nodesHostingReplicas.put(nodeName, new ArrayList<>());
        }
        nodesHostingReplicas.get(nodeName).add(new SliceReplica(slice, replica));
      }
    }

    // If the total number of already-hosted properties assigned to nodes
    // that have potential to host leaders is equal to the slice count _AND_ none of the current nodes has more than
    // the max number of properties, there's nothing to do.
    origMaxPropPerNode = collection.getSlices().size() / allHosts.size();

    // Some nodes can have one more of the proeprty if the numbers aren't exactly even.
    origModulo = collection.getSlices().size() % allHosts.size();
    if (origModulo > 0) {
      origMaxPropPerNode++;  // have to have some nodes with 1 more property.
    }

    // We can say for sure that we need to rebalance if we don't have as many assigned properties as slices.
    if (assigned != collection.getSlices().size()) {
      return true;
    }

    // Make sure there are no more slices at the limit than the "leftovers"
    // Let's say there's 7 slices and 3 nodes. We need to distribute the property as 3 on node1, 2 on node2 and 2 on node3
    // (3, 2, 2) We need to be careful to not distribute them as 3, 3, 1. that's what this check is all about.
    int counter = origModulo;
    for (List<SliceReplica> list : nodesHostingProp.values()) {
      if (list.size() == origMaxPropPerNode) --counter;
    }
    if (counter == 0) return false; // nodes with 1 extra leader are exactly the needed number

    return true;
  }

