  public void checkLIR(String coreName, boolean allReplicasInLine)
      throws InterruptedException, KeeperException, IOException {
    if (allReplicasInLine) {
      // SOLR-8075: A bug may allow the proper leader to get marked as LIR DOWN and
      // if we are marked as DOWN but were able to become the leader, we remove
      // the DOWN entry here so that we don't fail publishing ACTIVE due to being in LIR.
      // We only do this if all the replicas participated in the election just in case
      // this was a valid LIR entry and the proper leader replica is missing.
      try (SolrCore core = cc.getCore(coreName)) {
        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,
            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());
        if (lirState == Replica.State.DOWN) {
          // We can do this before registering as leader because only setting DOWN requires that
          // we are already registered as leader, and here we are setting ACTIVE
          // The fact that we just won the zk leader election provides a quasi lock on setting this state, but
          // we should improve this: see SOLR-8075 discussion
          zkController.updateLeaderInitiatedRecoveryState(collection, shardId,
              leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP), Replica.State.ACTIVE, core.getCoreDescriptor(), true);
        }
      }
      
    } else {
      try (SolrCore core = cc.getCore(coreName)) {
        final Replica.State lirState = zkController.getLeaderInitiatedRecoveryState(collection, shardId,
            core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());
        if (lirState == Replica.State.DOWN || lirState == Replica.State.RECOVERING) {
          log.warn("The previous leader marked me " + core.getName()
              + " as " + lirState.toString() + " and I haven't recovered yet, so I shouldn't be the leader.");
          
          throw new SolrException(ErrorCode.SERVER_ERROR, "Leader Initiated Recovery prevented leadership");
        }
      }
    }
  }

