  @Override
  public void announceLeader(String collection, String shardId, ZkCoreNodeProps props) {
    synchronized (reader.getUpdateLock()) {
      try {
        reader.updateCloudState(true); // get fresh copy of the state
      final CloudState state = reader.getCloudState();
      final CloudState newState = setShardLeader(state, collection, shardId,
          props.getCoreUrl());
        if (state != newState) { // if same instance was returned no need to
                                 // update state
          log.info("Announcing new leader: coll: " + collection + " shard: " + shardId + " props:" + props);
          zkClient.setData(ZkStateReader.CLUSTER_STATE,
              ZkStateReader.toJSON(newState), true);
          
        } else {
          log.debug("State was not changed.");
        }
      } catch (KeeperException e) {
        log.warn("Could not announce new leader coll:" + collection + " shard:" + shardId + ", exception: " + e.getClass());
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        log.warn("Could not promote new leader coll:" + collection + " shard:" + shardId + ", exception: " + e.getClass());
      }
    }
  }

