  /**
   * make a call to solrnode/admin/cores with the given params and give a callback. This is designed to be
   * asynchronous because the system would want to batch the calls made to any given node
   *
   * @param node     The node for which this call is made
   * @param params   The params to be passed to the Snitch counterpart
   * @param klas     The  name of the class to be invoked in the remote node
   * @param callback The callback to be called when the response is obtained from remote node.
   *                 If this is passed as null the entire response map will be added as tags
   */
  public void invokeRemote(String node, ModifiableSolrParams params, String klas, RemoteCallback callback) {
    if (callback == null) callback = this;
    String url = snitchInfo.getCoreContainer().getZkController().getZkStateReader().getBaseUrlForNodeName(node);
    params.add("class", klas);
    params.add(ACTION, INVOKE.toString());
    //todo batch all requests to the same server

    try {
      SimpleSolrResponse rsp = invoke(snitchInfo.getCoreContainer().getUpdateShardHandler(), url, CoreContainer.CORES_HANDLER_PATH, params);
      Map<String, Object> returnedVal = (Map<String, Object>) rsp.getResponse().get(klas);
      if(exception == null){
//        log this
      } else {
        callback.remoteCallback(SnitchContext.this,returnedVal);
      }
      callback.remoteCallback(this, returnedVal);
    } catch (Exception e) {
      log.error("Unable to invoke snitch counterpart", e);
      exception = e;
    }
  }

