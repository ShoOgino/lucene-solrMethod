  @Override
  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
    String httpMethod = (String) req.getContext().get("httpMethod");
    if ("GET".equals(httpMethod)) {
      Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());
      rsp.getValues().addAll(map);
      RequestHandlerUtils.addExperimentalFormatWarning(rsp);
    } else  {
      if (req.getContentStreams() == null) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "No commands specified for autoscaling");
      }
      List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp, singletonCommands);
      if (ops == null) {
        // errors have already been added to the response so there's nothing left to do
        return;
      }
      for (CommandOperation op : ops) {
        switch (op.name) {
          case "set-trigger":
            handleSetTrigger(req, rsp, op);
            break;
          case "remove-trigger":
            handleRemoveTrigger(req, rsp, op);
            break;
          case "set-listener":
            handleSetListener(req, rsp, op);
            break;
          case "remove-listener":
            handleRemoveListener(req, rsp, op);
            break;
          case "suspend-trigger":
            handleSuspendTrigger(req, rsp, op);
            break;
          case "resume-trigger":
            handleResumeTrigger(req, rsp, op);
            break;
          case "set-policy":
            handleSetPolicies(req, rsp, op);
            break;
          case "remove-policy":
            handleRemovePolicy(req, rsp, op);
            break;
          case "set-cluster-preferences":
            handleSetClusterPreferences(req, rsp, op);
            break;
          case "set-cluster-policy":
            handleSetClusterPolicy(req, rsp, op);
            break;
          default:
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Unknown command: " + op.name);
        }
      }
    }
  }

