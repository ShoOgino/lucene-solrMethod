  @Override
  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
    try {
      String httpMethod = (String) req.getContext().get("httpMethod");
      RequestHandlerUtils.setWt(req, JSON);

      if ("GET".equals(httpMethod)) {
        String path = (String) req.getContext().get("path");
        if (path == null) path = "/cluster/autoscaling";
        List<String> parts = StrUtils.splitSmart(path, '/');
        if (parts.get(0).isEmpty()) parts.remove(0);

        if (parts.size() < 2 || parts.size() > 3) {
          // invalid
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Unknown path: " + path);
        }

        Map<String, Object> map = zkReadAutoScalingConf(container.getZkController().getZkStateReader());
        if (parts.size() == 2)  {
          rsp.getValues().addAll(map);
        } else if (parts.size() == 3 && DIAGNOSTICS.equals(parts.get(2))) {
          handleDiagnostics(rsp, map);
        }
      } else {
        if (req.getContentStreams() == null) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "No commands specified for autoscaling");
        }
        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);
        if (ops == null) {
          // errors have already been added to the response so there's nothing left to do
          return;
        }
        for (CommandOperation op : ops) {
          switch (op.name) {
            case CMD_SET_TRIGGER:
              handleSetTrigger(req, rsp, op);
              break;
            case CMD_REMOVE_TRIGGER:
              handleRemoveTrigger(req, rsp, op);
              break;
            case CMD_SET_LISTENER:
              handleSetListener(req, rsp, op);
              break;
            case CMD_REMOVE_LISTENER:
              handleRemoveListener(req, rsp, op);
              break;
            case CMD_SUSPEND_TRIGGER:
              handleSuspendTrigger(req, rsp, op);
              break;
            case CMD_RESUME_TRIGGER:
              handleResumeTrigger(req, rsp, op);
              break;
            case CMD_SET_POLICY:
              handleSetPolicies(req, rsp, op);
              break;
            case CMD_REMOVE_POLICY:
              handleRemovePolicy(req, rsp, op);
              break;
            case CMD_SET_CLUSTER_PREFERENCES:
              handleSetClusterPreferences(req, rsp, op);
              break;
            case CMD_SET_CLUSTER_POLICY:
              handleSetClusterPolicy(req, rsp, op);
              break;
            default:
              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Unknown command: " + op.name);
          }
        }
      }
    } catch (Exception e) {
      rsp.getValues().add("result", "failure");
      throw e;
    } finally {
      RequestHandlerUtils.addExperimentalFormatWarning(rsp);
    }
  }

