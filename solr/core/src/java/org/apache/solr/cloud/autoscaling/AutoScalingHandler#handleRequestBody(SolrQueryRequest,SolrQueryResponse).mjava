  @Override
  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
    try {
      String httpMethod = (String) req.getContext().get("httpMethod");
      RequestHandlerUtils.setWt(req, JSON);

      if ("GET".equals(httpMethod)) {
        String path = (String) req.getContext().get("path");
        if (path == null) path = "/cluster/autoscaling";
        List<String> parts = StrUtils.splitSmart(path, '/', true);

        if (parts.size() < 2 || parts.size() > 3) {
          // invalid
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Unknown path: " + path);
        }

        AutoScalingConfig autoScalingConf = cloudManager.getDistribStateManager().getAutoScalingConfig();
        if (parts.size() == 2) {
          autoScalingConf.writeMap(new MapWriter.EntryWriter() {

            @Override
            public MapWriter.EntryWriter put(CharSequence k, Object v) {
              rsp.getValues().add(k.toString(), v);
              return this;
            }
          });
        } else {
          getSubpathExecutor(parts).ifPresent(it -> it.accept(rsp, autoScalingConf));
        }
      } else {
        if (req.getContentStreams() == null) {
          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "No commands specified for autoscaling");
        }
        String path = (String) req.getContext().get("path");
        if (path != null) {
          List<String> parts = StrUtils.splitSmart(path, '/', true);
          if(parts.size() == 3){
            getSubpathExecutor(parts).ifPresent(it -> {
              Map map = null;
              try {
                map = (Map) Utils.fromJSON(req.getContentStreams().iterator().next().getStream());
              } catch (IOException e1) {
                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "error parsing payload", e1);
              }
              it.accept(rsp, new AutoScalingConfig(map));
            });

            return;
          }

        }
        List<CommandOperation> ops = CommandOperation.readCommands(req.getContentStreams(), rsp.getValues(), singletonCommands);
        if (ops == null) {
          // errors have already been added to the response so there's nothing left to do
          return;
        }
        processOps(req, rsp, ops);
      }

    } catch (Exception e) {
      rsp.getValues().add("result", "failure");
      throw e;
    } finally {
      RequestHandlerUtils.addExperimentalFormatWarning(rsp);
    }
  }

