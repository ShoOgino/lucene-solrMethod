  private Suggester getNodeLostSuggester(SolrCloudManager cloudManager, Policy.Session session, TriggerEvent event) throws IOException {
    String preferredOp = (String) event.getProperty(AutoScalingParams.PREFERRED_OP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());
    CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(preferredOp);
    switch (action) {
      case MOVEREPLICA:
        Suggester s = session.getSuggester(action)
                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));
        if (applyCollectionHints(cloudManager, s) == 0) return NoneSuggester.get(session);
        return s;
      case DELETENODE:
        int start = (Integer)event.getProperty(START, 0);
        List<String> srcNodes = (List<String>) event.getProperty(NODE_NAMES);
        if (srcNodes.isEmpty() || start >= srcNodes.size()) {
          return NoneSuggester.get(session);
        }
        String sourceNode = srcNodes.get(start);
        s = session.getSuggester(action)
                .hint(Suggester.Hint.SRC_NODE, event.getProperty(NODE_NAMES));
        if (applyCollectionHints(cloudManager, s) == 0) return NoneSuggester.get(session);
        s.hint(Suggester.Hint.SRC_NODE, Collections.singletonList(sourceNode));
        event.getProperties().put(START, ++start);
        return s;
      case NONE:
        return NoneSuggester.get(session);
      default:
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Unsupported preferredOperation: " + action.toLower() + " specified for node lost trigger");
    }
  }

