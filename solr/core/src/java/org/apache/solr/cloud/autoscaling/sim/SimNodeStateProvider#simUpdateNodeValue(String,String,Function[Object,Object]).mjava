  /**
   * Atomically update a node value.
   * @param node node id
   * @param key property name
   * @param updater updater function
   * @return previous property value or null if property or node didn't exist.
   */
  public Object simUpdateNodeValue(String node, String key, Function<Object, Object> updater) throws InterruptedException {
    lock.lockInterruptibly();
    try {
      Map<String, Object> values = nodeValues.computeIfAbsent(node, n -> new ConcurrentHashMap<>());
      return values.put(key, updater.apply(values.get(key)));
    } finally {
      lock.unlock();
    }
  }

