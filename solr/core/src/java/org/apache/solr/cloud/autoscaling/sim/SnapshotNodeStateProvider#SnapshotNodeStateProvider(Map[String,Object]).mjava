  /**
   * Populate this instance from a previously generated snapshot.
   * @param snapshot previous snapshot created using this class.
   */
  @SuppressWarnings({"unchecked"})
  public SnapshotNodeStateProvider(Map<String, Object> snapshot) {
    Objects.requireNonNull(snapshot);
    nodeValues = (Map<String, Map<String, Object>>)snapshot.getOrDefault("nodeValues", Collections.emptyMap());
    ((Map<String, Object>)snapshot.getOrDefault("replicaInfos", Collections.emptyMap())).forEach((node, v) -> {
      Map<String, Map<String, List<ReplicaInfo>>> perNode = replicaInfos.computeIfAbsent(node, n -> new LinkedHashMap<>());
      ((Map<String, Object>)v).forEach((collection, shards) -> {
        Map<String, List<ReplicaInfo>> perColl = perNode.computeIfAbsent(collection, c -> new LinkedHashMap<>());
        ((Map<String, Object>)shards).forEach((shard, replicas) -> {
          List<ReplicaInfo> infos = perColl.computeIfAbsent(shard, s -> new ArrayList<>());
          ((List<Map<String, Object>>)replicas).forEach(replicaMap -> {
            ReplicaInfo ri = new ReplicaInfo(new LinkedHashMap<>(replicaMap)); // constructor modifies this map
            if (ri.isLeader) {
              ri.getVariables().put("leader", "true");
            }
            // externally produced snapshots may not include the right units
            if (ri.getVariable(Variable.Type.CORE_IDX.metricsAttribute) == null) {
                if (ri.getVariable(Variable.Type.CORE_IDX.tagName) != null) {
                  Number indexSizeGB = (Number) ri.getVariable(Variable.Type.CORE_IDX.tagName);
                  ri.getVariables().put(Variable.Type.CORE_IDX.metricsAttribute, indexSizeGB.doubleValue() * GB);
                } else {
                  throw new RuntimeException("Missing size information for replica: " + ri);
              }
            }
            infos.add(ri);
          });
        });
      });
    });
  }

