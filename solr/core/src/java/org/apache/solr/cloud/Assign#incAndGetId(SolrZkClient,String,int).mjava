  public static int incAndGetId(SolrZkClient zkClient, String collection, int defaultValue) {
    String path = "/collections/"+collection;
    try {
      if (!zkClient.exists(path, true)) {
        try {
          zkClient.makePath(path, true);
        } catch (KeeperException.NodeExistsException e) {
          // it's okay if another beats us creating the node
        }
      }
      path += "/counter";
      if (!zkClient.exists(path, true)) {
        try {
          zkClient.create(path, NumberUtils.intToBytes(defaultValue), CreateMode.PERSISTENT, true);
        } catch (KeeperException.NodeExistsException e) {
          // it's okay if another beats us creating the node
        }
      }
    } catch (InterruptedException e) {
      Thread.interrupted();
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error creating counter node in Zookeeper for collection:" + collection, e);
    } catch (KeeperException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error creating counter node in Zookeeper for collection:" + collection, e);
    }

    while (true) {
      Stat stat = new Stat();
      try {
        byte[] data = zkClient.getData(path, null, stat, true);
        int currentId = NumberUtils.bytesToInt(data);
        data = NumberUtils.intToBytes(++currentId);
        zkClient.setData(path, data, stat.getVersion(), true);
        return currentId;
      } catch (KeeperException e) {
        if (e.code() != KeeperException.Code.BADVERSION) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error inc and get counter from Zookeeper for collection:"+collection, e);
        }
      } catch (InterruptedException e) {
        Thread.interrupted();
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error inc and get counter from Zookeeper for collection:" + collection, e);
      }
    }
  }

