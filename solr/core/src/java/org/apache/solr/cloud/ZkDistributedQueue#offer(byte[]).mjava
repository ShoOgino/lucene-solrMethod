  /**
   * Inserts data into queue.  If there are no other queue consumers, the offered element
   * will be immediately visible when this method returns.
   */
  @Override
  public void offer(byte[] data) throws KeeperException, InterruptedException {
    Timer.Context time = stats.time(dir + "_offer");
    try {
      while (true) {
        try {
          if (maxQueueSize > 0) {
            if (offerPermits.get() <= 0 || offerPermits.getAndDecrement() <= 0) {
              // If a max queue size is set, check it before creating a new queue item.
              Stat stat = zookeeper.exists(dir, null, true);
              if (stat == null) {
                // jump to the code below, which tries to create dir if it doesn't exist
                throw new KeeperException.NoNodeException();
              }
              int remainingCapacity = maxQueueSize - stat.getNumChildren();
              if (remainingCapacity <= 0) {
                throw new IllegalStateException("queue is full");
              }

              // Allow this client to push up to 1% of the remaining queue capacity without rechecking.
              offerPermits.set(maxQueueSize - stat.getNumChildren() / 100);
            }
          }

          // Explicitly set isDirty here so that synchronous same-thread calls behave as expected.
          // This will get set again when the watcher actually fires, but that's ok.
          zookeeper.create(dir + "/" + PREFIX, data, CreateMode.PERSISTENT_SEQUENTIAL, true);
          isDirty = true;
          return;
        } catch (KeeperException.NoNodeException e) {
          try {
            zookeeper.create(dir, new byte[0], CreateMode.PERSISTENT, true);
          } catch (KeeperException.NodeExistsException ne) {
            // someone created it
          }
        }
      }
    } finally {
      time.stop();
    }
  }

