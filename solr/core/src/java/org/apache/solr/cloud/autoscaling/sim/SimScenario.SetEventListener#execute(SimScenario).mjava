    @Override
    public void execute(SimScenario scenario) throws Exception {
      String trigger = params.required().get(AutoScalingParams.TRIGGER);
      Map<String, Object> cfgMap = new HashMap<>();
      String name = ".sim_wait_event_" + trigger;
      cfgMap.put(AutoScalingParams.NAME, name);
      cfgMap.put(AutoScalingParams.TRIGGER, trigger);

      String[] beforeActions = params.getParams(AutoScalingParams.BEFORE_ACTION);
      String[] afterActions = params.getParams(AutoScalingParams.AFTER_ACTION);
      if (beforeActions != null) {
        for (String beforeAction : beforeActions) {
          ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.BEFORE_ACTION, Utils.NEW_ARRAYLIST_FUN)).add(beforeAction);
        }
      }
      if (afterActions != null) {
        for (String afterAction : afterActions) {
          ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.AFTER_ACTION, Utils.NEW_ARRAYLIST_FUN)).add(afterAction);
        }
      }
      String[] stages = params.required().getParams(AutoScalingParams.STAGE);
      for (String stage : stages) {
        String[] lst = stage.split("[,\\s]+");
        for (String val : lst) {
          try {
            TriggerEventProcessorStage.valueOf(val);
            ((List<String>)cfgMap.computeIfAbsent(AutoScalingParams.STAGE, Utils.NEW_ARRAYLIST_FUN)).add(val);
          } catch (IllegalArgumentException e) {
            throw new IOException("Invalid stage name '" + val + "'");
          }
        }
      }
      final AutoScalingConfig.TriggerListenerConfig listenerConfig = new AutoScalingConfig.TriggerListenerConfig(name, cfgMap);
      TriggerListener listener = new SimWaitListener(scenario.cluster.getTimeSource(), listenerConfig);
      if (scenario.context.containsKey("_sim_waitListener_" + trigger)) {
        throw new IOException("currently only one listener can be set per trigger. Trigger name: " + trigger);
      }
      scenario.context.put("_sim_waitListener_" + trigger, listener);
      scenario.cluster.getOverseerTriggerThread().getScheduledTriggers().addAdditionalListener(listener);
    }

