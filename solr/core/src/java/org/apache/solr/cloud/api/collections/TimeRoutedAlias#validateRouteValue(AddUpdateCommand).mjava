  @Override
  public void validateRouteValue(AddUpdateCommand cmd) throws SolrException {

    final Instant docTimestamp =
        parseRouteKey(cmd.getSolrInputDocument().getFieldValue(getRouteField()));

    // FUTURE: maybe in some cases the user would want to ignore/warn instead?
    if (docTimestamp.isAfter(Instant.now().plusMillis(getMaxFutureMs()))) {
      throw new SolrException(BAD_REQUEST,
          "The document's time routed key of " + docTimestamp + " is too far in the future given " +
              ROUTER_MAX_FUTURE + "=" + getMaxFutureMs());
    }

    // Although this is also checked later, we need to check it here too to handle the case in Dimensional Routed
    // aliases where one can legally have zero collections for a newly encountered category and thus the loop later
    // can't catch this.

    // SOLR-13760 - we need to fix the date math to a specific instant when the first document arrives.
    // If we don't do this DRA's with a time dimension have variable start times across the other dimensions
    // and logic gets much to complicated, and depends too much on queries to zookeeper. This keeps life simpler.
    // I have to admit I'm not terribly fond of the mutation during a validate method however.
    Instant startTime;
    try {
      startTime = Instant.parse(start);
    } catch (DateTimeParseException e) {
      startTime = DateMathParser.parseMath(new Date(), start).toInstant();
      SolrCore core = cmd.getReq().getCore();
      ZkStateReader zkStateReader = core.getCoreContainer().getZkController().zkStateReader;
      Aliases aliases = zkStateReader.getAliases();
      Map<String, String> props = new HashMap<>(aliases.getCollectionAliasProperties(aliasName));
      start = DateTimeFormatter.ISO_INSTANT.format(startTime);
      props.put(ROUTER_START, start);

      // This could race, but it only occurs when the alias is first used and the values produced
      // should all be identical and who wins won't matter (baring cases of Date Math involving seconds,
      // which is pretty far fetched). Putting this in a separate thread to ensure that any failed
      // races don't cause documents to get rejected.
      core.runAsync(() -> zkStateReader.aliasesManager.applyModificationAndExportToZk(
          (a) -> aliases.cloneWithCollectionAliasProperties(aliasName, props)));

    }
    if (docTimestamp.isBefore(startTime)) {
      throw new SolrException(BAD_REQUEST, "The document couldn't be routed because " + docTimestamp +
          " is before the start time for this alias " +start+")");
    }
  }

