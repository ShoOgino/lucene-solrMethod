  @Override
  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {
    super.configure(loader, cloudManager, properties);
    // parse config options
    String collectionsStr = (String)properties.get(COLLECTIONS_PROP);
    if (collectionsStr != null) {
      collections.addAll(StrUtils.splitSmart(collectionsStr, ','));
    }
    // check back-compat collection prop
    collectionsStr = (String)properties.get(BC_COLLECTION_PROP);
    if (collectionsStr != null) {
      if (!collectionsStr.equals(Policy.ANY)) {
        collections.add(collectionsStr);
      }
    }
    shard = (String)properties.getOrDefault(AutoScalingParams.SHARD, Policy.ANY);
    if (!shard.equals(Policy.ANY) && (collections.isEmpty() || collections.size() > 1)) {
      throw new TriggerValidationException(name, AutoScalingParams.SHARD, "When 'shard' is other than #ANY then exactly one collection name must be set");
    }
    node = (String)properties.getOrDefault(AutoScalingParams.NODE, Policy.ANY);
    metric = (String)properties.getOrDefault(METRIC_PROP, DEFAULT_METRIC);

    String maxOpsStr = String.valueOf(properties.getOrDefault(MAX_OPS_PROP, DEFAULT_MAX_OPS));
    try {
      maxOps = Integer.parseInt(maxOpsStr);
    } catch (Exception e) {
      throw new TriggerValidationException(name, MAX_OPS_PROP, "invalid value '" + maxOpsStr + "': " + e.toString());
    }

    Object o = properties.get(MIN_REPLICAS_PROP);
    if (o != null) {
      try {
        minReplicas = Integer.parseInt(o.toString());
        if (minReplicas < 1) {
          throw new Exception("must be at least 1, or not set to use 'replicationFactor'");
        }
      } catch (Exception e) {
        throw new TriggerValidationException(name, MIN_REPLICAS_PROP, "invalid value '" + o + "': " + e.toString());
      }
    }

    Object above = properties.get(ABOVE_RATE_PROP);
    Object below = properties.get(BELOW_RATE_PROP);
    // back-compat rate prop
    if (properties.containsKey(BC_RATE_PROP)) {
      above = properties.get(BC_RATE_PROP);
    }
    if (above == null && below == null) {
      throw new TriggerValidationException(name, ABOVE_RATE_PROP, "at least one of '" +
      ABOVE_RATE_PROP + "' or '" + BELOW_RATE_PROP + "' must be set");
    }
    if (above != null) {
      try {
        aboveRate = Double.parseDouble(String.valueOf(above));
      } catch (Exception e) {
        throw new TriggerValidationException(name, ABOVE_RATE_PROP, "Invalid configuration value: '" + above + "': " + e.toString());
      }
    } else {
      aboveRate = Double.MAX_VALUE;
    }
    if (below != null) {
      try {
        belowRate = Double.parseDouble(String.valueOf(below));
      } catch (Exception e) {
        throw new TriggerValidationException(name, BELOW_RATE_PROP, "Invalid configuration value: '" + below + "': " + e.toString());
      }
    } else {
      belowRate = -1;
    }

    // node rates
    above = properties.get(ABOVE_NODE_RATE_PROP);
    below = properties.get(BELOW_NODE_RATE_PROP);
    if (above != null) {
      try {
        aboveNodeRate = Double.parseDouble(String.valueOf(above));
      } catch (Exception e) {
        throw new TriggerValidationException(name, ABOVE_NODE_RATE_PROP, "Invalid configuration value: '" + above + "': " + e.toString());
      }
    } else {
      aboveNodeRate = Double.MAX_VALUE;
    }
    if (below != null) {
      try {
        belowNodeRate = Double.parseDouble(String.valueOf(below));
      } catch (Exception e) {
        throw new TriggerValidationException(name, BELOW_NODE_RATE_PROP, "Invalid configuration value: '" + below + "': " + e.toString());
      }
    } else {
      belowNodeRate = -1;
    }

    String aboveOpStr = String.valueOf(properties.getOrDefault(ABOVE_OP_PROP, CollectionParams.CollectionAction.ADDREPLICA.toLower()));
    String belowOpStr = String.valueOf(properties.getOrDefault(BELOW_OP_PROP, CollectionParams.CollectionAction.DELETEREPLICA.toLower()));
    aboveOp = CollectionParams.CollectionAction.get(aboveOpStr);
    if (aboveOp == null) {
      throw new TriggerValidationException(getName(), ABOVE_OP_PROP, "unrecognized value: '" + aboveOpStr + "'");
    }
    belowOp = CollectionParams.CollectionAction.get(belowOpStr);
    if (belowOp == null) {
      throw new TriggerValidationException(getName(), BELOW_OP_PROP, "unrecognized value: '" + belowOpStr + "'");
    }
    Object aboveNodeObj = properties.getOrDefault(ABOVE_NODE_OP_PROP, CollectionParams.CollectionAction.MOVEREPLICA.toLower());
    // do NOT set the default to DELETENODE
    Object belowNodeObj = properties.get(BELOW_NODE_OP_PROP);
    try {
      aboveNodeOp = CollectionParams.CollectionAction.get(String.valueOf(aboveNodeObj));
    } catch (Exception e) {
      throw new TriggerValidationException(getName(), ABOVE_NODE_OP_PROP, "unrecognized value: '" + aboveNodeObj + "'");
    }
    if (belowNodeObj != null) {
      try {
        belowNodeOp = CollectionParams.CollectionAction.get(String.valueOf(belowNodeObj));
      } catch (Exception e) {
        throw new TriggerValidationException(getName(), BELOW_NODE_OP_PROP, "unrecognized value: '" + belowNodeObj + "'");
      }
    }
  }

