  /**
   * Create any required collections and return the name of the collection to which the current document should be sent.
   *
   * @param cmd The command that might cause collection creation
   * @return The name of the proper destination collection for the document which may or may not be a
   * newly created collection
   */
  public String createCollectionsIfRequired(AddUpdateCommand cmd) {

    // Even though it is possible that multiple requests hit this code in the 1-2 sec that
    // it takes to create a collection, it's an established anti-pattern to feed data with a very large number
    // of client connections. This in mind, we only guard against spamming the overseer within a batch of
    // updates. We are intentionally tolerating a low level of redundant requests in favor of simpler code. Most
    // super-sized installations with many update clients will likely be multi-tenant and multiple tenants
    // probably don't write to the same alias. As such, we have deferred any solution to the "many clients causing
    // collection creation simultaneously" problem until such time as someone actually has that problem in a
    // real world use case that isn't just an anti-pattern.
    CandidateCollection candidateCollectionDesc = findCandidateGivenValue(cmd);

    try {
      // It's important not to add code between here and the prior call to findCandidateGivenValue()
      // in processAdd() that invokes updateParsedCollectionAliases(). Doing so would update parsedCollectionsDesc
      // and create a race condition. When Routed aliases have an implicit sort for their collections we
      // are relying on the fact that collectionList.get(0) is returning the head of the parsed collections that
      // existed when the collection list was consulted for the candidate value. If this class updates it's notion
      // of the list of collections since candidateCollectionDesc was chosen, we could create collection n+2
      // instead of collection n+1.
      return createAllRequiredCollections( cmd, candidateCollectionDesc);
    } catch (SolrException e) {
      throw e;
    } catch (Exception e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);
    }
  }

