  @SuppressWarnings("unchecked")
  private void deleteReplica(ClusterState clusterState, ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {
    checkRequired(message, COLLECTION_PROP, SHARD_ID_PROP,REPLICA_PROP);
    String collectionName = message.getStr(COLLECTION_PROP);
    String shard = message.getStr(SHARD_ID_PROP);
    String replicaName = message.getStr(REPLICA_PROP);
    Map previousMDCContext = MDC.getCopyOfContextMap();
    MDCUtils.setMDC(collectionName, shard, replicaName, null);
    try {
      DocCollection coll = clusterState.getCollection(collectionName);
      Slice slice = coll.getSlice(shard);
      ShardHandler shardHandler = shardHandlerFactory.getShardHandler();
      if (slice == null) {
        throw new SolrException(ErrorCode.BAD_REQUEST, "Invalid shard name : " + shard + " in collection : " + collectionName);
      }
      Replica replica = slice.getReplica(replicaName);
      if (replica == null) {
        ArrayList<String> l = new ArrayList<>();
        for (Replica r : slice.getReplicas()) l.add(r.getName());
        throw new SolrException(ErrorCode.BAD_REQUEST, "Invalid replica : " + replicaName + " in shard/collection : "
            + shard + "/" + collectionName + " available replicas are " + StrUtils.join(l, ','));
      }

      // If users are being safe and only want to remove a shard if it is down, they can specify onlyIfDown=true
      // on the command.
      if (Boolean.parseBoolean(message.getStr(ONLY_IF_DOWN)) && replica.getState() != Replica.State.DOWN) {
        throw new SolrException(ErrorCode.BAD_REQUEST, "Attempted to remove replica : " + collectionName + "/" +
            shard + "/" + replicaName +
            " with onlyIfDown='true', but state is '" + replica.getStr(ZkStateReader.STATE_PROP) + "'");
      }

      String baseUrl = replica.getStr(ZkStateReader.BASE_URL_PROP);
      String core = replica.getStr(ZkStateReader.CORE_NAME_PROP);

      // assume the core exists and try to unload it
      Map m = makeMap("qt", adminPath, CoreAdminParams.ACTION,
          CoreAdminAction.UNLOAD.toString(), CoreAdminParams.CORE, core,
          CoreAdminParams.DELETE_INSTANCE_DIR, "true",
          CoreAdminParams.DELETE_DATA_DIR, "true");

      ShardRequest sreq = new ShardRequest();
      sreq.purpose = 1;
      sreq.shards = new String[]{baseUrl};
      sreq.actualShards = sreq.shards;
      sreq.params = new ModifiableSolrParams(new MapSolrParams(m));
      try {
        shardHandler.submit(sreq, baseUrl, sreq.params);
      } catch (Exception e) {
        log.warn("Exception trying to unload core " + sreq, e);
      }

      collectShardResponses(replica.getState() != Replica.State.ACTIVE ? new NamedList() : results,
          false, null, shardHandler);

      if (waitForCoreNodeGone(collectionName, shard, replicaName, 5000))
        return;//check if the core unload removed the corenode zk enry
      deleteCoreNode(collectionName, replicaName, replica, core); // try and ensure core info is removed from clusterstate
      if (waitForCoreNodeGone(collectionName, shard, replicaName, 30000)) return;

      throw new SolrException(ErrorCode.SERVER_ERROR, "Could not  remove replica : " + collectionName + "/" + shard + "/" + replicaName);
    } finally {
      MDCUtils.cleanupMDC(previousMDCContext);
    }
  }

