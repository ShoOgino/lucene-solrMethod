  /**
   * @param shardVsReplicaCount shard names vs no:of replicas required for each of those shards
   * @param snitches            snitches details
   * @param shardVsNodes        The current state of the system. can be an empty map if no nodes
   *                            are created in this collection till now
   */
  public ReplicaAssigner(List<Rule> rules,
                         Map<String, Integer> shardVsReplicaCount,
                         List snitches,
                         Map<String, Map<String, Integer>> shardVsNodes,
                         List<String> participatingLiveNodes,
                         CoreContainer cc, ClusterState clusterState) {
    this.rules = rules;
    for (Rule rule : rules) tagNames.add(rule.tag.name);
    this.shardVsReplicaCount = shardVsReplicaCount;
    this.participatingLiveNodes = new ArrayList<>(participatingLiveNodes);
    this.nodeVsTags = getTagsForNodes(cc, snitches);
    this.shardVsNodes = getDeepCopy(shardVsNodes, 2);
    validateTags(nodeVsTags);

    if (clusterState != null) {
      for (String s : clusterState.getCollections()) {
        DocCollection coll = clusterState.getCollection(s);
        for (Slice slice : coll.getSlices()) {
          for (Replica replica : slice.getReplicas()) {
            AtomicInteger count = nodeVsCores.get(replica.getNodeName());
            if (count == null) nodeVsCores.put(replica.getNodeName(), count = new AtomicInteger());
            count.incrementAndGet();
          }
        }
      }
    }
  }

