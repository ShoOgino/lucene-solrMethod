  static CollectionAdminRequest.RequestStatusResponse waitForTaskToFinish(SolrCloudManager cloudManager, String requestId, long duration, TimeUnit timeUnit) throws IOException, InterruptedException {
    long timeoutSeconds = timeUnit.toSeconds(duration);
    RequestStatusState state = RequestStatusState.NOT_FOUND;
    CollectionAdminRequest.RequestStatusResponse statusResponse = null;
    for (int i = 0; i < timeoutSeconds; i++) {
      try {
        statusResponse = (CollectionAdminRequest.RequestStatusResponse)cloudManager.request(CollectionAdminRequest.requestStatus(requestId));
        state = statusResponse.getRequestStatus();
        if (state == RequestStatusState.COMPLETED || state == RequestStatusState.FAILED) {
          log.debug("Task with requestId={} finished with state={} in {}s", requestId, state, i * 5);
          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));
          return statusResponse;
        } else if (state == RequestStatusState.NOT_FOUND) {
          // the request for this id was never actually submitted! no harm done, just bail out
          log.warn("Task with requestId={} was not found on overseer", requestId);
          cloudManager.request(CollectionAdminRequest.deleteAsyncId(requestId));
          return statusResponse;
        }
      } catch (Exception e) {
        Throwable rootCause = ExceptionUtils.getRootCause(e);
        if (rootCause instanceof IllegalStateException && rootCause.getMessage().contains("Connection pool shut down"))  {
          throw e;
        }
        if (rootCause instanceof TimeoutException && rootCause.getMessage().contains("Could not connect to ZooKeeper")) {
          throw e;
        }
        if (rootCause instanceof SolrServerException) {
          throw e;
        }
        log.error("Unexpected Exception while querying status of requestId=" + requestId, e);
        throw e;
      }
      if (i > 0 && i % 5 == 0) {
        log.debug("Task with requestId={} still not complete after {}s. Last state={}", requestId, i * 5, state);
      }
      cloudManager.getTimeSource().sleep(5000);
    }
    log.debug("Task with requestId={} did not complete within 5 minutes. Last state={}", requestId, state);
    return statusResponse;
  }

