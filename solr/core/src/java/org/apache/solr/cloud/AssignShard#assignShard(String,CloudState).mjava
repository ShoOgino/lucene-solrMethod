  /**
   * Assign a new unique id up to slices count - then add replicas evenly.
   * 
   * @param collection
   * @param state
   * @return
   */
  public static String assignShard(String collection, CloudState state) {

    int shards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP,1);

    String returnShardId = null;
    Map<String, Slice> sliceMap = state.getSlices(collection);

    if (sliceMap == null) {
      return "shard1";
    }

    List<String> shardIdNames = new ArrayList<String>(sliceMap.keySet());

    if (shardIdNames.size() < shards) {
      return "shard" + (shardIdNames.size() + 1);
    }

    // else figure out which shard needs more replicas
    final Map<String, Integer> map = new HashMap<String, Integer>();
    for (String shardId : shardIdNames) {
      int cnt = sliceMap.get(shardId).getShards().size();
      map.put(shardId, cnt);
    }

    Collections.sort(shardIdNames, new Comparator<String>() {

      @Override
      public int compare(String o1, String o2) {
        Integer one = map.get(o1);
        Integer two = map.get(o2);
        return one.compareTo(two);
      }
    });

    returnShardId = shardIdNames.get(0);
    return returnShardId;
  }

