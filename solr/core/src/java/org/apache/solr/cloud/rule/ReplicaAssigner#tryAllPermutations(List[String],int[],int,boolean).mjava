  private Map<ReplicaPosition, String> tryAllPermutations(List<String> shardNames,
                                                          int[] shardOrder,
                                                          int nonWildCardShardRules,
                                                          boolean fuzzyPhase) {


    Iterator<int[]> shardPermutations = nonWildCardShardRules > 0 ?
        permutations(shardNames.size()) :
        singletonList(shardOrder).iterator();

    for (; shardPermutations.hasNext(); ) {
      int[] p = shardPermutations.next();
      List<ReplicaPosition> replicaPositions = new ArrayList<>();
      for (int pos : p) {
        for (int j = 0; j < shardVsReplicaCount.get(shardNames.get(pos)); j++) {
          replicaPositions.add(new ReplicaPosition(shardNames.get(pos), j, Replica.Type.NRT));
        }
      }
      Collections.sort(replicaPositions);
      for (Iterator<int[]> it = permutations(rules.size()); it.hasNext(); ) {
        int[] permutation = it.next();
        Map<ReplicaPosition, String> result = tryAPermutationOfRules(permutation, replicaPositions, fuzzyPhase);
        if (result != null) return result;
      }
    }

    return null;
  }

