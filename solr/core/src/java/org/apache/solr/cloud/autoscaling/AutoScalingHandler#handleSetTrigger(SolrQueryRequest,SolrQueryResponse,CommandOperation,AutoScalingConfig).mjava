  private AutoScalingConfig handleSetTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,
                                             AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {
    // we're going to modify the op - use a copy
    String triggerName = op.getStr(NAME);
    String eventTypeStr = op.getStr(EVENT);

    if (op.hasError()) return currentConfig;
    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));

    String waitForStr = op.getStr(WAIT_FOR, null);

    CommandOperation opCopy = new CommandOperation(op.name, Utils.getDeepCopy((Map) op.getCommandData(), 10));

    if (waitForStr != null) {
      int seconds = 0;
      try {
        seconds = parseHumanTime(waitForStr);
      } catch (IllegalArgumentException e) {
        op.addError("Invalid 'waitFor' value '" + waitForStr + "' in trigger: " + triggerName);
        return currentConfig;
      }
      opCopy.getDataMap().put(WAIT_FOR, seconds);
    }

    Integer lowerBound = op.getInt(LOWER_BOUND, null);
    Integer upperBound = op.getInt(UPPER_BOUND, null);

    List<Map<String, String>> actions = (List<Map<String, String>>) op.getVal(ACTIONS);
    if (actions == null) {
      actions = DEFAULT_ACTIONS;
      opCopy.getDataMap().put(ACTIONS, actions);
    }

    // validate that we can load all the actions
    // todo allow creation from blobstore
    for (Map<String, String> action : actions) {
      if (!action.containsKey(NAME) || !action.containsKey(CLASS)) {
        op.addError("No 'name' or 'class' specified for action: " + action);
        return currentConfig;
      }
      String klass = action.get(CLASS);
      try {
        container.getResourceLoader().findClass(klass, TriggerAction.class);
      } catch (Exception e) {
        log.warn("Could not load class : ", e);
        op.addError("Action not found: " + klass + " " + e.getMessage());
        return currentConfig;
      }
    }
    AutoScalingConfig.TriggerConfig trigger = new AutoScalingConfig.TriggerConfig(triggerName, opCopy.getValuesExcluding("name"));
    currentConfig = currentConfig.withTriggerConfig(trigger);
    // check that there's a default SystemLogListener, unless user specified another one
    return withSystemLogListener(currentConfig, triggerName);
  }

