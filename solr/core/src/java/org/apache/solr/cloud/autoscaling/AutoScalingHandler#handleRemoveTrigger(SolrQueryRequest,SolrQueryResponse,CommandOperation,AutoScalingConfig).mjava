  private AutoScalingConfig handleRemoveTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,
                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {
    String triggerName = op.getStr(NAME);
    boolean removeListeners = op.getBoolean(REMOVE_LISTENERS, false);

    if (triggerName == null || triggerName.trim().length() == 0) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "The trigger name cannot be null or empty");
    }
    Map<String, AutoScalingConfig.TriggerConfig> triggerConfigs = currentConfig.getTriggerConfigs();
    if (!triggerConfigs.containsKey(triggerName)) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "No trigger exists with name: " + triggerName);
    }
    triggerConfigs = new HashMap<>(triggerConfigs);
    Set<String> activeListeners = new HashSet<>();
    Map<String, AutoScalingConfig.TriggerListenerConfig> listeners = currentConfig.getTriggerListenerConfigs();
    for (AutoScalingConfig.TriggerListenerConfig listener : listeners.values()) {
      if (triggerName.equals(listener.trigger)) {
        activeListeners.add(listener.name);
      }
    }
    if (!activeListeners.isEmpty()) {
      if (removeListeners) {
        listeners = new HashMap<>(listeners);
        listeners.keySet().removeAll(activeListeners);
      } else {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
            "Cannot remove trigger: " + triggerName + " because it has active listeners: " + activeListeners);
      }
    }
    triggerConfigs.remove(triggerName);
    currentConfig = currentConfig.withTriggerConfigs(triggerConfigs).withTriggerListenerConfigs(listeners);
    return currentConfig;
  }

