  private AutoScalingConfig handleRemoveTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,
                                   AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {
    String triggerName = op.getStr(NAME);
    boolean removeListeners = op.getBoolean(REMOVE_LISTENERS, false);

    if (op.hasError()) return currentConfig;
    Map<String, AutoScalingConfig.TriggerConfig> triggerConfigs = currentConfig.getTriggerConfigs();
    if (!triggerConfigs.containsKey(triggerName)) {
      op.addError("No trigger exists with name: " + triggerName);
      return currentConfig;
    }
    triggerConfigs = new HashMap<>(triggerConfigs);
    Set<String> activeListeners = new HashSet<>();
    Map<String, AutoScalingConfig.TriggerListenerConfig> listeners = currentConfig.getTriggerListenerConfigs();
    for (AutoScalingConfig.TriggerListenerConfig listener : listeners.values()) {
      if (triggerName.equals(listener.trigger)) {
        activeListeners.add(listener.name);
      }
    }
    if (!activeListeners.isEmpty()) {
      boolean onlySystemLog = false;
      if (activeListeners.size() == 1) {
        AutoScalingConfig.TriggerListenerConfig cfg = listeners.get(activeListeners.iterator().next());
        if (SystemLogListener.class.getName().equals(cfg.listenerClass) ||
            ("solr." + SystemLogListener.class.getSimpleName()).equals(cfg.listenerClass)) {
          onlySystemLog = true;
        }
      }
      if (removeListeners || onlySystemLog) {
        listeners = new HashMap<>(listeners);
        listeners.keySet().removeAll(activeListeners);
      } else {
        op.addError("Cannot remove trigger: " + triggerName + " because it has active listeners: " + activeListeners);
        return currentConfig;
      }
    }
    triggerConfigs.remove(triggerName);
    currentConfig = currentConfig.withTriggerConfigs(triggerConfigs).withTriggerListenerConfigs(listeners);
    return currentConfig;
  }

