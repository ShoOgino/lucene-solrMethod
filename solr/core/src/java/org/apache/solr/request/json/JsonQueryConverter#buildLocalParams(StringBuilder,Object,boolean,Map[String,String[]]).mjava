  private void buildLocalParams(StringBuilder builder, Object val, boolean isQParser, Map<String, String[]> additionalParams) {
    if (!isQParser && !(val instanceof Map)) {
      // val is value of a query parser, and it is not a map
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
          "Error when parsing json query, expect a json object here, but found : "+val);
    }
    if (val instanceof String) {
      builder.append('$').append(putParam(val.toString(), additionalParams));
      return;
    }
    if (val instanceof Number) {
      builder.append(val);
      return;
    }
    if (!(val instanceof Map)) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
          "Error when parsing json query, expect a json object here, but found : "+val);
    }

    Map<String,Object> map = (Map<String, Object>) val;
    if (isQParser) {
      if (map.size() != 1) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
            "Error when parsing json query, expect only one query parser here, but found : "+map.keySet());
      }
      String qtype = map.keySet().iterator().next();
      Object subVal = map.get(qtype);

      // We don't want to introduce unnecessary variable at root level
      boolean useSubBuilder = builder.length() > 0;
      StringBuilder subBuilder = builder;

      if (useSubBuilder) subBuilder = new StringBuilder();

      subBuilder = subBuilder.append("{!").append(qtype).append(' ');;
      buildLocalParams(subBuilder, subVal, false, additionalParams);
      subBuilder.append("}");

      if (useSubBuilder) builder.append('$').append(putParam(subBuilder.toString(), additionalParams));
    } else {
      for (Map.Entry<String, Object> entry : map.entrySet()) {
        String key = entry.getKey();
        if (entry.getValue() instanceof List) {
          if (key.equals("query")) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
                "Error when parsing json query, value of query field should not be a list, found : " + entry.getValue());
          }
          List l = (List) entry.getValue();
          for (Object subVal : l) {
            builder.append(key).append("=");
            buildLocalParams(builder, subVal, true, additionalParams);
            builder.append(" ");
          }
        } else {
          if (key.equals("query")) {
            key = "v";
          }
          builder.append(key).append("=");
          buildLocalParams(builder, entry.getValue(), true, additionalParams);
          builder.append(" ");
        }
      }
    }
  }

