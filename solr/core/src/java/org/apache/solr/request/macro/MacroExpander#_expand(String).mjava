  private String _expand(String val) {
    // quickest short circuit
    int idx = val.indexOf(macroStart.charAt(0));
    if (idx < 0) return val;

    int start = 0;  // start of the unprocessed part of the string
    StringBuilder sb = null;
    for (;;) {
      assert idx >= start;
      idx = val.indexOf(macroStart, idx);

      // check if escaped
      if (idx > 0) {
        // check if escaped...
        // TODO: what if you *want* to actually have a backslash... perhaps that's when we allow changing
        // of the escape character?

        char ch = val.charAt(idx-1);
        if (ch == escape) {
          idx += macroStart.length();
          continue;
        }
      }
      else if (idx < 0) {
        break;
      }

      // found unescaped "${"
      final int matchedStart = idx;

      int rbrace = val.indexOf('}', matchedStart + macroStart.length());
      if (rbrace == -1) {
        // no matching close brace...
        if (failOnMissingParams) {
          return null;
        }
        break;
      }

      if (sb == null) {
        sb = new StringBuilder(val.length()*2);
      }

      if (matchedStart > 0) {
        sb.append(val, start, matchedStart);
      }

      // update "start" to be at the end of ${...}
      idx = start = rbrace + 1;

      // String in-between braces
      StrParser parser = new StrParser(val, matchedStart + macroStart.length(), rbrace);
      try {
        String paramName = parser.getId();
        String defVal = null;
        boolean hasDefault = parser.opt(':');
        if (hasDefault) {
          defVal = val.substring(parser.pos, rbrace);
        }

        // in the event that expansions become context dependent... consult original?
        String[] replacementList = orig.get(paramName);

        // TODO - handle a list somehow...
        String replacement = replacementList!=null ? replacementList[0] : defVal;
        if (replacement != null) {
          String expandedReplacement = expand(replacement);
          if (failOnMissingParams && expandedReplacement == null) {
            return null;
          }
          sb.append(expandedReplacement);
        }
        else if (failOnMissingParams) {
          return null;
        }

      } catch (SyntaxError syntaxError) {
        if (failOnMissingParams) {
          return null;
        }
        // append the part we would have skipped
        sb.append(val, matchedStart, start);
      }
    } // loop idx

    if (sb == null) {
      return val;
    }
    sb.append(val, start, val.length());
    return sb.toString();
  }

