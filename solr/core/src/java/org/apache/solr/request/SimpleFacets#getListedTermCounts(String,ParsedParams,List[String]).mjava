  /**
   * Computes the term-&gt;count counts for the specified term values relative to the
   *
   * @param field the name of the field to compute term counts against
   * @param parsed contains the docset to compute term counts relative to
   * @param terms a list of term values (in the specified field) to compute the counts for
   */
  protected NamedList<Integer> getListedTermCounts(String field, final ParsedParams parsed, List<String> terms)
      throws IOException {
    final String sort = parsed.params.getFieldParam(field, FacetParams.FACET_SORT, "empty");
    final SchemaField sf = searcher.getSchema().getField(field);
    final FieldType ft = sf.getType();
    final DocSet baseDocset = parsed.docs;
    final NamedList<Integer> res = new NamedList<>();
    Stream<String> inputStream = terms.stream();
    if (sort.equals(FacetParams.FACET_SORT_INDEX)) { // it might always make sense
      inputStream = inputStream.sorted();
    }
    Stream<SimpleImmutableEntry<String,Integer>> termCountEntries = inputStream
        .map((term) -> new SimpleImmutableEntry<>(term, numDocs(term, sf, ft, baseDocset)));
    if (sort.equals(FacetParams.FACET_SORT_COUNT)) {
      termCountEntries = termCountEntries.sorted(Collections.reverseOrder(Map.Entry.comparingByValue()));
    }
    termCountEntries.forEach(e -> res.add(e.getKey(), e.getValue()));
    return res;
  }

