  /**
   * Create a new bytes ref filter for filtering facet terms. If more than one filter is
   * applicable the applicable filters will be returned as an {@link Predicate#and(Predicate)}
   * of all such filters.
   *
   * @param field the field to check for facet term filters
   * @param params the request parameter object
   * @return A predicate for filtering terms or null if no filters are applicable.
   */
  protected Predicate<BytesRef> newBytesRefFilter(String field, SolrParams params) {
    final String contains = params.getFieldParam(field, FacetParams.FACET_CONTAINS);

    Predicate<BytesRef> finalFilter = null;

    if (contains != null) {
      final boolean containsIgnoreCase = params.getFieldBool(field, FacetParams.FACET_CONTAINS_IGNORE_CASE, false);
      finalFilter = new SubstringBytesRefFilter(contains, containsIgnoreCase);
    }

    final String regex = params.getFieldParam(field, FacetParams.FACET_MATCHES);
    if (regex != null) {
      final RegexBytesRefFilter regexBytesRefFilter = new RegexBytesRefFilter(regex);
      finalFilter = (finalFilter == null) ? regexBytesRefFilter : finalFilter.and(regexBytesRefFilter);
    }

    final Predicate<BytesRef> excludeFilter = newExcludeBytesRefFilter(field, params);
    if (excludeFilter != null) {
      finalFilter = (finalFilter == null) ? excludeFilter : finalFilter.and(excludeFilter);
    }

    return finalFilter;
  }

