  private void writePropFile(CoreDescriptor cd, CoreContainer cc) {
    File propFile = new File(cd.getInstanceDir(), "core.properties");
    if (!propFile.exists()) {
      propFile.getParentFile().mkdirs();
      Properties props = new Properties();
      props.put("name", cd.getName());

      // This must be being created since there's no file here already. So write out all of the params we were
      // created with. This _may_ overwrite the name above, but that's OK.
      Collection<String> stds = new HashSet(Arrays.asList(CoreDescriptor.standardPropNames));
      for (String prop : cd.getCreatedProperties().stringPropertyNames()) {
        // Only preserve things that are legal, and let's just keep instDir right out of the persisted file even
        // though it's part of the create properties on the URL.
        if (! CoreDescriptor.CORE_INSTDIR.equals(prop) && stds.contains(prop)) {
          props.put(prop, cd.getCreatedProperties().getProperty(prop));
        }
      }

      if (cc.isZooKeeperAware()) {
        String collection = cd.getCloudDescriptor().getCollectionName();
        if (collection != null) {
          props.put("collection", collection);
        }
        String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();
        if (coreNodeName != null) {
          props.put("coreNodeName", coreNodeName);
        }
        String roles = cd.getCloudDescriptor().getRoles();
        if (roles != null) {
          props.put("roles", roles);
        }
        String shardId = cd.getCloudDescriptor().getShardId();
        if (shardId != null) {
          props.put("shard", shardId);
        }
      }
      OutputStream out = null;
      try {
        out = new FileOutputStream(propFile);
        props.store(out, "");
      } catch (IOException e) {
        throw new SolrException(ErrorCode.SERVER_ERROR, null, e);
      } finally {
        if (out != null) {
          IOUtils.closeQuietly(out);
        }
      }
    }
  }

