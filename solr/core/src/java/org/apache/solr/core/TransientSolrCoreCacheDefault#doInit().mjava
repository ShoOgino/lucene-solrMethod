  // This just moves the 
  private void doInit() {
    NodeConfig cfg = coreContainer.getNodeConfig();
    if (cfg.getTransientCachePluginInfo() == null) {
      // Still handle just having transientCacheSize defined in the body of solr.xml not in a transient handler clause.
      this.cacheSize = cfg.getTransientCacheSize();
    } else {
      NamedList args = cfg.getTransientCachePluginInfo().initArgs;
      Object obj = args.get("transientCacheSize");
      if (obj != null) {
        this.cacheSize = (int) obj;
      }
    }

    log.info("Allocating transient cache for {} transient cores", cacheSize);
    addObserver(this.observer);
    // it's possible for cache
    if (cacheSize < 0) { // Trap old flag
      cacheSize = Integer.MAX_VALUE;
    }
    // Now don't allow ridiculous allocations here, if the size is > 1,000, we'll just deal with
    // adding cores as they're opened. This blows up with the marker value of -1.
    transientCores = new LinkedHashMap<String, SolrCore>(Math.min(cacheSize, 1000), 0.75f, true) {
      @Override
      protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {
        if (size() > cacheSize) {
          SolrCore coreToClose = eldest.getValue();
          setChanged();
          notifyObservers(coreToClose);
          log.info("Closing transient core [{}]", coreToClose.getName());
          return true;
        }
        return false;
      }
    };
  }

