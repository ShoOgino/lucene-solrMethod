  public CoreContainer(NodeConfig config, CoresLocator locator, boolean asyncSolrCoreLoad) {
    this.loader = config.getSolrResourceLoader();
    this.solrHome = config.getSolrHome();
    this.cfg = requireNonNull(config);
    try {
      containerHandlers.put(PublicKeyHandler.PATH, new PublicKeyHandler(cfg.getCloudConfig()));
    } catch (IOException | InvalidKeySpecException e) {
      throw new RuntimeException("Bad PublicKeyHandler configuration.", e);
    }
    if (null != this.cfg.getBooleanQueryMaxClauseCount()) {
      IndexSearcher.setMaxClauseCount(this.cfg.getBooleanQueryMaxClauseCount());
    }
    this.coresLocator = locator;
    this.containerProperties = new Properties(config.getSolrProperties());
    this.asyncSolrCoreLoad = asyncSolrCoreLoad;
    this.replayUpdatesExecutor = new OrderedExecutor(
        cfg.getReplayUpdatesThreads(),
        ExecutorUtil.newMDCAwareCachedThreadPool(
            cfg.getReplayUpdatesThreads(),
            new SolrNamedThreadFactory("replayUpdatesExecutor")));

    this.allowPaths = new java.util.HashSet<>();
    this.allowPaths.add(cfg.getSolrHome());
    this.allowPaths.add(cfg.getCoreRootDirectory());
    if (cfg.getSolrDataHome() != null) {
      this.allowPaths.add(cfg.getSolrDataHome());
    }
    if (!cfg.getAllowPaths().isEmpty()) {
      this.allowPaths.addAll(cfg.getAllowPaths());
      if (log.isInfoEnabled()) {
        log.info("Allowing use of paths: {}", cfg.getAllowPaths());
      }
    }
  }

