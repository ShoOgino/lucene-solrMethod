  /**
   * Updates the state of all "current" commits.
   * <p>
   * This method is safe to call <em>after</em> delegating to ou inner <code>IndexDeletionPolicy</code>
   * (w/o synchornizing the delegate calls) because even if the delegate decides to 
   * {@link IndexCommit#delete} a commit that a concurrent thread may wish to reserve/save, 
   * that {@link IndexCommitWrapper} will ensure that call is synchronized.  
   * </p>
   * 
   * @see #updateLatestCommit
   */
  private synchronized void updateKnownCommitPoints(final List<IndexCommitWrapper> list) {
    assert null != list;
    assert (list.isEmpty() || null != latestCommit) : "Code flaw: How is latestCommit not set yet?";
    assert (null == latestCommit || ! latestCommit.isDeleted())
      : "Code flaw: How did the latestCommit get set but deleted?";
    assert (list.isEmpty() || latestCommit == list.get(list.size() - 1).delegate)
      : "Code flaw, updateLatestCommit() should have already been called";
    
    final Map<Long, IndexCommit> map = new ConcurrentHashMap<>();
    for (IndexCommitWrapper wrapper : list) {
      if (!wrapper.isDeleted()) {
        map.put(wrapper.delegate.getGeneration(), wrapper.delegate);
      }
    }
    knownCommits = map;
  }

