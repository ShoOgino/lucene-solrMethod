    private void updateReqHandlers(Map<String, Object> properties, boolean forceReload) {
      Map m = (Map) properties.getOrDefault(SolrRequestHandler.TYPE, Collections.emptyMap());
      if (m.isEmpty() && customHandlers.isEmpty()) return;
      boolean hasChanged = true;
      if (customHandlers.size() == m.size() && customHandlers.keySet().containsAll(m.keySet())) hasChanged = false;
      if (forceReload || hasChanged) {
        log.debug("RequestHandlers being reloaded : {}", m.keySet());
        Map<String, SolrRequestHandler> newCustomHandlers = new HashMap<>();
        m.forEach((k, v) -> {
          if (v instanceof Map) {
            String klas = (String) ((Map) v).get(FieldType.CLASS_NAME);
            if (klas != null) {
              SolrRequestHandler inst = libListener.newInstance(klas, SolrRequestHandler.class);
              if (inst instanceof PluginInfoInitialized) {
                ((PluginInfoInitialized) inst).init(new PluginInfo(SolrRequestHandler.TYPE, (Map) v));
              }
              newCustomHandlers.put((String) k, inst);
            }
          } else {
            log.error("Invalid data for requestHandler : {} , {}", k, v);
          }
        });

        log.debug("Registering request handlers {} ", newCustomHandlers.keySet());
        Map<String, SolrRequestHandler> old = customHandlers;
        customHandlers = newCustomHandlers;
        old.forEach((s, h) -> PluginBag.closeQuietly(h));
      }
    }

