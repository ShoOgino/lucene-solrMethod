  // Irrepressably ugly bit of the transition in SOLR-4196, but there as at least one test case that follows
  // this path, presumably it's there for a reason.
  // This is really perverse, but all we need the here is to call a couple of static methods that for back-compat
  // purposes
  public void persistCores(ConfigSolr cfg, Properties containerProperties, Map<String, String> rootSolrAttribs,
                           Map<String, String> coresAttribs, File file, File configFile, SolrResourceLoader loader) {
    // This is expensive in the maximal case, but I think necessary. It should keep a reference open to all of the
    // current cores while they are saved. Remember that especially the transient core can come and go.
    //
    // Maybe the right thing to do is keep all the core descriptors NOT in the SolrCore, but keep all of the
    // core descriptors in SolrProperties exclusively.
    // TODO: 5.0 move coreDescriptors out of SolrCore and keep them only once in SolrProperties
    //
    synchronized (locker) {
      if (cfg == null) {
        ConfigSolrXmlBackCompat.initPersistStatic();
        persistCores(cfg, cores, loader);
        persistCores(cfg, transientCores, loader);
        ConfigSolrXmlBackCompat.addPersistAllCoresStatic(containerProperties, rootSolrAttribs, coresAttribs,
            (file == null ? configFile : file));
      } else {
        cfg.initPersist();
        persistCores(cfg, cores, loader);
        persistCores(cfg, transientCores, loader);
        cfg.addPersistAllCores(containerProperties, rootSolrAttribs, coresAttribs, (file == null ? configFile : file));
      }
    }
  }

