  /**
   * Adds every file/dir found in the baseDir which passes the specified Filter
   * to the ClassLoader used by this ResourceLoader.  This method <b>MUST</b>
   * only be called prior to using this ResourceLoader to get any resources, otherwise
   * it's behavior will be non-deterministic. You also have to {link @reloadLuceneSPI}
   * before using this ResourceLoader.
   * 
   * <p>This method will quietly ignore missing or non-directory <code>baseDir</code>
   *  folder. 
   *
   * @param baseDir base directory whose children (either jars or directories of
   *                classes) will be in the classpath, will be resolved relative
   *                the instance dir.
   * @param filter The filter files must satisfy, if null all files will be accepted.
   * @param quiet  Be quiet if baseDir does not point to a directory or if no file is 
   *               left after applying the filter. 
   */
  void addToClassLoader(final String baseDir, final FileFilter filter, boolean quiet) {
    File base = FileUtils.resolvePath(new File(getInstanceDir()), baseDir);
    if (base != null && base.exists() && base.isDirectory()) {
      File[] files = base.listFiles(filter);
      if (!quiet && (files == null || files.length == 0)) {
        log.warn("No files added to classloader from lib: "
            + baseDir + " (resolved as: " + base.getAbsolutePath() + ").");
      } else {
        this.classLoader = replaceClassLoader(classLoader, base, filter);
      }
    } else {
      if (!quiet) {
        log.warn("Can't find (or read) directory to add to classloader: "
            + baseDir + " (resolved as: " + base.getAbsolutePath() + ").");
      }
    }
  }

