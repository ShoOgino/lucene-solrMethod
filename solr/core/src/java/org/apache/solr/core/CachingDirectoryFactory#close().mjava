  /*
   * (non-Javadoc)
   * 
   * @see org.apache.solr.core.DirectoryFactory#close()
   */
  @Override
  public void close() throws IOException {
    synchronized (this) {
      log.info("Closing " + this.getClass().getSimpleName() + " - " + byDirectoryCache.size() + " directories currently being tracked");
      this.closed = true;
      Collection<CacheValue> values = byDirectoryCache.values();
      for (CacheValue val : values) {
        log.debug("Closing {} - currently tracking: {}", 
                  this.getClass().getSimpleName(), val);
        try {
          // if there are still refs out, we have to wait for them
          int cnt = 0;
          while(val.refCnt != 0) {
            wait(100);
            
            if (cnt++ >= 120) {
              String msg = "Timeout waiting for all directory ref counts to be released - gave up waiting on " + val;
              log.error(msg);
              // debug
              // val.originTrace.printStackTrace();
              throw new SolrException(ErrorCode.SERVER_ERROR, msg);
            }
          }
          assert val.refCnt == 0 : val.refCnt;
        } catch (Exception e) {
          SolrException.log(log, "Error closing directory", e);
        }
      }
      
      values = byDirectoryCache.values();
      Set<CacheValue> closedDirs = new HashSet<CacheValue>();
      for (CacheValue val : values) {
        try {
          for (CacheValue v : val.closeEntries) {
            assert v.refCnt == 0 : val.refCnt;
            log.debug("Closing directory when closing factory: " + v.path);
            boolean cl = closeCacheValue(v);
            if (cl) {
              closedDirs.add(v);
            }
          }
        } catch (Exception e) {
          SolrException.log(log, "Error closing directory", e);
        }
      }

      for (CacheValue val : removeEntries) {
        log.info("Removing directory after core close: " + val.path);
        try {
          removeDirectory(val);
        } catch (Exception e) {
          SolrException.log(log, "Error removing directory", e);
        }
      }
      
      for (CacheValue v : closedDirs) {
        removeFromCache(v);
      }
    }
  }

