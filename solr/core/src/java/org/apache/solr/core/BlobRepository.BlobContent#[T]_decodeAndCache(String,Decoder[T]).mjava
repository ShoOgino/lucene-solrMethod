    /**
     * This method decodes the byte[] to a custom Object
     *
     * @param key     The key is used to store the decoded Object. it is possible to have multiple
     *                decoders for the same blob (may be unusual).
     * @param decoder A decoder instance
     * @return the decoded Object . If it was already decoded, then return from the cache
     */
    public <T> T decodeAndCache(String key, Decoder<T> decoder) {
      if (decodedObjects == null) {
        synchronized (this) {
          if (decodedObjects == null) decodedObjects = new ConcurrentHashMap<>();
        }
      }

      Object t = decodedObjects.get(key);
      if (t != null) return (T) t;
      t = decoder.decode(new ByteBufferInputStream(buffer));
      decodedObjects.put(key, t);
      return (T) t;

    }

