  /**
   * <p>
   * This loader will delegate to Solr's classloader when possible,
   * otherwise it will attempt to resolve resources using any jar files
   * found in the "lib/" directory in the specified instance directory.
   * </p>
   *
   * @param instanceDir - base directory for this resource loader, if null locateSolrHome() will be used.
   * @see #locateSolrHome
   */
  public SolrResourceLoader(Path instanceDir, ClassLoader parent, Properties coreProperties) {
    if (instanceDir == null) {
      this.instanceDir = SolrResourceLoader.locateSolrHome().toAbsolutePath().normalize();
      log.debug("new SolrResourceLoader for deduced Solr Home: '{}'", this.instanceDir);
    } else{
      this.instanceDir = instanceDir.toAbsolutePath().normalize();
      log.debug("new SolrResourceLoader for directory: '{}'", this.instanceDir);
    }

    if (parent == null) {
      parent = getClass().getClassLoader();
    }
    this.classLoader = URLClassLoader.newInstance(new URL[0], parent);

    /* 
     * Skip the lib subdirectory when we are loading from the solr home.
     * Otherwise load it, so core lib directories still get loaded.
     * The default sharedLib will pick this up later, and if the user has
     * changed sharedLib, then we don't want to load that location anyway.
     */
    if (!this.instanceDir.equals(SolrResourceLoader.locateSolrHome())) {
      Path libDir = this.instanceDir.resolve("lib");
      if (Files.exists(libDir)) {
        try {
          addToClassLoader(getURLs(libDir));
        } catch (IOException e) {
          log.warn("Couldn't add files from {} to classpath: {}", libDir, e.getMessage());
        }
        reloadLuceneSPI();
      }
    }
    this.coreProperties = coreProperties;
  }

