  @Override
  public String getCoreNameFromOrig(String origCoreName, SolrResourceLoader loader, String coreName) {

    if (isAutoDiscover) {
      // first look for an exact match
      for (Map.Entry<String, CoreDescriptorPlus> ent : coreDescriptorPlusMap.entrySet()) {

        String name = ent.getValue().getCoreDescriptor().getProperty(CoreDescriptor.CORE_NAME, null);
        if (origCoreName.equals(name)) {
          if (coreName.equals(origCoreName)) {
            return name;
          }
          return coreName;
        }
      }

      for (Map.Entry<String, CoreDescriptorPlus> ent : coreDescriptorPlusMap.entrySet()) {
        String name = ent.getValue().getCoreDescriptor().getProperty(CoreDescriptor.CORE_NAME, null);
        // see if we match with substitution
        if (origCoreName.equals(PropertiesUtil.substituteProperty(name, loader.getCoreProperties()))) {
          if (coreName.equals(origCoreName)) {
            return name;
          }
          return coreName;
        }
      }
    } else {
      // look for an existing node
      synchronized (coreNodes) {
        // first look for an exact match
        Node coreNode = null;
        for (int i = 0; i < coreNodes.getLength(); i++) {
          Node node = coreNodes.item(i);

          String name = DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null);
          if (origCoreName.equals(name)) {
            if (coreName.equals(origCoreName)) {
              return name;
            }
            return coreName;
          }
        }

        if (coreNode == null) {
          // see if we match with substitution
          for (int i = 0; i < coreNodes.getLength(); i++) {
            Node node = coreNodes.item(i);
            String name = DOMUtil.getAttr(node, CoreDescriptor.CORE_NAME, null);
            if (origCoreName.equals(PropertiesUtil.substituteProperty(name,
                loader.getCoreProperties()))) {
              if (coreName.equals(origCoreName)) {
                return name;
              }
              return coreName;
            }
          }
        }
      }
    }
    return null;
  }

