  /**
   * This method returns the {@linkplain CollectionSnapshotMetaData} for the named snapshot for the specified collection in Zookeeper.
   *
   * @param zkClient  Zookeeper client
   * @param collectionName  The name of the collection
   * @param commitName The name of the snapshot
   * @return (Optional) the {@linkplain CollectionSnapshotMetaData}
   * @throws InterruptedException In case of thread interruption.
   * @throws KeeperException In case of Zookeeper error
   */
  public static Optional<CollectionSnapshotMetaData> getCollectionLevelSnapshot(SolrZkClient zkClient, String collectionName, String commitName)
      throws InterruptedException, KeeperException {
    String zkPath = getSnapshotMetaDataZkPath(collectionName, Optional.of(commitName));
    try {
      @SuppressWarnings({"unchecked"})
      Map<String, Object> data = (Map<String, Object>)Utils.fromJSON(zkClient.getData(zkPath, null, null, true));
      return Optional.of(new CollectionSnapshotMetaData(data));
    } catch (KeeperException ex) {
      // Gracefully handle the case when the zk node for a specific
      // snapshot doesn't exist (e.g. due to a concurrent delete operation).
      if ( ex.code() == KeeperException.Code.NONODE ) {
        return Optional.empty();
      }
      throw ex;
    }
  }

