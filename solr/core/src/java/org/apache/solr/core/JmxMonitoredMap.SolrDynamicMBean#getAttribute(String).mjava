    @Override
    public Object getAttribute(String attribute)
            throws AttributeNotFoundException, MBeanException, ReflectionException {
      Object val;
      if ("coreHashCode".equals(attribute)) {
        val = coreHashCode;
      } else if (staticStats.contains(attribute) && attribute != null
              && attribute.length() > 0) {
        try {
          String getter = "get" + attribute.substring(0, 1).toUpperCase(Locale.ROOT)
                  + attribute.substring(1);
          Method meth = infoBean.getClass().getMethod(getter);
          val = meth.invoke(infoBean);
        } catch (Exception e) {
          throw new AttributeNotFoundException(attribute);
        }
      } else {
        NamedList stats = null;
        if (useCachedStatsBetweenGetMBeanInfoCalls) {
          NamedList cachedStats = this.cachedDynamicStats;
          if (cachedStats != null) {
            stats = cachedStats;
          }
        }
        if (stats == null) {
          stats = infoBean.getStatistics();
        }
        val = stats.get(attribute);
      }

      if (val != null) {
        // It's String or one of the simple types, just return it as JMX suggests direct support for such types
        for (String simpleTypeName : SimpleType.ALLOWED_CLASSNAMES_LIST) {
          if (val.getClass().getName().equals(simpleTypeName)) {
            return val;
          }
        }
        // It's an arbitrary object which could be something complex and odd, return its toString, assuming that is
        // a workable representation of the object
        return val.toString();
      }
      return null;
    }

