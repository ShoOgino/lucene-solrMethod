  void createNewClassLoader(Map m) {
    boolean[] loadedAll = new boolean[1];
    loadedAll[0] = true;
    Map<String, RuntimeLib> libMap = new LinkedHashMap<>();
    m.forEach((k, v) -> {
      if (v instanceof Map) {
        Map map = new HashMap((Map) v);
        map.put(CoreAdminParams.NAME, String.valueOf(k));
        RuntimeLib lib = new RuntimeLib(coreContainer);
        try {
          lib.init(new PluginInfo(null, map));
          if (lib.getUrl() == null) {
            log.error("Unable to initialize runtimeLib : " + Utils.toJSONString(v));
            loadedAll[0] = false;
          }
          lib.loadJar();
          libMap.put(lib.getName(), lib);
        } catch (Exception e) {
          log.error("error loading a runtimeLib " + Utils.toJSONString(v), e);
          loadedAll[0] = false;

        }
      }
    });

    if (loadedAll[0]) {
      log.info("Libraries changed. New memclassloader created with jars {}", libMap.values().stream().map(runtimeLib -> runtimeLib.getUrl()).collect(Collectors.toList()));
      this.memClassLoader = new MemClassLoader(new ArrayList<>(libMap.values()), coreContainer.getResourceLoader());
      this.runtimeLibs = libMap;

    }
  }

