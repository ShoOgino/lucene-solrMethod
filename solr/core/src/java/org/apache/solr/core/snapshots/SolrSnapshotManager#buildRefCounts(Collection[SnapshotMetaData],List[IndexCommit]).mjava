  /**
   * This method computes reference count for the index files by taking into consideration
   * (a) configured snapshots and (b) files sharing between two or more {@linkplain IndexCommit} instances.
   *
   * @param snapshots A collection of user configured snapshots
   * @param commits A list of {@linkplain IndexCommit} instances
   * @return A map containing reference count for each index file referred in one of the {@linkplain IndexCommit} instances.
   * @throws IOException in case of I/O error.
   */
  @VisibleForTesting
  static Map<String, Integer> buildRefCounts (Collection<SnapshotMetaData> snapshots, List<IndexCommit> commits) throws IOException {
    Map<String, Integer> result = new HashMap<>();
    Map<Long, IndexCommit> commitsByGen = commits.stream().collect(
        Collectors.toMap(IndexCommit::getGeneration, Function.identity()));

    for(SnapshotMetaData md : snapshots) {
      IndexCommit ic = commitsByGen.get(md.getGenerationNumber());
      if (ic != null) {
        Collection<String> fileNames = ic.getFileNames();
        for(String fileName : fileNames) {
          int refCount = result.getOrDefault(fileName, 0);
          result.put(fileName, refCount+1);
        }
      }
    }

    return result;
  }

