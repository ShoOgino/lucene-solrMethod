  /**
   * SolrConfig keeps a repository of plugins by the type. The known interfaces are the types.
   *
   * @param type The key is FQN of the plugin class there are a few  known types : SolrFormatter, SolrFragmenter
   *             SolrRequestHandler,QParserPlugin, QueryResponseWriter,ValueSourceParser,
   *             SearchComponent, QueryConverter, SolrEventListener, DirectoryFactory,
   *             IndexDeletionPolicy, IndexReaderFactory, {@link TransformerFactory}
   */
  public List<PluginInfo> getPluginInfos(String type) {
    List<PluginInfo> result = pluginStore.get(type);
    SolrPluginInfo info = classVsSolrPluginInfo.get(type);
    if (info != null &&
        (info.options.contains(REQUIRE_NAME) || info.options.contains(REQUIRE_NAME_IN_OVERLAY))) {
      Map<String, Map> infos = overlay.getNamedPlugins(info.getCleanTag());
      if (!infos.isEmpty()) {
        LinkedHashMap<String, PluginInfo> map = new LinkedHashMap<>();
        if (result != null) {
          for (PluginInfo pluginInfo : result) {
            //just create a UUID for the time being so that map key is not null
            String name = pluginInfo.name == null ?
                UUID.randomUUID().toString().toLowerCase(Locale.ROOT) :
                pluginInfo.name;
            map.put(name, pluginInfo);
          }
        }
        for (Map.Entry<String, Map> e : infos.entrySet()) {
          PluginInfo value = new PluginInfo(info.getCleanTag(), e.getValue());
          value.pathInConfig = Arrays.asList(info.getCleanTag(),e.getKey());
          map.put(e.getKey(), value);
        }
        result = new ArrayList<>(map.values());
      }
    }
    return result == null ? Collections.emptyList() : result;
  }

