  // We are shutting down. You can't hold the lock on the various lists of cores while they shut down, so we need to
  // make a temporary copy of the names and shut them down outside the lock.
  protected void close() {
    List<String> coreNames;
    List<String> transientNames;
    List<SolrCore> pendingToClose;

    // It might be possible for one of the cores to move from one list to another while we're closing them. So
    // loop through the lists until they're all empty. In particular, the core could have moved from the transient
    // list to the pendingCloses list.

    while (true) {
      synchronized (modifyLock) {
        coreNames = new ArrayList<String>(cores.keySet());
        transientNames = new ArrayList<String>(transientCores.keySet());
        pendingToClose = new ArrayList<SolrCore>(pendingCloses);
      }

      if (coreNames.size() == 0 && transientNames.size() == 0 && pendingToClose.size() == 0) break;

      for (String coreName : coreNames) {
        SolrCore core = cores.get(coreName);
        if (core == null) {
          CoreContainer.log.info("Core " + coreName + " moved from core container list before closing.");
        } else {
          try {
            // nocommit: wtf is this?
           // addPersistOneCore(cfg, container.loader, core.getCoreDescriptor(), getCoreToOrigName(core));

            core.close();
          } catch (Throwable t) {
            SolrException.log(CoreContainer.log, "Error shutting down core", t);
          } finally {
            synchronized (modifyLock) {
              cores.remove(coreName);
            }
          }
        }
      }

      for (String coreName : transientNames) {
        SolrCore core = transientCores.get(coreName);
        if (core == null) {
          CoreContainer.log.info("Core " + coreName + " moved from transient core container list before closing.");
        } else {
          try {
            core.close();
          } catch (Throwable t) {
            SolrException.log(CoreContainer.log, "Error shutting down core", t);
          } finally {
            synchronized (modifyLock) {
              transientCores.remove(coreName);
            }
          }
        }
      }

      // We might have some cores that we were _thinking_ about shutting down, so take care of those too.
      for (SolrCore core : pendingToClose) {
        try {
          core.close();
        } catch (Throwable t) {
          SolrException.log(CoreContainer.log, "Error shutting down core", t);
        } finally {
          synchronized (modifyLock) {
            pendingCloses.remove(core);
          }
        }
      }
    }
  }

