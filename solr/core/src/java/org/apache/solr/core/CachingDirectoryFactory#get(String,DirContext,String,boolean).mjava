  /*
   * (non-Javadoc)
   * 
   * @see org.apache.solr.core.DirectoryFactory#get(java.lang.String,
   * java.lang.String, boolean)
   */
  @Override
  public final Directory get(String path,  DirContext dirContext, String rawLockType, boolean forceNew)
      throws IOException {
    String fullPath = normalize(path);
    synchronized (this) {
      if (closed) {
        throw new RuntimeException("Already closed");
      }
      
      final CacheValue cacheValue = byPathCache.get(fullPath);
      Directory directory = null;
      if (cacheValue != null) {
        directory = cacheValue.directory;
        if (forceNew) {
          cacheValue.doneWithDir = true;
          
          // we make a quick close attempt,
          // otherwise this should be closed
          // when whatever is using it, releases it
          
          if (cacheValue.refCnt == 0) {
            try {
              // the following will decref, so
              // first incref
              cacheValue.refCnt++;
              close(cacheValue.directory);
            } catch (IOException e) {
              SolrException.log(log, "Error closing directory", e);
            }
          }
          
          // kill the path, it will be owned by the new dir
          // we count on it being released by directory
          cacheValue.path = null;
          
        }
      }
      
      if (directory == null || forceNew) { 
        directory = create(fullPath, dirContext);
        
        directory = rateLimit(directory);
        
        CacheValue newCacheValue = new CacheValue();
        newCacheValue.directory = directory;
        newCacheValue.path = fullPath;
        
        injectLockFactory(directory, fullPath, rawLockType);
        
        byDirectoryCache.put(directory, newCacheValue);
        byPathCache.put(fullPath, newCacheValue);
        log.info("return new directory for " + fullPath + " forceNew: " + forceNew);
      } else {
        cacheValue.refCnt++;
      }
      
      return directory;
    }
  }

