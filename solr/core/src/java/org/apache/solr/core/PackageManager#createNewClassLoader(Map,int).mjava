  void createNewClassLoader(Map m, int ver) {
    boolean[] loadedAll = new boolean[1];
    loadedAll[0] = true;
    Map<String, Package> newPkgs = new LinkedHashMap<>();
    m.forEach((k, v) -> {
      if (v instanceof Map) {
        Map map = new HashMap((Map) v);
        map.put(CoreAdminParams.NAME, String.valueOf(k));
        String name = (String) k;
        Package existing = pkgs.get(name);
        if (existing != null && !existing.isModified(map)) {
          //this package has not changed
          newPkgs.put(name, existing);
        }

        RuntimeLib lib = new RuntimeLib(coreContainer);
        lib.znodeVersion = ver;
        try {
          lib.init(new PluginInfo(RuntimeLib.TYPE, map));
          if (lib.getUrl() == null) {
            log.error("Unable to initialize runtimeLib : " + Utils.toJSONString(v));
            loadedAll[0] = false;
          }
          lib.loadJar();

          newPkgs.put(name, new Package(lib,
              new MemClassLoader(Collections.singletonList(lib), coreContainer.getResourceLoader()),
              ver, name));
        } catch (Exception e) {
          log.error("error loading a runtimeLib " + Utils.toJSONString(v), e);
          loadedAll[0] = false;

        }
      }
    });

    if (loadedAll[0]) {
      log.info("Libraries changed. New memclassloader created with jars {}",
          newPkgs.values().stream().map(it -> it.lib.getUrl()).collect(Collectors.toList()));
      this.pkgs = newPkgs;

    }
  }

