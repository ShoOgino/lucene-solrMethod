  private void initializeAuthenticationPlugin() {
    String pluginClassName = null;
    Map<String, Object> authenticationConfig = null;

    if (isZooKeeperAware()) {
      Map securityProps = getZkController().getZkStateReader().getSecurityProps();
      if (securityProps != null) {
        authenticationConfig = (Map<String, Object>) securityProps.get("authentication");
        if (authenticationConfig!=null) {
          if (authenticationConfig.containsKey("class")) {
            pluginClassName = String.valueOf(authenticationConfig.get("class"));
          } else {
            throw new SolrException(ErrorCode.SERVER_ERROR, "No 'class' specified for authentication in ZK.");
          }
        }
      }
    }

    if (pluginClassName != null) {
      log.info("Authentication plugin class obtained from ZK: "+pluginClassName);
    } else if (System.getProperty(AUTHENTICATION_PLUGIN_PROP) != null) {
      pluginClassName = System.getProperty(AUTHENTICATION_PLUGIN_PROP);
      log.info("Authentication plugin class obtained from system property '" +
          AUTHENTICATION_PLUGIN_PROP + "': " + pluginClassName);
    } else {
      log.info("No authentication plugin used.");
    }

    // Initialize the filter
    if (pluginClassName != null) {
      authenticationPlugin = getResourceLoader().newInstance(pluginClassName, AuthenticationPlugin.class);
    }
    if (authenticationPlugin != null) {
      authenticationPlugin.init(authenticationConfig);

      // Setup HttpClient to use the plugin's configurer for internode communication
      HttpClientConfigurer configurer = authenticationPlugin.getDefaultConfigurer();
      HttpClientUtil.setConfigurer(configurer);

      // The default http client of the core container's shardHandlerFactory has already been created and
      // configured using the default httpclient configurer. We need to reconfigure it using the plugin's
      // http client configurer to set it up for internode communication.
      log.info("Reconfiguring the shard handler factory and update shard handler.");
      if (getShardHandlerFactory() instanceof HttpShardHandlerFactory) {
        ((HttpShardHandlerFactory)getShardHandlerFactory()).reconfigureHttpClient(configurer);
      }
      getUpdateShardHandler().reconfigureHttpClient(configurer);
    }
  }

