  public PluginHolder<T> createPlugin(PluginInfo info) {
    String pkg = info.attributes.get(CommonParams.PACKAGE);
    if (pkg != null) {
      log.debug(" {} : '{}'  created with package={} ", meta.getCleanTag(), info.name, pkg);
      PluginHolder<T> holder = new PackagePluginHolder<T>(info, core, meta);
      return meta.clazz == UpdateRequestProcessorFactory.class ?
          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :
          holder;

    } else if (info.isRuntimePlugin()) {
      log.debug(" {} : '{}'  created with runtimeLib=true ", meta.getCleanTag(), info.name);
      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?
          core.getMemClassLoader() :
          core.getResourceLoader(), true);

      return meta.clazz == UpdateRequestProcessorFactory.class ?
          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder((PluginHolder<UpdateRequestProcessorFactory>) holder) :
          holder;
    } else if ("lazy".equals(info.attributes.get("startup")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {
      log.debug("{} : '{}' created with startup=lazy ", meta.getCleanTag(), info.name);
      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);
    } else {
      T inst = SolrCore.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader());
      initInstance(inst, info);
      return new PluginHolder<>(info, inst);
    }
  }

