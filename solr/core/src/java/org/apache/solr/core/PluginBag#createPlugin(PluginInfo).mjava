  @SuppressWarnings({"unchecked"})
  public PluginHolder<T> createPlugin(PluginInfo info) {
    if ("true".equals(String.valueOf(info.attributes.get("runtimeLib")))) {
      if (log.isDebugEnabled()) {
        log.debug(" {} : '{}'  created with runtimeLib=true ", meta.getCleanTag(), info.name);
      }
      LazyPluginHolder<T> holder = new LazyPluginHolder<>(meta, info, core, RuntimeLib.isEnabled() ?
          core.getMemClassLoader() :
          core.getResourceLoader(), true);

      return meta.clazz == UpdateRequestProcessorFactory.class ?
          (PluginHolder<T>) new UpdateRequestProcessorChain.LazyUpdateProcessorFactoryHolder(holder) :
          holder;
    } else if ("lazy".equals(info.attributes.get("startup")) && meta.options.contains(SolrConfig.PluginOpts.LAZY)) {
      if (log.isDebugEnabled()) {
        log.debug("{} : '{}' created with startup=lazy ", meta.getCleanTag(), info.name);
      }
      return new LazyPluginHolder<T>(meta, info, core, core.getResourceLoader(), false);
    } else {
      if (info.pkgName != null) {
        PackagePluginHolder<T> holder = new PackagePluginHolder<>(info, core, meta);
        return holder;
      } else {
        T inst = SolrCore.createInstance(info.className, (Class<T>) meta.clazz, meta.getCleanTag(), null, core.getResourceLoader(info.pkgName));
        initInstance(inst, info);
        return new PluginHolder<>(info, inst);
      }
    }
  }

