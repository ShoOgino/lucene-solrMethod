  @Override
  public void cleanupOldIndexDirectories(final String dataDir, final String currentIndexDir, boolean afterReload) {

    // Get the FileSystem object
    final Path dataDirPath = new Path(dataDir);
    final Configuration conf = getConf();
    FileSystem fileSystem = null;
    try {
      fileSystem = tmpFsCache.get(dataDir, () -> FileSystem.get(dataDirPath.toUri(), conf));
    } catch (ExecutionException e) {
      throw new RuntimeException(e);
    }

    boolean pathExists = false;
    try {
      pathExists = fileSystem.exists(dataDirPath);
    } catch (IOException e) {
      LOG.error("Error checking if hdfs path "+dataDir+" exists", e);
    }
    if (!pathExists) {
      LOG.warn("{} does not point to a valid data directory; skipping clean-up of old index directories.", dataDir);
      return;
    }

    final Path currentIndexDirPath = new Path(currentIndexDir); // make sure we don't delete the current
    final FileSystem fs = fileSystem;
    FileStatus[] oldIndexDirs = null;
    try {
      oldIndexDirs = fileSystem.listStatus(dataDirPath, new PathFilter() {
        @Override
        public boolean accept(Path path) {
          boolean accept = false;
          String pathName = path.getName();
          try {
            accept = fs.isDirectory(path) && !path.equals(currentIndexDirPath) &&
                (pathName.equals("index") || pathName.matches(INDEX_W_TIMESTAMP_REGEX));
          } catch (IOException e) {
            LOG.error("Error checking if path {} is an old index directory, caused by: {}", path, e);
          }
          return accept;
        }
      });
    } catch (IOException ioExc) {
      LOG.error("Error checking for old index directories to clean-up.", ioExc);
    }
    
    List<Path> oldIndexPaths = new ArrayList<>(oldIndexDirs.length);
    for (FileStatus ofs : oldIndexDirs) {
      oldIndexPaths.add(ofs.getPath());
    }

    if (oldIndexDirs == null || oldIndexDirs.length == 0)
      return; // nothing to clean-up

    Collections.sort(oldIndexPaths, Collections.reverseOrder());
    
    Set<String> livePaths = getLivePaths();
    
    int i = 0;
    if (afterReload) {
      LOG.info("Will not remove most recent old directory on reload {}", oldIndexDirs[0]);
      i = 1;
    }
    LOG.info("Found {} old index directories to clean-up under {} afterReload={}", oldIndexDirs.length - i, dataDirPath, afterReload);
    for (; i < oldIndexPaths.size(); i++) {
      Path oldDirPath = oldIndexPaths.get(i);
      if (livePaths.contains(oldDirPath.toString())) {
        LOG.warn("Cannot delete directory {} because it is still being referenced in the cache.", oldDirPath);
      } else {
        try {
          if (fileSystem.delete(oldDirPath, true)) {
            LOG.info("Deleted old index directory {}", oldDirPath);
          } else {
            LOG.warn("Failed to delete old index directory {}", oldDirPath);
          }
        } catch (IOException e) {
          LOG.error("Failed to delete old index directory {} due to: {}", oldDirPath, e);
        }
      }
    }
  }

