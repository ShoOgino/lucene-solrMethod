  private static <T> T createInitInstance(PluginInfo pluginInfo, SolrConfig.SolrPluginInfo pluginMeta,
                                          SolrCore core, ResourceLoader resourceLoader,
                                          boolean isRuntimeLib) {
    T localInst = null;
    try {
      localInst = (T) core.createInstance(pluginInfo.className, pluginMeta.clazz, pluginMeta.getCleanTag(), core, resourceLoader);
    } catch (SolrException e) {
      if (isRuntimeLib && !(resourceLoader instanceof MemClassLoader)) {
        throw new SolrException(SolrException.ErrorCode.getErrorCode(e.code()),
            e.getMessage() + ". runtime library loading is not enabled, start Solr with -Denable.runtime.lib=true",
            e.getCause());
      }
      throw e;


    }
    initInstance(localInst, pluginInfo);
    if (localInst instanceof SolrCoreAware) {
      SolrResourceLoader.assertAwareCompatibility(SolrCoreAware.class, localInst);
      ((SolrCoreAware) localInst).inform(core);
    }
    if (localInst instanceof ResourceLoaderAware) {
      SolrResourceLoader.assertAwareCompatibility(ResourceLoaderAware.class, localInst);
      try {
        ((ResourceLoaderAware) localInst).inform(core.getResourceLoader());
      } catch (IOException e) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "error initializing component", e);
      }
    }
    return localInst;
  }

