  /**
   * given a core and attributes, find the core.properties file from whence it came and update it with the current
   * <p/>
   * Note, when the cores were discovered, we stored away the path that it came from for reference later. Remember
   * that these cores aren't necessarily loaded all the time, they may be transient.
   * It's not clear what the magic is that the calling methods (see CoreContainer) are doing, but they seem to be
   * "doing the right thing" so that the attribs properties are the ones that contain the correct data. All the
   * tests pass, but it's magic at this point.
   *
   * @param coreName - the core whose attributes we are to change
   * @param attribs  - the attribs to change to, see note above.
   * @param props    - ignored, here to make the i'face work in combination with ConfigSolrXmlBackCompat
   */

  @Override
  public void addPersistCore(String coreName, Properties attribs, Map<String, String> props) {
    String val = container.getContainerProperties().getProperty("solr.persistent", "false");
    if (!Boolean.parseBoolean(val)) return;

    CoreDescriptorPlus plus;
    plus = coreDescriptorPlusMap.get(coreName);
    if (plus == null) {
      log.error("Expected to find core for persisting, but we did not. Core: " + coreName);
      return;
    }

    Properties outProps = new Properties();
    // I don't quite get this, but somehow the attribs passed in are the originals (plus any newly-added ones). Never
    // one to look a gift horse in the mouth I'll just use that.

    // Take care NOT to write out properties like ${blah blah blah}
    outProps.putAll(attribs);
    Properties corePropsOrig = plus.getPropsOrig();
    for (String prop : corePropsOrig.stringPropertyNames()) {
      val = corePropsOrig.getProperty(prop);
      if (val.indexOf("$") != -1) { // it was originally a system property, keep it so
        outProps.put(prop, val);
        continue;
      }
      // Make sure anything that used to be in the properties file still is.
      if (outProps.getProperty(prop) == null) {
        outProps.put(prop, val);
      }
    }
    // Any of our standard properties that weren't in the original properties file should NOT be persisted, I think
    for (String prop : CoreDescriptor.standardPropNames) {
      if (corePropsOrig.getProperty(prop) == null) {
        outProps.remove(prop);
      }
    }

    OutputStream os = null;
    try {
      os = new FileOutputStream(plus.getFilePath());
      outProps.store(os, null);
    } catch (IOException e) {
      log.error("Failed to persist core {}, filepath {}", coreName, plus.getFilePath());
    } finally {
      IOUtils.closeQuietly(os);
    }

  }

