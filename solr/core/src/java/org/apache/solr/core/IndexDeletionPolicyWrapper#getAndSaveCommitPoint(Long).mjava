  /**
   * Atomically Saves (via reference counting) &amp; Returns the specified commit if available.
   * <p>
   * If the return value is non-null, then the caller <em>MUST</em> call {@link #releaseCommitPoint} 
   * when finished using it in order to decrement the reference count, or the commit will be preserved 
   * in the Directory forever.
   * </p>
   *
   * @return the commit point with the specified generation, or null if not available
   * @see #saveCommitPoint
   * @see #releaseCommitPoint
   */
  public synchronized IndexCommit getAndSaveCommitPoint(Long generation) {
    if (null == generation) {
      throw new NullPointerException("generation to get and save must not be null");
    }
    final IndexCommit commit = knownCommits.get(generation);
    if ( (null != commit && false != commit.isDeleted())
         || (null == commit && null != latestCommit && generation < latestCommit.getGeneration()) ) {
      throw new IllegalStateException
        ("Specified index generation is too old to be saved: " + generation);
    }
    final AtomicInteger refCount
      = savedCommits.computeIfAbsent(generation, s -> { return new AtomicInteger(); });
    final int currentCount = refCount.incrementAndGet();
    log.debug("Saving generation={}, refCount={}", generation, currentCount);
    return commit;
  }

