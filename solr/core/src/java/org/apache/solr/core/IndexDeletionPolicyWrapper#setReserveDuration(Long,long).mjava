  /**
   * Set the duration for which commit point is to be reserved by the deletion policy.
   * <p>
   * <b>NOTE:</b> This method does not make any garuntees that the specified index generation exists, 
   * or that the specified generation has not already ben deleted.  The only garuntee is that 
   * <em>if</em> the specified generation exists now, or is created at some point in the future, then 
   * it will be resered for <em>at least</em> the specified <code>reserveTime</code>.
   * </p>
   *
   * @param indexGen gen of the commit point to be reserved
   * @param reserveTime durration in milliseconds (relative to 'now') for which the commit point is to be reserved
   */
  public void setReserveDuration(Long indexGen, long reserveTime) {
    // since 'reserves' is a concurrent HashMap, we don't need to synchronize this method as long as all
    // operations on 'reserves' are done atomically.
    //
    // Here we'll use Map.merge to ensure that we atomically replace any existing timestamp if
    // and only if our new reservation timetsamp is larger.
    final long reserveAsNanoTime
      = System.nanoTime() + TimeUnit.NANOSECONDS.convert(reserveTime, TimeUnit.MILLISECONDS);
    reserves.merge(indexGen, reserveAsNanoTime, BinaryOperator.maxBy(Comparator.naturalOrder()));
  }

