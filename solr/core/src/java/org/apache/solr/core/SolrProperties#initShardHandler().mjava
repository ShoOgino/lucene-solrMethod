  @Override
  public ShardHandlerFactory initShardHandler(/*boolean isTest*/) {

    PluginInfo info = null;
    Map<String, String> attrs = new HashMap<String, String>();
    NamedList args = new NamedList();
    boolean haveHandler = false;
    for (String s : solrProperties.stringPropertyNames()) {
      String val = solrProperties.getProperty(s);
      int index = s.indexOf(SHARD_HANDLER_FACTORY);
      if (index != -1) {
        haveHandler = true;
        if (SHARD_HANDLER_NAME.equals(s) || SHARD_HANDLER_CLASS.equals(s)) {
          // remove shardHandlerFactory. prefix
          attrs.put(s.substring(SHARD_HANDLER_FACTORY.length()+1), val);
        } else {
          // remove shardHandlerFactory. prefix
          args.add(s.substring(SHARD_HANDLER_FACTORY.length()+1), val);
        }
      }
    }

    if (haveHandler) {
      info = new PluginInfo(SHARD_HANDLER_FACTORY, attrs, args, null);
    } else {
      Map m = new HashMap();
      m.put("class", HttpShardHandlerFactory.class.getName());
      info = new PluginInfo("shardHandlerFactory", m, null, Collections.<PluginInfo>emptyList());
    }

    assert loader != null;
    ShardHandlerFactory fac;
    try {
      fac = loader.findClass(info.className, ShardHandlerFactory.class).newInstance();
    } catch (Exception e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);
    }
    if (fac instanceof PluginInfoInitialized) {
      ((PluginInfoInitialized) fac).init(info);
    }

    return fac;
  }

