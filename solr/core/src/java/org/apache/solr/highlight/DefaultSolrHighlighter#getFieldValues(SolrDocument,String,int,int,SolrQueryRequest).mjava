  /**
   * Fetches field values to highlight. If the field value should come from an atypical place (or another aliased
   * field name, then a subclass could override to implement that.
   */
  protected List<String> getFieldValues(SolrDocument doc, String fieldName, int maxValues, int maxCharsToAnalyze,
                                        SolrQueryRequest req) {
    // Collect the Fields we will examine (could be more than one if multi-valued)
    Collection<Object> fieldValues = doc.getFieldValues(fieldName);
    if (fieldValues == null) {
      return Collections.emptyList();
    }
    FieldType fieldType = req.getSchema().getFieldType(fieldName);
    List<String> result = new ArrayList<>();
    for (Object value : fieldValues) {
      String strValue;
      if (value instanceof IndexableField) {
        strValue = fieldType.toExternal((IndexableField) value);
      } else {
        strValue = value.toString(); // TODO FieldType needs an API for this, e.g. toExternalFromDv()
      }
      result.add(strValue);

      maxCharsToAnalyze -= strValue.length();//we exit early if we'll never get to analyze the value
      maxValues--;
      if (maxValues <= 0 || maxCharsToAnalyze <= 0) {
        break;
      }
    }
    return result;
  }

