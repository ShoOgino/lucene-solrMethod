  /**
   * Returns an SslContextFactory that should be used by a jetty server based on the specified 
   * configuration, or null if no SSL should be used.
   *
   * The specified sslConfig will be completely ignored if the "tests.jettySsl" system property is 
   * true - in which case standard "javax.net.ssl.*" system properties will be used instead, along 
   * with "tests.jettySsl.clientAuth"
   * 
   * @see #isSSLMode
   */
  public static SslContextFactory createContextFactory(SSLConfig sslConfig) {

    if (sslConfig == null) {
      if (Boolean.getBoolean("tests.jettySsl")) {
        return configureSslFromSysProps();
      }
      return null;
    }

    if (!sslConfig.isSSLMode()) 
       return null;

    SslContextFactory factory = new SslContextFactory(false);
    if (sslConfig.getKeyStore() != null)
      factory.setKeyStorePath(sslConfig.getKeyStore());
    if (sslConfig.getKeyStorePassword() != null)
      factory.setKeyStorePassword(sslConfig.getKeyStorePassword());
    factory.setNeedClientAuth(sslConfig.isClientAuthMode());
    
    if (sslConfig.isClientAuthMode()) {
      if (sslConfig.getTrustStore() != null)
        factory.setTrustStorePath(sslConfig.getTrustStore());
      if (sslConfig.getTrustStorePassword() != null)
        factory.setTrustStorePassword(sslConfig.getTrustStorePassword());
    }
    return factory;

  }

