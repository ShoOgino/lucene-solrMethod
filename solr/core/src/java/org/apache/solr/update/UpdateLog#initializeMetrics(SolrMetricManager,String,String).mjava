  @Override
  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {
    bufferedOpsGauge = () -> {
      if (tlog == null) {
        return 0;
      } else if (state == State.APPLYING_BUFFERED) {
        // numRecords counts header as a record
        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;
      } else if (state == State.BUFFERING) {
        // numRecords counts header as a record
        return tlog.numRecords() - 1;
      } else {
        return 0;
      }
    };

    manager.registerGauge(null, registry, bufferedOpsGauge, true, "ops", scope, "buffered");
    manager.registerGauge(null, registry, () -> logs.size(), true, "logs", scope, "replay", "remaining");
    manager.registerGauge(null, registry, () -> getTotalLogsSize(), true, "bytes", scope, "replay", "remaining");
    applyingBufferedOpsMeter = manager.meter(null, registry, "ops", scope, "applyingBuffered");
    replayOpsMeter = manager.meter(null, registry, "ops", scope, "replay");
    manager.registerGauge(null, registry, () -> state.getValue(), true, "state", scope);
  }

