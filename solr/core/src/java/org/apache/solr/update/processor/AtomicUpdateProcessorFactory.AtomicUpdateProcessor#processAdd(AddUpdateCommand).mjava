    /*
     * 1. convert incoming update document to atomic-type update document 
     * for specified fields in processor definition.
     * 2. if incoming update document contains already atomic-type updates, skip
     * 3. fields not specified in processor param(s) in solrconfig.xml for atomic action
     * will be treated as conventional updates.
     * 4. retry when encounter version conflict
     */
    @SuppressWarnings("unchecked")
    @Override
    public void processAdd(AddUpdateCommand cmd)
        throws IOException {

      SolrInputDocument orgdoc = cmd.getSolrInputDocument();
      boolean isAtomicUpdateAddedByMe = false;

      Iterator<String> paramsIterator = req.getParams().getParameterNamesIterator();

      while (paramsIterator.hasNext()) {

        String param = paramsIterator.next();

        if (!param.startsWith(ATOMIC_FIELD_PREFIX)) continue;

        String field = param.substring(ATOMIC_FIELD_PREFIX.length(), param.length());
        String operation = req.getParams().get(param);

        if (!VALID_OPS.contains(operation)) {
          throw new SolrException(SERVER_ERROR,
              "Unexpected param(s) for AtomicUpdateProcessor, invalid atomic op passed: '" +
                  req.getParams().get(param) + "'");
        }
        if (orgdoc.get(field) == null || orgdoc.get(field).getValue() instanceof Map) {
          // no value for the field or it's already an atomic update operation
          //continue processing other fields
          continue;
        }

        orgdoc.setField(field, singletonMap(operation, orgdoc.get(field).getValue()));
        isAtomicUpdateAddedByMe = true;
      }

      // if atomic, put _version_ for optimistic concurrency if doc present in index
      if (isAtomicUpdateAddedByMe) {
        Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());
        // if lastVersion is null then we put -1 to assert that document must not exist
        lastVersion = lastVersion == null ? -1 : lastVersion;
        orgdoc.setField(VERSION, lastVersion);
        processAddWithRetry(cmd, 1, cmd.getSolrInputDocument().deepCopy());
      } else {
        super.processAdd(cmd);
      }
      // else send it for doc to get inserted for the first time
    }

