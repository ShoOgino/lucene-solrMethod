  private DocFoundAndOldUserAndSolrVersions getOldUserVersionsFromFieldCache(BytesRef indexedDocId) {
    SolrInputDocument oldDoc = RealTimeGetComponent.getInputDocumentFromTlog(core, indexedDocId, null, null, true);
    if (oldDoc == RealTimeGetComponent.DELETED) {
      return DocFoundAndOldUserAndSolrVersions.NOT_FOUND;
    }
    if (oldDoc == null) {
      // need to look up in index now...
      RefCounted<SolrIndexSearcher> newestSearcher = core.getRealtimeSearcher();
      try {
        SolrIndexSearcher searcher = newestSearcher.get();
        long lookup = searcher.lookupId(indexedDocId);
        if (lookup < 0) {
          // doc not in index either...
          return DocFoundAndOldUserAndSolrVersions.NOT_FOUND;
        }
        final LeafReaderContext segmentContext = searcher.getTopReaderContext().leaves().get((int)(lookup>>32));
        final int docIdInSegment = (int)lookup;

        long oldSolrVersion = getFunctionValues(segmentContext, solrVersionField, searcher).longVal(docIdInSegment);
        Object[] oldUserVersions = getObjectValues(segmentContext, userVersionFields, searcher, docIdInSegment);
        return new DocFoundAndOldUserAndSolrVersions(oldUserVersions, oldSolrVersion);
      } catch (IOException e) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error reading version from index", e);
      } finally {
        if (newestSearcher != null) { //TODO can this ever be null?
          newestSearcher.decref();
        }
      }
    } else {
      return getUserVersionAndSolrVersionFromDocument(oldDoc);
    }
  }

