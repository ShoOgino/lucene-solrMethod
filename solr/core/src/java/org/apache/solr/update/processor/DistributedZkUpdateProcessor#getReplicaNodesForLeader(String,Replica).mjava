  protected List<SolrCmdDistributor.Node> getReplicaNodesForLeader(String shardId, Replica leaderReplica) {
    String leaderCoreNodeName = leaderReplica.getName();
    List<Replica> replicas = clusterState.getCollection(collection)
        .getSlice(shardId)
        .getReplicas(EnumSet.of(Replica.Type.NRT, Replica.Type.TLOG));
    replicas.removeIf((replica) -> replica.getName().equals(leaderCoreNodeName));
    if (replicas.isEmpty()) {
      return null;
    }

    // check for test param that lets us miss replicas
    String[] skipList = req.getParams().getParams(TEST_DISTRIB_SKIP_SERVERS);
    Set<String> skipListSet = null;
    if (skipList != null) {
      skipListSet = new HashSet<>(skipList.length);
      skipListSet.addAll(Arrays.asList(skipList));
      log.info("test.distrib.skip.servers was found and contains:{}", skipListSet);
    }

    List<SolrCmdDistributor.Node> nodes = new ArrayList<>(replicas.size());
    skippedCoreNodeNames = new HashSet<>();
    ZkShardTerms zkShardTerms = zkController.getShardTerms(collection, shardId);
    for (Replica replica : replicas) {
      String coreNodeName = replica.getName();
      if (skipList != null && skipListSet.contains(replica.getCoreUrl())) {
        if (log.isInfoEnabled()) {
          log.info("check url:{} against:{} result:true", replica.getCoreUrl(), skipListSet);
        }
      } else if (zkShardTerms.registered(coreNodeName) && zkShardTerms.skipSendingUpdatesTo(coreNodeName)) {
        if (log.isDebugEnabled()) {
          log.debug("skip url:{} cause its term is less than leader", replica.getCoreUrl());
        }
        skippedCoreNodeNames.add(replica.getName());
      } else if (!clusterState.getLiveNodes().contains(replica.getNodeName())
          || replica.getState() == Replica.State.DOWN) {
        skippedCoreNodeNames.add(replica.getName());
      } else {
        nodes.add(new SolrCmdDistributor.StdNode(new ZkCoreNodeProps(replica), collection, shardId));
      }
    }
    return nodes;
  }

