    public void processDelete(DeleteUpdateCommand cmd) throws IOException {
      if (null == deleteVersionParamName) {
        // not suppose to look at deletes at all
        super.processDelete(cmd);
        return;
      }

      if ( ! cmd.isDeleteById() ) {
        // nothing to do
        super.processDelete(cmd);
        return;
      }

      String deleteParamValue = cmd.getReq().getParams().get(deleteVersionParamName);
      if (null == deleteParamValue) {
        throw new SolrException(BAD_REQUEST,
            "Delete by ID must specify doc version param: " +
                deleteVersionParamName);
      }


      if (!isLeader(cmd)) {
        // transform delete to add earlier rather than later

        SolrInputDocument newDoc = new SolrInputDocument();
        newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),
            cmd.getId());
        newDoc.setField(versionFieldName, deleteParamValue);

        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());
        newCmd.solrDoc = newDoc;
        newCmd.commitWithin = cmd.commitWithin;
        super.processAdd(newCmd);
        return;
      }


      for (int i=0; ;i++) {
        // Log a warning every 256 retries.... even a few retries should normally be very unusual.
        if ((i&0xff) == 0xff) {
          log.warn("Unusual number of optimistic concurrency retries: retries=" + i + " cmd=" + cmd);
        }

        if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValue)) {
          // drop this older update
          return;
        }

        // :TODO: should this logic be split and driven by two params?
        //   - deleteVersionParam to do a version check
        //   - some new boolean param to determine if a stub document gets added in place?
        try {
          // drop the delete, and instead propogate an AddDoc that
          // replaces the doc with a new "empty" one that records the deleted version

          SolrInputDocument newDoc = new SolrInputDocument();
          newDoc.setField(core.getLatestSchema().getUniqueKeyField().getName(),
              cmd.getId());
          newDoc.setField(versionFieldName, deleteParamValue);

          AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());
          newCmd.solrDoc = newDoc;
          newCmd.commitWithin = cmd.commitWithin;

          newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime
          super.processAdd(newCmd);
          return;
        } catch (SolrException e) {
          if (e.code() == 409) {
            continue;  // if a version conflict, retry
          }
          throw e;  // rethrow
        }

      }
    }

