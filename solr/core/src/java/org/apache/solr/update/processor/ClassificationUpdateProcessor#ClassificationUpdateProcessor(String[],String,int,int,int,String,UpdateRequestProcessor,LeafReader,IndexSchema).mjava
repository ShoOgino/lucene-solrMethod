  /**
   * Sole constructor
   *
   * @param inputFieldNames fields to be used as classifier's inputs
   * @param classFieldName  field to be used as classifier's output
   * @param minDf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minDocFreq}, in case algorithm is {@code "knn"}
   * @param minTf           setting for {@link org.apache.lucene.queries.mlt.MoreLikeThis#minTermFreq}, in case algorithm is {@code "knn"}
   * @param k               setting for k nearest neighbors to analyze, in case algorithm is {@code "knn"}
   * @param algorithm       the name of the classifier to use
   * @param next            next update processor in the chain
   * @param indexReader     index reader
   * @param schema          schema
   */
  public ClassificationUpdateProcessor(String[] inputFieldNames, String classFieldName, int minDf, int minTf, int k, String algorithm,
                                       UpdateRequestProcessor next, LeafReader indexReader, IndexSchema schema) {
    super(next);
    this.classFieldName = classFieldName;
    Map<String, Analyzer> field2analyzer = new HashMap<String, Analyzer>();
    for (String fieldName : inputFieldNames) {
      SchemaField fieldFromSolrSchema = schema.getField(fieldName);
      Analyzer indexAnalyzer = fieldFromSolrSchema.getType().getQueryAnalyzer();
      field2analyzer.put(fieldName, indexAnalyzer);
    }
    switch (algorithm) {
      case "knn":
        classifier = new KNearestNeighborDocumentClassifier(indexReader, null, null, k, minDf, minTf, classFieldName, field2analyzer, inputFieldNames);
        break;
      case "bayes":
        classifier = new SimpleNaiveBayesDocumentClassifier(indexReader, null, classFieldName, field2analyzer, inputFieldNames);
        break;
    }
  }

