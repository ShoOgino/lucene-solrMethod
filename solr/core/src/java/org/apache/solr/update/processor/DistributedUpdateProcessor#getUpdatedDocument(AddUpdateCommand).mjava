  // TODO: may want to switch to using optimistic locking in the future for better concurrency
  // that's why this code is here... need to retry in a loop closely around/in versionAdd
  boolean getUpdatedDocument(AddUpdateCommand cmd) throws IOException {
    SolrInputDocument sdoc = cmd.getSolrInputDocument();
    boolean update = false;
    for (SolrInputField sif : sdoc.values()) {
      if (sif.getValue() instanceof Map) {
        update = true;
        break;
      }
    }

    if (!update) return false;

    BytesRef id = cmd.getIndexedId();
    SolrInputDocument oldDoc = RealTimeGetComponent.getInputDocument(cmd.getReq().getCore(), id);

    if (oldDoc == null) {
      // not found... allow this in the future (depending on the details of the update, or if the user explicitly sets it).
      // could also just not change anything here and let the optimistic locking throw the error
      throw new SolrException(ErrorCode.CONFLICT, "Document not found for update.  id=" + cmd.getPrintableId());
    }

    oldDoc.remove(VERSION_FIELD);

    for (SolrInputField sif : sdoc.values()) {
      Object val = sif.getValue();
      if (val instanceof Map) {
        for (Entry<String,Object> entry : ((Map<String,Object>) val).entrySet()) {
          String key = entry.getKey();
          Object fieldVal = entry.getValue();
          if ("add".equals(key)) {
            oldDoc.addField( sif.getName(), fieldVal, sif.getBoost());
          } else if ("set".equals(key)) {
            oldDoc.setField(sif.getName(),  fieldVal, sif.getBoost());
          }
        }
      } else {
        // normal fields are treated as a "set"
        oldDoc.put(sif.getName(), sif);
      }
    }

    cmd.solrDoc = oldDoc;
    return true;
  }

