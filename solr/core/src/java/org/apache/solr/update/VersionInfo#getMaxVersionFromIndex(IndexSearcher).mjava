  /**
   * Returns the highest version from the index, or 0L if no versions can be found in the index.
   */
  public Long getMaxVersionFromIndex(IndexSearcher searcher) throws IOException {

    final String versionFieldName = versionField.getName();

    log.debug("Refreshing highest value of {} for {} version buckets from index", versionFieldName, buckets.length);
    // if indexed, then we have terms to get the max from
    if (versionField.indexed()) {
      if (versionField.getType().isPointField()) {
        return getMaxVersionFromIndexedPoints(searcher);
      } else {
        return getMaxVersionFromIndexedTerms(searcher);
      }
    }
    // else: not indexed, use docvalues via value source ...
    
    long maxVersionInIndex = 0L;
    ValueSource vs = versionField.getType().getValueSource(versionField, null);
    @SuppressWarnings({"rawtypes"})
    Map funcContext = ValueSource.newContext(searcher);
    vs.createWeight(funcContext, searcher);
    // TODO: multi-thread this
    for (LeafReaderContext ctx : searcher.getTopReaderContext().leaves()) {
      int maxDoc = ctx.reader().maxDoc();
      FunctionValues fv = vs.getValues(funcContext, ctx);
      for (int doc = 0; doc < maxDoc; doc++) {
        long v = fv.longVal(doc);
        maxVersionInIndex = Math.max(v, maxVersionInIndex);
      }
    }
    return maxVersionInIndex;
  }

