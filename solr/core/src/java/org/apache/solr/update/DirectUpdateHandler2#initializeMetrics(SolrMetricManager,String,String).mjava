  @Override
  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {
    commitCommands = manager.meter(registry, "commits", getCategory().toString(), scope);
    Gauge<Integer> autoCommits = () -> commitTracker.getCommitCount();
    manager.register(registry, autoCommits, true, "autoCommits", getCategory().toString(), scope);
    Gauge<Integer> softAutoCommits = () -> softCommitTracker.getCommitCount();
    manager.register(registry, softAutoCommits, true, "softAutoCommits", getCategory().toString(), scope);
    optimizeCommands = manager.meter(registry, "optimizes", getCategory().toString(), scope);
    rollbackCommands = manager.meter(registry, "rollbacks", getCategory().toString(), scope);
    splitCommands = manager.meter(registry, "splits", getCategory().toString(), scope);
    mergeIndexesCommands = manager.meter(registry, "merges", getCategory().toString(), scope);
    expungeDeleteCommands = manager.meter(registry, "expungeDeletes", getCategory().toString(), scope);
    Gauge<Long> docsPending = () -> numDocsPending.longValue();
    manager.register(registry, docsPending, true, "docsPending", getCategory().toString(), scope);
    Gauge<Long> adds = () -> addCommands.longValue();
    manager.register(registry, adds, true, "adds", getCategory().toString(), scope);
    Gauge<Long> deletesById = () -> deleteByIdCommands.longValue();
    manager.register(registry, deletesById, true, "deletesById", getCategory().toString(), scope);
    Gauge<Long> deletesByQuery = () -> deleteByQueryCommands.longValue();
    manager.register(registry, deletesByQuery, true, "deletesByQuery", getCategory().toString(), scope);
    Gauge<Long> errors = () -> numErrors.longValue();
    manager.register(registry, errors, true, "errors", getCategory().toString(), scope);

    addCommandsCumulative = manager.meter(registry, "cumulativeAdds", getCategory().toString(), scope);
    deleteByIdCommandsCumulative = manager.meter(registry, "cumulativeDeletesById", getCategory().toString(), scope);
    deleteByQueryCommandsCumulative = manager.meter(registry, "cumulativeDeletesByQuery", getCategory().toString(), scope);
    numErrorsCumulative = manager.meter(registry, "cumulativeErrors", getCategory().toString(), scope);
  }

