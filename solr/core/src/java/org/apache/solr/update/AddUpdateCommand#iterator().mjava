  @Override
  public Iterator<Document> iterator() {
    return new Iterator<Document>() {
      Iterator<SolrInputDocument> iter;

      {
        List<SolrInputDocument> all = flatten(solrDoc);

        String idField = getHashableId();

        boolean isVersion = version != 0;

        for (SolrInputDocument sdoc : all) {
          sdoc.setField("_root_", idField);      // should this be a string or the same type as the ID?
          if(isVersion) sdoc.setField(CommonParams.VERSION_FIELD, version);
          // TODO: if possible concurrent modification exception (if SolrInputDocument not cloned and is being forwarded to replicas)
          // then we could add this field to the generated lucene document instead.
        }

        iter = all.iterator();
     }

      @Override
      public boolean hasNext() {
        return iter.hasNext();
      }

      @Override
      public Document next() {
        return DocumentBuilder.toDocument(iter.next(), req.getSchema());
      }

      @Override
      public void remove() {
        throw new UnsupportedOperationException();
      }
    };
  }

