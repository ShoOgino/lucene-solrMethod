  private boolean handleUpdates(NamedList<Object> rsp, long numRequestedUpdates, IndexFingerprint leaderFingerprint) {
    // missed updates from leader, it does not contains updates from bufferedUpdates
    List<Object> updates = (List<Object>)rsp.get("updates");

    if (updates.size() < numRequestedUpdates) {
      log.error("{} Requested {} updated from {} but retrieved {}", msg(), numRequestedUpdates, leaderUrl, updates.size());
      return false;
    }

    // by apply buffering update, replica will have fingerprint equals to leader.
    try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {
      for (Long bufferUpdate : bufferedUpdates) {
        // updater will sort updates before apply
        updates.add(recentUpdates.lookup(bufferUpdate));
      }
    }

    // Leader will compute its fingerprint, then retrieve its recent updates versions.
    // There are a case that some updates (gap) get into recent versions but do not exist in index (fingerprint).
    // If the gap do not contains DBQ or DBI, it is safe to use leaderFingerprint.maxVersionEncountered as a cut point.
    // TODO leader should do fingerprint and retrieve recent updates version in atomic
    if (leaderFingerprint != null) {
      boolean existDBIOrDBQInTheGap = updates.stream().anyMatch(e -> {
        List<Object> u = (List<Object>) e;
        long version = (Long) u.get(1);
        int oper = (Integer)u.get(0) & UpdateLog.OPERATION_MASK;
        // only DBI or DBQ in the gap (above) will satisfy this predicate
        return version > leaderFingerprint.getMaxVersionEncountered() && (oper == UpdateLog.DELETE || oper == UpdateLog.DELETE_BY_QUERY);
      });
      if (!existDBIOrDBQInTheGap) {
        // it is safe to use leaderFingerprint.maxVersionEncountered as cut point now.
        updates.removeIf(e -> {
          List<Object> u = (List<Object>) e;
          long version = (Long) u.get(1);
          return version > leaderFingerprint.getMaxVersionEncountered();
        });
      }
    }

    try {
      updater.applyUpdates(updates, leaderUrl);
    } catch (Exception e) {
      return false;
    }
    return true;
  }

