    void applyUpdates(List<Object> updates, Object updateFrom) throws Exception {
      ModifiableSolrParams params = new ModifiableSolrParams();
      params.set(DISTRIB_UPDATE_PARAM, FROMLEADER.toString());
      params.set("peersync",true); // debugging
      SolrQueryRequest req = new LocalSolrQueryRequest(solrCore, params);
      SolrQueryResponse rsp = new SolrQueryResponse();

      UpdateRequestProcessorChain processorChain = req.getCore().getUpdateProcessingChain(null);
      UpdateRequestProcessor proc = processorChain.createProcessor(req, rsp);

      updates.sort(updateRecordComparator);

      Object o = null;
      long lastVersion = 0;
      try {
        // Apply oldest updates first
        for (Object obj : updates) {
          // should currently be a List<Oper,Ver,Doc/Id>
          o = obj;
          List<Object> entry = (List<Object>)o;

          if (debug) {
            log.debug(logPrefix + "raw update record " + o);
          }

          int oper = (Integer)entry.get(0) & UpdateLog.OPERATION_MASK;
          long version = (Long) entry.get(1);
          if (version == lastVersion && version != 0) continue;
          lastVersion = version;

          switch (oper) {
            case UpdateLog.ADD:
            {
              // byte[] idBytes = (byte[]) entry.get(2);
              SolrInputDocument sdoc = (SolrInputDocument)entry.get(entry.size()-1);
              AddUpdateCommand cmd = new AddUpdateCommand(req);
              // cmd.setIndexedId(new BytesRef(idBytes));
              cmd.solrDoc = sdoc;
              cmd.setVersion(version);
              cmd.setFlags(UpdateCommand.PEER_SYNC | UpdateCommand.IGNORE_AUTOCOMMIT);
              if (debug) {
                log.debug(logPrefix + "add " + cmd + " id " + sdoc.getField(ID));
              }
              proc.processAdd(cmd);
              break;
            }
            case UpdateLog.DELETE:
            {
              byte[] idBytes = (byte[]) entry.get(2);
              DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);
              cmd.setIndexedId(new BytesRef(idBytes));
              cmd.setVersion(version);
              cmd.setFlags(UpdateCommand.PEER_SYNC | UpdateCommand.IGNORE_AUTOCOMMIT);
              if (debug) {
                log.debug(logPrefix + "delete " + cmd + " " + new BytesRef(idBytes).utf8ToString());
              }
              proc.processDelete(cmd);
              break;
            }

            case UpdateLog.DELETE_BY_QUERY:
            {
              String query = (String)entry.get(2);
              DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);
              cmd.query = query;
              cmd.setVersion(version);
              cmd.setFlags(UpdateCommand.PEER_SYNC | UpdateCommand.IGNORE_AUTOCOMMIT);
              if (debug) {
                log.debug(logPrefix + "deleteByQuery " + cmd);
              }
              proc.processDelete(cmd);
              break;
            }
            case UpdateLog.UPDATE_INPLACE:
            {
              AddUpdateCommand cmd = UpdateLog.convertTlogEntryToAddUpdateCommand(req, entry, oper, version);
              cmd.setFlags(UpdateCommand.PEER_SYNC | UpdateCommand.IGNORE_AUTOCOMMIT);
              if (debug) {
                log.debug(logPrefix + "inplace update " + cmd + " prevVersion=" + cmd.prevVersion + ", doc=" + cmd.solrDoc);
              }
              proc.processAdd(cmd);
              break;
            }

            default:
              throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  "Unknown Operation! " + oper);
          }

        }

      } catch (IOException e) {
        // TODO: should this be handled separately as a problem with us?
        // I guess it probably already will by causing replication to be kicked off.
        log.error(logPrefix + "Error applying updates from " + updateFrom + " ,update=" + o, e);
        throw e;
      } catch (Exception e) {
        log.error(logPrefix + "Error applying updates from " + updateFrom + " ,update=" + o, e);
        throw e;
      } finally {
        try {
          proc.finish();
        } catch (Exception e) {
          log.error(logPrefix + "Error applying updates from " + updateFrom + " ,finish()", e);
          throw e;
        } finally {
          IOUtils.closeQuietly(proc);
        }
      }
    }

