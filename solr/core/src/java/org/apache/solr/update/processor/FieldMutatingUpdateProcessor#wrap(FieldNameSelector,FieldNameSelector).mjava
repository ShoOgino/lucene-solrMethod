  /** 
   * Wraps two FieldNameSelectors such that the FieldNameSelector 
   * returned matches all fields specified by the "includes" unless they 
   * are matched by "excludes"
   * @param includes a selector identifying field names that should be selected
   * @param excludes a selector identifying field names that should be 
   *        <i>not</i> be selected, even if they are matched by the 'includes' 
   *        selector
   * @return Either a new FieldNameSelector or one of the input selecors 
   *         if the combination lends itself to optimization.
   */
  public static FieldNameSelector wrap(final FieldNameSelector includes, 
                                       final FieldNameSelector excludes) { 

    if (SELECT_NO_FIELDS == excludes) {
      return includes;
    }

    if (SELECT_ALL_FIELDS == excludes) {
      return SELECT_NO_FIELDS;
    }
    
    if (SELECT_ALL_FIELDS == includes) {
      return new FieldNameSelector() {
        @Override
        public boolean shouldMutate(final String fieldName) {
          return ! excludes.shouldMutate(fieldName);
        }
      };
    }

    return new FieldNameSelector() {
      @Override
      public boolean shouldMutate(final String fieldName) {
        return (includes.shouldMutate(fieldName)
                && ! excludes.shouldMutate(fieldName));
      }
    };
  }

