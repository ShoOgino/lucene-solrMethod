  /**
   * Uses the factories in this chain to creates a new 
   * <code>UpdateRequestProcessor</code> instance specific for this request.  
   * If the <code>DISTRIB_UPDATE_PARAM</code> is present in the request and is 
   * non-blank, then any factory in this chain prior to the instance of 
   * <code>{@link DistributingUpdateProcessorFactory}</code> will be skipped, 
   * and the <code>UpdateRequestProcessor</code> returned will be from that 
   * <code>DistributingUpdateProcessorFactory</code>
   *
   * @see UpdateRequestProcessorFactory#getInstance
   * @see DistributingUpdateProcessorFactory#DISTRIB_UPDATE_PARAM
   */
  public UpdateRequestProcessor createProcessor(SolrQueryRequest req, 
                                                SolrQueryResponse rsp) 
  {
    UpdateRequestProcessor processor = null;
    UpdateRequestProcessor last = null;
    
    final String distribPhase = req.getParams().get
      (DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM, "");
    final boolean skipToDistrib = ! distribPhase.trim().isEmpty();

    for (int i = chain.length-1; i>=0; i--) {
      processor = chain[i].getInstance(req, rsp, last);
      last = processor == null ? last : processor;
      if (skipToDistrib 
          && chain[i] instanceof DistributingUpdateProcessorFactory) {
        break;
      }
    }
    return last;
  }

