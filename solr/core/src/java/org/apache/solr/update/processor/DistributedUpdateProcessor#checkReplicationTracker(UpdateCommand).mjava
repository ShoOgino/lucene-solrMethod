  // helper method, processAdd was getting a bit large.
  // Sets replicationTracker = null if we aren't the leader or don't care abeout minRf
  // We have three possibilities here:
  //
  // 1> there is no min_rf specified: Just return
  // 2> we are a leader: Allocate a LeaderTracker and, if we're getting the original request, a RollupTracker
  // 3> we're a follower: allocat a RollupTracker
  //
  private void checkReplicationTracker(UpdateCommand cmd) {
    String repFact = req.getParams().get(UpdateRequest.MIN_REPFACT);

    if (zkEnabled == false || repFact == null) {
      rollupReplicationTracker = null; // never need one of these in stand-alone
      leaderReplicationTracker = null;
      return;
    }

    int requestedReplicationFactor;

    try {
      requestedReplicationFactor = Integer.parseInt(repFact);
    } catch (NumberFormatException nfe) {
      throw new SolrException(ErrorCode.SERVER_ERROR, "MinRF must be an integer, was " + repFact);
    }

    SolrParams rp = cmd.getReq().getParams();
    String distribUpdate = rp.get(DISTRIB_UPDATE_PARAM);
    // Ok,we're receiving the original request, we need a rollup tracker, but only one so we accumulate over the
    // course of a batch.
    if ((distribUpdate == null || DistribPhase.NONE.toString().equals(distribUpdate)) &&
        rollupReplicationTracker == null) {
      rollupReplicationTracker = new RollupRequestReplicationTracker(repFact);
    }
    // If we're a leader, we need a leader replication tracker, so let's do that. If there are multiple docs in
    // a batch we need to use the _same_ leader replication tracker.
    if (isLeader && leaderReplicationTracker == null) {
      leaderReplicationTracker = new LeaderRequestReplicationTracker(
          req.getCore().getCoreDescriptor().getCloudDescriptor().getShardId(), requestedReplicationFactor);
    }
  }

