  public Future<RecoveryInfo> recoverFromLog() {
    recoveryInfo = new RecoveryInfo();
    if (newestLogOnStartup == null) return null;

    if (!newestLogOnStartup.try_incref()) return null;   // log file was already closed

    // now that we've incremented the reference, the log shouldn't go away.
    try {
      if (newestLogOnStartup.endsWithCommit()) {
        newestLogOnStartup.decref();
        return null;
      }
    } catch (IOException e) {
      log.error("Error inspecting tlog " + newestLogOnStartup);
      newestLogOnStartup.decref();
      return null;
    }

    ExecutorCompletionService<RecoveryInfo> cs = new ExecutorCompletionService<RecoveryInfo>(recoveryExecutor);
    LogReplayer replayer = new LogReplayer(newestLogOnStartup, false);

    versionInfo.blockUpdates();
    try {
      state = State.REPLAYING;
    } finally {
      versionInfo.unblockUpdates();
    }

    return cs.submit(replayer, recoveryInfo);

  }

