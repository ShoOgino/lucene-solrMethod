  @Override
  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {
    solrMetricsContext = parentContext.getChildContext(this);
    bufferedOpsGauge = () -> {
      if (state == State.BUFFERING) {
        if (bufferTlog == null) return  0;
        // numRecords counts header as a record
        return bufferTlog.numRecords() - 1;
      }
      if (tlog == null) {
        return 0;
      } else if (state == State.APPLYING_BUFFERED) {
        // numRecords counts header as a record
        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;
      } else {
        return 0;
      }
    };

    solrMetricsContext.gauge(bufferedOpsGauge, true, "ops", scope, "buffered");
    solrMetricsContext.gauge(() -> logs.size(), true, "logs", scope, "replay", "remaining");
    solrMetricsContext.gauge(() -> getTotalLogsSize(), true, "bytes", scope, "replay", "remaining");
    applyingBufferedOpsMeter = solrMetricsContext.meter("ops", scope, "applyingBuffered");
    replayOpsMeter = solrMetricsContext.meter("ops", scope, "replay");
    copyOverOldUpdatesMeter = solrMetricsContext.meter("ops", scope, "copyOverOldUpdates");
    solrMetricsContext.gauge(() -> state.getValue(), true, "state", scope);
  }

