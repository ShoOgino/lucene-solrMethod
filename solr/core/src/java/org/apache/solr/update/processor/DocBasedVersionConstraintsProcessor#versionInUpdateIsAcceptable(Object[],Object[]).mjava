  /**
   * Returns whether or not the versions in the command are acceptable to be indexed.
   * If the instance is set to ignoreOldUpdates==false, it will throw a SolrException
   * with CONFLICT in the event the version is not acceptable rather than return false.
   *
   * @param newUserVersions New versions in update request
   * @param oldUserVersions Old versions currently in solr index
   * @return True if acceptable, false if not (or will throw exception)
   */
  protected boolean versionInUpdateIsAcceptable(Object[] newUserVersions,
                                                Object[] oldUserVersions) {

    for (int i = 0; i < oldUserVersions.length; i++) {
      Object oldUserVersion = oldUserVersions[i];
      Object newUserVersion = newUserVersions[i];

      if (!(oldUserVersion instanceof Comparable && newUserVersion instanceof Comparable)) {
        throw new SolrException(BAD_REQUEST,
            "old version and new version are not comparable: " +
                oldUserVersion.getClass() + " vs " + newUserVersion.getClass());
      }
      try {
        if (newUpdateComparePasses((Comparable) newUserVersion, (Comparable) oldUserVersion, versionFieldNames[i])) {
          return true;
        }
      } catch (ClassCastException e) {
        throw new SolrException(BAD_REQUEST,
            "old version and new version are not comparable: " +
                oldUserVersion.getClass() + " vs " + newUserVersion.getClass() +
                ": " + e.getMessage(), e);

      }
    }
    if (ignoreOldUpdates) {
      if (log.isDebugEnabled()) {
        log.debug("Dropping update since user version is not high enough: {}; old user version={}",
            Arrays.toString(newUserVersions), Arrays.toString(oldUserVersions)); // logok
      }
      return false;
    } else {
      throw new SolrException(CONFLICT,
          "user version is not high enough: " + Arrays.toString(newUserVersions));
    }
  }

