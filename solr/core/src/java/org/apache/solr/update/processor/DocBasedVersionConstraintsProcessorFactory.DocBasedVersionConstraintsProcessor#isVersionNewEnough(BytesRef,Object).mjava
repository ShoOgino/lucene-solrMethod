    /**
     * Returns true if the specified new version value is greater the the one
     * already known to exist for the document, or the document does not already
     * exist.
     * Returns false if the specified new version is not high enough but the
     * processor has been configured with ignoreOldUpdates=true
     * Throws a SolrException if the version is not high enough and
     * ignoreOldUpdates=false
     */
    private boolean isVersionNewEnough(BytesRef indexedDocId,
                                       Object newUserVersion) throws IOException {
      assert null != indexedDocId;
      assert null != newUserVersion;

      oldSolrVersion = -1;

      newUserVersion = convertFieldValueUsingType(userVersionField, newUserVersion);
      Object oldUserVersion = null;
      SolrInputDocument oldDoc = null;

      if (useFieldCache) {
        oldDoc = RealTimeGetComponent.getInputDocumentFromTlog(core, indexedDocId);
        if (oldDoc == RealTimeGetComponent.DELETED) {
          return true;
        }
        if (oldDoc == null) {
          // need to look up in index now...
          RefCounted<SolrIndexSearcher> newestSearcher = core.getRealtimeSearcher();
          try {
            SolrIndexSearcher searcher = newestSearcher.get();
            long lookup = searcher.lookupId(indexedDocId);
            if (lookup < 0) {
              // doc not in index either...
              return true;
            }

            ValueSource vs = solrVersionField.getType().getValueSource(solrVersionField, null);
            Map context = ValueSource.newContext(searcher);
            vs.createWeight(context, searcher);
            FunctionValues fv = vs.getValues(context, searcher.getTopReaderContext().leaves().get((int)(lookup>>32)));
            oldSolrVersion = fv.longVal((int)lookup);

            vs = userVersionField.getType().getValueSource(userVersionField, null);
            context = ValueSource.newContext(searcher);
            vs.createWeight(context, searcher);
            fv = vs.getValues(context, searcher.getTopReaderContext().leaves().get((int)(lookup>>32)));
            oldUserVersion = fv.objectVal((int)lookup);

          } catch (IOException e) {
            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error reading version from index", e);
          } finally {
            if (newestSearcher != null) {
              newestSearcher.decref();
            }
          }
        }
      } else {
        // stored fields only...

        oldDoc = RealTimeGetComponent.getInputDocument(core, indexedDocId);

        if (null == oldDoc) {
          return true;
        }
      }


      if (oldDoc != null) {
        oldUserVersion = oldDoc.getFieldValue(versionFieldName);
        // Make the FieldType resolve any conversion we need.
        oldUserVersion = convertFieldValueUsingType(userVersionField, oldUserVersion);

        Object o = oldDoc.getFieldValue(solrVersionField.getName());
        if (o == null) {
          throw new SolrException(SERVER_ERROR, "No _version_ for document "+ oldDoc);
        }
        oldSolrVersion = o instanceof Number ? ((Number) o).longValue() : Long.parseLong(o.toString());
      }


      if ( null == oldUserVersion) {
        // could happen if they turn this feature on after building an index
        // w/o the versionField
        throw new SolrException(SERVER_ERROR,
            "Doc exists in index, but has null versionField: "
                + versionFieldName);
      }


      if (! (oldUserVersion instanceof Comparable && newUserVersion instanceof Comparable) ) {
        throw new SolrException(BAD_REQUEST,
            "old version and new version are not comparable: " +
                oldUserVersion.getClass()+" vs "+newUserVersion.getClass());
      }

      try {
        if (0 < ((Comparable)newUserVersion).compareTo((Comparable) oldUserVersion)) {
          return true;
        }
        if (ignoreOldUpdates) {

          return false;
        } else {
          throw new SolrException(CONFLICT,
              "user version is not high enough: " + newUserVersion);
        }
      } catch (ClassCastException e) {
        throw new SolrException(BAD_REQUEST,
            "old version and new version are not comparable: " +
                oldUserVersion.getClass()+" vs "+newUserVersion.getClass() +
                ": " + e.getMessage(), e);

      }
    }

