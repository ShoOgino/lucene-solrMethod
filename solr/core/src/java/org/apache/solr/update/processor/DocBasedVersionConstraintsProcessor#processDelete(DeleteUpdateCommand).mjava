  @Override
  public void processDelete(DeleteUpdateCommand cmd) throws IOException {
    if (deleteVersionParamNames.length == 0) {
      // not suppose to look at deletes at all
      super.processDelete(cmd);
      return;
    }

    if ( ! cmd.isDeleteById() ) {
      // nothing to do
      super.processDelete(cmd);
      return;
    }

    String[] deleteParamValues = getDeleteParamValuesFromRequest(cmd);
    validateDeleteParamValues(deleteParamValues);


    if (isNotLeader(cmd)) {
      // transform delete to add earlier rather than later

      SolrInputDocument newDoc = createTombstoneDocument(core.getLatestSchema(), cmd.getId(), versionFieldNames, deleteParamValues, this.tombstoneConfig);

      AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());
      newCmd.solrDoc = newDoc;
      newCmd.commitWithin = cmd.commitWithin;
      super.processAdd(newCmd);
      return;
    }


    for (int i=0; ;i++) {

      logOverlyFailedRetries(i, cmd);

      if (!isVersionNewEnough(cmd.getIndexedId(), deleteParamValues)) {
        // drop this older update
        return;
      }

      // :TODO: should this logic be split and driven by two params?
      //   - deleteVersionParam to do a version check
      //   - some new boolean param to determine if a stub document gets added in place?
      try {
        // drop the delete, and instead propagate an AddDoc that
        // replaces the doc with a new "empty" one that records the deleted version

        SolrInputDocument newDoc = createTombstoneDocument(core.getLatestSchema(), cmd.getId(), versionFieldNames, deleteParamValues, this.tombstoneConfig);

        AddUpdateCommand newCmd = new AddUpdateCommand(cmd.getReq());
        newCmd.solrDoc = newDoc;
        newCmd.commitWithin = cmd.commitWithin;

        newCmd.setVersion(oldSolrVersion);  // use optimistic concurrency to ensure that the doc has not changed in the meantime
        super.processAdd(newCmd);
        return;
      } catch (SolrException e) {
        if (e.code() == 409) {
          continue;  // if a version conflict, retry
        }
        throw e;  // rethrow
      }

    }
  }

