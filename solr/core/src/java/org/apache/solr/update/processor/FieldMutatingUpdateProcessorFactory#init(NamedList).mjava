  /**
   * Handles common initialization related to source fields for 
   * constructoring the FieldNameSelector to be used.
   *
   * Will error if any unexpected init args are found, so subclasses should
   * remove any subclass-specific init args before calling this method.
   */
  @SuppressWarnings("unchecked")
  @Override
  public void init(NamedList args) {

    inclusions = parseSelectorParams(args);

    List<Object> excList = args.getAll("exclude");
    for (Object excObj : excList) {
      if (null == excObj) {
        throw new SolrException
          (SERVER_ERROR, "'exclude' init param can not be null"); 
      }
      if (! (excObj instanceof NamedList) ) {
        throw new SolrException
          (SERVER_ERROR, "'exclude' init param must be <lst/>"); 
      }
      NamedList exc = (NamedList) excObj;
      exclusions.add(parseSelectorParams(exc));
      if (0 < exc.size()) {
        throw new SolrException(SERVER_ERROR, 
                                "Unexpected 'exclude' init sub-param(s): '" + 
                                args.getName(0) + "'");
      }
      // call once per instance
      args.remove("exclude");
    }
    if (0 < args.size()) {
      throw new SolrException(SERVER_ERROR, 
                              "Unexpected init param(s): '" + 
                              args.getName(0) + "'");
    }

  }

