    private void processAddWithRetry(AddUpdateCommand cmd, int attempts, SolrInputDocument clonedOriginalDoc) throws IOException {
      try {
        super.processAdd(cmd);
      } catch (SolrException e) {
        if (attempts++ >= MAX_ATTEMPTS) {//maximum number of attempts allowed: 25
          throw new SolrException(SERVER_ERROR,
              "Atomic update failed after multiple attempts due to " + e.getMessage());
        }
        if (e.code() == ErrorCode.CONFLICT.code) { // version conflict
          if (log.isWarnEnabled()) {
            log.warn("Atomic update failed due to {} Retrying with new version .... ({})"
                , e.getMessage(), attempts);
          }

          Long lastVersion = vinfo.lookupVersion(cmd.getIndexedId());
          // if lastVersion is null then we put -1 to assert that document must not exist
          lastVersion = lastVersion == null ? -1 : lastVersion;

          // The AtomicUpdateDocumentMerger modifies the AddUpdateCommand.solrDoc to populate the real values of the
          // modified fields. We don't want those absolute values because they are out-of-date due to the conflict
          // so we restore the original document created in processAdd method and set the right version on it
          cmd.solrDoc = clonedOriginalDoc;
          clonedOriginalDoc = clonedOriginalDoc.deepCopy(); // copy again because the old cloned ref will be modified during processAdd
          cmd.solrDoc.setField(VERSION, lastVersion);

          processAddWithRetry(cmd, attempts, clonedOriginalDoc);
        }
      }
    }

