    MissedUpdatesRequest handleVersionsWithRanges(List<Long> otherVersions, boolean completeList) {
      // we may endup asking for updates for too many versions, causing 2MB post payload limit. Construct a range of
      // versions to request instead of asking individual versions
      List<String> rangesToRequest = new ArrayList<>();

      // construct ranges to request
      // both ourUpdates and otherVersions are sorted with highest range first
      // may be we can create another reverse the lists and avoid confusion
      int ourUpdatesIndex = ourUpdates.size() - 1;
      int otherUpdatesIndex = otherVersions.size() - 1;
      long totalRequestedVersions = 0;

      while (otherUpdatesIndex >= 0) {
        // we have run out of ourUpdates, pick up all the remaining versions from the other versions
        if (ourUpdatesIndex < 0) {
          String range = otherVersions.get(otherUpdatesIndex) + "..." + otherVersions.get(0);
          rangesToRequest.add(range);
          totalRequestedVersions += otherUpdatesIndex + 1;
          break;
        }

        // stop when the entries get old enough that reorders may lead us to see updates we don't need
        if (!completeList && Math.abs(otherVersions.get(otherUpdatesIndex)) < ourLowThreshold) break;

        if (ourUpdates.get(ourUpdatesIndex).longValue() == otherVersions.get(otherUpdatesIndex).longValue()) {
          ourUpdatesIndex--;
          otherUpdatesIndex--;
        } else if (Math.abs(ourUpdates.get(ourUpdatesIndex)) < Math.abs(otherVersions.get(otherUpdatesIndex))) {
          ourUpdatesIndex--;
        } else {
          long rangeStart = otherVersions.get(otherUpdatesIndex);
          while ((otherUpdatesIndex < otherVersions.size())
              && (Math.abs(otherVersions.get(otherUpdatesIndex)) < Math.abs(ourUpdates.get(ourUpdatesIndex)))) {
            otherUpdatesIndex--;
            totalRequestedVersions++;
          }
          // construct range here
          rangesToRequest.add(rangeStart + "..." + otherVersions.get(otherUpdatesIndex + 1));
        }
      }

      String rangesToRequestStr = rangesToRequest.stream().collect(Collectors.joining(","));
      return MissedUpdatesRequest.of(rangesToRequestStr, totalRequestedVersions);
    }

