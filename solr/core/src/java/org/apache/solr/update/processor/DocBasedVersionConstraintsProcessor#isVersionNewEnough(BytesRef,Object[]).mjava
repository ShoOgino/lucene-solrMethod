  /**
   * Returns true if the specified new version values are greater the the ones
   * already known to exist for the document, or if the document does not already
   * exist.
   * Returns false if the specified new versions are not high enough but the
   * processor has been configured with ignoreOldUpdates=true
   * Throws a SolrException if the version is not high enough and
   * ignoreOldUpdates=false
   */
  private boolean isVersionNewEnough(BytesRef indexedDocId,
                                     Object[] newUserVersions) throws IOException {
    assert null != indexedDocId;
    assert null != newUserVersions;

    newUserVersions = convertFieldValuesUsingType(newUserVersions, userVersionFields);

    final DocFoundAndOldUserAndSolrVersions docFoundAndOldUserVersions;
    if (useFieldCache) {
      docFoundAndOldUserVersions = getOldUserVersionsFromFieldCache(indexedDocId);
    } else {
      docFoundAndOldUserVersions = getOldUserVersionsFromStored(indexedDocId);
    }
    oldSolrVersion = docFoundAndOldUserVersions.oldSolrVersion;

    if (!docFoundAndOldUserVersions.found) {
      return true;
    }
    final Object[] oldUserVersions = docFoundAndOldUserVersions.oldUserVersions;

    validateUserVersions(oldUserVersions, versionFieldNames, "Doc exists in index, but has null versionField: ");

    return versionInUpdateIsAcceptable(newUserVersions, oldUserVersions);
  }

