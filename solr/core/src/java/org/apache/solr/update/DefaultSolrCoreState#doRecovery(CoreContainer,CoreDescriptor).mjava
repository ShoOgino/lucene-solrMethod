  @Override
  public void doRecovery(CoreContainer cc, CoreDescriptor cd) {
    
    Thread thread = new Thread() {
      @Override
      public void run() {
        MDCLoggingContext.setCoreDescriptor(cd);
        try {
          if (SKIP_AUTO_RECOVERY) {
            log.warn("Skipping recovery according to sys prop solrcloud.skip.autorecovery");
            return;
          }
          
          // check before we grab the lock
          if (cc.isShutDown()) {
            log.warn("Skipping recovery because Solr is shutdown");
            return;
          }
          
          // if we can't get the lock, another recovery is running
          // we check to see if there is already one waiting to go
          // after the current one, and if there is, bail
          boolean locked = recoveryLock.tryLock();
          try {
            if (!locked) {
              if (recoveryWaiting.get() > 0) {
                return;
              }
              recoveryWaiting.incrementAndGet();
            } else {
              recoveryWaiting.incrementAndGet();
              cancelRecovery();
            }
            
            recoveryLock.lock();
            try {
              recoveryWaiting.decrementAndGet();
              
              // to be air tight we must also check after lock
              if (cc.isShutDown()) {
                log.warn("Skipping recovery because Solr is shutdown");
                return;
              }
              log.info("Running recovery");
              
              recoveryThrottle.minimumWaitBetweenActions();
              recoveryThrottle.markAttemptingAction();
              
              recoveryStrat = new RecoveryStrategy(cc, cd, DefaultSolrCoreState.this);
              recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);
              Future<?> future = cc.getUpdateShardHandler().getRecoveryExecutor().submit(recoveryStrat);
              try {
                future.get();
              } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new SolrException(ErrorCode.SERVER_ERROR, e);
              } catch (ExecutionException e) {
                throw new SolrException(ErrorCode.SERVER_ERROR, e);
              }
            } finally {
              recoveryLock.unlock();
            }
          } finally {
            if (locked) recoveryLock.unlock();
          }
        } finally {
          MDCLoggingContext.clear();
        }
      }
    };
    try {
      // we make recovery requests async - that async request may
      // have to 'wait in line' a bit or bail if a recovery is 
      // already queued up - the recovery execution itself is run
      // in another thread on another 'recovery' executor.
      // The update executor is interrupted on shutdown and should 
      // not do disk IO.
      // The recovery executor is not interrupted on shutdown.
      //
      // avoid deadlock: we can't use the recovery executor here
      cc.getUpdateShardHandler().getUpdateExecutor().submit(thread);
    } catch (RejectedExecutionException e) {
      // fine, we are shutting down
    }
  }

