  /**
   * Creates a tombstone document, that will be used to update a document that's being deleted by ID. The returned document will contain:
   * <ul>
   * <li>uniqueKey</li>
   * <li>versions (All the fields configured as in the {@code versionField} parameter)</li>
   * <li>All the fields set in the {@code tombstoneConfig} parameter</li>
   * </ul>
   * 
   * Note that if the schema contains required fields (other than version fields or uniqueKey), they should be populated by the {@code tombstoneConfig}, 
   * otherwise this tombstone will fail when indexing (and consequently the delete will fail). Alternatively, required fields must be populated by some
   * other means (like {@code DocBasedVersionConstraintsProcessorFactory} or similar) 
   */
  protected SolrInputDocument createTombstoneDocument(IndexSchema schema, String id, String[] versionFieldNames, String[] deleteParamValues, NamedList<Object> tombstoneConfig) {
    final SolrInputDocument newDoc = new SolrInputDocument();
    
    if (tombstoneConfig != null) {
      tombstoneConfig.forEach((k,v) -> newDoc.addField(k, v));
    }
    newDoc.setField(schema.getUniqueKeyField().getName(), id);
    setDeleteParamValues(newDoc, versionFieldNames, deleteParamValues);
    return newDoc;
  }

