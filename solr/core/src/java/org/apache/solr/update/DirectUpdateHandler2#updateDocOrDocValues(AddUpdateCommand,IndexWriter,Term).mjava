  /**
   * Calls either {@link IndexWriter#updateDocValues} or {@link IndexWriter#updateDocument} as 
   * needed based on {@link AddUpdateCommand#isInPlaceUpdate}.
   * <p>
   * If the this is an UPDATE_INPLACE cmd, then all fields inclued in 
   * {@link AddUpdateCommand#getLuceneDocument} must either be the uniqueKey field, or be DocValue 
   * only fields.
   * </p>
   *
   * @param cmd - cmd apply to IndexWriter
   * @param writer - IndexWriter to use
   * @param updateTerm - used if this cmd results in calling {@link IndexWriter#updateDocument}
   */
  private void updateDocOrDocValues(AddUpdateCommand cmd, IndexWriter writer, Term updateTerm) throws IOException {
    assert null != cmd;
    final SchemaField uniqueKeyField = cmd.req.getSchema().getUniqueKeyField();
    final String uniqueKeyFieldName = null == uniqueKeyField ? null : uniqueKeyField.getName();

    if (cmd.isInPlaceUpdate()) {
      Document luceneDocument = cmd.getLuceneDocument(true);

      final List<IndexableField> origDocFields = luceneDocument.getFields();
      final List<Field> fieldsToUpdate = new ArrayList<>(origDocFields.size());
      for (IndexableField field : origDocFields) {
        if (! field.name().equals(uniqueKeyFieldName) ) {
          fieldsToUpdate.add((Field)field);
        }
      }
      log.debug("updateDocValues({})", cmd);
      writer.updateDocValues(updateTerm, fieldsToUpdate.toArray(new Field[fieldsToUpdate.size()]));
    } else {
      Document luceneDocument = cmd.getLuceneDocument(false);
      log.debug("updateDocument({})", cmd);
      writer.updateDocument(updateTerm, luceneDocument);
    }
  }

