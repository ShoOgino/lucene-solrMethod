  /**
   * Utility method that can be used to define a FieldNameSelector
   * using the same types of rules as the FieldMutatingUpdateProcessor init 
   * code.  This may be useful for Factories that wish to define default 
   * selectors in similar terms to what the configuration would look like.
   * @lucene.internal
   */
  public static FieldNameSelector createFieldNameSelector
    (final SolrResourceLoader loader,
     final SolrCore core,
     final Set<String> fields,
     final Set<String> typeNames,
     final Collection<String> typeClasses,
     final Collection<Pattern> regexes,
     final FieldNameSelector defSelector) {
    
    final Collection<Class> classes 
      = new ArrayList<Class>(typeClasses.size());
    
    for (String t : typeClasses) {
      try {
        classes.add(loader.findClass(t, Object.class));
      } catch (Exception e) {
        throw new SolrException(SERVER_ERROR,
                                "Can't resolve typeClass: " + t, e);
      }
    }
    
    if (classes.isEmpty() && 
        typeNames.isEmpty() && 
        regexes.isEmpty() && 
        fields.isEmpty()) {
      return defSelector;
    }
    
    return new ConfigurableFieldNameSelector(core, fields, typeNames, classes, regexes); 
  }

