  // TODO: optionally fail if n replicas are not reached...
  private void doFinish() {
    // TODO: if not a forward and replication req is not specified, we could
    // send in a background thread

    cmdDistrib.finish();
    List<Error> errors = cmdDistrib.getErrors();
    // TODO - we may need to tell about more than one error...
    
    // if its a forward, any fail is a problem - 
    // otherwise we assume things are fine if we got it locally
    // until we start allowing min replication param
    if (errors.size() > 0) {
      // if one node is a RetryNode, this was a forward request
      if (errors.get(0).req.node instanceof RetryNode) {
        rsp.setException(errors.get(0).e);
      } else {
        if (log.isWarnEnabled()) {
          for (Error error : errors) {
            log.warn("Error sending update", error.e);
          }
        }
      }
      // else
      // for now we don't error - we assume if it was added locally, we
      // succeeded 
    }
   
    
    // if it is not a forward request, for each fail, try to tell them to
    // recover - the doc was already added locally, so it should have been
    // legit

    for (final SolrCmdDistributor.Error error : errors) {
      if (error.req.node instanceof RetryNode) {
        // we don't try to force a leader to recover
        // when we cannot forward to it
        continue;
      }
      // TODO: we should force their state to recovering ??
      // TODO: do retries??
      // TODO: what if its is already recovering? Right now recoveries queue up -
      // should they?
      final String recoveryUrl = error.req.node.getBaseUrl();
      
      Thread thread = new Thread() {
        {
          setDaemon(true);
        }
        @Override
        public void run() {
          log.info("try and ask " + recoveryUrl + " to recover");
          HttpSolrServer server = new HttpSolrServer(recoveryUrl);
          try {
            server.setSoTimeout(60000);
            server.setConnectionTimeout(15000);
            
            RequestRecovery recoverRequestCmd = new RequestRecovery();
            recoverRequestCmd.setAction(CoreAdminAction.REQUESTRECOVERY);
            recoverRequestCmd.setCoreName(error.req.node.getCoreName());
            try {
              server.request(recoverRequestCmd);
            } catch (Throwable t) {
              SolrException.log(log, recoveryUrl
                  + ": Could not tell a replica to recover", t);
            }
          } finally {
            server.shutdown();
          }
        }
      };
      ExecutorService executor = req.getCore().getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getUpdateExecutor();
      executor.execute(thread);
      
    }
  }

