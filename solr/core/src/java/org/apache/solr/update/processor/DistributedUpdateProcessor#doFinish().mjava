  // TODO: optionally fail if n replicas are not reached...
  private void doFinish() {
    // TODO: if not a forward and replication req is not specified, we could
    // send in a background thread    
    
    cmdDistrib.finish();    
    List<Error> errors = cmdDistrib.getErrors();
    // TODO - we may need to tell about more than one error...
    
    // if its a forward, any fail is a problem - 
    // otherwise we assume things are fine if we got it locally
    // until we start allowing min replication param
    if (errors.size() > 0) {
      // if one node is a RetryNode, this was a forward request
      if (errors.get(0).req.node instanceof RetryNode) {
        rsp.setException(errors.get(0).e);
      } else {
        if (log.isWarnEnabled()) {
          for (Error error : errors) {
            log.warn("Error sending update", error.e);
          }
        }
      }
      // else
      // for now we don't error - we assume if it was added locally, we
      // succeeded 
    }
   
    
    // if it is not a forward request, for each fail, try to tell them to
    // recover - the doc was already added locally, so it should have been
    // legit

    for (final SolrCmdDistributor.Error error : errors) {
      
      if (error.req.node instanceof RetryNode) {
        // we don't try to force a leader to recover
        // when we cannot forward to it
        continue;
      }
       
      DistribPhase phase =
          DistribPhase.parseParam(error.req.uReq.getParams().get(DISTRIB_UPDATE_PARAM));       
      if (phase != DistribPhase.FROMLEADER)
        continue; // don't have non-leaders try to recovery other nodes
      
      final String replicaUrl = error.req.node.getUrl();      

      int maxTries = 1;       
      boolean sendRecoveryCommand = true;
      String collection = null;
      String shardId = null;
      
      if (error.req.node instanceof StdNode) {
        StdNode stdNode = (StdNode)error.req.node;
        collection = stdNode.getCollection();
        shardId = stdNode.getShardId();
        try {
          // if false, then the node is probably not "live" anymore
          sendRecoveryCommand = 
              zkController.ensureReplicaInLeaderInitiatedRecovery(collection, 
                                                                  shardId, 
                                                                  replicaUrl, 
                                                                  stdNode.getNodeProps(), 
                                                                  false);
          
          // we want to try more than once, ~10 minutes
          if (sendRecoveryCommand) {
            maxTries = 120;
          } // else the node is no longer "live" so no need to send any recovery command
          
        } catch (Exception e) {
          log.error("Leader failed to set replica "+
              error.req.node.getUrl()+" state to DOWN due to: "+e, e);
        }
      } // else not a StdNode, recovery command still gets sent once
            
      if (!sendRecoveryCommand)
        continue; // the replica is already in recovery handling or is not live   
      
      Throwable rootCause = SolrException.getRootCause(error.e);      
      log.error("Setting up to try to start recovery on replica "+replicaUrl+" after: "+rootCause);
      
      // try to send the recovery command to the downed replica in a background thread
      CoreContainer coreContainer = req.getCore().getCoreDescriptor().getCoreContainer();      
      LeaderInitiatedRecoveryThread lirThread = 
          new LeaderInitiatedRecoveryThread(zkController,
                                            coreContainer,
                                            collection,
                                            shardId,
                                            error.req.node.getNodeProps(),
                                            maxTries);
      ExecutorService executor = coreContainer.getUpdateShardHandler().getUpdateExecutor();
      executor.execute(lirThread);      
    }
    
    if (replicationTracker != null) {
      rsp.getResponseHeader().add(UpdateRequest.REPFACT, replicationTracker.getAchievedRf());
      rsp.getResponseHeader().add(UpdateRequest.MIN_REPFACT, replicationTracker.minRf);
      replicationTracker = null;
    }    
  }

