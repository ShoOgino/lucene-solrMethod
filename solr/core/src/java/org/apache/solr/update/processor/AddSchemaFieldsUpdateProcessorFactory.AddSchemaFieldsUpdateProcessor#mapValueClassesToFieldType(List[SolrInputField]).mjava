    /**
     * Maps all given field values' classes to a typeMapping object
     * 
     * @param fields one or more (same-named) field values from one or more documents
     */
    private TypeMapping mapValueClassesToFieldType(List<SolrInputField> fields) {
      NEXT_TYPE_MAPPING: for (TypeMapping typeMapping : typeMappings) {
        for (SolrInputField field : fields) {
          NEXT_FIELD_VALUE: for (Object fieldValue : field.getValues()) {
            for (Class<?> valueClass : typeMapping.valueClasses) {
              if (valueClass.isInstance(fieldValue)) {
                continue NEXT_FIELD_VALUE;
              }
            }
            // This fieldValue is not an instance of any of the mapped valueClass-s,
            // so mapping fails - go try the next type mapping.
            continue NEXT_TYPE_MAPPING;
          }
        }
        // Success! Each of this field's values is an instance of a mapped valueClass
        return typeMapping;
      }
      // At least one of this field's values is not an instance of any of the mapped valueClass-s
      // Return the typeMapping marked as default, if we have one, else return null to use fallback type 
      List<TypeMapping> defaultMappings = typeMappings.stream().filter(TypeMapping::isDefault).collect(Collectors.toList());
      if (defaultMappings.size() > 1) {
        throw new SolrException(SERVER_ERROR, "Only one typeMapping can be default");
      } else if (defaultMappings.size() == 1) {
        return defaultMappings.get(0);
      } else {
        return null;
      }
    }

