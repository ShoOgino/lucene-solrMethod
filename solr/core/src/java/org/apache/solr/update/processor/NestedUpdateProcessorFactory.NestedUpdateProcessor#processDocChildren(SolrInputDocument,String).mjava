    private void processDocChildren(SolrInputDocument doc, String fullPath) {
      for(SolrInputField field: doc.values()) {
        int childNum = 0;
        boolean isSingleVal = !(field.getValue() instanceof Collection);
        for(Object val: field) {
          if(!(val instanceof SolrInputDocument)) {
            // either all collection items are child docs or none are.
            break;
          }
          final String fieldName = field.getName();

          if(fieldName.contains(PATH_SEP_CHAR)) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Field name: '" + fieldName
                + "' contains: '" + PATH_SEP_CHAR + "' , which is reserved for the nested URP");
          }
          final String sChildNum = isSingleVal ? SINGULAR_VALUE_CHAR : String.valueOf(childNum);
          SolrInputDocument cDoc = (SolrInputDocument) val;
          if(!cDoc.containsKey(uniqueKeyFieldName)) {
            String parentDocId = doc.getField(uniqueKeyFieldName).getFirstValue().toString();
            cDoc.setField(uniqueKeyFieldName, generateChildUniqueId(parentDocId, fieldName, sChildNum));
          }
          final String lastKeyPath = fieldName + NUM_SEP_CHAR + sChildNum;
          // concat of all paths children.grandChild => children#1/grandChild#
          final String childDocPath = fullPath == null ? lastKeyPath : fullPath + PATH_SEP_CHAR + lastKeyPath;
          processChildDoc((SolrInputDocument) val, doc, childDocPath);
          ++childNum;
        }
      }
    }

