  public long write(AddUpdateCommand cmd) {
    LogCodec codec = new LogCodec();
    long pos = 0;
    synchronized (this) {
      try {
        pos = fos.size();   // if we had flushed, this should be equal to channel.position()
        SolrInputDocument sdoc = cmd.getSolrInputDocument();

        if (pos == 0) { // TODO: needs to be changed if we start writing a header first
          addGlobalStrings(sdoc.getFieldNames());
          writeLogHeader(codec);
          pos = fos.size();
        }

        /***
        System.out.println("###writing at " + pos + " fos.size()=" + fos.size() + " raf.length()=" + raf.length());
         if (pos != fos.size()) {
          throw new RuntimeException("ERROR" + "###writing at " + pos + " fos.size()=" + fos.size() + " raf.length()=" + raf.length());
        }
         ***/

        codec.init(fos);
        codec.writeTag(JavaBinCodec.ARR, 3);
        codec.writeInt(UpdateLog.ADD);  // should just take one byte
        codec.writeLong(cmd.getVersion());
        codec.writeSolrInputDocument(cmd.getSolrInputDocument());

        endRecord(pos);
        // fos.flushBuffer();  // flush later
        return pos;
      } catch (IOException e) {
        // TODO: reset our file pointer back to "pos", the start of this record.
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error logging add", e);
      }
    }
  }

