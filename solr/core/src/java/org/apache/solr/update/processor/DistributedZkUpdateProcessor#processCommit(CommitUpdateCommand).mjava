  @Override
  public void processCommit(CommitUpdateCommand cmd) throws IOException {

    assert TestInjection.injectFailUpdateRequests();

    if (isReadOnly()) {
      throw new SolrException(ErrorCode.FORBIDDEN, "Collection " + collection + " is read-only.");
    }

    updateCommand = cmd;

    List<SolrCmdDistributor.Node> nodes = null;
    Replica leaderReplica = null;
    zkCheck();
    try {
      leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, cloudDesc.getShardId());
    } catch (InterruptedException e) {
      Thread.interrupted();
      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, "Exception finding leader for shard " + cloudDesc.getShardId(), e);
    }
    isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());

    nodes = getCollectionUrls(collection, EnumSet.of(Replica.Type.TLOG,Replica.Type.NRT), true);
    if (nodes == null) {
      // This could happen if there are only pull replicas
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
          "Unable to distribute commit operation. No replicas available of types " + Replica.Type.TLOG + " or " + Replica.Type.NRT);
    }

    nodes.removeIf((node) -> node.getNodeProps().getNodeName().equals(zkController.getNodeName())
        && node.getNodeProps().getCoreName().equals(req.getCore().getName()));

    if (!isLeader && req.getParams().get(COMMIT_END_POINT, "").equals("replicas")) {
      if (replicaType == Replica.Type.PULL) {
        log.warn("Commit not supported on replicas of type " + Replica.Type.PULL);
      } else if (replicaType == Replica.Type.NRT) {
        doLocalCommit(cmd);
      }
    } else {
      // zk
      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));

      List<SolrCmdDistributor.Node> useNodes = null;
      if (req.getParams().get(COMMIT_END_POINT) == null) {
        useNodes = nodes;
        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());
        params.set(COMMIT_END_POINT, "leaders");
        if (useNodes != null) {
          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(
              zkController.getBaseUrl(), req.getCore().getName()));
          cmdDistrib.distribCommit(cmd, useNodes, params);
          cmdDistrib.blockAndDoRetries();
        }
      }

      if (isLeader) {
        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());

        params.set(COMMIT_END_POINT, "replicas");

        useNodes = getReplicaNodesForLeader(cloudDesc.getShardId(), leaderReplica);

        if (useNodes != null) {
          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(
              zkController.getBaseUrl(), req.getCore().getName()));

          cmdDistrib.distribCommit(cmd, useNodes, params);
        }

        doLocalCommit(cmd);

        if (useNodes != null) {
          cmdDistrib.blockAndDoRetries();
        }
      }
    }
  }

