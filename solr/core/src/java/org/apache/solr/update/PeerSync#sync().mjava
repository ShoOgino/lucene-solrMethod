  /** Returns true if peer sync was successful, meaning that this core may be considered to have the latest updates.
   * It does not mean that the remote replica is in sync with us.
   */
  public PeerSyncResult sync() {
    if (ulog == null) {
      syncErrors.inc();
      return PeerSyncResult.failure();
    }
    Timer.Context timerContext = null;
    try {
      if (log.isInfoEnabled()) {
        log.info("{} START replicas={} nUpdates={}", msg(), replicas, nUpdates);
      }

      // check if we already in sync to begin with 
      if(doFingerprint && alreadyInSync()) {
        syncSkipped.inc();
        return PeerSyncResult.success();
      }

      // measure only when actual sync is performed
      timerContext = syncTime.time();

      // Fire off the requests before getting our own recent updates (for better concurrency)
      // This also allows us to avoid getting updates we don't need... if we got our updates and then got their updates,
      // they would
      // have newer stuff that we also had (assuming updates are going on and are being forwarded).
      for (String replica : replicas) {
        requestVersions(replica);
      }

      long ourLowThreshold, ourHighThreshold;
      List<Long> ourUpdates;
      try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {
        ourUpdates = recentUpdates.getVersions(nUpdates);
      }
      
      ourUpdates.sort(absComparator);

      if (ourUpdates.size() > 0) {
        ourLowThreshold = percentile(ourUpdates, 0.8f);
        ourHighThreshold = percentile(ourUpdates, 0.2f);
      } else {
        // we have no versions and hence no frame of reference to tell if we can use a peers
        // updates to bring us into sync
        if (log.isInfoEnabled()) {
          log.info("{} DONE. We have no versions. sync failed.", msg());
        }
        for (;;)  {
          ShardResponse srsp = shardHandler.takeCompletedOrError();
          if (srsp == null) break;
          if (srsp.getException() == null)  {
            @SuppressWarnings({"unchecked"})
            List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get("versions");
            if (otherVersions != null && !otherVersions.isEmpty())  {
              syncErrors.inc();
              return PeerSyncResult.failure(true);
            }
          }
        }
        syncErrors.inc();
        return PeerSyncResult.failure(false);
      }

      this.missedUpdatesFinder = new MissedUpdatesFinder(ourUpdates, msg(), nUpdates, ourLowThreshold, ourHighThreshold);

      for (;;) {
        ShardResponse srsp = shardHandler.takeCompletedOrError();
        if (srsp == null) break;
        boolean success = handleResponse(srsp);
        if (!success) {
          if (log.isInfoEnabled()) {
            log.info("{} DONE. sync failed", msg());
          }
          shardHandler.cancelAll();
          syncErrors.inc();
          return PeerSyncResult.failure();
        }
      }

      // finish up any comparisons with other shards that we deferred
      boolean success = true;
      for (SyncShardRequest sreq : requests) {
        if (sreq.doFingerprintComparison) {
          success = compareFingerprint(sreq);
          if (!success) break;
        }
      }

      if (log.isInfoEnabled()) {
        log.info("{} DONE. sync {}", msg(), (success ? "succeeded" : "failed"));
      }
      if (!success) {
        syncErrors.inc();
      }
      return success ?  PeerSyncResult.success() : PeerSyncResult.failure();
    } finally {
      if (timerContext != null) {
        timerContext.close();
      }
    }
  }

