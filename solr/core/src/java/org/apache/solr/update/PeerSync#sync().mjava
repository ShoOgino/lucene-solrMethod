  /** Returns true if peer sync was successful, meaning that this core may be considered to have the latest updates.
   * It does not mean that the remote replica is in sync with us.
   */
  public PeerSyncResult sync() {
    if (ulog == null) {
      return PeerSyncResult.failure();
    }
    MDCLoggingContext.setCore(core);
    try {
      log.info(msg() + "START replicas=" + replicas + " nUpdates=" + nUpdates);
      
      if (debug) {
        if (startingVersions != null) {
          log.debug(msg() + "startingVersions=" + startingVersions.size() + " " + startingVersions);
        }
      }
      // check if we already in sync to begin with 
      if(doFingerprint && alreadyInSync()) {
        return PeerSyncResult.success();
      }
      
      
      // Fire off the requests before getting our own recent updates (for better concurrency)
      // This also allows us to avoid getting updates we don't need... if we got our updates and then got their updates,
      // they would
      // have newer stuff that we also had (assuming updates are going on and are being forwarded).
      for (String replica : replicas) {
        requestVersions(replica);
      }

      try (UpdateLog.RecentUpdates recentUpdates = ulog.getRecentUpdates()) {
        ourUpdates = recentUpdates.getVersions(nUpdates);
      }
      
      Collections.sort(ourUpdates, absComparator);
      
      if (startingVersions != null) {
        if (startingVersions.size() == 0) {
          log.warn("no frame of reference to tell if we've missed updates");
          return PeerSyncResult.failure();
        }
        Collections.sort(startingVersions, absComparator);
        
        ourLowThreshold = percentile(startingVersions, 0.8f);
        ourHighThreshold = percentile(startingVersions, 0.2f);

        // now make sure that the starting updates overlap our updates
        // there shouldn't be reorders, so any overlap will do.
        
        long smallestNewUpdate = Math.abs(ourUpdates.get(ourUpdates.size() - 1));
        
        if (Math.abs(startingVersions.get(0)) < smallestNewUpdate) {
          log.warn(msg()
              + "too many updates received since start - startingUpdates no longer overlaps with our currentUpdates");
          return PeerSyncResult.failure();
        }
        
        // let's merge the lists
        List<Long> newList = new ArrayList<>(ourUpdates);
        for (Long ver : startingVersions) {
          if (Math.abs(ver) < smallestNewUpdate) {
            newList.add(ver);
          }
        }
        
        ourUpdates = newList;
        Collections.sort(ourUpdates, absComparator);
      } else {
        
        if (ourUpdates.size() > 0) {
          ourLowThreshold = percentile(ourUpdates, 0.8f);
          ourHighThreshold = percentile(ourUpdates, 0.2f);
        } else {
          // we have no versions and hence no frame of reference to tell if we can use a peers
          // updates to bring us into sync
          log.info(msg() + "DONE.  We have no versions.  sync failed.");
          for (;;)  {
            ShardResponse srsp = shardHandler.takeCompletedOrError();
            if (srsp == null) break;
            if (srsp.getException() == null)  {
              List<Long> otherVersions = (List<Long>)srsp.getSolrResponse().getResponse().get("versions");
              if (otherVersions != null && !otherVersions.isEmpty())  {
                return PeerSyncResult.failure(true);
              }
            }
          }
          return PeerSyncResult.failure(false);
        }
      }

      ourHighest = ourUpdates.get(0);
      ourUpdateSet = new HashSet<>(ourUpdates);
      requestedUpdateSet = new HashSet<>();
      
      for (;;) {
        ShardResponse srsp = shardHandler.takeCompletedOrError();
        if (srsp == null) break;
        boolean success = handleResponse(srsp);
        if (!success) {
          log.info(msg() + "DONE. sync failed");
          shardHandler.cancelAll();
          return PeerSyncResult.failure();
        }
      }

      // finish up any comparisons with other shards that we deferred
      boolean success = true;
      for (SyncShardRequest sreq : requests) {
        if (sreq.doFingerprintComparison) {
          success = compareFingerprint(sreq);
          if (!success) break;
        }
      }

      log.info(msg() + "DONE. sync " + (success ? "succeeded" : "failed"));
      return success ?  PeerSyncResult.success() : PeerSyncResult.failure();
    } finally {
      MDCLoggingContext.clear();
    }
  }

