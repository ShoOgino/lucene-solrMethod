    @SuppressWarnings("unchecked")
    boolean printZnode(JSONWriter json, String path) throws IOException {
      try {     
        String dataStr = null;
        String dataStrErr = null;
        Stat stat = new Stat();
        // Trickily, the call to zkClient.getData fills in the stat variable
        byte[] data = zkClient.getData(path, null, stat, true);          
        if (null != data) {
          try {
            dataStr = (new BytesRef(data)).utf8ToString();
          } catch (Exception e) {
            dataStrErr = "data is not parsable as a utf8 String: " + e.toString();
          }
        }
        // support paging of the collections graph view (in case there are many collections)
        if (page != null) {
          // we've already pulled the data for /clusterstate.json from ZooKeeper above,
          // but it needs to be parsed into a map so we can lookup collection states before
          // trying to find them in the /collections/?/state.json znode
          Map<String,Object> clusterstateJsonMap = null;
          if (dataStr != null) {
            try {
              clusterstateJsonMap = (Map<String, Object>) ObjectBuilder.fromJSON(dataStr);
            } catch (Exception e) {
              throw new SolrException(ErrorCode.SERVER_ERROR,
                  "Failed to parse /clusterstate.json from ZooKeeper due to: " + e, e);
            }
          } else {
            clusterstateJsonMap = ZkNodeProps.makeMap();
          }
          
          // fetch the requested page of collections and then retrieve the state for each 
          page = pagingSupport.fetchPage(page, zkClient);
          // keep track of how many collections match the filter
          boolean applyStatusFilter = 
              (page.filterType == FilterType.status && page.filter != null);
          List<String> matchesStatusFilter = applyStatusFilter ? new ArrayList<String>() : null;           
          Set<String> liveNodes = applyStatusFilter ? 
              zkController.getZkStateReader().getClusterState().getLiveNodes() : null;
          
          SortedMap<String,Object> collectionStates = new TreeMap<String,Object>(pagingSupport);          
          for (String collection : page.selected) {
            Object collectionState = clusterstateJsonMap.get(collection);
            if (collectionState != null) {              
              // collection state was in /clusterstate.json
              if (applyStatusFilter) {
                // verify this collection matches the status filter
                if (page.matchesStatusFilter((Map<String,Object>)collectionState,liveNodes)) {
                  matchesStatusFilter.add(collection);
                  collectionStates.put(collection, collectionState);
                }
              } else {
                collectionStates.put(collection, collectionState);                
              }              
            } else {
              // looks like an external collection ...
              String collStatePath = String.format(Locale.ROOT, "/collections/%s/state.json", collection);
              String childDataStr = null;
              try {              
                byte[] childData = zkClient.getData(collStatePath, null, null, true);
                if (childData != null)
                  childDataStr = (new BytesRef(childData)).utf8ToString();
              } catch (KeeperException.NoNodeException nne) {
                log.warn("State for collection "+collection+
                    " not found in /clusterstate.json or /collections/"+collection+"/state.json!");
              } catch (Exception childErr) {
                log.error("Failed to get "+collStatePath+" due to: "+childErr);
              }
              
              if (childDataStr != null) {
                Map<String,Object> extColl = (Map<String,Object>)ObjectBuilder.fromJSON(childDataStr);
                collectionState = extColl.get(collection);
                
                if (applyStatusFilter) {
                  // verify this collection matches the filtered state
                  if (page.matchesStatusFilter((Map<String,Object>)collectionState,liveNodes)) {
                    matchesStatusFilter.add(collection);
                    collectionStates.put(collection, collectionState);
                  }
                } else {
                  collectionStates.put(collection, collectionState);                
                }              
              }              
            }            
          }
          
          if (applyStatusFilter) {
            // update the paged navigation info after applying the status filter
            page.selectPage(matchesStatusFilter);
            
            // rebuild the Map of state data
            SortedMap<String,Object> map = new TreeMap<String,Object>(pagingSupport);                      
            for (String next : page.selected)
              map.put(next, collectionStates.get(next));
            collectionStates = map;
          }          
          
          if (collectionStates != null) {
            CharArr out = new CharArr();
            new JSONWriter(out, 2).write(collectionStates);
            dataStr = out.toString();
          }
        }

        json.writeString("znode");
        json.writeNameSeparator();
        json.startObject();

        writeKeyValue(json, "path", path, true);

        json.writeValueSeparator();
        json.writeString("prop");
        json.writeNameSeparator();
        json.startObject();
        writeKeyValue(json, "version", stat.getVersion(), true);
        writeKeyValue(json, "aversion", stat.getAversion(), false);
        writeKeyValue(json, "children_count", stat.getNumChildren(), false);
        writeKeyValue(json, "ctime", time(stat.getCtime()), false);
        writeKeyValue(json, "cversion", stat.getCversion(), false);
        writeKeyValue(json, "czxid", stat.getCzxid(), false);
        writeKeyValue(json, "ephemeralOwner", stat.getEphemeralOwner(), false);
        writeKeyValue(json, "mtime", time(stat.getMtime()), false);
        writeKeyValue(json, "mzxid", stat.getMzxid(), false);
        writeKeyValue(json, "pzxid", stat.getPzxid(), false);
        writeKeyValue(json, "dataLength", stat.getDataLength(), false);
        if (null != dataStrErr) {
          writeKeyValue(json, "dataNote", dataStrErr, false);
        }
        json.endObject();

        if (null != dataStr) {
          writeKeyValue(json, "data", dataStr, false);
        }

        if (page != null) {
          writeKeyValue(json, "paging", page.getPagingHeader(), false);
        }

        json.endObject();
      } catch (KeeperException e) {
        writeError(500, e.toString());
        return false;
      } catch (InterruptedException e) {
        writeError(500, e.toString());
        return false;
      }
      return true;
    }

