    @Override
    public SolrParams parseParamsAndFillStreams(final HttpServletRequest req, ArrayList<ContentStream> streams ) throws Exception {
      String contentType = req.getContentType();
      String method = req.getMethod(); // No need to uppercase... HTTP verbs are case sensitive
      String uri = req.getRequestURI();
      boolean isV2 = getHttpSolrCall(req) instanceof V2HttpCall;
      boolean isPost = "POST".equals(method);

      // SOLR-6787 changed the behavior of a POST without content type.  Previously it would throw an exception,
      // but now it will use the raw request parser.
      /***
       if (contentType == null && isPost) {
         throw new SolrException(ErrorCode.UNSUPPORTED_MEDIA_TYPE, "Must specify a Content-Type header with POST requests");
       }
       ***/


      // According to previous StandardRequestParser logic (this is a re-written version),
      // POST was handled normally, but other methods (PUT/DELETE)
      // were handled by the RestManager classes if the URI contained /schema or /config
      if (!isPost) {
        if (isV2) {
          return raw.parseParamsAndFillStreams(req, streams);
        }
        if (contentType == null) {
          return parseQueryString(req.getQueryString());
        }

        // OK, we have a BODY at this point

        boolean schemaRestPath = false;
        int idx = uri.indexOf("/schema");
        if (idx >= 0 && uri.endsWith("/schema") || uri.contains("/schema/")) {
          schemaRestPath = true;
        }

        if (schemaRestPath) {
          return raw.parseParamsAndFillStreams(req, streams);
        }

        if ("PUT".equals(method) || "DELETE".equals(method)) {
          throw new SolrException(ErrorCode.BAD_REQUEST, "Unsupported method: " + method + " for request " + req);
        }
      }


      if (formdata.isFormData(req)) {
        String userAgent = req.getHeader("User-Agent");
        boolean isCurl = userAgent != null && userAgent.startsWith("curl/");

        FastInputStream input = FastInputStream.wrap(req.getInputStream());

        if (isCurl) {
          SolrParams params = autodetect(req, streams, input);
          if (params != null) return params;
        }

        return formdata.parseParamsAndFillStreams(req, streams, input);
      }

      if (MultipartRequestParser.isMultipart(req)) {
        return multipart.parseParamsAndFillStreams(req, streams);
      }

      // some other content-type (json, XML, csv, etc)
      return raw.parseParamsAndFillStreams(req, streams);
    }

