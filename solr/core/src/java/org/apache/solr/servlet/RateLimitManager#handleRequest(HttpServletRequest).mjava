  // Handles an incoming request. The main orchestration code path, this method will
  // identify which (if any) rate limiter can handle this request. Internal requests will not be
  // rate limited
  // Returns true if request is accepted for processing, false if it should be rejected
  public boolean handleRequest(HttpServletRequest request) throws InterruptedException {
    String requestContext = request.getHeader(SOLR_REQUEST_CONTEXT_PARAM);
    String typeOfRequest = request.getHeader(SOLR_REQUEST_TYPE_PARAM);

    if (typeOfRequest == null) {
      // Cannot determine if this request should be throttled
      return true;
    }

    // Do not throttle internal requests
    if (requestContext != null && requestContext.equals(SolrRequest.SolrClientContext.SERVER.toString())) {
      return true;
    }

    RequestRateLimiter requestRateLimiter = requestRateLimiterMap.get(typeOfRequest);

    if (requestRateLimiter == null) {
      // No request rate limiter for this request type
      return true;
    }

    RequestRateLimiter.SlotMetadata result = requestRateLimiter.handleRequest();

    if (result != null) {
      // Can be the case if request rate limiter is disabled
      if (result.isReleasable()) {
        activeRequestsMap.put(request, result);
      }
      return true;
    }

    RequestRateLimiter.SlotMetadata slotMetadata = trySlotBorrowing(typeOfRequest);

    if (slotMetadata != null) {
      activeRequestsMap.put(request, slotMetadata);
      return true;
    }

    return false;
  }

