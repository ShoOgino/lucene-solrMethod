  private void handleAddReplicaProp(SolrQueryRequest req, SolrQueryResponse rsp) throws KeeperException, InterruptedException {
    req.getParams().required().check(COLLECTION_PROP, PROPERTY_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_VALUE_PROP);


    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, ADDREPLICAPROP.toLower());
    copyIfNotNull(req.getParams(), map, COLLECTION_PROP, SHARD_ID_PROP, REPLICA_PROP, PROPERTY_PROP,
        SHARD_UNIQUE, PROPERTY_VALUE_PROP);

    String property = (String) map.get(PROPERTY_PROP);
    if (property.startsWith(OverseerCollectionProcessor.COLL_PROP_PREFIX) == false) {
      property = OverseerCollectionProcessor.COLL_PROP_PREFIX + property;
    }

    boolean uniquePerSlice = Boolean.parseBoolean((String) map.get(SHARD_UNIQUE));

    // Check if we're trying to set a property with parameters that allow us to set the property on multiple replicas
    // in a slice on properties that are known to only be one-per-slice and error out if so.
    if (StringUtils.isNotBlank((String)map.get(SHARD_UNIQUE)) &&
        SliceMutator.SLICE_UNIQUE_BOOLEAN_PROPERTIES.contains(property.toLowerCase(Locale.ROOT)) &&
        uniquePerSlice == false) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
          "Overseer replica property command received for property " + property +
              " with the " + SHARD_UNIQUE +
              " parameter set to something other than 'true'. No action taken.");
    }
    handleResponse(ADDREPLICAPROP.toLower(), new ZkNodeProps(map), rsp);
  }

