    private void parseExtendedFieldValue(SolrInputField sif, int ev)  throws IOException {
      assert ev == JSONParser.OBJECT_START;

      float boost = 1.0f;
      Object normalFieldValue = null;
      Map<String, Object> extendedInfo = null;

      for (;;) {
        ev = parser.nextEvent();
        switch (ev) {
          case JSONParser.STRING:
            String label = parser.getString();
            if ("boost".equals(label)) {
              ev = parser.nextEvent();
              if( ev != JSONParser.NUMBER &&
                  ev != JSONParser.LONG &&
                  ev != JSONParser.BIGNUMBER ) {
                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "boost should have number! "+JSONParser.getEventString(ev) );
              }

              boost = (float)parser.getDouble();
            } else if ("value".equals(label)) {
              normalFieldValue = parseNormalFieldValue(parser.nextEvent());
            } else {
              // If we encounter other unknown map keys, then use a map
              if (extendedInfo == null) {
                extendedInfo = new HashMap<>(2);
              }
              // for now, the only extended info will be field values
              // we could either store this as an Object or a SolrInputField
              Object val = parseNormalFieldValue(parser.nextEvent());
              extendedInfo.put(label, val);
            }
            break;

          case JSONParser.OBJECT_END:
            if (extendedInfo != null) {
              if (normalFieldValue != null) {
                extendedInfo.put("value",normalFieldValue);
              }
              sif.setValue(extendedInfo, boost);
            } else {
              sif.setValue(normalFieldValue, boost);
            }
            return;

          default:
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Error parsing JSON extended field value. Unexpected "+JSONParser.getEventString(ev) );
        }
      }
    }

