  // currentAsyncIds - map of request IDs and reporting data (value)
  // maxWaitSecs - How long are we going to wait? Defaults to 30 seconds.
  // waitForAll - if true, do not return until all assignments have been made.
  // results - a place to stash results for reporting back to the user.
  //
  private boolean waitForLeaderChange(Map<String, String> currentAsyncIds, final int maxWaitSecs,
                                      Boolean waitForAll, NamedList<Object> results)
      throws KeeperException, InterruptedException {

    if (currentAsyncIds.size() == 0) return true;

    for (int idx = 0; idx < maxWaitSecs * 10; ++idx) {
      Iterator<Map.Entry<String, String>> iter = currentAsyncIds.entrySet().iterator();
      boolean foundChange = false;
      while (iter.hasNext()) {
        Map.Entry<String, String> pair = iter.next();
        String asyncId = pair.getKey();
        if (coreContainer.getZkController().getOverseerFailureMap().contains(asyncId)) {
          coreContainer.getZkController().getOverseerFailureMap().remove(asyncId);
          NamedList<Object> fails = (NamedList<Object>) results.get("failures");
          if (fails == null) {
            fails = new NamedList<>();
            results.add("failures", fails);
          }
          NamedList<Object> res = new NamedList<>();
          res.add("status", "failed");
          res.add("msg", "Failed to assign '" + pair.getValue() + "' to be leader");
          fails.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);
          iter.remove();
          foundChange = true;
        } else if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId)) {
          coreContainer.getZkController().getOverseerCompletedMap().remove(asyncId);
          NamedList<Object> successes = (NamedList<Object>) results.get("successes");
          if (successes == null) {
            successes = new NamedList<>();
            results.add("successes", successes);
          }
          NamedList<Object> res = new NamedList<>();
          res.add("status", "success");
          res.add("msg", "Assigned '" + pair.getValue() + "' to be leader");
          successes.add(asyncId.substring(REBALANCELEADERS.toLower().length()), res);
          iter.remove();
          foundChange = true;
        }
      }
      // We're done if we're processing a few at a time or all requests are processed.
      if ((foundChange && waitForAll == false) || currentAsyncIds.size() == 0) {
        return true;
      }
      Thread.sleep(100); //TODO: Is there a better thing to do than sleep here?
    }
    return false;
  }

