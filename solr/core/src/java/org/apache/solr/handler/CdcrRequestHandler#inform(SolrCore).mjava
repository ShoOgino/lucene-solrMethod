  @Override
  public void inform(SolrCore core) {
    this.core = core;
    collection = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();

    // Make sure that the core is ZKAware
    if (!core.getCoreContainer().isZooKeeperAware()) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
          "Solr instance is not running in SolrCloud mode.");
    }

    // Make sure that the core is using the CdcrUpdateLog implementation
    if (!(core.getUpdateHandler().getUpdateLog() instanceof CdcrUpdateLog)) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
          "Solr instance is not configured with the cdcr update log.");
    }

    // Find the registered path of the handler
    path = null;
    for (Map.Entry<String, PluginBag.PluginHolder<SolrRequestHandler>> entry : core.getRequestHandlers().getRegistry().entrySet()) {
      if (core.getRequestHandlers().isLoaded(entry.getKey()) && entry.getValue().get() == this) {
        path = entry.getKey();
        break;
      }
    }
    if (path == null) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
          "The CdcrRequestHandler is not registered with the current core.");
    }
    if (!path.startsWith("/")) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
          "The CdcrRequestHandler needs to be registered to a path. Typically this is '/cdcr'");
    }

    // Initialisation phase
    // If the Solr cloud is being initialised, each CDCR node will start up in its default state, i.e., STOPPED
    // and non-leader. The leader state will be updated later, when all the Solr cores have been loaded.
    // If the Solr cloud has already been initialised, and the core is reloaded (i.e., because a node died or a new node
    // is added to the cluster), the CDCR node will synchronise its state with the global CDCR state that is stored
    // in zookeeper.

    // Initialise the buffer state manager
    bufferStateManager = new CdcrBufferStateManager(core, bufferConfiguration);
    // Initialise the process state manager
    processStateManager = new CdcrProcessStateManager(core);
    // Initialise the leader state manager
    leaderStateManager = new CdcrLeaderStateManager(core);

    // Initialise the replicator states manager
    replicatorManager = new CdcrReplicatorManager(core, path, replicatorConfiguration, replicasConfiguration);
    replicatorManager.setProcessStateManager(processStateManager);
    replicatorManager.setLeaderStateManager(leaderStateManager);
    // we need to inform it of a state event since the process and leader state
    // may have been synchronised during the initialisation
    replicatorManager.stateUpdate();

    // Initialise the update log synchronizer
    updateLogSynchronizer = new CdcrUpdateLogSynchronizer(core, path, updateLogSynchronizerConfiguration);
    updateLogSynchronizer.setLeaderStateManager(leaderStateManager);
    // we need to inform it of a state event since the leader state
    // may have been synchronised during the initialisation
    updateLogSynchronizer.stateUpdate();

    // Initialise the buffer manager
    bufferManager = new CdcrBufferManager(core);
    bufferManager.setLeaderStateManager(leaderStateManager);
    bufferManager.setBufferStateManager(bufferStateManager);
    // we need to inform it of a state event since the leader state
    // may have been synchronised during the initialisation
    bufferManager.stateUpdate();

    // register the close hook
    this.registerCloseHook(core);
  }

