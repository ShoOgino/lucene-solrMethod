    /** 
     * Public for testing purposes
     * @see #populateScores(PhrasesIdentificationComponent.PhrasesContextData)
     * @lucene.internal
     */
    public static void populateScores(final List<Phrase> phrases, final Map<String,Double> fieldWeights,
                                      final int maxIndexedPositionLength,
                                      final int maxQueryPositionLength) {
      final double total_weight = fieldWeights.values().stream().mapToDouble(Double::doubleValue).sum();
      for (Phrase phrase : phrases) {
        double phrase_cumulative_score = 0.0D;
        for (Map.Entry<String,Double> entry : fieldWeights.entrySet()) {
          final String field = entry.getKey();
          final double weight = entry.getValue();
          double field_score = computeFieldScore(phrase, field,
                                                 maxIndexedPositionLength, maxQueryPositionLength);
          phrase.fieldScores.put(field,field_score);
          phrase_cumulative_score += (field_score * weight);
        }
        phrase.total_score = (total_weight < 0 ? Double.NEGATIVE_INFINITY
                              : (phrase_cumulative_score / total_weight));
      }
    }

