  // returns the list of recommended splits, or null if there is not enough information
  static Collection<DocRouter.Range> getSplits(Collection<RangeCount> rawCounts, DocRouter.Range currentRange) throws Exception {

    int totalCount = 0;
    RangeCount biggest = null; // keep track of the largest in case we need to split it out into it's own shard
    RangeCount last = null;  // keep track of what the last range is

    // Remove counts that don't overlap with currentRange (can happen if someone overrode document routing)
    List<RangeCount> counts = new ArrayList<>(rawCounts.size());
    for (RangeCount rangeCount : rawCounts) {
      if (!rangeCount.range.overlaps(currentRange)) {
        continue;
      }
      totalCount += rangeCount.count;
      if (biggest == null || rangeCount.count > biggest.count) {
        biggest = rangeCount;
      }
      counts.add(rangeCount);
      last = rangeCount;
    }

    if (counts.size() == 0) {
      // we don't have any data to go off of, so do the split the normal way
      return null;
    }


    List<DocRouter.Range> targetRanges = new ArrayList<>();

    if (counts.size() == 1) {
      // We have a single range, so we should split it.

      // It may already be a partial range, so figure that out
      int lower = Math.max(last.range.min, currentRange.min);
      int upper = Math.min(last.range.max, currentRange.max);
      int mid = lower + (upper-lower)/2;
      if (mid == lower || mid == upper) {
        // shard too small... this should pretty much never happen, but use default split logic if it does.
        return null;
      }

      // Make sure to include the shard's current range in the new ranges so we don't create useless empty shards.
      DocRouter.Range lowerRange = new DocRouter.Range(currentRange.min, mid);
      DocRouter.Range upperRange = new DocRouter.Range(mid+1, currentRange.max);
      targetRanges.add(lowerRange);
      targetRanges.add(upperRange);

      return targetRanges;
    }

    // We have at least two ranges, so we want to partition the ranges
    // and avoid splitting any individual range.

    int targetCount = totalCount / 2;
    RangeCount middle = null;
    RangeCount prev = null;
    int currCount = 0;
    for (RangeCount rangeCount : counts) {
      currCount += rangeCount.count;
      if (currCount >= targetCount) {  // this should at least be true on the last range
        middle = rangeCount;
        break;
      }
      prev = rangeCount;
    }

    // check if using the range before the middle one would make a better split point
    int overError = currCount - targetCount;  // error if we include middle in first split
    int underError = targetCount - (currCount - middle.count); // error if we include middle in second split
    if (underError < overError) {
      middle = prev;
    }

    // if the middle range turned out to be the last one, pick the one before it instead
    if (middle == last) {
      middle = prev;
    }

    // Make sure to include the shard's current range in the new ranges so we don't create useless empty shards.
    DocRouter.Range lowerRange = new DocRouter.Range(currentRange.min, middle.range.max);
    DocRouter.Range upperRange = new DocRouter.Range(middle.range.max+1, currentRange.max);
    targetRanges.add(lowerRange);
    targetRanges.add(upperRange);

    return targetRanges;
  }

