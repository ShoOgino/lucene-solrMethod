    /**
     * Open a new stream using HttpClient
     */
    FastInputStream getStream() throws IOException {
      post = new HttpPost(masterUrl);
      //the method is command=filecontent
      
      List<BasicNameValuePair> formparams = new ArrayList<BasicNameValuePair>();

      formparams.add(new BasicNameValuePair(COMMAND, CMD_GET_FILE));

      //add the version to download. This is used to reserve the download
      formparams.add(new BasicNameValuePair(GENERATION, indexGen.toString()));
      if (isConf) {
        //set cf instead of file for config file
        formparams.add(new BasicNameValuePair(CONF_FILE_SHORT, fileName));
      } else {
        formparams.add(new BasicNameValuePair(FILE, fileName));
      }
      if (useInternal) {
        formparams.add(new BasicNameValuePair(COMPRESSION, "true"));
      }
      if (useExternal) {
        formparams.add(new BasicNameValuePair("Accept-Encoding", "gzip,deflate"));
      }
      //use checksum
      if (this.includeChecksum)
        formparams.add(new BasicNameValuePair(CHECKSUM, "true"));
      //wt=filestream this is a custom protocol
      formparams.add(new BasicNameValuePair("wt", FILE_STREAM));
      // This happen if there is a failure there is a retry. the offset=<sizedownloaded> ensures that
      // the server starts from the offset
      if (bytesDownloaded > 0) {
        formparams.add(new BasicNameValuePair(OFFSET, "" + bytesDownloaded));
      }
      
      UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");
      post.setEntity(entity);

      HttpResponse response = myHttpClient.execute(post);
      InputStream is = response.getEntity().getContent();
      //wrap it using FastInputStream
      if (useInternal) {
        is = new InflaterInputStream(is);
      } else if (useExternal) {
        is = checkCompressed(post, is);
      }
      return new FastInputStream(is);
    }

