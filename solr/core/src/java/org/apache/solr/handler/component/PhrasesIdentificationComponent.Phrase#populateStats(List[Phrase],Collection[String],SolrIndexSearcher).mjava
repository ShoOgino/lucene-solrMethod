    /**
     * Populates the phrases with stats from the local index for the specified fields 
     */
    public static void populateStats(final List<Phrase> phrases, final Collection<String> fieldNames,
                                     final SolrIndexSearcher searcher) throws IOException {
      final IndexReader reader = searcher.getIndexReader();
      for (String field : fieldNames) {
        for (Phrase phrase : phrases) {
          if (phrase.is_indexed) {
            // add stats based on this entire phrase as an indexed term
            final Term t = new Term(field, phrase.bytes);
            phrase.phrase_ttf.put(field, reader.totalTermFreq(t));
            phrase.phrase_df.put(field, (long)reader.docFreq(t));
          }

          // even if our phrase is too long to be indexed whole, add stats based on the
          // conjunction of all the individual terms in the phrase
          List<Query> filters = new ArrayList<>(phrase.individualIndexedTerms.size());
          for (Phrase term : phrase.individualIndexedTerms) {
            // trust the SolrIndexSearcher to cache & intersect the individual terms so that this
            // can be efficient regardless of how often terms are re-used multiple times in the input/phrases
            filters.add(new TermQuery(new Term(field, term.bytes)));
          }
          final long count = searcher.getDocSet(filters).size();
          phrase.subTerms_conjunctionCounts.put(field, count);
        }
      }
    }

