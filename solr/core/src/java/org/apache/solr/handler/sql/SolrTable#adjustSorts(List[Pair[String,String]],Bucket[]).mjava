  private StreamComparator[] adjustSorts(List<Pair<String, String>> orders, Bucket[] buckets) throws IOException {
    List<FieldComparator> adjustedSorts = new ArrayList();
    Set<String> bucketFields = new HashSet();
    Set<String> sortFields = new HashSet();

    ComparatorOrder comparatorOrder = ComparatorOrder.ASCENDING;
    for(Pair<String, String> order : orders) {
      sortFields.add(order.getKey());
      adjustedSorts.add(new FieldComparator(order.getKey(), ascDescComp(order.getValue())));
      comparatorOrder = ascDescComp(order.getValue());
    }

    for(Bucket bucket : buckets) {
      bucketFields.add(bucket.toString());
    }

    for(String sf : sortFields) {
      if(!bucketFields.contains(sf)) {
        throw new IOException("All sort fields must be in the field list.");
      }
    }

    //Add sort fields if needed
    if(sortFields.size() < buckets.length) {
      for(Bucket bucket : buckets) {
        String b = bucket.toString();
        if(!sortFields.contains(b)) {
          adjustedSorts.add(new FieldComparator(bucket.toString(), comparatorOrder));
        }
      }
    }

    return adjustedSorts.toArray(new FieldComparator[adjustedSorts.size()]);
  }

