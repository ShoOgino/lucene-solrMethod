  private Api getApi(final V2EndPoint op) {
    final BaseHandlerApiSupport apiHandler = this;
    return new Api(Utils.getSpec(op.getSpecName())) {
      @Override
      public void call(SolrQueryRequest req, SolrQueryResponse rsp) {
        SolrParams params = req.getParams();
        SolrRequest.METHOD method = SolrRequest.METHOD.valueOf(req.getHttpMethod());
        List<ApiCommand> commands = commandsMapping.get(method).get(op);
        try {
          if (method == POST) {
            List<CommandOperation> cmds = req.getCommands(true);
            if (cmds.size() > 1)
              throw new SolrException(BAD_REQUEST, "Only one command is allowed");
            CommandOperation c = cmds.size() == 0 ? null : cmds.get(0);
            ApiCommand command = null;
            String commandName = c == null ? null : c.name;
            for (ApiCommand cmd : commands) {
              if (Objects.equals(cmd.meta().getName(), commandName)) {
                command = cmd;
                break;
              }
            }

            if (command == null) {
              throw new SolrException(BAD_REQUEST, " no such command " + c);
            }
            wrapParams(req, c, command, false);
            command.invoke(req, rsp, apiHandler);

          } else {
            if (commands == null || commands.isEmpty()) {
              rsp.add("error", "No support for : " + method + " at :" + req.getPath());
              return;
            }
            if (commands.size() > 1) {
              for (ApiCommand command : commands) {
                if (command.meta().getName().equals(req.getPath())) {
                  commands = Collections.singletonList(command);
                  break;
                }
              }
            }
            wrapParams(req, new CommandOperation("", Collections.EMPTY_MAP), commands.get(0), true);
            commands.get(0).invoke(req, rsp, apiHandler);
          }

        } catch (SolrException e) {
          throw e;
        } catch (Exception e) {
          throw new SolrException(BAD_REQUEST, e); //TODO BAD_REQUEST is a wild guess; should we flip the default?  fail here to investigate how this happens in tests
        } finally {
          req.setParams(params);
        }

      }
    };

  }

