  /**
   * @param rb the current request/response
   * @param statsParam the raw {@link StatsParams#STATS_FIELD} string
   */
  public StatsField(ResponseBuilder rb, String statsParam) { 
    this.rb = rb;
    this.searcher = rb.req.getSearcher();
    this.originalParam = statsParam;

    SolrParams params = rb.req.getParams();

    try {
      SolrParams localParams = QueryParsing.getLocalParams(statsParam, params);
      if (null == localParams) {
        localParams = new ModifiableSolrParams();
      }
      this.localParams = localParams;
    } catch (SyntaxError e) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Unable to parse " + 
                              StatsParams.STATS_FIELD + ": " + originalParam + " due to: "
                              + e.getMessage(), e);
    }

    // pull fieldName out of localParams, or default to original param value
    this.fieldName = localParams.get(CommonParams.VALUE, statsParam);
    // allow explicit set of the key via localparams, default to fieldName
    this.key = localParams.get(CommonParams.OUTPUT_KEY, fieldName);

    calcDistinct = params.getFieldBool(fieldName, StatsParams.STATS_CALC_DISTINCT, false);

    String[] facets = params.getFieldParams(key, StatsParams.STATS_FACET);
    this.facets = (null == facets) ? new String[0] : facets;

    // figure out if we need a new base DocSet
    String excludeStr = localParams.get(CommonParams.EXCLUDE);
    this.excludeTagList = (null == excludeStr) 
      ? Collections.<String>emptyList()
      : StrUtils.splitSmart(excludeStr,',');

    this.sf = searcher.getSchema().getField(fieldName);
  }

