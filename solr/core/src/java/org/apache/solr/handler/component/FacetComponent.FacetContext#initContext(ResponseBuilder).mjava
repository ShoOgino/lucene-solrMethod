    /**
     * Initializes FacetContext using request parameters and saves it in the request
     * context which can be retrieved via {@link #getFacetContext(SolrQueryRequest)}
     *
     * @param rb the ResponseBuilder object from which the request parameters are read
     *           and to which the FacetContext object is saved.
     */
    public static void initContext(ResponseBuilder rb)  {
      // Parse facet queries and ranges and put them in the request
      // context so that they can be hung under pivots if needed without re-parsing
      List<RangeFacetRequest> facetRanges = null;
      List<FacetBase> facetQueries = null;

      String[] ranges = rb.req.getParams().getParams(FacetParams.FACET_RANGE);
      if (ranges != null) {
        facetRanges = new ArrayList<>(ranges.length);
        for (String range : ranges) {
          RangeFacetRequest rangeFacetRequest = new RangeFacetRequest(rb, range);
          facetRanges.add(rangeFacetRequest);
        }
      }

      String[] queries = rb.req.getParams().getParams(FacetParams.FACET_QUERY);
      if (queries != null)  {
        facetQueries = new ArrayList<>();
        for (String query : queries) {
          facetQueries.add(new FacetBase(rb, FacetParams.FACET_QUERY, query));
        }
      }

      rb.req.getContext().put(FACET_CONTEXT_KEY, new FacetContext(facetRanges, facetQueries));
    }

