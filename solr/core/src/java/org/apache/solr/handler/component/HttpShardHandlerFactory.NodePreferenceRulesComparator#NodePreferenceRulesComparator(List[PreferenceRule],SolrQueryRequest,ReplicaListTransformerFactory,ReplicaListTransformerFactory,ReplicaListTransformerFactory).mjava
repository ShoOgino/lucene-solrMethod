    public NodePreferenceRulesComparator(final List<PreferenceRule> preferenceRules, final SolrQueryRequest request,
        final ReplicaListTransformerFactory defaultRltFactory, final ReplicaListTransformerFactory randomRltFactory,
        final ReplicaListTransformerFactory stableRltFactory) {
      this.request = request;
      final SolrCore core; // explicit check for null core (temporary?, for tests)
      if (request != null && (core = request.getCore()) != null && core.getCoreContainer().getZkController() != null) {
        ZkController zkController = request.getCore().getCoreContainer().getZkController();
        sysPropsCache = zkController.getSysPropsCacher();
        nodeName = zkController.getNodeName();
      } else {
        sysPropsCache = null;
        nodeName = null;
      }
      this.preferenceRules = preferenceRules;
      final int maxIdx = preferenceRules.size() - 1;
      final PreferenceRule lastRule = preferenceRules.get(maxIdx);
      if (!ShardParams.SHARDS_PREFERENCE_REPLICA_BASE.equals(lastRule.name)) {
        this.sortRules = preferenceRules;
        this.baseReplicaListTransformer = defaultRltFactory.getInstance(null, request, randomRltFactory);
      } else {
        if (maxIdx == 0) {
          this.sortRules = null;
        } else {
          this.sortRules = preferenceRules.subList(0, maxIdx);
        }
        String[] parts = lastRule.value.split(":", 2);
        switch (parts[0]) {
          case ShardParams.REPLICA_RANDOM:
            this.baseReplicaListTransformer = randomRltFactory.getInstance(parts.length == 1 ? null : parts[1], request, null);
            break;
          case ShardParams.REPLICA_STABLE:
            this.baseReplicaListTransformer = stableRltFactory.getInstance(parts.length == 1 ? null : parts[1], request, randomRltFactory);
            break;
          default:
            throw new IllegalArgumentException("Invalid base replica order spec");
        }
      }
    }

