  /**
   * Block up to a specified maximum time until we see agreement on the schema
   * version in ZooKeeper across all replicas for a collection.
   */
  public static void waitForAllReplicasState(String collection,
                                             ZkController zkController,
                                             String prop,
                                             int expectedVersion,
                                             int maxWaitSecs) {
    final RTimer timer = new RTimer();
    // get a list of active replica cores to query for the schema zk version (skipping this core of course)
    List<PerReplicaCallable> concurrentTasks = new ArrayList<>();

    for (String coreUrl : getActiveReplicaCoreUrls(zkController, collection)) {
      PerReplicaCallable e = new PerReplicaCallable(coreUrl, prop, expectedVersion, maxWaitSecs);
      concurrentTasks.add(e);
    }
    if (concurrentTasks.isEmpty()) return; // nothing to wait for ...

    log.info(formatString("Waiting up to {0} secs for {1} replicas to set the property {2} to be of version {3} for collection {4}",
        maxWaitSecs, concurrentTasks.size(), prop, expectedVersion, collection));

    // use an executor service to invoke schema zk version requests in parallel with a max wait time
    execInparallel(concurrentTasks, parallelExecutor -> {
      try {
        List<String> failedList = executeAll(expectedVersion, maxWaitSecs, concurrentTasks, parallelExecutor);
        // if any tasks haven't completed within the specified timeout, it's an error
        if (failedList != null)
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
              formatString("{0} out of {1} the property {2} to be of version {3} within {4} seconds! Failed cores: {5}",
                  failedList.size(), concurrentTasks.size() + 1, prop, expectedVersion, maxWaitSecs, failedList));
      } catch (InterruptedException e) {
        log.warn(formatString(
            "Core  was interrupted . trying to set the property {0} to version {1} to propagate to {2} replicas for collection {3}",
            prop, expectedVersion, concurrentTasks.size(), collection));
        Thread.currentThread().interrupt();
      }
    });

    log.info("Took {}ms to set the property {} to be of version {} for collection {}",
        timer.getTime(), prop, expectedVersion, collection);
  }

