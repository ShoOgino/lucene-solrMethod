    public NamedList<Object> buildResponse() {
      NamedList<Object> response = new SimpleOrderedMap<>();

      // determine if we are going index or count sort
      boolean sort = !TermsParams.TERMS_SORT_INDEX.equals(params.get(TermsParams.TERMS_SORT,
                                                                     TermsParams.TERMS_SORT_COUNT));
      if(params.get(TermsParams.TERMS_LIST) != null) {
        //Always use lexical sort when TERM_LIST is provided
        sort = false;
      }

      long freqmin = params.getLong(TermsParams.TERMS_MINCOUNT, 1);

      long freqmax = params.getLong(TermsParams.TERMS_MAXCOUNT, UNLIMITED_MAX_COUNT);
      if (freqmax < 0) {
        freqmax = Long.MAX_VALUE;
      }

      long limit = params.getLong(TermsParams.TERMS_LIMIT, 10);
      if (limit < 0) {
        limit = Long.MAX_VALUE;
      }

      // loop through each field we want terms from
      for (Map.Entry<String, HashMap<String, TermsResponse.Term>> entry : fieldmap.entrySet()) {
        NamedList<Object> fieldTerms = new NamedList<>();
        TermsResponse.Term[] data = null;
        if (sort) {
          data = getCountSorted(entry.getValue());
        } else {
          data = getLexSorted(entry.getValue());
        }

        boolean includeTotalTermFreq = params.getBool(TermsParams.TERMS_TTF, false);
        // loop through each term until we hit limit
        int cnt = 0;
        for (TermsResponse.Term tc : data) {
          if (tc.getFrequency() >= freqmin && tc.getFrequency() <= freqmax) {
            addTermToNamedList(fieldTerms, tc.getTerm(), tc.getFrequency(), tc.getTotalTermFreq(), includeTotalTermFreq);
            cnt++;
          }

          if (cnt >= limit) {
            break;
          }
        }

        response.add(entry.getKey(), fieldTerms);
      }

      return response;
    }

