    @Override
    public void run() {
      try {
        String leaderUrl = getLeaderUrl();
        if (leaderUrl == null) { // we might not have a leader yet, stop and try again later
          return;
        }

        HttpSolrClient server = new HttpSolrClient.Builder(leaderUrl)
            .withConnectionTimeout(15000)
            .withSocketTimeout(60000)
            .build();

        ModifiableSolrParams params = new ModifiableSolrParams();
        params.set(CommonParams.ACTION, CdcrParams.CdcrAction.LASTPROCESSEDVERSION.toString());

        @SuppressWarnings({"rawtypes"})
        SolrRequest request = new QueryRequest(params);
        request.setPath(path);

        long lastVersion;
        try {
          @SuppressWarnings({"rawtypes"})
          NamedList response = server.request(request);
          lastVersion = (Long) response.get(CdcrParams.LAST_PROCESSED_VERSION);
          if (log.isDebugEnabled()) {
            log.debug("My leader {} says its last processed _version_ number is: {}. I am {}", leaderUrl, lastVersion,
                core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());
          }
        } catch (IOException | SolrServerException e) {
          log.warn("Couldn't get last processed version from leader {}: ", leaderUrl, e);
          return;
        } finally {
          try {
            server.close();
          } catch (IOException ioe) {
            log.warn("Caught exception trying to close client to {}: ", leaderUrl, ioe);
          }
        }

        // if we received -1, it means that the log reader on the leader has not yet started to read log entries
        // do nothing
        if (lastVersion == -1) {
          return;
        }

        try {
          CdcrUpdateLog ulog = (CdcrUpdateLog) core.getUpdateHandler().getUpdateLog();
          if (ulog.isBuffering()) {
            log.debug("Advancing replica buffering tlog reader to {} @ {}:{}", lastVersion, collection, shardId);
            ulog.getBufferToggle().seek(lastVersion);
          }
        } catch (InterruptedException e) {
          Thread.currentThread().interrupt();
          log.warn("Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): ", lastVersion, e);
        } catch (IOException e) {
          log.warn("Couldn't advance replica buffering tlog reader to {} (to remove old tlogs): ", lastVersion, e);
        }
      } catch (Throwable e) {
        log.warn("Caught unexpected exception", e);
        throw e;
      }
    }

