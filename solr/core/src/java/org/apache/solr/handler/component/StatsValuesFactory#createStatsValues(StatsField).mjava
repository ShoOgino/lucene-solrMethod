  /**
   * Creates an instance of StatsValues which supports values from the specified 
   * {@link StatsField}
   *
   * @param statsField
   *          {@link StatsField} whose statistics will be created by the
   *          resulting {@link StatsValues}
   * @return Instance of {@link StatsValues} that will create statistics from
   *         values from the specified {@link StatsField}
   */
  public static StatsValues createStatsValues(StatsField statsField) {
    
    final SchemaField sf = statsField.getSchemaField();
    
    if (null == sf) {
      // function stats
      return new NumericStatsValues(statsField);
    }
    
    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.
    
    if (TrieDateField.class.isInstance(fieldType)) {
      return new DateStatsValues(statsField);
    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {
      
      NumericStatsValues statsValue = new NumericStatsValues(statsField);
      if (sf.multiValued()) {
        return new SortedNumericStatsValues(statsValue, statsField);
      }
      return statsValue;
    } else if (StrField.class.isInstance(fieldType)) {
      return new StringStatsValues(statsField);
    } else if (sf.getType().getClass().equals(EnumField.class)) {
      return new EnumStatsValues(statsField);
    } else {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
          "Field type " + fieldType + " is not currently supported");
    }
  }

