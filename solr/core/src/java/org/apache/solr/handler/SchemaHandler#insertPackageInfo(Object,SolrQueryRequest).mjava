  /**
   * If a plugin is loaded from a package, the version of the package being used should be added
   * to the response
   */
  @SuppressWarnings("rawtypes")
  private void insertPackageInfo(Object o, SolrQueryRequest req) {
    if (!req.getParams().getBool("meta", false)) return;
    if (o instanceof List) {
      List l = (List) o;
      for (Object o1 : l) {
        if (o1 instanceof NamedList || o1 instanceof List) insertPackageInfo(o1, req);
      }

    } else if (o instanceof NamedList) {
      NamedList nl = (NamedList) o;
      nl.forEach((BiConsumer) (n, v) -> {
        if (v instanceof NamedList || v instanceof List) insertPackageInfo(v, req);
      });
      Object v = nl.get("class");
      if (v instanceof String) {
        String klas = (String) v;
        PluginInfo.ClassName parsedClassName = new PluginInfo.ClassName(klas);
        if (parsedClassName.pkg != null) {
          SolrClassLoader solrClassLoader = req.getCore().getLatestSchema().getSolrClassLoader();
          MapWriter mw = solrClassLoader instanceof PackageListeningClassLoader ?
              ((PackageListeningClassLoader) solrClassLoader).getPackageVersion(parsedClassName) : null;
          if (mw != null) nl.add("_packageinfo_", mw);
        }
      }

    }

  }

