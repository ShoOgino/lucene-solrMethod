  /** 
   * Checks the {@link #lowestCountContributedbyShard} for each shard, combined with the 
   * counts we already know, to see if this value is a viable candidate -- 
   * <b>Does not make sense when using {@link FacetParams#FACET_SORT_INDEX}</b>
   *
   * @see #processDefiniteCandidateElement
   */
  private void processPossibleCandidateElement(PivotFacet pf, PivotFacetValue value, 
                                               final int refinementThreshold) {
    
    assert FacetParams.FACET_SORT_COUNT.equals(facetFieldSort)
      : "Method only makes sense when sorting by count";

    int maxPossibleCountAfterRefinement = value.getCount();
    
    for (int shard = pf.knownShards.nextSetBit(0); 
         0 <= shard;
         shard = pf.knownShards.nextSetBit(shard+1)) {
      if ( ! value.shardHasContributed(shard) ) {
        maxPossibleCountAfterRefinement += lowestCountContributedbyShard(shard);
      }
    }
    
    if (refinementThreshold <= maxPossibleCountAfterRefinement) {
      processDefiniteCandidateElement(pf, value);
    }
  }

