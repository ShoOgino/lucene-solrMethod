  /**
   * A recursive method to construct a new <code>PivotFacetValue</code> object from 
   * the contents of the {@link NamedList} provided by the specified shard, relative 
   * to the specified field.  
   *
   * If the <code>NamedList</code> contains data for a child {@link PivotFacetField} 
   * that will be recursively built as well.
   *
   * @see PivotFacetField#createFromListOfNamedLists
   * @param shardNumber the id of the shard that provided this data
   * @param rb The response builder of the current request
   * @param parentField the parent field in the current pivot associated with this value
   * @param pivotData the data from the specified shard for this pivot value
   */
  @SuppressWarnings("unchecked")
  public static PivotFacetValue createFromNamedList(int shardNumber, ResponseBuilder rb, PivotFacetField parentField, NamedList<Object> pivotData) {
    
    Comparable pivotVal = null;
    int pivotCount = 0;
    List<NamedList<Object>> childPivotData = null;
    NamedList<NamedList<NamedList<?>>> statsValues = null;
    
    for (int i = 0; i < pivotData.size(); i++) {
      String key = pivotData.getName(i);
      Object value = pivotData.getVal(i);
      PivotListEntry entry = PivotListEntry.get(key);
      
      switch (entry) {

      case VALUE: 
        pivotVal = (Comparable)value;
        break;
      case FIELD:
        assert parentField.field.equals(value) 
          : "Parent Field mismatch: " + parentField.field + "!=" + value;
        break;
      case COUNT:
        pivotCount = (Integer)value;
        break;
      case PIVOT:
        childPivotData = (List<NamedList<Object>>)value;
        break;
      case STATS:
        statsValues = (NamedList<NamedList<NamedList<?>>>) value;
        break;
      default:
        throw new RuntimeException("PivotListEntry contains unaccounted for item: " + entry);
      }
    }    

    PivotFacetValue newPivotFacet = new PivotFacetValue(parentField, pivotVal);
    newPivotFacet.count = pivotCount;
    newPivotFacet.sourceShards.set(shardNumber);
    if(statsValues != null) {
      newPivotFacet.statsValues = PivotFacetHelper.mergeStats(null, statsValues, rb._statsInfo);
    }
    
    newPivotFacet.childPivot = PivotFacetField.createFromListOfNamedLists(shardNumber, rb, newPivotFacet, childPivotData);
    
    return newPivotFacet;
  }

