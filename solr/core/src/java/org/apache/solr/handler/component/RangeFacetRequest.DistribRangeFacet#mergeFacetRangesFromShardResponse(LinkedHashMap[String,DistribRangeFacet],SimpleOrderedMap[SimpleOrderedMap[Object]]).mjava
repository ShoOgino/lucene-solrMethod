    /**
     * Helper method to merge range facet values from a shard's response to already accumulated
     * values for each range.
     *
     * @param rangeCounts a {@link LinkedHashMap} containing the accumulated values for each range
     *                    keyed by the 'key' of the facet.range. Must not be null.
     * @param shardRanges the facet_ranges response from a shard. Must not be null.
     */
    public static void mergeFacetRangesFromShardResponse(LinkedHashMap<String, DistribRangeFacet> rangeCounts,
                                                         SimpleOrderedMap<SimpleOrderedMap<Object>> shardRanges) {
      assert shardRanges != null;
      assert rangeCounts != null;
      for (Map.Entry<String, SimpleOrderedMap<Object>> entry : shardRanges) {
        String rangeKey = entry.getKey();

        RangeFacetRequest.DistribRangeFacet existing = rangeCounts.get(rangeKey);
        if (existing == null) {
          rangeCounts.put(rangeKey, new RangeFacetRequest.DistribRangeFacet(entry.getValue()));
        } else {
          existing.mergeContributionFromShard(entry.getValue());
        }
      }
    }

