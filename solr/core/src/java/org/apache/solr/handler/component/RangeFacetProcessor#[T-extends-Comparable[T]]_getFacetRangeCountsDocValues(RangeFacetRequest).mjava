  private <T extends Comparable<T>> NamedList<Object> getFacetRangeCountsDocValues(RangeFacetRequest rfr)
      throws IOException, SyntaxError {

    SchemaField sf = rfr.getSchemaField();
    final NamedList<Object> res = new SimpleOrderedMap<>();
    final NamedList<Integer> counts = new NamedList<>();
    res.add("counts", counts);

    ArrayList<IntervalFacets.FacetInterval> intervals = new ArrayList<>();

    // explicitly return the gap.  compute this early so we are more
    // likely to catch parse errors before attempting math
    res.add("gap", rfr.getGapObj());

    final int minCount = rfr.getMinCount();

    boolean includeBefore = false;
    boolean includeBetween = false;
    boolean includeAfter = false;

    Set<FacetRangeOther> others = rfr.getOthers();
    // Intervals must be in order (see IntervalFacets.getSortedIntervals), if "BEFORE" or
    // "BETWEEN" are set, they must be added first
    // no matter what other values are listed, we don't do
    // anything if "none" is specified.
    if (!others.contains(FacetRangeOther.NONE)) {
      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.BEFORE)) {
        // We'll add an interval later in this position
        intervals.add(null);
        includeBefore = true;
      }

      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.BETWEEN)) {
        // We'll add an interval later in this position
        intervals.add(null);
        includeBetween = true;
      }

      if (others.contains(FacetRangeOther.ALL) || others.contains(FacetRangeOther.AFTER)) {
        includeAfter = true;
      }
    }

    IntervalFacets.FacetInterval after = null;

    for (RangeFacetRequest.FacetRange range : rfr.getFacetRanges()) {
      if (range.other != null) {
        switch (range.other) {
          case BEFORE:
            assert range.lower == null;
            intervals.set(0, new IntervalFacets.FacetInterval(sf, "*", range.upper, range.includeLower,
                range.includeUpper, FacetRangeOther.BEFORE.toString()));
            break;
          case AFTER:
            assert range.upper == null;
            after = new IntervalFacets.FacetInterval(sf, range.lower, "*",
                range.includeLower, range.includeUpper, FacetRangeOther.AFTER.toString());
            break;
          case BETWEEN:
            intervals.set(includeBefore ? 1 : 0, new IntervalFacets.FacetInterval(sf, range.lower, range.upper,
                range.includeLower, range.includeUpper, FacetRangeOther.BETWEEN.toString()));
            break;
          case ALL:
          case NONE:
            break;
        }
      } else {
        intervals.add(new IntervalFacets.FacetInterval(sf, range.lower, range.upper, range.includeLower, range.includeUpper, range.lower));
      }
    }

    if (includeAfter) {
      assert after != null;
      intervals.add(after);
    }

    IntervalFacets.FacetInterval[] intervalsArray = intervals.toArray(new IntervalFacets.FacetInterval[intervals.size()]);
    // don't use the ArrayList anymore
    intervals = null;

    new IntervalFacets(sf, searcher, computeDocSet(docsOrig, rfr.getExcludeTags()), intervalsArray);

    int intervalIndex = 0;
    int lastIntervalIndex = intervalsArray.length - 1;
    // if the user requested "BEFORE", it will be the first of the intervals. Needs to be added to the
    // response named list instead of with the counts
    if (includeBefore) {
      res.add(intervalsArray[intervalIndex].getKey(), intervalsArray[intervalIndex].getCount());
      intervalIndex++;
    }

    // if the user requested "BETWEEN", it will be the first or second of the intervals (depending on if
    // "BEFORE" was also requested). Needs to be added to the response named list instead of with the counts
    if (includeBetween) {
      res.add(intervalsArray[intervalIndex].getKey(), intervalsArray[intervalIndex].getCount());
      intervalIndex++;
    }

    // if the user requested "AFTER", it will be the last of the intervals.
    // Needs to be added to the response named list instead of with the counts
    if (includeAfter) {
      res.add(intervalsArray[lastIntervalIndex].getKey(), intervalsArray[lastIntervalIndex].getCount());
      lastIntervalIndex--;
    }
    // now add all other intervals to the counts NL
    while (intervalIndex <= lastIntervalIndex) {
      IntervalFacets.FacetInterval interval = intervalsArray[intervalIndex];
      if (interval.getCount() >= minCount) {
        counts.add(interval.getKey(), interval.getCount());
      }
      intervalIndex++;
    }

    res.add("start", rfr.getStartObj());
    res.add("end", rfr.getEndObj());
    return res;
  }

