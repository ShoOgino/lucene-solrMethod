  /** Executes a Solr query on the underlying table.
   *
   * @param properties Connections properties
   * @param fields List of fields to project
   * @param query A string for the query
   * @return Enumerator of results
   */
  private Enumerable<Object> query(final Properties properties,
                                   @SuppressWarnings("rawtypes") final List<Map.Entry<String, Class>> fields,
                                   final String query,
                                   final List<Pair<String, String>> orders,
                                   final List<String> buckets,
                                   final List<Pair<String, String>> metricPairs,
                                   final String limit,
                                   final String negativeQuery,
                                   final String havingPredicate) {
    // SolrParams should be a ModifiableParams instead of a map
    boolean mapReduce = "map_reduce".equals(properties.getProperty("aggregationMode"));
    boolean negative = Boolean.parseBoolean(negativeQuery);

    String q = null;

    if (query == null) {
      q = DEFAULT_QUERY;
    } else {
      if(negative) {
        q = DEFAULT_QUERY + " AND " + query;
      } else {
        q = query;
      }
    }

    TupleStream tupleStream;
    String zk = properties.getProperty("zk");
    try {
      if (metricPairs.isEmpty() && buckets.isEmpty()) {
        tupleStream = handleSelect(zk, collection, q, fields, orders, limit);
      } else {
        if(buckets.isEmpty()) {
          tupleStream = handleStats(zk, collection, q, metricPairs, fields);
        } else {
          if(mapReduce) {
            tupleStream = handleGroupByMapReduce(zk,
                                                 collection,
                                                 properties,
                                                 fields,
                                                 q,
                                                 orders,
                                                 buckets,
                                                 metricPairs,
                                                 limit,
                                                 havingPredicate);
          } else {
            tupleStream = handleGroupByFacet(zk,
                                             collection,
                                             fields,
                                             q,
                                             orders,
                                             buckets,
                                             metricPairs,
                                             limit,
                                             havingPredicate);
          }
        }
      }
    } catch (IOException e) {
      throw new RuntimeException(e);
    }

    StreamContext streamContext = new StreamContext();
    streamContext.setSolrClientCache(schema.getSolrClientCache());
    tupleStream.setStreamContext(streamContext);

    final TupleStream finalStream = tupleStream;

    return new AbstractEnumerable<Object>() {
      // Use original fields list to make sure only the fields specified are enumerated
      public Enumerator<Object> enumerator() {
        return new SolrEnumerator(finalStream, fields);
      }
    };
  }

