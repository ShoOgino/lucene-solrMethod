  private TupleStream handleSelect(String zk,
                                   String collection,
                                   String query,
                                   List<Map.Entry<String, Class>> fields,
                                   List<Pair<String, String>> orders,
                                   String limit) throws IOException {

    ModifiableSolrParams params = new ModifiableSolrParams();
    params.add(CommonParams.Q, query);

    //Validate the fields
    for(Map.Entry<String, Class> entry : fields) {
      String fname = entry.getKey();
      if(limit == null && "score".equals(fname)) {
        throw new IOException("score is not a valid field for unlimited queries.");
      }

      if(fname.contains("*")) {
        throw new IOException("* is not supported for column selection.");
      }
    }

    String fl = getFields(fields);

    if(orders.size() > 0) {
      params.add(CommonParams.SORT, getSort(orders));
    } else {
      if(limit == null) {
        params.add(CommonParams.SORT, "_version_ desc");
        fl = fl+",_version_";
      } else {
        params.add(CommonParams.SORT, "score desc");
        if(fl.indexOf("score") == -1) {
          fl = fl + ",score";
        }
      }
    }

    params.add(CommonParams.FL, fl);

    if (limit != null) {
      params.add(CommonParams.ROWS, limit);
      return new LimitStream(new CloudSolrStream(zk, collection, params), Integer.parseInt(limit));
    } else {
      params.add(CommonParams.QT, "/export");
      return new CloudSolrStream(zk, collection, params);
    }
  }

