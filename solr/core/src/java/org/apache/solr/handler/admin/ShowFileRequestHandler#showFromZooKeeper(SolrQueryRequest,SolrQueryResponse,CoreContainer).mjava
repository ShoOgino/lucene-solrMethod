  private void showFromZooKeeper(SolrQueryRequest req, SolrQueryResponse rsp,
      CoreContainer coreContainer) throws KeeperException,
      InterruptedException, UnsupportedEncodingException {
    String adminFile = null;
    SolrCore core = req.getCore();
    SolrZkClient zkClient = coreContainer.getZkController().getZkClient();
    final ZkSolrResourceLoader loader = (ZkSolrResourceLoader) core
        .getResourceLoader();
    String confPath = loader.getCollectionZkPath();
    
    String fname = req.getParams().get("file", null);
    if (fname == null) {
      adminFile = confPath;
    } else {
      fname = fname.replace('\\', '/'); // normalize slashes
      if (hiddenFiles.contains(fname.toUpperCase(Locale.ENGLISH))) {
        throw new SolrException(ErrorCode.FORBIDDEN, "Can not access: " + fname);
      }
      if (fname.indexOf("..") >= 0) {
        throw new SolrException(ErrorCode.FORBIDDEN, "Invalid path: " + fname);
      }
      adminFile = confPath + "/" + fname;
    }
    
    // Make sure the file exists, is readable and is not a hidden file
    if (!zkClient.exists(adminFile, true)) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Can not find: "
          + adminFile);
    }
    
    // Show a directory listing
    List<String> children = zkClient.getChildren(adminFile, null, true);
    if (children.size() > 0) {
      
      NamedList<SimpleOrderedMap<Object>> files = new SimpleOrderedMap<SimpleOrderedMap<Object>>();
      for (String f : children) {
        if (hiddenFiles.contains(f.toUpperCase(Locale.ENGLISH))) {
          continue; // don't show 'hidden' files
        }
        if (f.startsWith(".")) {
          continue; // skip hidden system files...
        }
        
        SimpleOrderedMap<Object> fileInfo = new SimpleOrderedMap<Object>();
        files.add(f, fileInfo);
        List<String> fchildren = zkClient.getChildren(adminFile, null, true);
        if (fchildren.size() > 0) {
          fileInfo.add("directory", true);
        } else {
          // TODO? content type
          fileInfo.add("size", f.length());
        }
        // TODO: ?
        // fileInfo.add( "modified", new Date( f.lastModified() ) );
      }
      rsp.add("files", files);
    } else {
      // Include the file contents
      // The file logic depends on RawResponseWriter, so force its use.
      ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());
      params.set(CommonParams.WT, "raw");
      req.setParams(params);
      
      ContentStreamBase content = new ContentStreamBase.StringStream(
          new String(zkClient.getData(adminFile, null, null, true), "UTF-8"));
      content.setContentType(req.getParams().get(USE_CONTENT_TYPE));
      
      rsp.add(RawResponseWriter.CONTENT, content);
    }
    rsp.setHttpCaching(false);
  }

