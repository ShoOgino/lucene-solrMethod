  private static Collection<ApiCommand> createCollMapping() {
    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);

    for (Meta meta : Meta.values()) {
      for (CollectionOperation op : CollectionOperation.values()) {
        if (op.action == meta.action) {
          result.put(meta, new ApiCommand() {
            @Override
            public CommandMeta meta() {
              return meta;
            }

            @Override
            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {
              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);
            }
          });
        }
      }
    }
    //The following APIs have only V2 implementations
    addApi(result, Meta.GET_NODES, params -> params.rsp.add("nodes", ((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes()));
    addApi(result, Meta.SET_CLUSTER_PROPERTY_OBJ, params -> {
      List<CommandOperation> commands = params.req.getCommands(true);
      if (commands == null || commands.isEmpty()) throw new RuntimeException("Empty commands");
      ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());

      try {
        clusterProperties.setClusterProperties(commands.get(0).getDataMap());
      } catch (Exception e) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Error in API", e);
      }
    });

    for (Meta meta : Meta.values()) {
      if (result.get(meta) == null) {
        log.error("ERROR_INIT. No corresponding API implementation for : {}", meta.commandName);
      }
    }

    return result.values();
  }

