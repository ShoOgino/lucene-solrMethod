  private static Collection<ApiCommand> createCollMapping() {
    Map<Meta, ApiCommand> result = new EnumMap<>(Meta.class);

    for (Meta meta : Meta.values()) {
      for (CollectionOperation op : CollectionOperation.values()) {
        if (op.action == meta.action) {
          result.put(meta, new ApiCommand() {
            @Override
            public CommandMeta meta() {
              return meta;
            }

            @Override
            public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {
              ((CollectionHandlerApi) apiHandler).handler.invokeAction(req, rsp, ((CollectionHandlerApi) apiHandler).handler.coreContainer, op.action, op);
            }
          });
        }
      }
    }
    result.put(Meta.GET_NODES, new ApiCommand() {
      @Override
      public CommandMeta meta() {
        return Meta.GET_NODES;
      }

      @Override
      public void invoke(SolrQueryRequest req, SolrQueryResponse rsp, BaseHandlerApiSupport apiHandler) throws Exception {
        rsp.add("nodes", ((CollectionHandlerApi) apiHandler).handler.coreContainer.getZkController().getClusterState().getLiveNodes());
      }
    });
    for (Meta meta : Meta.values()) {
      if(result.get(meta) == null){
        throw new RuntimeException("No implementation for "+ meta.name());
      }
    }

    return result.values();
  }

