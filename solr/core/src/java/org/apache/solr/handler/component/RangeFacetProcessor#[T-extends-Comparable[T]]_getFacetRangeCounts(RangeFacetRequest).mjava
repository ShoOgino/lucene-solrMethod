  private <T extends Comparable<T>> NamedList getFacetRangeCounts(final RangeFacetRequest rfr)
      throws IOException, SyntaxError {

    final NamedList<Object> res = new SimpleOrderedMap<>();
    final NamedList<Integer> counts = new NamedList<>();
    res.add("counts", counts);

    // explicitly return the gap.
    res.add("gap", rfr.getGapObj());

    DocSet docSet = computeDocSet(docsOrig, rfr.getExcludeTags());

    for (RangeFacetRequest.FacetRange range : rfr.getFacetRanges()) {
      if (range.other != null) {
        // these are added to top-level NamedList
        // and we always include them regardless of mincount
        res.add(range.other.toString(), rangeCount(docSet, rfr, range));
      } else {
        final int count = rangeCount(docSet, rfr, range);
        if (count >= rfr.getMinCount()) {
          counts.add(range.lower, count);
        }
      }
    }

    // explicitly return the start and end so all the counts
    // (including before/after/between) are meaningful - even if mincount
    // has removed the neighboring ranges
    res.add("start", rfr.getStartObj());
    res.add("end", rfr.getEndObj());

    return res;
  }

