  /**
   * A distributed request is made via {@link LBHttpSolrClient} to the first live server in the URL list.
   * This means it is just as likely to choose current host as any of the other hosts.
   * This function makes sure that the cores of current host are always put first in the URL list.
   * If all nodes prefer local-cores then a bad/heavily-loaded node will receive less requests from healthy nodes.
   * This will help prevent a distributed deadlock or timeouts in all the healthy nodes due to one bad node.
   */
  private void preferCurrentHostForDistributedReq(final ShardRequest sreq, final List<String> urls) {
    if (sreq == null || sreq.rb == null || sreq.rb.req == null || urls == null || urls.size() <= 1)
      return;

    SolrQueryRequest req = sreq.rb.req;

    // determine if we should apply the local preference
    if (!req.getOriginalParams().getBool(CommonParams.PREFER_LOCAL_SHARDS, false))
      return;

    // Get this node's base URL from ZK
    SolrCore core = req.getCore();
    ZkController zkController = (core != null) ? core.getCoreDescriptor().getCoreContainer().getZkController() : null;
    String currentHostAddress = (zkController != null) ? zkController.getBaseUrl() : null;
    if (currentHostAddress == null) {
      log.debug("Couldn't determine current host address to prefer local shards " +
                "because either core is null? {} or there is no ZkController? {}",
                Boolean.valueOf(core == null), Boolean.valueOf(zkController == null));
      return;
    }

    if (log.isDebugEnabled())
      log.debug("Trying to prefer local shard on {} among the urls: {}",
          currentHostAddress, Arrays.toString(urls.toArray()));

    ListIterator<String> itr = urls.listIterator();
    while (itr.hasNext()) {
      String url = itr.next();
      if (url.startsWith(currentHostAddress)) {
        // move current URL to the fore-front
        itr.remove();
        urls.add(0, url);

        if (log.isDebugEnabled())
          log.debug("Applied local shard preference for urls: {}",
              Arrays.toString(urls.toArray()));

        break;
      }
    }
  }

