  protected boolean handleSplitAction(SolrQueryRequest adminReq, SolrQueryResponse rsp) throws IOException {
    SolrParams params = adminReq.getParams();
     // partitions=N    (split into N partitions, leaving it up to solr what the ranges are and where to put them)
    // path - multiValued param, or comma separated param?  Only creates indexes, not cores

    List<DocRouter.Range> ranges = null;
    // boolean closeDirectories = true;
    // DirectoryFactory dirFactory = null;

    String[] pathsArr = params.getParams("path");
    String rangesStr = params.get("ranges");    // ranges=a-b,c-d,e-f

    String cname = params.get(CoreAdminParams.CORE, "");
    SolrCore core = coreContainer.getCore(cname);
    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);
    List<SolrCore> newCores = null;

    try {
      // TODO: allow use of rangesStr in the future
      List<String> paths = null;
      int partitions = pathsArr != null ? pathsArr.length : params.getInt("partitions", 2);


      // TODO: if we don't know the real range of the current core, we should just
      //  split on every other doc rather than hash.

      // TODO (cloud): get from the current core
      DocRouter.Range currentRange = new DocRouter.Range(Integer.MIN_VALUE, Integer.MAX_VALUE);

      DocRouter hp = DocRouter.DEFAULT;  // TODO: get actual doc router for collection if available
      ranges = hp.partitionRange(partitions, currentRange);

      if (pathsArr == null) {
        newCores = new ArrayList<SolrCore>(partitions);
        for (int i=0; i<partitions; i++) {
          SolrCore newCore = createCore(core, i, ranges.get(i));
          newCores.add(newCore);
        }

        // TODO (cloud): cores should be registered, should be in recovery / buffering-updates mode, and the shard
        // leader should be forwarding updates to the new shards *before* we split the current shard
        // into the new shards.
      } else {
        paths = Arrays.asList(pathsArr);
      }


      SplitIndexCommand cmd = new SplitIndexCommand(req, paths, newCores, ranges);
      core.getUpdateHandler().split(cmd);

      // After the split has completed, someone (here?) should start the process of replaying the buffered updates.

    } catch (Exception e) {
      log.error("ERROR executing split:", e);
      throw new RuntimeException(e);

    } finally {
      if (req != null) req.close();
      if (core != null) core.close();
      if (newCores != null) {
        for (SolrCore newCore : newCores) {
          newCore.close();
        }
      }
    }

    return false;
  }

