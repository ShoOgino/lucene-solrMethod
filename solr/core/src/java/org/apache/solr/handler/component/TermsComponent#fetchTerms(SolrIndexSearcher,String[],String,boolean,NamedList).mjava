  private void fetchTerms(SolrIndexSearcher indexSearcher,
                          String[] fields,
                          String termList,
                          boolean includeTotalTermFreq,
                          NamedList result) throws IOException {

    String field = fields[0];
    FieldType fieldType = indexSearcher.getSchema().getField(field).getType();
    String[] splitTerms = termList.split(",");

    for(int i=0; i<splitTerms.length; i++) {
      splitTerms[i] = splitTerms[i].trim();
    }

    Term[] terms = new Term[splitTerms.length];
    for(int i=0; i<splitTerms.length; i++) {
      terms[i] = new Term(field, fieldType.readableToIndexed(splitTerms[i]));
    }

    Arrays.sort(terms);

    IndexReaderContext topReaderContext = indexSearcher.getTopReaderContext();
    TermContext[] termContexts = new TermContext[terms.length];
    collectTermContext(topReaderContext, termContexts, terms);

    NamedList termsMap = new SimpleOrderedMap();
    for (int i = 0; i < terms.length; i++) {
      if (termContexts[i] != null) {
        String outTerm = fieldType.indexedToReadable(terms[i].bytes().utf8ToString());
        int docFreq = termContexts[i].docFreq();
        if (!includeTotalTermFreq) {
          termsMap.add(outTerm, docFreq);
        } else {
          long totalTermFreq = termContexts[i].totalTermFreq();
          NamedList<Long> termStats = new SimpleOrderedMap<>();
          termStats.add("docFreq", (long) docFreq);
          termStats.add("totalTermFreq", totalTermFreq);
          termsMap.add(outTerm, termStats);
        }
      }
    }

    result.add(field, termsMap);
  }

