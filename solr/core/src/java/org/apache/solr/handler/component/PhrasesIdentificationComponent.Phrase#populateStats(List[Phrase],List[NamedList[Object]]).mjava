    /**
     * Populates the phrases with (merged) stats from a remote shard
     * @see #formatShardResponse
     */
    public static void populateStats(final List<Phrase> phrases, final List<NamedList<Object>> shardData) {
      final int numPhrases = phrases.size();
      if (shardData.size() != numPhrases) {
        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
                                "num phrases in shard data not consistent: " +
                                numPhrases + " vs " + shardData.size());
      }
      for (int i = 0; i < phrases.size(); i++) {
        // rather then being paranoid about the expected structure, we'll just let the low level
        // code throw an NPE / CCE / AIOOBE / etc. and wrap & rethrow later...
        try {
          final Phrase p = phrases.get(i);
          final NamedList<Object> data = shardData.get(i);
          // sanity check the correct phrase
          if (! p.getChecksum().equals(data.get("checksum"))) {
            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
                                    "phrase #" + i + " in shard data had invalid checksum");
          }
          if (p.is_indexed) {
            for (Map.Entry<String,Long> ttf : (NamedList<Long>) data.get("ttf")) {
              p.phrase_ttf.merge(ttf.getKey(), ttf.getValue(), Long::sum);
            }
            for (Map.Entry<String,Long> df : (NamedList<Long>) data.get("df")) {
              p.phrase_df.merge(df.getKey(), df.getValue(), Long::sum);
            }
          }
          for (Map.Entry<String,Long> conj_dc : (NamedList<Long>) data.get("conj_dc")) {
            p.subTerms_conjunctionCounts.merge(conj_dc.getKey(), conj_dc.getValue(), Long::sum);
          }
        } catch (RuntimeException e) {
          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
                                  "shard data for phrase#" + i + " not consistent", e);
        }
      }
    }

