  private static void fetchTerms(SolrIndexSearcher indexSearcher, String[] fields, String termList,
      boolean includeTotalTermFreq, NamedList<Object> result) throws IOException {
    String[] splitTerms = termList.split(",");
    for (int i = 0; i < splitTerms.length; i++) {
      splitTerms[i] = splitTerms[i].trim();
    }
    // Sort the terms once
    Arrays.sort(splitTerms);

    IndexReaderContext topReaderContext = indexSearcher.getTopReaderContext();
    for (String field : fields) {
      FieldType fieldType = indexSearcher.getSchema().getField(field).getType();

      // Since splitTerms is already sorted, this array will also be sorted
      Term[] terms = new Term[splitTerms.length];
      for (int i = 0; i < splitTerms.length; i++) {
        terms[i] = new Term(field, fieldType.readableToIndexed(splitTerms[i]));
      }

      TermContext[] termContexts = new TermContext[terms.length];
      collectTermContext(topReaderContext, termContexts, terms);

      NamedList<Object> termsMap = new SimpleOrderedMap<>();
      for (int i = 0; i < terms.length; i++) {
        if (termContexts[i] != null) {
          String outTerm = fieldType.indexedToReadable(terms[i].bytes().utf8ToString());
          int docFreq = termContexts[i].docFreq();
          if (!includeTotalTermFreq) {
            termsMap.add(outTerm, docFreq);
          } else {
            long totalTermFreq = termContexts[i].totalTermFreq();
            NamedList<Long> termStats = new SimpleOrderedMap<>();
            termStats.add("df", (long) docFreq);
            termStats.add("ttf", totalTermFreq);
            termsMap.add(outTerm, termStats);
          }
        }
      }

      result.add(field, termsMap);
    }
  }

