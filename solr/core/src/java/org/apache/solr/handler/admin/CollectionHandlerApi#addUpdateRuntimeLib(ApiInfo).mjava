  private static boolean addUpdateRuntimeLib(ApiInfo params) throws Exception {
    if (!RuntimeLib.isEnabled()) {
      params.op.addError("node not started with enable.runtime.lib=true");
      return false;
    }

    CollectionHandlerApi handler = (CollectionHandlerApi) params.apiHandler;
    RuntimeLib lib = new RuntimeLib(handler.handler.coreContainer);
    CommandOperation op = params.op;
    String name = op.getStr("name");
    ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());
    Map<String, Object> props = clusterProperties.getClusterProperties();
    List<String> pathToLib = asList(RuntimeLib.TYPE, name);
    Map existing = (Map) Utils.getObjectByPath(props, false, pathToLib);
    if (Meta.ADD_RUNTIME_LIB.commandName.equals(op.name)) {
      if (existing != null) {
        op.addError(StrUtils.formatString("The jar with a name ''{0}'' already exists ", name));
        return false;
      }
    } else {
      if (existing == null) {
        op.addError(StrUtils.formatString("The jar with a name ''{0}'' does not exist", name));
        return false;
      }
      if(Objects.equals( existing.get(SHA512) , op.getDataMap().get(SHA512))){
        op.addError("Trying to update a jar with the same sha512");
        return false;
      }
    }
    try {
      lib.init(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()));
    } catch (SolrException e) {
      log.error("Error loading runtimelib ", e);
      op.addError(e.getMessage());
      return false;
    }

    Map delta = new LinkedHashMap();
    Utils.setObjectByPath(delta, pathToLib, op.getDataMap(), true);
    clusterProperties.setClusterProperties(delta);
    return true;

  }

