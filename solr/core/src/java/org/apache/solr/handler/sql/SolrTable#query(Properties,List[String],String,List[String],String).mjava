  /** Executes a Solr query on the underlying table.
   *
   * @param properties Connections properties
   * @param fields List of fields to project
   * @param query A string for the query
   * @return Enumerator of results
   */
  public Enumerable<Object> query(final Properties properties, List<String> fields,
                                  String query, List<String> order, String limit) {
    Map<String, String> solrParams = new HashMap<>();
    //solrParams.put(CommonParams.OMIT_HEADER, "true");
    solrParams.put(CommonParams.Q, "*:*");
    //solrParams.put(CommonParams.QT, "/export");

    if (fields.isEmpty()) {
      solrParams.put(CommonParams.FL, "*");
    } else {
      solrParams.put(CommonParams.FL, String.join(",", fields));
    }

    if (query == null) {
      solrParams.put(CommonParams.FQ, "*:*");
    } else {
      // SolrParams should be a ModifiableParams instead of a map so we could add multiple FQs
      solrParams.put(CommonParams.FQ, query);
    }

    // Build and issue the query and return an Enumerator over the results
    if (order.isEmpty()) {
      solrParams.put(CommonParams.SORT, DEFAULT_SORT_FIELD + " desc");

      // Make sure the default sort field is in the field list
      String fl = solrParams.get(CommonParams.FL);
      if(!fl.contains(DEFAULT_SORT_FIELD)) {
        solrParams.put(CommonParams.FL, String.join(",", fl, DEFAULT_SORT_FIELD));
      }
    } else {
      solrParams.put(CommonParams.SORT, String.join(",", order));
    }

    TupleStream tupleStream;
    try {
      String zk = properties.getProperty("zk");
      tupleStream = new CloudSolrStream(zk, collection, solrParams);
      if(limit != null) {
        tupleStream = new LimitStream(tupleStream, Integer.parseInt(limit));
      }

    } catch (IOException e) {
      throw new RuntimeException(e);
    }

    final TupleStream finalStream = tupleStream;

    return new AbstractEnumerable<Object>() {
      public Enumerator<Object> enumerator() {
        return new SolrEnumerator(finalStream, fields);
      }
    };
  }

