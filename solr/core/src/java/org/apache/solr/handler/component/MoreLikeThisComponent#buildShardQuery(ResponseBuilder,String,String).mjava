  ShardRequest buildShardQuery(ResponseBuilder rb, String q, String key) {
    ShardRequest s = new ShardRequest();
    s.params = new ModifiableSolrParams(rb.req.getParams());
    s.purpose |= ShardRequest.PURPOSE_GET_MLT_RESULTS;
    // Maybe unnecessary, but safe.
    s.purpose |= ShardRequest.PURPOSE_PRIVATE;
    
    s.params.remove(ShardParams.SHARDS);
    // s.params.remove(MoreLikeThisComponent.COMPONENT_NAME);
    
    // needed to correlate results
    s.params.set(MoreLikeThisComponent.DIST_DOC_ID, key);
    s.params.set(CommonParams.START, 0);
    int mltcount = s.params.getInt(MoreLikeThisParams.DOC_COUNT, 20);
    s.params.set(CommonParams.ROWS, mltcount);
    
    // adding score to rank moreLikeThis
    s.params.remove(CommonParams.FL);
    
    // Should probably add something like this:
    // String fl = s.params.get(MoreLikeThisParams.RETURN_FL, "*");
    // if(fl != null){
    // s.params.set(CommonParams.FL, fl + ",score");
    // }
    String id = rb.req.getSchema().getUniqueKeyField()
    .getName();
    s.params.set(CommonParams.FL, "score," + id);
    s.params.set("sort", "score desc");
    // MLT Query is submitted as normal query to shards.
    s.params.set(CommonParams.Q, q);
    
    s.shards = ShardRequest.ALL_SHARDS;
    return s;
  }

