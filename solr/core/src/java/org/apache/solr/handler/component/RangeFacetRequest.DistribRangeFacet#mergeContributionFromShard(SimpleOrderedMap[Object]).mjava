    /**
     * Accumulates an individual facet_ranges count from a shard into global counts.
     * <p>
     * The implementation below uses the first encountered shard's
     * facet_ranges as the basis for subsequent shards' data to be merged.
     *
     * @param rangeFromShard the facet_ranges response from a shard
     */
    public void mergeContributionFromShard(SimpleOrderedMap<Object> rangeFromShard) {
      if (rangeFacet == null) {
        rangeFacet = rangeFromShard;
        return;
      }

      @SuppressWarnings("unchecked")
      NamedList<Integer> shardFieldValues
          = (NamedList<Integer>) rangeFromShard.get("counts");

      @SuppressWarnings("unchecked")
      NamedList<Integer> existFieldValues
          = (NamedList<Integer>) rangeFacet.get("counts");

      for (Map.Entry<String, Integer> existPair : existFieldValues) {
        final String key = existPair.getKey();
        // can be null if inconsistencies in shards responses
        Integer newValue = shardFieldValues.get(key);
        if (null != newValue) {
          Integer oldValue = existPair.getValue();
          existPair.setValue(oldValue + newValue);
        }
      }

      // merge facet.other=before/between/after/all if they exist
      for (FacetParams.FacetRangeOther otherKey : FacetParams.FacetRangeOther.values()) {
        if (otherKey == FacetParams.FacetRangeOther.NONE) continue;

        String name = otherKey.toString();
        Integer shardValue = (Integer) rangeFromShard.get(name);
        if (shardValue != null && shardValue > 0) {
          Integer existingValue = (Integer) rangeFacet.get(name);
          // shouldn't be null
          int idx = rangeFacet.indexOf(name, 0);
          rangeFacet.setVal(idx, existingValue + shardValue);
        }
      }
    }

