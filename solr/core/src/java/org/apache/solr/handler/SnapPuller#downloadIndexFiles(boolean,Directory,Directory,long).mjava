  /**
   * Download the index files. If a new index is needed, download all the files.
   *
   * @param downloadCompleteIndex is it a fresh index copy
   * @param tmpIndexDir              the directory to which files need to be downloadeed to
   * @param indexDir                 the indexDir to be merged to
   * @param latestGeneration         the version number
   */
  private void downloadIndexFiles(boolean downloadCompleteIndex, Directory indexDir, Directory tmpIndexDir, long latestGeneration)
      throws Exception {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Download files to dir: " + Arrays.asList(indexDir.listAll()));
    }
    for (Map<String,Object> file : filesToDownload) {
      String filename = (String) file.get(NAME);
      CompareResult compareResult = compareFile(indexDir, filename, (Long) file.get(SIZE), (Long) file.get(CHECKSUM));
      if (!compareResult.equal || downloadCompleteIndex
          || (!compareResult.checkSummed && (filename.endsWith(".si") || filename.endsWith(".liv")
          || filename.startsWith("segments_")))) {
        dirFileFetcher = new DirectoryFileFetcher(tmpIndexDir, file,
            (String) file.get(NAME), false, latestGeneration);
        currentFile = file;
        dirFileFetcher.fetchFile();
        filesDownloaded.add(new HashMap<>(file));
      } else {
        LOG.info("Skipping download for " + file.get(NAME)
            + " because it already exists");
      }
    }
  }

