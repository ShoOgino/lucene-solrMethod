  /**
   * Start processing and block until complete or Exception is thrown.
   *
   * @param writer writer that exchanges and processes buffers received from a producer.
   * @throws IOException on errors
   */
  public void run(Callable<Boolean> writer) throws IOException {
    service = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrNamedThreadFactory("ExportBuffers"));
    try {
      CompletableFuture.runAsync(filler, service);
      writer.call();

      // alternatively we could run the writer in a separate thread:
//        CompletableFuture<Void> allDone = CompletableFuture.allOf(
//            CompletableFuture.runAsync(filler, service),
//            CompletableFuture.runAsync(() -> {
//              try {
//                writer.call();
//              } catch (Exception e) {
//                log.error("writer", e);
//                shutdownNow();
//              }
//            }, service)
//        );
//        allDone.join();
      log.debug("-- finished.");
    } catch (Exception e) {
      log.error("Exception running filler / writer", e);
      error(e);
      //
    } finally {
      log.debug("--- all done, shutting down buffers");
      shutdownNow();
    }
  }

