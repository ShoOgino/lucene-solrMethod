  //
  // The implementation below uses the first encountered shard's
  // facet_dates as the basis for subsequent shards' data to be merged.
  // (the "NOW" param should ensure consistency)
  private void doDistribDates(FacetInfo fi, NamedList facet_counts) {
    @SuppressWarnings("unchecked")
    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_dates =
      (SimpleOrderedMap<SimpleOrderedMap<Object>>)
      facet_counts.get("facet_dates");

    if (facet_dates != null) {

      // go through each facet_date
      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_dates) {
        final String field = entry.getKey();
        if (fi.dateFacets.get(field) == null) {
          // first time we've seen this field, no merging
          fi.dateFacets.add(field, entry.getValue());

        } else {
          // not the first time, merge current field

          SimpleOrderedMap<Object> shardFieldValues
            = entry.getValue();
          SimpleOrderedMap<Object> existFieldValues
            = fi.dateFacets.get(field);

          for (Map.Entry<String,Object> existPair : existFieldValues) {
            final String key = existPair.getKey();
            if (key.equals("gap") ||
                key.equals("end") ||
                key.equals("start")) {
              // we can skip these, must all be the same across shards
              continue;
            }
            // can be null if inconsistencies in shards responses
            Integer newValue = (Integer) shardFieldValues.get(key);
            if  (null != newValue) {
              Integer oldValue = ((Integer) existPair.getValue());
              existPair.setValue(oldValue + newValue);
            }
          }
        }
      }
    }
  }

