    /**
     * Translates a call to a binary operator, reversing arguments if necessary.
     */
    private Pair<String, RexLiteral> translateBinary(RexCall call) {
      List<RexNode> operands = call.getOperands();
      if (operands.size() != 2) {
        throw new AssertionError("Invalid number of arguments - " + operands.size());
      }
      final RexNode left = operands.get(0);
      final RexNode right = operands.get(1);
      final Pair<String, RexLiteral> a = translateBinary2(left, right);

      if (a != null) {
        if(reverseAggMappings.containsKey(a.getKey())) {
          return new Pair<String, RexLiteral>(reverseAggMappings.get(a.getKey()),a.getValue());
        }
        return a;
      }
      final Pair<String, RexLiteral> b = translateBinary2(right, left);
      if (b != null) {
        return b;
      }
      throw new AssertionError("cannot translate call " + call);
    }

