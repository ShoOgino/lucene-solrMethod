  @Override
  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
    ModifiableSolrParams params = new ModifiableSolrParams(req.getParams());
    String collection = params.get(SYSTEM_COLLECTION_PARAM, CollectionAdminParams.SYSTEM_COLL);
    params.remove(SYSTEM_COLLECTION_PARAM);
    params.remove(CommonParams.QT);
    // check that we have the main query, if not then use *:*
    if (params.get(CommonParams.Q) == null) {
      params.add(CommonParams.Q, "*:*");
    }
    // sort by doc id, which are time-based, unless specified otherwise
    if (params.get(CommonParams.SORT) == null) {
      params.add(CommonParams.SORT, "id asc");
    }
    // filter query to pick only autoscaling events
    params.remove(CommonParams.FQ, EVENTS_FQ);
    params.add(CommonParams.FQ, EVENTS_FQ);
    // add filters translated from simplified parameters
    for (Map.Entry<String, String> e : formats.entrySet()) {
      String[] values = params.remove(e.getKey());
      if (values != null) {
        for (String value : values) {
          params.add(CommonParams.FQ, String.format(e.getValue(), value));
        }
      }
    }
    try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder()
        .withZkHost(coreContainer.getZkController().getZkServerAddress())
        .withHttpClient(coreContainer.getUpdateShardHandler().getHttpClient())
        .build()) {
      QueryResponse qr = cloudSolrClient.query(collection, params);
      rsp.getValues().add("response", qr.getResults());
    } catch (Exception e) {
      if ((e instanceof SolrException) && e.getMessage().contains("Collection not found")) {
        // relatively benign
        LOG.info("Collection " + collection + " does not exist.");
      } else {
        throw e;
      }
    }
  }

