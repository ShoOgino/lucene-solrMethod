    private Map<String, Object> getConfigDetails(String componentType, SolrQueryRequest req) {
      String componentName = componentType == null ? null : req.getParams().get("componentName");
      if(componentName == null && parts.size() > 2){
        componentName = parts.get(2);
        if(SolrRequestHandler.TYPE.equals(componentType)){
          componentName = "/"+componentName;
        }
      }

      boolean showParams = req.getParams().getBool("expandParams", false);
      Map<String, Object> map = this.req.getCore().getSolrConfig().toMap(new LinkedHashMap<>());
      if (SolrRequestHandler.TYPE.equals(componentType) || componentType == null) {
        Map reqHandlers = (Map) map.get(SolrRequestHandler.TYPE);
        if (reqHandlers == null) map.put(SolrRequestHandler.TYPE, reqHandlers = new LinkedHashMap<>());
        List<PluginInfo> plugins = this.req.getCore().getImplicitHandlers();
        for (PluginInfo plugin : plugins) {
          if (SolrRequestHandler.TYPE.equals(plugin.type)) {
            if (!reqHandlers.containsKey(plugin.name)) {
              reqHandlers.put(plugin.name, plugin);
            }
          }
        }
        if (showParams) {
          for (Object o : reqHandlers.entrySet()) {
            Map.Entry e = (Map.Entry) o;
            if (componentName == null || e.getKey().equals(componentName)) {
              Map<String, Object> m = expandUseParams(req, e.getValue());
              e.setValue(m);
            }
          }
        }

      }

      if (req.getParams().getBool("meta", false)) {
        for (SolrCore.PkgListener pkgListener : req.getCore().getPackageListeners()) {
          PluginInfo meta = pkgListener.pluginInfo();
          if (meta.pathInConfig != null) {
            Object obj = Utils.getObjectByPath(map, false, meta.pathInConfig);
            if (obj instanceof Map) {
              Map m = (Map) obj;
              m.put("_packageinfo_", pkgListener.lib());
            } else if(obj instanceof MapWriter){
              MapWriter mw = (MapWriter) obj;
              Utils.setObjectByPath(map, meta.pathInConfig, (MapWriter) ew -> {
                mw.writeMap(ew);
                ew.put("_packageinfo_", pkgListener.lib());
              }, false);
            }
          }
        }
      }

      return map;
    }

