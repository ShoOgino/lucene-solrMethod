  /** 
   * Helper method, public for testing purposes only.
   * <p>
   * Given an analyzer, inspects it to determine if:
   * <ul>
   *  <li>it is a {@link TokenizerChain}</li>
   *  <li>it contains exactly one instance of {@link ShingleFilterFactory}</li>
   * </ul>
   * <p>
   * If these these conditions are met, then this method returns the <code>maxShingleSize</code> 
   * in effect for this analyzer, otherwise returns -1.
   * </p>
   * 
   * @param analyzer An analyzer inspect
   * @return <code>maxShingleSize</code> if available
   * @lucene.internal
   */
  public static int getMaxShingleSize(Analyzer analyzer) {
    if (!TokenizerChain.class.isInstance(analyzer)) {
      return -1;
    }
    
    final TokenFilterFactory[] factories = ((TokenizerChain) analyzer).getTokenFilterFactories();
    if (0 == factories.length) {
      return -1;
    }
    int result = -1;
    for (TokenFilterFactory tff : factories) {
      if (ShingleFilterFactory.class.isInstance(tff)) {
        if (0 < result) {
          // more then one shingle factory in our analyzer, which is weird, so make no assumptions...
          return -1;
        }
        // would be nice if there was an easy way to just ask a factory for the effective value
        // of an arguement...
        final Map<String,String> args = tff.getOriginalArgs();
        result = args.containsKey("maxShingleSize")
          ? Integer.parseInt(args.get("maxShingleSize")) : ShingleFilter.DEFAULT_MAX_SHINGLE_SIZE;
      }
    }
    return result;
  }

