  private void estimateDocValues(Map<String, Object> result) throws IOException {
    log.info("- estimating docValues...");
    Map<String, Map<String, Object>> stats = new HashMap<>();
    for (LeafReaderContext context : reader.leaves()) {
      LeafReader leafReader = context.reader();
      FieldInfos fieldInfos = leafReader.getFieldInfos();
      for (FieldInfo info : fieldInfos) {
        // binary
        countDocValues(stats, info.name, "binary", leafReader.getBinaryDocValues(info.name), values -> {
          try {
            BytesRef value = ((BinaryDocValues) values).binaryValue();
            return value.length;
          } catch (IOException e) {
            // ignore
          }
          return 0;
        });
        // numeric
        countDocValues(stats, info.name, "numeric", leafReader.getNumericDocValues(info.name), values -> 8);
        countDocValues(stats, info.name, "sorted", leafReader.getSortedDocValues(info.name), values -> {
          try {
            TermsEnum termsEnum = ((SortedDocValues) values).termsEnum();
            BytesRef term;
            while ((term = termsEnum.next()) != null) {
              return term.length;
            }
          } catch (IOException e) {
            // ignore
          }
          return 0;
        });
        countDocValues(stats, info.name, "sortedNumeric", leafReader.getSortedNumericDocValues(info.name),
            values -> ((SortedNumericDocValues) values).docValueCount() * 8);
        countDocValues(stats, info.name, "sortedSet", leafReader.getSortedSetDocValues(info.name), values -> {
          try {
            TermsEnum termsEnum = ((SortedSetDocValues) values).termsEnum();
            BytesRef term;
            while ((term = termsEnum.next()) != null) {
              return term.length;
            }
          } catch (IOException e) {
            // ignore
          }
          return 0;
        });
      }
    }
    result.put(DOC_VALUES, stats);
  }

