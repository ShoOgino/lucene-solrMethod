  public static void waitForActiveCollection(String collectionName, CoreContainer cc, SolrResponse createCollResponse)
      throws KeeperException, InterruptedException {

    if (createCollResponse.getResponse().get("exception") != null) {
      // the main called failed, don't wait
      log.info("Not waiting for active collection due to exception: " + createCollResponse.getResponse().get("exception"));
      return;
    }

    int replicaFailCount;
    if (createCollResponse.getResponse().get("failure") != null) {
      replicaFailCount = ((NamedList) createCollResponse.getResponse().get("failure")).size();
    } else {
      replicaFailCount = 0;
    }

    CloudConfig ccfg = cc.getConfig().getCloudConfig();
    Integer seconds = ccfg.getCreateCollectionWaitTimeTillActive();
    Boolean checkLeaderOnly = ccfg.isCreateCollectionCheckLeaderActive();
    log.info("Wait for new collection to be active for at most " + seconds + " seconds. Check all shard "
        + (checkLeaderOnly ? "leaders" : "replicas"));

    try {
      cc.getZkController().getZkStateReader().waitForState(collectionName, seconds, TimeUnit.SECONDS, (n, c) -> {

        if (c == null) {
          // the collection was not created, don't wait
          return true;
        }

        if (c.getSlices() != null) {
          Collection<Slice> shards = c.getSlices();
          int replicaNotAliveCnt = 0;
          for (Slice shard : shards) {
            Collection<Replica> replicas;
            if (!checkLeaderOnly) replicas = shard.getReplicas();
            else {
              replicas = new ArrayList<Replica>();
              replicas.add(shard.getLeader());
            }
            for (Replica replica : replicas) {
              String state = replica.getStr(ZkStateReader.STATE_PROP);
              log.debug("Checking replica status, collection={} replica={} state={}", collectionName,
                  replica.getCoreUrl(), state);
              if (!n.contains(replica.getNodeName())
                  || !state.equals(Replica.State.ACTIVE.toString())) {
                replicaNotAliveCnt++;
                return false;
              }
            }
          }

          if ((replicaNotAliveCnt == 0) || (replicaNotAliveCnt <= replicaFailCount)) return true;
        }
        return false;
      });
    } catch (TimeoutException | InterruptedException e) {

      String  error = "Timeout waiting for active collection " + collectionName + " with timeout=" + seconds;
      throw new NotInClusterStateException(ErrorCode.SERVER_ERROR, error);
    }

  }

