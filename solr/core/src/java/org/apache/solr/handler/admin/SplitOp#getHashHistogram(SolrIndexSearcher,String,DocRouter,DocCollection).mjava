  // Returns a list of range counts sorted by the range lower bound
  static Collection<RangeCount> getHashHistogram(SolrIndexSearcher searcher, String prefixField, DocRouter router, DocCollection collection) throws IOException {
    TreeMap<DocRouter.Range,RangeCount> counts = new TreeMap<>();

    Terms terms = MultiTerms.getTerms(searcher.getIndexReader(), prefixField);
    if (terms == null) {
      return counts.values();
    }

    TermsEnum termsEnum = terms.iterator();
    for (;;) {
      BytesRef term = termsEnum.next();
      if (term == null) break;

      String termStr = term.utf8ToString();
      int firstSep = termStr.indexOf(CompositeIdRouter.SEPARATOR);
      // truncate to first separator since we don't support multiple levels currently
      if (firstSep != termStr.length()-1 && firstSep > 0) {
        termStr = termStr.substring(0, firstSep+1);
      }
      DocRouter.Range range = router.getSearchRangeSingle(termStr, null, collection);
      int numDocs = termsEnum.docFreq();

      RangeCount rangeCount = new RangeCount(range, numDocs);

      RangeCount prev = counts.put(rangeCount.range, rangeCount);
      if (prev != null) {
        // we hit a hash collision or truncated a prefix to first level, so add the buckets together.
        rangeCount.count += prev.count;
      }
    }

    return counts.values();
  }

