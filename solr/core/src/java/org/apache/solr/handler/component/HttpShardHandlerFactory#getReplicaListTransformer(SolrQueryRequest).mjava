  protected ReplicaListTransformer getReplicaListTransformer(final SolrQueryRequest req) {
    final SolrParams params = req.getParams();
    ZkController zkController = req.getCore().getCoreContainer().getZkController();
    String defaultShardPreference = "";
    if (zkController != null) {
      defaultShardPreference = zkController.getZkStateReader().getClusterProperties()
          .getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, "")
          .toString();
    }


    @SuppressWarnings("deprecation")
    final boolean preferLocalShards = params.getBool(CommonParams.PREFER_LOCAL_SHARDS, false);
    final String shardsPreferenceSpec = params.get(ShardParams.SHARDS_PREFERENCE, defaultShardPreference);

    if (preferLocalShards || !shardsPreferenceSpec.isEmpty()) {
      if (preferLocalShards && !shardsPreferenceSpec.isEmpty()) {
        throw new SolrException(
          SolrException.ErrorCode.BAD_REQUEST,
          "preferLocalShards is deprecated and must not be used with shards.preference" 
        );
      }
      List<PreferenceRule> preferenceRules = PreferenceRule.from(shardsPreferenceSpec);
      if (preferLocalShards) {
        preferenceRules.add(new PreferenceRule(ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION, ShardParams.REPLICA_LOCAL));
      }

      return new ShufflingReplicaListTransformer(r) {
        @Override
        public void transform(List<?> choices)
        {
          if (choices.size() > 1) {
            super.transform(choices);
            if (log.isDebugEnabled()) {
              log.debug("Applying the following sorting preferences to replicas: {}",
                  Arrays.toString(preferenceRules.toArray()));
            }
            try {
              choices.sort(new NodePreferenceRulesComparator(preferenceRules, req));
            } catch (IllegalArgumentException iae) {
              throw new SolrException(
                SolrException.ErrorCode.BAD_REQUEST,
                iae.getMessage()
              );
            }
            if (log.isDebugEnabled()) {
              log.debug("Applied sorting preferences to replica list: {}",
                  Arrays.toString(choices.toArray()));
            }
          }
        }
      };
    }

    return shufflingReplicaListTransformer;
  }

