  public void inform(SolrCore core) {
    String defaultCollection;
    String defaultZkhost;
    CoreContainer coreContainer = core.getCoreContainer();
    this.coreName = core.getName();

    if(coreContainer.isZooKeeperAware()) {
      defaultCollection = core.getCoreDescriptor().getCollectionName();
      defaultZkhost = core.getCoreContainer().getZkController().getZkServerAddress();
      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);
      streamFactory.withDefaultZkHost(defaultZkhost);
    }

    // This pulls all the overrides and additions from the config
    StreamHandler.addExpressiblePlugins(streamFactory, core);

    // Check deprecated approach.
    Object functionMappingsObj = initArgs.get("streamFunctions");
    if(null != functionMappingsObj){
      log.warn("solrconfig.xml: <streamFunctions> is deprecated for adding additional streaming functions to GraphHandler.");
      NamedList<?> functionMappings = (NamedList<?>)functionMappingsObj;
      for(Entry<String,?> functionMapping : functionMappings) {
        String key = functionMapping.getKey();
        PluginInfo pluginInfo = new PluginInfo(key, Collections.singletonMap("class", functionMapping.getValue()));

        if (pluginInfo.pkgName == null) {
          Class<? extends Expressible> clazz = core.getResourceLoader().findClass((String) functionMapping.getValue(),
              Expressible.class);
          streamFactory.withFunctionName(key, clazz);
        } else {
          StreamHandler.ExpressibleHolder holder = new StreamHandler.ExpressibleHolder(pluginInfo, core, SolrConfig.classVsSolrPluginInfo.get(Expressible.class));
          streamFactory.withFunctionName(key, () -> holder.getClazz());
        }

      }

    }
  }

