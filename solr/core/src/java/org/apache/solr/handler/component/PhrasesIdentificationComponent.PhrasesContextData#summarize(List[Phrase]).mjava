    /**
     * Given a list of phrases to be returned to the user, summarizes those phrases by decorating the 
     * original input string to indicate where the identified phrases exist, using {@link #summaryPre} 
     * and {@link #summaryPost}
     *
     * @param results a list of (non overlapping) Phrases that have been identified, sorted from highest scoring to lowest
     * @return the original user input, decorated to indicate the identified phrases
     */
    public String summarize(final List<Phrase> results) {
      final StringBuffer out = new StringBuffer(rawInput);
      
      // sort by *reverse* position so we can go back to front 
      final List<Phrase> reversed = results.stream()
        .sorted(Comparator.comparing((p -> p.getPositionStart()), Collections.reverseOrder()))
        .collect(Collectors.toList());

      for (Phrase p : reversed) {
        out.insert(p.getOffsetEnd(), summaryPost);
        out.insert(p.getOffsetStart(), summaryPre);
      }
      return out.toString();
    }

