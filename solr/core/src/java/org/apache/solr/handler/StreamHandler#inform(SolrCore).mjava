  public void inform(SolrCore core) {
    
    /* The stream factory will always contain the zkUrl for the given collection
     * Adds default streams with their corresponding function names. These 
     * defaults can be overridden or added to in the solrConfig in the stream 
     * RequestHandler def. Example config override
     *  <lst name="streamFunctions">
     *    <str name="group">org.apache.solr.client.solrj.io.stream.ReducerStream</str>
     *    <str name="count">org.apache.solr.client.solrj.io.stream.RecordCountStream</str>
     *  </lst>
     * */

    String defaultCollection;
    String defaultZkhost;
    CoreContainer coreContainer = core.getCoreDescriptor().getCoreContainer();
    this.coreName = core.getName();

    if(coreContainer.isZooKeeperAware()) {
      defaultCollection = core.getCoreDescriptor().getCollectionName();
      defaultZkhost = core.getCoreDescriptor().getCoreContainer().getZkController().getZkServerAddress();
      streamFactory.withCollectionZkHost(defaultCollection, defaultZkhost);
      streamFactory.withDefaultZkHost(defaultZkhost);
      modelCache = new ModelCache(250,
                                  defaultZkhost,
                                  clientCache);
    }

     streamFactory
       // source streams
      .withFunctionName("search", CloudSolrStream.class)
      .withFunctionName("facet", FacetStream.class)
      .withFunctionName("update", UpdateStream.class)
      .withFunctionName("jdbc", JDBCStream.class)
      .withFunctionName("topic", TopicStream.class)
      .withFunctionName("commit", CommitStream.class)
      .withFunctionName("random", RandomStream.class)
      
      // decorator streams
      .withFunctionName("merge", MergeStream.class)
      .withFunctionName("unique", UniqueStream.class)
      .withFunctionName("top", RankStream.class)
      .withFunctionName("group", GroupOperation.class)
      .withFunctionName("reduce", ReducerStream.class)
      .withFunctionName("parallel", ParallelStream.class)
      .withFunctionName("rollup", RollupStream.class)
      .withFunctionName("stats", StatsStream.class)
      .withFunctionName("innerJoin", InnerJoinStream.class)
      .withFunctionName("leftOuterJoin", LeftOuterJoinStream.class) 
      .withFunctionName("hashJoin", HashJoinStream.class)
      .withFunctionName("outerHashJoin", OuterHashJoinStream.class)
      .withFunctionName("intersect", IntersectStream.class)
      .withFunctionName("complement", ComplementStream.class)
      .withFunctionName("sort", SortStream.class)
      .withFunctionName("train", TextLogitStream.class)
      .withFunctionName("features", FeaturesSelectionStream.class)
      .withFunctionName("daemon", DaemonStream.class)
      .withFunctionName("shortestPath", ShortestPathStream.class)
      .withFunctionName("gatherNodes", GatherNodesStream.class)
      .withFunctionName("nodes", GatherNodesStream.class)
      .withFunctionName("select", SelectStream.class)
      .withFunctionName("scoreNodes", ScoreNodesStream.class)
      .withFunctionName("model", ModelStream.class)
      .withFunctionName("classify", ClassifyStream.class)
      .withFunctionName("fetch", FetchStream.class)
      .withFunctionName("executor", ExecutorStream.class)
      .withFunctionName("null", NullStream.class)
      .withFunctionName("priority", PriorityStream.class)
      // metrics
      .withFunctionName("min", MinMetric.class)
      .withFunctionName("max", MaxMetric.class)
      .withFunctionName("avg", MeanMetric.class)
      .withFunctionName("sum", SumMetric.class)
      .withFunctionName("count", CountMetric.class)
      
      // tuple manipulation operations
      .withFunctionName("replace", ReplaceOperation.class)
      .withFunctionName("concat", ConcatOperation.class)
      
      // stream reduction operations
      .withFunctionName("group", GroupOperation.class)
      .withFunctionName("distinct", DistinctOperation.class)
      .withFunctionName("having", HavingStream.class)
      .withFunctionName("and", AndOperation.class)
      .withFunctionName("or", OrOperation.class)
      .withFunctionName("not", NotOperation.class)
      .withFunctionName("gt", GreaterThanOperation.class)
      .withFunctionName("lt", LessThanOperation.class)
      .withFunctionName("eq", EqualsOperation.class)
      .withFunctionName("lteq", LessThanEqualToOperation.class)
      .withFunctionName("gteq", GreaterThanEqualToOperation.class);

     // This pulls all the overrides and additions from the config
     List<PluginInfo> pluginInfos = core.getSolrConfig().getPluginInfos(Expressible.class.getName());
     for (PluginInfo pluginInfo : pluginInfos) {
       Class<? extends Expressible> clazz = core.getResourceLoader().findClass(pluginInfo.className, Expressible.class);
       streamFactory.withFunctionName(pluginInfo.name, clazz);
     }
        
    core.addCloseHook(new CloseHook() {
      @Override
      public void preClose(SolrCore core) {
        //To change body of implemented methods use File | Settings | File Templates.
      }

      @Override
      public void postClose(SolrCore core) {
        clientCache.close();
      }
    });
  }

