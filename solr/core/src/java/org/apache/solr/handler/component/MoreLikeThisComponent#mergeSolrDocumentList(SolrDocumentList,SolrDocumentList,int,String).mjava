  public SolrDocumentList mergeSolrDocumentList(SolrDocumentList one,
      SolrDocumentList two, int maxSize, String idField) {

    List<SolrDocument> l = new ArrayList<>();
    
    // De-dup records sets. Shouldn't happen if indexed correctly.
    Map<String,SolrDocument> map = new HashMap<>();
    for (SolrDocument doc : one) {
      Object id = doc.getFieldValue(idField);
      assert id != null : doc.toString();
      map.put(id.toString(), doc);
    }
    for (SolrDocument doc : two) {
      map.put(doc.getFieldValue(idField).toString(), doc);
    }
    
    l = new ArrayList<>(map.values());
    
    // Comparator to sort docs based on score. null scores/docs are set to 0.
    
    // hmm...we are ordering by scores that are not really comparable...
    Comparator<SolrDocument> c = new Comparator<SolrDocument>() {
      public int compare(SolrDocument o1, SolrDocument o2) {
        Float f1 = getFloat(o1);
        Float f2 = getFloat(o2);
        return f2.compareTo(f1);
      }
      
      private Float getFloat(SolrDocument doc) {
        Float f = 0f;
        if (doc != null) {
          Object o = doc.getFieldValue("score");
          if (o != null && o instanceof Float) {
            f = (Float) o;
          }
        }
        return f;
      }
    };
    
    Collections.sort(l, c);
    
    // Truncate list to maxSize
    if (l.size() > maxSize) {
      l = l.subList(0, maxSize);
    }
    
    // Create SolrDocumentList Attributes from originals
    SolrDocumentList result = new SolrDocumentList();
    result.addAll(l);
    result.setMaxScore(Math.max(one.getMaxScore(), two.getMaxScore()));
    result.setNumFound(one.getNumFound() + two.getNumFound());
    result.setStart(Math.min(one.getStart(), two.getStart()));

    return result;
  }

