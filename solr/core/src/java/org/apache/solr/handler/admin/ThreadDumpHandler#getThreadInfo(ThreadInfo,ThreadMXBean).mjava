  private static SimpleOrderedMap<Object> getThreadInfo( ThreadInfo ti, ThreadMXBean tmbean ) {
    SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();
    long tid = ti.getThreadId();

    info.add( ID, tid );
    info.add(NAME, ti.getThreadName());
    info.add( "state", ti.getThreadState().toString() );
    
    if (ti.getLockName() != null) {
      // TODO: this is redundent with lock-waiting below .. deprecate & remove
      // TODO: (but first needs UI change)
      info.add( "lock", ti.getLockName() );
    }
    { final LockInfo lockInfo = ti.getLockInfo();
      if (null != lockInfo) {
        final SimpleOrderedMap<Object> lock = new SimpleOrderedMap<>();
        info.add("lock-waiting", lock);
        lock.add(NAME, lockInfo.toString());
        if (-1 == ti.getLockOwnerId() && null == ti.getLockOwnerName()) {
          lock.add("owner", null );
        } else {
          final SimpleOrderedMap<Object> owner = new SimpleOrderedMap<>();
          lock.add("owner", owner);
          owner.add(NAME, ti.getLockOwnerName());
          owner.add( ID, ti.getLockOwnerId() );
        }
      }
    }
    { final LockInfo[] synchronizers = ti.getLockedSynchronizers();
      if (0 < synchronizers.length) {
        final List<String> locks = new ArrayList<>(synchronizers.length);
        info.add("synchronizers-locked", locks);
        for (LockInfo sync : synchronizers) {
          locks.add(sync.toString());
        }
      }
    }
    { final LockInfo[] monitors = ti.getLockedMonitors();
      if (0 < monitors.length) {
        final List<String> locks = new ArrayList<>(monitors.length);
        info.add("monitors-locked", locks);
        for (LockInfo monitor : monitors) {
          locks.add(monitor.toString());
        }
      }
    }
    
    

    
    if (ti.isSuspended()) {
      info.add( "suspended", true );
    }
    if (ti.isInNative()) {
      info.add( "native", true );
    }
    
    if (tmbean.isThreadCpuTimeSupported()) {
      info.add( "cpuTime", formatNanos(tmbean.getThreadCpuTime(tid)) );
      info.add( "userTime", formatNanos(tmbean.getThreadUserTime(tid)) );
    }

    // Add the stack trace
    int i=0;
    String[] trace = new String[ti.getStackTrace().length];
    for( StackTraceElement ste : ti.getStackTrace()) {
      trace[i++] = ste.toString();
    }
    info.add( "stackTrace", trace );
    return info;
  }

