  /**
   * Get system info
   */
  public static SimpleOrderedMap<Object> getSystemInfo() {
    SimpleOrderedMap<Object> info = new SimpleOrderedMap<>();
    
    OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();
    info.add(NAME, os.getName());
    info.add( "version", os.getVersion() );
    info.add( "arch", os.getArch() );
    info.add( "systemLoadAverage", os.getSystemLoadAverage());

    // This is a public Oracle/OpenJDK extension, but may not be in other JDKs:
    // com.sun.management.OperatingSystemMXBean
    try {
      final Class<? extends PlatformManagedObject> intf = Class.forName("com.sun.management.OperatingSystemMXBean")
          .asSubclass(PlatformManagedObject.class);
      final PlatformManagedObject bean = ManagementFactory.getPlatformMXBean(intf);
      if (bean != null) {
        addMXBeanProperty( bean, intf, "committedVirtualMemorySize", info);
        addMXBeanProperty( bean, intf, "freePhysicalMemorySize", info);
        addMXBeanProperty( bean, intf, "freeSwapSpaceSize", info);
        addMXBeanProperty( bean, intf, "processCpuTime", info);
        addMXBeanProperty( bean, intf, "totalPhysicalMemorySize", info);
        addMXBeanProperty( bean, intf, "totalSwapSpaceSize", info);
      }
    } catch (Exception e) {
      // ignore
    }

    // This is a public Oracle/OpenJDK extension, but may not be in other JDKs:
    // com.sun.management.UnixOperatingSystemMXBean
    try {
      final Class<? extends PlatformManagedObject> intf = Class.forName("com.sun.management.UnixOperatingSystemMXBean")
          .asSubclass(PlatformManagedObject.class);
      final PlatformManagedObject bean = ManagementFactory.getPlatformMXBean(intf);
      if (bean != null) {
        addMXBeanProperty( bean, intf, "openFileDescriptorCount", info );
        addMXBeanProperty( bean, intf, "maxFileDescriptorCount", info );
      }
    } catch (Exception e) {
      // ignore
    }

    try { 
      if( !os.getName().toLowerCase(Locale.ROOT).startsWith( "windows" ) ) {
        // Try some command line things
        info.add( "uname",  execute( "uname -a" ) );
        info.add( "uptime", execute( "uptime" ) );
      }
    } catch( Exception ex ) {
      log.warn("Unable to execute command line tools.", ex);
    } 
    return info;
  }

