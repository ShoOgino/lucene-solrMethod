      /**
       * Trims and makes this node, as well as all descendant nodes, immutable.
       * This may reduce its memory usage and make it more efficient.
       */
      void trimAndMakeImmutable() {
        if (children != null && !(children instanceof ImmutableMap)) {
          for (Node<E, M> child : children.values())
            child.trimAndMakeImmutable();
          children = ImmutableMap.copyOf(children);
        }
        if (matchValues != null && !(matchValues instanceof ImmutableList)) {
          matchValues = ImmutableList.copyOf(matchValues);
        }
      }

