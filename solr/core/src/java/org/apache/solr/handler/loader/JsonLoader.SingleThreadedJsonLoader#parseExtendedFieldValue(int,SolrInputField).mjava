    /**
     * A method to either extract an index time boost (deprecated), a map for atomic update, or a child document.
     * firstly, a solr document SolrInputDocument constructed. It is then determined whether the document is indeed a childDocument(if it has a unique field).
     * If so, it is added.
     * Otherwise the document is looped over as a map, and is then parsed as an Atomic Update if that is the case.
     * @param ev json parser event
     * @param sif input field to add value to.
     * @throws IOException in case of parsing exception.
     */
    private void parseExtendedFieldValue(int ev, SolrInputField sif) throws IOException {
      assert ev == JSONParser.OBJECT_START;

      SolrInputDocument extendedSolrDocument = parseDoc(ev);

      if (isChildDoc(extendedSolrDocument)) {
        sif.addValue(extendedSolrDocument);
        return;
      }

      Object normalFieldValue = null;
      Map<String, Object> extendedInfo = null;

      for (SolrInputField entry: extendedSolrDocument) {
        Object val = entry.getValue();
        String label = entry.getName();
        if ("boost".equals(label)) {
          Object boostVal = val;
          if (!(boostVal instanceof Double)) {
            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "Boost should have number. "
                + "Unexpected value: " + boostVal.toString() + "field=" + label);
          }

          String message = "Ignoring field boost: " + boostVal.toString() + " as index-time boosts are not supported anymore";
          if (WARNED_ABOUT_INDEX_TIME_BOOSTS.compareAndSet(false, true)) {
            log.warn(message);
          } else {
            log.debug(message);
          }
        } else if ("value".equals(label)) {
          normalFieldValue = val;
        } else {
          // If we encounter other unknown map keys, then use a map
          if (extendedInfo == null) {
            extendedInfo = new HashMap<>(2);
          }
          // for now, the only extended info will be field values
          // we could either store this as an Object or a SolrInputField
          extendedInfo.put(label, val);
        }
        if (extendedInfo != null) {
          if (normalFieldValue != null) {
            extendedInfo.put("value", normalFieldValue);
          }
          sif.setValue(extendedInfo);
        } else {
          sif.setValue(normalFieldValue);
        }
      }
    }

