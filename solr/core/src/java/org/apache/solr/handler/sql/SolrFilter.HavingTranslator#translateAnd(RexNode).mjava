    private String translateAnd(RexNode node0) {
      List<String> andStrings = new ArrayList();
      List<String> notStrings = new ArrayList();

      List<RexNode> ands = new ArrayList();
      List<RexNode> nots = new ArrayList();

      RelOptUtil.decomposeConjunction(node0, ands, nots);

      for (RexNode node : ands) {
        andStrings.add(translateMatch(node));
      }

      StringBuilder builder = new StringBuilder();

      builder.append("and(");
      for (int i = 0; i < andStrings.size(); i++) {
        if (i > 0) {
          builder.append(",");
        }

        builder.append(andStrings.get(i));
      }
      builder.append(")");


      if (nots.size() > 0) {
        for (RexNode node : nots) {
          notStrings.add(translateMatch(node));
        }

        StringBuilder notBuilder = new StringBuilder();
        for(int i=0; i< notStrings.size(); i++) {
          if(i > 0) {
            notBuilder.append(",");
          }
          notBuilder.append("not(");
          notBuilder.append(notStrings.get(i));
          notBuilder.append(")");
        }

        return "and(" + builder.toString() + ","+ notBuilder.toString()+")";
      } else {
        return builder.toString();
      }
    }

