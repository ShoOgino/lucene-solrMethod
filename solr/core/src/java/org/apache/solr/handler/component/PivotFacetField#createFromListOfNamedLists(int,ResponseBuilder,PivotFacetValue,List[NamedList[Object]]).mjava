  /**
   * A recursive method to construct a new <code>PivotFacetField</code> object from 
   * the contents of the {@link NamedList}s provided by the specified shard, relative 
   * to a parent value (if this is not the top field in the pivot hierarchy)
   *
   * The associated child {@link PivotFacetValue}s will be recursively built as well.
   *
   * @see PivotFacetValue#createFromNamedList
   * @param shardNumber the id of the shard that provided this data
   * @param rb The response builder of the current request
   * @param owner the parent value in the current pivot (may be null)
   * @param pivotValues the data from the specified shard for this pivot field, may be null or empty
   * @return the new PivotFacetField, null if pivotValues is null or empty.
   */
  public static PivotFacetField createFromListOfNamedLists(int shardNumber, ResponseBuilder rb, PivotFacetValue owner, List<NamedList<Object>> pivotValues) {
    
    if (null == pivotValues || pivotValues.size() <= 0) return null;
    
    NamedList<Object> firstValue = pivotValues.get(0);
    PivotFacetField createdPivotFacetField 
      = new PivotFacetField(rb, owner, PivotFacetHelper.getField(firstValue));
    
    int lowestCount = Integer.MAX_VALUE;
    
    for (NamedList<Object> pivotValue : pivotValues) {
      
      lowestCount = Math.min(lowestCount, PivotFacetHelper.getCount(pivotValue));
      
      PivotFacetValue newValue = PivotFacetValue.createFromNamedList
        (shardNumber, rb, createdPivotFacetField, pivotValue);
      createdPivotFacetField.valueCollection.add(newValue);
    }
      
    createdPivotFacetField.shardLowestCount.put(shardNumber,  lowestCount);
    createdPivotFacetField.numberOfValuesContributedByShard.put(shardNumber, pivotValues.size());

    return createdPivotFacetField;
  }

