  @Override
  public FieldComparator<Integer> newComparator(String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {
    return new SimpleFieldComparator<Integer>() {
      private final int[] values = new int[numHits];
      private int bottomVal;
      private int topVal;
      private TermsEnum termsEnum;
      private PostingsEnum postingsEnum;
      Set<String> seen = new HashSet<>(elevations.ids.size());

      @Override
      public int compare(int slot1, int slot2) {
        return values[slot1] - values[slot2];  // values will be small enough that there is no overflow concern
      }

      @Override
      public void setBottom(int slot) {
        bottomVal = values[slot];
      }

      @Override
      public void setTopValue(Integer value) {
        topVal = value.intValue();
      }

      private int docVal(int doc) {
        if (ordSet.size() > 0) {
          int slot = ordSet.find(doc);
          if (slot >= 0) {
            BytesRef id = termValues[slot];
            Integer prio = elevations.priority.get(id);
            return prio == null ? 0 : prio.intValue();
          }
        }
        return 0;
      }

      @Override
      public int compareBottom(int doc) {
        return bottomVal - docVal(doc);
      }

      @Override
      public void copy(int slot, int doc) {
        values[slot] = docVal(doc);
      }

      @Override
      protected void doSetNextReader(LeafReaderContext context) throws IOException {
        //convert the ids to Lucene doc ids, the ordSet and termValues needs to be the same size as the number of elevation docs we have
        ordSet.clear();
        Fields fields = context.reader().fields();
        if (fields == null) return;
        Terms terms = fields.terms(idField);
        if (terms == null) return;
        termsEnum = terms.iterator(termsEnum);
        BytesRefBuilder term = new BytesRefBuilder();
        Bits liveDocs = context.reader().getLiveDocs();

        for (String id : elevations.ids) {
          term.copyChars(id);
          if (seen.contains(id) == false  && termsEnum.seekExact(term.get())) {
            postingsEnum = termsEnum.postings(liveDocs, postingsEnum, PostingsEnum.FLAG_NONE);
            if (postingsEnum != null) {
              int docId = postingsEnum.nextDoc();
              if (docId == DocIdSetIterator.NO_MORE_DOCS ) continue;  // must have been deleted
              termValues[ordSet.put(docId)] = term.toBytesRef();
              seen.add(id);
              assert postingsEnum.nextDoc() == DocIdSetIterator.NO_MORE_DOCS;
            }
          }
        }
      }

      @Override
      public Integer value(int slot) {
        return values[slot];
      }

      @Override
      public int compareTop(int doc) {
        final int docValue = docVal(doc);
        return topVal - docValue;  // values will be small enough that there is no overflow concern
      }
    };
  }

