  /** Executes a Solr query on the underlying table.
   *
   * @param properties Connections properties
   * @param fields List of fields to project
   * @param query A string for the query
   * @return Enumerator of results
   */
  private Enumerable<Object> query(final Properties properties, final List<String> fields,
                                   final String query, final List<String> order, final List<String> buckets,
                                   final List<Pair<String, String>> metricPairs, final String limit) {
    // SolrParams should be a ModifiableParams instead of a map
    Map<String, String> solrParams = new HashMap<>();
    solrParams.put(CommonParams.OMIT_HEADER, "true");

    if (query == null) {
      solrParams.put(CommonParams.Q, DEFAULT_QUERY);
    } else {
      solrParams.put(CommonParams.Q, DEFAULT_QUERY + " AND " + query);
    }

    // List<String> doesn't have add so must make a new ArrayList
    List<String> fieldsList = new ArrayList<>(fields);
    List<String> orderList = new ArrayList<>(order);

    List<Metric> metrics = buildMetrics(metricPairs);

    if (!metrics.isEmpty()) {
      for(String bucket : buckets) {
        orderList.add(bucket + " desc");
      }

      for(Metric metric : metrics) {
        List<String> newOrderList = new ArrayList<>();
        for(String orderItem : orderList) {
          if(!orderItem.startsWith(metric.getIdentifier())) {
            newOrderList.add(orderItem);
          }
        }
        orderList = newOrderList;

        for(String column : metric.getColumns()) {
          if (!fieldsList.contains(column)) {
            fieldsList.add(column);
          }
        }
      }
    }

    if (orderList.isEmpty()) {
      orderList.add(DEFAULT_VERSION_FIELD + " desc");

      // Make sure the default sort field is in the field list
      if (!fieldsList.contains(DEFAULT_VERSION_FIELD)) {
        fieldsList.add(DEFAULT_VERSION_FIELD);
      }
    }

    if(!orderList.isEmpty()) {
      solrParams.put(CommonParams.SORT, String.join(",", orderList));
    }

    if (fieldsList.isEmpty()) {
      solrParams.put(CommonParams.FL, "*");
    } else {
      solrParams.put(CommonParams.FL, String.join(",", fieldsList));
    }

    TupleStream tupleStream;
    String zk = properties.getProperty("zk");
    try {
      if (metrics.isEmpty()) {
        if (limit == null) {
          solrParams.put(CommonParams.QT, "/export");
          tupleStream = new CloudSolrStream(zk, collection, solrParams);
        } else {
          solrParams.put(CommonParams.ROWS, limit);
          tupleStream = new LimitStream(new CloudSolrStream(zk, collection, solrParams), Integer.parseInt(limit));
        }
      } else {
        Metric[] metricsArray = metrics.toArray(new Metric[metrics.size()]);
        if(buckets.isEmpty()) {
          solrParams.remove(CommonParams.FL);
          solrParams.remove(CommonParams.SORT);
          tupleStream = new StatsStream(zk, collection, solrParams, metricsArray);
        } else {
          List<Bucket> bucketsList = new ArrayList<>();
          for(String bucket : buckets) {
            bucketsList.add(new Bucket(bucket));
          }

          solrParams.put(CommonParams.QT, "/export");
          for(Metric metric : metrics) {
            fieldsList.remove(metric.getIdentifier());
          }
          solrParams.put(CommonParams.FL, String.join(",", fieldsList));
          tupleStream = new CloudSolrStream(zk, collection, solrParams);
          tupleStream = new RollupStream(tupleStream, bucketsList.toArray(new Bucket[bucketsList.size()]), metricsArray);

          String sortDirection = getSortDirection(orderList);

          int numWorkers = Integer.parseInt(properties.getProperty("numWorkers", "1"));
          if(numWorkers > 1) {
            String workerZkHost = properties.getProperty("workerZkhost");
            String workerCollection = properties.getProperty("workerCollection");
            // Do the rollups in parallel
            // Maintain the sort of the Tuples coming from the workers.
            StreamComparator comp = bucketSortComp(bucketsList, sortDirection);
            ParallelStream parallelStream = new ParallelStream(workerZkHost, workerCollection, tupleStream, numWorkers, comp);

            StreamFactory factory = new StreamFactory()
                .withFunctionName("search", CloudSolrStream.class)
                .withFunctionName("parallel", ParallelStream.class)
                .withFunctionName("rollup", RollupStream.class)
                .withFunctionName("sum", SumMetric.class)
                .withFunctionName("min", MinMetric.class)
                .withFunctionName("max", MaxMetric.class)
                .withFunctionName("avg", MeanMetric.class)
                .withFunctionName("count", CountMetric.class);

            parallelStream.setStreamFactory(factory);
            tupleStream = parallelStream;
          }

          if (!sortsEqual(bucketsList, sortDirection, orderList)) {
            int limitVal = limit == null ? 100 : Integer.parseInt(limit);
            StreamComparator comp = getComp(orderList);
            //Rank the Tuples
            //If parallel stream is used ALL the Rolled up tuples from the workers will be ranked
            //Providing a true Top or Bottom.
            tupleStream = new RankStream(tupleStream, limitVal, comp);
          } else {
            // Sort is the same as the same as the underlying stream
            // Only need to limit the result, not Rank the result
            if (limit != null) {
              solrParams.put(CommonParams.ROWS, limit);
              tupleStream = new LimitStream(new CloudSolrStream(zk, collection, solrParams), Integer.parseInt(limit));
            }
          }
        }
      }
    } catch (IOException e) {
      throw new RuntimeException(e);
    }

    final TupleStream finalStream = tupleStream;

    return new AbstractEnumerable<Object>() {
      // Use original fields list to make sure only the fields specified are enumerated
      public Enumerator<Object> enumerator() {
        return new SolrEnumerator(finalStream, fields);
      }
    };
  }

