  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {
    final Map<String, String> pathValues = req.getPathTemplateValues();
    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?
        Collections.singletonMap("", co.getCommandData()) : co.getDataMap();
    final SolrParams origParams = req.getParams();

    req.setParams(
        new SolrParams() {
          @Override
          public String get(String param) {
            Object vals = getParams0(param);
            if (vals == null) return null;
            if (vals instanceof String) return (String) vals;
            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);
            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];
            return null;
          }

          private Object getParams0(String param) {
            param = cmd.getParamSubstitute(param);
            Object o = param.indexOf('.') > 0 ?
                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :
                map.get(param);
            if (o == null) o = pathValues.get(param);
            if (o == null && useRequestParams) o = origParams.getParams(param);
            if (o instanceof List) {
              List l = (List) o;
              return l.toArray(new String[l.size()]);
            }

            return o;
          }

          @Override
          public String[] getParams(String param) {
            Object vals = getParams0(param);
            return vals == null || vals instanceof String[] ?
                (String[]) vals :
                new String[]{vals.toString()};
          }

          @Override
          public Iterator<String> getParameterNamesIterator() {
            return cmd.getParamNames(co).iterator();

          }


        });

  }

