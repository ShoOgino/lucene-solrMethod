  /**
   * Wrapper for SolrParams that wraps V2 params and exposes them as V1 params.
   */
  private static void wrapParams(final SolrQueryRequest req, final CommandOperation co, final ApiCommand cmd, final boolean useRequestParams) {
    final Map<String, String> pathValues = req.getPathTemplateValues();
    final Map<String, Object> map = co == null || !(co.getCommandData() instanceof Map) ?
        Collections.singletonMap("", co.getCommandData()) : co.getDataMap();
    final SolrParams origParams = req.getParams();

    req.setParams(
        new SolrParams() {
          @Override
          public String get(String param) {
            Object vals = getParams0(param);
            if (vals == null) return null;
            if (vals instanceof String) return (String) vals;
            if (vals instanceof Boolean || vals instanceof Number) return String.valueOf(vals);
            if (vals instanceof String[] && ((String[]) vals).length > 0) return ((String[]) vals)[0];
            return null;
          }

          private Object getParams0(String param) {
            param = cmd.meta().getParamSubstitute(param); // v1 -> v2, possibly dotted path
            Object o = param.indexOf('.') > 0 ?
                Utils.getObjectByPath(map, true, splitSmart(param, '.')) :
                map.get(param);
            if (o == null) o = pathValues.get(param);
            if (o == null && useRequestParams) o = origParams.getParams(param);
            if (o instanceof List) {
              List l = (List) o;
              return l.toArray(new String[l.size()]);
            }

            return o;
          }

          @Override
          public String[] getParams(String param) {
            Object vals = getParams0(param);
            return vals == null || vals instanceof String[] ?
                (String[]) vals :
                new String[]{vals.toString()};
          }

          @Override
          public Iterator<String> getParameterNamesIterator() {
            return cmd.meta().getParamNamesIterator(co);
          }

          @Override
          public Map toMap(Map<String, Object> suppliedMap) {
            for(Iterator<String> it=getParameterNamesIterator(); it.hasNext(); ) {
              final String param = it.next();
              String key = cmd.meta().getParamSubstitute(param);
              Object o = key.indexOf('.') > 0 ?
                  Utils.getObjectByPath(map, true, splitSmart(key, '.')) :
                  map.get(key);
              if (o == null) o = pathValues.get(key);
              if (o == null && useRequestParams) o = origParams.getParams(key);
              // make strings out of as many things as we can now to minimize differences from
              // the standard impls that pass through a NamedList/SimpleOrderedMap...
              Class<?> oClass = o.getClass();
              if (oClass.isPrimitive() ||
                  Number.class.isAssignableFrom(oClass) ||
                  Character.class.isAssignableFrom(oClass) ||
                  Boolean.class.isAssignableFrom(oClass)) {
                suppliedMap.put(param,String.valueOf(o));
              } else if (List.class.isAssignableFrom(oClass) && ((List)o).get(0) instanceof String ) {
                List<String> l = (List<String>) o;
                suppliedMap.put( param, l.toArray(new String[0]));
              } else {
                // Lists pass through but will require special handling downstream
                // if they contain non-string elements.
                suppliedMap.put(param, o);
              }
            }
            return suppliedMap;
          }
        });

  }

