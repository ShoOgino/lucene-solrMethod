  @SuppressWarnings({"unchecked"})
  private void estimateSummary(Map<String, Object> details, Map<String, Object> summary) {
    log.info("- preparing summary...");
    details.forEach((type, perType) -> {
      ((Map<String, Object>)perType).forEach((field, perField) -> {
        Map<String, Object> perFieldSummary = (Map<String, Object>)summary.computeIfAbsent(field, f -> new HashMap<>());
        ((Map<String, Object>)perField).forEach((k, val) -> {
          if (val instanceof SummaryStatistics) {
            SummaryStatistics stats = (SummaryStatistics)val;
            if (k.startsWith("lengths")) {
              AtomicLong total = (AtomicLong)perFieldSummary.computeIfAbsent("totalSize", kt -> new AtomicLong());
              total.addAndGet((long)stats.getSum());
            }
            Map<String, Object> perTypeSummary = (Map<String, Object>)perFieldSummary.computeIfAbsent("perType", pt -> new HashMap<>());
            AtomicLong total = (AtomicLong)perTypeSummary.computeIfAbsent(type + "_" + k, t -> new AtomicLong());
            total.addAndGet((long)stats.getSum());
          }
        });
      });
    });
  }

