    void add(int shardNum, NamedList shardCounts, int numRequested) {
      // shardCounts could be null if there was an exception
      int sz = shardCounts == null ? 0 : shardCounts.size();
      int numReceived = sz;
      
      FixedBitSet terms = new FixedBitSet(termNum + sz);

      long last = 0;
      for (int i = 0; i < sz; i++) {
        String name = shardCounts.getName(i);
        long count = ((Number) shardCounts.getVal(i)).longValue();
        if (name == null) {
          missingCount += count;
          numReceived--;
        } else {
          ShardFacetCount sfc = counts.get(name);
          if (sfc == null) {
            sfc = new ShardFacetCount();
            sfc.name = name;
            if (ftype == null) {
              sfc.indexed = null;
            } else if (ftype.isPointField()) {
              sfc.indexed = ((PointField)ftype).toInternalByteRef(sfc.name);
            } else {
              sfc.indexed = new BytesRef(ftype.toInternal(sfc.name));
            }
            sfc.termNum = termNum++;
            counts.put(name, sfc);
          }
          incCount(sfc, count);
          terms.set(sfc.termNum);
          last = count;
        }
      }
      
      // the largest possible missing term is initialMincount if we received
      // less than the number requested.
      if (numRequested < 0 || numRequested != 0 && numReceived < numRequested) {
        last = initialMincount;
      }
      
      missingMaxPossible += last;
      missingMax[shardNum] = last;
      counted[shardNum] = terms;
    }

