  /**
   * Returns the appropriate sub-list of the explicit values that need to be refined, 
   * based on the {@link FacetParams#FACET_OFFSET} &amp; {@link FacetParams#FACET_LIMIT} 
   * for this field.
   *
   * @see #getExplicitValuesList
   * @see List#subList
   */
  public List<PivotFacetValue> getNextLevelValuesToRefine() {
    final int numRefinableValues = getExplicitValuesListSize();
    if (numRefinableValues < facetFieldOffset) {
      return Collections.<PivotFacetValue>emptyList();
    }
    
    final int offsetPlusCount = (facetFieldLimit >= 0) 
      ? Math.min(facetFieldLimit + facetFieldOffset, numRefinableValues) 
      : numRefinableValues;
    
    if (1 < facetFieldMinimumCount && facetFieldSort.equals(FacetParams.FACET_SORT_INDEX)) {
      // we have to skip any values that (still) don't meet the mincount
      //
      // TODO: in theory we could avoid this extra check by trimming sooner (SOLR-6331)
      // but since that's a destructive op that blows away the `valuesMap` which we (might?) still need
      // (and pre-emptively skips the offsets) we're avoiding re-working that optimization
      // for now until/unless someone gives it more careful thought...
      final List<PivotFacetValue> results = new ArrayList<>(numRefinableValues);
      for (PivotFacetValue pivotValue : explicitValues) {
        if (pivotValue.getCount() >= facetFieldMinimumCount) {
          results.add(pivotValue);
          if (numRefinableValues <= results.size()) {
            break;
          }
        }
      }
      return results;
    }
    
    // in the non "sort==count OR mincount==1" situation, we can just return the first N values
    // because any viable candidate is already in the top N
    return getExplicitValuesList().subList(facetFieldOffset,  offsetPlusCount);
  }

