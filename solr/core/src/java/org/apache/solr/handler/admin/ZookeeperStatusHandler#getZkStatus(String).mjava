  /*
   Gets all info from ZK API and returns as a map
   */
  protected Map<String, Object> getZkStatus(String zkHost) {
    Map<String, Object> zkStatus = new HashMap<>();
    List<String> zookeepers = Arrays.asList(zkHost.split("/")[0].split(","));
    List<Object> details = new ArrayList<>();
    int numOk = 0;
    String status = STATUS_NA;
    int standalone = 0;
    int followers = 0;
    int reportedFollowers = 0;
    int leaders = 0;
    List<String> errors = new ArrayList<>();
    for (String zk : zookeepers) {
      try {
        Map<String, Object> stat = monitorZookeeper(zk);
        details.add(stat);
        if ("true".equals(String.valueOf(stat.get("ok")))) {
          numOk++;
        }
        String state = String.valueOf(stat.get("zk_server_state"));
        if ("follower".equals(state)) {
          followers++;
        } else if ("leader".equals(state)) {
          leaders++;
          reportedFollowers = Integer.parseInt(String.valueOf(stat.get("zk_followers")));
        } else if ("standalone".equals(state)) {
          standalone++;
        }
      } catch (SolrException se) {
        log.warn("Failed talking to zookeeper" + zk, se);
        errors.add(se.getMessage());
        Map<String, Object> stat = new HashMap<>();
        stat.put("host", zk);
        stat.put("ok", false);
        details.add(stat);
      }       
    }
    zkStatus.put("ensembleSize", zookeepers.size());
    zkStatus.put("zkHost", zkHost);
    zkStatus.put("details", details);
    if (followers+leaders > 0 && standalone > 0) {
      status = STATUS_RED;
      errors.add("The zk nodes do not agree on their mode, check details");
    }
    if (standalone > 1) {
      status = STATUS_RED;
      errors.add("Only one zk allowed in standalone mode");
    }
    if (leaders > 1) {
      zkStatus.put("mode", "ensemble");
      status = STATUS_RED;
      errors.add("Only one leader allowed, got " + leaders);
    }
    if (followers > 0 && leaders == 0) {
      zkStatus.put("mode", "ensemble");
      status = STATUS_RED;
      errors.add("We do not have a leader");
    }
    if (leaders > 0 && followers != reportedFollowers) {
      zkStatus.put("mode", "ensemble");
      status = STATUS_RED;
      errors.add("Leader reports " + reportedFollowers + " followers, but we only found " + followers + 
        ". Please check zkHost configuration");
    }
    if (followers+leaders == 0 && standalone == 1) {
      zkStatus.put("mode", "standalone");
    }
    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {
      if (!STATUS_RED.equals(status)) {
        status = STATUS_YELLOW;
      }
      errors.add("We have an even number of zookeepers which is not recommended");
    }
    if (followers+leaders > 0 && standalone == 0) {
      zkStatus.put("mode", "ensemble");
    }
    if (status.equals(STATUS_NA)) {
      if (numOk == zookeepers.size()) {
        status = STATUS_GREEN;
      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {
        status = STATUS_YELLOW;
        errors.add("Some zookeepers are down: " + numOk + "/" + zookeepers.size());
      } else {
        status = STATUS_RED;
        errors.add("Mismatch in number of zookeeper nodes live. numOK=" + numOk + ", expected " + zookeepers.size());
      }
    }
    zkStatus.put("status", status);
    if (!errors.isEmpty()) {
      zkStatus.put("errors", errors);
    }
    return zkStatus;
  }

