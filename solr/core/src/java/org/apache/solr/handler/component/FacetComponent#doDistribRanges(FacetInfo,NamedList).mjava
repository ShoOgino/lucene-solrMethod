  //
  // The implementation below uses the first encountered shard's
  // facet_ranges as the basis for subsequent shards' data to be merged.
  private void doDistribRanges(FacetInfo fi, NamedList facet_counts) {
    @SuppressWarnings("unchecked")
    SimpleOrderedMap<SimpleOrderedMap<Object>> facet_ranges =
      (SimpleOrderedMap<SimpleOrderedMap<Object>>)
      facet_counts.get("facet_ranges");

    if (facet_ranges != null) {

      // go through each facet_range
      for (Map.Entry<String,SimpleOrderedMap<Object>> entry : facet_ranges) {
        final String field = entry.getKey();
        if (fi.rangeFacets.get(field) == null) {
          // first time we've seen this field, no merging
          fi.rangeFacets.add(field, entry.getValue());

        } else {
          // not the first time, merge current field counts

          @SuppressWarnings("unchecked")
          NamedList<Integer> shardFieldValues
            = (NamedList<Integer>) entry.getValue().get("counts");

          @SuppressWarnings("unchecked")
          NamedList<Integer> existFieldValues
            = (NamedList<Integer>) fi.rangeFacets.get(field).get("counts");

          for (Map.Entry<String,Integer> existPair : existFieldValues) {
            final String key = existPair.getKey();
            // can be null if inconsistencies in shards responses
            Integer newValue = shardFieldValues.get(key);
            if  (null != newValue) {
              Integer oldValue = existPair.getValue();
              existPair.setValue(oldValue + newValue);
            }
          }
        }
      }
    }
  }

