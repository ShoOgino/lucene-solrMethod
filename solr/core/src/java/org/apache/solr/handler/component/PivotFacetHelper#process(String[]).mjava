  public SimpleOrderedMap<List<NamedList<Object>>> process(String[] pivots) throws IOException {
    if (!rb.doFacets || pivots == null) 
      return null;

    SimpleOrderedMap<List<NamedList<Object>>> pivotResponse = new SimpleOrderedMap<List<NamedList<Object>>>();
    for (String pivot : pivots) {
      //ex: pivot == "features,cat" or even "{!ex=mytag}features,cat"
      try {
        this.parseParams(FacetParams.FACET_PIVOT, pivot);
      } catch (ParseException e) {
        throw new SolrException(ErrorCode.BAD_REQUEST, e);
      }
      pivot = facetValue;//facetValue potentially modified from parseParams()

      String[] fields = pivot.split(",");

      if( fields.length < 2 ) {
        throw new SolrException( ErrorCode.BAD_REQUEST,
            "Pivot Facet needs at least two fields: "+pivot );
      }

      String field = fields[0];
      String subField = fields[1];
      Deque<String> fnames = new LinkedList<String>();
      for( int i=fields.length-1; i>1; i-- ) {
        fnames.push( fields[i] );
      }

      NamedList<Integer> superFacets = this.getTermCounts(field);

      //super.key usually == pivot unless local-param 'key' used
      pivotResponse.add(key, doPivots(superFacets, field, subField, fnames, docs));
    }
    return pivotResponse;
  }

