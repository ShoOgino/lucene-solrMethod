  private void handleGET(SolrQueryRequest req, SolrQueryResponse rsp) {
    try {
      String path = (String) req.getContext().get("path");
      switch (path) {
        case "/schema":
          rsp.add(IndexSchema.SCHEMA, req.getSchema().getNamedPropertyValues());
          break;
        case "/schema/version":
          rsp.add(IndexSchema.VERSION, req.getSchema().getVersion());
          break;
        case "/schema/uniquekey":
          rsp.add(IndexSchema.UNIQUE_KEY, req.getSchema().getUniqueKeyField().getName());
          break;
        case "/schema/similarity":
          rsp.add(IndexSchema.SIMILARITY, req.getSchema().getSimilarityFactory().getNamedPropertyValues());
          break;
        case "/schema/name": {
          final String schemaName = req.getSchema().getSchemaName();
          if (null == schemaName) {
            String message = "Schema has no name";
            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, message);
          }
          rsp.add(IndexSchema.NAME, schemaName);
          break;
        }
        case "/schema/zkversion": {
          int refreshIfBelowVersion = req.getParams().getInt("refreshIfBelowVersion");
          int zkVersion = -1;
          IndexSchema schema = req.getSchema();
          if (schema instanceof ManagedIndexSchema) {
            ManagedIndexSchema managed = (ManagedIndexSchema) schema;
            zkVersion = managed.getSchemaZkVersion();
            if (refreshIfBelowVersion != -1 && zkVersion < refreshIfBelowVersion) {
              log.info("REFRESHING SCHEMA (refreshIfBelowVersion={}, currentVersion={}) before returning version!"
                  , refreshIfBelowVersion, zkVersion);
              ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) req.getCore().getResourceLoader();
              ZkIndexSchemaReader zkIndexSchemaReader = zkSolrResourceLoader.getZkIndexSchemaReader();
              managed = zkIndexSchemaReader.refreshSchemaFromZk(refreshIfBelowVersion);
              zkVersion = managed.getSchemaZkVersion();
            }
          }
          rsp.add("zkversion", zkVersion);
          break;
        }
        default: {
          List<String> parts = StrUtils.splitSmart(path, '/', true);
          if (parts.size() > 1 && level2.containsKey(parts.get(1))) {
            String realName = parts.get(1);
            String fieldName = IndexSchema.nameMapping.get(realName);

            String pathParam = level2.get(realName);
            if (parts.size() > 2) {
              req.setParams(SolrParams.wrapDefaults(new MapSolrParams(singletonMap(pathParam, parts.get(2))), req.getParams()));
            }
            @SuppressWarnings({"rawtypes"})
            Map propertyValues = req.getSchema().getNamedPropertyValues(realName, req.getParams());
            Object o = propertyValues.get(fieldName);
            if(parts.size()> 2) {
              String name = parts.get(2);
              if (o instanceof List) {
                @SuppressWarnings({"rawtypes"})
                List list = (List) o;
                for (Object obj : list) {
                  if (obj instanceof SimpleOrderedMap) {
                    @SuppressWarnings({"rawtypes"})
                    SimpleOrderedMap simpleOrderedMap = (SimpleOrderedMap) obj;
                    if(name.equals(simpleOrderedMap.get("name"))) {
                      rsp.add(fieldName.substring(0, realName.length() - 1), simpleOrderedMap);
                      insertPackageInfo(rsp.getValues(), req);
                      return;
                    }
                  }
                }
              }
              throw new SolrException(SolrException.ErrorCode.NOT_FOUND, "No such path " + path);
            } else {
              rsp.add(fieldName, o);
            }
            insertPackageInfo(rsp.getValues(), req);
            return;
          }

          throw new SolrException(SolrException.ErrorCode.NOT_FOUND, "No such path " + path);
        }
      }

    } catch (Exception e) {
      rsp.setException(e);
    }
  }

