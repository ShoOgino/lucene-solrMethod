  @Override
  public void execute(CoreAdminHandler.CallInfo it) throws Exception {
    final SolrParams params = it.req.getParams();
    String cname = params.get(CoreAdminParams.CORE);
    if (cname == null) {
      throw new IllegalArgumentException(CoreAdminParams.CORE + " is required");
    }

    String name = params.get(NAME);
    if (name == null) {
      throw new IllegalArgumentException(CoreAdminParams.NAME + " is required");
    }

    String repoName = params.get(CoreAdminParams.BACKUP_REPOSITORY);
    BackupRepository repository = it.handler.coreContainer.newBackupRepository(Optional.ofNullable(repoName));

    String location = repository.getBackupLocation(params.get(CoreAdminParams.BACKUP_LOCATION));
    if (location == null) {
      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, "'location' is not specified as a query"
          + " parameter or as a default repository property");
    }

    // An optional parameter to describe the snapshot to be backed-up. If this
    // parameter is not supplied, the latest index commit is backed-up.
    String commitName = params.get(CoreAdminParams.COMMIT_NAME);

    URI locationUri = repository.createURI(location);
    try (SolrCore core = it.handler.coreContainer.getCore(cname)) {
      SnapShooter snapShooter = new SnapShooter(repository, core, locationUri, name, commitName);
      // validateCreateSnapshot will create parent dirs instead of throw; that choice is dubious.
      //  But we want to throw. One reason is that
      //  this dir really should, in fact must, already exist here if triggered via a collection backup on a shared
      //  file system. Otherwise, perhaps the FS location isn't shared -- we want an error.
      if (!snapShooter.getBackupRepository().exists(snapShooter.getLocation())) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
            "Directory to contain snapshots doesn't exist: " + snapShooter.getLocation());
      }
      snapShooter.validateCreateSnapshot();
      snapShooter.createSnapshot();
    } catch (Exception e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
          "Failed to backup core=" + cname + " because " + e, e);
    }
  }

