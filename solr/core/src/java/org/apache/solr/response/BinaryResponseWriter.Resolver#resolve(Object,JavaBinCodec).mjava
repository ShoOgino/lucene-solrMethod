    @Override
    public Object resolve(Object o, JavaBinCodec codec) throws IOException {
      if (o instanceof StoredField) {
        CharSequence val = ((StoredField) o).getCharSequenceValue();
        if (val instanceof Utf8CharSequence) {
          codec.writeUTF8Str((Utf8CharSequence) val);
          return null;
        }
      }
      if (o instanceof ResultContext) {
        ReturnFields orig = returnFields;
        ResultContext res = (ResultContext)o;
        if(res.getReturnFields()!=null) {
          returnFields = res.getReturnFields();
        }
//        if (useUtf8CharSeq) {
        ResultContext.READASBYTES.set(fieldName -> {
          SchemaField fld = res.getRequest().getSchema().getFieldOrNull(fieldName);
          return fld != null && fld.getType().isUtf8Field();
        });

        try {
          writeResults(res, codec);
        } finally {
          ResultContext.READASBYTES.remove();
        }
        returnFields = orig;

        return null; // null means we completely handled it
      }
      if (o instanceof DocList) {
        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);
        writeResults(ctx, codec);
        return null; // null means we completely handled it
      }
      if( o instanceof IndexableField ) {
        if(schema == null) schema = solrQueryRequest.getSchema();

        IndexableField f = (IndexableField)o;
        SchemaField sf = schema.getFieldOrNull(f.name());
        try {
          o = DocsStreamer.getValue(sf, f);
        } catch (Exception e) {
          log.warn("Error reading a field : {}", o, e);
        }
      }
      return o;
    }

