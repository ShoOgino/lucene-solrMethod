  @Override
  public DocTransformer create(String display, SolrParams params, SolrQueryRequest req) {

    String fname = params.get("f", display);
    if(fname.startsWith("[") && fname.endsWith("]")) {
      fname = display.substring(1,display.length()-1);
    }
    SchemaField sf = req.getSchema().getFieldOrNull(fname);
    if(sf==null) {
      throw new SolrException(ErrorCode.BAD_REQUEST, 
          this.getClass().getSimpleName() +" using unknown field: "+fname);
    }
    if(!(sf.getType() instanceof AbstractSpatialFieldType)) {
      throw new SolrException(ErrorCode.BAD_REQUEST, 
          "GeoTransformer requested non-spatial field: "+fname + " ("+sf.getType().getClass().getSimpleName()+")");
    }

    final GeoFieldUpdater updater = new GeoFieldUpdater();
    updater.field = fname;
    updater.display = display;
    updater.display_error = display+"_error"; 
        
    final ShapeValuesSource shapes;
    AbstractSpatialFieldType<?> sdv = (AbstractSpatialFieldType<?>)sf.getType();
    SpatialStrategy strategy = sdv.getStrategy(fname);
    if(strategy instanceof CompositeSpatialStrategy) {
      shapes = ((CompositeSpatialStrategy)strategy)
          .getGeometryStrategy().makeShapeValueSource();
    }
    else if(strategy instanceof SerializedDVStrategy) {
      shapes = ((SerializedDVStrategy)strategy)
          .makeShapeValueSource();
    }
    else
      shapes = null;
    
    
    String writerName = params.get("w", "GeoJSON");
    updater.formats = strategy.getSpatialContext().getFormats();
    updater.writer = updater.formats.getWriter(writerName);
    if(updater.writer==null) {
      StringBuilder str = new StringBuilder();
      str.append( "Unknown Spatial Writer: " ).append(writerName);
      str.append(" [");
      for(ShapeWriter w : updater.formats.getWriters()) {
        str.append(w.getFormatName()).append(' ');
      }
      str.append("]");
      throw new SolrException(ErrorCode.BAD_REQUEST, str.toString());
    }
    
    QueryResponseWriter qw = req.getCore().getQueryResponseWriter(req);
    updater.isJSON =
        (qw.getClass() == JSONResponseWriter.class) &&
        (updater.writer instanceof GeoJSONWriter);


    // Using ValueSource
    if(shapes!=null) {
      return new DocTransformer() {
        @Override
        public String getName() {
          return display;
        }

        @Override
        public void transform(SolrDocument doc, int docid) throws IOException {
          int leafOrd = ReaderUtil.subIndex(docid, context.getSearcher().getTopReaderContext().leaves());
          LeafReaderContext ctx = context.getSearcher().getTopReaderContext().leaves().get(leafOrd);
          ShapeValues values = shapes.getValues(ctx);
          int segmentDoc = docid - ctx.docBase;
          if (values.advanceExact(segmentDoc)) {
            updater.setValue(doc, values.value());
          }
        }
      };

    }
    
    // Using the raw stored values
    return new DocTransformer() {
      
      @Override
      public void transform(SolrDocument doc, int docid) throws IOException {
        Object val = doc.remove(updater.field);
        if(val!=null) {
          updater.setValue(doc, val);
        }
      }
      
      @Override
      public String getName() {
        return updater.display;
      }

      @Override
      public String[] getExtraRequestFields() {
        return new String[] {updater.field};
      }
    };
  }

