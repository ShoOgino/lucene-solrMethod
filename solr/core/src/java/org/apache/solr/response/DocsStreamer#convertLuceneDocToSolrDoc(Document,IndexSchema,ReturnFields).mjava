  /**
   * Converts the specified <code>Document</code> into a <code>SolrDocument</code>.
   * <p>
   * The use of {@link ReturnFields} can be important even when it was already used to retrieve the 
   * {@link Document} from {@link SolrDocumentFetcher} because the Document may have been cached with 
   * more fields then are desired.
   * </p>
   * 
   * @param doc <code>Document</code> to be converted, must not be null
   * @param schema <code>IndexSchema</code> containing the field/fieldType details for the index
   *               the <code>Document</code> came from, must not be null.
   * @param fields <code>ReturnFields</code> instance that can be use to limit the set of fields 
   *               that will be converted, must not be null
   */
  public static SolrDocument convertLuceneDocToSolrDoc(Document doc,
                                                       final IndexSchema schema,
                                                       final ReturnFields fields) {
    // TODO move to SolrDocumentFetcher ?  Refactor to also call docFetcher.decorateDocValueFields(...) ?
    assert null != doc;
    assert null != schema;
    assert null != fields;
    
    // can't just use fields.wantsField(String)
    // because that doesn't include extra fields needed by transformers
    final Set<String> fieldNamesNeeded = fields.getLuceneFieldNames();

    BinaryResponseWriter.MaskCharSeqSolrDocument masked = null;
    final SolrDocument out = ResultContext.READASBYTES.get() == null ?
        new SolrDocument() :
        (masked = new BinaryResponseWriter.MaskCharSeqSolrDocument());

    // NOTE: it would be tempting to try and optimize this to loop over fieldNamesNeeded
    // when it's smaller then the IndexableField[] in the Document -- but that's actually *less* effecient
    // since Document.getFields(String) does a full (internal) iteration over the full IndexableField[]
    // see SOLR-11891
    for (IndexableField f : doc.getFields()) {
      final String fname = f.name();
      if (null == fieldNamesNeeded || fieldNamesNeeded.contains(fname) ) {
        // Make sure multivalued fields are represented as lists
        Object existing = masked == null ? out.get(fname) : masked.getRaw(fname);
        if (existing == null) {
          SchemaField sf = schema.getFieldOrNull(fname);
          if (sf != null && sf.multiValued()) {
            List<Object> vals = new ArrayList<>();
            vals.add(f);
            out.setField(fname, vals);
          } else {
            out.setField(fname, f);
          }
        } else {
          out.addField(fname, f);
        }
      }
    }
    return out;
  }

