  @Override
  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {
    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine

    Template template = getTemplate(engine, request);

    VelocityContext context = new VelocityContext();

    context.put("request", request);

    // Turn the SolrQueryResponse into a SolrResponse.
    // QueryResponse has lots of conveniences suitable for a view
    // Problem is, which SolrResponse class to use?
    // One patch to SOLR-620 solved this by passing in a class name as
    // as a parameter and using reflection and Solr's class loader to
    // create a new instance.  But for now the implementation simply
    // uses QueryResponse, and if it chokes in a known way, fall back
    // to bare bones SolrResponseBase.
    // TODO: Can this writer know what the handler class is?  With echoHandler=true it can get its string name at least
    SolrResponse rsp = new QueryResponse();
    NamedList<Object> parsedResponse = BinaryResponseWriter.getParsedResponse(request, response);
    try {
      rsp.setResponse(parsedResponse);

      // page only injected if QueryResponse works
      context.put("page", new PageTool(request, response));  // page tool only makes sense for a SearchHandler request... *sigh*
    } catch (ClassCastException e) {
      // known edge case where QueryResponse's extraction assumes "response" is a SolrDocumentList
      // (AnalysisRequestHandler emits a "response")
      e.printStackTrace();
      rsp = new SolrResponseBase();
      rsp.setResponse(parsedResponse);
    }
    context.put("response", rsp);

    // Velocity context tools - TODO: make these pluggable
    context.put("esc", new EscapeTool());
    context.put("date", new ComparisonDateTool());
    context.put("list", new ListTool());
    context.put("math", new MathTool());
    context.put("number", new NumberTool());
    context.put("sort", new SortTool());

    context.put("engine", engine);  // for $engine.resourceExists(...)

    // Mimetype to extension map for detecting file type and show icon
    // List of types match the icons in /solr/img/filetypes
    Map<String, String> mimeToExt = new HashMap<String, String>() {{
      put("application/x-7z-compressed", "7z");
      put("application/postscript", "ai");
      put("application/pgp-signature", "asc");
      put("application/octet-stream", "bin");
      put("application/x-bzip2", "bz2");
      put("text/x-c", "c");
      put("application/vnd.ms-htmlhelp", "chm");
      put("application/java-vm", "class");
      put("text/css", "css");
      put("text/csv", "csv");
      put("application/x-debian-package", "deb");
      put("application/msword", "doc");
      put("message/rfc822", "eml");
      put("image/gif", "gif");
      put("application/winhlp", "hlp");
      put("text/html", "html");
      put("application/java-archive", "jar");
      put("text/x-java-source", "java");
      put("image/jpeg", "jpeg");
      put("application/javascript", "js");
      put("application/vnd.oasis.opendocument.chart", "odc");
      put("application/vnd.oasis.opendocument.formula", "odf");
      put("application/vnd.oasis.opendocument.graphics", "odg");
      put("application/vnd.oasis.opendocument.image", "odi");
      put("application/vnd.oasis.opendocument.presentation", "odp");
      put("application/vnd.oasis.opendocument.spreadsheet", "ods");
      put("application/vnd.oasis.opendocument.text", "odt");
      put("application/pdf", "pdf");
      put("application/pgp-encrypted", "pgp");
      put("image/png", "png");
      put("application/vnd.ms-powerpoint", "ppt");
      put("audio/x-pn-realaudio", "ram");
      put("application/x-rar-compressed", "rar");
      put("application/vnd.rn-realmedia", "rm");
      put("application/rtf", "rtf");
      put("application/x-shockwave-flash", "swf");
      put("application/vnd.sun.xml.calc", "sxc");
      put("application/vnd.sun.xml.draw", "sxd");
      put("application/vnd.sun.xml.impress", "sxi");
      put("application/vnd.sun.xml.writer", "sxw");
      put("application/x-tar", "tar");
      put("application/x-tex", "tex");
      put("text/plain", "txt");
      put("text/x-vcard", "vcf");
      put("application/vnd.visio", "vsd");
      put("audio/x-wav", "wav");
      put("audio/x-ms-wma", "wma");
      put("video/x-ms-wmv", "wmv");
      put("application/vnd.ms-excel", "xls");
      put("application/xml", "xml");
      put("application/x-xpinstall", "xpi");
      put("application/zip", "zip");
    }};
    context.put("mimeToExt", mimeToExt);
    
    String layout_template = request.getParams().get("v.layout");
    String json_wrapper = request.getParams().get("v.json");
    boolean wrap_response = (layout_template != null) || (json_wrapper != null);

    // create output, optionally wrap it into a json object
    if (wrap_response) {
      StringWriter stringWriter = new StringWriter();
      template.merge(context, stringWriter);

      if (layout_template != null) {
        context.put("content", stringWriter.toString());
        stringWriter = new StringWriter();
        try {
          engine.getTemplate(layout_template + ".vm").merge(context, stringWriter);
        } catch (Exception e) {
          throw new IOException(e.getMessage());
        }
      }

      if (json_wrapper != null) {
        writer.write(request.getParams().get("v.json") + "(");
        writer.write(getJSONWrap(stringWriter.toString()));
        writer.write(')');
      } else {  // using a layout, but not JSON wrapping
        writer.write(stringWriter.toString());
      }
    } else {
      template.merge(context, writer);
    }
  }

