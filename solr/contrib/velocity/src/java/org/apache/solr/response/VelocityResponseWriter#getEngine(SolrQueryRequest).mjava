  private VelocityEngine getEngine(SolrQueryRequest request) {
    VelocityEngine engine = new VelocityEngine();

    engine.setProperty("params.resource.loader.instance", new SolrParamResourceLoader(request));
    SolrVelocityResourceLoader resourceLoader =
        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());
    engine.setProperty("solr.resource.loader.instance", resourceLoader);

    File fileResourceLoaderBaseDir = null;
    try {
      String template_root = request.getParams().get("v.base_dir");
      fileResourceLoaderBaseDir = new File(request.getCore().getResourceLoader().getConfigDir(), "velocity");
      if (template_root != null) {
        fileResourceLoaderBaseDir = new File(template_root);
      }
    } catch (SolrException e) {
      // no worries... probably in ZooKeeper mode and getConfigDir() isn't available, so we'll just ignore omit
      // the file system resource loader
    }

    if (fileResourceLoaderBaseDir != null) {
      engine.setProperty(RuntimeConstants.FILE_RESOURCE_LOADER_PATH, fileResourceLoaderBaseDir.getAbsolutePath());
      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, "params,file,solr");
    } else {
      engine.setProperty(RuntimeConstants.RESOURCE_LOADER, "params,solr");
    }

    // TODO: Externalize Velocity properties
    String propFile = request.getParams().get("v.properties");
    try {
      if (propFile == null)
        engine.init();
      else {
        InputStream is = null;
        try {
          is = resourceLoader.getResourceStream(propFile);
          Properties props = new Properties();
          props.load(is);
          engine.init(props);
        }
        finally {
          if (is != null) is.close();
        }
      }
    }
    catch (Exception e) {
      throw new RuntimeException(e);
    }

    return engine;
  }

