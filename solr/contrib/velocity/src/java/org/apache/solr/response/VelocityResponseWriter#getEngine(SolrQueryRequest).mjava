  private VelocityEngine getEngine(SolrQueryRequest request) {
    VelocityEngine engine = new VelocityEngine();

    engine.setProperty("params.resource.loader.instance", new SolrParamResourceLoader(request));
    SolrVelocityResourceLoader resourceLoader =
        new SolrVelocityResourceLoader(request.getCore().getSolrConfig().getResourceLoader());
    engine.setProperty("solr.resource.loader.instance", resourceLoader);
    engine.setProperty(RuntimeConstants.RESOURCE_LOADER, "params,solr");

    // TODO: Externalize Velocity properties
    String propFile = request.getParams().get("v.properties");
    try {
      Properties props = new Properties();
      // Don't create a separate velocity log file by default.
      props.put(RuntimeConstants.RUNTIME_LOG, "");

      if (propFile == null) {
        engine.init(props);
      } else {
        InputStream is = null;
        try {
          is = resourceLoader.getResourceStream(propFile);
          props.load(new InputStreamReader(is, StandardCharsets.UTF_8));
          engine.init(props);
        }
        finally {
          if (is != null) is.close();
        }
      }
    }
    catch (Exception e) {
      throw new RuntimeException(e);
    }

    return engine;
  }

