  /**
   * Detects language(s) from a reader, typically based on some fields in SolrInputDocument
   * Classes wishing to implement their own language detection module should override this method.
   *
   * @param solrDocReader A reader serving the text from the document to detect
   * @return List of detected language(s) according to RFC-3066
   */
  @Override
  protected List<DetectedLanguage> detectLanguage(Reader solrDocReader) {
    try {
      Detector detector = DetectorFactory.create();
      detector.setMaxTextLength(maxTotalChars);

      // TODO Work around bug in LangDetect 1.1 which does not expect a -1 return value at end of stream,
      // but instead only looks at ready()
      if (solrDocReader instanceof SolrInputDocumentReader) {
        ((SolrInputDocumentReader)solrDocReader).setEodReturnValue(0);
      }
      detector.append(solrDocReader);

      ArrayList<Language> langlist = detector.getProbabilities();
      ArrayList<DetectedLanguage> solrLangList = new ArrayList<>();
      for (Language l: langlist) {
        solrLangList.add(new DetectedLanguage(l.lang, l.prob));
      }
      return solrLangList;
    } catch (LangDetectException e) {
      log.debug("Could not determine language, returning empty list: ", e);
      return Collections.emptyList();
    } catch (IOException e) {
      log.warn("Could not determine language.", e);
      return Collections.emptyList();
    }
  }

