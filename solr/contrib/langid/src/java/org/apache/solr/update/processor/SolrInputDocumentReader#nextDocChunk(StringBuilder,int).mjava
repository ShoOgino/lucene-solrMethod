  private int nextDocChunk(StringBuilder sb, int maxChunkLength) {
    if (currentFieldIdx > fields.length-1) {
      return returnEod();
    }

    int startFieldValueIdx = currentFieldValueIdx;
    int startFieldValueOffset = currentFieldValueOffset;
    
    do {
      SolrInputField f = doc.getField(fields[currentFieldIdx]);
      if (f == null) {
        log.debug("Field with name {} did not exist on docuemnt.", fields[currentFieldIdx]);
        incField(sb);
        continue;
      }
      Iterator<Object> fvIt = f.iterator();
      currentFieldValueIdx = -1;
      while (fvIt.hasNext() && sb.length() < maxChunkLength) {
        currentFieldValueIdx++;
        String fvStr = String.valueOf(fvIt.next());
        if (currentFieldValueIdx < startFieldValueIdx) continue;
        startFieldValueIdx = 0;
        if (sb.length() > 0) {
          if (maxChunkLength - sb.length() < fieldValueSep.length()) {
            sb.append(fieldValueSep.substring(0,maxChunkLength - sb.length()));
          } else {
            sb.append(fieldValueSep);
          }
        }
        currentFieldValueOffset = startFieldValueOffset;
        startFieldValueOffset = 0;
        int charsNeeded = maxChunkLength - sb.length();
        int endOffset = fvStr.length();
        if (fvStr.length() - currentFieldValueOffset > charsNeeded) {
          endOffset = currentFieldValueOffset + charsNeeded;
        }
        if (endOffset - currentFieldValueOffset > maxCharsPerFieldValue) {
          endOffset = maxCharsPerFieldValue - currentFieldValueOffset;
        }
        sb.append(fvStr.substring(currentFieldValueOffset, endOffset));
        currentFieldValueOffset = endOffset == fvStr.length() ? 0 : endOffset;
      }
      if (sb.length() >= maxChunkLength) {
        return returnValue(sb);
      } else {
        incField(sb);
      }
    } while (currentFieldIdx <= fields.length-1 && sb.length() < maxChunkLength);
    return sb.length() == 0 ? eodReturnValue : sb.length();
  }

