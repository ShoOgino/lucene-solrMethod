  @Test
  public void testKeepOrig() throws Exception {
    ModifiableSolrParams parameters = new ModifiableSolrParams();
    parameters.set("langid.enforceSchema", "false");
    parameters.set("langid.langField", "language");
    parameters.set("langid.langsField", "languages");
    parameters.set("langid.fl", "text");
    parameters.set("langid.map", "true");
    parameters.set("langid.map.keepOrig", "false");
    liProcessor = createLangIdProcessor(parameters);

    SolrInputDocument mappedNoOrig = process(englishDoc());
    assertEquals("text_en", liProcessor.getMappedField("text", "en"));
    assertEquals("en", mappedNoOrig.getFieldValue("language"));
    assertTrue(mappedNoOrig.containsKey("text_en"));
    assertFalse(mappedNoOrig.containsKey("text"));
    
    // keepOrig true
    parameters.set("langid.map.keepOrig", "true");
    liProcessor = createLangIdProcessor(parameters);

    SolrInputDocument mappedKeepOrig = process(englishDoc());
    assertTrue(mappedKeepOrig.containsKey("text_en"));
    assertTrue(mappedKeepOrig.containsKey("text"));
    assertEquals(englishDoc().getFieldValue("text"), mappedKeepOrig.getFieldValue("text_en"));
    
    // keepOrig and map individual
    parameters.set("langid.map.individual", "true");
    parameters.set("langid.fl", "text,text2");
    liProcessor = createLangIdProcessor(parameters);

    SolrInputDocument mappedIndividual = process(languagePerFieldDoc());
    assertTrue(mappedIndividual.containsKey("text_en"));
    assertTrue(mappedIndividual.containsKey("text"));
    assertTrue(mappedIndividual.containsKey("text2_ru"));
    assertTrue(mappedIndividual.containsKey("text2"));
    assertEquals(languagePerFieldDoc().getFieldValue("text"), mappedIndividual.getFieldValue("text_en"));
  }

