  private static RangeFacet constructRangeFacet(String name, AnalyticsRangeFacetRequest facetRequest, IndexSchema schema) throws SolrException {
    if (facetRequest.field == null || facetRequest.field.length() == 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Range Facets must specify a field to facet over, '" +name + "' does not.");
    }
    SchemaField field = schema.getFieldOrNull(facetRequest.field);
    if (field == null) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Range Facets must have a valid field as the second parameter. The '" + name + "' facet "
          + "tries to facet over the non-existent field: " + facetRequest.field);
    }

    if (facetRequest.start == null || facetRequest.start.length() == 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Range Facets must specify a start value, '" +name + "' does not.");
    }
    if (facetRequest.end == null || facetRequest.end.length() == 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Range Facets must specify a end value, '" +name + "' does not.");
    }
    if (facetRequest.gaps == null || facetRequest.gaps.size() == 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Range Facets must specify a gap or list of gaps to determine facet buckets, '" +name + "' does not.");
    }
    RangeFacet facet = new RangeFacet(name, field, facetRequest.start, facetRequest.end, facetRequest.gaps);

    facet.setHardEnd(facetRequest.hardend);

    if (facetRequest.include != null && facetRequest.include.size() > 0) {
      facet.setInclude(constructInclude(facetRequest.include));
    }
    if (facetRequest.others != null && facetRequest.others.size() > 0) {
      facet.setOthers(constructOthers(facetRequest.others, name));
    }
    return facet;
  }

