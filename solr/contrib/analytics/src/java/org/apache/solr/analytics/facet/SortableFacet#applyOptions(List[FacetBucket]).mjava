  /**
   * Apply the sorting options to the given facet results.
   *
   * @param facetResults to apply sorting options to
   * @return the sorted results
   */
  @SuppressWarnings({"unchecked", "rawtypes"})
  protected Iterable<FacetBucket> applyOptions(List<FacetBucket> facetResults) {
    // Sorting the buckets if a sort specification is provided
    if (sort == null || facetResults.isEmpty()) {
      return facetResults;
    }
    Comparator comp = sort.getComparator();
    Collections.sort(facetResults, comp);

    Iterable<FacetBucket> facetResultsIter = facetResults;
    // apply the limit
    if (sort.getLimit() > 0) {
      if (sort.getOffset() > 0) {
        facetResultsIter = Iterables.skip(facetResultsIter, sort.getOffset());
      }
      facetResultsIter = Iterables.limit(facetResultsIter, sort.getLimit());
    } else if (sort.getLimit() == 0) {
      return new LinkedList<FacetBucket>();
    }
    return facetResultsIter;
  }

