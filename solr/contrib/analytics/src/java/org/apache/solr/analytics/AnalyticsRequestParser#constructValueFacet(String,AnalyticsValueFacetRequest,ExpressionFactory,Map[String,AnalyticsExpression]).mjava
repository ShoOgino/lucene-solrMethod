  private static ValueFacet constructValueFacet(String name, AnalyticsValueFacetRequest facetRequest, ExpressionFactory expressionFactory, Map<String, AnalyticsExpression> expressions) throws SolrException {
    if (facetRequest.expression == null) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Value Facets must contain a mapping expression to facet over, '" + name + "' has none.");
    }

    // The second parameter must be a mapping expression
    AnalyticsValueStream expr = expressionFactory.createExpression(facetRequest.expression);
    if (!expr.getExpressionType().isUnreduced()) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Value Facet expressions must be mapping expressions, "
          + "the following expression in value facet '" + name + "' contains a reduction: " + facetRequest.expression);
    }
    if (!(expr instanceof StringValueStream)) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Value Facet expressions must be castable to string expressions, "
          + "the following expression in value facet '" + name + "' is not: " + facetRequest.expression);
    }

    ValueFacet facet = new ValueFacet(name, (StringValueStream)expr);

    // Check if the value facet is sorted
    if (facetRequest.sort != null) {
      facet.setSort(constructSort(facetRequest.sort, expressions));
    }
    return facet;
  }

