  /**
   * Returns the value of an expression to use in a range or query facet.
   * @param expressionName the name of the expression
   * @param fieldFacet the facet field
   * @param facetValue the facet value
   * @return String String representation of pivot value
   */
  @SuppressWarnings({ "deprecation", "rawtypes" })
  public String getResult(String expressionName, String fieldFacet, String facetValue) {
    if (facetValue.contains(AnalyticsParams.RESULT) && !facetValue.contains(AnalyticsParams.QUERY_RESULT)) {
      try {
        String[] pivotStr = ExpressionFactory.getArguments(facetValue.substring(facetValue.indexOf('(')+1,facetValue.lastIndexOf(')')).trim());
        if (pivotStr.length==1) {
          facetValue = getResult(pivotStr[0]);
        } else if (pivotStr.length==3) {
          facetValue = getResult(pivotStr[0],pivotStr[1],pivotStr[2]);
        } else {
          throw new SolrException(ErrorCode.BAD_REQUEST, "Result request "+facetValue+" has an invalid amount of arguments.");
        }
      } catch (IndexOutOfBoundsException e) {
        throw new SolrException(ErrorCode.BAD_REQUEST, "Result request "+facetValue+" is invalid. Lacks parentheses.",e);
      }
    } 
    if (fieldFacetExpressions.get(fieldFacet)!=null) {
      Expression[] facetExpressions = fieldFacetExpressions.get(fieldFacet).get(facetValue);
      for (int count = 0; count < expressionNames.length; count++) {
        if (expressionName.equals(expressionNames[count])) {
          Comparable value = facetExpressions[count].getValue();
          if (value.getClass().equals(Date.class)) {
            return TrieDateField.formatExternal((Date)value);
          } else {
            return value.toString();
          }
        }
      }
    }
    throw new SolrException(ErrorCode.BAD_REQUEST,"Field Facet Pivot expression "+expressionName+" not found.");
  }

