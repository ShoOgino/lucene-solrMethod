  @SuppressWarnings({"unchecked", "rawtypes"})
  private static PivotNode<?> constructPivot(AnalyticsPivotRequest pivotRequest,
                                      PivotNode<?> childPivot,
                                      ExpressionFactory expressionFactory,
                                      Map<String, AnalyticsExpression> expressions) throws SolrException {
    if (pivotRequest.name == null || pivotRequest.name.length() == 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Pivots must have a name.");
    }
    if (pivotRequest.expression == null) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Pivots must have an expression to facet over, '" + pivotRequest.name + "' does not.");
    }
    
    // The second parameter must be a mapping expression
    AnalyticsValueStream expr = expressionFactory.createExpression(pivotRequest.expression);
    if (!expr.getExpressionType().isUnreduced()) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Pivot expressions must be mapping expressions, "
          + "the following expression in pivot '" + pivotRequest.name + "' contains a reduction: " + pivotRequest.expression);
    }
    if (!(expr instanceof StringValueStream)) {
      throw new SolrException(ErrorCode.BAD_REQUEST, "Pivot expressions must be castable to string expressions, "
          + "the following expression in pivot '" + pivotRequest.name + "' is not: '" + pivotRequest.expression);
    }
    
    PivotNode<?> pivot;
    if (childPivot == null) {
      pivot = new PivotNode.PivotLeaf(pivotRequest.name, (StringValueStream)expr);
    } else {
      pivot = new PivotNode.PivotBranch(pivotRequest.name, (StringValueStream)expr, childPivot);
    }
    
    // Check if the pivot is sorted
    if (pivotRequest.sort != null) {
      pivot.setSort(constructSort(pivotRequest.sort, expressions));
    }
    return pivot;
  }

