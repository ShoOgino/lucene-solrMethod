  /**
   * Creates a function that maps two strings to a single string.
   * This can take the following shapes:
   * <ul>
   * <li> Taking in two single-valued expressions and returning a single-valued expression which represents the lambda combination of the inputs.
   * <li> Taking in a single-valued expression and a multi-valued expression and returning a multi-valued expression which
   * represents the lambda combination of the single-value input with each of the values of the multi-value input.
   * <br>
   * The inputs can be either {@code func(single,multi)} or {@code func(multi,single)}.
   * </ul>
   * <p>
   *
   * @param name name for the function
   * @param lambda the function to be applied to every value: {@code (String,String) -> String}
   * @param param1 the first parameter in the lambda
   * @param param2 the second parameter in the lambda
   * @return a single or multi valued expression combining the two parameters with the given lambda
   * @throws SolrException if neither parameter is single-valued
   */
  public static StringValueStream createStringLambdaFunction(String name, TwoStringInStringOutLambda lambda, StringValueStream param1, StringValueStream param2) throws SolrException {
    if (param1 instanceof StringValue && param2 instanceof StringValue) {
      return new TwoStringValueInStringValueOutFunction(name,lambda,(StringValue)param1,(StringValue)param2);
    } else if (param1 instanceof StringValue) {
      return new StringValueStringStreamInStringStreamOutFunction(name,lambda,(StringValue)param1,param2);
    } else if (param2 instanceof StringValue) {
      return new StringStreamStringValueInStringStreamOutFunction(name,lambda,param1,(StringValue)param2);
    } else {
      throw new SolrException(ErrorCode.BAD_REQUEST,"The "+name+" function requires at least 1 single-valued parameter.");
    }
  }

