  /**
   * Create an expression from the given expression string, with the given variable function information.
   *
   * @param expressionStr string that represents the desired expression
   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function
   * return signature, the map should be empty.
   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length
   * parameter if it is included in the function signature.
   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length
   * parameter if they are included when calling the function.
   * @return the object representation of the expression
   * @throws SolrException if an error occurs while constructing the expression
   */
  private AnalyticsValueStream createExpression(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,
                                                String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {
    AnalyticsValueStream expression;
    expressionStr = expressionStr.trim();

    boolean isField = false;
    try {
      // Try to make a constant value
      expression = constantCreator.apply(expressionStr);
    } catch (SolrException e1) {
      // Not a constant
      // If the expression has parens, it is an expression otherwise it is a field
      if (!expressionStr.contains("(")) {
        // Try to make a field out of it
        expression = createField(schema.getField(expressionStr));
        isField = true;
      } else {
        // Must be a function
        expression = createFunction(expressionStr, varFuncParams, varFuncVarParamName, varFuncVarParamValues);
      }
    }

    // Try to use an already made expression instead of the new one.
    // This will decrease the amount of collection needed to be done.
    if (expressions.containsKey(expression.getExpressionStr())) {
      expression = expressions.get(expression.getExpressionStr());
      // If this is a grouped expression, make sure that the reduction info for the expression is included in the grouped reduction manager.
      if (expression.getExpressionType() == ExpressionType.REDUCTION && isGrouped) {
        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {
          groupedCollectors.put(collector.getExpressionStr(), collector);
          return collector;
        });
      }
    }
    else {
      expressions.put(expression.getExpressionStr(), expression);
      // Make sure that the reduction info for the expression is included in the reduction manager and grouped reduction manager if necessary.
      if (expression.getExpressionType() == ExpressionType.REDUCTION) {
        reductionFunctions.put(expression.getExpressionStr(), (ReductionFunction)expression);
        ((ReductionFunction)expression).synchronizeDataCollectors( collector -> {
          String collectorStr = collector.getExpressionStr();
          ReductionDataCollector<?> usedCollector = collectors.get(collectorStr);
          if (usedCollector == null) {
            usedCollector = collector;
            collectors.put(collectorStr, collector);
          }
          if (isGrouped) {
            groupedCollectors.put(collectorStr, usedCollector);
          }
          return usedCollector;
        });
      }
      // Add the field info to the reduction manager
      if (isField) {
        fields.put(expression.getExpressionStr(), (AnalyticsField)expression);
      }
    }
    // If this is a grouped expression, make sure that the field info is included in the grouped reduction manager.
    if (isField && isGrouped) {
      groupedFields.put(expression.getExpressionStr(), (AnalyticsField)expression);
    }
    return expression;
  }

