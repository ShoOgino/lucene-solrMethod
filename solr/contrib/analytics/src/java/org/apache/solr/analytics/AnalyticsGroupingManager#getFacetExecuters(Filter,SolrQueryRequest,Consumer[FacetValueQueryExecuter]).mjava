  /**
   * Create the {@link FacetValueQueryExecuter}s for all {@link AbstractSolrQueryFacet}s
   * (e.g. {@link QueryFacet} and {@link RangeFacet}) contained within this grouping.
   * The executers are returned through the given consumer.
   * 
   * <p>
   * One {@link FacetValueQueryExecuter} is created for each facet value to be returned for a facet.
   * Since every {@link AbstractSolrQueryFacet} has discrete and user-defined facet values,
   * unlike {@link StreamingFacet}s, a discrete number of {@link FacetValueQueryExecuter}s are created and returned.
   * 
   * @param filter representing the overall Solr Query of the request,
   * will be combined with the facet value queries
   * @param queryRequest from the overall search request
   * @param cons where the executers are passed to
   */
  public void getFacetExecuters(Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> cons) {
    facets.forEach( (name, facet) -> {
      if (facet instanceof AbstractSolrQueryFacet) {
        ((AbstractSolrQueryFacet)facet).createFacetValueExecuters(filter, queryRequest, cons);
      }
    });
  }

