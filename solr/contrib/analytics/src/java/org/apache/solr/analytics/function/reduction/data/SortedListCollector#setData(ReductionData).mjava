  /**
   * This is where the given indices are put in their sorted positions.
   *
   * Only the given indices are guaranteed to be in sorted order.
   */
  @SuppressWarnings("unchecked")
  @Override
  public void setData(ReductionData data) {
    list = ((SortedListData<T>)data).list;
    int size = list.size();
    if (size <= 1) {
      return;
    }

    // Ordinals start at 0 and end at size-1
    Set<Integer> ordinals = new HashSet<>();
    for (double percentile : calcPercs) {
      ordinals.add((int) Math.round(percentile * size - .5));
    }
    for (int ordinal : calcOrds) {
      if (ordinal > 0) {
        ordinals.add(ordinal - 1);
      } else if (ordinal < 0){
        ordinals.add(size + ordinal);
      }
    }
    if (calcMedian) {
      int mid = list.size() / 2;
      ordinals.add(mid);
      if (list.size() % 2 == 0) {
        ordinals.add(mid - 1);
      }
    }
    OrdinalCalculator.putOrdinalsInPosition(list, ordinals);
  }

