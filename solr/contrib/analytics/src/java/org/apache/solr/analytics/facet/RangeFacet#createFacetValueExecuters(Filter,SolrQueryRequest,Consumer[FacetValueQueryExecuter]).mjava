  @Override
  public void createFacetValueExecuters(final Filter filter, SolrQueryRequest queryRequest, Consumer<FacetValueQueryExecuter> consumer) {
    // Computes the end points of the ranges in the rangeFacet
    final FacetRangeGenerator<? extends Comparable<?>> rec = FacetRangeGenerator.create(this);
    final SchemaField sf = field;

    // Create a rangeFacetAccumulator for each range and
    // collect the documents for that range.
    for (FacetRange range : rec.getRanges()) {
      Query q = sf.getType().getRangeQuery(null, sf, range.lower, range.upper, range.includeLower,range.includeUpper);
      // The searcher sends docIds to the RangeFacetAccumulator which forwards
      // them to <code>collectRange()</code> in this class for collection.
      Query rangeQuery = new BooleanQuery.Builder()
          .add(q, Occur.MUST)
          .add(filter, Occur.FILTER)
          .build();

      ReductionDataCollection dataCol = collectionManager.newDataCollection();
      reductionData.put(range.toString(), dataCol);
      consumer.accept(new FacetValueQueryExecuter(dataCol, rangeQuery));
    }
  }

