  /**
   * Create a function expression from the given expression string, with the given variable function information.
   * 
   * @param expressionStr string that represents the desired expression
   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function
   * return signature, the map should be empty.
   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length
   * parameter if it is included in the function signature.
   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length
   * parameter if they are included when calling the function.
   * @return the object representation of the expression
   * @throws SolrException if an error occurs while constructing the expression
   */
  private AnalyticsValueStream createFunction(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,
                                              String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {
    AnalyticsValueStream expression = null;
    String name = getFunctionName(expressionStr);

    final String[] params = getParams(expressionStr, varFuncVarParamName, varFuncVarParamValues);
    AnalyticsValueStream[] paramStreams = new AnalyticsValueStream[params.length];
    
    boolean allParamsConstant = true;
    
    for (int i = 0; i < params.length; i++) {
      // First check if the parameter is a variable function variable otherwise create the expression
      if (varFuncParams.containsKey(params[i])) {
        paramStreams[i] = varFuncParams.get(params[i]);
      } else {
        paramStreams[i] = createExpression(params[i], varFuncParams, varFuncVarParamName, varFuncVarParamValues);
      }
      
      // Then update whether all of the params are constant
      allParamsConstant &= paramStreams[i].getExpressionType().equals(ExpressionType.CONST);
    }
    
    // Check to see if the function name is a variable function name, if so apply the variables to the return signature
    if (variableFunctions.containsKey(name)) {
      if (variableFunctionNameHistory.contains(name)) {
        throw new SolrException(ErrorCode.BAD_REQUEST,"The following variable function is self referencing : " + name); 
      }
      variableFunctionNameHistory.add(name);
      VariableFunctionInfo newVarFunc = variableFunctions.get(name);
      Map<String, AnalyticsValueStream> newVarFuncParams = new HashMap<>();
      
      boolean varLenEnd = false;
      
      if (paramStreams.length < newVarFunc.params.length) {
        throw new SolrException(ErrorCode.BAD_REQUEST,"The variable function '" + name + "' requires at least " + newVarFunc.params.length + " parameters."
            + " Only " + paramStreams.length + " arguments given in the following invocation : " + expressionStr);
      }
      for (int i = 0; i < newVarFunc.params.length; ++i) {
        String variable = newVarFunc.params[i];
        if (variable.endsWith(variableLengthParamSuffix)) {
          if (i != newVarFunc.params.length - 1) {
            throw new SolrException(ErrorCode.BAD_REQUEST,"The following invocation of a variable function has the incorrect number of arguments : " + expressionStr);
          }
          variable = variable.substring(0, variable.length() - variableLengthParamSuffix.length()).trim();
          int numVars = paramStreams.length - i;
          String[] newVarFuncVarParamValues = new String[numVars];
          for (int j = 0; j < numVars; ++j) {
            // Create a new name for each variable length parameter value
            String paramName = String.format(Locale.ROOT, funtionVarParamUniqueName, variable, j);
            newVarFuncVarParamValues[j] = paramName;
            newVarFuncParams.put(paramName, paramStreams[i + j]);
          }
          expression = createFunction(newVarFunc.returnSignature, newVarFuncParams, variable, newVarFuncVarParamValues);
          varLenEnd = true;
        } else {
          newVarFuncParams.put(variable, paramStreams[i]);
        }
      }
      if (!varLenEnd) {
        if (paramStreams.length > newVarFunc.params.length) {
          throw new SolrException(ErrorCode.BAD_REQUEST,"The variable function '" + name + "' requires " + newVarFunc.params.length + " parameters."
              + " " + paramStreams.length + " arguments given in the following invocation : " + expressionStr);
        }
        expression = createExpression(newVarFunc.returnSignature, newVarFuncParams, null, null);
      }
      variableFunctionNameHistory.remove(name);
    } else if (expressionCreators.containsKey(name)) {
      // It is a regular system function
      expression = expressionCreators.get(name).apply(paramStreams);
    } else {
      throw new SolrException(ErrorCode.BAD_REQUEST,"The following function does not exist: " + name);
    }
    
    // If the all params are constant, then try to convert the expression to a constant value.
    expression = expression.convertToConstant();
    
    return expression;
  }

