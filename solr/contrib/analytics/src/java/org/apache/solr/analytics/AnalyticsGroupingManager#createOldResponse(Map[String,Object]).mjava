  /**
   * Create the response for this grouping, but in the old style of response.
   * This response has a bucket for the following if they are contained in the grouping:
   * FieldFacets, RangeFacets and QueryFacets.
   * Each facet's name and response are put into the bucket corresponding to its type.
   * <p>
   * Since groupings in the old notation must also return overall results, the overall results are
   * passed in and the values are used to populate the grouping response.
   * 
   * @param overallResults of the expressions to add to the grouping response
   * @return the named list representation of the response
   */
  public NamedList<Object> createOldResponse(Map<String,Object> overallResults) {
    NamedList<Object> response = new NamedList<>();
    
    topLevelExpressions.forEach( expression -> response.add(expression.getName(), overallResults.get(name + expression.getName())));

    NamedList<Object> fieldFacetResults = new NamedList<>();
    NamedList<Object> rangeFacetResults = new NamedList<>();
    NamedList<Object> queryFacetResults = new NamedList<>();
    // Add the field facet buckets to the output
    facets.forEach( (name, facet) -> {
      // The old style of request only accepts field facets
      // So we can assume that all value facets are field facets
      if (facet instanceof ValueFacet) {
        fieldFacetResults.add(name, facet.createOldResponse());
      } else if (facet instanceof RangeFacet) {
        rangeFacetResults.add(name, facet.createOldResponse());
      } else if (facet instanceof QueryFacet) {
        queryFacetResults.add(name, facet.createOldResponse());
      }
    });
    if (fieldFacetResults.size() > 0) {
      response.add(AnalyticsResponseHeadings.FIELD_FACETS, fieldFacetResults);
    }
    if (rangeFacetResults.size() > 0) {
      response.add(AnalyticsResponseHeadings.RANGE_FACETS, rangeFacetResults);
    }
    if (queryFacetResults.size() > 0) {
      response.add(AnalyticsResponseHeadings.QUERY_FACETS, queryFacetResults);
    }
    return response;
  }

