  /**
   * Consolidate the information of all {@link StreamingFacet}s contained within the request, since
   * they need to be collected along with the overall results during the streaming phase of the
   * {@link AnalyticsDriver}.
   *
   * @return the info for all {@link StreamingFacet}s
   */
  public StreamingInfo getStreamingFacetInfo() {
    StreamingInfo streamingInfo = new StreamingInfo();
    ArrayList<ReductionCollectionManager> groupingCollectors = new ArrayList<>();
    groupingManagers.values().forEach( grouping -> {
      // If a grouping has streaming facets, then that groupings expressions
      // must be collected during the streaming phase.
      if (grouping.getStreamingFacets( facet -> streamingInfo.streamingFacets.add(facet) )) {
        groupingCollectors.add(grouping.getReductionManager());
      }
    });

    // Create an streaming collection manager to manage the collection of all ungrouped expressions and
    // grouped expressions that are calculated over streaming facets.
    streamingInfo.streamingCollectionManager = ungroupedReductionManager.merge(groupingCollectors);
    return streamingInfo;
  }

