  /**
   * Merge this collection manager with others.
   *
   * @param reductionManagers the collection managers to merge with
   * @return a collection manager that manages the union of data collectors from this class and the given managers
   */
  public ReductionCollectionManager merge(Iterable<ReductionCollectionManager> reductionManagers) {
    HashMap<String,ReductionDataCollector<?>> mergedCollectors = new HashMap<>();
    HashMap<String,AnalyticsField> mergedFields = new HashMap<>();
    
    for (ReductionDataCollector<?> collector : reductionDataCollectors) {
      mergedCollectors.put(collector.getExpressionStr(), collector);
    }
    fields.forEach( field -> mergedFields.put(field.getExpressionStr(), field) );
    
    reductionManagers.forEach( manager -> {
      for (ReductionDataCollector<?> collector : manager.reductionDataCollectors) {
        mergedCollectors.put(collector.getExpressionStr(), collector);
      }
      manager.fields.forEach( field -> mergedFields.put(field.getExpressionStr(), field) );
    });
    ReductionDataCollector<?>[] collectors = new ReductionDataCollector<?>[mergedCollectors.size()];
    mergedCollectors.values().toArray(collectors);
    return createNewManager(collectors, mergedFields.values());
  }

