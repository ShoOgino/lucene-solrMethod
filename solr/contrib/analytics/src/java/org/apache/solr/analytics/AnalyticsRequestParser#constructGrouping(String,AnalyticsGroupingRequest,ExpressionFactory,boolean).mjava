  private static AnalyticsGroupingManager constructGrouping(String name, AnalyticsGroupingRequest grouping, ExpressionFactory expressionFactory, boolean isDistribRequest) throws SolrException {
    expressionFactory.startGrouping();
    
    // Expressions
    if (grouping.expressions == null || grouping.expressions.size() == 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Groupings must contain at least one expression, '" + name + "' has none.");
    }
    
    Map<String,AnalyticsExpression> expressions = constructExpressions(grouping.expressions, expressionFactory);
    AnalyticsGroupingManager manager = new AnalyticsGroupingManager(name, 
                                                                    expressionFactory.createGroupingReductionManager(isDistribRequest), 
                                                                    expressions.values());
    
    if (grouping.facets == null) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Groupings must contain at least one facet, '" + name + "' has none.");
    }
    // Parse the facets
    grouping.facets.forEach( (facetName, facet) -> {
      if (facet instanceof AnalyticsValueFacetRequest) {
        manager.addFacet(constructValueFacet(facetName, (AnalyticsValueFacetRequest) facet, expressionFactory, expressions));
      } else if (facet instanceof AnalyticsPivotFacetRequest) {
        manager.addFacet(constructPivotFacet(facetName, (AnalyticsPivotFacetRequest) facet, expressionFactory, expressions));
      } else if (facet instanceof AnalyticsRangeFacetRequest) {
        manager.addFacet(constructRangeFacet(facetName, (AnalyticsRangeFacetRequest) facet, expressionFactory.getSchema()));
      } else if (facet instanceof AnalyticsQueryFacetRequest) {
        manager.addFacet(constructQueryFacet(facetName, (AnalyticsQueryFacetRequest) facet));
      } else {
        throw new SolrException(ErrorCode.BAD_REQUEST,"The facet type, '" + facet.getClass().toString() + "' in "
            + "grouping '" + name + "' is not a valid type of facet"); 
      }
    });
    
    return manager;
  }

