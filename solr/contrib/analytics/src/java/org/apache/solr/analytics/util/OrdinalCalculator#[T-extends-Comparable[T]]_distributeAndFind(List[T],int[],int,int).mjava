  private static <T extends Comparable<T>> void distributeAndFind(List<T> list, int[] ordinals, int beginIdx, int endIdx) {
    if (endIdx < beginIdx) {
      return;
    }
    int middleIdxb = beginIdx;
    int middleIdxe = beginIdx;
    int begin = (beginIdx == 0) ? -1 : ordinals[beginIdx - 1];
    int end = (endIdx == ordinals.length - 1) ? list.size() : ordinals[endIdx + 1];
    double middle = (begin + end) / 2.0;
    for (int i = beginIdx; i <= endIdx; i++) {
      double value = Math.abs(ordinals[i] - middle) - Math.abs(ordinals[middleIdxb] - middle);
      if (ordinals[i] == ordinals[middleIdxb]) {
        middleIdxe = i;
      } else if (value < 0) {
        middleIdxb = i;
        do {
          middleIdxe = i;
          i++;
        } while (i <= endIdx && ordinals[middleIdxb] == ordinals[i]);
        break;
      }
    }

    int middlePlace = ordinals[middleIdxb];
    int beginPlace = begin + 1;
    int endPlace = end - 1;

    select(list, middlePlace, beginPlace, endPlace);
    distributeAndFind(list, ordinals, beginIdx, middleIdxb - 1);
    distributeAndFind(list, ordinals, middleIdxe + 1, endIdx);
  }

