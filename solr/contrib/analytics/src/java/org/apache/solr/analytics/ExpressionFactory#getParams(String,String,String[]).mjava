  /**
   * Parse a function expression string and break up the parameters of the function into separate strings.
   * <p>
   * The parsing replaces the variable length parameter, and lambda for-each's using the variable length parameter,
   * with the parameter values in the returned parameter string.
   * <p>
   * Parsing breaks up parameters by commas (',') and ignores ',' inside of extra parens and quotes (both ' and "), since these commas are either
   * splitting up the parameters of nested functions or are apart of strings.
   * <br>
   * The only escaping that needs to be done is " within a double quote string and ' within a single quote string and \ within any string.
   * For example\:
   * <ul>
   * <li> {@code func("This is \" the \\ escaping ' example")} will be treated as {@code func(This is " the \ escaping ' example)}
   * <li> {@code func('This is " the \\ escaping \' example')} will be treated as {@code func(This is " the \ escaping ' example)}
   * </ul>
   * In string constants the \ character is used to escape quotes, so it can never be used alone. in order to write a \ you must write \\
   * 
   * @param expression the function expression to parse
   * @param varLengthParamName the name of the variable length parameter that is used in the expression, pass null if none is used.
   * @param varLengthParamValues the values of the variable length parameter that are used in the expression, pass null if none are used.
   * @return the parsed and split arguments to the function
   * @throws SolrException if the expression has incorrect syntax.
   */
  private static String[] getParams(String expression, String varLengthParamName, String[] varLengthParamValues) throws SolrException {
    Matcher m = functionParamsPattern.matcher(expression);
    if (!m.matches()) {
      return new String[0];
    }
    String paramsStr = m.group(1);
    
    ArrayList<String> paramsList = new ArrayList<String>();
    StringBuilder param = new StringBuilder();
    
    // Variables to help while filling out the values of for-each lambda functions.
    boolean inForEach = false;
    int forEachStart = -1;
    int forEachIter = -1;
    int forEachLevel = -1;
    
    // The current level of nested parenthesis, 0 means the iteration is in no nested parentheses
    int parenCount = 0;
    // If the iteration is currently in a single-quote string constant
    boolean singleQuoteOn = false;
    // If the iteration is currently in a double-quote string constant
    boolean doubleQuoteOn = false;
    // If the iteration is currently in any kind of string constant
    boolean quoteOn = false;
    // Is the next character escaped.
    boolean escaped = false;
    
    char[] chars = paramsStr.toCharArray();
    
    // Iterate through every character, building the params one at a time
    for (int i = 0; i < chars.length; ++i) {
      char c = chars[i];
      
      if (c == ' ' && !quoteOn) {
        // Ignore white space that is not in string constants
        continue;
      } else if (c == ',' && parenCount == 0 && !quoteOn) {
        // This signifies the end of one parameter and the start of another, since we are not in a nested parenthesis or a string constant
        String paramStr = param.toString();
        if (paramStr.length() == 0) {
          throw new SolrException(ErrorCode.BAD_REQUEST,"Empty parameter in expression: " + expression);
        }
        // check to see if the parameter is a variable length parameter
        if (paramStr.equals(varLengthParamName)) {
          // Add every variable length parameter value, since there are a variable amount
          for (String paramName : varLengthParamValues) {
            paramsList.add(paramName);
          }
        } else {
          paramsList.add(paramStr);
        }
        
        param.setLength(0);
        continue;
      } else if (c == ',' && !quoteOn && inForEach) {
        // separate the for each parameters, so they can be replaced with the result of the for each
        if (param.charAt(param.length()-1) == variableForEachParam && 
            (param.charAt(param.length()-2) == '(' || param.charAt(param.length()-2) == ',')) {
          param.setLength(param.length()-1);
          param.append(varLengthParamValues[forEachIter++]);
        }
      } else if (c == '"' && !singleQuoteOn) {
        // Deal with escaping, or ending string constants
        if (doubleQuoteOn && !escaped) {
          doubleQuoteOn = false;
          quoteOn = false;
        } else if (!quoteOn) {
          doubleQuoteOn = true;
          quoteOn = true;
        } else {
          // only happens if escaped is true
          escaped = false;
        }
      }  else if (c== '\'' && !doubleQuoteOn) {
        // Deal with escaping, or ending string constants
        if (singleQuoteOn && !escaped) {
          singleQuoteOn = false;
          quoteOn = false;
        } else if (!singleQuoteOn) {
          singleQuoteOn = true;
          quoteOn = true;
        } else {
          // only happens if escaped is true
          escaped = false;
        }
      } else if (c == '(' && !quoteOn) {
        // Reached a further level of nested parentheses
        parenCount++;
      } else if (c == ')' && !quoteOn) {
        // Returned from a level of nested parentheses
        parenCount--;
        if (parenCount < 0) {
          throw new SolrException(ErrorCode.BAD_REQUEST,"The following expression has extra end parens: " + param.toString());
        }
        if (inForEach) {
          if (param.charAt(param.length()-1) == variableForEachParam && 
              (param.charAt(param.length()-2) == '(' || param.charAt(param.length()-2) == ',')) {
            param.setLength(param.length()-1);
            param.append(varLengthParamValues[forEachIter++]);
          }
          if (forEachLevel == parenCount) {
            // at the end of the for-each start the parsing of the for-each again, with the next value of the variable length parameter
            if (forEachIter == 0) {
              throw new SolrException(ErrorCode.BAD_REQUEST,"For each statement for variable '" + varLengthParamName + "' has no use of lambda variable " + variableForEachParam);
            } else if (forEachIter < varLengthParamValues.length) {
              if (parenCount == 0) {
                param.append(')');
                paramsList.add(param.toString());
                param.setLength(0);
              } else {
                param.append(')');
                param.append(',');
              }
              i = forEachStart;
              continue;
            } else {
              inForEach = false;
            }
          }
        }
      }
      if (c == '\\') {
        // Escaping or escaped backslash
        if (!quoteOn) {
          throw new SolrException(ErrorCode.BAD_REQUEST,"The following expression has escaped characters outside of quotation marks: " + expression.toString());
        }
        if (escaped) {
          escaped = false;
        } else {
          escaped = true;
          if (parenCount == 0) {
            continue;
          }
        }
      } else if (escaped) {
        throw new SolrException(ErrorCode.BAD_REQUEST,"Invalid escape character '" + c + "' used in the following expression: " + expression.toString());
      }
      if (c == variableForEachSep && !quoteOn && varLengthParamName != null) {
        int varStart = param.length()-varLengthParamName.length();
        if (param.subSequence(varStart, param.length()).equals(varLengthParamName)) {
          inForEach = true;
          forEachStart = i;
          forEachIter = 0;
          forEachLevel = parenCount;
          param.setLength(varStart);
          continue;
        }
        throw new SolrException(ErrorCode.BAD_REQUEST,"For-each called on invalid parameter '" + param.toString().trim());
      }
      param.append(c);
    }
    String paramStr = param.toString().trim();
    if (paramStr.length() == 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Empty parameter in expression: " + expression);
    }
    if (parenCount > 0) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"The following expression needs more end parens: " + param.toString());
    }
    if (quoteOn) {
      throw new SolrException(ErrorCode.BAD_REQUEST,"Misplaced quotation marks in expression: " + expression);
    }
    if (paramStr.equals(varLengthParamName)) {
      for (String paramName : varLengthParamValues) {
        paramsList.add(paramName);
      }
    } else {
      paramsList.add(paramStr);
    }
    return paramsList.toArray(new String[paramsList.size()]);
  }

