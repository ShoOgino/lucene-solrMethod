    @Override
    public Iterable<Map<String,Object>> getPivotedResponse(Map<String,PivotDataPair<T>> pivot) {
      final List<FacetBucket> facetResults = new ArrayList<>();
      pivot.forEach((facetVal, dataPair) -> {
        collectionManager.setData(dataPair.pivotReduction);
        facetResults.add(new FacetBucket(facetVal,expressionCalculator.getResults()));
      });

      Iterable<FacetBucket> facetResultsIter = applyOptions(facetResults);
      final LinkedList<Map<String,Object>> results = new LinkedList<>();
      // Export each expression in the bucket.
      for (FacetBucket bucket : facetResultsIter) {
        Map<String, Object> bucketMap = new HashMap<>();
        bucketMap.put(AnalyticsResponseHeadings.PIVOT_NAME, name);
        bucketMap.put(AnalyticsResponseHeadings.FACET_VALUE, bucket.getFacetValue());
        bucketMap.put(AnalyticsResponseHeadings.RESULTS, bucket.getResults());
        bucketMap.put(AnalyticsResponseHeadings.PIVOT_CHILDREN, childPivot.getPivotedResponse(pivot.get(bucket.getFacetValue()).childPivots));
        results.add(bucketMap);
      }
      return results;
    }

