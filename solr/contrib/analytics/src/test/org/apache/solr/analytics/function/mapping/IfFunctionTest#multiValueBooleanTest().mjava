  @Test
  public void multiValueBooleanTest() {
    TestBooleanValue cond = new TestBooleanValue();
    TestBooleanValueStream then = new TestBooleanValueStream();
    TestBooleanValueStream els = new TestBooleanValueStream();

    AnalyticsValueStream uncasted = IfFunction.creatorFunction.apply(new AnalyticsValueStream[] {cond, then, els});
    assertTrue(uncasted instanceof BooleanValueStream);
    BooleanValueStream func = (BooleanValueStream) uncasted;

    // No values
    cond.setExists(false);
    then.setValues();
    els.setValues();
    func.streamBooleans( value -> {
      assertTrue("There should be no values to stream", false);
    });

    cond.setExists(false);
    then.setValues(false, true, false);
    els.setValues(true, true, true, false);
    func.streamBooleans( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Result doesn't exist
    cond.setValue(true).setExists(true);
    then.setValues();
    els.setValues(true, true, true, false);
    func.streamBooleans( value -> {
      assertTrue("There should be no values to stream", false);
    });

    cond.setValue(false).setExists(true);
    then.setValues(true, true, true, false);
    els.setValues();
    func.streamBooleans( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Values exist
    cond.setValue(true).setExists(true);
    then.setValues(true, true, true, false);
    els.setValues(false, false, true, false, true);
    Iterator<Boolean> values1 = Arrays.asList(true, true, true, false).iterator();
    func.streamBooleans( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value);
    });
    assertFalse(values1.hasNext());

    cond.setValue(false).setExists(true);
    then.setValues(true, true, true, false);
    els.setValues(false, false, true, false, true);
    Iterator<Boolean> values2 = Arrays.asList(false, false, true, false, true).iterator();
    func.streamBooleans( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value);
    });
    assertFalse(values2.hasNext());
  }

