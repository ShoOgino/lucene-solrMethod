  @Test
  public void uniqueTest() throws Exception { 
    String[] params = new String[] {
        "o.ur.s.int_id", "unique(int_id)",
        "o.ur.s.long_ld", "unique(long_ld)",
        "o.ur.s.float_fd", "unique(float_fd)",
        "o.ur.s.double_dd", "unique(double_dd)",
        "o.ur.s.date_dtd", "unique(date_dtd)",
        "o.ur.s.string_sd", "unique(string_sd)"
    };
    NamedList<Object> response = queryLegacyCloudAnalytics(params);
    String responseStr = response.toString();
    
    //Int
    Long intResult = getValue(response, "ur", "int_id");
    Long intTest = (Long)calculateStat(intTestStart, "unique");
    assertEquals(responseStr, intResult,intTest);

    //Long
    Long longResult = getValue(response, "ur", "long_ld");
    Long longTest = (Long)calculateStat(longTestStart, "unique");
    assertEquals(responseStr, longResult,longTest);

    //Float
    Long floatResult = getValue(response, "ur", "float_fd");
    Long floatTest = (Long)calculateStat(floatTestStart, "unique");
    assertEquals(responseStr, floatResult,floatTest);

    //Double
    Long doubleResult = getValue(response, "ur", "double_dd");
    Long doubleTest = (Long)calculateStat(doubleTestStart, "unique");
    assertEquals(responseStr, doubleResult,doubleTest);

    //Date
    Long dateResult = getValue(response, "ur", "date_dtd");
    Long dateTest = (Long)calculateStat(dateTestStart, "unique");
    assertEquals(responseStr, dateResult,dateTest);

    //String
    Long stringResult = getValue(response, "ur", "string_sd");
    Long stringTest = (Long)calculateStat(stringTestStart, "unique");
    assertEquals(responseStr, stringResult,stringTest);
  }

