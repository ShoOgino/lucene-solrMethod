  @Test
  public void multiValueStringTest() {
    TestBooleanValue cond = new TestBooleanValue();
    TestStringValueStream then = new TestStringValueStream();
    TestStringValueStream els = new TestStringValueStream();

    AnalyticsValueStream uncasted = IfFunction.creatorFunction.apply(new AnalyticsValueStream[] {cond, then, els});
    assertTrue(uncasted instanceof StringValueStream);
    StringValueStream func = (StringValueStream) uncasted;

    // No values
    cond.setExists(false);
    then.setValues();
    els.setValues();
    func.streamStrings( value -> {
      assertTrue("There should be no values to stream", false);
    });

    cond.setExists(false);
    then.setValues("abc123", "abcsdafasd", "third");
    els.setValues("this", "is", "a", "sentence");
    func.streamStrings( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    // Result doesn't exist
    cond.setValue(true).setExists(true);
    then.setValues();
    els.setValues("this", "is", "a", "sentence");
    func.streamStrings( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    cond.setValue(false).setExists(true);
    then.setValues("abc123", "abcsdafasd", "third");
    els.setValues();
    func.streamStrings( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    // Values exist
    cond.setValue(true).setExists(true);
    then.setValues("abc123", "abcsdafasd", "third");
    els.setValues("this", "is", "a", "sentence");
    Iterator<String> values1 = Arrays.asList("abc123", "abcsdafasd", "third").iterator();
    func.streamStrings( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value);
    });
    assertFalse(values1.hasNext());

    cond.setValue(false).setExists(true);
    then.setValues("abc123", "abcsdafasd", "third");
    els.setValues("this", "is", "a", "sentence");
    Iterator<String> values2 = Arrays.asList("this", "is", "a", "sentence").iterator();
    func.streamStrings( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value);
    });
    assertFalse(values2.hasNext());
  }

