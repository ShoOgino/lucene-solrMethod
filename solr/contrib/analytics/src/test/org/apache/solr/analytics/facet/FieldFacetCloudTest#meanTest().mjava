  @SuppressWarnings("unchecked")
  @Test
  public void meanTest() throws Exception { 
    String[] params = new String[] {
        "o.mean.s.int", "mean(int_id)",
        "o.mean.s.long", "mean(long_ld)",
        "o.mean.s.float", "mean(float_fd)",
        "o.mean.s.double", "mean(double_dd)",
        "o.mean.ff", "string_sd",
        "o.mean.ff", "date_dtd"
    };
    NamedList<Object> response = queryCloudAnalytics(params);
    String responseStr = response.toString();
    
    //Int Date
    Collection<Double> intDate = getValueList(response, "mean", "fieldFacets", "date_dtd", "int", false);
    ArrayList<Double> intDateTest = calculateNumberStat(intDateTestStart, "mean");
    assertEquals(responseStr,intDate,intDateTest);
    //Int String
    Collection<Double> intString = getValueList(response, "mean", "fieldFacets", "string_sd", "int", false);
    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, "mean");
    assertEquals(responseStr,intString,intStringTest);

    //Long Date
    Collection<Double> longDate = getValueList(response, "mean", "fieldFacets", "date_dtd", "long", false);
    ArrayList<Double> longDateTest = calculateNumberStat(longDateTestStart, "mean");
    assertEquals(responseStr,longDate,longDateTest);
    //Long String
    Collection<Double> longString = getValueList(response, "mean", "fieldFacets", "string_sd", "long", false);
    ArrayList<Double> longStringTest = calculateNumberStat(longStringTestStart, "mean");
    assertEquals(responseStr,longString,longStringTest);

    //Float Date
    Collection<Double> floatDate = getValueList(response, "mean", "fieldFacets", "date_dtd", "float", false);
    ArrayList<Double> floatDateTest = calculateNumberStat(floatDateTestStart, "mean");
    assertEquals(responseStr,floatDate,floatDateTest);
    //Float String
    Collection<Double> floatString = getValueList(response, "mean", "fieldFacets", "string_sd", "float", false);
    ArrayList<Double> floatStringTest = calculateNumberStat(floatStringTestStart, "mean");
    assertEquals(responseStr,floatString,floatStringTest);

    //Double Date
    Collection<Double> doubleDate = getValueList(response, "mean", "fieldFacets", "date_dtd", "double", false);
    ArrayList<Double> doubleDateTest = calculateNumberStat(doubleDateTestStart, "mean");
    assertEquals(responseStr,doubleDate,doubleDateTest);
    //Double String
    Collection<Double> doubleString = getValueList(response, "mean", "fieldFacets", "string_sd", "double", false);
    ArrayList<Double> doubleStringTest = calculateNumberStat(doubleStringTestStart, "mean");
    assertEquals(responseStr,doubleString,doubleStringTest);
  }

