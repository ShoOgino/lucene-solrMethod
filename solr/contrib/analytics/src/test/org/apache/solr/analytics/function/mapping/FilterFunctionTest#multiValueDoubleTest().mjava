  @Test
  public void multiValueDoubleTest() {
    TestDoubleValueStream val = new TestDoubleValueStream();
    TestBooleanValue filter = new TestBooleanValue();

    AnalyticsValueStream uncasted = FilterFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filter});
    assertTrue(uncasted instanceof DoubleValueStream);
    DoubleValueStream func = (DoubleValueStream) uncasted;

    // No values
    val.setValues();
    filter.setExists(false);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues(50.343, -74.9874, 2342332342.32);
    filter.setExists(false);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    filter.setValue(true).setExists(true);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // One value
    val.setValues(-4.23423);

    filter.setValue(true).setExists(true);
    Iterator<Double> values1 = Arrays.asList(-4.23423).iterator();
    func.streamDoubles( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value, .0000001);
    });
    assertFalse(values1.hasNext());

    filter.setValue(false).setExists(true);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });

    filter.setValue(true).setExists(true);
    Iterator<Double> values2 = Arrays.asList(-4.23423).iterator();
    func.streamDoubles( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value, .0000001);
    });
    assertFalse(values2.hasNext());

    // Multiple values
    val.setValues(4.3, -10.134, 50.343, -74.9874);

    filter.setValue(false).setExists(true);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });

    filter.setValue(true).setExists(true);
    Iterator<Double> values3 = Arrays.asList(4.3, -10.134, 50.343, -74.9874).iterator();
    func.streamDoubles( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next(), value, .0000001);
    });
    assertFalse(values3.hasNext());

    filter.setValue(false).setExists(true);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });
  }

