  @SuppressWarnings("unchecked")
  @Test
  public void missingFacetTest() throws Exception {
    //int MultiDate
    String xPath = "/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']";
    Node missingNodeXPath = getNode(xPath);
    assertNotNull(getRawResponse(), missingNodeXPath);

    ArrayList<Double> string = getDoubleList("missingf", "fieldFacets", "date_dtdm", "double", "mean");
    //super.removeNodes(xPath, string);
    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, "mean");
    assertEquals(getRawResponse(), string,stringTest);

    //Int String
    xPath = "/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']";
    missingNodeXPath = getNode(xPath);
    String missingNodeXPathStr = xPath;
    assertNotNull(getRawResponse(), missingNodeXPath);

    xPath = "/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']";
    assertNull(getRawResponse(), getNode(xPath));

    List<Double> intString = getDoubleList("missingf", "fieldFacets", "string_sd", "double", "mean");
    //removeNodes(missingNodeXPathStr, intString);
    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, "mean");
    assertEquals(getRawResponse(), intString,intStringTest);

    //Int Date
    Collection<Double> intDate = getDoubleList("missingf", "fieldFacets", "date_dtd", "double", "mean");
    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();
    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, "mean");
    assertEquals(getRawResponse(),intDate,intDateTest);
  }

