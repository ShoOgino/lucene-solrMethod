  @Test
  public void multiValueObjectTest() {
    TestAnalyticsValueStream val = new TestAnalyticsValueStream();
    TestAnalyticsValueStream filler = new TestAnalyticsValueStream();

    AnalyticsValueStream func = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});

    // No values
    val.setValues();
    filler.setValues();
    func.streamObjects( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Values exist
    val.setValues("asdfs");
    filler.setValues(new Date(12312), 213123L);
    Iterator<Object> values1 = Arrays.<Object>asList("asdfs").iterator();
    func.streamObjects( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value);
    });
    assertFalse(values1.hasNext());

    val.setValues();
    filler.setValues(3234.42d, "replacement");
    Iterator<Object> values2 = Arrays.<Object>asList(3234.42d, "replacement").iterator();
    func.streamObjects( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value);
    });
    assertFalse(values2.hasNext());

    val.setValues(new Date(3), "3", 3F);
    filler.setValues();
    Iterator<Object> values3 = Arrays.<Object>asList(new Date(3), "3", 3F).iterator();
    func.streamObjects( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next(), value);
    });
    assertFalse(values3.hasNext());
  }

