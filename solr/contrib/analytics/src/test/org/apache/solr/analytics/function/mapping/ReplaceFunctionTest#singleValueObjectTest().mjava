  @Test
  public void singleValueObjectTest() {
    TestAnalyticsValue val = new TestAnalyticsValue();
    TestAnalyticsValue comp = new TestAnalyticsValue();
    TestAnalyticsValue fill = new TestAnalyticsValue();

    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});
    assertTrue(uncasted instanceof AnalyticsValue);
    AnalyticsValue func = (AnalyticsValue) uncasted;

    // Value doesn't exist
    val.setExists(false);
    comp.setExists(false);
    fill.setExists(false);
    func.getObject();
    assertFalse(func.exists());

    val.setExists(false);
    comp.setValue(Boolean.TRUE).setExists(true);
    fill.setValue("abc").setExists(true);
    func.getObject();
    assertFalse(func.exists());
    
    // Comp doesn't exist
    val.setValue("abcd").setExists(true);
    comp.setExists(false);
    fill.setValue(new Date(123321)).setExists(true);
    assertEquals("abcd", func.getObject());
    assertTrue(func.exists());
    
    // Value exists
    // Comp != Val
    val.setValue(new Date(1234)).setExists(true);
    comp.setValue(1234).setExists(true);
    
    fill.setValue("not used").setExists(true);
    assertEquals(new Date(1234), func.getObject());
    assertTrue(func.exists());
    
    fill.setExists(false);
    assertEquals(new Date(1234), func.getObject());
    assertTrue(func.exists());
    
    // Comp == Val
    val.setValue(2342.324F).setExists(true);
    comp.setValue(2342.324F).setExists(true);
    
    fill.setExists(false);
    func.getObject();
    assertFalse(func.exists());

    fill.setValue("replacement").setExists(true);
    assertEquals("replacement", func.getObject());
    assertTrue(func.exists());
  }

