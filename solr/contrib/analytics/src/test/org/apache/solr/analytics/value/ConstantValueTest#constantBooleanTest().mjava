  @Test
  public void constantBooleanTest() {
    ConstantBooleanValue val = new ConstantBooleanValue(true);
    
    assertTrue(val.exists());
    assertEquals(true, val.getBoolean());
    assertEquals("true", val.getString());
    assertEquals(Boolean.TRUE, val.getObject());
    
    TestIntValue counter = new TestIntValue();
    counter.setValue(0);
    val.streamBooleans( value -> {
      assertEquals(true, value);
      assertEquals(0, counter.getInt());
      counter.setValue(1);
    });
    counter.setValue(0);
    val.streamStrings( value -> {
      assertEquals("true", value);
      assertEquals(0, counter.getInt());
      counter.setValue(1);
    });
    counter.setValue(0);
    val.streamObjects( value -> {
      assertEquals(Boolean.TRUE, value);
      assertEquals(0, counter.getInt());
      counter.setValue(1);
    });
    

    val = new ConstantBooleanValue(false);
    
    assertTrue(val.exists());
    assertEquals(false, val.getBoolean());
    assertEquals("false", val.getString());
    assertEquals(Boolean.FALSE, val.getObject());
    
    counter.setValue(0);
    val.streamBooleans( value -> {
      assertEquals(false, value);
      assertEquals(0, counter.getInt());
      counter.setValue(1);
    });
    counter.setValue(0);
    val.streamStrings( value -> {
      assertEquals("false", value);
      assertEquals(0, counter.getInt());
      counter.setValue(1);
    });
    counter.setValue(0);
    val.streamObjects( value -> {
      assertEquals(Boolean.FALSE, value);
      assertEquals(0, counter.getInt());
      counter.setValue(1);
    });
  }

