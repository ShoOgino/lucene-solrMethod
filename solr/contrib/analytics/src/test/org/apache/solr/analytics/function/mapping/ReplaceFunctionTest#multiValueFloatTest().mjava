  @Test
  public void multiValueFloatTest() {
    TestFloatValueStream val = new TestFloatValueStream();
    TestFloatValue comp = new TestFloatValue();
    TestFloatValue fill = new TestFloatValue();

    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});
    assertTrue(uncasted instanceof FloatValueStream);
    FloatValueStream func = (FloatValueStream) uncasted;

    // No values
    val.setValues();
    comp.setExists(false);
    fill.setExists(false);
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    comp.setValue(-230.32F).setExists(true);
    fill.setValue(9459.3458F).setExists(true);
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Comp doesn't exist
    val.setValues(1423.3F, 423.4323F, -2349.2F, -343.43934F, 423.4323F);
    comp.setExists(false);
    fill.setValue(234.234F).setExists(true);
    Iterator<Float> values1 = Arrays.asList(1423.3F, 423.4323F, -2349.2F, -343.43934F, 423.4323F).iterator();
    func.streamFloats( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value, .000001);
    });
    assertFalse(values1.hasNext());

    // Values exist
    val.setValues(1423.3F, 423.4323F, -2349.2F, -343.43934F, 423.4323F);
    comp.setValue(423.4323F).setExists(true);
    fill.setExists(false);
    Iterator<Float> values2 = Arrays.asList(1423.3F, -2349.2F, -343.43934F).iterator();
    func.streamFloats( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value, .000001);
    });
    assertFalse(values2.hasNext());

    val.setValues(1423.3F, 423.4323F, -2349.2F, -343.43934F, 423.4323F);
    comp.setValue(423.4323F).setExists(true);
    fill.setValue(-1000F).setExists(true);
    Iterator<Float> values3 = Arrays.asList(1423.3F, -1000F, -2349.2F, -343.43934F, -1000F).iterator();
    func.streamFloats( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next(), value, .000001);
    });
    assertFalse(values3.hasNext());
  }

