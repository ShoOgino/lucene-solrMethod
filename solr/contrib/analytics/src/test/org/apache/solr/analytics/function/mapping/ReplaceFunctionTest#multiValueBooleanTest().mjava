  @Test
  public void multiValueBooleanTest() {
    TestBooleanValueStream val = new TestBooleanValueStream();
    TestBooleanValue comp = new TestBooleanValue();
    TestBooleanValue fill = new TestBooleanValue();

    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});
    assertTrue(uncasted instanceof BooleanValueStream);
    BooleanValueStream func = (BooleanValueStream) uncasted;

    // No values
    val.setValues();
    comp.setExists(false);
    fill.setExists(false);
    func.streamBooleans( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    val.setValues();
    comp.setValue(true).setExists(true);
    fill.setValue(false).setExists(true);
    func.streamBooleans( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    // Comp doesn't exist
    val.setValues(false, true, false, true, true);
    comp.setExists(false);
    fill.setValue(true).setExists(true);
    Iterator<Boolean> values1 = Arrays.asList(false, true, false, true, true).iterator();
    func.streamBooleans( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value);
    });
    assertFalse(values1.hasNext());
    
    // Values exist
    val.setValues(false, true, false, true, true);
    comp.setValue(true).setExists(true);
    fill.setValue(false).setExists(true);
    Iterator<Boolean> values2 = Arrays.asList(false, false, false, false, false).iterator();
    func.streamBooleans( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value);
    });
    assertFalse(values2.hasNext());

    val.setValues(false, true, false, true, true);
    comp.setValue(false).setExists(true);
    fill.setExists(false);
    Iterator<Boolean> values3 = Arrays.asList(true, true, true).iterator();
    func.streamBooleans( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next(), value);
    });
    assertFalse(values3.hasNext());
  }

