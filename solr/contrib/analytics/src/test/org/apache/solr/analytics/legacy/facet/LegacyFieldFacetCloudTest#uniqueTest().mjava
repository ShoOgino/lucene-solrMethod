  @SuppressWarnings("unchecked")
  @Test
  public void uniqueTest() throws Exception {
    String[] params = new String[] {
        "o.uniquen.s.int", "unique(int_id)",
        "o.uniquen.s.long", "unique(long_ld)",
        "o.uniquen.s.float", "unique(float_fd)",
        "o.uniquen.s.double", "unique(double_dd)",
        "o.uniquen.ff", "string_sd",
        "o.uniquen.ff", "date_dtd",

        "o.unique.s.str", "unique(string_sd)",
        "o.unique.s.date", "unique(date_dtd)",
        "o.unique.ff", "int_id",
        "o.unique.ff", "long_ld"
    };
    NamedList<Object> response = queryLegacyCloudAnalytics(params);
    String responseStr = response.toString();

    //Int Date
    Collection<Long> intDate = getValueList(response, "uniquen", "fieldFacets", "date_dtd", "int", false);
    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateFacetedStat(intDateTestStart, "unique");
    assertEquals(responseStr,intDate,intDateTest);
    //Int String
    Collection<Long> intString = getValueList(response, "uniquen", "fieldFacets", "string_sd", "int", false);
    ArrayList<Long> intStringTest = (ArrayList<Long>)calculateFacetedStat(intStringTestStart, "unique");
    assertEquals(responseStr,intString,intStringTest);

    //Long Date
    Collection<Long> longDate = getValueList(response, "uniquen", "fieldFacets", "date_dtd", "long", false);
    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateFacetedStat(longDateTestStart, "unique");
    assertEquals(responseStr,longDate,longDateTest);
    //Long String
    Collection<Long> longString = getValueList(response, "uniquen", "fieldFacets", "string_sd", "long", false);
    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateFacetedStat(longStringTestStart, "unique");
    assertEquals(responseStr,longString,longStringTest);

    //Float Date
    Collection<Long> floatDate = getValueList(response, "uniquen", "fieldFacets", "date_dtd", "float", false);
    ArrayList<Long> floatDateTest = (ArrayList<Long>)calculateFacetedStat(floatDateTestStart, "unique");
    assertEquals(responseStr,floatDate,floatDateTest);
    //Float String
    Collection<Long> floatString = getValueList(response, "uniquen", "fieldFacets", "string_sd", "float", false);
    ArrayList<Long> floatStringTest = (ArrayList<Long>)calculateFacetedStat(floatStringTestStart, "unique");
    assertEquals(responseStr,floatString,floatStringTest);

    //Double Date
    Collection<Long> doubleDate = getValueList(response, "uniquen", "fieldFacets", "date_dtd", "double", false);
    ArrayList<Long> doubleDateTest = (ArrayList<Long>)calculateFacetedStat(doubleDateTestStart, "unique");
    assertEquals(responseStr,doubleDate,doubleDateTest);
    //Double String
    Collection<Long> doubleString = getValueList(response, "uniquen", "fieldFacets", "string_sd", "double", false);
    ArrayList<Long> doubleStringTest = (ArrayList<Long>)calculateFacetedStat(doubleStringTestStart, "unique");
    assertEquals(responseStr,doubleString,doubleStringTest);

    //Date Int
    Collection<Long> dateInt = getValueList(response, "unique", "fieldFacets", "int_id", "date", false);
    ArrayList<Long> dateIntTest = (ArrayList<Long>)calculateFacetedStat(dateIntTestStart, "unique");
    assertEquals(responseStr,dateInt,dateIntTest);
    //Date Long
    Collection<Long> dateString = getValueList(response, "unique", "fieldFacets", "long_ld", "date", false);
    ArrayList<Long> dateLongTest = (ArrayList<Long>)calculateFacetedStat(dateLongTestStart, "unique");
    assertEquals(responseStr,dateString,dateLongTest);

    //String Int
    Collection<Long> stringInt = getValueList(response, "unique", "fieldFacets", "int_id", "str", false);
    ArrayList<Long> stringIntTest = (ArrayList<Long>)calculateFacetedStat(stringIntTestStart, "unique");
    assertEquals(responseStr,stringInt,stringIntTest);
    //String Long
    Collection<Long> stringLong = getValueList(response, "unique", "fieldFacets", "long_ld", "str", false);
    ArrayList<Long> stringLongTest = (ArrayList<Long>)calculateFacetedStat(stringLongTestStart, "unique");
    assertEquals(responseStr,stringLong,stringLongTest);
  }

