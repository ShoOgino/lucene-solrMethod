  @SuppressWarnings("unchecked")
  @Test
  public void missingFacetTest() throws Exception { 
    String[] params = new String[] {
        "o.missingf.s.mean", "mean(int_id)",
        "o.missingf.ff", "date_dtd",
        "o.missingf.ff", "string_sd",
        "o.missingf.ff.string_sd.sm", "true",
        "o.missingf.ff", "date_dtdm",
        "o.missingf.ff.date_dtdm.sm", "true"
    };
    NamedList<Object> response = queryCloudAnalytics(params);
    String responseStr = response.toString();
    
    //int MultiDate
    assertTrue(responseStr, responseContainsFacetValue(response, "missingf", "fieldFacets", "date_dtdm", "(MISSING)"));
    ArrayList<Double> string = getValueList(response, "missingf", "fieldFacets", "date_dtdm", "mean", false);
    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, "mean");
    assertEquals(responseStr, string,stringTest);
    
    //Int String
    assertTrue(responseStr, responseContainsFacetValue(response, "missingf", "fieldFacets", "string_sd", "(MISSING)"));
    assertTrue(responseStr, !responseContainsFacetValue(response, "missingf", "fieldFacets", "string_sd", "str0"));
    List<Double> intString = getValueList(response, "missingf", "fieldFacets", "string_sd", "mean", false);
    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, "mean");
    assertEquals(responseStr, intString,intStringTest);
    
    //Int Date
    Collection<Double> intDate = getValueList(response, "missingf", "fieldFacets", "date_dtd", "mean", false);
    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();
    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, "mean");
    assertEquals(responseStr,intDate,intDateTest);
  }

