  @Test
  public void multiValueObjectTest() {
    TestAnalyticsValueStream val = new TestAnalyticsValueStream();
    TestBooleanValue filter = new TestBooleanValue();

    AnalyticsValueStream func = FilterFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filter});

    // No values
    val.setValues();
    filter.setExists(false);
    func.streamObjects( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues(3, "3", new Date(3));
    filter.setExists(false);
    func.streamObjects( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    filter.setValue(true).setExists(true);
    func.streamObjects( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // One value
    Object obj = new TestAnalyticsValueStream();
    val.setValues(obj);

    filter.setValue(true).setExists(true);
    Iterator<Object> values1 = Arrays.<Object>asList(obj).iterator();
    func.streamObjects( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value);
    });
    assertFalse(values1.hasNext());

    filter.setValue(false).setExists(true);
    func.streamObjects( value -> {
      assertTrue("There should be no values to stream", false);
    });

    filter.setValue(true).setExists(true);
    Iterator<Object> values2 = Arrays.<Object>asList(obj).iterator();
    func.streamObjects( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value);
    });
    assertFalse(values2.hasNext());

    // Multiple values
    val.setValues(3, "3", new Date(3));

    filter.setValue(false).setExists(true);
    func.streamObjects( value -> {
      assertTrue("There should be no values to stream", false);
    });

    filter.setValue(true).setExists(true);
    Iterator<Object> values3 = Arrays.<Object>asList(3, "3", new Date(3)).iterator();
    func.streamObjects( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next(), value);
    });
    assertFalse(values3.hasNext());

    filter.setValue(false).setExists(true);
    func.streamObjects( value -> {
      assertTrue("There should be no values to stream", false);
    });
  }

