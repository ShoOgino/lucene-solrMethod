  @Test
  public void multiValueLongTest() {
    TestLongValueStream val = new TestLongValueStream();
    TestLongValueStream filler = new TestLongValueStream();

    AnalyticsValueStream uncasted = FillMissingFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filler});
    assertTrue(uncasted instanceof LongValueStream);
    LongValueStream func = (LongValueStream) uncasted;

    // No values
    val.setValues();
    filler.setValues();
    func.streamLongs( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Values exist
    val.setValues(323L, -9423L);
    filler.setValues(-1234L, -5433L, -73843L, 1245144L);
    Iterator<Long> values1 = Arrays.asList(323L, -9423L).iterator();
    func.streamLongs( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next().longValue(), value);
    });
    assertFalse(values1.hasNext());

    val.setValues();
    filler.setValues(-312423L, 12343L, 23L, 2L);
    Iterator<Long> values2 = Arrays.asList(-312423L, 12343L, 23L, 2L).iterator();
    func.streamLongs( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next().longValue(), value);
    });
    assertFalse(values2.hasNext());

    val.setValues(1423L, -413543L);
    filler.setValues();
    Iterator<Long> values3 = Arrays.asList(1423L, -413543L).iterator();
    func.streamLongs( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next().longValue(), value);
    });
    assertFalse(values3.hasNext());
  }

