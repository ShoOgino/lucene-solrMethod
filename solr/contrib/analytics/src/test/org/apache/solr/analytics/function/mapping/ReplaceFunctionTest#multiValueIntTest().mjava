  @Test
  public void multiValueIntTest() {
    TestIntValueStream val = new TestIntValueStream();
    TestIntValue comp = new TestIntValue();
    TestIntValue fill = new TestIntValue();

    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});
    assertTrue(uncasted instanceof IntValueStream);
    IntValueStream func = (IntValueStream) uncasted;

    // No values
    val.setValues();
    comp.setExists(false);
    fill.setExists(false);
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    comp.setValue(324).setExists(true);
    fill.setValue(52341).setExists(true);
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Comp doesn't exist
    val.setValues(1, 234, -234, 4439, -234, -3245);
    comp.setExists(false);
    fill.setValue(52135).setExists(true);
    Iterator<Integer> values1 = Arrays.asList(1, 234, -234, 4439, -234, -3245).iterator();
    func.streamInts( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next().intValue(), value);
    });
    assertFalse(values1.hasNext());

    // Values exist
    val.setValues(1, 234, -234, 4439, -234, -3245);
    comp.setValue(-234).setExists(true);
    fill.setExists(false);
    Iterator<Integer> values2 = Arrays.asList(1, 234, 4439, -3245).iterator();
    func.streamInts( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next().intValue(), value);
    });
    assertFalse(values2.hasNext());

    val.setValues(1, 234, -234, 4439, -234, -3245);
    comp.setValue(4439).setExists(true);
    fill.setValue(-1000).setExists(true);
    Iterator<Integer> values3 = Arrays.asList(1, 234, -234, -1000, -234, -3245).iterator();
    func.streamInts( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next().intValue(), value);
    });
    assertFalse(values3.hasNext());
  }

