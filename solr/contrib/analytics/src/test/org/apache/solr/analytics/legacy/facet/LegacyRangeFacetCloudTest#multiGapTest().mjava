  @SuppressWarnings("unchecked")
  @Test
  public void multiGapTest() throws Exception {
    String[] params = new String[] {
        "o.mi.s.sum", "sum(int_id)",
        "o.mi.s.mean", "mean(int_id)",
        "o.mi.s.median", "median(int_id)",
        "o.mi.s.count", "count(int_id)",
        "o.mi.rf", "long_ld",
        "o.mi.rf.long_ld.st", "5",
        "o.mi.rf.long_ld.e", "30",
        "o.mi.rf.long_ld.g", "4,2,6,3",
        "o.mi.rf.long_ld.ib", "lower",
        "o.mi.rf.long_ld.or", "all",
        "o.mi.rf", "double_dd",
        "o.mi.rf.double_dd.st", "3",
        "o.mi.rf.double_dd.e", "39",
        "o.mi.rf.double_dd.g", "3,1,7",
        "o.mi.rf.double_dd.ib", "upper",
        "o.mi.rf.double_dd.ib", "outer",
        "o.mi.rf.double_dd.or", "all",
        "o.mi.rf", "date_dtd",
        "o.mi.rf.date_dtd.st", "1007-01-01T23:59:59Z",
        "o.mi.rf.date_dtd.e", "1044-01-01T23:59:59Z",
        "o.mi.rf.date_dtd.g", "+2YEARS,+7YEARS",
        "o.mi.rf.date_dtd.ib", "lower",
        "o.mi.rf.date_dtd.ib", "edge",
        "o.mi.rf.date_dtd.ib", "outer",
        "o.mi.rf.date_dtd.or", "all",

        "o.mf.s.sum", "sum(float_fd)",
        "o.mf.s.mean", "mean(float_fd)",
        "o.mf.s.median", "median(float_fd)",
        "o.mf.s.count", "count(float_fd)",
        "o.mf.rf", "long_ld",
        "o.mf.rf.long_ld.st", "0",
        "o.mf.rf.long_ld.e", "29",
        "o.mf.rf.long_ld.g", "1,4",
        "o.mf.rf.long_ld.ib", "all",
        "o.mf.rf.long_ld.or", "all",
        "o.mf.rf", "double_dd",
        "o.mf.rf.double_dd.st", "4",
        "o.mf.rf.double_dd.e", "47",
        "o.mf.rf.double_dd.g", "2,3,11",
        "o.mf.rf.double_dd.ib", "edge",
        "o.mf.rf.double_dd.or", "all",
        "o.mf.rf", "date_dtd",
        "o.mf.rf.date_dtd.st", "1004-01-01T23:59:59Z",
        "o.mf.rf.date_dtd.e", "1046-01-01T23:59:59Z",
        "o.mf.rf.date_dtd.g", "+4YEARS,+5YEARS",
        "o.mf.rf.date_dtd.ib", "upper",
        "o.mf.rf.date_dtd.ib", "edge",
        "o.mf.rf.date_dtd.or", "all"
    };
    NamedList<Object> response = queryLegacyCloudAnalytics(params);
    String responseStr = response.toString();
    
    //Int Long
    ArrayList<Double> intLong = getValueList(response, "mi", "rangeFacets", "long_ld", "sum", false);
    ArrayList<Double> intLongTest = calculateFacetedNumberStat(transformLists(intLongTestStart, 5, 30, "4,2,6,3"
                                                        , false, true, false, false, false), "sum");
    assertEquals(responseStr, intLong,intLongTest);
    //Int Double
    ArrayList<Double> intDouble = getValueList(response, "mi", "rangeFacets", "double_dd", "mean", false);
    ArrayList<Double> intDoubleTest = calculateFacetedNumberStat(transformLists(intDoubleTestStart, 3, 39, "3,1,7"
                                                          , false, false, true, false, true), "mean");
    assertEquals(responseStr, intDouble,intDoubleTest);
    //Int Date
    ArrayList<Long> intDate = getValueList(response, "mi", "rangeFacets", "date_dtd", "count", false);
    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateFacetedStat(transformLists(intDateTestStart, 7, 44, "2,7"
                                                      , false, true, false, true, true), "count");
    assertEquals(responseStr, intDate,intDateTest);
    
    //Float Long
    ArrayList<Double> floatLong = getValueList(response, "mf", "rangeFacets", "long_ld", "median", false);
    ArrayList<Double> floatLongTest = calculateFacetedNumberStat(transformLists(floatLongTestStart, 0, 29, "1,4"
                                                          , false, true, true, true, true), "median");;
    assertEquals(responseStr, floatLong,floatLongTest);
    //Float Double
    ArrayList<Long> floatDouble = getValueList(response, "mf", "rangeFacets", "double_dd", "count", false);
    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateFacetedStat(transformLists(floatDoubleTestStart, 4, 47, "2,3,11"
                                                          , false, false, false, true, false), "count");
    assertEquals(responseStr, floatDouble,floatDoubleTest);
  }

