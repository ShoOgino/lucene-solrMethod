  @Test
  public void multiValueDoubleTest() {
    TestDoubleValueStream val = new TestDoubleValueStream();
    TestDoubleValue remover = new TestDoubleValue();

    AnalyticsValueStream uncasted = RemoveFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, remover});
    assertTrue(uncasted instanceof DoubleValueStream);
    DoubleValueStream func = (DoubleValueStream) uncasted;

    // No values
    val.setValues();
    remover.setExists(false);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    remover.setValue(234237.67).setExists(true);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Values exist
    val.setValues(323.213, -9423.5, 124544.42);
    remover.setValue(124544.42).setExists(true);
    Iterator<Double> values1 = Arrays.asList(323.213, -9423.5).iterator();
    func.streamDoubles( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value, .00000001);
    });
    assertFalse(values1.hasNext());

    val.setValues(323.213, -9423.5, 124544.42);
    remover.setExists(false);
    Iterator<Double> values2 = Arrays.asList(323.213, -9423.5, 124544.42).iterator();
    func.streamDoubles( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value, .00000001);
    });
    assertFalse(values2.hasNext());


    val.setValues(323.213, -9423.5, 124544.42);
    remover.setValue(345.34).setExists(true);
    Iterator<Double> values3 = Arrays.asList(323.213, -9423.5, 124544.42).iterator();
    func.streamDoubles( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next(), value, .00000001);
    });
    assertFalse(values1.hasNext());

    val.setValues(3124.96, 3124.96);
    remover.setValue(3124.96).setExists(true);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });
  }

