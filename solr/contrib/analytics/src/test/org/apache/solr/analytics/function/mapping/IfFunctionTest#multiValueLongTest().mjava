  @Test
  public void multiValueLongTest() {
    TestBooleanValue cond = new TestBooleanValue();
    TestLongValueStream then = new TestLongValueStream();
    TestLongValueStream els = new TestLongValueStream();

    AnalyticsValueStream uncasted = IfFunction.creatorFunction.apply(new AnalyticsValueStream[] {cond, then, els});
    assertTrue(uncasted instanceof LongValueStream);
    LongValueStream func = (LongValueStream) uncasted;

    // No values
    cond.setExists(false);
    then.setValues();
    els.setValues();
    func.streamLongs( value -> {
      assertTrue("There should be no values to stream", false);
    });

    cond.setExists(false);
    then.setValues(-132L, 41543L, 563L);
    els.setValues(0L, 1L, -2L, 3L);
    func.streamLongs( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    // Result doesn't exist
    cond.setValue(true).setExists(true);
    then.setValues();
    els.setValues(0L, 1L, -2L, 3L);
    func.streamLongs( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    cond.setValue(false).setExists(true);
    then.setValues(-132L, 41543L, 563L);
    els.setValues();
    func.streamLongs( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    // Values exist
    cond.setValue(true).setExists(true);
    then.setValues(-132L, 41543L, 563L);
    els.setValues(0L, 1L, -2L, 3L);
    Iterator<Long> values1 = Arrays.asList(-132L, 41543L, 563L).iterator();
    func.streamLongs( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next().longValue(), value);
    });
    assertFalse(values1.hasNext());

    cond.setValue(false).setExists(true);
    then.setValues(-132L, 41543L, 563L);
    els.setValues(0L, 1L, -2L, 3L);
    Iterator<Long> values2 = Arrays.asList(0L, 1L, -2L, 3L).iterator();
    func.streamLongs( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next().longValue(), value);
    });
    assertFalse(values2.hasNext());
  }

