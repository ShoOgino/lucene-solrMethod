  @SuppressWarnings("unchecked")
  @Test
  public void perc60Test() throws Exception {
    String[] params = new String[] {
        "o.percentile_60n.s.int", "percentile(60,int_id)",
        "o.percentile_60n.s.long", "percentile(60,long_ld)",
        "o.percentile_60n.s.float", "percentile(60,float_fd)",
        "o.percentile_60n.s.double", "percentile(60,double_dd)",
        "o.percentile_60n.ff", "string_sd",
        "o.percentile_60n.ff", "date_dtd",

        "o.percentile_60.s.str", "percentile(60,string_sd)",
        "o.percentile_60.s.date", "string(percentile(60,date_dtd))",
        "o.percentile_60.ff", "int_id",
        "o.percentile_60.ff", "long_ld"
    };
    NamedList<Object> response = queryLegacyCloudAnalytics(params);
    String responseStr = response.toString();

    //Int Date
    Collection<Integer> intDate = getValueList(response, "percentile_60n", "fieldFacets", "date_dtd", "int", false);
    ArrayList<Integer> intDateTest = (ArrayList<Integer>)calculateFacetedStat(intDateTestStart, "perc_60");
    assertEquals(responseStr,intDate,intDateTest);
    //Int String
    Collection<Integer> intString = getValueList(response, "percentile_60n", "fieldFacets", "string_sd", "int", false);
    ArrayList<Integer> intStringTest = (ArrayList<Integer>)calculateFacetedStat(intStringTestStart, "perc_60");
    assertEquals(responseStr,intString,intStringTest);

    //Long Date
    Collection<Long> longDate = getValueList(response, "percentile_60n", "fieldFacets", "date_dtd", "long", false);
    ArrayList<Long> longDateTest = (ArrayList<Long>)calculateFacetedStat(longDateTestStart, "perc_60");
    assertEquals(responseStr,longDate,longDateTest);
    //Long String
    Collection<Long> longString = getValueList(response, "percentile_60n", "fieldFacets", "string_sd", "long", false);
    ArrayList<Long> longStringTest = (ArrayList<Long>)calculateFacetedStat(longStringTestStart, "perc_60");
    assertEquals(responseStr,longString,longStringTest);

    //Float Date
    Collection<Float> floatDate = getValueList(response, "percentile_60n", "fieldFacets", "date_dtd", "float", false);
    ArrayList<Float> floatDateTest = (ArrayList<Float>)calculateFacetedStat(floatDateTestStart, "perc_60");
    assertEquals(responseStr,floatDate,floatDateTest);
    //Float String
    Collection<Float> floatString = getValueList(response, "percentile_60n", "fieldFacets", "string_sd", "float", false);
    ArrayList<Float> floatStringTest = (ArrayList<Float>)calculateFacetedStat(floatStringTestStart, "perc_60");
    assertEquals(responseStr,floatString,floatStringTest);

    //Double Date
    Collection<Double> doubleDate = getValueList(response, "percentile_60n", "fieldFacets", "date_dtd", "double", false);
    ArrayList<Double> doubleDateTest = (ArrayList<Double>)calculateFacetedStat(doubleDateTestStart, "perc_60");
    assertEquals(responseStr,doubleDate,doubleDateTest);
    //Double String
    Collection<Double> doubleString = getValueList(response, "percentile_60n", "fieldFacets", "string_sd", "double", false);
    ArrayList<Double> doubleStringTest = (ArrayList<Double>)calculateFacetedStat(doubleStringTestStart, "perc_60");
    assertEquals(responseStr,doubleString,doubleStringTest);

    //Date Int
    Collection<String> dateInt = getValueList(response, "percentile_60", "fieldFacets", "int_id", "date", false);
    ArrayList<String> dateIntTest = (ArrayList<String>)calculateFacetedStat(dateIntTestStart, "perc_60");
    assertEquals(responseStr,dateInt,dateIntTest);
    //Date Long
    Collection<String> dateString = getValueList(response, "percentile_60", "fieldFacets", "long_ld", "date", false);
    ArrayList<String> dateLongTest = (ArrayList<String>)calculateFacetedStat(dateLongTestStart, "perc_60");
    assertEquals(responseStr,dateString,dateLongTest);

    //String Int
    Collection<String> stringInt = getValueList(response, "percentile_60", "fieldFacets", "int_id", "str", false);
    ArrayList<String> stringIntTest = (ArrayList<String>)calculateFacetedStat(stringIntTestStart, "perc_60");
    assertEquals(responseStr,stringInt,stringIntTest);
    //String Long
    Collection<String> stringLong = getValueList(response, "percentile_60", "fieldFacets", "long_ld", "str", false);
    ArrayList<String> stringLongTest = (ArrayList<String>)calculateFacetedStat(stringLongTestStart, "perc_60");
    assertEquals(responseStr,stringLong,stringLongTest);
  }

