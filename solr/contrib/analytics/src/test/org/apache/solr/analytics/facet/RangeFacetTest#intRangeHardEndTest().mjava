  @Test
  public void intRangeHardEndTest() throws Exception {
    Map<String, String> expressions = new HashMap<>();
    expressions.put("mean", "mean(float_f)");
    expressions.put("count", "count(string_sm)");
    
    // Hard end on
    addFacet("hard_end_on", "{ 'type':'range', "
        + " 'field': 'int_im', "
        + " 'start': '2', "
        + " 'end' : '13', "
        + " 'gaps' : ['2', '5', '3'], "
        + " 'hardend' : true }");

    addFacetValue("[2 TO 4)");
    addFacetResult("mean", 3.5);
    addFacetResult("count", 10L);
    
    addFacetValue("[4 TO 9)");
    addFacetResult("mean", 16.0/5.0);
    addFacetResult("count", 12L);
    
    addFacetValue("[9 TO 12)");
    addFacetResult("mean", 2.0);
    addFacetResult("count", 4L);
    
    addFacetValue("[12 TO 13)");
    addFacetResult("mean", 3.0);
    addFacetResult("count", 4L);
    
    // Hard end off
    addFacet("hard_end_off", "{ 'type':'range', "
        + " 'field': 'int_im', "
        + " 'start': '2', "
        + " 'end' : '13', "
        + " 'gaps' : ['2', '5', '3'], "
        + " 'hardend' : false }");

    addFacetValue("[2 TO 4)");
    addFacetResult("mean", 3.5);
    addFacetResult("count", 10L);
    
    addFacetValue("[4 TO 9)");
    addFacetResult("mean", 16.0/5.0);
    addFacetResult("count", 12L);
    
    addFacetValue("[9 TO 12)");
    addFacetResult("mean", 2.0);
    addFacetResult("count", 4L);
    
    addFacetValue("[12 TO 15)");
    addFacetResult("mean", 30.0/8.0);
    addFacetResult("count", 14L);
    
    testGrouping(expressions);
  }

