  @Test
  public void multiValueIntTest() {
    TestBooleanValue cond = new TestBooleanValue();
    TestIntValueStream then = new TestIntValueStream();
    TestIntValueStream els = new TestIntValueStream();

    AnalyticsValueStream uncasted = IfFunction.creatorFunction.apply(new AnalyticsValueStream[] {cond, then, els});
    assertTrue(uncasted instanceof IntValueStream);
    IntValueStream func = (IntValueStream) uncasted;

    // No values
    cond.setExists(false);
    then.setValues();
    els.setValues();
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    cond.setExists(false);
    then.setValues(-132, 41543, 563);
    els.setValues(0, 1, -2, 3);
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Result doesn't exist
    cond.setValue(true).setExists(true);
    then.setValues();
    els.setValues(0, 1, -2, 3);
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    cond.setValue(false).setExists(true);
    then.setValues(-132, 41543, 563);
    els.setValues();
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Values exist
    cond.setValue(true).setExists(true);
    then.setValues(-132, 41543, 563);
    els.setValues(0, 1, -2, 3);
    Iterator<Integer> values1 = Arrays.asList(-132, 41543, 563).iterator();
    func.streamInts( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next().intValue(), value);
    });
    assertFalse(values1.hasNext());

    cond.setValue(false).setExists(true);
    then.setValues(-132, 41543, 563);
    els.setValues(0, 1, -2, 3);
    Iterator<Integer> values2 = Arrays.asList(0, 1, -2, 3).iterator();
    func.streamInts( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next().intValue(), value);
    });
    assertFalse(values2.hasNext());
  }

