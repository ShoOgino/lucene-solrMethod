  @Test
  public void multiValueFloatTest() {
    TestFloatValueStream val = new TestFloatValueStream();
    TestBooleanValue filter = new TestBooleanValue();

    AnalyticsValueStream uncasted = FilterFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filter});
    assertTrue(uncasted instanceof FloatValueStream);
    FloatValueStream func = (FloatValueStream) uncasted;

    // No values
    val.setValues();
    filter.setExists(false);
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues(50.343F, -74.9874F, 2342332342.32F);
    filter.setExists(false);
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    filter.setValue(true).setExists(true);
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // One value
    val.setValues(-4.23423F);

    filter.setValue(true).setExists(true);
    Iterator<Float> values1 = Arrays.asList(-4.23423F).iterator();
    func.streamFloats( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value, .0000001);
    });
    assertFalse(values1.hasNext());

    filter.setValue(false).setExists(true);
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });

    filter.setValue(true).setExists(true);
    Iterator<Float> values2 = Arrays.asList(-4.23423F).iterator();
    func.streamFloats( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value, .0000001);
    });
    assertFalse(values2.hasNext());

    // Multiple values
    val.setValues(4.3F, -10.134F, 50.343F, -74.9874F);

    filter.setValue(false).setExists(true);
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });

    filter.setValue(true).setExists(true);
    Iterator<Float> values3 = Arrays.asList(4.3F, -10.134F, 50.343F, -74.9874F).iterator();
    func.streamFloats( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next(), value, .0000001);
    });
    assertFalse(values3.hasNext());

    filter.setValue(false).setExists(true);
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });
  }

