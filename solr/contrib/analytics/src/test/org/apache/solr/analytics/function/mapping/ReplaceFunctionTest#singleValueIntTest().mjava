  @Test
  public void singleValueIntTest() {
    TestIntValue val = new TestIntValue();
    TestIntValue comp = new TestIntValue();
    TestIntValue fill = new TestIntValue();

    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});
    assertTrue(uncasted instanceof IntValue);
    IntValue func = (IntValue) uncasted;

    // Value doesn't exist
    val.setExists(false);
    comp.setExists(false);
    func.getInt();
    assertFalse(func.exists());

    val.setExists(false);
    comp.setValue(-234).setExists(true);
    fill.setValue(765).setExists(true);
    func.getInt();
    assertFalse(func.exists());
    
    // Comp doesn't exist
    val.setValue(745).setExists(true);
    comp.setExists(false);
    fill.setValue(23423).setExists(true);
    assertEquals(745, func.getInt());
    assertTrue(func.exists());
    
    // Value exists
    // Comp != Val
    val.setValue(21).setExists(true);
    comp.setValue(234).setExists(true);
    
    fill.setValue(23423).setExists(true);
    assertEquals(21, func.getInt());
    assertTrue(func.exists());
    
    fill.setExists(false);
    assertEquals(21, func.getInt());
    assertTrue(func.exists());
    
    // Comp == Val
    val.setValue(-154).setExists(true);
    comp.setValue(-154).setExists(true);
    
    fill.setExists(false);
    func.getInt();
    assertFalse(func.exists());

    fill.setValue(23423).setExists(true);
    assertEquals(23423, func.getInt());
    assertTrue(func.exists());
  }

