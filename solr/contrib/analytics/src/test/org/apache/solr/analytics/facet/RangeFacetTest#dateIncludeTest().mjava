  @Test
  public void dateIncludeTest() throws Exception {
    Map<String, String> expressions = new HashMap<>();
    expressions.put("mean", "mean(float_f)");
    expressions.put("count", "count(string_sm)");
    
    addFacet("lower_upper", "{ 'type':'range', "
        + " 'field': 'date_dt', "
        + " 'start': '1801-12-31T23:59:59Z', "
        + " 'end' : '1803-12-31T23:59:59Z', "
        + " 'gaps' : ['+1YEAR'], "
        + " 'include' : ['lower', 'upper'] }");

    addFacetValue("[1801-12-31T23:59:59Z TO 1802-12-31T23:59:59Z]");
    addFacetResult("mean", 37.0/13.0);
    addFacetResult("count", 20L);
    
    addFacetValue("[1802-12-31T23:59:59Z TO 1803-12-31T23:59:59Z]");
    addFacetResult("mean", 3.5);
    addFacetResult("count", 10L);
    
    testGrouping(expressions);
    
    addFacet("lower_upper", "{ 'type':'range', "
        + " 'field': 'date_dt', "
        + " 'start': '1801-12-31T23:59:59Z', "
        + " 'end' : '1803-12-31T23:59:59Z', "
        + " 'gaps' : ['+1YEAR'], "
        + " 'include' : ['lower','edge'] }");

    addFacetValue("[1801-12-31T23:59:59Z TO 1802-12-31T23:59:59Z)");
    addFacetResult("mean", 16.0/7.0);
    addFacetResult("count", 10L);
    
    addFacetValue("[1802-12-31T23:59:59Z TO 1803-12-31T23:59:59Z]");
    addFacetResult("mean", 3.5);
    addFacetResult("count", 10L);
    
    testGrouping(expressions);
  }

