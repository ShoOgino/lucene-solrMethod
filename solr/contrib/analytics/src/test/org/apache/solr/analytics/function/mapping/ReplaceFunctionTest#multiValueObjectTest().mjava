  @Test
  public void multiValueObjectTest() {
    TestAnalyticsValueStream val = new TestAnalyticsValueStream();
    TestAnalyticsValue comp = new TestAnalyticsValue();
    TestAnalyticsValue fill = new TestAnalyticsValue();

    AnalyticsValueStream func = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});

    // No values
    val.setValues();
    comp.setExists(false);
    fill.setExists(false);
    func.streamObjects( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    comp.setValue("doesn't matter").setExists(true);
    fill.setValue("won't show up").setExists(true);
    func.streamObjects( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Comp doesn't exist
    val.setValues("asdfs", new Date(12312), 213123L, new Date(12312));
    comp.setExists(false);
    fill.setValue("won't show up").setExists(true);
    Iterator<Object> values1 = Arrays.<Object>asList("asdfs", new Date(12312), 213123L, new Date(12312)).iterator();
    func.streamObjects( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value);
    });
    assertFalse(values1.hasNext());

    // Values exist
    val.setValues("asdfs", new Date(12312), 213123L, new Date(12312));
    comp.setValue("asdfs").setExists(true);
    fill.setExists(false);
    Iterator<Object> values2 = Arrays.<Object>asList(new Date(12312), 213123L, new Date(12312)).iterator();
    func.streamObjects( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value);
    });
    assertFalse(values2.hasNext());

    val.setValues("asdfs", new Date(12312), 213123L, new Date(12312));
    comp.setValue(new Date(12312)).setExists(true);
    fill.setValue(Boolean.FALSE).setExists(true);
    Iterator<Object> values3 = Arrays.<Object>asList("asdfs", Boolean.FALSE, 213123L, Boolean.FALSE).iterator();
    func.streamObjects( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next(), value);
    });
    assertFalse(values3.hasNext());
  }

