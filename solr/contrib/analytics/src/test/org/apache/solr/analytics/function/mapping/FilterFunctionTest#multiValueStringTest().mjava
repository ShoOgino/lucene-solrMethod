  @Test
  public void multiValueStringTest() {
    TestStringValueStream val = new TestStringValueStream();
    TestBooleanValue filter = new TestBooleanValue();

    AnalyticsValueStream uncasted = FilterFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filter});
    assertTrue(uncasted instanceof StringValueStream);
    StringValueStream func = (StringValueStream) uncasted;

    // No values
    val.setValues();
    filter.setExists(false);
    func.streamStrings( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues("abc", "123", "def", "456");
    filter.setExists(false);
    func.streamStrings( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    filter.setValue(true).setExists(true);
    func.streamStrings( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    // One value
    val.setValues("abcdef");
    
    filter.setValue(true).setExists(true);
    Iterator<String> values1 = Arrays.asList("abcdef").iterator();
    func.streamStrings( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value);
    });
    assertFalse(values1.hasNext());
    
    filter.setValue(false).setExists(true);
    func.streamStrings( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    filter.setValue(true).setExists(true);
    Iterator<String> values2 = Arrays.asList("abcdef").iterator();
    func.streamStrings( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value);
    });
    assertFalse(values2.hasNext());
    
    // Multiple values
    val.setValues("abc", "123", "def", "456");
    
    filter.setValue(false).setExists(true);
    func.streamStrings( value -> {
      assertTrue("There should be no values to stream", false);
    });

    filter.setValue(true).setExists(true);
    Iterator<String> values3 = Arrays.asList("abc", "123", "def", "456").iterator();
    func.streamStrings( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next(), value);
    });
    assertFalse(values3.hasNext());
    
    filter.setValue(false).setExists(true);
    func.streamStrings( value -> {
      assertTrue("There should be no values to stream", false);
    });
  }

