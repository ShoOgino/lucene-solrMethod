  @Test
  public void multiValueFloatTest() {
    TestBooleanValue cond = new TestBooleanValue();
    TestFloatValueStream then = new TestFloatValueStream();
    TestFloatValueStream els = new TestFloatValueStream();

    AnalyticsValueStream uncasted = IfFunction.creatorFunction.apply(new AnalyticsValueStream[] {cond, then, els});
    assertTrue(uncasted instanceof FloatValueStream);
    FloatValueStream func = (FloatValueStream) uncasted;

    // No values
    cond.setExists(false);
    then.setValues();
    els.setValues();
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });

    cond.setExists(false);
    then.setValues(2134.2345F, -234.23F, 20000.0F);
    els.setValues(.1111F , -.22222F, .333F);
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    // Result doesn't exist
    cond.setValue(true).setExists(true);
    then.setValues();
    els.setValues(.1111F , -.22222F, .333F);
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    cond.setValue(false).setExists(true);
    then.setValues(2134.2345F, -234.23F, 20000.0F);
    els.setValues();
    func.streamFloats( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    // Values exist
    cond.setValue(true).setExists(true);
    then.setValues(2134.2345F, -234.23F, 20000.0F);
    els.setValues(.1111F , -.22222F, .333F);
    Iterator<Float> values1 = Arrays.asList(2134.2345F, -234.23F, 20000.0F).iterator();
    func.streamFloats( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value, .000001);
    });
    assertFalse(values1.hasNext());

    cond.setValue(false).setExists(true);
    then.setValues(2134.2345F, -234.23F, 20000.0F);
    els.setValues(.1111F , -.22222F, .333F);
    Iterator<Float> values2 = Arrays.asList(.1111F , -.22222F, .333F).iterator();
    func.streamFloats( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value, .000001);
    });
    assertFalse(values2.hasNext());
  }

