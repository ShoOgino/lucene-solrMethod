  @Test
  public void multiValueIntTest() {
    TestIntValueStream val = new TestIntValueStream();
    TestBooleanValue filter = new TestBooleanValue();

    AnalyticsValueStream uncasted = FilterFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filter});
    assertTrue(uncasted instanceof IntValueStream);
    IntValueStream func = (IntValueStream) uncasted;

    // No values
    val.setValues();
    filter.setExists(false);
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues(1, 3, 5);
    filter.setExists(false);
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    filter.setValue(true).setExists(true);
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // One value
    val.setValues(-4);

    filter.setValue(true).setExists(true);
    Iterator<Integer> values1 = Arrays.asList(-4).iterator();
    func.streamInts( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next().intValue(), value);
    });
    assertFalse(values1.hasNext());

    filter.setValue(false).setExists(true);
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    filter.setValue(true).setExists(true);
    Iterator<Integer> values2 = Arrays.asList(-4).iterator();
    func.streamInts( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next().intValue(), value);
    });
    assertFalse(values2.hasNext());

    // Multiple values
    val.setValues(4, -10, 50, -74);

    filter.setValue(false).setExists(true);
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });

    filter.setValue(true).setExists(true);
    Iterator<Integer> values3 = Arrays.asList(4, -10, 50, -74).iterator();
    func.streamInts( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next().intValue(), value);
    });
    assertFalse(values3.hasNext());

    filter.setValue(false).setExists(true);
    func.streamInts( value -> {
      assertTrue("There should be no values to stream", false);
    });
  }

