  @BeforeClass
  public static void createSchemaAndFields() throws Exception {
    initCore("solrconfig-analytics.xml","schema-analytics.xml");

    singleInts = new HashMap<>(); 
    multiInts = new HashMap<>();
    singleLongs = new HashMap<>(); 
    multiLongs = new HashMap<>();
    singleFloats = new HashMap<>(); 
    multiFloats = new HashMap<>();
    singleDoubles = new HashMap<>(); 
    multiDoubles = new HashMap<>();
    singleDates = new HashMap<>(); 
    multiDates = new HashMap<>();
    singleStrings = new HashMap<>(); 
    multiStrings = new HashMap<>();
    singleBooleans = new HashMap<>(); 
    multiBooleans = new HashMap<>();
    
    missingDocuments = new ArrayList<>();
    
    assertU(adoc("id", "-2"));
    missingDocuments.add("-2");
    assertU(adoc("id", "5"));
    missingDocuments.add("5");
    for (int i = -1; i < 5; ++i) {
      assertU(adoc(
          "id", "" + i, 
          
          "int_i_t", "" + i,
          "int_im_t", "" + i,
          "int_im_t", "" + (i + 10),
          "int_im_t", "" + (i + 10),
          "int_im_t", "" + (i + 20),
          
          "int_i_p", "" + i,
          "int_im_p", "" + i,
          "int_im_p", "" + (i + 10),
          "int_im_p", "" + (i + 10),
          "int_im_p", "" + (i + 20),
          
          "long_l_t", "" + i,
          "long_lm_t", "" + i,
          "long_lm_t", "" + (i + 10),
          "long_lm_t", "" + (i + 10),
          "long_lm_t", "" + (i + 20),
          
          "long_l_p", "" + i,
          "long_lm_p", "" + i,
          "long_lm_p", "" + (i + 10),
          "long_lm_p", "" + (i + 10),
          "long_lm_p", "" + (i + 20),
          
          "float_f_t", "" + (i + .75F),
          "float_fm_t", "" + (i + .75F),
          "float_fm_t", "" + (i + 10.75F),
          "float_fm_t", "" + (i + 10.75F),
          "float_fm_t", "" + (i + 20.75F),
          
          "float_f_p", "" + (i + .75F),
          "float_fm_p", "" + (i + .75F),
          "float_fm_p", "" + (i + 10.75F),
          "float_fm_p", "" + (i + 10.75F),
          "float_fm_p", "" + (i + 20.75F),
          
          "double_d_t", "" + (i + .5),
          "double_dm_t", "" + (i + .5),
          "double_dm_t", "" + (i + 10.5),
          "double_dm_t", "" + (i + 10.5),
          "double_dm_t", "" + (i + 20.5),
          
          "double_d_p", "" + (i + .5),
          "double_dm_p", "" + (i + .5),
          "double_dm_p", "" + (i + 10.5),
          "double_dm_p", "" + (i + 10.5),
          "double_dm_p", "" + (i + 20.5),
          
          "date_dt_t", (1800 + i) + "-12-31T23:59:59Z",
          "date_dtm_t", (1800 + i) + "-12-31T23:59:59Z",
          "date_dtm_t", (1800 + i + 10) + "-12-31T23:59:59Z",
          "date_dtm_t", (1800 + i + 10) + "-12-31T23:59:59Z",
          "date_dtm_t", (1800 + i + 20) + "-12-31T23:59:59Z",
          
          "date_dt_p", (1800 + i) + "-12-31T23:59:59Z",
          "date_dtm_p", (1800 + i) + "-12-31T23:59:59Z",
          "date_dtm_p", (1800 + i + 10) + "-12-31T23:59:59Z",
          "date_dtm_p", (1800 + i + 10) + "-12-31T23:59:59Z",
          "date_dtm_p", (1800 + i + 20) + "-12-31T23:59:59Z",
          
          "string_s", "abc" + i,
          "string_sm", "abc" + i,
          "string_sm", "def" + i,
          "string_sm", "def" + i,
          "string_sm", "ghi" + i,
          
          "boolean_b", Boolean.toString(i % 3 == 0),
          "boolean_bm", "false",
          "boolean_bm", "true",
          "boolean_bm", "false"
      ));
      
      singleInts.put(""+i, i);
      Map<Integer, Integer> ints = new HashMap<>();
      ints.put(i, 1);
      ints.put(i + 10, 2);
      ints.put(i + 20, 1);
      multiInts.put(""+i, ints);
      
      singleLongs.put(""+i, (long) i);
      Map<Long, Integer> longs = new HashMap<>();
      longs.put((long) i, 1);
      longs.put(i + 10L, 2);
      longs.put(i + 20L, 1);
      multiLongs.put(""+i, longs);
      
      singleFloats.put(""+i, i + .75F);
      Map<Float, Integer> floats = new HashMap<>();
      floats.put(i + .75F, 1);
      floats.put(i + 10.75F, 2);
      floats.put(i + 20.75F, 1);
      multiFloats.put(""+i, floats);
      
      singleDoubles.put(""+i, i + .5);
      Map<Double, Integer> doubles = new HashMap<>();
      doubles.put(i + .5, 1);
      doubles.put(i + 10.5, 2);
      doubles.put(i + 20.5, 1);
      multiDoubles.put(""+i, doubles);
      
      singleDates.put(""+i, Instant.parse((1800 + i) + "-12-31T23:59:59Z").toEpochMilli());
      Map<Long, Integer> dates = new HashMap<>();
      dates.put(Instant.parse((1800 + i) + "-12-31T23:59:59Z").toEpochMilli(), 1);
      dates.put(Instant.parse((1800 + i + 10) + "-12-31T23:59:59Z").toEpochMilli(), 2);
      dates.put(Instant.parse((1800 + i + 20) + "-12-31T23:59:59Z").toEpochMilli(), 1);
      multiDates.put(""+i, dates);
      
      singleStrings.put(""+i, "abc" + i);
      Map<String, Integer> strings = new HashMap<>();
      strings.put("abc" + i, 1);
      strings.put("def" + i, 2);
      strings.put("ghi" + i, 1);
      multiStrings.put(""+i, strings);
      
      singleBooleans.put(""+i, i % 3 == 0);
      Map<Boolean, Integer> booleans = new HashMap<>();
      booleans.put(true, 1);
      booleans.put(false, 2);
      multiBooleans.put(""+i, booleans);
    }
    assertU(commit());
    
    ref = h.getCore().getSearcher();
    searcher = ref.get();
    
    indexSchema = h.getCore().getLatestSchema();
  }

