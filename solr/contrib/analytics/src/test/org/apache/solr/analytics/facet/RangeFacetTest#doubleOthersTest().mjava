  @Test
  public void doubleOthersTest() throws Exception {
    Map<String, String> expressions = new HashMap<>();
    expressions.put("mean", "mean(float_f)");
    expressions.put("count", "count(string_sm)");

    addFacet("before_between", "{ 'type':'range', "
        + " 'field': 'double_d', "
        + " 'start': '2', "
        + " 'end' : '4', "
        + " 'gaps' : ['1'], "
        + " 'others' : ['before', 'between'] }");

    addFacetValue("[2.0 TO 3.0)");
    addFacetResult("mean", 8.0/3.0);
    addFacetResult("count", 6L);

    addFacetValue("[3.0 TO 4.0)");
    addFacetResult("mean", 2.0);
    addFacetResult("count", 6L);

    addFacetValue("(* TO 2.0)");
    addFacetResult("mean", 10.0/3.0);
    addFacetResult("count", 6L);

    addFacetValue("[2.0 TO 4.0)");
    addFacetResult("mean", 14.0/6.0);
    addFacetResult("count", 12L);

    addFacet("after", "{ 'type':'range', "
        + " 'field': 'double_d', "
        + " 'start': '2', "
        + " 'end' : '4', "
        + " 'gaps' : ['1'], "
        + " 'others' : ['after'] }");

    addFacetValue("[2.0 TO 3.0)");
    addFacetResult("mean", 8.0/3.0);
    addFacetResult("count", 6L);

    addFacetValue("[3.0 TO 4.0)");
    addFacetResult("mean", 2.0);
    addFacetResult("count", 6L);

    addFacetValue("[4.0 TO *)");
    addFacetResult("mean", 2.5);
    addFacetResult("count", 6L);

    testGrouping(expressions);
  }

