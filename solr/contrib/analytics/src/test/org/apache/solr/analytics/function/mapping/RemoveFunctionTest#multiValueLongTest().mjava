  @Test
  public void multiValueLongTest() {
    TestLongValueStream val = new TestLongValueStream();
    TestLongValue remover = new TestLongValue();

    AnalyticsValueStream uncasted = RemoveFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, remover});
    assertTrue(uncasted instanceof LongValueStream);
    LongValueStream func = (LongValueStream) uncasted;

    // No values
    val.setValues();
    remover.setExists(false);
    func.streamLongs( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    remover.setValue(2323L).setExists(true);
    func.streamLongs( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Values exist
    val.setValues(323L, -9423L, -1234L, 23423L, -1234L, -1234L);
    remover.setValue(-1234L).setExists(true);
    Iterator<Long> values1 = Arrays.asList(323L, -9423L, 23423L).iterator();
    func.streamLongs( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next().longValue(), value);
    });
    assertFalse(values1.hasNext());

    val.setValues(323L, -9423L, -1234L, 23423L, -1234L, -1234L);
    remover.setExists(false);
    Iterator<Long> values2 = Arrays.asList(323L, -9423L, -1234L, 23423L, -1234L, -1234L).iterator();
    func.streamLongs( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next().longValue(), value);
    });
    assertFalse(values2.hasNext());

    val.setValues(323L, -9423L, -1234L, 23423L, -1234L, -1234L);
    remover.setValue(100L).setExists(true);
    Iterator<Long> values3 = Arrays.asList(323L, -9423L, -1234L, 23423L, -1234L, -1234L).iterator();
    func.streamLongs( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next().longValue(), value);
    });
    assertFalse(values3.hasNext());

    val.setValues(10L);
    remover.setValue(10L).setExists(true);
    func.streamLongs( value -> {
      assertTrue("There should be no values to stream", false);
    });
  }

