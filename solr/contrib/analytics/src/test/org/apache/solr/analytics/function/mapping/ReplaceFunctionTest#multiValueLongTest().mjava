  @Test
  public void multiValueLongTest() {
    TestLongValueStream val = new TestLongValueStream();
    TestLongValue comp = new TestLongValue();
    TestLongValue fill = new TestLongValue();

    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});
    assertTrue(uncasted instanceof LongValueStream);
    LongValueStream func = (LongValueStream) uncasted;

    // No values
    val.setValues();
    comp.setExists(false);
    fill.setExists(false);
    func.streamLongs( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    comp.setValue(2323L).setExists(true);
    fill.setValue(-5943L).setExists(true);
    func.streamLongs( value -> {
      assertTrue("There should be no values to stream", false);
    });
    
    // Comp doesn't exist
    val.setValues(1L, 234L, -234L, 4439L, -234L, -3245L);
    comp.setExists(false);
    fill.setValue(52135L).setExists(true);
    Iterator<Long> values1 = Arrays.asList(1L, 234L, -234L, 4439L, -234L, -3245L).iterator();
    func.streamLongs( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next().longValue(), value);
    });
    assertFalse(values1.hasNext());
    
    // Values exist
    val.setValues(1L, 234L, -234L, 4439L, -234L, -3245L);
    comp.setValue(-234L).setExists(true);
    fill.setExists(false);
    Iterator<Long> values2 = Arrays.asList(1L, 234L, 4439L, -3245L).iterator();
    func.streamLongs( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next().longValue(), value);
    });
    assertFalse(values2.hasNext());

    val.setValues(1L, 234L, -234L, 4439L, -234L, -3245L);
    comp.setValue(4439L).setExists(true);
    fill.setValue(-1000L).setExists(true);
    Iterator<Long> values3 = Arrays.asList(1L, 234L, -234L, -1000L, -234L, -3245L).iterator();
    func.streamLongs( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next().longValue(), value);
    });
    assertFalse(values3.hasNext());
  }

