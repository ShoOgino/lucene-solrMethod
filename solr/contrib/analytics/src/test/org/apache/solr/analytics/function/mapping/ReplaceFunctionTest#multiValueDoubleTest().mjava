  @Test
  public void multiValueDoubleTest() {
    TestDoubleValueStream val = new TestDoubleValueStream();
    TestDoubleValue comp = new TestDoubleValue();
    TestDoubleValue fill = new TestDoubleValue();

    AnalyticsValueStream uncasted = ReplaceFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, comp, fill});
    assertTrue(uncasted instanceof DoubleValueStream);
    DoubleValueStream func = (DoubleValueStream) uncasted;

    // No values
    val.setValues();
    comp.setExists(false);
    fill.setExists(false);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });

    val.setValues();
    comp.setValue(234237.67).setExists(true);
    fill.setValue(-234.312).setExists(true);
    func.streamDoubles( value -> {
      assertTrue("There should be no values to stream", false);
    });

    // Comp doesn't exist
    val.setValues(1423.3, 423.4323, -2349.2, -343.43934, 423.4323);
    comp.setExists(false);
    fill.setValue(234.234).setExists(true);
    Iterator<Double> values1 = Arrays.asList(1423.3, 423.4323, -2349.2, -343.43934, 423.4323).iterator();
    func.streamDoubles( value -> {
      assertTrue(values1.hasNext());
      assertEquals(values1.next(), value, .000001);
    });
    assertFalse(values1.hasNext());

    // Values exist
    val.setValues(1423.3, 423.4323, -2349.2, -343.43934, 423.4323);
    comp.setValue(423.4323).setExists(true);
    fill.setExists(false);
    Iterator<Double> values2 = Arrays.asList(1423.3, -2349.2, -343.43934).iterator();
    func.streamDoubles( value -> {
      assertTrue(values2.hasNext());
      assertEquals(values2.next(), value, .000001);
    });
    assertFalse(values2.hasNext());

    val.setValues(1423.3, 423.4323, -2349.2, -343.43934, 423.4323);
    comp.setValue(423.4323).setExists(true);
    fill.setValue(-1000.0).setExists(true);
    Iterator<Double> values3 = Arrays.asList(1423.3, -1000.0, -2349.2, -343.43934, -1000.0).iterator();
    func.streamDoubles( value -> {
      assertTrue(values3.hasNext());
      assertEquals(values3.next(), value, .000001);
    });
    assertFalse(values3.hasNext());
  }

