  private Map<String, Map<String, String>> readTypesFeaturesFieldsMapping() {
    Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>();

    Node fieldMappingNode = solrConfig.getNode(FIELD_MAPPING_NODE_PATH, true);
    /* iterate over UIMA types */
    if (fieldMappingNode.hasChildNodes()) {
      NodeList typeNodes = fieldMappingNode.getChildNodes();
      for (int i = 0; i < typeNodes.getLength(); i++) {
        /* <type> node */
        Node typeNode = typeNodes.item(i);
        if (typeNode.getNodeType() != Node.TEXT_NODE) {
          Node typeNameAttribute = typeNode.getAttributes().getNamedItem("name");
          /* get a UIMA typename */
          String typeName = typeNameAttribute.getNodeValue();
          /* create entry for UIMA type */
          map.put(typeName, new HashMap<String, String>());
          if (typeNode.hasChildNodes()) {
            /* iterate over features */
            NodeList featuresNodeList = typeNode.getChildNodes();
            for (int j = 0; j < featuresNodeList.getLength(); j++) {
              Node mappingNode = featuresNodeList.item(j);
              if (mappingNode.getNodeType() != Node.TEXT_NODE) {
                /* get field name */
                Node fieldNameNode = mappingNode.getAttributes().getNamedItem("field");
                String mappedFieldName = fieldNameNode.getNodeValue();
                /* get feature name */
                Node featureNameNode = mappingNode.getAttributes().getNamedItem("feature");
                String featureName = featureNameNode.getNodeValue();
                /* map the feature to the field for the specified type */
                map.get(typeName).put(featureName, mappedFieldName);
              }
            }
          }
        }
      }
    }
    return map;
  }

