  /**
   * map features of a certain UIMA type to corresponding Solr fields based on the mapping
   *
   * @param typeName             name of UIMA type to map
   */
  void map(String typeName, Map<String, MapField> featureFieldsmapping) throws FieldMappingException {
    try {
      Type type = cas.getTypeSystem().getType(typeName);
      for (FSIterator<FeatureStructure> iterator = cas.getFSIndexRepository().getAllIndexedFS(type); iterator
          .hasNext(); ) {
        FeatureStructure fs = iterator.next();
        for (String featureName : featureFieldsmapping.keySet()) {
          MapField mapField = featureFieldsmapping.get(featureName);
          String fieldNameFeature = mapField.getFieldNameFeature();
          String fieldNameFeatureValue = fieldNameFeature == null ? null :
              fs.getFeatureValueAsString(type.getFeatureByBaseName(fieldNameFeature));
          String fieldName = mapField.getFieldName(fieldNameFeatureValue);
          if (log.isInfoEnabled()) {
            log.info("mapping {}@{} to {}", new Object[]{typeName, featureName, fieldName});
          }
          String featureValue;
          if (fs instanceof Annotation && "coveredText".equals(featureName)) {
            featureValue = ((Annotation) fs).getCoveredText();
          } else {
            featureValue = fs.getFeatureValueAsString(type.getFeatureByBaseName(featureName));
          }
          if (log.isDebugEnabled()) {
            log.debug("writing {} in {}", new Object[]{featureValue, fieldName});
          }
          document.addField(fieldName, featureValue);
        }
      }
    } catch (Exception e) {
      throw new FieldMappingException(e);
    }
  }

