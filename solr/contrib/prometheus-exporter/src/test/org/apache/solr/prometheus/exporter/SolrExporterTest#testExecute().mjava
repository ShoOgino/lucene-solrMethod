  @Test
  public void testExecute() throws Exception {
    String configFile = getFile("conf/config.yml").getAbsolutePath();

    SolrCollectorConfig collectorConfig = new Yaml().loadAs(new FileReader(configFile), SolrCollectorConfig.class);

    // solr client
    CloudSolrClient cloudSolrClient = cluster.getSolrClient();

    int port;
    ServerSocket socket = null;
    try {
      socket = new ServerSocket(0);
      port = socket.getLocalPort();
    } finally {
      socket.close();
    }

    // index sample docs
    File exampleDocsDir = new File(getFile("exampledocs").getAbsolutePath());
    List<File> xmlFiles = Arrays.asList(exampleDocsDir.listFiles((dir, name) -> name.endsWith(".xml")));
    for (File xml : xmlFiles) {
      ContentStreamUpdateRequest req = new ContentStreamUpdateRequest("/update");
      req.addFile(xml, "application/xml");
      cloudSolrClient.request(req, "collection1");
    }
    cloudSolrClient.commit("collection1");

    // start exporter
    SolrExporter solrExporter = new SolrExporter(port, cloudSolrClient, collectorConfig, 1);
    try {
      solrExporter.start();

      URI uri = new URI("http://localhost:" + String.valueOf(port) + "/metrics");

      CloseableHttpClient httpclient = HttpClients.createDefault();
      CloseableHttpResponse response = null;
      try {
        HttpGet request = new HttpGet(uri);
        response = httpclient.execute(request);

        int expectedHTTPStatusCode = HttpStatus.SC_OK;
        int actualHTTPStatusCode = response.getStatusLine().getStatusCode();
        assertEquals(expectedHTTPStatusCode, actualHTTPStatusCode);
      } finally {
        response.close();
        httpclient.close();
      }
    } finally {
      solrExporter.stop();
    }
  }

