  protected MetricSamples request(SolrClient client, MetricsQuery query) throws IOException {
    MetricSamples samples = new MetricSamples();

    QueryRequest queryRequest = new QueryRequest(query.getParameters());
    queryRequest.setPath(query.getPath());

    NamedList<Object> queryResponse = null;
    try {
      if (!query.getCollection().isPresent() && !query.getCore().isPresent()) {
        queryResponse = client.request(queryRequest);
      } else if (query.getCore().isPresent()) {
        queryResponse = client.request(queryRequest, query.getCore().get());
      } else if (query.getCollection().isPresent()) {
        queryResponse = client.request(queryRequest, query.getCollection().get());
      }
    } catch (SolrServerException | IOException e) {
      log.error("failed to request: {} {}", queryRequest.getPath(), e.getMessage());
    }

    JsonNode jsonNode = OBJECT_MAPPER.readTree((String) queryResponse.get("response"));

    for (JsonQuery jsonQuery : query.getJsonQueries()) {
      try {
        List<JsonNode> results = jsonQuery.apply(jsonNode);
        for (JsonNode result : results) {
          String type = result.get("type").textValue();
          String name = result.get("name").textValue();
          String help = result.get("help").textValue();
          double value = result.get("value").doubleValue();

          List<String> labelNames = new ArrayList<>();
          List<String> labelValues = new ArrayList<>();

          /* Labels in response */
          for (JsonNode item : result.get("label_names")) {
            labelNames.add(item.textValue());
          }

          for (JsonNode item : result.get("label_values")) {
            labelValues.add(item.textValue());
          }

          /* Labels due to client */
          if (client instanceof HttpSolrClient) {
            labelNames.add("base_url");
            labelValues.add(((HttpSolrClient) client).getBaseURL());
          }

          if (client instanceof CloudSolrClient) {
            labelNames.add("zk_host");
            labelValues.add(((CloudSolrClient) client).getZkHost());
          }

          // Deduce core if not there
          if (labelNames.indexOf("core") < 0 && labelNames.indexOf("collection") >= 0 && labelNames.indexOf("shard") >= 0 && labelNames.indexOf("replica") >= 0) {
            labelNames.add("core");

            String collection = labelValues.get(labelNames.indexOf("collection"));
            String shard = labelValues.get(labelNames.indexOf("shard"));
            String replica = labelValues.get(labelNames.indexOf("replica"));

            labelValues.add(collection + "_" + shard + "_" + replica);
          }

          samples.addSamplesIfNotPresent(name, new Collector.MetricFamilySamples(
              name,
              Collector.Type.valueOf(type),
              help,
              new ArrayList<>()));

          samples.addSampleIfMetricExists(name, new Collector.MetricFamilySamples.Sample(
              name, labelNames, labelValues, value));
        }
      } catch (JsonQueryException e) {
        log.error("Error apply JSON query={} to result", jsonQuery, e);
        scrapeErrorTotal.inc();
      }
    }

    return samples;
  }

