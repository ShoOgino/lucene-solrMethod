  /**
   * Collect samples.
   */
  public List<MetricFamilySamples> collect() {
    // start time of scraping.
    long startTime = System.nanoTime();

    this.executorService = ExecutorUtil.newMDCAwareFixedThreadPool(numThreads, new DefaultSolrThreadFactory("solr-exporter"));

    Map<String, MetricFamilySamples> metricFamilySamplesMap = new LinkedHashMap<>();

    List<Future<Map<String, MetricFamilySamples>>> futureList = new ArrayList<>();

    try {
      // Ping
      Node pingNode = this.config.getNode("/config/rules/ping", true);
      if (pingNode != null) {
        NamedList pingNL = DOMUtil.childNodesToNamedList(pingNode);
        List<NamedList> requestsNL = pingNL.getAll("request");

        if (this.solrClient instanceof CloudSolrClient) {
          // in SolrCloud mode
          List<HttpSolrClient> httpSolrClients = new ArrayList<>();
          try {
            httpSolrClients = getHttpSolrClients((CloudSolrClient) this.solrClient);
            for (HttpSolrClient httpSolrClient : httpSolrClients) {
              for (NamedList requestNL : requestsNL) {
                String coreName = (String) ((NamedList) requestNL.get("query")).get("core");
                String collectionName = (String) ((NamedList) requestNL.get("query")).get("collection");
                if (coreName == null && collectionName == null) {
                  try {
                    List<String> cores = getCores(httpSolrClient);
                    for (String core : cores) {
                      LinkedHashMap conf = (LinkedHashMap) requestNL.asMap(10);
                      LinkedHashMap query = (LinkedHashMap) conf.get("query");
                      if (query != null) {
                        query.put("core", core);
                      }

                      SolrScraper scraper = new SolrScraper(httpSolrClient, conf);
                      Future<Map<String, MetricFamilySamples>> future = this.executorService.submit(scraper);
                      futureList.add(future);
                    }
                  } catch (SolrServerException | IOException e) {
                    this.logger.error("failed to get cores: " + e.getMessage());
                  }
                } else if (coreName != null && collectionName == null) {
                  LinkedHashMap conf = (LinkedHashMap) requestNL.asMap(10);
                  SolrScraper scraper = new SolrScraper(httpSolrClient, conf);
                  Future<Map<String, MetricFamilySamples>> future = this.executorService.submit(scraper);
                  futureList.add(future);
                }
              }
            }

            // wait for HttpColeClients
            for (Future<Map<String, MetricFamilySamples>> future : futureList) {
              try {
                Map<String, MetricFamilySamples> m = future.get(60, TimeUnit.SECONDS);
                mergeMetrics(metricFamilySamplesMap, m);
              } catch (InterruptedException | ExecutionException | TimeoutException e) {
                this.logger.error(e.getMessage());
              }
            }
          } catch (SolrServerException | IOException e) {
            this.logger.error("failed to get HttpSolrClients: " + e.getMessage());
          } finally {
            for (HttpSolrClient httpSolrClient : httpSolrClients) {
              try {
                httpSolrClient.close();
              } catch (IOException e) {
                this.logger.error("failed to close HttpSolrClient: " + e.getMessage());
              }
            }
          }

          // collection
          for (NamedList requestNL : requestsNL) {
            String coreName = (String) ((NamedList) requestNL.get("query")).get("core");
            String collectionName = (String) ((NamedList) requestNL.get("query")).get("collection");
            if (coreName == null && collectionName == null) {
              try {
                List<String> collections = getCollections((CloudSolrClient) this.solrClient);
                for (String collection : collections) {
                  LinkedHashMap conf = (LinkedHashMap) requestNL.asMap(10);
                  LinkedHashMap query = (LinkedHashMap) conf.get("query");
                  if (query != null) {
                    query.put("collection", collection);
                  }

                  SolrScraper scraper = new SolrScraper(this.solrClient, conf);
                  Future<Map<String, MetricFamilySamples>> future = this.executorService.submit(scraper);
                  futureList.add(future);
                }
              } catch (SolrServerException | IOException e) {
                this.logger.error("failed to get cores: " + e.getMessage());
              }
            } else if (coreName == null && collectionName != null) {
              LinkedHashMap conf = (LinkedHashMap) requestNL.asMap(10);

              SolrScraper scraper = new SolrScraper(this.solrClient, conf);
              Future<Map<String, MetricFamilySamples>> future = this.executorService.submit(scraper);
              futureList.add(future);
            }
          }
        } else {
          // in Standalone mode
          for (NamedList requestNL : requestsNL) {
            String coreName = (String) ((NamedList) requestNL.get("query")).get("core");
            if (coreName == null) {
              try {
                List<String> cores = getCores((HttpSolrClient) this.solrClient);
                for (String core : cores) {
                  LinkedHashMap conf = (LinkedHashMap) requestNL.asMap(10);
                  LinkedHashMap query = (LinkedHashMap) conf.get("query");
                  if (query != null) {
                    query.put("core", core);
                  }

                  SolrScraper scraper = new SolrScraper(this.solrClient, conf);
                  Future<Map<String, MetricFamilySamples>> future = this.executorService.submit(scraper);
                  futureList.add(future);
                }
              } catch (SolrServerException | IOException e) {
                this.logger.error("failed to get cores: " + e.getMessage());
              }
            } else {
              LinkedHashMap conf = (LinkedHashMap) requestNL.asMap(10);

              SolrScraper scraper = new SolrScraper(this.solrClient, conf);
              Future<Map<String, MetricFamilySamples>> future = this.executorService.submit(scraper);
              futureList.add(future);
            }
          }
        }
      }

      // Metrics
      Node metricsNode = this.config.getNode("/config/rules/metrics", false);
      if (metricsNode != null) {
        NamedList metricsNL = DOMUtil.childNodesToNamedList(metricsNode);
        List<NamedList> requestsNL = metricsNL.getAll("request");

        if (this.solrClient instanceof CloudSolrClient) {
          // in SolrCloud mode
          List<HttpSolrClient> httpSolrClients = new ArrayList<>();
          try {
            httpSolrClients = getHttpSolrClients((CloudSolrClient) this.solrClient);
            for (HttpSolrClient httpSolrClient : httpSolrClients) {
              for (NamedList requestNL : requestsNL) {
                LinkedHashMap conf = (LinkedHashMap) requestNL.asMap(10);

                SolrScraper scraper = new SolrScraper(httpSolrClient, conf);
                Future<Map<String, MetricFamilySamples>> future = this.executorService.submit(scraper);
                futureList.add(future);
              }
            }

            // wait for HttpColeClients
            for (Future<Map<String, MetricFamilySamples>> future : futureList) {
              try {
                Map<String, MetricFamilySamples> m = future.get(60, TimeUnit.SECONDS);
                mergeMetrics(metricFamilySamplesMap, m);
              } catch (InterruptedException | ExecutionException | TimeoutException e) {
                this.logger.error(e.getMessage());
              }
            }
          } catch (SolrServerException | IOException e) {
            this.logger.error(e.getMessage());
          } finally {
            for (HttpSolrClient httpSolrClient : httpSolrClients) {
              try {
                httpSolrClient.close();
              } catch (IOException e) {
                this.logger.error(e.getMessage());
              }
            }
          }
        } else {
          // in Standalone mode
          for (NamedList requestNL : requestsNL) {
            LinkedHashMap conf = (LinkedHashMap) requestNL.asMap(10);

            SolrScraper scraper = new SolrScraper(this.solrClient, conf);
            Future<Map<String, MetricFamilySamples>> future = this.executorService.submit(scraper);
            futureList.add(future);
          }
        }
      }

      // Collections
      Node collectionsNode = this.config.getNode("/config/rules/collections", false);
      if (collectionsNode != null && this.solrClient instanceof CloudSolrClient) {
        NamedList collectionsNL = DOMUtil.childNodesToNamedList(collectionsNode);
        List<NamedList> requestsNL = collectionsNL.getAll("request");

        for (NamedList requestNL : requestsNL) {
          LinkedHashMap conf = (LinkedHashMap) requestNL.asMap(10);

          SolrScraper scraper = new SolrScraper(this.solrClient, conf);
          Future<Map<String, MetricFamilySamples>> future = this.executorService.submit(scraper);
          futureList.add(future);
        }
      }

      // Search
      Node searchNode = this.config.getNode("/config/rules/search", false);
      if (searchNode != null) {
        NamedList searchNL = DOMUtil.childNodesToNamedList(searchNode);
        List<NamedList> requestsNL = searchNL.getAll("request");

        for (NamedList requestNL : requestsNL) {
          LinkedHashMap conf = (LinkedHashMap) requestNL.asMap(10);

          SolrScraper scraper = new SolrScraper(this.solrClient, conf);
          Future<Map<String, MetricFamilySamples>> future = this.executorService.submit(scraper);
          futureList.add(future);
        }
      }

      // get future
      for (Future<Map<String, MetricFamilySamples>> future : futureList) {
        try {
          Map<String, MetricFamilySamples> m = future.get(60, TimeUnit.SECONDS);
          mergeMetrics(metricFamilySamplesMap, m);
        } catch (InterruptedException | ExecutionException | TimeoutException e) {
          this.logger.error(e.getMessage());
        }
      }
    } catch (Exception e) {
      this.logger.error(e.getMessage());
      e.printStackTrace();
    }

    // return value
    List<MetricFamilySamples> metricFamiliesSamplesList = new ArrayList<>();

    // add solr metrics
    for (String gaugeMetricName : metricFamilySamplesMap.keySet()) {
      MetricFamilySamples metricFamilySamples = metricFamilySamplesMap.get(gaugeMetricName);
      if (metricFamilySamples.samples.size() > 0) {
        metricFamiliesSamplesList.add(metricFamilySamples);
      }
    }

    // add scrape duration metric
    List<MetricFamilySamples.Sample> durationSample = new ArrayList<>();
    durationSample.add(new MetricFamilySamples.Sample("solr_exporter_duration_seconds", new ArrayList<>(), new ArrayList<>(), (System.nanoTime() - startTime) / 1.0E9));
    metricFamiliesSamplesList.add(new MetricFamilySamples("solr_exporter_duration_seconds", Type.GAUGE, "Time this Solr exporter took, in seconds.", durationSample));

    this.executorService.shutdown();

    return metricFamiliesSamplesList;
  }

