  /**
   * Create Solr client
   */
  private static SolrClient createClient(String connStr) {
    SolrClient solrClient;

    Pattern baseUrlPattern = Pattern.compile("^https?:\\/\\/[\\w\\/:%#\\$&\\?\\(\\)~\\.=\\+\\-]+$");
    Pattern zkHostPattern = Pattern.compile("^(?<host>[^\\/]+)(?<chroot>|(?:\\/.*))$");
    Matcher matcher;

    matcher = baseUrlPattern.matcher(connStr);
    if (matcher.matches()) {
      NoOpResponseParser responseParser = new NoOpResponseParser();
      responseParser.setWriterType("json");

      HttpSolrClient.Builder builder = new HttpSolrClient.Builder();
      builder.withBaseSolrUrl(connStr);

      HttpSolrClient httpSolrClient = builder.build();
      httpSolrClient.setParser(responseParser);

      solrClient = httpSolrClient;
    } else {
      String host = "";
      String chroot = "";

      matcher = zkHostPattern.matcher(connStr);
      if (matcher.matches()) {
        host = matcher.group("host") != null ? matcher.group("host") : "";
        chroot = matcher.group("chroot") != null ? matcher.group("chroot") : "";
      }

      NoOpResponseParser responseParser = new NoOpResponseParser();
      responseParser.setWriterType("json");

      CloudSolrClient.Builder builder = new CloudSolrClient.Builder();
      if (host.contains(",")) {
        List<String> hosts = new ArrayList<>();
        for (String h : host.split(",")) {
          if (h != null && !h.equals("")) {
            hosts.add(h.trim());
          }
        }
        builder.withZkHost(hosts);
      } else {
        builder.withZkHost(host);
      }
      if (chroot.equals("")) {
        builder.withZkChroot("/");
      } else {
        builder.withZkChroot(chroot);
      }

      CloudSolrClient cloudSolrClient = builder.build();
      cloudSolrClient.setParser(responseParser);

      solrClient = cloudSolrClient;
    }

    return solrClient;
  }

