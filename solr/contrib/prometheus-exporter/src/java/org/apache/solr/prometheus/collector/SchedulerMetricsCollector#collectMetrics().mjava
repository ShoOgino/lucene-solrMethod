  private@SuppressWarnings({"try"})
  void collectMetrics() {

    try (Histogram.Timer timer = metricsCollectionTime.startTimer()) {
      log.info("Beginning metrics collection");

      final List<Future<MetricSamples>> futures = executor.invokeAll(
          metricCollectors.stream()
              .map(metricCollector -> (Callable<MetricSamples>) metricCollector::collect)
              .collect(Collectors.toList())
      );
      MetricSamples metricSamples = new MetricSamples();
      for (Future<MetricSamples> future : futures) {
        try {
          metricSamples.addAll(future.get());
        } catch (ExecutionException e) {
          log.error("Error occurred during metrics collection", e.getCause());//nowarn
          // continue any ways; do not fail
        }
      }

      notifyObservers(metricSamples.asList());

      log.info("Completed metrics collection");
    } catch (InterruptedException e) {
      log.warn("Interrupted waiting for metric collection to complete", e);
      Thread.currentThread().interrupt();
    }

  }

