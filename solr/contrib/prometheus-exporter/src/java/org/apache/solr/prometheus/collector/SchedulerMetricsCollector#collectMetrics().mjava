  private void collectMetrics() {

    try (Histogram.Timer timer = metricsCollectionTime.startTimer()) {
      log.info("Beginning metrics collection");

      List<CompletableFuture<MetricSamples>> futures = new ArrayList<>();

      for (MetricCollector metricsCollector : metricCollectors) {
        futures.add(CompletableFuture.supplyAsync(() -> {
          try {
            return metricsCollector.collect();
          } catch (Exception e) {
            throw new RuntimeException(e);
          }
        }, executor));
      }

      try {
        CompletableFuture<List<MetricSamples>> sampleFuture = Async.waitForAllSuccessfulResponses(futures);
        List<MetricSamples> samples = sampleFuture.get();

        MetricSamples metricSamples = new MetricSamples();
        samples.forEach(metricSamples::addAll);

        notifyObservers(metricSamples.asList());

        log.info("Completed metrics collection");
      } catch (InterruptedException | ExecutionException e) {
        log.error("Error while waiting for metric collection to complete", e);
      }
    }

  }

