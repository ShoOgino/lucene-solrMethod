  /**
   * Can be used to transform input values based on their {@link org.apache.solr.schema.SchemaField}
   * <p>
   * This implementation only formats dates using the {@link ExtractionDateUtil}.
   *
   * @param val    The value to transform
   * @param schFld The {@link org.apache.solr.schema.SchemaField}
   * @return The potentially new value.
   */
  protected String transformValue(String val, SchemaField schFld) {
    String result = val;
    if (schFld != null && schFld.getType() instanceof TrieDateField) {
      //try to transform the date
      try {
        Date date = ExtractionDateUtil.parseDate(val, dateFormats); // may throw
        result = date.toInstant().toString();//ISO format
      } catch (Exception e) {
        // Let the specific fieldType handle errors
        // throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "Invalid value: " + val + " for field: " + schFld, e);
      }
    }
    return result;
  }

