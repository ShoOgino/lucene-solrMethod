  /**
   * Parses rule file from stream and returns a Map of all rules found
   * @param is input stream for the file
   */
  public static LinkedHashMap<Pattern,String> parseRulesFile(InputStream is) {
    LinkedHashMap<Pattern,String> rules = new LinkedHashMap<>();
    BufferedReader br = new BufferedReader(IOUtils.getDecodingReader(is, StandardCharsets.UTF_8));
    String line;
    try {
      int linenum = 0;
      while ((line = br.readLine()) != null)   {
        linenum++;
        // Remove comments
        String[] arr = line.split("#");
        if(arr.length > 0)
          line = arr[0].trim();
        if(line.length() == 0) 
          continue;
        int sep = line.indexOf("=");
        if(sep <= 0) {
          log.warn("Wrong format of password line {}", linenum);
          continue;
        }
        String pass = line.substring(sep+1).trim();
        String regex = line.substring(0, sep).trim();
        try {
          Pattern pattern = Pattern.compile(regex);
          rules.put(pattern,  pass);
        } catch(PatternSyntaxException pse) {
          log.warn("Key of line {} was not a valid regex pattern{}", linenum, pse);
          continue;
        }
      }
      is.close();
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
    return rules;
  }

