  /** Returns the most recent document among the colliding updates */
  protected Iterator<SolrInputDocument> getMaximum(Iterator<SolrInputDocument> updates, String fieldName,
      Comparator child, Context context) {
    
    SolrInputDocumentComparator comp = new SolrInputDocumentComparator(fieldName, child);
    SolrInputDocument max = null;
    long numDupes = 0;
    long numOutdated = 0;
    while (updates.hasNext()) {
      SolrInputDocument next = updates.next(); 
      assert next != null;
      if (max == null) {
        max = next;
      } else {
        int c = comp.compare(next, max);
        if (c == 0) {
          LOG.debug("Ignoring document version because it is a duplicate: {}", next);
          numDupes++;
        } else if (c > 0) {
          LOG.debug("Ignoring document version because it is outdated: {}", max);
          max = next;
          numOutdated++;
        } else {
          LOG.debug("Ignoring document version because it is outdated: {}", next);        
          numOutdated++;
        }
      }
    }
    
    assert max != null;
    if (numDupes > 0) {
      context.getCounter(COUNTER_GROUP, DUPLICATES_COUNTER_NAME).increment(numDupes);
    }
    if (numOutdated > 0) {
      context.getCounter(COUNTER_GROUP, OUTDATED_COUNTER_NAME).increment(numOutdated);
    }
    return Collections.singletonList(max).iterator();
  }

