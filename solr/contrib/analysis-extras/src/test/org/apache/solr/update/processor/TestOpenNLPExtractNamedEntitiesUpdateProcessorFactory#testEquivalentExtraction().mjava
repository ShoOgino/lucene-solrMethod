  public void testEquivalentExtraction() throws Exception {
    SolrInputDocument d;

    // regardless of chain, all of these checks should be equivalent
    for (String chain : Arrays.asList("extract-single", "extract-single-regex",
        "extract-multi", "extract-multi-regex",
        "extract-array", "extract-array-regex",
        "extract-selector", "extract-selector-regex")) {

      // simple extract
      d = processAdd(chain,
          doc(f("id", "1111"),
              f("source0_s", "Totally Flashman."), // not extracted
              f("source1_s", "One nation under Flashman.", "Good Flashman.")));
      assertNotNull(chain, d);
      assertEquals(chain, Arrays.asList("Flashman", "Flashman"), d.getFieldValues("dest_s"));

      // append to existing values
      d = processAdd(chain,
          doc(f("id", "1111"),
              field("dest_s", "orig1", "orig2"),
              f("source0_s", "Flashman. In totality."), // not extracted
              f("source1_s", "Two nations under Flashman.", "Meh Flashman.")));
      assertNotNull(chain, d);
      assertEquals(chain, Arrays.asList("orig1", "orig2", "Flashman", "Flashman"), d.getFieldValues("dest_s"));
    }

    // should be equivalent for any chain matching source1_s and source2_s (but not source0_s)
    for (String chain : Arrays.asList("extract-multi", "extract-multi-regex",
        "extract-array", "extract-array-regex",
        "extract-selector", "extract-selector-regex")) {

      // simple extract
      d = processAdd(chain,
          doc(f("id", "1111"),
              f("source0_s", "Not Flashman."), // not extracted
              f("source1_s", "Could have had a Flashman.", "Bad Flashman."),
              f("source2_s", "Indubitably Flashman.")));
      assertNotNull(chain, d);
      assertEquals(chain, Arrays.asList("Flashman", "Flashman", "Flashman"), d.getFieldValues("dest_s"));

      // append to existing values
      d = processAdd(chain,
          doc(f("id", "1111"),
              field("dest_s", "orig1", "orig2"),
              f("source0_s", "Never Flashman."), // not extracted
              f("source1_s", "Seeking Flashman.", "Evil incarnate Flashman."),
              f("source2_s", "Perfunctorily Flashman.")));
      assertNotNull(chain, d);
      assertEquals(chain, Arrays.asList("orig1", "orig2", "Flashman", "Flashman", "Flashman"), d.getFieldValues("dest_s"));
    }

    // any chain that copies source1_s to dest_s should be equivalent for these assertions
    for (String chain : Arrays.asList("extract-single", "extract-single-regex",
        "extract-multi", "extract-multi-regex",
        "extract-array", "extract-array-regex",
        "extract-selector", "extract-selector-regex")) {

      // simple extract
      d = processAdd(chain,
          doc(f("id", "1111"),
              f("source1_s", "Always Flashman.", "Flashman. Noone else.")));
      assertNotNull(chain, d);
      assertEquals(chain, Arrays.asList("Flashman", "Flashman"), d.getFieldValues("dest_s"));

      // append to existing values
      d = processAdd(chain,
          doc(f("id", "1111"),
              field("dest_s", "orig1", "orig2"),
              f("source1_s", "Flashman.  And, scene.", "Contemporary Flashman. Yeesh.")));
      assertNotNull(chain, d);
      assertEquals(chain, Arrays.asList("orig1", "orig2", "Flashman", "Flashman"), d.getFieldValues("dest_s"));
    }
  }

