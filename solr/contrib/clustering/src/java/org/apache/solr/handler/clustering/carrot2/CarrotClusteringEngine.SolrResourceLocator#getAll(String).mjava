    @Override
    public IResource[] getAll(final String resource) {
      final String resourceName = carrot2ResourcesDir + "/" + resource;
      log.debug("Looking for Solr resource: " + resourceName);

      InputStream resourceStream = null;
      final byte [] asBytes;
      try {
        resourceStream = resourceLoader.openResource(resourceName);
        asBytes = IOUtils.toByteArray(resourceStream);
      } catch (IOException e) {
        log.debug("Resource not found in Solr's config: " + resourceName
            + ". Using the default " + resource + " from Carrot JAR.");          
        return new IResource[] {};
      } finally {
        if (resourceStream != null) {
          try {
            resourceStream.close();
          } catch (IOException e) {
            // ignore.
          }
        }
      }

      log.info("Loaded Solr resource: " + resourceName);

      final IResource foundResource = new IResource() {
        @Override
        public InputStream open() {
          return new ByteArrayInputStream(asBytes);
        }

        @Override
        public int hashCode() {
          // In case multiple resources are found they will be deduped, but we don't use it in Solr,
          // so simply rely on instance equivalence.
          return super.hashCode();
        }
        
        @Override
        public boolean equals(Object obj) {
          // In case multiple resources are found they will be deduped, but we don't use it in Solr,
          // so simply rely on instance equivalence.
          return super.equals(obj);
        }

        @Override
        public String toString() {
          return "Solr config resource: " + resourceName;
        }
      };

      return new IResource[] { foundResource };
    }

