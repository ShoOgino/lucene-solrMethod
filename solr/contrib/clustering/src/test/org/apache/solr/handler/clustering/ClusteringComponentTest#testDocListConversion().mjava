  // tests ClusteringComponent.docListToSolrDocumentList
  @Test
  public void testDocListConversion() throws Exception {
    assertU("", adoc("id", "3234", "url", "ignoreme", "val_i", "1",
        "val_dynamic", "quick red fox"));
    assertU("", adoc("id", "3235", "url", "ignoreme", "val_i", "1",
        "val_dynamic", "quick green fox"));
    assertU("", adoc("id", "3236", "url", "ignoreme", "val_i", "1",
        "val_dynamic", "quick brown fox"));
    assertU("", commit());

    h.getCore().withSearcher(srchr -> {
      QueryResult qr = new QueryResult();
      QueryCommand cmd = new QueryCommand();
      cmd.setQuery(new MatchAllDocsQuery());
      cmd.setLen(10);
      qr = srchr.search(qr, cmd);

      DocList docs = qr.getDocList();
      assertEquals("wrong docs size", 3, docs.size());
      Set<String> fields = new HashSet<>();
      fields.add("val_dynamic");
      fields.add("dynamic_val");
      fields.add("range_facet_l"); // copied from id

      SolrDocumentList list = ClusteringComponent.docListToSolrDocumentList(docs, srchr, fields, null);
      assertEquals("wrong list Size", docs.size(), list.size());
      for (SolrDocument document : list) {

        assertTrue("unexpected field", ! document.containsKey("val_i"));
        assertTrue("unexpected id field", ! document.containsKey("id"));

        assertTrue("original field", document.containsKey("val_dynamic"));
        assertTrue("dyn copy field", document.containsKey("dynamic_val"));
        assertTrue("copy field", document.containsKey("range_facet_l"));

        assertNotNull("original field null", document.get("val_dynamic"));
        assertNotNull("dyn copy field null", document.get("dynamic_val"));
        assertNotNull("copy field null", document.get("range_facet_l"));
      }
      return null;
    });
  }

