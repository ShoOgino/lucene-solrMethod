  /**
   * returns a FeatureLogger that logs the features
   * 'featureFormat' param: 'dense' will write features in dense format,
   * 'sparse' will write the features in sparse format, null or empty will
   * default to 'sparse'
   *
   *
   * @return a feature logger for the format specified.
   */
  private FeatureLogger createFeatureLogger(String featureFormat) {
    final FeatureLogger.FeatureFormat f;
    if (featureFormat == null || featureFormat.isEmpty() ||
        featureFormat.equals("sparse")) {
      f = FeatureLogger.FeatureFormat.SPARSE;
    }
    else if (featureFormat.equals("dense")) {
      f = FeatureLogger.FeatureFormat.DENSE;
    }
    else {
      f = FeatureLogger.FeatureFormat.SPARSE;
      log.warn("unknown feature logger feature format {}", featureFormat);
    }
    if (fvCacheName == null) {
      throw new IllegalArgumentException("a fvCacheName must be configured");
    }
    return new CSVFeatureLogger(fvCacheName, f, csvKeyValueDelimiter, csvFeatureSeparator);
  }

