    @Override
    public Query parse() throws SyntaxError {
      // ReRanking Model
      final String modelName = localParams.get(LTRQParserPlugin.MODEL);
      if ((modelName == null) || modelName.isEmpty()) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
            "Must provide model in the request");
      }

      final LTRScoringModel ltrScoringModel = mr.getModel(modelName);
      if (ltrScoringModel == null) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
            "cannot find " + LTRQParserPlugin.MODEL + " " + modelName);
      }

      final String modelFeatureStoreName = ltrScoringModel.getFeatureStoreName();
      final boolean extractFeatures = SolrQueryRequestContextUtils.isExtractingFeatures(req);
      final String fvStoreName = SolrQueryRequestContextUtils.getFvStoreName(req);
      // Check if features are requested and if the model feature store and feature-transform feature store are the same
      final boolean featuresRequestedFromSameStore = (modelFeatureStoreName.equals(fvStoreName) || fvStoreName == null) ? extractFeatures:false;

      final LTRScoringQuery scoringQuery = new LTRScoringQuery(ltrScoringModel,
          extractEFIParams(localParams),
          featuresRequestedFromSameStore, threadManager);

      // Enable the feature vector caching if we are extracting features, and the features
      // we requested are the same ones we are reranking with
      if (featuresRequestedFromSameStore) {
        scoringQuery.setFeatureLogger( SolrQueryRequestContextUtils.getFeatureLogger(req) );
      }
      SolrQueryRequestContextUtils.setScoringQuery(req, scoringQuery);

      int reRankDocs = localParams.getInt(RERANK_DOCS, DEFAULT_RERANK_DOCS);
      if (reRankDocs <= 0) {
        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,
          "Must rerank at least 1 document");
      }

      // External features
      scoringQuery.setRequest(req);

      return new LTRQuery(scoringQuery, reRankDocs);
    }

