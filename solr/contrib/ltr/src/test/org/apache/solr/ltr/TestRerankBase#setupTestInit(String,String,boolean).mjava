  protected static SortedMap<ServletHolder,String>  setupTestInit(
      String solrconfig, String schema,
      boolean isPersistent) throws Exception {
    tmpSolrHome = createTempDir().toFile();
    tmpConfDir = new File(tmpSolrHome, CONF_DIR);
    tmpConfDir.deleteOnExit();
    FileUtils.copyDirectory(new File(TEST_HOME()),
        tmpSolrHome.getAbsoluteFile());

    final File fstore = new File(tmpConfDir, FEATURE_FILE_NAME);
    final File mstore = new File(tmpConfDir, MODEL_FILE_NAME);

    if (isPersistent) {
      fstorefile = fstore;
      mstorefile = mstore;
    }

    if (fstore.exists()) {
      if (log.isInfoEnabled()) {
        log.info("remove feature store config file in {}", fstore.getAbsolutePath());
      }
      Files.delete(fstore.toPath());
    }
    if (mstore.exists()) {
      if (log.isInfoEnabled()) {
        log.info("remove model store config file in {}", mstore.getAbsolutePath());
      }
      Files.delete(mstore.toPath());
    }
    if (!solrconfig.equals("solrconfig.xml")) {
      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()
          + "/collection1/conf/" + solrconfig),
          new File(tmpSolrHome.getAbsolutePath()
              + "/collection1/conf/solrconfig.xml"));
    }
    if (!schema.equals("schema.xml")) {
      FileUtils.copyFile(new File(tmpSolrHome.getAbsolutePath()
          + "/collection1/conf/" + schema),
          new File(tmpSolrHome.getAbsolutePath()
              + "/collection1/conf/schema.xml"));
    }

    System.setProperty("managed.schema.mutable", "true");
    final SortedMap<ServletHolder,String> extraServlets = new TreeMap<>();
    return extraServlets;
  }

