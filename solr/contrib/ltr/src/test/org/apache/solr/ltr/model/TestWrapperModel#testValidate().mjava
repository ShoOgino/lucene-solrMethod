  @Test
  public void testValidate() throws Exception {
    WrapperModel wrapperModel = new StubWrapperModel("testModel");
    wrapperModel.validate();

    // wrapper model with features
    WrapperModel wrapperModelWithFeatures = new StubWrapperModel("testModel",
        Collections.singletonList(new ValueFeature("val", Collections.emptyMap())), Collections.emptyList());
    ModelException e = expectThrows(ModelException.class, wrapperModelWithFeatures::validate);
    assertEquals("features must be empty for the wrapper model testModel", e.getMessage());

    // wrapper model with norms
    WrapperModel wrapperModelWithNorms = new StubWrapperModel("testModel",
        Collections.emptyList(), Collections.singletonList(IdentityNormalizer.INSTANCE));
    e = expectThrows(ModelException.class, wrapperModelWithNorms::validate);
    assertEquals("norms must be empty for the wrapper model testModel", e.getMessage());

    assumeWorkingMockito();

    // update valid model
    {
      LTRScoringModel wrappedModel = 
          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,
              Arrays.asList(
                  new ValueFeature("v1", Collections.emptyMap()),
                  new ValueFeature("v2", Collections.emptyMap())),
              Arrays.asList(
                  IdentityNormalizer.INSTANCE,
                  IdentityNormalizer.INSTANCE)
              );
      wrapperModel.updateModel(wrappedModel);
    }

    // update invalid model (feature store mismatch)
    {
      LTRScoringModel wrappedModel = 
          createMockWrappedModel("wrappedFeatureStore",
              Arrays.asList(
                  new ValueFeature("v1", Collections.emptyMap()),
                  new ValueFeature("v2", Collections.emptyMap())),
              Arrays.asList(
                  IdentityNormalizer.INSTANCE,
                  IdentityNormalizer.INSTANCE)
              );
      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));
      assertEquals("wrapper feature store name (_DEFAULT_) must match the wrapped feature store name (wrappedFeatureStore)", e.getMessage());
    }

    // update invalid model (no features)
    {
      LTRScoringModel wrappedModel = 
          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,
              Collections.emptyList(),
              Arrays.asList(
                  IdentityNormalizer.INSTANCE,
                  IdentityNormalizer.INSTANCE)
              );
      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));
      assertEquals("no features declared for model testModel", e.getMessage());
    }

    // update invalid model (no norms)
    {
      LTRScoringModel wrappedModel = 
          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,
              Arrays.asList(
                  new ValueFeature("v1", Collections.emptyMap()),
                  new ValueFeature("v2", Collections.emptyMap())),
              Collections.emptyList()
              );
      e = expectThrows(ModelException.class, () -> wrapperModel.updateModel(wrappedModel));
      assertEquals("counted 2 features and 0 norms in model testModel", e.getMessage());
    }
  }

