  @Test
  public void testValidate() throws Exception {
    WrapperModel wrapperModel = new StubWrapperModel("testModel");
    try {
      wrapperModel.validate();
    } catch (ModelException e) {
      fail("Validation must succeed if no wrapped model is set");
    }

    // wrapper model with features
    WrapperModel wrapperModelWithFeatures = new StubWrapperModel("testModel",
        Collections.singletonList(new ValueFeature("val", Collections.emptyMap())), Collections.emptyList());
    try {
      wrapperModelWithFeatures.validate();
      fail("Validation must fail if features of the wrapper model isn't empty");
    } catch (ModelException e) {
      assertEquals("features must be empty for the wrapper model testModel", e.getMessage());
    }

    // wrapper model with norms
    WrapperModel wrapperModelWithNorms = new StubWrapperModel("testModel",
        Collections.emptyList(), Collections.singletonList(IdentityNormalizer.INSTANCE));
    try {
      wrapperModelWithNorms.validate();
      fail("Validation must fail if norms of the wrapper model isn't empty");
    } catch (ModelException e) {
      assertEquals("norms must be empty for the wrapper model testModel", e.getMessage());
    }

    assumeWorkingMockito();

    // update valid model
    {
      LTRScoringModel wrappedModel = 
          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,
              Arrays.asList(
                  new ValueFeature("v1", Collections.emptyMap()),
                  new ValueFeature("v2", Collections.emptyMap())),
              Arrays.asList(
                  IdentityNormalizer.INSTANCE,
                  IdentityNormalizer.INSTANCE)
              );
      try {
        wrapperModel.updateModel(wrappedModel);
      } catch (ModelException e) {
        fail("Validation must succeed if the wrapped model is valid");
      }
    }

    // update invalid model (feature store mismatch)
    {
      LTRScoringModel wrappedModel = 
          createMockWrappedModel("wrappedFeatureStore",
              Arrays.asList(
                  new ValueFeature("v1", Collections.emptyMap()),
                  new ValueFeature("v2", Collections.emptyMap())),
              Arrays.asList(
                  IdentityNormalizer.INSTANCE,
                  IdentityNormalizer.INSTANCE)
              );
      try {
        wrapperModel.updateModel(wrappedModel);
        fail("Validation must fail if wrapped model feature store differs from wrapper model feature store");
      } catch (ModelException e) {
        assertEquals("wrapper feature store name (_DEFAULT_) must match the wrapped feature store name (wrappedFeatureStore)", e.getMessage());
      }
    }

    // update invalid model (no features)
    {
      LTRScoringModel wrappedModel = 
          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,
              Collections.emptyList(),
              Arrays.asList(
                  IdentityNormalizer.INSTANCE,
                  IdentityNormalizer.INSTANCE)
              );
      try {
        wrapperModel.updateModel(wrappedModel);
        fail("Validation must fail if the wrapped model is invalid");
      } catch (ModelException e) {
        assertEquals("no features declared for model testModel", e.getMessage());
      }
    }

    // update invalid model (no norms)
    {
      LTRScoringModel wrappedModel = 
          createMockWrappedModel(FeatureStore.DEFAULT_FEATURE_STORE_NAME,
              Arrays.asList(
                  new ValueFeature("v1", Collections.emptyMap()),
                  new ValueFeature("v2", Collections.emptyMap())),
              Collections.emptyList()
              );
      try {
        wrapperModel.updateModel(wrappedModel);
        fail("Validation must fail if the wrapped model is invalid");
      } catch (ModelException e) {
        assertEquals("counted 2 features and 0 norms in model testModel", e.getMessage());
      }
    }
  }

