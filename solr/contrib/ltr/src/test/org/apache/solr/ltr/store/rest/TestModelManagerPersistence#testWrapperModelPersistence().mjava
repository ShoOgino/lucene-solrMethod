  @Test
  public void testWrapperModelPersistence() throws Exception {
    final String modelName = "linear";
    final String FS_NAME = "testWrapper";

    // check whether models and features are empty
    assertJQ(ManagedModelStore.REST_END_POINT,
             "/models/==[]");
    assertJQ(ManagedFeatureStore.REST_END_POINT + "/" + FS_NAME,
             "/features/==[]");

    // setup features
    loadFeature("popularity", FieldValueFeature.class.getCanonicalName(), FS_NAME, "{\"field\":\"popularity\"}");
    loadFeature("const", ValueFeature.class.getCanonicalName(), FS_NAME, "{\"value\":5}");

    // setup base model
    String baseModelJson = getModelInJson(modelName, LinearModel.class.getCanonicalName(),
                                          new String[] {"popularity", "const"}, FS_NAME,
                                          "{\"weights\":{\"popularity\":-1.0, \"const\":1.0}}");
    File baseModelFile = new File(tmpConfDir, "baseModelForPersistence.json");
    try (BufferedWriter writer = new BufferedWriter(
        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {
      writer.write(baseModelJson);
    }
    baseModelFile.deleteOnExit();

    // setup wrapper model
    String wrapperModelJson = getModelInJson(modelName, DefaultWrapperModel.class.getCanonicalName(),
                                             new String[0], FS_NAME,
                                             "{\"resource\":\"" + baseModelFile.getName() + "\"}");
    assertJPut(ManagedModelStore.REST_END_POINT, wrapperModelJson, "/responseHeader/status==0");
    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());

    // check persistence after reload
    restTestHarness.reload();
    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());

    // check persistence after restart
    jetty.stop();
    jetty.start();
    doWrapperModelPersistenceChecks(modelName, FS_NAME, baseModelFile.getName());

    // delete test settings
    restTestHarness.delete(ManagedModelStore.REST_END_POINT + "/" + modelName);
    restTestHarness.delete(ManagedFeatureStore.REST_END_POINT + "/" + FS_NAME);
    assertJQ(ManagedModelStore.REST_END_POINT,
             "/models/==[]");
    assertJQ(ManagedFeatureStore.REST_END_POINT + "/" + FS_NAME,
             "/features/==[]");

    // NOTE: we don't test the persistence of the deletion here because it's tested in testFilePersistence
  }

