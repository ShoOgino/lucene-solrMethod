  @SuppressForbidden(reason = "Needs currentTimeMillis to construct date stamps")
  @Test
  @SuppressWarnings({"unchecked"})
  public void testZKPropertiesWriter() throws Exception {
    CollectionAdminRequest.createCollectionWithImplicitRouter("collection1", "conf", "1", 1)
        .process(cluster.getSolrClient());

    // DIH talks core, SolrCloud talks collection.
    DocCollection coll = getCollectionState("collection1");
    Replica replica = coll.getReplicas().iterator().next();
    JettySolrRunner jetty = minicluster.getReplicaJetty(replica);
    SolrCore core = jetty.getCoreContainer().getCore(replica.getCoreName());

    localAssertQ("test query on empty index", request(core, "qlkciyopsbgzyvkylsjhchghjrdf"), "//result[@numFound='0']");

    SimpleDateFormat errMsgFormat = new SimpleDateFormat(dateFormat, Locale.ROOT);

    // These two calls are from SolrTestCaseJ4 and end up in TestHarness... That's ok they are static and do not reference
    // the various variables that were not initialized (so not copying them to this test class as some other methods at the bottom).
    delQ("*:*");
    commit();
    SimpleDateFormat df = new SimpleDateFormat(dateFormat, Locale.ROOT);
    Date oneSecondAgo = new Date(System.currentTimeMillis() - 1000);

    Map<String, String> init = new HashMap<>();
    init.put("dateFormat", dateFormat);
    ZKPropertiesWriter spw = new ZKPropertiesWriter();
    spw.init(new DataImporter(core, "dataimport"), init);
    Map<String, Object> props = new HashMap<>();
    props.put("SomeDates.last_index_time", oneSecondAgo);
    props.put("last_index_time", oneSecondAgo);
    spw.persist(props);

    @SuppressWarnings({"rawtypes"})
    List rows = new ArrayList();
    rows.add(AbstractDataImportHandlerTestCase.createMap("id", "1", "year_s", "2013"));
    MockDataSource.setIterator("select " + df.format(oneSecondAgo) + " from dummy", rows.iterator());

    localQuery("/dataimport", localMakeRequest(core, "command", "full-import", "dataConfig",
        generateConfig(), "clean", "true", "commit", "true", "synchronous",
        "true", "indent", "true"));
    props = spw.readIndexerProperties();
    Date entityDate = df.parse((String) props.get("SomeDates.last_index_time"));
    Date docDate = df.parse((String) props.get("last_index_time"));

    Assert.assertTrue("This date: " + errMsgFormat.format(oneSecondAgo) + " should be prior to the document date: " + errMsgFormat.format(docDate), docDate.getTime() - oneSecondAgo.getTime() > 0);
    Assert.assertTrue("This date: " + errMsgFormat.format(oneSecondAgo) + " should be prior to the entity date: " + errMsgFormat.format(entityDate), entityDate.getTime() - oneSecondAgo.getTime() > 0);
    localAssertQ("Should have found 1 doc, year 2013", request(core, "*:*"), "//*[@numFound='1']", "//doc/str[@name=\"year_s\"]=\"2013\"");

    core.close();
  }

