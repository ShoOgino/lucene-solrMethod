  /**
   * If the where clause is present the cache is sql Vs Map of key Vs List of
   * Rows.
   * 
   * @param query
   *          the query string for which cached data is to be returned
   * 
   * @return the cached row corresponding to the given query after all variables
   *         have been resolved
   */
  protected Map<String,Object> getIdCacheData(Context context, String query,
      Iterator<Map<String,Object>> rowIterator) {
    Object key = context.resolve(cacheForeignKey);
    if (key == null) {
      throw new DataImportHandlerException(DataImportHandlerException.WARN,
          "The cache lookup value : " + cacheForeignKey
              + " is resolved to be null in the entity :"
              + context.getEntityAttribute("name"));
      
    }
    DIHCache cache = queryVsCache.get(query);
    if (cache == null) {
      cache = instantiateCache(context);
      queryVsCache.put(query, cache);
      populateCache(query, rowIterator);
    }
    if (dataSourceRowCache == null) {
      dataSourceRowCache = cache.iterator(key);
    }
    if (dataSourceRowCache == null) {
      return null;
    }
    return getFromRowCacheTransformed();
  }

