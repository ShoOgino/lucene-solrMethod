  /** 
   * Check that the expected log level <em>configurations</em> have been reset after the test
   * <p>
   * <b>NOTE:</b> We only validate <code>@LogLevel</code> modifications made at the 
   * {@link #testMethodLogLevels} level,  not at the 'class' level, because of the lifecycle of junit 
   * methods: This <code>@AfterClass</code> will run before the <code>SolrTestCaseJ4</code> 
   * <code>@AfterClass</code> method where the 'class' <code>@LogLevel</code> modifications will be reset.
   * </p>
   *
   * @see #checkLogLevelsBeforeClass
   * @see #testWhiteBoxMethods
   */
  @AfterClass
  public static void checkLogLevelsAfterClass() {
    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
    final Configuration config = ctx.getConfiguration();
    
    // NOTE: we're checking the CONFIGURATION of the loggers, not the "effective" value of the Logger
    assertEquals(DEFAULT_LOG_LEVEL, config.getRootLogger().getLevel());
    assertEquals(bogus_logger_prefix
                 + " should have had it's config unset; should now return the 'root' LoggerConfig",
                 config.getRootLogger(),
                 config.getLoggerConfig(bogus_logger_prefix));
    assertEquals(Level.ERROR, config.getLoggerConfig(bogus_logger_prefix + ".ClassLogLevel").getLevel());
    assertEquals(Level.WARN, config.getLoggerConfig(bogus_logger_prefix + ".MethodLogLevel").getLevel());

    // Now sanity check the EFFECTIVE Level of these loggers...
    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getRootLogger().getLevel());
    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getLogger(bogus_logger_prefix).getLevel());
    assertEquals(Level.ERROR, LogManager.getLogger(bogus_logger_prefix + ".ClassLogLevel").getLevel());
    assertEquals(Level.WARN, LogManager.getLogger(bogus_logger_prefix + ".MethodLogLevel").getLevel());
  }

