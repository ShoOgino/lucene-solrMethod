  /** 
   * Sanity check that our <code>AfterClass</code> logic is valid, and isn't broken right from the start
   *
   * @see #checkLogLevelsAfterClass
   */
  @BeforeClass
  public static void checkLogLevelsBeforeClass() {
    final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);
    final Configuration config = ctx.getConfiguration();

    // NOTE: we're checking the CONFIGURATION of the loggers, not the "effective" value of the Logger
    assertEquals(DEFAULT_LOG_LEVEL, config.getRootLogger().getLevel());
    assertEquals("Your Logger conf sets a level on a bogus package that breaks this test: "
                 + bogus_logger_prefix,
                 config.getRootLogger(),
                 config.getLoggerConfig(bogus_logger_prefix));
    assertEquals(Level.ERROR, config.getLoggerConfig(bogus_logger_prefix + ".ClassLogLevel").getLevel());
    assertEquals(Level.WARN, config.getLoggerConfig(bogus_logger_prefix + ".MethodLogLevel").getLevel());

    // Now sanity check the EFFECTIVE Level of these loggers before the methods run...
    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getRootLogger().getLevel());
    assertEquals(DEFAULT_LOG_LEVEL, LogManager.getLogger(bogus_logger_prefix).getLevel());
    assertEquals(Level.ERROR, LogManager.getLogger(bogus_logger_prefix + ".ClassLogLevel").getLevel());
    assertEquals(Level.WARN, LogManager.getLogger(bogus_logger_prefix + ".MethodLogLevel").getLevel());
  }

