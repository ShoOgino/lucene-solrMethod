  /**
   * Validates the response from a PUT request matches some JSON test expressions
   * and closes the query. The text expression is of the form path==JSON.
   * To facilitate easy embedding in Java strings, the JSON can have double
   * quotes replaced with single quotes.
   * <p>
   * Please use this with care: this makes it easy to match complete
   * structures, but doing so can result in fragile tests if you are
   * matching more than what you want to test.
   * </p>
   * @param request a URL path with optional query params, e.g. "/schema/fields?fl=id,_version_"
   * @param content The content to include with the PUT request
   * @param delta tolerance allowed in comparing float/double values
   * @param tests JSON path expression + '==' + expected value
   */
  public static void assertJPut(String request, String content, double delta, String... tests) throws Exception {
    int queryStartPos = request.indexOf('?');
    String query;
    String path;
    if (-1 == queryStartPos) {
      query = "";
      path = request;
    } else {
      query = request.substring(queryStartPos + 1);
      path = request.substring(0, queryStartPos);
    }
    query = setParam(query, "wt", "json");
    request = path + '?' + setParam(query, "indent", "on");

    String response;
    boolean failed = true;
    try {
      response = restTestHarness.put(request, content);
      failed = false;
    } finally {
      if (failed) {
        log.error("REQUEST FAILED: {}", request);
      }
    }

    for (String test : tests) {
      if (null == test || 0 == test.length()) continue;
      String testJSON = json(test);

      try {
        failed = true;
        String err = JSONTestUtil.match(response, testJSON, delta);
        failed = false;
        if (err != null) {
          log.error("query failed JSON validation. error={}"
              + "\n expected ={}\n response = {}\n request = {}\n"
              ,err, testJSON, response, request);
          throw new RuntimeException(err);
        }
      } finally {
        if (failed) {
          log.error("JSON query validation threw an exception."
              + "\n expected ={}\n response = {}\n request = {}"
              , testJSON, response, request);
        }
      }
    }
  }

