    /**
     * Returns an SSLRandomizer suitable for the specified (test) class
     */
    public static final SSLRandomizer getSSLRandomizerForClass(Class clazz) {

      final SuppressSSL suppression = (SuppressSSL) clazz.getAnnotation(SuppressSSL.class);
      if (null != suppression) {
        // Even if this class has a RandomizeSSL annotation, any usage of SuppressSSL -- even in a
        // super class -- overrules that.
        //
        // (If it didn't work this way, it would be a pain in the ass to quickly disable SSL for a
        // broad hierarchy of tests)
        return new SSLRandomizer(0.0D, 0.0D, suppression.toString());
      }

      final RandomizeSSL annotation = (RandomizeSSL) clazz.getAnnotation(RandomizeSSL.class);
      
      if (null == annotation) {
        return new SSLRandomizer(0.0D, 0.0D, RandomizeSSL.class.getName() + " annotation not specified");
      }

      final double def = Double.isNaN(annotation.value()) ? DEFAULT_ODDS : annotation.value();
      if (def < 0.0D || 1.0D < def) {
        throw new IllegalArgumentException
          (clazz.getName() + ": default value is not a ratio between 0 and 1: " + annotation.toString());
      }
      final double ssl = Double.isNaN(annotation.ssl()) ? def : annotation.ssl();
      if (ssl < 0.0D || 1.0D < ssl) {
        throw new IllegalArgumentException
          (clazz.getName() + ": ssl value is not a ratio between 0 and 1: " + annotation.toString());
      }
      final double clientAuth = Double.isNaN(annotation.clientAuth()) ? ssl : annotation.clientAuth();
      if (clientAuth < 0.0D || 1 < clientAuth) {
        throw new IllegalArgumentException
          (clazz.getName() + ": clientAuth value is not a ratio between 0 and 1: " + annotation.toString());
      }
      return new SSLRandomizer(ssl, clientAuth, annotation.toString());
    }

