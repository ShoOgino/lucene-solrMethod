    /** 
     * Randomly produces an SSLTestConfig taking into account various factors 
     *
     * @see LuceneTestCase#TEST_NIGHTLY
     * @see LuceneTestCase#RANDOM_MULTIPLIER
     * @see LuceneTestCase#random()
     */
    public SSLTestConfig createSSLTestConfig() {
      // even if we know SSL is disabled, always consume the same amount of randomness
      // that way all other test behavior should be consistent even if a user adds/removes @SuppressSSL
      
      final boolean useSSL = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < 
        (int)(1000 * getEffectiveOdds(ssl, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));
      final boolean useClientAuth = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < 
        (int)(1000 * getEffectiveOdds(clientAuth, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));

      return new SSLTestConfig(useSSL, useClientAuth);
    }

