    private static Map<String, Level> setLogLevels(Map<String, Level> logLevels) {
      final LoggerContext ctx = LoggerContext.getContext(false);
      final Configuration config = ctx.getConfiguration();

      final Map<String, Level> oldLevels = new HashMap<>();
      logLevels.forEach((loggerName, newLevel) -> {
        final LoggerConfig logConfig = config.getLoggerConfig(loggerName);
        if (loggerName.equals(logConfig.getName())) {
          // we have an existing LoggerConfig for this specific loggerName
          // record the existing 'old' level...
          oldLevels.put(loggerName, logConfig.getLevel());
          // ...and set the new one (or remove if null) ...
          if (null == newLevel) {
            config.removeLogger(loggerName);
          } else {
            logConfig.setLevel(newLevel);
          }
        } else {
          // there is no existing configuration for the exact loggerName, logConfig is some ancestor
          // record an 'old' level of 'null' to track the lack of any configured level...
          oldLevels.put(loggerName, null);
          // ...and now create a new logger config wih our new level
          final LoggerConfig newLoggerConfig = new LoggerConfig(loggerName, newLevel, true);
          config.addLogger(loggerName, newLoggerConfig);
        }

        assert oldLevels.containsKey(loggerName);
      });
      ctx.updateLoggers();
      return oldLevels;
    }

