  // NOTE: if any javadocs below change, update create-keystores.sh
  /**
   * Create an SSLTestConfig based on a few caller specified options.  As needed, 
   * keystore/truststore information will be pulled from a hardcoded resource files provided 
   * by the solr test-framework based on the value of <code>checkPeerName</code>:
   * <ul>
   * <li><code>true</code> - A keystore resource file will be used that specifies 
   *     a CN of <code>localhost</code> and a SAN IP of <code>127.0.0.1</code>, to 
   *     ensure that all connections should be valid regardless of what machine runs the tests.</li> 
   * <li><code>false</code> - A keystore resource file will be used that specifies 
   *     a bogus hostname in the CN and reserved IP as the SAN, since no (valid) tests using this 
   *     SSLTestConfig should care what CN/SAN are.</li> 
   * </ul>
   *
   * @param useSSL - whether SSL should be required.
   * @param clientAuth - whether client authentication should be required.
   * @param checkPeerName - whether the client should validate the 'peer name' of the SSL Certificate (and which testing Cert should be used)
   * @see HttpClientUtil#SYS_PROP_CHECK_PEER_NAME
   */
  public SSLTestConfig(boolean useSSL, boolean clientAuth, boolean checkPeerName) {
    super(useSSL, clientAuth, null, TEST_KEYSTORE_PASSWORD, null, TEST_KEYSTORE_PASSWORD);
    this.checkPeerName = checkPeerName;
    
    final String resourceName = checkPeerName
      ? TEST_KEYSTORE_LOCALHOST_RESOURCE : TEST_KEYSTORE_BOGUSHOST_RESOURCE;
    trustStore = keyStore = Resource.newClassPathResource(resourceName);
    if (null == keyStore || ! keyStore.exists() ) {
      throw new IllegalStateException("Unable to locate keystore resource file in classpath: "
                                      + resourceName);
    }
  }

