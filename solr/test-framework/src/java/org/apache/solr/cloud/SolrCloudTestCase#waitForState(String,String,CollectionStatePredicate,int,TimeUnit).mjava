  /**
   * Wait for a particular collection state to appear in the cluster client's state reader
   * <p>
   * This is a convenience method using the {@link #DEFAULT_TIMEOUT}
   *
   * @param message    a message to report on failure
   * @param collection the collection to watch
   * @param predicate  a predicate to match against the collection state
   */
  protected static void waitForState(String message, String collection, CollectionStatePredicate predicate, int timeout, TimeUnit timeUnit) {
    log.info("waitForState ({}): {}", collection, message);
    AtomicReference<DocCollection> state = new AtomicReference<>();
    AtomicReference<Set<String>> liveNodesLastSeen = new AtomicReference<>();
    try {
      cluster.getSolrClient().waitForState(collection, timeout, timeUnit, (n, c) -> {
        state.set(c);
        liveNodesLastSeen.set(n);
        return predicate.matches(n, c);
      });
    } catch (Exception e) {
      fail(message + "\n" + e.getMessage() + "\nLive Nodes: " + Arrays.toString(liveNodesLastSeen.get().toArray()) + "\nLast available state: " + state.get());
    }
  }

