  /**
   * Compares the results of the control and cloud clients.
   * 
   * @return true if the compared results are illegal.
   */
  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)
      throws SolrServerException, IOException {
    
    SolrParams q = SolrTestCaseJ4.params("q","*:*","rows","0", "tests","checkShardConsistency(vsControl)");    // add a tag to aid in debugging via logs

    SolrDocumentList controlDocList = controlClient.query(q).getResults();
    long controlDocs = controlDocList.getNumFound();

    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();
    long cloudClientDocs = cloudDocList.getNumFound();
    
    // re-execute the query getting ids
    q = SolrTestCaseJ4.params("q", "*:*", "rows", "100000", "fl", "id", "tests", "checkShardConsistency(vsControl)/getIds");    // add a tag to aid in debugging via logs
    controlDocList = controlClient.query(q).getResults();
    if (controlDocs != controlDocList.getNumFound()) {
      log.error("Something changed! control now " + controlDocList.getNumFound());
    }

    cloudDocList = cloudClient.query(q).getResults();
    if (cloudClientDocs != cloudDocList.getNumFound()) {
      log.error("Something changed! cloudClient now " + cloudDocList.getNumFound());
    }

    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {
      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,
          "controlDocList", "cloudDocList", addFails, deleteFails);
      if (legal) {
        return false;
      }
    }
    
    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,
        "controlDocList", "cloudDocList");

    try {
      // get versions for the mismatched ids
      boolean foundId = false;

      // use filter() to allow being parsed as 'terms in set' query instead of a (weighted/scored)
      // BooleanQuery so we don't trip too many boolean clauses
      StringBuilder ids = new StringBuilder("filter(id:(");
      for (Map doc : differences) {
        ids.append(" ").append(doc.get("id"));
        foundId = true;
      }
      ids.append("))");

      if (foundId) {
        // get versions for those ids that don't match
        q = SolrTestCaseJ4.params("q", ids.toString(), "rows", "100000", "fl", "id,_version_",
            "sort", "id asc", "tests",
            "checkShardConsistency(vsControl)/getVers"); // add a tag to aid in
        // debugging via logs

        // use POST, the ids in the query above is constructed and could be huge
        SolrDocumentList a = controlClient.query(q, SolrRequest.METHOD.POST).getResults();
        SolrDocumentList b = cloudClient.query(q, SolrRequest.METHOD.POST).getResults();

        log.error("controlClient :" + a + "\n\tcloudClient :" + b);
      }
    } catch (Exception e) {
      // swallow any exceptions, this is just useful for producing debug output,
      // and shouldn't usurp the original issue with mismatches.
      log.error("Unable to find versions for mismatched ids", e);
    }

    return true;
  }

