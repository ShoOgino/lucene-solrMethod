  protected void compareResults(long controlDocs, long cloudClientDocs)
      throws SolrServerException {
    SolrParams q;
    SolrDocumentList controlDocList;
    SolrDocumentList cloudDocList;
    // re-execute the query getting ids
    q = params("q","*:*","rows","100000", "fl","id", "tests","checkShardConsistency(vsControl)/getIds");    // add a tag to aid in debugging via logs
    controlDocList = controlClient.query(q).getResults();
    if (controlDocs != controlDocList.getNumFound()) {
      log.error("Something changed! control now " + controlDocList.getNumFound());
    };

    cloudDocList = cloudClient.query(q).getResults();
    if (cloudClientDocs != cloudDocList.getNumFound()) {
      log.error("Something changed! cloudClient now " + cloudDocList.getNumFound());
    };

    Set<Map> differences = showDiff(controlDocList, cloudDocList,"controlDocList","cloudDocList");

    // get versions for the mismatched ids
    boolean foundId = false;
    StringBuilder ids = new StringBuilder("id:(");
    for (Map doc : differences) {
      ids.append(" "+doc.get("id"));
      foundId = true;
    }
    ids.append(")");
    
    if (foundId) {
      // get versions for those ids that don't match
      q = params("q", ids.toString(), "rows", "100000", "fl", "id,_version_",
          "sort", "id asc", "tests",
          "checkShardConsistency(vsControl)/getVers"); // add a tag to aid in
                                                       // debugging via logs
      
      SolrDocumentList a = controlClient.query(q).getResults();
      SolrDocumentList b = cloudClient.query(q).getResults();
      
      log.error("controlClient :" + a + "\n\tcloudClient :" + b);
    }
  }

