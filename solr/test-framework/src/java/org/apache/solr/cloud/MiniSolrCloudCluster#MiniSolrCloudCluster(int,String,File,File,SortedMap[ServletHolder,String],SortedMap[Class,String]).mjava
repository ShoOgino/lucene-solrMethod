  /**
   * "Mini" SolrCloud cluster to be used for testing
   * @param numServers number of Solr servers to start
   * @param hostContext context path of Solr servers used by Jetty
   * @param baseDir base directory that the mini cluster should be run from
   * @param solrXml solr.xml file to be uploaded to ZooKeeper
   * @param extraServlets Extra servlets to be started by Jetty
   * @param extraRequestFilters extra filters to be started by Jetty
   */
  public MiniSolrCloudCluster(int numServers, String hostContext, File baseDir, File solrXml,
      SortedMap<ServletHolder, String> extraServlets,
      SortedMap<Class, String> extraRequestFilters) throws Exception {
    testDir = baseDir;

    String zkDir = testDir.getAbsolutePath() + File.separator
      + "zookeeper/server1/data";
    zkServer = new ZkTestServer(zkDir);
    zkServer.run();

    SolrZkClient zkClient = null;
    InputStream is = null;
    try {
      zkClient = new SolrZkClient(zkServer.getZkHost(),
        AbstractZkTestCase.TIMEOUT, 45000, null);
      zkClient.makePath("/solr", false, true);
      is = new FileInputStream(solrXml);
      zkClient.create("/solr/solr.xml", IOUtils.toByteArray(is),
        ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, true);
    } finally {
      IOUtils.closeQuietly(is);
      if (zkClient != null) zkClient.close();
    }

    // tell solr to look in zookeeper for solr.xml
    System.setProperty("solr.solrxml.location","zookeeper");
    System.setProperty("zkHost", zkServer.getZkAddress());

    jettys = new LinkedList<JettySolrRunner>();
    for (int i = 0; i < numServers; ++i) {
      startJettySolrRunner(hostContext, extraServlets, extraRequestFilters);
    }
  }

