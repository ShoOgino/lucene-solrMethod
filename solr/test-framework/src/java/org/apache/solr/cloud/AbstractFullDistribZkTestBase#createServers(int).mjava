  @Override
  protected void createServers(int numServers) throws Exception {
    
    System.setProperty("collection", "control_collection");
    String numShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);

    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset
    // System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);
    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, "1");

    File controlJettyDir = new File(TEMP_DIR,
            getClass().getName() + "-controljetty-" + System.currentTimeMillis());
    org.apache.commons.io.FileUtils.copyDirectory(new File(getSolrHome()), controlJettyDir);

    controlJetty = createJetty(controlJettyDir, testDir + "/control/data");  // don't pass shard name... let it default to "shard1"
    System.clearProperty("collection");
    if(numShards != null) {
      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, numShards);
    } else {
      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);
    }
    controlClient = createNewSolrServer(controlJetty.getLocalPort());

    if (sliceCount <= 0) {
      // for now, just create the cloud client for the control if we don't create the normal cloud client.
      // this can change if more tests need it.
      controlClientCloud = createCloudClient("control_collection");
      controlClientCloud.connect();
      waitForCollection(controlClientCloud.getZkStateReader(), "control_collection", 0);
      // NOTE: we are skipping creation of the chaos monkey by returning here
      cloudClient = controlClientCloud;  // temporary - some code needs/uses cloudClient
      return;
    }


    initCloud();
    
    createJettys(numServers, true);

    waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);
  }

