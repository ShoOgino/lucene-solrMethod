  @Override
  protected void createServers(int numServers) throws Exception {
    
    System.setProperty("collection", "control_collection");

    // we want hashes by default for the control, so set to 1 shard as opposed to leaving unset
    String oldNumShards = System.getProperty(ZkStateReader.NUM_SHARDS_PROP);
    System.setProperty(ZkStateReader.NUM_SHARDS_PROP, "1");
    
    try {
      
      File controlJettyDir = createTempDir().toFile();
      setupJettySolrHome(controlJettyDir);
      
      controlJetty = createJetty(controlJettyDir, useJettyDataDir ? getDataDir(testDir
          + "/control/data") : null); // don't pass shard name... let it default to
                               // "shard1"


      controlClient = createNewSolrClient(controlJetty.getLocalPort());
      
      if (sliceCount <= 0) {
        // for now, just create the cloud client for the control if we don't
        // create the normal cloud client.
        // this can change if more tests need it.
        controlClientCloud = createCloudClient("control_collection");
        controlClientCloud.connect();
        waitForCollection(controlClientCloud.getZkStateReader(),
            "control_collection", 0);
        // NOTE: we are skipping creation of the chaos monkey by returning here
        cloudClient = controlClientCloud; // temporary - some code needs/uses
                                          // cloudClient
        return;
      }
      
    } finally {
      System.clearProperty("collection");
      if (oldNumShards != null) {
        System.setProperty(ZkStateReader.NUM_SHARDS_PROP, oldNumShards);
      } else {
        System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);
      }
    }


    initCloud();
    
    createJettys(numServers, checkCreatedVsState).size();
    
    int cnt = getTotalReplicas(DEFAULT_COLLECTION);
    if (cnt > 0) {
      waitForCollection(cloudClient.getZkStateReader(), DEFAULT_COLLECTION, sliceCount);
    }

  }

