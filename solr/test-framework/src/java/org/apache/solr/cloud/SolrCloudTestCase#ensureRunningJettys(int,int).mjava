  /**
   * Ensure that the given number of solr instances are running. If less instances are found then new instances are
   * started. If extra instances are found then they are stopped.
   *
   * @param nodeCount the number of Solr instances that should be running at the end of this method
   * @throws Exception on error
   */
  public static void ensureRunningJettys(int nodeCount, int timeoutSeconds) throws Exception {
    // ensure that exactly nodeCount jetty nodes are running
    List<JettySolrRunner> jettys = cluster.getJettySolrRunners();
    List<JettySolrRunner> copyOfJettys = new ArrayList<>(jettys);
    int numJetties = copyOfJettys.size();
    for (int i = nodeCount; i < numJetties; i++) {
      cluster.stopJettySolrRunner(copyOfJettys.get(i));
    }
    for (int i = copyOfJettys.size(); i < nodeCount; i++) {
      // start jetty instances
      cluster.startJettySolrRunner();
    }
    // refresh the count from the source
    jettys = cluster.getJettySolrRunners();
    numJetties = jettys.size();
    for (int i = 0; i < numJetties; i++) {
      if (!jettys.get(i).isRunning()) {
        cluster.startJettySolrRunner(jettys.get(i));
      }
    }
    cluster.waitForAllNodes(timeoutSeconds);
  }

