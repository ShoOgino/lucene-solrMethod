  protected void waitForReplicationFromReplicas(String collectionName, ZkStateReader zkStateReader, TimeOut timeout) throws KeeperException, InterruptedException, IOException {
    log.info("waitForReplicationFromReplicas: {}", collectionName);
    zkStateReader.forceUpdateCollection(collectionName);
    DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);
    Map<String, CoreContainer> containers = new HashMap<>();
    for (JettySolrRunner runner:jettys) {
      if (!runner.isRunning()) {
        continue;
      }
      containers.put(runner.getNodeName(), runner.getCoreContainer());
    }
    for(Slice s:collection.getSlices()) {
      Replica leader = zkStateReader.getLeaderRetry(collectionName, s.getName(), (int)timeout.timeLeft(TimeUnit.MILLISECONDS));
      long leaderIndexVersion = -1;
      while (!timeout.hasTimedOut()) {
        leaderIndexVersion = getIndexVersion(leader);
        if (leaderIndexVersion >= 0) {
          break;
        }
        Thread.sleep(1000);
      }
      if (timeout.hasTimedOut()) {
        fail("Unable to get leader indexVersion");
      }
      for (Replica pullReplica:s.getReplicas(EnumSet.of(Replica.Type.PULL,Replica.Type.TLOG))) {
        if (!zkStateReader.getClusterState().liveNodesContain(pullReplica.getNodeName())) {
          continue;
        }
        while (true) {
          long replicaIndexVersion = getIndexVersion(pullReplica); 
          if (leaderIndexVersion == replicaIndexVersion) {
            log.info("Leader replica's version ({}) in sync with replica({}): {} == {}", leader.getName(), pullReplica.getName(), leaderIndexVersion, replicaIndexVersion);
            
            // Make sure the host is serving the correct version
            try (SolrCore core = containers.get(pullReplica.getNodeName()).getCore(pullReplica.getCoreName())) {
              RefCounted<SolrIndexSearcher> ref = core.getRegisteredSearcher();
              try {
                SolrIndexSearcher searcher = ref.get();
                String servingVersion = searcher.getIndexReader().getIndexCommit().getUserData().get(SolrIndexWriter.COMMIT_TIME_MSEC_KEY);
                if (Long.parseLong(servingVersion) == replicaIndexVersion) {
                  break;
                } else {
                  log.info("Replica {} has the correct version replicated, but the searcher is not ready yet. Replicated version: {}, Serving version: {}", pullReplica.getName(), replicaIndexVersion, servingVersion);
                }
              } finally {
                if (ref != null) ref.decref();
              }
            }
          } else {
            if (timeout.hasTimedOut()) {
              logReplicaTypesReplicationInfo(collectionName, zkStateReader);
              fail(String.format(Locale.ROOT, "Timed out waiting for replica %s (%d) to replicate from leader %s (%d)", pullReplica.getName(), replicaIndexVersion, leader.getName(), leaderIndexVersion));
            }
            if (leaderIndexVersion > replicaIndexVersion) {
              log.info("{} version is {} and leader's is {}, will wait for replication", pullReplica.getName(), replicaIndexVersion, leaderIndexVersion);
            } else {
              log.info("Leader replica's version ({}) is lower than pull replica({}): {} < {}", leader.getName(), pullReplica.getName(), leaderIndexVersion, replicaIndexVersion);
            }
          }
          Thread.sleep(1000);
        }
      }
    }
  }

