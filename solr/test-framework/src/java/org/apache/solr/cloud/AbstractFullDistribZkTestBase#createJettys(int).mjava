  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {
    List<JettySolrRunner> jettys = Collections.synchronizedList(new ArrayList<>());
    List<SolrClient> clients = Collections.synchronizedList(new ArrayList<>());
    List<CollectionAdminRequest> createReplicaRequests = Collections.synchronizedList(new ArrayList<>());
    List<CollectionAdminRequest> createPullReplicaRequests = Collections.synchronizedList(new ArrayList<>());
    StringBuilder sb = new StringBuilder();

    assertEquals(0, CollectionAdminRequest
        .createCollection(DEFAULT_COLLECTION, "conf1", sliceCount, 1)
        .setStateFormat(Integer.parseInt(getStateFormat()))
        .setCreateNodeSet("")
        .process(cloudClient).getStatus());
    
    cloudClient.waitForState(DEFAULT_COLLECTION, 30, TimeUnit.SECONDS, (c) -> c != null && c.getSlices().size() == sliceCount);
    
    ExecutorService customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory("closeThreadPool"));

    int numOtherReplicas = numJettys - getPullReplicaCount() * sliceCount;
    
    log.info("Creating jetty instances pullReplicaCount={} numOtherReplicas={}", getPullReplicaCount(), numOtherReplicas);
    
    int addedReplicas = 0;
    for (int i = 1; i <= numJettys; i++) {
      if (sb.length() > 0) sb.append(',');
      int cnt = this.jettyIntCntr.incrementAndGet();

      File jettyDir = createTempDir("shard-" + i).toFile();

      jettyDir.mkdirs();
      setupJettySolrHome(jettyDir);
      int currentI = i;
      if (numOtherReplicas > 0) {
        numOtherReplicas--;
        if (useTlogReplicas()) {
          log.info("create jetty {} in directory {} of type {} in shard {}", i, jettyDir, Replica.Type.TLOG, ((currentI % sliceCount) + 1));
          customThreadPool.submit(() -> {
            try {
              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + "/jetty"
                  + cnt) : null, null, "solrconfig.xml", null, Replica.Type.TLOG);
              j.start();
              jettys.add(j);
              waitForLiveNode(j);

              createReplicaRequests.add(CollectionAdminRequest
                  .addReplicaToShard(DEFAULT_COLLECTION, "shard" + ((currentI % sliceCount) + 1))
                  .setNode(j.getNodeName())
                  .setType(Replica.Type.TLOG));

              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));
              SolrClient client = createNewSolrClient(j.getLocalPort());
              clients.add(client);

            } catch (IOException e) {
              e.printStackTrace();
              throw new RuntimeException(e);
            } catch (Exception e) {
              e.printStackTrace();
              throw new RuntimeException(e);
            }
          });

          addedReplicas++;
        } else {
          log.info("create jetty {} in directory {} of type {}", i, jettyDir, Replica.Type.NRT, ((currentI % sliceCount) + 1));
          
          customThreadPool.submit(() -> {
            try {
              JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + "/jetty"
                  + cnt) : null, null, "solrconfig.xml", null, null);
              j.start();
              jettys.add(j);
              waitForLiveNode(j);
              createReplicaRequests.add(CollectionAdminRequest
                  .addReplicaToShard(DEFAULT_COLLECTION, "shard"+((currentI%sliceCount)+1))
                  .setNode(j.getNodeName())
                  .setType(Replica.Type.NRT));
              coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));
              SolrClient client = createNewSolrClient(j.getLocalPort());
              clients.add(client);
            } catch (IOException e) {
              e.printStackTrace();
              throw new RuntimeException(e);
            } catch (Exception e) {
              e.printStackTrace();
              throw new RuntimeException(e);
            }
          });
          
          addedReplicas++;
        }
      } else {
        log.info("create jetty {} in directory {} of type {}", i, jettyDir, Replica.Type.PULL, ((currentI % sliceCount) + 1));
        customThreadPool.submit(() -> {
          try {
            JettySolrRunner j = createJetty(jettyDir, useJettyDataDir ? getDataDir(testDir + "/jetty"
                + cnt) : null, null, "solrconfig.xml", null, Replica.Type.PULL);
            j.start();
            jettys.add(j);
            waitForLiveNode(j);
            createPullReplicaRequests.add(CollectionAdminRequest
                .addReplicaToShard(DEFAULT_COLLECTION, "shard"+((currentI%sliceCount)+1))
                .setNode(j.getNodeName())
                .setType(Replica.Type.PULL));
            coreClients.add(createNewSolrClient(coreName, j.getLocalPort()));
            SolrClient client = createNewSolrClient(j.getLocalPort());
            clients.add(client);
          } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
          } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException(e);
          }
        });
        addedReplicas++;
      }

    }
    
    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);
    
    customThreadPool = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory("createReplicaRequests"));
    
    for (CollectionAdminRequest r : createReplicaRequests) {
      customThreadPool.submit(() -> {
        CollectionAdminResponse response;
        try {
          response = (CollectionAdminResponse) r.process(cloudClient);
        } catch (SolrServerException | IOException e) {
          throw new RuntimeException(e);
        }

        assertTrue(response.isSuccess());
        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();
      });
    }
   
    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);
    
    customThreadPool = ExecutorUtil
        .newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory("createPullReplicaRequests"));
    for (CollectionAdminRequest r : createPullReplicaRequests) {
      customThreadPool.submit(() -> {
        CollectionAdminResponse response;
        try {
          response = (CollectionAdminResponse) r.process(cloudClient);
        } catch (SolrServerException | IOException e) {
          throw new RuntimeException(e);
        }

        assertTrue(response.isSuccess());
        String coreName = response.getCollectionCoresStatus().keySet().iterator().next();
      });
    }
    
    ExecutorUtil.shutdownAndAwaitTermination(customThreadPool);
    
    waitForActiveReplicaCount(cloudClient, DEFAULT_COLLECTION, addedReplicas);

    this.jettys.addAll(jettys);
    this.clients.addAll(clients);

    
    ZkStateReader zkStateReader = cloudClient.getZkStateReader();
    // make sure we have a leader for each shard
    for (int i = 1; i <= sliceCount; i++) {
      zkStateReader.getLeaderRetry(DEFAULT_COLLECTION, "shard" + i, 10000);
    }

    if (sliceCount > 0) {
      updateMappingsFromZk(this.jettys, this.clients);
    }

    // build the shard string
    for (int i = 1; i <= numJettys / 2; i++) {
      JettySolrRunner j = this.jettys.get(i);
      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));
      if (sb.length() > 0) sb.append(',');
      sb.append(buildUrl(j.getLocalPort()));
      sb.append("|").append(buildUrl(j2.getLocalPort()));
    }
    shards = sb.toString();

    return jettys;
  }

