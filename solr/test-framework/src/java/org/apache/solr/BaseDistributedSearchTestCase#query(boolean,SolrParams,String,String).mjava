  /**
   * Returns the QueryResponse from {@link #queryServer}
   * @param setDistribParams whether to do a distributed request
   * @param user basic auth username (set to null if not in use)
   * @param pass basic auth password (set to null if not in use)
   * @return the query response
   */
  protected QueryResponse query(boolean setDistribParams, SolrParams p, String user, String pass) throws Exception {
    
    final ModifiableSolrParams params = new ModifiableSolrParams(p);

    // TODO: look into why passing true causes fails
    params.set("distrib", "false");
    QueryRequest req = generateQueryRequest(params, user, pass);
    final QueryResponse controlRsp = req.process(controlClient, null);
    validateControlData(controlRsp);

    params.remove("distrib");
    if (setDistribParams) setDistributedParams(params);
    req = generateQueryRequest(params, user, pass);

    QueryResponse rsp = queryServer(req);

    compareResponses(rsp, controlRsp);

    if (stress > 0) {
      log.info("starting stress...");
      Thread[] threads = new Thread[nThreads];
      for (int i = 0; i < threads.length; i++) {
        threads[i] = new Thread() {
          @Override
          public void run() {
            for (int j = 0; j < stress; j++) {
              int which = r.nextInt(clients.size());
              SolrClient client = clients.get(which);
              try {
                QueryRequest qreq = generateQueryRequest(new ModifiableSolrParams(params), user, pass);
                QueryResponse rsp = qreq.process(client, null);
                if (verifyStress) {
                  compareResponses(rsp, controlRsp);
                }
              } catch (SolrServerException | IOException e) {
                throw new RuntimeException(e);
              }
            }
          }
        };
        threads[i].start();
      }

      for (Thread thread : threads) {
        thread.join();
      }
    }
    return rsp;
  }

