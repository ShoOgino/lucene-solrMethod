  /**
   * Subclasses may call this method to access the "dataDir" that will be used by 
   * {@link #initCore} (either prior to or after the core is created).
   * <p>
   * If the dataDir has not yet been initialized when this method is called, this method will do so.
   * Calling {@link #deleteCore} will "reset" the value, such that subsequent calls will 
   * re-initialize a new value.  All directories returned by any calls to this method will 
   * automatically be cleaned up per {@link #createTempDir}
   * </p>
   * <p>
   * NOTE: calling this method is not requried, it will be implicitly called as needed when
   * initializing cores.  Callers that don't care about using {@link #initCore} and just want
   * a temporary directory to put data in sould instead be using {@link #createTempDir} directly.
   * </p>
   *
   * @see #initCoreDataDir
   */
  protected static File initAndGetDataDir() {
    File dataDir = initCoreDataDir;
    if (null == dataDir) {
      final int id = dataDirCount.incrementAndGet();
      dataDir = initCoreDataDir = createTempDir("data-dir-"+ id).toFile();
      assertNotNull(dataDir);
      log.info("Created dataDir: {}", dataDir.getAbsolutePath());
    }
    return dataDir;
  }

