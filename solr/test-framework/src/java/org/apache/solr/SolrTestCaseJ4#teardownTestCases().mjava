  @AfterClass
  public static void teardownTestCases() throws Exception {
    try {
      deleteCore();
      resetExceptionIgnores();
      
      if (suiteFailureMarker.wasSuccessful()) {
        // if the tests passed, make sure everything was closed / released
        if (!RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressObjectReleaseTracker.class)) {
          String orr = clearObjectTrackerAndCheckEmpty(20, false);
          assertNull(orr, orr);
        } else {
          clearObjectTrackerAndCheckEmpty(20, true);
        }
      }
      resetFactory();
      coreName = DEFAULT_TEST_CORENAME;
    } finally {
      ObjectReleaseTracker.clear();
      TestInjection.reset();
      initCoreDataDir = null;
      System.clearProperty("zookeeper.forceSync");
      System.clearProperty("jetty.testMode");
      System.clearProperty("tests.shardhandler.randomSeed");
      System.clearProperty("enable.update.log");
      System.clearProperty("useCompoundFile");
      System.clearProperty("urlScheme");
      System.clearProperty("solr.peerSync.useRangeVersions");
      System.clearProperty("solr.cloud.wait-for-updates-with-stale-state-pause");
      HttpClientUtil.resetHttpClientBuilder();

      // clean up static
      sslConfig = null;
      testSolrHome = null;
    }
    
    IpTables.unblockAllPorts();

    LogLevel.Configurer.restoreLogLevels(savedClassLogLevels);
    savedClassLogLevels.clear();
  }

