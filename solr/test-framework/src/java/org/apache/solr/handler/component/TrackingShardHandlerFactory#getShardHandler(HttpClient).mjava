  @Override
  public ShardHandler getShardHandler(HttpClient httpClient) {
    final ShardHandlerFactory factory = this;
    final ShardHandler wrapped = super.getShardHandler(httpClient);
    return new HttpShardHandler(this, null) {
      @Override
      public void prepDistributed(ResponseBuilder rb) {
        wrapped.prepDistributed(rb);
      }

      @Override
      public void submit(ShardRequest sreq, String shard, ModifiableSolrParams params) {
        synchronized (TrackingShardHandlerFactory.this) {
          if (isTracking()) {
            queue.offer(new ShardRequestAndParams(sreq, shard, params));
          }
        }
        wrapped.submit(sreq, shard, params);
      }

      @Override
      protected NamedList<Object> request(String url, SolrRequest req) throws IOException, SolrServerException {
        try (SolrClient client = new HttpSolrClient.Builder(url).withHttpClient(httpClient).build()) {
          return client.request(req);
        }
      }

      @Override
      public ShardResponse takeCompletedIncludingErrors() {
        return wrapped.takeCompletedIncludingErrors();
      }

      @Override
      public ShardResponse takeCompletedOrError() {
        return wrapped.takeCompletedOrError();
      }

      @Override
      public void cancelAll() {
        wrapped.cancelAll();
      }

      @Override
      public ShardHandlerFactory getShardHandlerFactory() {
        return factory;
      }
    };
  }

