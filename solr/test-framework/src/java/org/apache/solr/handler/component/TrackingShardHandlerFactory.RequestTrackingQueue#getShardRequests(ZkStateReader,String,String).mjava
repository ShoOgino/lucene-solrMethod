    /**
     * Retrieve all requests recorded by this queue which were sent to given collection and shard
     *
     * @param zkStateReader  the {@link org.apache.solr.common.cloud.ZkStateReader} from which cluster state is read
     * @param collectionName the given collection name for which requests have to be extracted
     * @param shardId        the given shard name for which requests have to be extracted
     * @return a list of {@link org.apache.solr.handler.component.TrackingShardHandlerFactory.ShardRequestAndParams}
     * or empty list if none are found
     */
    public List<ShardRequestAndParams> getShardRequests(ZkStateReader zkStateReader, String collectionName, String shardId) {
      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);
      assert collection != null;
      Slice slice = collection.getSlice(shardId);
      assert slice != null;

      List<TrackingShardHandlerFactory.ShardRequestAndParams> results = new ArrayList<>();
      for (Map.Entry<String, Replica> entry : slice.getReplicasMap().entrySet()) {
        String coreUrl = new ZkCoreNodeProps(entry.getValue()).getCoreUrl();
        List<TrackingShardHandlerFactory.ShardRequestAndParams> list = requests.get(coreUrl);
        if (list != null) {
          results.addAll(list);
        }
      }
      return results;
    }

