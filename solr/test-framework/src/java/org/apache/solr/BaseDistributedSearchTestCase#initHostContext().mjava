  /**
   * Set's the value of the "hostContext" system property to a random path 
   * like string (which may or may not contain sub-paths).  This is used 
   * in the default constructor for this test to help ensure no code paths have
   * hardcoded assumptions about the servlet context used to run solr.
   * <p>
   * Test configs may use the <code>${hostContext}</code> variable to access 
   * this system property.
   * </p>
   * @see #BaseDistributedSearchTestCase()
   * @see #clearHostContext
   */
  @BeforeClass
  public static void initHostContext() {
    // Can't use randomRealisticUnicodeString because unescaped unicode is 
    // not allowed in URL paths
    // Can't use URLEncoder.encode(randomRealisticUnicodeString) because
    // Jetty freaks out and returns 404's when the context uses escapes

    StringBuilder hostContext = new StringBuilder("/");
    if (random().nextBoolean()) {
      // half the time we use the root context, the other half...

      // Remember: randomSimpleString might be the empty string
      hostContext.append(_TestUtil.randomSimpleString(random(), 2));
      if (random().nextBoolean()) {
        hostContext.append("_");
      }
      hostContext.append(_TestUtil.randomSimpleString(random(), 3));
      if ( ! "/".equals(hostContext.toString())) {
        // if our random string is empty, this might add a trailing slash, 
        // but our code should be ok with that
        hostContext.append("/").append(_TestUtil.randomSimpleString(random(), 2));
      } else {
        // we got 'lucky' and still just have the root context,
        // NOOP: don't try to add a subdir to nothing (ie "//" is bad)
      }
    }
    // paranoia, we *really* don't want to ever get "//" in a path...
    final String hc = hostContext.toString().replaceAll("\\/+","/");

    log.info("Setting hostContext system property: " + hc);
    System.setProperty("hostContext", hc);
  }

