  /** 
   * Sets system properties to allow generation of random configurations of
   * solrconfig.xml and schema.xml. 
   * Sets properties used on  
   * {@link #newIndexWriterConfig(org.apache.lucene.analysis.Analyzer)}
   *  and base schema.xml (Point Fields)
   */
  public static void newRandomConfig() {
    IndexWriterConfig iwc = newIndexWriterConfig(new MockAnalyzer(random()));

    System.setProperty("useCompoundFile", String.valueOf(iwc.getUseCompoundFile()));

    System.setProperty("solr.tests.maxBufferedDocs", String.valueOf(iwc.getMaxBufferedDocs()));
    System.setProperty("solr.tests.ramBufferSizeMB", String.valueOf(iwc.getRAMBufferSizeMB()));

    String mergeSchedulerClass = iwc.getMergeScheduler().getClass().getName();
    if (mergeSchedulerClass.contains("$")) {
      // anonymous subclass - we can't instantiate via the resource loader, so use CMS instead
      mergeSchedulerClass = "org.apache.lucene.index.ConcurrentMergeScheduler";
    }
    System.setProperty("solr.tests.mergeScheduler", mergeSchedulerClass);
    if (RandomizedContext.current().getTargetClass().isAnnotationPresent(SuppressPointFields.class)
        || (!PREFER_POINT_FIELDS && random().nextBoolean())) {
      log.info("Using TrieFields");
      System.setProperty("solr.tests.intClass", "int");
      System.setProperty("solr.tests.longClass", "long");
      System.setProperty("solr.tests.doubleClass", "double");
      System.setProperty("solr.tests.floatClass", "float");
      System.setProperty("solr.tests.dateClass", "date");
    } else {
      log.info("Using PointFields");
      System.setProperty("solr.tests.intClass", "pint");
      System.setProperty("solr.tests.longClass", "plong");
      System.setProperty("solr.tests.doubleClass", "pdouble");
      System.setProperty("solr.tests.floatClass", "pfloat");
      System.setProperty("solr.tests.dateClass", "pdate");
    }
  }

