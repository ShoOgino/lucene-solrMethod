  public static void testCorruption(String input, int iter) {
    char[] arr = new char[input.length()];

    for (int i=0; i<iter; i++) {
      input.getChars(0, arr.length, arr, 0);
      int changes = random().nextInt(arr.length>>1) + 1;
      for (int j=0; j<changes; j++) {
        char ch;
        switch (random().nextInt(31)) {
          case 0: ch = 0; break;
          case 1: ch = '['; break;
          case 2: ch = ']'; break;
          case 3: ch = '{'; break;
          case 4: ch = '}'; break;
          case 5: ch = '"'; break;
          case 6: ch = '\''; break;
          case 7: ch = ' '; break;
          case 8: ch = '\r'; break;
          case 9: ch = '\n'; break;
          case 10:ch = '\t'; break;
          case 11:ch = ','; break;
          case 12:ch = ':'; break;
          case 13:ch = '.'; break;
          case 14:ch = 'a'; break;
          case 15:ch = 'e'; break;
          case 16:ch = '0'; break;
          case 17:ch = '1'; break;
          case 18:ch = '+'; break;
          case 19:ch = '-'; break;
          case 20:ch = 't'; break;
          case 21:ch = 'f'; break;
          case 22:ch = 'n'; break;
          case 23:ch = '/'; break;
          case 24:ch = '\\'; break;
          case 25:ch = 'u'; break;
          case 26:ch = '\u00a0'; break;
          default:ch = (char) random().nextInt(256);
        }

        arr[random().nextInt(arr.length)] = ch;
      }


      JSONParser parser = getParser(new String(arr));
      parser.setFlags( random().nextInt() );  // set random parser flags

      int ret = 0;
      try {
        for (;;) {
          int ev = parser.nextEvent();
          if (random().nextBoolean()) {
            // see if we can read the event
            switch (ev) {
              case JSONParser.STRING: ret += parser.getString().length(); break;
              case JSONParser.BOOLEAN: ret += parser.getBoolean() ? 1 : 2; break;
              case JSONParser.BIGNUMBER: ret += parser.getNumberChars().length(); break;
              case JSONParser.NUMBER: ret += parser.getDouble(); break;
              case JSONParser.LONG: ret += parser.getLong(); break;
              default: ret += ev;
            }
          }

          if (ev == JSONParser.EOF) break;
        }
      } catch (IOException ex) {
        // shouldn't happen
        System.out.println(ret);  // use ret
      } catch (JSONParser.ParseException ex) {
        // OK
      } catch (Throwable ex) {
        ex.printStackTrace();
        System.out.println(lastParser());
        throw new RuntimeException(ex);
      }
    }
  }

