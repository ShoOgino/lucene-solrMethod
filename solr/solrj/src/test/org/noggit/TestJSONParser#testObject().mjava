  @Test
  public void testObject() throws IOException {
    parse("{}","{}");
    parse("{}","{}");
    parse(" \r\n\t{\r\t\n }\r\n\t ","{}");

    parse("{'':null}","{s0}");

    err("}");
    err("[}]");
    err("{");
    err("[{]");
    err("{{}");
    err("[{{}]");
    err("{}}");
    err("[{}}]");
    err("{1}");
    err("[{1}]");
    err("{'a'}");
    err("{'a','b'}");
    err("{[]:'b'}");
    err("{{'a':'b'}:'c'}");
    err("{'a','b'}}");

    // bare strings allow these to pass
    flags=JSONParser.FLAGS_STRICT;
    err("{null:'b'}");
    err("{true:'b'}");
    err("{false:'b'}");
    err("{,}");         // test that extra commas fail
    err("{{},}");
    err("{'a':'b',}");
    flags=JSONParser.FLAGS_DEFAULT;

    parse("{}", new Object[]{m,M,e});
    parse("{,}", new Object[]{m,M,e});
    parse("{,,}", new Object[]{m,M,e});
    parse("{'a':{},}", new Object[]{m,"a",m,M,M,e});
    parse("{'a':{},,}", new Object[]{m,"a",m,M,M,e});
    parse("{,'a':{,},,}", new Object[]{m,"a",m,M,M,e});
    parse("{'a':'b'}", new Object[]{m,"a","b",M,e});
    parse("{'a':5}", new Object[]{m,"a",o(5),M,e});
    parse("{'a':null}", new Object[]{m,"a",N,M,e});
    parse("{'a':[]}", new Object[]{m,"a",a,A,M,e});
    parse("{'a':{'b':'c'}}", new Object[]{m,"a",m,"b","c",M,M,e});

    String big = "Now is the time for all good men to come to the aid of their country!";
    String bigger = big+big+big+big+big;
    parse("{'"+bigger+"':'"+bigger+"','a':'b'}", new Object[]{m,bigger,bigger,"a","b",M,e});


    flags=JSONParser.ALLOW_UNQUOTED_KEYS;
    parse("{a:'b'}", new Object[]{m,"a","b",M,e});
    parse("{null:'b'}", new Object[]{m,"null","b",M,e});
    parse("{true: 'b'}", new Object[]{m,"true","b",M,e});
    parse("{ false :'b'}", new Object[]{m,"false","b",M,e});
    parse("{null:null, true : true , false : false , x:'y',a:'b'}", new Object[]{m,"null",N,"true",t,"false",f,"x","y","a","b",M,e});
    flags = JSONParser.FLAGS_DEFAULT | JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT;
    parse("{'a'{'b':'c'}}", new Object[]{m, "a", m, "b", "c", M, M, e});
    parse("{'a': [{'b':'c'} {'b':'c'}]}", new Object[]{m, "a",a, m, "b", "c", M, m, "b", "c", M,A, M, e});
    parse("{'a' [{'b':'c'} {'b':'c'}]}", new Object[]{m, "a", a, m, "b", "c", M, m, "b", "c", M, A, M, e});
    parse("{'a':[['b']['c']]}", new Object[]{m, "a", a, a, "b", A, a, "c", A, A, M, e});
    parse("{'a': {'b':'c'} 'd': {'e':'f'}}", new Object[]{m, "a", m, "b", "c",M,  "d", m,"e","f", M, M, e});
    parse("{'a': {'b':'c'} d: {'e':'f'}}", new Object[]{m, "a", m, "b", "c",M,  "d", m,"e","f", M, M, e});

    flags = JSONParser.FLAGS_DEFAULT | JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT | JSONParser.OPTIONAL_OUTER_BRACES;
    parse("'a':{'b':'c'}", new Object[]{m, "a", m, "b", "c", M, M, e});
    parse("'a':{'b':'c'}", true, new Object[]{m, "a", m, "b", "c", M, M, e});
    parse("a:'b'", new Object[]{m, "a", "b", M, e});


    flags = JSONParser.FLAGS_DEFAULT;

  }

