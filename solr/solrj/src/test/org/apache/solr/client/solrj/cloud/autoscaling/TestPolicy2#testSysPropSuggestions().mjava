  public void testSysPropSuggestions() {

    Map<String, Object> m = (Map<String, Object>) loadFromResource("testSysPropSuggestions.json");

    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, "diagnostics/config");
    if(useNodeset){
      conf = (Map<String, Object>) Utils.fromJSONString("{" +
          "    'cluster-preferences':[{" +
          "      'minimize':'cores'," +
          "      'precision':1}," +
          "      {" +
          "        'maximize':'freedisk'," +
          "        'precision':100}," +
          "      {" +
          "        'minimize':'sysLoadAvg'," +
          "        'precision':10}]," +
          "    'cluster-policy':[{" +
          "      'replica':'<3'," +
          "      'shard':'#EACH'," +
          "      nodeset: {'sysprop.zone':['east','west']}}]}");
    }
    Policy policy = new Policy(conf);
    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);
    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);
    List<Violation> violations = session.getViolations();
    for (Violation violation : violations) {
      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);
    }
    assertEquals(2, violations.size());
    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);
    assertEquals(2, suggestions.size());
    for (Suggester.SuggestionInfo suggestion : suggestions) {
      assertTrue(ImmutableSet.of("127.0.0.1:63219_solr", "127.0.0.1:63229_solr").contains(
          suggestion._get("operation/command/move-replica/targetNode", null)));

    }
  }

