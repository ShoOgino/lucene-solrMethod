  @Test
  public void testQueryAndStreamResponse() throws Exception {
    // index a simple document with one child
    SolrClient client = getSolrClient();
    client.deleteByQuery("*:*");

    SolrInputDocument child = new SolrInputDocument();
    child.addField("id", "child");
    child.addField("type_s", "child");
    child.addField("text_s", "text");

    SolrInputDocument parent = new SolrInputDocument();
    parent.addField("id", "parent");
    parent.addField("type_s", "parent");
    parent.addChildDocument(child);

    client.add(parent);
    client.commit();

    // create a query with child doc transformer
    SolrQuery query = new SolrQuery("{!parent which='type_s:parent'}text_s:text");
    query.addField("*,[child parentFilter='type_s:parent']");

    // test regular query
    QueryResponse response = client.query(query);
    assertEquals(1, response.getResults().size());
    SolrDocument parentDoc = response.getResults().get(0);
    assertEquals(1, parentDoc.getChildDocumentCount());

    // test streaming
    final List<SolrDocument> docs = new ArrayList<>();
    client.queryAndStreamResponse(query, new StreamingResponseCallback() {
      @Override
      public void streamSolrDocument(SolrDocument doc) {
        docs.add(doc);
      }

      @Override
      public void streamDocListInfo(long numFound, long start, Float maxScore) {
      }
    });

    assertEquals(1, docs.size());
    parentDoc = docs.get(0);
    assertEquals(1, parentDoc.getChildDocumentCount());
  }

