  private void testJDBCMethods(String collection, String connectionString, Properties properties, String sql) throws Exception {
    try (Connection con = DriverManager.getConnection(connectionString, properties)) {
      assertTrue(con.isValid(DEFAULT_CONNECTION_TIMEOUT));

      assertEquals(zkHost, con.getCatalog());
      con.setCatalog(zkHost);
      assertEquals(zkHost, con.getCatalog());

      assertEquals(null, con.getSchema());
      con.setSchema("myschema");
      assertEquals(null, con.getSchema());

      DatabaseMetaData databaseMetaData = con.getMetaData();
      assertNotNull(databaseMetaData);

      assertEquals(con, databaseMetaData.getConnection());
      assertEquals(connectionString, databaseMetaData.getURL());

      assertEquals(4, databaseMetaData.getJDBCMajorVersion());
      assertEquals(0, databaseMetaData.getJDBCMinorVersion());

      assertEquals("Apache Solr", databaseMetaData.getDatabaseProductName());

      // The following tests require package information that is not available when running via Maven
//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDatabaseProductVersion());
//      assertEquals(0, databaseMetaData.getDatabaseMajorVersion());
//      assertEquals(0, databaseMetaData.getDatabaseMinorVersion());

//      assertEquals(this.getClass().getPackage().getSpecificationTitle(), databaseMetaData.getDriverName());
//      assertEquals(this.getClass().getPackage().getSpecificationVersion(), databaseMetaData.getDriverVersion());
//      assertEquals(0, databaseMetaData.getDriverMajorVersion());
//      assertEquals(0, databaseMetaData.getDriverMinorVersion());


      List<String> tableSchemas = new ArrayList<>(Arrays.asList(zkHost, "metadata"));
      try(ResultSet rs = databaseMetaData.getSchemas()) {
        assertTrue(rs.next());
        assertTrue(tableSchemas.contains(rs.getString("tableSchem")));
        tableSchemas.remove(rs.getString("tableSchem"));
        assertNull(rs.getString("tableCat"));
        assertTrue(rs.next());
        assertTrue(tableSchemas.contains(rs.getString("tableSchem")));
        tableSchemas.remove(rs.getString("tableSchem"));
        assertNull(rs.getString("tableCat"));
        assertFalse(rs.next());
        assertTrue(tableSchemas.isEmpty());
      }

      try(ResultSet rs = databaseMetaData.getCatalogs()) {
        assertTrue(rs.next());
        assertNull(rs.getString("tableCat"));
        assertFalse(rs.next());
      }

      CloudSolrClient solrClient = cluster.getSolrClient();
      solrClient.connect();
      ZkStateReader zkStateReader = solrClient.getZkStateReader();

      SortedSet<String> tables = new TreeSet<>();

      Set<String> collectionsSet = zkStateReader.getClusterState().getCollectionsMap().keySet();
      tables.addAll(collectionsSet);

      Aliases aliases = zkStateReader.getAliases();
      if(aliases != null) {
        Map<String, String> collectionAliasMap = aliases.getCollectionAliasMap();
        if(collectionAliasMap != null) {
          Set<String> aliasesSet = collectionAliasMap.keySet();
          tables.addAll(aliasesSet);
        }
      }

      try(ResultSet rs = databaseMetaData.getTables(null, zkHost, "%", null)) {
        for(String table : tables) {
          assertTrue(rs.next());
          assertNull(rs.getString("tableCat"));
          assertEquals(zkHost, rs.getString("tableSchem"));
          assertEquals(table, rs.getString("tableName"));
          assertEquals("TABLE", rs.getString("tableType"));
          assertNull(rs.getString("remarks"));
        }
        assertFalse(rs.next());
      }

      assertTrue(con.isReadOnly());
      con.setReadOnly(true);
      assertTrue(con.isReadOnly());

      assertNull(con.getWarnings());
      con.clearWarnings();
      assertNull(con.getWarnings());


      try (Statement statement = con.createStatement()) {
        checkStatement(con, statement);

        try (ResultSet rs = statement.executeQuery(sql)) {
          assertEquals(statement, rs.getStatement());

          checkResultSetMetadata(rs);
          checkResultSet(rs);
        }

        assertTrue(statement.execute(sql));
        assertEquals(-1, statement.getUpdateCount());

        try (ResultSet rs = statement.getResultSet()) {
          assertEquals(statement, rs.getStatement());

          checkResultSetMetadata(rs);
          checkResultSet(rs);
        }

        assertFalse(statement.getMoreResults());
      }

      try (PreparedStatement statement = con.prepareStatement(sql)) {
        checkStatement(con, statement);

        try (ResultSet rs = statement.executeQuery()) {
          assertEquals(statement, rs.getStatement());

          checkResultSetMetadata(rs);
          checkResultSet(rs);
        }

        assertTrue(statement.execute());
        assertEquals(-1, statement.getUpdateCount());

        try (ResultSet rs = statement.getResultSet()) {
          assertEquals(statement, rs.getStatement());

          checkResultSetMetadata(rs);
          checkResultSet(rs);
        }

        assertFalse(statement.getMoreResults());
      }
    }
  }

