  // Select and export should be identical sort orders I think.
  private void checkSort(JettySolrRunner jetty, String field, String sortDir, String[] fields) throws IOException, SolrServerException {

    // Comes back after after LUCENE-7548
//    SolrQuery query = new SolrQuery("*:*");
//    query.addSort(field, ("asc".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));
//    query.addSort("id", SolrQuery.ORDER.asc);
//    query.addField("id");
//    query.addField(field);
//    query.setRequestHandler("standard");
//    query.setRows(100);
//
//    List<String> selectOrder = new ArrayList<>();
//
//    String url = jetty.getBaseUrl() + "/" + COLLECTION;
//
//    try (HttpSolrClient client = getHttpSolrClient(url)) {
//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
//      QueryResponse rsp = client.query(query);
//      for (SolrDocument doc : rsp.getResults()) {
//        selectOrder.add((String) doc.getFieldValue("id"));
//      }
//    }
//    SolrParams exportParams = mapParams("q", "*:*", "qt", "/export", "fl", "id," + field, "sort", field + " " + sortDir + ",id asc");
//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {
//      List<Tuple> tuples = getTuples(solrStream);
//      assertEquals("There should be exactly 32 responses returned", 32, tuples.size());
//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.
//      assertEquals("Tuple count should exactly match sort array size for field " + field + " sort order " + sortDir, selectOrder.size(), tuples.size());
//
//      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.
//        assertEquals("Order for missing docValues fields wrong for field '" + field + "' sort direction '" + sortDir,
//            tuples.get(idx).getString("id"), selectOrder.get(idx));
//      }
//    }

    // Remove below and uncomment above after LUCENE-7548
    List<String> selectOrder = ("asc".equals(sortDir)) ? Arrays.asList(ascOrder) : Arrays.asList(descOrder);
    List<String> selectOrderBool = ("asc".equals(sortDir)) ? Arrays.asList(ascOrderBool) : Arrays.asList(descOrderBool);
    SolrParams exportParams = mapParams("q", "*:*", "qt", "/export", "fl", "id," + field, "sort", field + " " + sortDir + ",id asc");
    StreamContext streamContext = new StreamContext();
    SolrClientCache solrClientCache = new SolrClientCache();
    streamContext.setSolrClientCache(solrClientCache);
    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {
      solrStream.setStreamContext(streamContext);
      List<Tuple> tuples = getTuples(solrStream);
      assertEquals("There should be exactly 32 responses returned", 32, tuples.size());
      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.
      assertEquals("Tuple count should exactly match sort array size for field " + field + " sort order " + sortDir, selectOrder.size(), tuples.size());

      for (int idx = 0; idx < selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders passed in.
        assertEquals("Order for missing docValues fields wrong for field '" + field + "' sort direction '" + sortDir +
                "' RESTORE GETTING selectOrder from select statement after LUCENE-7548",
            tuples.get(idx).getString("id"), (field.startsWith("b_") ? selectOrderBool.get(idx) : selectOrder.get(idx)));
      }
    } finally {
      solrClientCache.close();
    }
  }

