  @Test
  public void testTupleStreamGetShardsPreference() throws Exception {
    StreamContext streamContext = new StreamContext();
    streamContext.setSolrClientCache(new SolrClientCache());
    streamContext.setRequestReplicaListTransformerGenerator(new RequestReplicaListTransformerGenerator(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + ":TLOG", null, null, null));

    streamContext.setRequestParams(mapParams(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + ":nrt"));

    try {
      ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();
      List<String> strings = zkStateReader.aliasesManager.getAliases().resolveAliases(MULTI_REPLICA_COLLECTIONORALIAS);
      String collName = strings.size() > 0 ? strings.get(0) : MULTI_REPLICA_COLLECTIONORALIAS;
      Map<String, String> replicaTypeMap = mapReplicasToReplicaType(zkStateReader.getClusterState().getCollectionOrNull(collName));

      // Test from extra params
      SolrParams sParams = mapParams("q", "*:*", ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + ":pull");
      testTupleStreamSorting(streamContext, sParams, "PULL", replicaTypeMap);

      // Test defaults from streamContext.getParams()
      testTupleStreamSorting(streamContext, new ModifiableSolrParams(), "NRT", replicaTypeMap);

      // Test defaults from the RLTG
      streamContext.setRequestParams(new ModifiableSolrParams());
      testTupleStreamSorting(streamContext, new ModifiableSolrParams(), "TLOG", replicaTypeMap);
    } finally {
      streamContext.getSolrClientCache().close();
    }
  }

