  @Test
  public void testNestedFacetSimple() throws Exception {
    SolrClient solrClient = cluster.getSolrClient();

    //tag::solrj-json-nested-cat-facet[]
    final TermsFacetMap topCategoriesFacet = new TermsFacetMap("cat").setLimit(3);
    final TermsFacetMap topManufacturerFacet = new TermsFacetMap("manu_id_s").setLimit(1);
    topCategoriesFacet.withSubFacet("top_manufacturers", topManufacturerFacet);
    final JsonQueryRequest request = new JsonQueryRequest()
        .setQuery("*:*")
        .withFacet("categories", topCategoriesFacet);
    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);
    //end::solrj-json-nested-cat-facet[]

    assertEquals(0, queryResponse.getStatus());
    assertEquals(32, queryResponse.getResults().getNumFound());
    assertEquals(10, queryResponse.getResults().size());
    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();

    assertHasFacetWithBucketValues(topLevelFacetingData, "categories",
        new FacetBucket("electronics", 12),
        new FacetBucket("currency", 4),
        new FacetBucket("memory", 3));

    // Check the top manufacturer for each category
    List<BucketJsonFacet> catBuckets = topLevelFacetingData.getBucketBasedFacets("categories").getBuckets();
    assertHasFacetWithBucketValues(catBuckets.get(0), "top_manufacturers",
        new FacetBucket("corsair", 3));
    assertHasFacetWithBucketValues(catBuckets.get(1), "top_manufacturers",
        new FacetBucket("boa", 1));
    assertHasFacetWithBucketValues(catBuckets.get(2), "top_manufacturers",
        new FacetBucket("corsair", 3));
  }

