  /**
   * Tests that an empty policy should not persist implicitly added keys to MapWriter
   * <p>
   * The reason behind doing this is to ensure that implicitly added cluster preferences do not ever
   * go to ZooKeeper so that we can decide whether to enable autoscaling policy framework or not.
   *
   * @see Assign#usePolicyFramework(DocCollection, SolrCloudManager)
   */
  public void testPolicyMapWriterWithEmptyPreferences() throws IOException {
    @SuppressWarnings({"rawtypes"})
    List<Map> defaultPreferences = Policy.DEFAULT_PREFERENCES
        .stream().map(preference -> preference.getOriginal()).collect(Collectors.toList());

    // first we create a completely empty policy
    Policy policy = new Policy();
    // sanity check that the default cluster preferences were added implicitly
    assertNotNull(policy.getClusterPreferences());
    // and they were the same as the default preferences
    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());
    Set<String> writtenKeys = new HashSet<>();
    policy.writeMap(new MapWriter.EntryWriter() {
      @Override
      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {
        writtenKeys.add(k.toString());
        return this;
      }
    });
    // but those implicitly added cluster preferences are never written by MapWriter
    assertEquals(0, writtenKeys.size());

    // reset
    writtenKeys.clear();
    // now we create a policy that only has cluster preferences which happen to be the same as the default
    // preferences
    policy = new Policy(Utils.makeMap(CLUSTER_PREFERENCES, defaultPreferences));
    // sanity checks
    assertNotNull(policy.getClusterPreferences());
    assertEquals(policy.getClusterPreferences().size(), defaultPreferences.size());
    policy.writeMap(new MapWriter.EntryWriter() {
      @Override
      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {
        writtenKeys.add(k.toString());
        return this;
      }
    });
    // since the user explicitly added those preferences, they should be written by MapWriter
    assertEquals(1, writtenKeys.size());
    assertTrue(writtenKeys.contains(CLUSTER_PREFERENCES));

    // reset
    writtenKeys.clear();
    // now we create a cluster policy that is intentionally empty which should prevent the implicit
    // cluster policy from being written but should emit an empty key/val pair for cluster policy
    policy = new Policy(Utils.makeMap(CLUSTER_POLICY, Collections.emptyList()));
    // sanity checks
    assertFalse(policy.isEmpty());
    assertTrue(policy.hasEmptyPreferences());
    assertFalse(policy.hasEmptyClusterPolicy());
    policy.writeMap(new MapWriter.EntryWriter() {
      @Override
      public MapWriter.EntryWriter put(CharSequence k, Object v) throws IOException {
        writtenKeys.add(k.toString());
        return this;
      }
    });
    assertEquals(1, writtenKeys.size());
    assertTrue(writtenKeys.contains(CLUSTER_POLICY));
  }

