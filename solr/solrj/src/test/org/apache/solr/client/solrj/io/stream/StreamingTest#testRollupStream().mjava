  @Test
  public void testRollupStream() throws Exception {

    new UpdateRequest()
        .add(id, "0", "a_s", "hello0", "a_i", "0", "a_f", "1")
        .add(id, "2", "a_s", "hello0", "a_i", "2", "a_f", "2")
        .add(id, "3", "a_s", "hello3", "a_i", "3", "a_f", "3")
        .add(id, "4", "a_s", "hello4", "a_i", "4", "a_f", "4")
        .add(id, "1", "a_s", "hello0", "a_i", "1", "a_f", "5")
        .add(id, "5", "a_s", "hello3", "a_i", "10", "a_f", "6")
        .add(id, "6", "a_s", "hello4", "a_i", "11", "a_f", "7")
        .add(id, "7", "a_s", "hello3", "a_i", "12", "a_f", "8")
        .add(id, "8", "a_s", "hello3", "a_i", "13", "a_f", "9")
        .add(id, "9", "a_s", "hello0", "a_i", "14", "a_f", "10")
        .commit(cluster.getSolrClient(), COLLECTION);

    SolrParams sParamsA = mapParams("q", "*:*", "fl", "a_s,a_i,a_f", "sort", "a_s asc");
    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);

    Bucket[] buckets =  {new Bucket("a_s")};

    Metric[] metrics = {new SumMetric("a_i"),
                        new SumMetric("a_f"),
                        new MinMetric("a_i"),
                        new MinMetric("a_f"),
                        new MaxMetric("a_i"),
                        new MaxMetric("a_f"),
                        new MeanMetric("a_i"),
                        new MeanMetric("a_f"),
                        new CountMetric()};

    RollupStream rollupStream = new RollupStream(stream, buckets, metrics);
    List<Tuple> tuples = getTuples(rollupStream);

    assert(tuples.size() == 3);

    //Test Long and Double Sums

    Tuple tuple = tuples.get(0);
    String bucket = tuple.getString("a_s");
    Double sumi = tuple.getDouble("sum(a_i)");
    Double sumf = tuple.getDouble("sum(a_f)");
    Double mini = tuple.getDouble("min(a_i)");
    Double minf = tuple.getDouble("min(a_f)");
    Double maxi = tuple.getDouble("max(a_i)");
    Double maxf = tuple.getDouble("max(a_f)");
    Double avgi = tuple.getDouble("avg(a_i)");
    Double avgf = tuple.getDouble("avg(a_f)");
    Double count = tuple.getDouble("count(*)");


    assertEquals("hello0", bucket);
    assertEquals(17, sumi.doubleValue(), 0.001);
    assertEquals(18, sumf.doubleValue(), 0.001);
    assertEquals(0, mini.doubleValue(), 0.001);
    assertEquals(1, minf.doubleValue(), 0.001);
    assertEquals(14, maxi.doubleValue(), 0.001);
    assertEquals(10, maxf.doubleValue(), 0.001);
    assertEquals(4.25, avgi.doubleValue(), 0.001);
    assertEquals(4.5, avgf.doubleValue(), 0.001);
    assertEquals(4, count.doubleValue(), 0.001);


    tuple = tuples.get(1);
    bucket = tuple.getString("a_s");
    sumi = tuple.getDouble("sum(a_i)");
    sumf = tuple.getDouble("sum(a_f)");
    mini = tuple.getDouble("min(a_i)");
    minf = tuple.getDouble("min(a_f)");
    maxi = tuple.getDouble("max(a_i)");
    maxf = tuple.getDouble("max(a_f)");
    avgi = tuple.getDouble("avg(a_i)");
    avgf = tuple.getDouble("avg(a_f)");
    count = tuple.getDouble("count(*)");

    assertEquals("hello3", bucket);
    assertEquals(38, sumi.doubleValue(), 0.001);
    assertEquals(26, sumf.doubleValue(), 0.001);
    assertEquals(3, mini.doubleValue(), 0.001);
    assertEquals(3, minf.doubleValue(), 0.001);
    assertEquals(13, maxi.doubleValue(), 0.001);
    assertEquals(9, maxf.doubleValue(), 0.001);
    assertEquals(9.5, avgi.doubleValue(), 0.001);
    assertEquals(6.5, avgf.doubleValue(), 0.001);
    assertEquals(4, count.doubleValue(), 0.001);


    tuple = tuples.get(2);
    bucket = tuple.getString("a_s");
    sumi = tuple.getDouble("sum(a_i)");
    sumf = tuple.getDouble("sum(a_f)");
    mini = tuple.getDouble("min(a_i)");
    minf = tuple.getDouble("min(a_f)");
    maxi = tuple.getDouble("max(a_i)");
    maxf = tuple.getDouble("max(a_f)");
    avgi = tuple.getDouble("avg(a_i)");
    avgf = tuple.getDouble("avg(a_f)");
    count = tuple.getDouble("count(*)");

    assertEquals("hello4", bucket);
    assertEquals(15, sumi.longValue());
    assertEquals(11, sumf.doubleValue(), 0.01);
    assertEquals(4, mini.doubleValue(), 0.01);
    assertEquals(4, minf.doubleValue(), 0.01);
    assertEquals(11, maxi.doubleValue(), 0.01);
    assertEquals(7, maxf.doubleValue(), 0.01);
    assertEquals(7.5, avgi.doubleValue(), 0.01);
    assertEquals(5.5, avgf.doubleValue(), 0.01);
    assertEquals(2, count.doubleValue(), 0.01);


    //Test will null value in the grouping field
    new UpdateRequest()
        .add(id, "12", "a_s", null, "a_i", "14", "a_f", "10")
        .commit(cluster.getSolrClient(), COLLECTION);

    sParamsA = mapParams("q", "*:*", "fl", "a_s,a_i,a_f", "sort", "a_s asc", "qt", "/export");
    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);

    Bucket[] buckets1 =  {new Bucket("a_s")};

    Metric[] metrics1 = {new SumMetric("a_i"),
        new SumMetric("a_f"),
        new MinMetric("a_i"),
        new MinMetric("a_f"),
        new MaxMetric("a_i"),
        new MaxMetric("a_f"),
        new MeanMetric("a_i"),
        new MeanMetric("a_f"),
        new CountMetric()};

    rollupStream = new RollupStream(stream, buckets1, metrics1);
    tuples = getTuples(rollupStream);
    //Check that we've got the extra NULL bucket
    assertEquals(4, tuples.size());
    tuple = tuples.get(0);
    assertEquals("NULL", tuple.getString("a_s"));

    sumi = tuple.getDouble("sum(a_i)");
    sumf = tuple.getDouble("sum(a_f)");
    mini = tuple.getDouble("min(a_i)");
    minf = tuple.getDouble("min(a_f)");
    maxi = tuple.getDouble("max(a_i)");
    maxf = tuple.getDouble("max(a_f)");
    avgi = tuple.getDouble("avg(a_i)");
    avgf = tuple.getDouble("avg(a_f)");
    count = tuple.getDouble("count(*)");

    assertEquals(14, sumi.doubleValue(), 0.01);
    assertEquals(10, sumf.doubleValue(), 0.01);
    assertEquals(14, mini.doubleValue(), 0.01);
    assertEquals(10, minf.doubleValue(), 0.01);
    assertEquals(14, maxi.doubleValue(), 0.01);
    assertEquals(10, maxf.doubleValue(), 0.01);
    assertEquals(14, avgi.doubleValue(), 0.01);
    assertEquals(10, avgf.doubleValue(), 0.01);
    assertEquals(1, count.doubleValue(), 0.01);

  }

