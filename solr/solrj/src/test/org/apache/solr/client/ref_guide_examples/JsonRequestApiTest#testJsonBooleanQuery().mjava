  @Test
  public void testJsonBooleanQuery() throws Exception {
    SolrClient solrClient = cluster.getSolrClient();
    QueryResponse[] responses = new QueryResponse[3];

    {
      //tag::solrj-ipod-query-bool[]
      final Map<String, Object> queryTopLevel = new HashMap<>();
      final Map<String, Object> boolProperties = new HashMap<>();
      final List<Object> mustClauses = new ArrayList<>();
      final List<Object> mustNotClauses = new ArrayList<>();
      final Map<String, Object> frangeTopLevel = new HashMap<>();
      final Map<String, Object> frangeProperties = new HashMap<>();

      queryTopLevel.put("bool", boolProperties);
      boolProperties.put("must", mustClauses);
      mustClauses.add("name:iPod");

      boolProperties.put("must_not", mustNotClauses);
      frangeTopLevel.put("frange", frangeProperties);
      frangeProperties.put("l", 0);
      frangeProperties.put("u", 5);
      frangeProperties.put("query", "popularity");
      mustNotClauses.add(frangeTopLevel);

      final JsonQueryRequest query = new JsonQueryRequest()
          .setQuery(queryTopLevel);
      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);
      //end::solrj-ipod-query-bool[]

      responses[0] = response;
    }

    {
      //tag::solrj-ipod-query-bool-condensed[]
      final Map<String, Object> queryTopLevel = new HashMap<>();
      final Map<String, Object> boolProperties = new HashMap<>();
      final List<Object> mustClauses = new ArrayList<>();
      final List<Object> mustNotClauses = new ArrayList<>();
      queryTopLevel.put("bool", boolProperties);
      boolProperties.put("must", "name:iPod");
      boolProperties.put("must_not", "{!frange l=0 u=5}popularity");

      final JsonQueryRequest query = new JsonQueryRequest()
          .setQuery(queryTopLevel);
      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);
      //end::solrj-ipod-query-bool-condensed[]

      responses[1] = response;
    }

    {
      //tag::solrj-ipod-query-bool-filter[]
      final Map<String, Object> queryTopLevel = new HashMap<>();
      final Map<String, Object> boolProperties = new HashMap<>();
      queryTopLevel.put("bool", boolProperties);
      boolProperties.put("must_not","{!frange l=0 u=5}popularity");

      final JsonQueryRequest query = new JsonQueryRequest()
          .setQuery(queryTopLevel)
          .withFilter("name:iPod");
      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);
      //end::solrj-ipod-query-bool-filter[]

      responses[2] = response;
    }

    for (QueryResponse response : responses) {
      assertResponseFoundNumDocs(response, 1);
      assertEquals("MA147LL/A", response.getResults().get(0).get("id"));
    }
  }

