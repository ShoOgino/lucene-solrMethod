  //this format accepts a 1:1 mapping of the json format and javabin format
  @SuppressWarnings({"unchecked"})
  public void testStreamableInputDocFormat() throws IOException {
    @SuppressWarnings({"rawtypes"})
    Map m = Utils.makeMap("id","1","desc" ,"The desc 1");
    m.put(CHILDDOC, (MapWriter) ew -> {
      ew.put("id","1.1");
      ew.put("desc" ,"The desc 1.1");
      ew.put(CHILDDOC, (IteratorWriter) iw -> {
        iw.add(Utils.makeMap("id", "1.1.1","desc","The desc 1.1.1"));
        iw.add((MapWriter) ew1 -> {
          ew1.put("id", "1.1.2");
          ew1.put("desc", "The desc 1.1.2");
        });
      });
    });
    MapWriter m2 = ew -> {
      ew.put("id", "2");
      ew.put("des", "The desc 2");
    };

    @SuppressWarnings({"rawtypes"})
    List l = new ArrayList();
    l.add(m);
    l.add(m2);
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    new JavaBinCodec().marshal(l.iterator(), baos);

    List<SolrInputDocument>  l2 = new ArrayList<>();

    new JavaBinUpdateRequestCodec().unmarshal(new ByteArrayInputStream(baos.toByteArray()), (document, req, commitWithin, override) -> l2.add(document));

   assertEquals(l2.get(0).getChildDocuments().size(), 1);

   Object o = Utils.fromJSONString(Utils.writeJson(l.get(0), new StringWriter(), true).toString());
   Object cdoc = Utils.getObjectByPath(o, false, CHILDDOC);
   assertEquals(Utils.writeJson(cdoc, new StringWriter(), true).toString(),
       Utils.writeJson(l2.get(0).getChildDocuments().get(0) ,new StringWriter(), true).toString());

  }

