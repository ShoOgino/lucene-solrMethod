  @Test
  public void testJsonQueryDslBasicEquivalents() throws Exception {
    SolrClient solrClient = cluster.getSolrClient();

    {
      //tag::solrj-ipod-query-basic[]
      final SolrQuery query = new SolrQuery("name:iPod");
      final QueryResponse response = solrClient.query(COLLECTION_NAME, query);
      //end::solrj-ipod-query-basic[]

      assertResponseFoundNumDocs(response, 3);
    }

    {
      //tag::solrj-ipod-query-dsl-1[]
      final JsonQueryRequest query = new JsonQueryRequest()
          .setQuery("name:iPod");
      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);
      //end::solrj-ipod-query-dsl-1[]

      assertResponseFoundNumDocs(response, 3);
    }

    {
      //tag::solrj-ipod-query-dsl-2[]
      final JsonQueryRequest query = new JsonQueryRequest()
          .setQuery("{!lucene df=name}iPod");
      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);
      //end::solrj-ipod-query-dsl-2[]

      assertResponseFoundNumDocs(response, 3);
    }

    {
      //tag::solrj-ipod-query-dsl-3[]
      final Map<String, Object> queryTopLevel = new HashMap<>();
      final Map<String, Object> luceneQueryProperties = new HashMap<>();
      queryTopLevel.put("lucene", luceneQueryProperties);
      luceneQueryProperties.put("df", "name");
      luceneQueryProperties.put("query", "iPod");
      final JsonQueryRequest query = new JsonQueryRequest()
          .setQuery(queryTopLevel);
      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);
      //end::solrj-ipod-query-dsl-3[]

      assertResponseFoundNumDocs(response, 3);
    }
  }

