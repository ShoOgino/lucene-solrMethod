  public void testDaemonUpdateStream() throws Exception {
    final String daemonUrl = getRandomCoreUrl(COLLECTION_X);
    log.info("Using Daemon @ {}", daemonUrl);
    
    {
      final String expr
        // NOTE: inspite of what is implied by 'terminate=true', this daemon will
        // NEVER terminate on it's own as long as the updates are successful
        // (aparently that requires usage of anest topic() stream to set a "sleepMillis"?!?!?!)
        = "daemon(id=daemonId,runInterval=1000,terminate=true,           "
        + "       update("+COLLECTION_X+",tuple(id=42,a_i=1,b_i=5)))     "
        ;
      final SolrStream solrStream = new SolrStream(daemonUrl,
                                                   params("qt", "/stream",
                                                          "expr", expr));
      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);
      final List<Tuple> tuples = getTuples(solrStream);
      assertEquals(1, tuples.size()); // daemon starting status
    }
    try {
      // We have to poll the daemon 'list' to know once it's run...
      long iterations = 0;
      final TimeOut timeout = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);
      while ( ! timeout.hasTimedOut() ) {
        final SolrStream daemonCheck = new SolrStream(daemonUrl,
                                                      params("qt", "/stream",
                                                             "action", "list"));
        daemonCheck.setCredentials(WRITE_X_USER, WRITE_X_USER);
        final List<Tuple> tuples = getTuples(daemonCheck);
        assertEquals(1, tuples.size()); // our daemon;
        iterations = tuples.get(0).getLong("iterations");
        if (1 < iterations) {
          // once the daemon has had a chance to run, break out of TimeOut
          break;
        }
        Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));
      }
      assertTrue("Didn't see any iterations after waiting an excessive amount of time: " + iterations,
                 0 < iterations);
    } finally {
      // kill the damon...
      final SolrStream daemonKiller = new SolrStream(daemonUrl,
                                                     params("qt", "/stream",
                                                            "action", "kill",
                                                            "id", "daemonId"));
      daemonKiller.setCredentials(WRITE_X_USER, WRITE_X_USER);
      final List<Tuple> tuples = getTuples(daemonKiller);
      assertEquals(1, tuples.size()); // daemon death status
    }
    
    assertEquals(1L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));
  }

