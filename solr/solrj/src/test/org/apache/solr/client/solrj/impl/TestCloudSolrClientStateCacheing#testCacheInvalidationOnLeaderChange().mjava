  @Test
  public void testCacheInvalidationOnLeaderChange() throws Exception {

    final String collectionName = "cacheInvalidation";

    try (CloudSolrClient solrClient = new CloudSolrClient.Builder()
        .withZkHost(cluster.getZkServer().getZkAddress())
        .sendDirectUpdatesToShardLeadersOnly()
        .build()) {

      CollectionAdminRequest.createCollection(collectionName, "conf", 2, 2)
          .process(solrClient);

      // send one update that will populate the client's cluster state cache
      new UpdateRequest()
          .add(id, "0", "a_t", "hello1")
          .add(id, "2", "a_t", "hello2")
          .add(id, "3", "a_t", "hello2")
          .commit(solrClient, collectionName);

      // take down a leader node
      JettySolrRunner leaderJetty = cluster.getLeaderJetty(collectionName, "shard1");
      leaderJetty.stop();

      // wait for a new leader to be elected
      solrClient.waitForState(collectionName, DEFAULT_TIMEOUT, TimeUnit.SECONDS,
          (n, c) -> DocCollection.isUpdateable(n, c, 2));

      // send another update - this should still succeed, even though the client's
      // cached leader will be incorrect
      new UpdateRequest()
          .add(id, "4", "a_t", "hello1")
          .add(id, "5", "a_t", "hello2")
          .add(id, "6", "a_t", "hello2")
          .commit(solrClient, collectionName);

    }

  }

