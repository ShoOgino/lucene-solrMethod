  @Test
  public void testFacetWithDomainWidenedUsingExcludeTagsToIgnoreFilters() throws Exception {
    final TermsFacetMap inStockFacet = new TermsFacetMap("cat")
        .setLimit(2);
    final TermsFacetMap allProductsFacet = new TermsFacetMap("cat")
        .setLimit(2).withDomain(new DomainMap().withTagsToExclude("on_shelf"));
    final Map<String, Object> taggedFilterMap = new HashMap<>();
    taggedFilterMap.put("#on_shelf", "inStock:true");
    final JsonQueryRequest request = new JsonQueryRequest()
        .setQuery("*:*")
        .withFilter(taggedFilterMap)
        .withFacet("in_stock_only", inStockFacet)
        .withFacet("all", allProductsFacet);

    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);

    assertExpectedDocumentsFoundAndReturned(response, NUM_IN_STOCK, 10);
    final NestableJsonFacet topLevelFacetData = response.getJsonFacetingResponse();
    assertHasFacetWithBucketValues(topLevelFacetData,"in_stock_only",
        new FacetBucket("electronics",8),
        new FacetBucket("currency", 4));
    assertHasFacetWithBucketValues(topLevelFacetData  ,"all",
        new FacetBucket("electronics",12),
        new FacetBucket("currency", 4));
  }

