  public void testReplicaCountSuggestions() {
    String dataproviderdata = "{" +
        "  'liveNodes':[" +
        "    '10.0.0.6:7574_solr'," +
        "    '10.0.0.6:8983_solr']," +
        "  'replicaInfo':{" +
        "    '10.0.0.6:7574_solr':{}," +
        "    '10.0.0.6:8983_solr':{'mycoll1':{" +
        "        'shard2':[{'core_node2':{'type':'NRT'}}]," +
        "        'shard1':[{'core_node1':{'type':'NRT'}}]}}}," +
        "  'nodeValues':{" +
        "    '10.0.0.6:7574_solr':{" +
        "      'node':'10.0.0.6:7574_solr'," +
        "      'cores':0}," +
        "    '10.0.0.6:8983_solr':{" +
        "      'node':'10.0.0.6:8983_solr'," +
        "      'cores':2}}}";
    String autoScalingjson = "  { cluster-policy:[" +
        "    { cores :'<10', node :'#ANY'}," +
        "    { replica :'<2',  node:'#ANY'}," +
        "    { nodeRole : overseer, replica :0}]," +
        "  cluster-preferences :[{ minimize : cores }]}";
    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),
        cloudManagerWithData(dataproviderdata));
    assertFalse(l.isEmpty());

    Map m = l.get(0).toMap(new LinkedHashMap<>());
    assertEquals(1.0d, Utils.getObjectByPath(m, true, "violation/violation/delta"));
    assertEquals("POST", Utils.getObjectByPath(m, true, "operation/method"));
    assertEquals("/c/mycoll1", Utils.getObjectByPath(m, true, "operation/path"));
    assertNotNull(Utils.getObjectByPath(m, false, "operation/command/move-replica"));
    assertEquals("10.0.0.6:7574_solr", Utils.getObjectByPath(m, true, "operation/command/move-replica/targetNode"));
    assertEquals("core_node2", Utils.getObjectByPath(m, true, "operation/command/move-replica/replica"));
  }

