  public void testDaemonUpdateStreamInsufficientCredentials() throws Exception {
    final String daemonUrl = getRandomCoreUrl(COLLECTION_X);
    log.info("Using Daemon @ {}", daemonUrl);
    
    // both of these users have valid credentials and authz read COLLECTION_X, but neither has
    // authz to write to X...
    for (String user : Arrays.asList(READ_ONLY_USER, WRITE_Y_USER)) {
      final String daemonId = "daemon_" + user;
      {
        final String expr
          = "daemon(id="+daemonId+",runInterval=1000,terminate=true,           "
          + "       update("+COLLECTION_X+",tuple(id=42,a_i=1,b_i=5)))     "
          ;
        final SolrStream solrStream = new SolrStream(daemonUrl,
                                                     params("qt", "/stream",
                                                            "_trace", "start_" + daemonId,
                                                            "expr", expr));
        solrStream.setCredentials(user, user);
        final List<Tuple> tuples = getTuples(solrStream);
        assertEquals(1, tuples.size()); // daemon starting status
      }
      try {
        // We have to poll the daemon 'list' to know once it's run / terminated...
        Object state = null;
        final TimeOut timeout = new TimeOut(60, TimeUnit.SECONDS, TimeSource.NANO_TIME);
        while ( ! timeout.hasTimedOut() ) {
          final SolrStream daemonCheck = new SolrStream(daemonUrl,
                                                        params("qt", "/stream",
                                                               "_trace", "check_" + daemonId,
                                                               "action", "list"));
          daemonCheck.setCredentials(user, user);
          final List<Tuple> tuples = getTuples(daemonCheck);
          assertEquals(1, tuples.size()); // our daemon;
          if (log.isInfoEnabled()) {
            log.info("Current daemon status: {}", tuples.get(0).fields);
          }
          assertEquals(daemonId + " should have never had a successful iteration",
                       Long.valueOf(0L), tuples.get(0).getLong("iterations"));
          state = tuples.get(0).get("state");
          if ("TERMINATED".equals(state)) {
            // once the daemon has failed, break out of TimeOut
            break;
          }
          Thread.sleep(Math.max(1, Math.min(5000, timeout.timeLeft(TimeUnit.MILLISECONDS))));
        }
        assertEquals("Timed out w/o ever getting TERMINATED state from " + daemonId,
                     "TERMINATED", state);
      } finally {
        // kill the damon...
        final SolrStream daemonKiller = new SolrStream(daemonUrl,
                                                       params("qt", "/stream",
                                                              "_trace", "kill_" + daemonId,
                                                              "action", "kill",
                                                              "id", daemonId));
        daemonKiller.setCredentials(user, user);
        final List<Tuple> tuples = getTuples(daemonKiller);
        assertEquals(1, tuples.size()); // daemon death status
      }
      
      assertEquals("doc count after daemon update for " + user,
                   0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));
    }
    
    // sanity check
    assertEquals("final doc count",
                 0L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));
    
  }

