  private void assertSSLHostnameVerifier(Class<? extends HostnameVerifier> expected,
                                         SchemaRegistryProvider provider) {
    ConnectionSocketFactory socketFactory = provider.getSchemaRegistry().lookup("https");
    assertNotNull("unable to lookup https", socketFactory);
    assertTrue("socketFactory is not an SSLConnectionSocketFactory: " + socketFactory.getClass(),
               socketFactory instanceof SSLConnectionSocketFactory);
    SSLConnectionSocketFactory sslSocketFactory = (SSLConnectionSocketFactory) socketFactory;
    try {
      Object hostnameVerifier = FieldUtils.readField(sslSocketFactory, "hostnameVerifier", true);
      assertNotNull("sslSocketFactory has null hostnameVerifier", hostnameVerifier);
      assertEquals("sslSocketFactory does not have expected hostnameVerifier impl",
                   expected, hostnameVerifier.getClass());
    } catch (IllegalAccessException e) {
      throw new AssertionError("Unexpected access error reading hostnameVerifier field", e);
    }
  }

