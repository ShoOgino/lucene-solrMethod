  @Test
  public void testNestedFacetsOfMixedTypes() throws Exception {
    final String subfacetName = "avg_price_for_cat";

    final TermsFacetMap categoriesFacet = new TermsFacetMap("cat")
        .setLimit(3)
        .withStatSubFacet(subfacetName, "avg(price)");
    final JsonQueryRequest request = new JsonQueryRequest()
        .setQuery("*:*")
        .withFacet("top_cats", categoriesFacet);

    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);

    assertEquals(0, response.getStatus());
    final SolrDocumentList returnedDocs = response.getResults();
    assertEquals(NUM_TECHPRODUCTS_DOCS, returnedDocs.getNumFound());
    assertEquals(10, returnedDocs.size());
    final NamedList<Object> rawResponse = response.getResponse();
    // Test top level facets
    assertHasFacetWithBucketValues(rawResponse,"top_cats", new FacetBucket("electronics",NUM_ELECTRONICS),
        new FacetBucket("currency", NUM_CURRENCY), new FacetBucket("memory", NUM_MEMORY));
    // Test subfacet values for each top-level facet bucket
    final List<NamedList<Object>> topLevelFacetResponse = (List<NamedList<Object>>) rawResponse.findRecursive("facets", "top_cats", "buckets");
    final NamedList<Object> electronicsSubFacet = topLevelFacetResponse.get(0);
    assertFacetResponseHasStatFacetWithValue(electronicsSubFacet, subfacetName, 252.02909261530095);
    final NamedList<Object> currencySubfacet = topLevelFacetResponse.get(1);
    assertFacetResponseHasStatFacetWithValue(currencySubfacet, subfacetName, 0.0);
    final NamedList<Object> memorySubfacet = topLevelFacetResponse.get(2);
    assertFacetResponseHasStatFacetWithValue(memorySubfacet, subfacetName, 129.99499893188477);
  }

