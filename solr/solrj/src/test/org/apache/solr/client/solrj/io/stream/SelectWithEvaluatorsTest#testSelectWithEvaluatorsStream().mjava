  @Test
  public void testSelectWithEvaluatorsStream() throws Exception {

    new UpdateRequest()
        .add(id, "1", "a_s", "foo", "b_i", "1", "c_d", "3.3", "d_b", "true")
        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);

    String clause;
    TupleStream stream;
    List<Tuple> tuples;
    StreamContext streamContext = new StreamContext();
    SolrClientCache solrClientCache = new SolrClientCache();
    streamContext.setSolrClientCache(solrClientCache);
    
    StreamFactory factory = new StreamFactory()
      .withCollectionZkHost("collection1", cluster.getZkServer().getZkAddress())
      .withFunctionName("search", CloudSolrStream.class)
      .withFunctionName("select", SelectStream.class)
      .withFunctionName("add", AddEvaluator.class)
      .withFunctionName("if", IfThenElseEvaluator.class)
      .withFunctionName("gt", GreaterThanEvaluator.class)
      ;
    try {
      // Basic test
      clause = "select("
          + "id,"
          + "add(b_i,c_d) as result,"
          + "search(collection1, q=*:*, fl=\"id,a_s,b_i,c_d,d_b\", sort=\"id asc\")"
          + ")";
      stream = factory.constructStream(clause);
      stream.setStreamContext(streamContext);
      tuples = getTuples(stream);
      assertFields(tuples, "id", "result");
      assertNotFields(tuples, "a_s", "b_i", "c_d", "d_b");
      assertEquals(1, tuples.size());
      assertDouble(tuples.get(0), "result", 4.3);
      assertEquals(4.3, tuples.get(0).get("result"));
    } finally {
      solrClientCache.close();
    }
  }

