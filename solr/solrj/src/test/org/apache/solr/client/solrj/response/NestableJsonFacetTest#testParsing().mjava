  @Test
  public void testParsing() {
    NamedList<Object> list = new NamedList<>();
    list.add("count", 12);
    NamedList<Object> buckets = new NamedList<Object>() {{
      add("val", "Nike");
    }};
    NamedList<Object> vals = new NamedList<Object>() {{
      add("numBuckets", 10);
      add("allBuckets", new NamedList<Object>(){{
        add("count", 12);
      }});
      add("before", new NamedList<Object>(){{
        add("count", 1);
      }});
      add("after", new NamedList<Object>(){{
        add("count", 2);
      }});
      add("between", new NamedList<Object>(){{
        add("count", 9);
      }});
    }};
    vals.add("buckets", Collections.singletonList(buckets));
    list.add("test", vals);
    NestableJsonFacet facet = new NestableJsonFacet(list);

    assertEquals(12L, facet.getCount());
    assertEquals(9L, facet.getBucketBasedFacets("test").getBetween());
    list.clear();

    list.add("count", 12L);
    buckets = new NamedList<Object>() {{
      add("val", "Nike");
    }};
    vals = new NamedList<Object>() {{
      add("numBuckets", 10L);
      add("allBuckets", new NamedList<Object>(){{
        add("count", 12L);
      }});
      add("before", new NamedList<Object>(){{
        add("count", 1L);
      }});
      add("after", new NamedList<Object>(){{
        add("count", 2L);
      }});
      add("between", new NamedList<Object>(){{
        add("count", 9L);
      }});
    }};
    vals.add("buckets", Collections.singletonList(buckets));
    list.add("test", vals);
    facet = new NestableJsonFacet(list);
    assertEquals(12L, facet.getCount());
    assertEquals(2L, facet.getBucketBasedFacets("test").getAfter());
  }

