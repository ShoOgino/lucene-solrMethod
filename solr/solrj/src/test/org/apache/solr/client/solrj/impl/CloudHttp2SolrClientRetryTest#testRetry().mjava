  @Test
  public void testRetry() throws Exception {
    String collectionName = "testRetry";
    try (CloudHttp2SolrClient solrClient = new CloudHttp2SolrClient.Builder(Collections.singletonList(cluster.getZkServer().getZkAddress()), Optional.empty()).build()) {
      CollectionAdminRequest.createCollection(collectionName, 1, 1)
          .process(solrClient);

      solrClient.add(collectionName, new SolrInputDocument("id", "1"));

      ModifiableSolrParams params = new ModifiableSolrParams();
      params.set(CommonParams.QT, "/admin/metrics");
      String updateRequestCountKey = "solr.core.testRetry.shard1.replica_n1:UPDATE./update.requestTimes:count";
      params.set("key", updateRequestCountKey);
      params.set("indent", "true");

      QueryResponse response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);
      NamedList<Object> namedList = response.getResponse();
      System.out.println(namedList);
      @SuppressWarnings({"rawtypes"})
      NamedList metrics = (NamedList) namedList.get("metrics");
      assertEquals(1L, metrics.get(updateRequestCountKey));

      TestInjection.failUpdateRequests = "true:100";
      try {
        expectThrows(BaseCloudSolrClient.RouteException.class,
            "Expected an exception on the client when failure is injected during updates", () -> {
              solrClient.add(collectionName, new SolrInputDocument("id", "2"));
            });
      } finally {
        TestInjection.reset();
      }

      response = solrClient.query(collectionName, params, SolrRequest.METHOD.GET);
      namedList = response.getResponse();
      System.out.println(namedList);
      metrics = (NamedList) namedList.get("metrics");
      assertEquals(2L, metrics.get(updateRequestCountKey));
    }
  }

