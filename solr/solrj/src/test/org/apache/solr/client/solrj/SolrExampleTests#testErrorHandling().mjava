  @Test
  public void testErrorHandling() throws Exception
  {    
    SolrClient client = getSolrClient();

    SolrQuery query = new SolrQuery();
    query.set(CommonParams.QT, "/analysis/field");
    query.set(AnalysisParams.FIELD_TYPE, "pint");
    query.set(AnalysisParams.FIELD_VALUE, "ignore_exception");
    SolrException ex = expectThrows(SolrException.class, () -> client.query(query));
    assertEquals(400, ex.code());
    assertThat(ex.getMessage(), containsString("Invalid Number: ignore_exception"));

    //the df=text here is a kluge for the test to supply a default field in case there is none in schema.xml
    // alternatively, the resulting assertion could be modified to assert that no default field is specified.
    ex = expectThrows(SolrException.class, () -> client.deleteByQuery( "{!df=text} ??::?? ignore_exception" ));
    assertTrue(ex.getMessage().indexOf("??::?? ignore_exception")>0);  // The reason should get passed through
    assertEquals(400, ex.code());

    SolrInputDocument doc = new SolrInputDocument();
    doc.addField("id", "DOCID");
    doc.addField("id", "DOCID2");
    doc.addField("name", "hello");

    if (client instanceof HttpSolrClient) {
      ex = expectThrows(SolrException.class, () -> client.add(doc));
      assertEquals(400, ex.code());
      assertTrue(ex.getMessage().indexOf("contains multiple values for uniqueKey") > 0);
    } else if (client instanceof ErrorTrackingConcurrentUpdateSolrClient) {
      //XXX concurrentupdatesolrserver reports errors differently
      ErrorTrackingConcurrentUpdateSolrClient concurrentClient = (ErrorTrackingConcurrentUpdateSolrClient) client;
      concurrentClient.lastError = null;
      concurrentClient.add(doc);
      concurrentClient.blockUntilFinished();
      assertNotNull("Should throw exception!", concurrentClient.lastError);
      assertEquals("Unexpected exception type", 
          RemoteSolrException.class, concurrentClient.lastError.getClass());
      assertTrue("Unexpected exception message: " + concurrentClient.lastError.getMessage(), 
          concurrentClient.lastError.getMessage().contains("Remote error message: Document contains multiple values for uniqueKey"));
    } else {
      if (log.isInfoEnabled()) {
        log.info("Ignoring update test for client: {}", client.getClass().getName());
      }
    }
  }

