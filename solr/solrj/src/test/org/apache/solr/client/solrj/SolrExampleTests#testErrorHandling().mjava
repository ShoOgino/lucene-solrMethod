  @Test
  public void testErrorHandling() throws Exception
  {    
    SolrServer server = getSolrServer();

    SolrQuery query = new SolrQuery();
    query.set(CommonParams.QT, "/analysis/field");
    query.set(AnalysisParams.FIELD_TYPE, "int");
    query.set(AnalysisParams.FIELD_VALUE, "ignore_exception");
    try {
      server.query( query );
      Assert.fail("should have a number format exception");
    }
    catch(SolrException ex) {
      assertEquals(400, ex.code());
      assertEquals("Invalid Number: ignore_exception", ex.getMessage());  // The reason should get passed through
    }
    catch(Throwable t) {
      t.printStackTrace();
      Assert.fail("should have thrown a SolrException! not: "+t);
    }
    
    try {
      //the df=text here is a kluge for the test to supply a default field in case there is none in schema.xml
      // alternatively, the resulting assertion could be modified to assert that no default field is specified.
      server.deleteByQuery( "{!df=text} ??::?? ignore_exception" ); // query syntax error
      Assert.fail("should have a number format exception");
    }
    catch(SolrException ex) {
      assertEquals(400, ex.code());
      assertTrue(ex.getMessage().indexOf("??::?? ignore_exception")>0);  // The reason should get passed through
    }
    catch(Throwable t) {
      t.printStackTrace();
      Assert.fail("should have thrown a SolrException! not: "+t);

    }
    SolrInputDocument doc = new SolrInputDocument();
    doc.addField("id", "DOCID", 1.0f);
    doc.addField("id", "DOCID2", 1.0f);
    doc.addField("name", "hello", 1.0f);

    if (server instanceof HttpSolrServer) {
      try {
        server.add(doc);
        fail("Should throw exception!");
      } catch (SolrException ex) {
        assertEquals(400, ex.code());
        assertTrue(ex.getMessage().indexOf(
            "contains multiple values for uniqueKey") > 0); // The reason should get passed through
      } catch (Throwable t) {
        Assert.fail("should have thrown a SolrException! not: " + t);
      }
    } else if (server instanceof ConcurrentUpdateSolrServer) {
      //XXX concurrentupdatesolrserver reports errors differently
      ConcurrentUpdateSolrServer cs = (ConcurrentUpdateSolrServer) server;
      Field field = getCUSSExceptionField(cs);
      field.set(cs,  null);
      cs.add(doc);
      cs.blockUntilFinished();
      Throwable lastError = (Throwable)field.get(cs);
      assertNotNull("Should throw exception!", lastError); //XXX 
    } else {
      log.info("Ignorig update test for client:" + server.getClass().getName());
    }
  }

