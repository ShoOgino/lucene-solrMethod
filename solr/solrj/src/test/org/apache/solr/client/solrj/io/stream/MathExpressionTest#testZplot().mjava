  @Test
  public void testZplot() throws Exception {

    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+"/"+COLLECTIONORALIAS;



    String cexpr = "let(a=array(1,2,3,4)," +
        "        b=array(10,11,12,13),"+
        "        zplot(x=a, y=b))";

    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();
    paramsLoc.set("expr", cexpr);
    paramsLoc.set("qt", "/stream");
    TupleStream solrStream = new SolrStream(url, paramsLoc);
    StreamContext context = new StreamContext();
    solrStream.setStreamContext(context);
    List<Tuple> tuples = getTuples(solrStream);
    assertTrue(tuples.size() == 4);
    Tuple out = tuples.get(0);

    assertEquals(out.getDouble("x").doubleValue(), 1.0, 0.0);
    assertEquals(out.getDouble("y").doubleValue(), 10.0, 0.0);

    out = tuples.get(1);

    assertEquals(out.getDouble("x").doubleValue(), 2.0, 0.0);
    assertEquals(out.getDouble("y").doubleValue(), 11.0, 0.0);

    out = tuples.get(2);

    assertEquals(out.getDouble("x").doubleValue(), 3.0, 0.0);
    assertEquals(out.getDouble("y").doubleValue(), 12.0, 0.0);

    out = tuples.get(3);

    assertEquals(out.getDouble("x").doubleValue(), 4.0, 0.0);
    assertEquals(out.getDouble("y").doubleValue(), 13.0, 0.0);


    cexpr = "let(b=array(10,11,12,13),"+
        "        zplot(y=b))";

    paramsLoc = new ModifiableSolrParams();
    paramsLoc.set("expr", cexpr);
    paramsLoc.set("qt", "/stream");
    solrStream = new SolrStream(url, paramsLoc);
    context = new StreamContext();
    solrStream.setStreamContext(context);
    tuples = getTuples(solrStream);
    assertTrue(tuples.size() == 4);
    out = tuples.get(0);

    assertEquals(out.getDouble("x").doubleValue(), 0.0, 0.0);
    assertEquals(out.getDouble("y").doubleValue(), 10.0, 0.0);

    out = tuples.get(1);

    assertEquals(out.getDouble("x").doubleValue(), 1.0, 0.0);
    assertEquals(out.getDouble("y").doubleValue(), 11.0, 0.0);

    out = tuples.get(2);

    assertEquals(out.getDouble("x").doubleValue(), 2.0, 0.0);
    assertEquals(out.getDouble("y").doubleValue(), 12.0, 0.0);

    out = tuples.get(3);

    assertEquals(out.getDouble("x").doubleValue(), 3.0, 0.0);
    assertEquals(out.getDouble("y").doubleValue(), 13.0, 0.0);

    cexpr = "zplot(dist=binomialDistribution(10, .50))";

    paramsLoc = new ModifiableSolrParams();
    paramsLoc.set("expr", cexpr);
    paramsLoc.set("qt", "/stream");
    solrStream = new SolrStream(url, paramsLoc);
    context = new StreamContext();
    solrStream.setStreamContext(context);
    tuples = getTuples(solrStream);
    assertEquals(tuples.size(),11);
    long x = tuples.get(5).getLong("x");
    double y = tuples.get(5).getDouble("y");

    assertEquals(x, 5);
    assertEquals(y,     0.24609375000000003, 0);

    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution
    //there are times when tuples are discarded because
    //they contain values with NaN values. This will occur
    //only on the very end of the tails of the normal distribution or other
    //real distributions and doesn't effect the visual quality of the curve very much.
    //But it does effect the reliability of tests.
    //For this reason the loop below is in place to run the test N times looking
    //for the correct number of tuples before asserting the mean.

    int n = 0;
    int limit = 15;
    while(true) {
      cexpr = "zplot(dist=normalDistribution(100, 10))";
      paramsLoc = new ModifiableSolrParams();
      paramsLoc.set("expr", cexpr);
      paramsLoc.set("qt", "/stream");
      solrStream = new SolrStream(url, paramsLoc);
      context = new StreamContext();
      solrStream.setStreamContext(context);
      tuples = getTuples(solrStream);
      //Assert the mean
      if (tuples.size() == 32) {
        double x1 = tuples.get(15).getDouble("x");
        double y1 = tuples.get(15).getDouble("y");
        assertEquals(x1, 100, 10);
        assertEquals(y1, .039, .02);
        break;
      } else {
        ++n;
        if(n == limit) {
          throw new Exception("Reached iterations limit without correct tuple count.");
        }
      }
    }

    cexpr = "let(a=sample(normalDistribution(40, 1.5), 700)," +
        "        b=sample(normalDistribution(40, 1.5), 700)," +
        "        c=transpose(matrix(a, b)),"+
        "        d=kmeans(c, 5),"+
        "        zplot(clusters=d))";

    paramsLoc = new ModifiableSolrParams();
    paramsLoc.set("expr", cexpr);
    paramsLoc.set("qt", "/stream");
    solrStream = new SolrStream(url, paramsLoc);
    context = new StreamContext();
    solrStream.setStreamContext(context);
    tuples = getTuples(solrStream);
    assertTrue(tuples.size() == 700);

    Set clusters = new HashSet();
    for(Tuple tup : tuples) {
      assertNotNull(tup.get("x"));
      assertNotNull(tup.get("y"));
      clusters.add(tup.getString("cluster"));
    }

    assertEquals(clusters.size(), 5);
    assertTrue(clusters.contains("cluster1"));
    assertTrue(clusters.contains("cluster2"));
    assertTrue(clusters.contains("cluster3"));
    assertTrue(clusters.contains("cluster4"));
    assertTrue(clusters.contains("cluster5"));

    cexpr = "let(a=matrix(array(0,1,2,3,4,5,6,7,8,9,10,11), array(10,11,12,13,14,15,16,17,18,19,20,21))," +
        "        zplot(heat=a))";

    paramsLoc = new ModifiableSolrParams();
    paramsLoc.set("expr", cexpr);
    paramsLoc.set("qt", "/stream");
    solrStream = new SolrStream(url, paramsLoc);
    context = new StreamContext();
    solrStream.setStreamContext(context);
    tuples = getTuples(solrStream);
    assertTrue(tuples.size() == 24);
    Tuple tuple = tuples.get(0);
    String xLabel = tuple.getString("x");
    String yLabel = tuple.getString("y");
    Number z = tuple.getLong("z");

    assertEquals(xLabel, "col00");
    assertEquals(yLabel, "row0");
    assertEquals(z.longValue(), 0L);

    tuple = tuples.get(1);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "col01");
    assertEquals(yLabel, "row0");
    assertEquals(z.longValue(), 1L);

    tuple = tuples.get(2);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "col02");
    assertEquals(yLabel, "row0");
    assertEquals(z.longValue(), 2L);

    tuple = tuples.get(12);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "col00");
    assertEquals(yLabel, "row1");
    assertEquals(z.longValue(), 10L);


    cexpr = "let(a=transpose(matrix(array(0, 1, 2, 3, 4, 5, 6, 7,8,9,10,11), " +
        "                           array(10,11,12,13,14,15,16,17,18,19,20,21)))," +
        "        zplot(heat=a))";

    paramsLoc = new ModifiableSolrParams();
    paramsLoc.set("expr", cexpr);
    paramsLoc.set("qt", "/stream");
    solrStream = new SolrStream(url, paramsLoc);
    context = new StreamContext();
    solrStream.setStreamContext(context);
    tuples = getTuples(solrStream);
    assertTrue(tuples.size() == 24);
    tuple = tuples.get(0);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "col0");
    assertEquals(yLabel, "row00");
    assertEquals(z.longValue(), 0L);

    tuple = tuples.get(1);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "col1");
    assertEquals(yLabel, "row00");
    assertEquals(z.longValue(), 10L);

    tuple = tuples.get(2);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "col0");
    assertEquals(yLabel, "row01");
    assertEquals(z.longValue(), 1L);

    tuple = tuples.get(12);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "col0");
    assertEquals(yLabel, "row06");
    assertEquals(z.longValue(), 6L);

    cexpr = "let(a=matrix(array(0, 1, 2, 3, 4, 5, 6, 7,8,9,10,11), " +
        "                 array(10,11,12,13,14,15,16,17,18,19,20,21))," +
        "        b=setRowLabels(a, array(\"blah1\", \"blah2\")),"+
        "        c=setColumnLabels(b, array(\"rah1\", \"rah2\", \"rah3\", \"rah4\", \"rah5\", \"rah6\", \"rah7\", \"rah8\", \"rah9\", \"rah10\", \"rah11\", \"rah12\")),"+
        "        zplot(heat=c))";

    paramsLoc = new ModifiableSolrParams();
    paramsLoc.set("expr", cexpr);
    paramsLoc.set("qt", "/stream");
    solrStream = new SolrStream(url, paramsLoc);
    context = new StreamContext();
    solrStream.setStreamContext(context);
    tuples = getTuples(solrStream);
    assertTrue(tuples.size() == 24);
    tuple = tuples.get(0);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "rah1");
    assertEquals(yLabel, "blah1");
    assertEquals(z.longValue(), 0L);

    tuple = tuples.get(1);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "rah2");
    assertEquals(yLabel, "blah1");
    assertEquals(z.longValue(), 1L);

    tuple = tuples.get(2);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "rah3");
    assertEquals(yLabel, "blah1");
    assertEquals(z.longValue(), 2L);

    tuple = tuples.get(12);
    xLabel = tuple.getString("x");
    yLabel = tuple.getString("y");
    z = tuple.getLong("z");

    assertEquals(xLabel, "rah1");
    assertEquals(yLabel, "blah2");
    assertEquals(z.longValue(), 10L);
  }

