  @Test
  public void testFacetCanBeRepresentedByMapWriter() throws Exception {
    final MapWriter categoriesFacet = new MapWriter() {
      @Override
      public void writeMap(EntryWriter ew) throws IOException {
        ew.put("type", "terms");
        ew.put("field", "cat");
        ew.put("limit", 3);
      }
    };
    final JsonQueryRequest request = new JsonQueryRequest()
        .setQuery("*:*")
        .withFacet("top_cats", categoriesFacet);

    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);

    assertEquals(0, response.getStatus());
    final SolrDocumentList returnedDocs = response.getResults();
    assertEquals(NUM_TECHPRODUCTS_DOCS, returnedDocs.getNumFound());
    assertEquals(10, returnedDocs.size());
    final NamedList<Object> rawResponse = response.getResponse();
    assertHasFacetWithBucketValues(rawResponse,"top_cats",
        new FacetBucket("electronics",NUM_ELECTRONICS),
        new FacetBucket("currency", NUM_CURRENCY),
        new FacetBucket("memory", NUM_MEMORY));
  }

