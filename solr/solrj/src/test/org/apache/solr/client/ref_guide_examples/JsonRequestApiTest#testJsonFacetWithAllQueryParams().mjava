  @Test
  public void testJsonFacetWithAllQueryParams() throws Exception {
    SolrClient solrClient = cluster.getSolrClient();

    // This subtest has its own scope so that it and its twin below can can have identical variable declarations (as they appear as separate snippets in the ref-guide)
    {
      //tag::solrj-json-facet-all-query-params[]
      final ModifiableSolrParams params = new ModifiableSolrParams();
      final SolrQuery query = new SolrQuery("*:*");
      query.setRows(1);
      query.setParam("json.facet.avg_price", "\"avg(price)\"");
      query.setParam("json.facet.top_cats", "{type:terms,field:\"cat\",limit:3}");
      QueryResponse queryResponse = solrClient.query(COLLECTION_NAME, query);
      //end::solrj-json-facet-all-query-params[]

      NestableJsonFacet topLevelFacet = queryResponse.getJsonFacetingResponse();
      assertResponseFoundNumDocs(queryResponse, 1);
      assertHasFacetWithBucketValues(topLevelFacet, "top_cats",
          new FacetBucket("electronics", 12),
          new FacetBucket("currency", 4),
          new FacetBucket("memory", 3));
    }

    {
      //tag::solrj-json-facet-all-query-params-equivalent[]
      final JsonQueryRequest jsonQueryRequest = new JsonQueryRequest()
          .setQuery("*:*")
          .setLimit(1)
          .withStatFacet("avg_price", "avg(price)")
          .withFacet("top_cats", new TermsFacetMap("cat").setLimit(3));
      QueryResponse queryResponse = jsonQueryRequest.process(solrClient, COLLECTION_NAME);
      //end::solrj-json-facet-all-query-params-equivalent[]

      NestableJsonFacet topLevelFacet = queryResponse.getJsonFacetingResponse();
      assertResponseFoundNumDocs(queryResponse, 1);
      assertHasFacetWithBucketValues(topLevelFacet, "top_cats",
          new FacetBucket("electronics", 12),
          new FacetBucket("currency", 4),
          new FacetBucket("memory", 3));
    }
  }

