  @SuppressWarnings({"unchecked", "rawtypes"})
  public void testMoveReplica() {
    String autoscaleJson = "{" +
        "      'cluster-policy':[" +
        "      {'cores':'<10','node':'#ANY'}," +
        "      {'replica':'<3','shard':'#EACH','node':'#ANY'}," +
        "      {'nodeRole':'overseer','replica':'0'}]," +
        "      'cluster-preferences':[" +
        "      {'minimize':'cores', 'precision':3}," +
        "      {'maximize':'freedisk','precision':100}]}";

    if(useNodeset){
      autoscaleJson = "{" +
          "      'cluster-policy':[" +
          "      {'cores':'<10','node':'#ANY'}," +
          "      {'replica':'<3','shard':'#EACH','node':'#ANY'}," +
          "      {nodeset: {'nodeRole':'overseer'},'replica':'0'}]," +
          "      'cluster-preferences':[" +
          "      {'minimize':'cores', 'precision':3}," +
          "      {'maximize':'freedisk','precision':100}]}";

    }

    Map replicaInfoMap = (Map) Utils.fromJSONString("{ '127.0.0.1:60099_solr':{}," +
        " '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':[" +
        "      {'core_node1':{}}," +
        "      {'core_node2':{}}]}}}");
    Map m = (Map) Utils.getObjectByPath(replicaInfoMap, false, "127.0.0.1:60089_solr/compute_plan_action_test");
    m.put("shard1", Arrays.asList(
        new Replica("core_node1", "127.0.0.1:60089_solr", "compute_plan_action_test", "shard1", "core_node1",
            Replica.State.ACTIVE, Replica.Type.NRT, Collections.emptyMap()),
        new Replica("core_node2", "127.0.0.1:60089_solr", "compute_plan_action_test", "shard1", "core_node2",
            Replica.State.ACTIVE, Replica.Type.NRT, Collections.emptyMap())));

    @SuppressWarnings({"unchecked", "rawtypes"})
    Map<String, Map<String, Object>> tagsMap = (Map) Utils.fromJSONString("{" +
        "      '127.0.0.1:60099_solr':{" +
        "        'cores':0," +
        "            'freedisk':918005641216}," +
        "      '127.0.0.1:60089_solr':{" +
        "        'cores':2," +
        "            'freedisk':918005641216}}");

    @SuppressWarnings({"unchecked"})
    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoscaleJson));
    Policy.Session session = policy.createSession(new DelegatingCloudManager(null) {
      @Override
      @SuppressWarnings({"unchecked"})
      public ClusterStateProvider getClusterStateProvider() {
        return new DelegatingClusterStateProvider(null) {
          @Override
          public Set<String> getLiveNodes() {
            return replicaInfoMap.keySet();
          }

        };
      }

      @Override
      public NodeStateProvider getNodeStateProvider() {
        return new DelegatingNodeStateProvider(null) {
          @Override
          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {
            return tagsMap.get(node);
          }

          @Override
          @SuppressWarnings({"unchecked"})
          public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {
            return (Map<String, Map<String, List<Replica>>>) replicaInfoMap.get(node);
          }
        };
      }
    });
    Suggester suggester = session.getSuggester(MOVEREPLICA)
        .hint(Hint.TARGET_NODE, "127.0.0.1:60099_solr");
    @SuppressWarnings({"rawtypes"})
    SolrRequest op = suggester.getSuggestion();
    assertNotNull("expect a non null operation", op);
  }

