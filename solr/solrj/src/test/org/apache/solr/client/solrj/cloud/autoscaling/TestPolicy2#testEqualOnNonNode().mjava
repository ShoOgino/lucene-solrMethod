  public void testEqualOnNonNode() {
    List<Map> l = (List<Map>) loadFromResource("testEqualOnNonNode.json");
    String autoScalingjson = "{cluster-policy:[" +
        "    { replica : '<3' , shard : '#EACH', sysprop.zone: [east,west] } ]," +
        "  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}";
    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));
    Policy.Session session = policy.createSession(createCloudManager(l.get(0), l.get(1)));
    List<Violation> violations = session.getViolations();
    assertEquals(1, violations.size());
    assertEquals(3, violations.get(0).getViolatingReplicas().size());
    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);
    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {
      assertEquals("shard2", r.replicaInfo.getShard());
    }

    l = (List<Map>) loadFromResource("testEqualOnNonNode.json");
    autoScalingjson = "{cluster-policy:[" +
        "    { replica : '<3' , shard : '#EACH', sysprop.zone: '#EACH' } ]," +
        "  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}";
    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));
    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));
    violations = session.getViolations();
    assertEquals(1, violations.size());
    assertEquals(3, violations.get(0).getViolatingReplicas().size());
    assertEquals(1.0, violations.get(0).replicaCountDelta, 0.01);
    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {
      assertEquals("shard2", r.replicaInfo.getShard());
    }
    l = (List<Map>) loadFromResource("testEqualOnNonNode.json");
    autoScalingjson = "{cluster-policy:[" +
        "    { replica : '#EQUAL' , node: '#ANY' } ]," +
        "  'cluster-preferences':[{ minimize : cores},{maximize : freedisk, precision : 50}]}";
    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));
    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));
    violations = session.getViolations();
    List<Suggester.SuggestionInfo> suggestions = null;
    assertEquals(2, violations.size());
    for (Violation violation : violations) {
      if (violation.node.equals("node1")) {
        assertEquals(1.0d, violation.replicaCountDelta, 0.001);
        assertEquals(3, violation.getViolatingReplicas().size());
      } else if (violation.node.equals("node5")) {
        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);
        assertEquals(0, violation.getViolatingReplicas().size());
      } else {
        fail();
      }
    }
    l = (List<Map>) loadFromResource("testEqualOnNonNode.json");
    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson))
        , createCloudManager(l.get(0), l.get(1)));
    assertEquals(1, suggestions.size());
    String repName = (String) suggestions.get(0)._get("operation/command/move-replica/replica", null);

    AtomicBoolean found = new AtomicBoolean(false);
    session.getNode("node1").forEachReplica(replicaInfo -> {
      if (replicaInfo.getName().equals(repName)) {
        found.set(true);
      }
    });
    assertTrue(found.get());

    l = (List<Map>) loadFromResource("testEqualOnNonNode.json");
    autoScalingjson = "{cluster-policy:[" +
        "    { cores : '#EQUAL' , node: '#ANY' } ]," +
        "  'cluster-preferences':[{ minimize : cores},{minimize : freedisk, precision : 50}]}";
    policy = new Policy((Map<String, Object>) Utils.fromJSONString(autoScalingjson));
    session = policy.createSession(createCloudManager(l.get(0), l.get(1)));
    violations = session.getViolations();
    assertEquals(2, violations.size());
    for (Violation violation : violations) {
      if(violation.node.equals("node1")) {
        assertEquals(1.0d, violation.replicaCountDelta, 0.001);
        assertEquals(3, violation.getViolatingReplicas().size());
      } else if(violation.node.equals("node5")){
        assertEquals(-1.0d, violation.replicaCountDelta, 0.001);
        assertEquals(0, violation.getViolatingReplicas().size());
      } else {
        fail();
      }

    }
    l = (List<Map>) loadFromResource("testEqualOnNonNode.json");
    suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson)),
        createCloudManager(l.get(0), l.get(1)));
    assertEquals(1, suggestions.size());
    assertEquals("node5", suggestions.get(0)._get("operation/command/move-replica/targetNode", null));

    String rName = (String) suggestions.get(0)._get("operation/command/move-replica/replica", null);

    found.set(false);
    session.getNode("node1").forEachReplica(replicaInfo -> {
      if (replicaInfo.getName().equals(rName)) {
        found.set(true);
      }
    });
    assertTrue(found.get());

  }

