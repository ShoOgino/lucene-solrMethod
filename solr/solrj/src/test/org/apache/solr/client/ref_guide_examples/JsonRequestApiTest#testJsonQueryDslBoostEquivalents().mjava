  @Test
  public void testJsonQueryDslBoostEquivalents() throws Exception {
    SolrClient solrClient = cluster.getSolrClient();
    QueryResponse[] responses = new QueryResponse[3];

    {
      //tag::solrj-ipod-query-boosted-basic[]
      final SolrQuery query = new SolrQuery("{!boost b=log(popularity) v=\'{!lucene df=name}iPod\'}");
      final QueryResponse response = solrClient.query(COLLECTION_NAME, query);
      //end::solrj-ipod-query-boosted-basic[]

      responses[0] = response;
    }

    {
      //tag::solrj-ipod-query-boosted-dsl-1[]
      final Map<String, Object> queryTopLevel = new HashMap<>();
      final Map<String, Object> boostQuery = new HashMap<>();
      queryTopLevel.put("boost", boostQuery);
      boostQuery.put("b", "log(popularity)");
      boostQuery.put("query", "{!lucene df=name}iPod");
      final JsonQueryRequest query = new JsonQueryRequest()
          .setQuery(queryTopLevel);
      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);
      //end::solrj-ipod-query-boosted-dsl-1[]

      responses[1] = response;
    }

    {
      //tag::solrj-ipod-query-boosted-dsl-2[]
      final Map<String, Object> queryTopLevel = new HashMap<>();
      final Map<String, Object> boostProperties = new HashMap<>();
      final Map<String, Object> luceneTopLevel = new HashMap<>();
      final Map<String, Object> luceneProperties = new HashMap<>();
      queryTopLevel.put("boost", boostProperties);
      boostProperties.put("b", "log(popularity)");
      boostProperties.put("query", luceneTopLevel);
      luceneTopLevel.put("lucene", luceneProperties);
      luceneProperties.put("df", "name");
      luceneProperties.put("query", "iPod");
      final JsonQueryRequest query = new JsonQueryRequest()
          .setQuery(queryTopLevel);
      final QueryResponse response = query.process(solrClient, COLLECTION_NAME);
      //end::solrj-ipod-query-boosted-dsl-2[]

      responses[2] = response;
    }

    for (QueryResponse response : responses) {
      assertResponseFoundNumDocs(response, 3);
      assertEquals("MA147LL/A", response.getResults().get(0).get("id"));
      assertEquals("F8V7067-APL-KIT", response.getResults().get(1).get("id"));
      assertEquals("IW-02", response.getResults().get(2).get("id"));
    }
  }

