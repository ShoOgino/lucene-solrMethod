  @Test
  public void testFacetWithDomainWidenedUsingExcludeTagsToIgnoreFilters() throws Exception {
    final String jsonBody = String.join("\n","{",
        "  'query': '*:*',",
        "  'filter': {'#on_shelf': 'inStock:true'},",
        "  'facet': {",
        "    'in_stock_only': {",
        "      'type': 'terms',",
        "      'field': 'cat',",
        "      'limit': 2",
        "    }",
        "    'all': {",
        "      'type': 'terms',",
        "      'field': 'cat',",
        "      'limit': 2,",
        "      'domain': {",
        "        'excludeTags': 'on_shelf'",
        "      }",
        "    }",
        "  }",
        "}");
    final DirectJsonQueryRequest request = new DirectJsonQueryRequest(jsonBody);
    QueryResponse response = request.process(cluster.getSolrClient(), COLLECTION_NAME);

    assertEquals(0, response.getStatus());
    final SolrDocumentList returnedDocs = response.getResults();
    assertEquals(NUM_IN_STOCK, returnedDocs.getNumFound());
    assertEquals(10, returnedDocs.size());
    final NamedList<Object> rawResponse = response.getResponse();

    assertHasFacetWithBucketValues(rawResponse,"in_stock_only",
        new FacetBucket("electronics",8),
        new FacetBucket("currency", 4));
    assertHasFacetWithBucketValues(rawResponse,"all",
        new FacetBucket("electronics",12),
        new FacetBucket("currency", 4));
  }

