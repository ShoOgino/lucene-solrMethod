  public void testAutoscalingPreferencesUsedWithNoPolicy() throws IOException, InterruptedException {
    String dataproviderdata = "{" +
        "  'liveNodes': [" +
        "    'node1:8983'," +
        "    'node2:8984'," +
        "    'node3:8985'" +
        "  ]," +
        "  'replicaInfo': {" +
        "    'node1:8983': {" +
        "      'c1': {" +
        "        's1': [" +
        "          {'r1': {'type': 'NRT', 'INDEX.sizeInGB':'1100'}}," +
        "          {'r2': {'type': 'NRT'}}" +
        "        ]," +
        "        's2': [" +
        "          {'r1': {'type': 'NRT', 'INDEX.sizeInGB':'1100'}}," +
        "          {'r2': {'type': 'NRT'}}" +
        "        ]" +
        "      }" +
        "    }" +
        "  }," +
        "  'nodeValues': {" +
        "    'node1:8983': {" +
        "      'cores': 4," +
        "      'freedisk': 300," +
        "      'totaldisk': 4700," +
        "      'port': 8983" +
        "    }," +
        "    'node2:8984': {" +
        "      'cores': 0," +
        "      'freedisk': 1000," +
        "      'totaldisk': 1200," +
        "      'port': 8984" +
        "    }," +
        "    'node3:8985': {" +
        "      'cores': 0," +
        "      'freedisk': 1651," +
        "      'totaldisk': 1700," +
        "      'port': 8985" +
        "    }" +
        "  }," +
        "  'autoscalingJson': {" +
        "     'cluster-preferences': [" +
        "       { 'maximize': 'freedisk'}," +
        "       { 'minimize': 'cores', 'precision': 3}" +
        "     ]" +
        "   }" +
        "}";

    String clusterState = "{\n" +
        "  \"c1\" : {\n" +
        "    \"router\":{\"name\":\"compositeId\"},\n" +
        "    \"maxShardsPerNode\":-1,\n" +
        "    \"shards\" : {\n" +
        "      \"s1\" :  {\n" +
        "        \"replicas\" : {\n" +
        "          \"r1\" : {\n" +
        "            \"type\" : \"NRT\",\n" +
        "            \"node_name\" : \"node1:8983\",\n" +
        "            \"state\" : \"active\",\n" +
        "            \"leader\" : \"true\"\n" +
        "          },\n" +
        "          \"r2\" : {\n" +
        "            \"type\" : \"NRT\",\n" +
        "            \"node_name\" : \"node1:8983\",\n" +
        "            \"state\" : \"active\"\n" +
        "          }\n" +
        "        }\n" +
        "      },\n" +
        "      \"s2\" : {\n" +
        "        \"replicas\" : {\n" +
        "          \"r1\" : {\n" +
        "            \"type\" : \"NRT\",\n" +
        "            \"node_name\" : \"node1:8983\",\n" +
        "            \"state\" : \"active\",\n" +
        "            \"leader\" : \"true\"\n" +
        "          },\n" +
        "          \"r2\" : {\n" +
        "            \"type\" : \"NRT\",\n" +
        "            \"node_name\" : \"node1:8983\",\n" +
        "            \"state\" : \"active\"\n" +
        "          }\n" +
        "        }\n" +
        "      }\n" +
        "    }\n" +
        "  }\n" +
        "}";

    Map m = (Map) Utils.fromJSONString(dataproviderdata);

    Map replicaInfo = (Map) m.get("replicaInfo");
    replicaInfo.forEach((node, val) -> {
      Map m1 = (Map) val;
      m1.forEach((coll, val2) -> {
        Map m2 = (Map) val2;
        m2.forEach((shard, val3) -> {
          List l3 = (List) val3;
          for (int i = 0; i < l3.size(); i++) {
            Object o = l3.get(i);
            Map m3 = (Map) o;
            String name = m3.keySet().iterator().next().toString();
            m3 = (Map) m3.get(name);
            Replica.Type type = Replica.Type.get((String) m3.get("type"));
            l3.set(i, new ReplicaInfo(name, name
                , coll.toString(), shard.toString(), type, (String) node, m3));
          }
        });

      });
    });
    AutoScalingConfig asc = m.containsKey("autoscalingJson") ? new AutoScalingConfig((Map<String, Object>) m.get("autoscalingJson")) : null;
    DelegatingCloudManager cloudManager = new DelegatingCloudManager(null) {

      @Override
      public DistribStateManager getDistribStateManager() {
        return new DelegatingDistribStateManager(null) {
          @Override
          public AutoScalingConfig getAutoScalingConfig() {
            return asc;
          }
        };
      }

      @Override
      public ClusterStateProvider getClusterStateProvider() {
        return new DelegatingClusterStateProvider(null) {
          @Override
          public Set<String> getLiveNodes() {
            return new HashSet<>((Collection<String>) m.get("liveNodes"));
          }

          @Override
          public ClusterState getClusterState() throws IOException {
            return ClusterState.load(0, clusterState.getBytes(Charset.forName("UTF-8")), getLiveNodes(), ZkStateReader.getCollectionPath("c1"));
          }
        };
      }

      @Override
      public NodeStateProvider getNodeStateProvider() {
        return new DelegatingNodeStateProvider(null) {
          @Override
          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {
            Map<String, Object> result = (Map<String, Object>) Utils.getObjectByPath(m, false, Arrays.asList("nodeValues", node));
            return result == null ? Collections.emptyMap() : result;
          }

          @Override
          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {
            Map<String, Map<String, List<ReplicaInfo>>> result = (Map<String, Map<String, List<ReplicaInfo>>>) Utils.getObjectByPath(m, false, Arrays.asList("replicaInfo", node));
            return result == null ? Collections.emptyMap() : result;
          }
        };
      }
    };

    ZkNodeProps message = new ZkNodeProps(
        Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),
        COLLECTION_PROP, "c1",
        SHARD_ID_PROP, "s1",
        REPLICA_TYPE, Replica.Type.NRT.toString()
    );

    Assign.AssignRequest assignRequest = new Assign.AssignRequestBuilder()
        .forCollection("c1")
        .forShard(Collections.singletonList("s1"))
        .assignNrtReplicas(1)
        .build();
    Assign.AssignStrategyFactory assignStrategyFactory = new Assign.AssignStrategyFactory(cloudManager);
    ClusterState state = cloudManager.getClusterStateProvider().getClusterState();
    DocCollection collection = state.getCollection("c1");
    Assign.AssignStrategy assignStrategy = assignStrategyFactory.create(state, collection);
    List<ReplicaPosition> replicaPositions = assignStrategy.assign(cloudManager, assignRequest);

    assertEquals(1, replicaPositions.size());
    ReplicaPosition replicaPosition = replicaPositions.get(0);
    assertEquals("node3:8985", replicaPosition.node); // only node3:8985 has enough space to handle the new replica
    assertEquals("s1", replicaPosition.shard); // sanity check
  }

