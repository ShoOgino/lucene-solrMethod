  @Test
  public void testRawSocket() throws Exception {

    String hostName = "127.0.0.1";
    int port = jetty.getLocalPort();

    Socket socket = new Socket(hostName, port);
    PrintWriter out = new PrintWriter(new OutputStreamWriter(socket.getOutputStream(), "UTF-8"), true);
    // BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
    InputStream in = socket.getInputStream();

    String body = getJsonDocs(100000);
    int bodyLen = body.length();

    // bodyLen *= 10;  // make server wait for more

    char[] whitespace = whitespace(1000000);
    bodyLen += whitespace.length;

    String headers = "POST /solr/collection1/update HTTP/1.1\n" +
        "Host: localhost:" + port + "\n" +
//        "User-Agent: curl/7.43.0\n" +
        "Accept: */*\n" +
        "Content-type:application/json\n" +
        "Content-Length: " + bodyLen + "\n" +
        "Connection: Keep-Alive\n";

    out.write(headers);
    out.write("\n");  // extra newline separates headers from body
    out.write(body);
    out.flush();

    // Now what if I try to write more?  This doesn't seem to throw an exception!
    Thread.sleep(1000);
    out.write(whitespace);  // whitespace
    out.flush();

    String rbody = getResponse(in);  // This will throw a connection reset exception if you try to read past the end of the HTTP response
    log.info("RESPONSE BODY:" + rbody);
    assertTrue(rbody.contains("unknown_field"));

    /***
    // can I reuse now?
    // writing another request doesn't actually throw an exception, but the following read does
    out.write(headers);
    out.write("\n");  // extra newline separates headers from body
    out.write(body);
    out.flush();

    rbody = getResponse(in);
    log.info("RESPONSE BODY:" + rbody);
    assertTrue(rbody.contains("unknown_field"));
    ***/


    IOUtils.closeQuietly(out);
    IOUtils.closeQuietly(in);
    IOUtils.closeQuietly(socket);
  }

