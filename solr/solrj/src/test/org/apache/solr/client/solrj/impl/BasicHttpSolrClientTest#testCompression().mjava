  @Test
  public void testCompression() throws Exception {
    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/debug/foo");
    try {
      SolrQuery q = new SolrQuery("*:*");
      
      // verify request header gets set
      DebugServlet.clear();
      try {
        client.query(q);
      } catch (Throwable t) {}
      assertNull(DebugServlet.headers.get("Accept-Encoding"));
      client.setAllowCompression(true);
      try {
        client.query(q);
      } catch (Throwable t) {}
      assertNotNull(DebugServlet.headers.get("Accept-Encoding"));
      client.setAllowCompression(false);
      try {
        client.query(q);
      } catch (Throwable t) {}
      assertNull(DebugServlet.headers.get("Accept-Encoding"));
    } finally {
      client.shutdown();
    }
    
    // verify server compresses output
    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + "/collection1" +
                              "/select?q=foo&wt=xml");
    get.setHeader("Accept-Encoding", "gzip");
    CloseableHttpClient httpclient = HttpClientUtil.createClient(null);
    HttpEntity entity = null;
    try {
      HttpResponse response = httpclient.execute(get);
      entity = response.getEntity();
      Header ceheader = entity.getContentEncoding();
      assertEquals("gzip", ceheader.getValue());
      
    } finally {
      if(entity!=null) {
        entity.getContent().close();
      }
      httpclient.close();
    }
    
    // verify compressed response can be handled
    client = new HttpSolrClient(jetty.getBaseUrl().toString() + "/collection1");
    try {
      client.setAllowCompression(true);
      SolrQuery q = new SolrQuery("foo");
      QueryResponse response = client.query(q);
      assertEquals(0, response.getStatus());
    } finally {
      client.shutdown();
    }
  }

