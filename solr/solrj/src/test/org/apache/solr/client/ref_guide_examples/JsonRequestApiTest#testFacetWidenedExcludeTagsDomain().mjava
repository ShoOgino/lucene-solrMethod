  @Test
  public void testFacetWidenedExcludeTagsDomain() throws Exception {
    SolrClient solrClient = cluster.getSolrClient();

    //tag::solrj-json-facet-excludetags-domain[]
    final TermsFacetMap inStockFacet = new TermsFacetMap("inStock").setLimit(2);
    final TermsFacetMap allManufacturersFacet = new TermsFacetMap("manu_id_s")
        .setLimit(2)
        .withDomain(new DomainMap().withTagsToExclude("MANU"));
    final JsonQueryRequest request = new JsonQueryRequest()
        .setQuery("cat:electronics")
        .withFilter("{!tag=MANU}manu_id_s:apple")
        .withFacet("stock", inStockFacet)
        .withFacet("manufacturers", allManufacturersFacet);
    QueryResponse queryResponse = request.process(solrClient, COLLECTION_NAME);
    //end::solrj-json-facet-excludetags-domain[]

    assertEquals(0, queryResponse.getStatus());
    assertEquals(1, queryResponse.getResults().getNumFound());
    assertEquals(1, queryResponse.getResults().size());
    final NestableJsonFacet topLevelFacetingData = queryResponse.getJsonFacetingResponse();
    assertHasFacetWithBucketValues(topLevelFacetingData, "stock",
        new FacetBucket(true, 1));
    assertHasFacetWithBucketValues(topLevelFacetingData, "manufacturers",
        new FacetBucket("corsair", 3),
        new FacetBucket("belkin", 2));
  }

