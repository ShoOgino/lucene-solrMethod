  public void testIndirectUpdateStream() throws Exception {
    { // WRITE_X user should be able to update X via a (dummy) stream from Y...
      final SolrStream solrStream = new SolrStream(solrUrl + "/" + COLLECTION_Y,
                                                   params("qt", "/stream", "expr",
                                                          "update("+COLLECTION_X+",batchSize=1," +
                                                          "tuple(id='42',a_i=1,b_i=5))"));
      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);
      final List<Tuple> tuples = getTuples(solrStream);
      assertEquals(1, tuples.size());
      assertEquals(1L, tuples.get(0).get("totalIndexed"));
    }
    
    { // Now add some "real" docs directly to Y...
      final UpdateRequest update = setBasicAuthCredentials(new UpdateRequest(), WRITE_Y_USER);
      for (int i = 1; i <= 42; i++) {
        update.add(sdoc("id",i+"y","foo_i",""+i));
      }
      assertEquals("initial docs in Y",
                   0, update.commit(cluster.getSolrClient(), COLLECTION_Y).getStatus());
    }

    { // WRITE_X user should be able to update X via a (search) stream from Y (routed via Y)
      final String expr
        = "update("+COLLECTION_X+", batchSize=50,                   " // note batch size
        + "       search("+COLLECTION_Y+",                          "
        + "              q=\"foo_i:[* TO 10]\",                     " // 10 matches = 1 batch
        + "              rows=100,                                  "
        + "              fl=\"id,foo_i\",                           "
        + "              sort=\"foo_i desc\"))                      "
        ;
      
      final SolrStream solrStream = new SolrStream(solrUrl + "/" + COLLECTION_Y, // NOTE: Y route
                                                   params("qt", "/stream",
                                                          "expr", expr));
      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);
      final List<Tuple> tuples = getTuples(solrStream);
      assertEquals(1, tuples.size());
      assertEquals(10L, tuples.get(0).get("batchIndexed"));
      assertEquals(10L, tuples.get(0).get("totalIndexed"));
    }

    { // WRITE_X user should be able to update X via a (search) stream from Y (routed via X)...
      final String expr
        = "update("+COLLECTION_X+", batchSize=5,                    " // note batch size
        + "       search("+COLLECTION_Y+",                          "
        + "              q=\"foo_i:[30 TO *]\",                     " // 13 matches = 3 batches
        + "              rows=100,                                  "
        + "              fl=\"id,foo_i\",                           "
        + "              sort=\"foo_i desc\"))                      "
        ;
      
      final SolrStream solrStream = new SolrStream(solrUrl + "/" + COLLECTION_X, // NOTE: X route
                                                   params("qt", "/stream",
                                                          "expr", expr));
      solrStream.setCredentials(WRITE_X_USER, WRITE_X_USER);
      final List<Tuple> tuples = getTuples(solrStream);
      assertEquals(3, tuples.size());
      
      assertEquals( 5L, tuples.get(0).get("batchIndexed"));
      assertEquals( 5L, tuples.get(0).get("totalIndexed"));
      
      assertEquals( 5L, tuples.get(1).get("batchIndexed"));
      assertEquals(10L, tuples.get(1).get("totalIndexed"));
      
      assertEquals( 3L, tuples.get(2).get("batchIndexed"));
      assertEquals(13L, tuples.get(2).get("totalIndexed"));
    }

    assertEquals(1L + 10L + 13L, commitAndCountDocsInCollection(COLLECTION_X, WRITE_X_USER));
    
  }

