  public void testSuggestionsRebalanceOnly() {
    String conf = " {" +
        "    'cluster-preferences':[{" +
        "      'minimize':'cores'," +
        "      'precision':1}," +
        "      {'maximize':'freedisk','precision':100}," +
        "      {'minimize':'sysLoadAvg','precision':10}]," +
        "    'cluster-policy':[" +
        "{'replica':'<5','shard':'#EACH','sysprop.zone':['east','west']}]}";
    if(useNodeset){
      conf = " {" +
          "    'cluster-preferences':[{" +
          "      'minimize':'cores'," +
          "      'precision':1}," +
          "      {'maximize':'freedisk','precision':100}," +
          "      {'minimize':'sysLoadAvg','precision':10}]," +
          "    'cluster-policy':[" +
          "{'replica':'<5','shard':'#EACH', nodeset:{'sysprop.zone':['east','west']}}]}";

    }
    @SuppressWarnings({"unchecked"})
    Map<String, Object> m = (Map<String, Object>) loadFromResource("testSuggestionsRebalanceOnly.json");
    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);
    @SuppressWarnings({"unchecked"})
    AutoScalingConfig autoScalingConfig = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(conf));
    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(autoScalingConfig, cloudManagerFromDiagnostics);

    assertEquals(2, suggestions.size());
    assertEquals("improvement", suggestions.get(0)._get("type",null));
    assertEquals("127.0.0.1:63229_solr", suggestions.get(0)._get("operation/command/move-replica/targetNode", null));
    assertEquals("improvement", suggestions.get(1)._get( "type",null));
    assertEquals("127.0.0.1:63219_solr", suggestions.get(1)._get("operation/command/move-replica/targetNode", null));
  }

