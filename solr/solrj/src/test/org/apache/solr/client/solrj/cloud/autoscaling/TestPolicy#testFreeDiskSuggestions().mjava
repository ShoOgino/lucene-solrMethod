  public void testFreeDiskSuggestions() {
    String dataproviderdata = "{" +
        "  liveNodes:[node1,node2]," +
        "  replicaInfo : {" +
        "    node1:{}," +
        "    node2:{mycoll1:{" +
        "        shard1:[{r1:{type:NRT, INDEX.sizeInGB:900}}]," +
        "        shard2:[{r2:{type:NRT, INDEX.sizeInGB:300}}]," +
        "        shard3:[{r3:{type:NRT, INDEX.sizeInGB:200}}]," +
        "        shard4:[{r4:{type:NRT, INDEX.sizeInGB:100}}]}}}" +
        "    nodeValues : {" +
        "    node1: { node : node1 , cores:0 , freedisk : 2000}," +
        "    node2: { node : node2 , cores:4 , freedisk : 500}}}";


    String autoScalingjson = "  { cluster-policy:[" +
        "    { replica :'0', freedisk:'<1000'}," +
        "    { nodeRole : overseer, replica :0}]," +
        "  cluster-preferences :[{ minimize : cores, precision : 2 }]}";
    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));
    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();
    assertEquals(1, violations.size());
    assertEquals(4, violations.get(0).getViolatingReplicas().size());
    assertEquals(4, violations.get(0).replicaCountDelta, 0.1);
    for (Violation.ReplicaInfoAndErr r : violations.get(0).getViolatingReplicas()) {
      assertEquals(500d, r.delta, 0.1);

    }

    List<Suggester.SuggestionInfo> l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));
    assertEquals(3, l.size());
    assertEquals("r4", l.get(0)._get("operation/command/move-replica/replica", null));
    assertEquals("node1", l.get(0)._get("operation/command/move-replica/targetNode", null));

    assertEquals("r3", l.get(1)._get("operation/command/move-replica/replica", null));
    assertEquals("node1", l.get(1)._get("operation/command/move-replica/targetNode", null));

    assertEquals("r2", l.get(2)._get("operation/command/move-replica/replica", null));
    assertEquals("node1", l.get(2)._get("operation/command/move-replica/targetNode", null));


    autoScalingjson = "  { cluster-policy:[" +
        "    { replica :'#ALL', freedisk:'>1000'}," +
        "    { nodeRole : overseer, replica :0}]," +
        "  cluster-preferences :[{ minimize : cores, precision : 2 }]}";
    cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));
    violations = cfg.getPolicy().createSession(cloudManagerWithData(dataproviderdata)).getViolations();
    assertEquals(1, violations.size());
    assertEquals(-4, violations.get(0).replicaCountDelta, 0.1);
    assertEquals(1, violations.size());
    assertEquals(0, violations.get(0).getViolatingReplicas().size());

    l = PolicyHelper.getSuggestions(cfg, cloudManagerWithData(dataproviderdata));
    assertEquals(4, l.size());
    assertEquals("r4", l.get(0)._get("operation/command/move-replica/replica", null));
    assertEquals("node1", l.get(0)._get("operation/command/move-replica/targetNode", null));

    assertEquals("r3", l.get(1)._get("operation/command/move-replica/replica", null));
    assertEquals("node1", l.get(1)._get("operation/command/move-replica/targetNode", null));

    assertEquals("r2", l.get(2)._get("operation/command/move-replica/replica", null));
    assertEquals("node1", l.get(2)._get("operation/command/move-replica/targetNode", null));

    assertEquals("improvement", l.get(3)._get("type", null));


  }

