  @Test
  public void testDistributions() throws Exception {
    String cexpr = "let(a=normalDistribution(10, 2), " +
                       "b=sample(a, 250), " +
                       "c=normalDistribution(100, 6), " +
                       "d=sample(c, 250), " +
                       "u=uniformDistribution(1, 6),"+
                       "t=sample(u, 250),"+
                       "e=empiricalDistribution(d),"+
                       "f=sample(e, 250),"+
                       "tuple(sample=b, ks=ks(a,b), ks2=ks(a, d), ks3=ks(u, t)))";
    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();
    paramsLoc.set("expr", cexpr);
    paramsLoc.set("qt", "/stream");
    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+"/"+COLLECTIONORALIAS;
    try {
      TupleStream solrStream = new SolrStream(url, paramsLoc);
      StreamContext context = new StreamContext();
      solrStream.setStreamContext(context);
      List<Tuple> tuples = getTuples(solrStream);
      assertTrue(tuples.size() == 1);
      List<Number> out = (List<Number>) tuples.get(0).get("sample");

      Map ks = (Map) tuples.get(0).get("ks");
      Map ks2 = (Map) tuples.get(0).get("ks2");
      Map ks3 = (Map) tuples.get(0).get("ks3");

      assertTrue(out.size() == 250);
      Number pvalue = (Number) ks.get("p-value");
      Number pvalue2 = (Number) ks2.get("p-value");
      Number pvalue3 = (Number) ks3.get("p-value");

      assertTrue(pvalue.doubleValue() > .05D);
      assertTrue(pvalue2.doubleValue() == 0);
      assertTrue(pvalue3.doubleValue() > .05D);

    } catch(AssertionError e) {

      //This test will have random failures do to the random sampling. So if it fails try it again.
      //If it fails twice in a row, we probably broke some code.

      TupleStream solrStream = new SolrStream(url, paramsLoc);
      StreamContext context = new StreamContext();
      solrStream.setStreamContext(context);
      List<Tuple> tuples = getTuples(solrStream);
      assertTrue(tuples.size() == 1);
      List<Number> out = (List<Number>) tuples.get(0).get("sample");

      Map ks = (Map) tuples.get(0).get("ks");
      Map ks2 = (Map) tuples.get(0).get("ks2");
      Map ks3 = (Map) tuples.get(0).get("ks3");

      assertTrue(out.size() == 250);
      Number pvalue = (Number) ks.get("p-value");
      Number pvalue2 = (Number) ks2.get("p-value");
      Number pvalue3 = (Number) ks3.get("p-value");

      assertTrue(pvalue.doubleValue() > .05D);
      assertTrue(pvalue2.doubleValue() == 0);
      assertTrue(pvalue3.doubleValue() > .05D);
    }
  }

