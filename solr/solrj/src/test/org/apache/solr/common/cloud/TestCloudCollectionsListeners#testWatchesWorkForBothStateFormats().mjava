  @Test
  // commented out on: 24-Dec-2018   @BadApple(bugUrl="https://issues.apache.org/jira/browse/SOLR-12028") // added 17-Aug-2018
  public void testWatchesWorkForBothStateFormats() throws Exception {
    CloudSolrClient client = cluster.getSolrClient();

    Map<Integer, Set<String>> oldResults = new HashMap<>();
    Map<Integer, Set<String>> newResults = new HashMap<>();

    CloudCollectionsListener watcher1 = (oldCollections, newCollections) -> {
      log.info("New set of collections: {}, {}", oldCollections, newCollections);
      oldResults.put(1, oldCollections);
      newResults.put(1, newCollections);
    };
    client.getZkStateReader().registerCloudCollectionsListener(watcher1);
    CloudCollectionsListener watcher2 = (oldCollections, newCollections) -> {
      log.info("New set of collections: {}, {}", oldCollections, newCollections);
      oldResults.put(2, oldCollections);
      newResults.put(2, newCollections);
    };
    client.getZkStateReader().registerCloudCollectionsListener(watcher2);

    assertEquals("CloudCollectionsListener has old collections with size > 0 after registration", 0, oldResults.get(1).size());
    assertEquals("CloudCollectionsListener has old collections with size > 0 after registration", 0, oldResults.get(2).size());
    assertEquals("CloudCollectionsListener has new collections with size > 0 after registration", 0, newResults.get(1).size());
    assertEquals("CloudCollectionsListener has new collections with size > 0 after registration", 0, newResults.get(2).size());

    // Creating old state format collection

    CollectionAdminRequest.createCollection("testcollection1", "config", 4, 1)
        .setStateFormat(1)
        .processAndWait(client, MAX_WAIT_TIMEOUT);
    cluster.waitForActiveCollection("testcollection1", 4, 4);

    assertEquals("CloudCollectionsListener has old collections with size > 0 after collection created with old stateFormat", 0, oldResults.get(1).size());
    assertEquals("CloudCollectionsListener has old collections with size > 0 after collection created with old stateFormat", 0, oldResults.get(2).size());
    assertEquals("CloudCollectionsListener not updated with created collection with old stateFormat", 1, newResults.get(1).size());
    assertTrue("CloudCollectionsListener not updated with created collection with old stateFormat", newResults.get(1).contains("testcollection1"));
    assertEquals("CloudCollectionsListener not updated with created collection with old stateFormat", 1, newResults.get(2).size());
    assertTrue("CloudCollectionsListener not updated with created collection with old stateFormat", newResults.get(2).contains("testcollection1"));

    // Creating new state format collection

    CollectionAdminRequest.createCollection("testcollection2", "config", 4, 1)
        .processAndWait(client, MAX_WAIT_TIMEOUT);
    cluster.waitForActiveCollection("testcollection2", 4, 4);

    assertEquals("CloudCollectionsListener has incorrect old collections after collection created with new stateFormat", 1, oldResults.get(1).size());
    assertEquals("CloudCollectionsListener has incorrect old collections after collection created with new stateFormat", 1, oldResults.get(2).size());
    assertEquals("CloudCollectionsListener not updated with created collection with new stateFormat", 2, newResults.get(1).size());
    assertTrue("CloudCollectionsListener not updated with created collection with new stateFormat", newResults.get(1).contains("testcollection2"));
    assertEquals("CloudCollectionsListener not updated with created collection with new stateFormat", 2, newResults.get(2).size());
    assertTrue("CloudCollectionsListener not updated with created collection with new stateFormat", newResults.get(2).contains("testcollection2"));

    client.getZkStateReader().removeCloudCollectionsListener(watcher2);

    // Creating old state format collection

    CollectionAdminRequest.createCollection("testcollection3", "config", 4, 1)
        .setStateFormat(1)
        .processAndWait(client, MAX_WAIT_TIMEOUT);
    cluster.waitForActiveCollection("testcollection3", 4, 4);

    assertEquals("CloudCollectionsListener has incorrect old collections after collection created with old stateFormat", 2, oldResults.get(1).size());
    assertEquals("CloudCollectionsListener updated after removal", 1, oldResults.get(2).size());
    assertEquals("CloudCollectionsListener not updated with created collection with old stateFormat", 3, newResults.get(1).size());
    assertTrue("CloudCollectionsListener not updated with created collection with old stateFormat", newResults.get(1).contains("testcollection3"));
    assertEquals("CloudCollectionsListener updated after removal", 2, newResults.get(2).size());
    assertFalse("CloudCollectionsListener updated after removal", newResults.get(2).contains("testcollection3"));

    // Adding back listener
    client.getZkStateReader().registerCloudCollectionsListener(watcher2);

    assertEquals("CloudCollectionsListener has old collections after registration", 0, oldResults.get(2).size());
    assertEquals("CloudCollectionsListener doesn't have all collections after registration", 3, newResults.get(2).size());

    // Deleting old state format collection

    CollectionAdminRequest.deleteCollection("testcollection1").processAndWait(client, MAX_WAIT_TIMEOUT);

    assertEquals("CloudCollectionsListener doesn't have all old collections after collection removal", 3, oldResults.get(1).size());
    assertEquals("CloudCollectionsListener doesn't have all old collections after collection removal", 3, oldResults.get(2).size());
    assertEquals("CloudCollectionsListener doesn't have correct new collections after collection removal", 2, newResults.get(1).size());
    assertEquals("CloudCollectionsListener doesn't have correct new collections after collection removal", 2, newResults.get(2).size());
    assertFalse("CloudCollectionsListener not updated with deleted collection with old stateFormat", newResults.get(1).contains("testcollection1"));
    assertFalse("CloudCollectionsListener not updated with deleted collection with old stateFormat", newResults.get(2).contains("testcollection1"));

    CollectionAdminRequest.deleteCollection("testcollection2").processAndWait(client, MAX_WAIT_TIMEOUT);

    assertEquals("CloudCollectionsListener doesn't have all old collections after collection removal", 2, oldResults.get(1).size());
    assertEquals("CloudCollectionsListener doesn't have all old collections after collection removal", 2, oldResults.get(2).size());
    assertEquals("CloudCollectionsListener doesn't have correct new collections after collection removal", 1, newResults.get(1).size());
    assertEquals("CloudCollectionsListener doesn't have correct new collections after collection removal", 1, newResults.get(2).size());
    assertFalse("CloudCollectionsListener not updated with deleted collection with new stateFormat", newResults.get(1).contains("testcollection2"));
    assertFalse("CloudCollectionsListener not updated with deleted collection with new stateFormat", newResults.get(2).contains("testcollection2"));

    client.getZkStateReader().removeCloudCollectionsListener(watcher1);

    CollectionAdminRequest.deleteCollection("testcollection3").processAndWait(client, MAX_WAIT_TIMEOUT);

    assertEquals("CloudCollectionsListener updated after removal", 2, oldResults.get(1).size());
    assertEquals("CloudCollectionsListener doesn't have all old collections after collection removal", 1, oldResults.get(2).size());
    assertEquals("CloudCollectionsListener updated after removal", 1, newResults.get(1).size());
    assertEquals("CloudCollectionsListener doesn't have correct new collections after collection removal", 0, newResults.get(2).size());
    assertTrue("CloudCollectionsListener updated after removal", newResults.get(1).contains("testcollection3"));
    assertFalse("CloudCollectionsListener not updated with deleted collection with old stateFormat", newResults.get(2).contains("testcollection3"));

    client.getZkStateReader().removeCloudCollectionsListener(watcher2);
  }

