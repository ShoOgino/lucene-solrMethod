  public void testFastJavabinStreamingDecoder() throws IOException {
    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();
    try (InputStream is = getClass().getResourceAsStream("/solrj/javabin_sample.bin")) {
      IOUtils.copy(is, baos);
    }
    SimpleOrderedMap o = (SimpleOrderedMap) new JavaBinCodec().unmarshal(baos.toByteArray());
    SolrDocumentList list = (SolrDocumentList) o.get("response");
    System.out.println(" " + list.getNumFound() + " , " + list.getStart() + " , " + list.getMaxScore());
    class Pojo {
      long _idx;
      CharSequence id;
      boolean inStock;
      float price;
      List<NamedList> children;
    }
    StreamingBinaryResponseParser parser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {

      @Override
      public Object initDocList(Long numFound, Long start, Float maxScore) {
        assertEquals((Long) list.getNumFound(), numFound);
        assertEquals((Long) list.getStart(), start);
        assertEquals(list.getMaxScore(), maxScore);
        return new int[1];
      }

      @Override
      public Object startDoc(Object docListObj) {
        Pojo pojo = new Pojo();
        pojo._idx = ((int[]) docListObj)[0]++;
        return pojo;
      }

      @Override
      public void field(DataEntry field, Object docObj) {
        Pojo pojo = (Pojo) docObj;
        if ("id".equals(field.name())) {
          pojo.id = ((Utf8CharSequence) field.val()).clone();
        } else if (field.type() == DataEntry.Type.BOOL && "inStock".equals(field.name())) {
          pojo.inStock = field.boolVal();
        } else if (field.type() == DataEntry.Type.FLOAT && "price".equals(field.name())) {
          pojo.price = field.floatVal();
        }

      }

      @Override
      public void endDoc(Object docObj) {
        Pojo pojo = (Pojo) docObj;
        SolrDocument doc = list.get((int) pojo._idx);
        assertEquals(doc.get("id"), pojo.id.toString());
        if (doc.get("inStock") != null)
          assertEquals(doc.get("inStock"), pojo.inStock);
        if (doc.get("price") != null)
          assertEquals((Float) doc.get("price"), pojo.price, 0.001);
      }
    });

    parser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);


  }

