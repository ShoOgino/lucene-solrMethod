  public void testParsingWithChildDocs() throws IOException {
    SolrDocument d1 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();
    d1.setField("id", "101");
    SolrDocument d2 = TestJavaBinCodec.generateSolrDocumentWithChildDocs();
    d2.setField("id", "102");
    d2.setField("longs", Arrays.asList(100l, 200l));

    SolrDocumentList sdocs = new SolrDocumentList();
    sdocs.setStart(0);
    sdocs.setNumFound(2);
    sdocs.add(d1);
    sdocs.add(d2);

    SimpleOrderedMap orderedMap = new SimpleOrderedMap();
    orderedMap.add("response", sdocs);

    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();
    try (JavaBinCodec jbc = new JavaBinCodec()) {
      jbc.marshal(orderedMap, baos);
    }
    boolean[] useListener = new boolean[1];
    useListener[0] = true;

    class Pojo {
      CharSequence id;
      CharSequence subject;
      CharSequence cat;
      long[] longs;
      final List<Pojo> children = new ArrayList<>();

      public void compare(SolrDocument d) {
        assertEquals(id, d.getFieldValue("id"));
        assertEquals(subject, d.getFieldValue("subject"));
        assertEquals(cat, d.getFieldValue("cat"));
        assertEquals(d.getChildDocumentCount(), children.size());
        List<Long> l = (List<Long>) d.getFieldValue("longs");
        if(l != null){
          assertNotNull(longs);
          for (int i = 0; i < l.size(); i++) {
            Long v = l.get(i);
            assertEquals(v.longValue(), longs[i]);
          }
        }
        List<SolrDocument> childDocuments = d.getChildDocuments();
        if (childDocuments == null) return;
        for (int i = 0; i < childDocuments.size(); i++) {
          children.get(i).compare(childDocuments.get(i));
        }

      }

    }
    List<Pojo> l = new ArrayList<>();
    StreamingBinaryResponseParser binaryResponseParser = new StreamingBinaryResponseParser(new FastStreamingDocsCallback() {

      @Override
      public Object initDocList(Long numFound, Long start, Float maxScore) {
        return l;
      }

      @Override
      public Object startDoc(Object docListObj) {
        Pojo pojo = new Pojo();
        ((List) docListObj).add(pojo);
        return pojo;
      }

      @Override
      public void field(DataEntry field, Object docObj) {
        Pojo pojo = (Pojo) docObj;
        if (field.name().equals("id")) {
          pojo.id = field.strValue();
        } else if (field.name().equals("subject")) {
          pojo.subject = field.strValue();
        } else if (field.name().equals("cat")) {
          pojo.cat = field.strValue();
        } else if (field.type() == DataEntry.Type.ENTRY_ITER && "longs".equals(field.name())) {
          if(useListener[0]){
            field.listenContainer(pojo.longs = new long[field.length()], READLONGS);
          } else {
            List<Long> longList = (List<Long>) field.val();
            pojo.longs = new long[longList.size()];
            for (int i = 0; i < longList.size(); i++) {
              pojo.longs[i] = longList.get(i);

            }

          }
        }

      }


      @Override
      public Object startChildDoc(Object parentDocObj) {
        Pojo parent = (Pojo) parentDocObj;
        Pojo child = new Pojo();
        parent.children.add(child);
        return child;
      }
    });
    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);
    for (int i = 0; i < sdocs.size(); i++) {
      l.get(i).compare(sdocs.get(i));
    }

    l.clear();

    useListener[0] = false;
    binaryResponseParser.processResponse(new FastInputStream(null, baos.getbuf(), 0, baos.size()), null);
    for (int i = 0; i < sdocs.size(); i++) {
      l.get(i).compare(sdocs.get(i));
    }


  }

