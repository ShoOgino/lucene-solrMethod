  @SuppressWarnings({"unchecked"})
  public void testLargeString() throws IOException {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < 100; i++) {
      sb.append("Hello World!");
    }
    ByteArrayUtf8CharSequence utf8 = new ByteArrayUtf8CharSequence(sb.toString());
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    byte[] buf = new byte[256];
    try (FastOutputStream fos = new FastOutputStream(baos, buf, 0)) {
      fos.writeUtf8CharSeq(utf8);
      fos.flush();
    }
    byte[] result = baos.toByteArray();
    ByteArrayUtf8CharSequence utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);
    assertTrue(utf81.equals(utf8));
    baos.reset();
    utf8.write(baos);
    result = baos.toByteArray();
    utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);
    assertTrue(utf81.equals(utf8));

    @SuppressWarnings({"rawtypes"})
    Map m0 = new HashMap();
    m0.put("str", utf8);
    baos.reset();
    try (JavaBinCodec jbc = new JavaBinCodec()) {
      jbc.marshal(m0, baos);
    }
    result = baos.toByteArray();
    try (JavaBinCodec jbc = new JavaBinCodec()) {
      @SuppressWarnings({"rawtypes"})
      Map m1 = (Map) jbc
          .setReadStringAsCharSeq(true)
          .unmarshal(new ByteArrayInputStream(result));
      utf81 = (ByteArrayUtf8CharSequence) m1.get("str");
      assertTrue(utf81.equals(utf8));
    }
  }

