  @Test
  // SOLR-13491
  public void testWrappingWatches() throws Exception {
    AtomicInteger calls = new AtomicInteger(0);
    Watcher watcherA = new Watcher() {
      @Override
      public void process(WatchedEvent event) {
        calls.getAndIncrement();
      }
    };
    Watcher watcherB = new Watcher() {
      @Override
      public void process(WatchedEvent event) {
        calls.getAndDecrement();
      }
    };
    Watcher wrapped1A = defaultClient.wrapWatcher(watcherA);
    Watcher wrapped2A = defaultClient.wrapWatcher(watcherA);
    Watcher wrappedB = defaultClient.wrapWatcher(watcherB);
    assertTrue(wrapped1A.equals(wrapped2A));
    assertTrue(wrapped2A.equals(wrapped1A));
    assertFalse(wrapped1A.equals(wrappedB));
    assertEquals(wrapped1A.hashCode(), wrapped2A.hashCode());

    CollectionAdminRequest.createCollection(getSaferTestName(), "_default", 1, 1)
        .process(solrClient);

    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),"foo", "bar")
        .process(solrClient);

    //Thread.sleep(600000);

    solrClient.getZkStateReader().getZkClient().getData("/collections/" + getSaferTestName() + "/collectionprops.json",wrapped1A, null,true);
    solrClient.getZkStateReader().getZkClient().getData("/collections/" + getSaferTestName() + "/collectionprops.json",wrapped2A, null,true);

    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),"baz", "bam")
        .process(solrClient);

    Thread.sleep(1000); // make sure zk client watch has time to be notified.
    assertEquals(1, calls.get()); // same wrapped watch set twice, only invoked once

    solrClient.getZkStateReader().getZkClient().getData("/collections/" + getSaferTestName() + "/collectionprops.json",wrapped1A, null,true);
    solrClient.getZkStateReader().getZkClient().getData("/collections/" + getSaferTestName() + "/collectionprops.json",wrappedB, null,true);

    CollectionAdminRequest.setCollectionProperty(getSaferTestName(),"baz", "bang")
        .process(solrClient);

    Thread.sleep(1000); // make sure zk client watch has time to be notified.
    assertEquals(1, calls.get()); // offsetting watches, no change
  }

