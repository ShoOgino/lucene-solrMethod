  public void testSimple() throws IOException {
    String sampleObj = "{k : v , " +
        "mapk : {k1: v1, k2 : [v2_1 , v2_2 ]}," +
        "listk : [ 1, 2, 3 ]," +
        "maps : [ {id: kov1}, {id : kov2} ,{id:kov3 , longv : 234} ]," +
        "}";


    @SuppressWarnings({"rawtypes"})
    Map m = (Map) Utils.fromJSONString(sampleObj);
    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();
    try (JavaBinCodec jbc = new JavaBinCodec()) {
      jbc.marshal(m, baos);
    }

    @SuppressWarnings({"rawtypes"})
    Map m2;
    try (JavaBinCodec jbc = new JavaBinCodec()) {
      m2 = (Map) jbc.unmarshal(new FastInputStream(null, baos.getbuf(), 0, baos.size()));
    }
    @SuppressWarnings({"rawtypes"})
    LinkedHashMap fastMap = (LinkedHashMap) new FastJavaBinDecoder()
        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))
        .decode(FastJavaBinDecoder.getEntryListener());
    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),
        Utils.writeJson(fastMap, new StringWriter(), true).toString());

    @SuppressWarnings({"unchecked"})
    Object newMap = new FastJavaBinDecoder()
        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))
        .decode(e -> {
          e.listenContainer(new LinkedHashMap<>(), e_ -> {
            @SuppressWarnings({"rawtypes"})
            Map rootMap = (Map) e_.ctx();
            if (e_.type() == DataEntry.Type.ENTRY_ITER) {
              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_ARRAYLIST_FUN),
                  FastJavaBinDecoder.getEntryListener());
            } else if (e_.type() == DataEntry.Type.KEYVAL_ITER) {
              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_LINKED_HASHMAP_FUN), e1 -> {
                @SuppressWarnings({"rawtypes"})
                Map m1 = (Map) e1.ctx();
                if ("k1".equals(e1.name())) {
                  m1.put(e1.name(), e1.val().toString());
                }
                //eat up k2
              });
            } else if (e_.type() == DataEntry.Type.STR) {
              rootMap.put(e_.name(), e_.val().toString());
            }

          });
        });
    ((Map) m2.get("mapk")).remove("k2");
    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),
        Utils.writeJson(newMap, new StringWriter(), true).toString());
  }

