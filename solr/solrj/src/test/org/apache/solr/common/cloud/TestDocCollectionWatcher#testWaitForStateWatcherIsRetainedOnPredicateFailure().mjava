  @Test
  public void testWaitForStateWatcherIsRetainedOnPredicateFailure() throws Exception {

    CloudSolrClient client = cluster.getSolrClient();
    CollectionAdminRequest.createCollection("falsepredicate", "config", 1, 1)
      .processAndWait(client, MAX_WAIT_TIMEOUT);

    // create collection with 1 shard 1 replica...
    client.waitForState("falsepredicate", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,
                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 1));

    // set watcher waiting for at least 3 replicas (will fail initially)
    final AtomicInteger runCount = new AtomicInteger(0);
    final Future<Boolean> future = waitInBackground
      ("falsepredicate", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,
       (collectionState) -> {
        runCount.incrementAndGet();
        int replicas = 0;
        for (Slice slice : collectionState) {
          for (Replica replica : slice) {
            replicas++;
          }
        }
        return 3 <= replicas;
      });

    // add a 2nd replica...
    CollectionAdminRequest.addReplicaToShard("falsepredicate", "shard1")
      .processAndWait(client, MAX_WAIT_TIMEOUT);
    client.waitForState("falsepredicate", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,
                        (n, c) -> DocCollection.isFullyActive(n, c, 1, 2));

    // confirm watcher has run at least once and has been retained...
    final int runCountSnapshot = runCount.get();
    assertTrue(0 < runCountSnapshot);
    assertEquals(1, client.getZkStateReader().getStateWatchers("falsepredicate").size());
    
    // now add a 3rd replica...
    CollectionAdminRequest.addReplicaToShard("falsepredicate", "shard1")
      .processAndWait(client, MAX_WAIT_TIMEOUT);

    // now confirm watcher is invoked & removed
    assertTrue("watcher never succeeded", future.get());
    assertTrue(runCountSnapshot < runCount.get());
    waitFor("DocCollectionWatcher should be removed", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,
            () -> client.getZkStateReader().getStateWatchers("falsepredicate").size() == 0);
    
  }

