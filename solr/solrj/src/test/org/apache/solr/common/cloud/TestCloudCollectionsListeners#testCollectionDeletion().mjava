  @Test
  public void testCollectionDeletion() throws Exception {

    CloudSolrClient client = cluster.getSolrClient();

    CollectionAdminRequest.createCollection("testcollection1", "config", 4, 1)
        .processAndWait(client, MAX_WAIT_TIMEOUT);
    client.waitForState("testcollection1", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,
        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));

    CollectionAdminRequest.createCollection("testcollection2", "config", 4, 1)
        .processAndWait(client, MAX_WAIT_TIMEOUT);
    client.waitForState("testcollection2", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,
        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));

    Map<Integer, Set<String>> oldResults = new HashMap<>();
    Map<Integer, Set<String>> newResults = new HashMap<>();

    CloudCollectionsListener watcher1 = (oldCollections, newCollections) -> {
      log.info("New set of collections: {}, {}", oldCollections, newCollections);
      oldResults.put(1, oldCollections);
      newResults.put(1, newCollections);
    };
    client.getZkStateReader().registerCloudCollectionsListener(watcher1);
    CloudCollectionsListener watcher2 = (oldCollections, newCollections) -> {
      log.info("New set of collections: {}, {}", oldCollections, newCollections);
      oldResults.put(2, oldCollections);
      newResults.put(2, newCollections);
    };
    client.getZkStateReader().registerCloudCollectionsListener(watcher2);


    assertEquals("CloudCollectionsListener has old collection with size > 0 after registration", 0, oldResults.get(1).size());
    assertEquals("CloudCollectionsListener has old collection with size > 0 after registration", 0, oldResults.get(2).size());

    assertTrue("CloudCollectionsListener not notified of all collections after registration", newResults.get(1).contains("testcollection1"));
    assertTrue("CloudCollectionsListener not notified of all collections after registration", newResults.get(1).contains("testcollection2"));
    assertTrue("CloudCollectionsListener not notified of all collections after registration", newResults.get(2).contains("testcollection1"));
    assertTrue("CloudCollectionsListener not notified of all collections after registration", newResults.get(2).contains("testcollection2"));

    CollectionAdminRequest.deleteCollection("testcollection1").processAndWait(client, MAX_WAIT_TIMEOUT);

    assertEquals("CloudCollectionsListener missing old collection after collection removal", 2, oldResults.get(1).size());
    assertEquals("CloudCollectionsListener missing old collection after collection removal", 2, oldResults.get(2).size());

    assertFalse("CloudCollectionsListener notifies with collection that no longer exists", newResults.get(1).contains("testcollection1"));
    assertTrue("CloudCollectionsListener doesn't notify of collection that exists", newResults.get(1).contains("testcollection2"));
    assertFalse("CloudCollectionsListener notifies with collection that no longer exists", newResults.get(2).contains("testcollection1"));
    assertTrue("CloudCollectionsListener doesn't notify of collection that exists", newResults.get(2).contains("testcollection2"));

    client.getZkStateReader().removeCloudCollectionsListener(watcher2);

    CollectionAdminRequest.deleteCollection("testcollection2").processAndWait(client, MAX_WAIT_TIMEOUT);

    assertEquals("CloudCollectionsListener has incorrect number of old collections", 1, oldResults.get(1).size());
    assertTrue("CloudCollectionsListener has incorrect old collection after collection removal", oldResults.get(1).contains("testcollection2"));
    assertEquals("CloudCollectionsListener called after removal", 2, oldResults.get(2).size());

    assertFalse("CloudCollectionsListener shows live collection after removal", newResults.get(1).contains("testcollection1"));
    assertFalse("CloudCollectionsListener shows live collection after removal", newResults.get(1).contains("testcollection2"));
    assertFalse("CloudCollectionsListener called after removal", newResults.get(2).contains("testcollection1"));
    assertTrue("CloudCollectionsListener called after removal", newResults.get(2).contains("testcollection2"));

    client.getZkStateReader().removeCloudCollectionsListener(watcher1);
  }

