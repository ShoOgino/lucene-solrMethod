  public void testMerge() {
    Map map = (Map) Utils.fromJSONString("{" +
        "  'policies': {" +
        "    'default': {" +
        "      'conditions': [" +
        "        {  replica:'#ANY' , 'nodeRole': '!overseer'}," +
        "        { 'replica': '<2', 'shard': '#EACH', node:'#ANY'}" +
        "      ]," +
        "      'preferences':[" +
        "        {'maximize': 'freedisk', 'precision':50}," +
        "      {'minimize': 'replica', 'precision':50}]" +
        "    }," +
        "    'policy1': {" +
        "      'conditions': [" +
        "        { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'}," +
        "        { 'replica': '<2', 'shard': '#ANY' , node: '#ANY'}," +
        "        { 'replica': '<2', 'shard':'#EACH', 'rack': 'rack1' }" +
        "      ], preferences: [{maximize:freedisk, precision:75}]} } }");
    map = (Map) map.get("policies");
    map = Policy.mergePolicies("mycoll", (Map<String,Object>)map.get("policy1"),(Map<String,Object>)map.get("default"));
    assertEquals(((List)map.get("conditions")).size(), 4 );
    assertEquals(((List) map.get("preferences")).size(), 2);
    assertEquals(String.valueOf(getObjectByPath(map, true, "conditions[0]/replica")),"1");
    assertEquals(String.valueOf(getObjectByPath(map, true, "conditions[1]/replica")),"<2");
    assertEquals(String.valueOf(getObjectByPath(map, true, "conditions[1]/shard")),"#ANY");
    assertEquals(String.valueOf(getObjectByPath(map, true, "conditions[2]/rack")),"rack1");
    assertEquals(String.valueOf(getObjectByPath(map, true, "conditions[3]/nodeRole")),"!overseer");

    assertEquals(String.valueOf(getObjectByPath(map, true, "preferences[0]/maximize")),"freedisk");
    assertEquals(String.valueOf(getObjectByPath(map, true, "preferences[0]/precision")),"75");
    assertEquals(String.valueOf(getObjectByPath(map, true, "preferences[1]/precision")),"50");
  }

