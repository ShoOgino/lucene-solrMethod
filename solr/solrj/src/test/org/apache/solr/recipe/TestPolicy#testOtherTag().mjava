  public void testOtherTag(){
    String rules = "{" +
        "conditions:[" +
        "{nodeRole:'!overseer', strict:false}," +
        "{replica:'<1',node:node3}," +
        "{replica:'<2',node:'#ANY', shard:'#EACH'}," +
        "{replica:'<3',shard:'#EACH', rack:'#ANY' }" +
        "]," +
        " preferences:[" +
        "{minimize:cores , precision:2}," +
        "{maximize:freedisk, precision:50}, " +
        "{minimize:heap, precision:1000}]}";

    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString("{" +
        "node1:{cores:12, freedisk: 334, heap:10480, rack: rack4}," +
        "node2:{cores:4, freedisk: 749, heap:6873, rack: rack3}," +
        "node3:{cores:7, freedisk: 262, heap:7834, rack: rack2}," +
        "node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer, rack: rack1}" +
        "}");
    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));
    Policy.Session session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));

    Map op = session
        .getSuggester(ADDREPLICA)
        .hint(Hint.COLL, "newColl")
        .hint(Hint.SHARD, "s1").getOperation();
    assertNotNull(op);
  }

