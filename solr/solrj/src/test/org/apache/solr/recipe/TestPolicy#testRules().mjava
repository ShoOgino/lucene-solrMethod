  public void testRules() throws IOException {
    String rules = "{" +
        "conditions:[" +
        "{nodeRole:'!overseer', strict:false}," +
        "{replica:'<1',node:node3}," +
        "{replica:'<2',node:'#ANY', shard:'#EACH'}]," +
        " preferences:[" +
        "{minimize:cores , precision:2}," +
        "{maximize:freedisk, precision:50}, " +
        "{minimize:heap, precision:1000}]}";


    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString("{" +
        "node1:{cores:12, freedisk: 334, heap:10480}," +
        "node2:{cores:4, freedisk: 749, heap:6873}," +
        "node3:{cores:7, freedisk: 262, heap:7834}," +
        "node4:{cores:8, freedisk: 375, heap:16900, nodeRole:overseer}" +
        "}");

    Policy policy = new Policy((Map<String, Object>) Utils.fromJSONString(rules));
    Policy.Session session;
    session = policy.createSession(getClusterDataProvider(nodeValues, clusterState));

    session.applyRules();
    List<Row> l = session.getSorted();
    assertEquals("node1", l.get(0).node);
    assertEquals("node3", l.get(1).node);
    assertEquals("node4", l.get(2).node);
    assertEquals("node2", l.get(3).node);


    System.out.printf(Utils.toJSONString(Utils.getDeepCopy(session.toMap(new LinkedHashMap<>()), 8)));
    Map<String, List<Clause>> violations = session.getViolations();
    System.out.println(Utils.getDeepCopy(violations, 6));
    assertEquals(3, violations.size());
    List<Clause> v = violations.get("node4");
    assertNotNull(v);
    assertEquals(v.get(0).tag.name, "nodeRole");
    v = violations.get("node1");
    assertNotNull(v);
    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);
    assertEquals(v.get(0).replica.val, 2);
    v = violations.get("node3");
    assertNotNull(v);
    assertEquals(v.get(0).replica.op, Operand.LESS_THAN);
    assertEquals(v.get(0).replica.val, 1);
    assertEquals(v.get(0).tag.val, "node3");
    Policy.Suggester suggester = session.getSuggester(ADDREPLICA)
        .hint(Hint.COLL, "gettingstarted")
        .hint(Hint.SHARD, "r1");
    Map operation = suggester.getOperation();
    assertEquals("node2", operation.get("node"));



  }

