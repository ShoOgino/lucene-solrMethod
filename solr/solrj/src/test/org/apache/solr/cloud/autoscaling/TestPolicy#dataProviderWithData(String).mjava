  private static ClusterDataProvider dataProviderWithData(String data){
    final Map m = (Map) Utils.fromJSONString(data);
    Map replicaInfo = (Map) m.get("replicaInfo");
    replicaInfo.forEach((node, val) -> {
      Map m1 = (Map) val;
      m1.forEach((coll, val2) -> {
        Map m2 = (Map) val2;
        m2.forEach((shard, val3) -> {
          List l3 = (List) val3;
          for (int i = 0; i < l3.size(); i++) {
            Object o = l3.get(i);
            Map m3 = (Map) o;
            l3.set(i, new Policy.ReplicaInfo(m3.keySet().iterator().next().toString()
                ,coll.toString(), shard.toString(), Replica.Type.get((String)m3.get("type")), new HashMap<>()));
          }
        });

      });

    });
    return new ClusterDataProvider(){
      @Override
      public Map<String, Object> getNodeValues(String node, Collection<String> tags) {
        return (Map<String, Object>) Utils.getObjectByPath(m,false, Arrays.asList("nodeValues", node));
      }

      @Override
      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {
        return (Map<String, Map<String, List<Policy.ReplicaInfo>>>) Utils.getObjectByPath(m,false, Arrays.asList("replicaInfo", node));
      }

      @Override
      public Collection<String> getNodes() {
        return (Collection<String>) m.get("liveNodes");
      }

      @Override
      public String getPolicyNameByCollection(String coll) {
        return null;
      }
    };


  }

