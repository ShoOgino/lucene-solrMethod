  public void testValidate() {
    expectError("replica", -1, "must be greater than" );
    expectError("replica","hello", "not a valid number" );
    assertEquals( 1l,   Clause.validate("replica", "1", true));
    assertEquals("c",   Clause.validate("collection", "c", true));
    assertEquals( "s",   Clause.validate("shard", "s",true));
    assertEquals( "overseer",   Clause.validate("nodeRole", "overseer",true));

    expectError("nodeRole", "wrong","must be one of");

    expectError("sysLoadAvg", "101","must be less than ");
    expectError("sysLoadAvg", 101,"must be less than ");
    expectError("sysLoadAvg", "-1","must be greater than");
    expectError("sysLoadAvg", -1,"must be greater than");

    assertEquals(12l,Clause.validate("sysLoadAvg", "12.46",true));
    assertEquals(12l,Clause.validate("sysLoadAvg", 12.46d,true));


    expectError("ip_1", "300","must be less than ");
    expectError("ip_1", 300,"must be less than ");
    expectError("ip_1", "-1","must be greater than");
    expectError("ip_1", -1,"must be greater than");

    assertEquals(1l,Clause.validate("ip_1", "1",true));

    expectError("heapUsage", "-1","must be greater than");
    expectError("heapUsage", -1,"must be greater than");
    assertEquals(69l,Clause.validate("heapUsage", "69.9",true));
    assertEquals(69l,Clause.validate("heapUsage", 69.9d,true));

    expectError("port", "70000","must be less than ");
    expectError("port", 70000,"must be less than ");
    expectError("port", "1000","must be greater than");
    expectError("port", 1000,"must be greater than");

    expectError("cores", "-1","must be greater than");


  }

