  protected boolean matchBareWord(char[] arr) throws IOException {
    for (int i = 1; i < arr.length; i++) {
      int ch = getChar();
      if (ch != arr[i]) {
        if ((flags & ALLOW_UNQUOTED_STRING_VALUES) == 0) {
          throw err("Expected " + new String(arr));
        } else {
          stringTerm = 0;
          out.reset();
          out.write(arr, 0, i);
          if (!eof) {
            start--;
          }
          return false;
        }
      }
    }

    // if we don't allow bare strings, we don't need to check that the string actually terminates... just
    // let things fail as the parser tries to continue
    if ((flags & ALLOW_UNQUOTED_STRING_VALUES) == 0) {
      return true;
    }

    // check that the string actually terminates... for example trueX should return false
    int ch = getChar();
    if (eof) {
      return true;
    } else if (!isUnquotedStringChar(ch)) {
      start--;
      return true;
    }

    // we encountered something like "trueX" when matching "true"
    stringTerm = 0;
    out.reset();
    out.unsafeWrite(arr, 0, arr.length);
    out.unsafeWrite(ch);
    return false;
  }

