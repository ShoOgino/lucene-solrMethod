  /** Returns the next event encountered in the JSON stream, one of
   * <ul>
   * <li>{@link #STRING}</li>
   * <li>{@link #LONG}</li>
   * <li>{@link #NUMBER}</li>
   * <li>{@link #BIGNUMBER}</li>
   * <li>{@link #BOOLEAN}</li>
   * <li>{@link #NULL}</li>
   * <li>{@link #OBJECT_START}</li>
   * <li>{@link #OBJECT_END}</li>
   * <li>{@link #OBJECT_END}</li>
   * <li>{@link #ARRAY_START}</li>
   * <li>{@link #ARRAY_END}</li>
   * <li>{@link #EOF}</li>
   * </ul>
   */
  public int nextEvent() throws IOException {
    if (valstate==STRING) {
      readStringChars2(devNull,start);
    }
    else if (valstate==BIGNUMBER) {
      continueNumber(devNull);
    }

    valstate=0;

    int ch;   // TODO: factor out getCharNWS() to here and check speed
    switch (state) {
      case 0:
        return event = next(getCharNWS());
      case DID_OBJSTART:
        ch = getCharNWS();
        if (ch=='}') {
          pop();
          return event = OBJECT_END;
        }
        if (ch != '"') {
          throw err("Expected string");
        }
        state = DID_MEMNAME;
        valstate = STRING;
        return event = STRING;
      case DID_MEMNAME:
        ch = getCharNWS();
        if (ch!=':') {
          throw err("Expected key,value separator ':'");
        }
        state = DID_MEMVAL;  // set state first because it might be pushed...
        return event = next(getChar());
      case DID_MEMVAL:
        ch = getCharNWS();
        if (ch=='}') {
          pop();
          return event = OBJECT_END;
        } else if (ch!=',') {
          throw err("Expected ',' or '}'");
        }
        ch = getCharNWS();
        if (ch != '"') {
          throw err("Expected string");
        }
        state = DID_MEMNAME;
        valstate = STRING;
        return event = STRING;
      case DID_ARRSTART:
        ch = getCharNWS();
        if (ch==']') {
          pop();
          return event = ARRAY_END;
        }
        state = DID_ARRELEM;  // set state first, might be pushed...
        return event = next(ch);
      case DID_ARRELEM:
        ch = getCharNWS();
        if (ch==']') {
          pop();
          return event = ARRAY_END;
        } else if (ch!=',') {
          throw err("Expected ',' or ']'");
        }
        // state = DID_ARRELEM;
        return event = next(getChar());
    }
    return 0;
  }

