    private boolean recursiveRead(String parent, List<String> childrenList, BiFunction<String, ? super Resource, Boolean> fun) {
        if(childrenList == null || childrenList.isEmpty()) return true;
        try {
            Map<String, List<String>> withKids = new LinkedHashMap<>();
            for (String child : childrenList) {
                String relativePath =  parent.isEmpty() ? child: parent+"/"+child;
                if(!fun.apply(relativePath, readZkNode(relativePath))) return false;
                List<String> l1 =  zkStateReader.getZkClient().getChildren(basePath+ "/"+ relativePath, null, true);
                if(l1 != null && !l1.isEmpty()) {
                    withKids.put(relativePath, l1);
                }
            }
            //now we iterate through all nodes with sub paths
            for (Map.Entry<String, List<String>> e : withKids.entrySet()) {
                //has children
                if(!recursiveRead(e.getKey(), e.getValue(), fun)) {
                    return false;
                }
            }
        } catch (KeeperException | InterruptedException e) {
            throwZkExp(e);
        }
        return true;
    }

