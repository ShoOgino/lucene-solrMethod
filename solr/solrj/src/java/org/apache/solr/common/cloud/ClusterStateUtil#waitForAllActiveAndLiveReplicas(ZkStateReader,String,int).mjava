  /**
   * Wait to see *all* cores live and active.
   * 
   * @param zkStateReader
   *          to use for ClusterState
   * @param collection to look at
   * @param timeoutInMs
   *          how long to wait before giving up
   * @return false if timed out
   */
  public static boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection,
      int timeoutInMs) {
    long timeout = System.nanoTime()
        + TimeUnit.NANOSECONDS.convert(timeoutInMs, TimeUnit.MILLISECONDS);
    boolean success = false;
    while (!success && System.nanoTime() < timeout) {
      success = true;
      ClusterState clusterState = zkStateReader.getClusterState();
      if (clusterState != null) {
        Map<String, DocCollection> collections = null;
        if (collection != null) {
          collections = Collections.singletonMap(collection, clusterState.getCollection(collection));
        } else {
          collections = clusterState.getCollectionsMap();
        }
        for (Map.Entry<String, DocCollection> entry : collections.entrySet()) {
          DocCollection docCollection = entry.getValue();
          Collection<Slice> slices = docCollection.getSlices();
          for (Slice slice : slices) {
            // only look at active shards
            if (slice.getState() == Slice.State.ACTIVE) {
              Collection<Replica> replicas = slice.getReplicas();
              for (Replica replica : replicas) {
                // on a live node?
                final boolean live = clusterState.liveNodesContain(replica.getNodeName());
                final boolean isActive = replica.getState() == Replica.State.ACTIVE;
                if (!live || !isActive) {
                  // fail
                  success = false;
                }
              }
            }
          }
        }
        if (!success) {
          try {
            Thread.sleep(TIMEOUT_POLL_MS);
          } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new SolrException(ErrorCode.SERVER_ERROR, "Interrupted");
          }
        }
      }
    }
    
    return success;
  }

