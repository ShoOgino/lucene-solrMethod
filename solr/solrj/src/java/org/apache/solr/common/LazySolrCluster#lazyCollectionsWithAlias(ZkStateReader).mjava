    private SimpleMap<SolrCollection> lazyCollectionsWithAlias(ZkStateReader zkStateReader) {
        return new SimpleMap<SolrCollection>() {
            @Override
            public SolrCollection get(String key) {
                SolrCollection result = collections.get(key);
                if (result != null) return result;
                Aliases aliases = zkStateReader.getAliases();
                List<String> aliasNames = aliases.resolveAliases(key);
                if (aliasNames == null || aliasNames.isEmpty()) return null;
                return _collection(aliasNames.get(0), null);
            }

            @Override
            public void forEachEntry(BiConsumer<String, ? super SolrCollection> fun) {
                collections.forEachEntry(fun);
                Aliases aliases = zkStateReader.getAliases();
                aliases.forEachAlias((s, colls) -> {
                    if (colls == null || colls.isEmpty()) return;
                    fun.accept(s, _collection(colls.get(0), null));
                });

            }

            @Override
            public int size() {
                return collections.size() + zkStateReader.getAliases().size();
            }
        };
    }

