  /**
   * Split the range into partitions with inexact sizes.
   * @param partitions number of partitions
   * @param range range to split
   * @param fuzz value between 0 (inclusive) and 0.5 (exclusive) indicating inexact split, i.e. percentage
   *        of variation in resulting ranges - odd ranges will be larger and even ranges will be smaller
   *        by up to that percentage.
   */
  public List<Range> partitionRange(int partitions, Range range, float fuzz) {
    int min = range.min;
    int max = range.max;

    assert max >= min;
    if (fuzz > 0.5f) {
      throw new IllegalArgumentException("'fuzz' parameter must be <= 0.5f but was " + fuzz);
    } else if (fuzz < 0.0f) {
      fuzz = 0.0f;
    }
    if (partitions == 0) return Collections.EMPTY_LIST;
    long rangeSize = (long)max - (long)min;
    long rangeStep = Math.max(1, rangeSize / partitions);
    long fuzzStep = Math.round(rangeStep * (double)fuzz / 2.0);

    List<Range> ranges = new ArrayList<>(partitions);

    long start = min;
    long end = start;
    boolean odd = true;

    while (end < max) {
      end = start + rangeStep;
      if (fuzzStep > 0) {
        if (odd) {
          end = end + fuzzStep;
        } else {
          end = end - fuzzStep;
        }
        odd = !odd;
      }
      // make last range always end exactly on MAX_VALUE
      if (ranges.size() == partitions - 1) {
        end = max;
      }
      ranges.add(new Range((int)start, (int)end));
      start = end + 1L;
    }

    return ranges;
  }

