    /**
     * Refresh collection properties from ZK and leave a watch for future changes. Updates the properties in
     * watchedCollectionProps with the results of the refresh. Optionally notifies watchers
     */
    void refreshAndWatch(boolean notifyWatchers) {
      try {
        synchronized (watchedCollectionProps) { // making decisions based on the result of a get...
          VersionedCollectionProps vcp = fetchCollectionProperties(coll, this);
          Map<String, String> properties = vcp.props;
          VersionedCollectionProps existingVcp = watchedCollectionProps.get(coll);
          if (existingVcp == null ||                   // never called before, record what we found
              vcp.zkVersion > existingVcp.zkVersion || // newer info we should update
              vcp.zkVersion == -1) {                   // node was deleted start over
            watchedCollectionProps.put(coll, vcp);
            if (notifyWatchers) {
              notifyPropsWatchers(coll, properties);
            }
          }
        }
      } catch (KeeperException.SessionExpiredException | KeeperException.ConnectionLossException e) {
        log.warn("ZooKeeper watch triggered, but Solr cannot talk to ZK: [{}]", e.getMessage());
      } catch (KeeperException e) {
        log.error("Lost collection property watcher for {} due to ZK error", coll, e);
        throw new ZooKeeperException(ErrorCode.SERVER_ERROR, "A ZK error has occurred", e);
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        log.error("Lost collection property watcher for {} due to the thread being interrupted", coll, e);
      }
    }

