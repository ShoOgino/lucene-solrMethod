  /**
   * Parse the command operations into command objects from a json payload
   *
   * @param rdr               The payload
   * @param singletonCommands commands that cannot be repeated
   * @return parsed list of commands
   */
  public static List<CommandOperation> parse(Reader rdr, Set<String> singletonCommands) throws IOException {
    JSONParser parser = new JSONParser(rdr);
    parser.setFlags(parser.getFlags() |
        JSONParser.ALLOW_MISSING_COLON_COMMA_BEFORE_OBJECT |
        JSONParser.OPTIONAL_OUTER_BRACES
    );

    ObjectBuilder ob = new ObjectBuilder(parser);

    if (parser.lastEvent() != JSONParser.OBJECT_START) {
      throw new RuntimeException("The JSON must be an Object of the form {\"command\": {...},...");
    }
    List<CommandOperation> operations = new ArrayList<>();
    for (; ; ) {
      int ev = parser.nextEvent();
      if (ev == JSONParser.OBJECT_END) {
        ObjectBuilder.checkEOF(parser);
        return operations;
      }
      Object key = ob.getKey();
      ev = parser.nextEvent();
      Object val = ob.getVal();
      if (val instanceof List && !singletonCommands.contains(key)) {
        @SuppressWarnings({"rawtypes"})
        List list = (List) val;
        for (Object o : list) {
          if (!(o instanceof Map)) {
            operations.add(new CommandOperation(String.valueOf(key), list));
            break;
          } else {
            operations.add(new CommandOperation(String.valueOf(key), o));
          }
        }
      } else {
        operations.add(new CommandOperation(String.valueOf(key), val));
      }
    }

  }

