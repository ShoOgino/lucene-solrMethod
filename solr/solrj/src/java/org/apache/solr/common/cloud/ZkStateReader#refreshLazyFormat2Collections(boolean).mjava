  /**
   * Search for any lazy-loadable state format2 collections.
   */
  private void refreshLazyFormat2Collections(boolean fullRefresh) throws KeeperException, InterruptedException {
    List<String> children = null;
    try {
      children = zkClient.getChildren(COLLECTIONS_ZKNODE, null, true);
    } catch (KeeperException.NoNodeException e) {
      log.warn("Error fetching collection names");
      // fall through
    }
    if (children == null || children.isEmpty()) {
      synchronized (getUpdateLock()) {
        this.lazyCollectionStates = new HashMap<>();
      }
      return;
    }

    Map<String, ClusterState.CollectionRef> result = new HashMap<>();
    for (String collName : children) {
      if (interestingCollections.contains(collName)) {
        // We will create an eager collection for any interesting collections.
        continue;
      }

      if (!fullRefresh) {
        // Try to use an already-created lazy collection if it's not a full refresh.
        ClusterState.CollectionRef existing = lazyCollectionStates.get(collName);
        if (existing != null) {
          result.put(collName, existing);
          continue;
        }
      }

      ClusterState.CollectionRef lazyCollectionState = tryMakeLazyCollectionStateFormat2(collName);
      if (lazyCollectionState != null) {
        result.put(collName, lazyCollectionState);
      }
    }

    synchronized (getUpdateLock()) {
      this.lazyCollectionStates = result;
    }
  }

