  /**
   * This method sets a collection property.
   *
   * @param collection    The property name to be set.
   * @param propertyName  The property name to be set.
   * @param propertyValue The value of the property.
   * @throws IOException if there is an error writing data to zookeeper
   */
  @SuppressWarnings("unchecked")
  public void setCollectionProperty(String collection, String propertyName, String propertyValue) throws IOException {
    String znodePath = ZkStateReader.getCollectionPropsPath(collection);

    while (true) {
      Stat s = new Stat();
      try {
        if (client.exists(znodePath, true)) {
          Map<String, String> properties = (Map<String, String>) Utils.fromJSON(client.getData(znodePath, null, s, true));
          if (propertyValue == null) {
            if (properties.remove(propertyName) != null) { // Don't update ZK unless absolutely necessary.
              client.setData(znodePath, Utils.toJSON(properties), s.getVersion(), true);
            }
          } else {
            if (!propertyValue.equals(properties.put(propertyName, propertyValue))) { // Don't update ZK unless absolutely necessary.
              client.setData(znodePath, Utils.toJSON(properties), s.getVersion(), true);
            }
          }
        } else {
          Map<String, String> properties = new LinkedHashMap<>();
          properties.put(propertyName, propertyValue);
          client.create(znodePath, Utils.toJSON(properties), CreateMode.PERSISTENT, true);
        }
      } catch (KeeperException.BadVersionException | KeeperException.NodeExistsException e) {
        //race condition
        continue;
      } catch (InterruptedException | KeeperException e) {
        throw new IOException("Error setting property for collection " + collection, SolrZkClient.checkInterrupted(e));
      }
      break;
    }
  }

