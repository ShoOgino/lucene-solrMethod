  private synchronized void disconnected() {
    cancelTimer();
    if (!isClosed) {
      Timer newDcTimer = new Timer(true);
      newDcTimer.schedule(new TimerTask() {
        
        @Override
        public void run() {
          likelyExpired = true;
        }
        
      }, (long) (client.getZkClientTimeout() * 0.90));
      if (isClosed) {
        // we might have closed after getting by isClosed
        // and before starting the new timer
        newDcTimer.cancel();
      } else {
        disconnectedTimer = newDcTimer;
        if (isClosed) {
          // now deal with we may have been closed after getting
          // by isClosed but before setting disconnectedTimer -
          // if close happens after isClosed check this time, it 
          // will handle stopping the timer
          cancelTimer();
        }
      }
    }
    connected = false;
    notifyAll();
  }

