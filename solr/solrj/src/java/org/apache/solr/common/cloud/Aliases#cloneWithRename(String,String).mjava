  /**
   * Rename an alias. This performs a "deep rename", which changes also the second-level alias lists.
   * Renaming routed aliases is not supported.
   * <p>
   * Note that the state in zookeeper is unaffected by this method and the change must still be persisted via
   * {@link ZkStateReader.AliasesManager#applyModificationAndExportToZk(UnaryOperator)}
   *
   * @param before previous alias name, must not be null
   * @param after new alias name. If this is null then it's equivalent to calling {@link #cloneWithCollectionAlias(String, String)}
   *              with the second argument set to null, ie. removing an alias.
   * @return new instance with the renamed alias
   * @throws IllegalArgumentException when either <code>before</code> or <code>after</code> is empty, or
   * the <code>before</code> name is a routed alias
   */
  public Aliases cloneWithRename(String before, String after) {
    if (before == null) {
      throw new NullPointerException("'before' and 'after' cannot be null");
    }
    if (after == null) {
      return cloneWithCollectionAlias(before, after);
    }
    if (before.isEmpty() || after.isEmpty()) {
      throw new IllegalArgumentException("'before' and 'after' cannot be empty");
    }
    if (before.equals(after)) {
      return this;
    }
    Map<String, String> props = collectionAliasProperties.get(before);
    if (props != null) {
      if (props.keySet().stream().anyMatch(k -> k.startsWith(CollectionAdminParams.ROUTER_PREFIX))) {
        throw new IllegalArgumentException("source name '" + before + "' is a routed alias.");
      }
    }
    Map<String, Map<String, String>> newColProperties = new LinkedHashMap<>(this.collectionAliasProperties);
    Map<String, List<String>> newColAliases = new LinkedHashMap<>(this.collectionAliases);//clone to modify
    List<String> level1 = newColAliases.remove(before);
    props = newColProperties.remove(before);
    if (level1 != null) {
      newColAliases.put(after, level1);
    }
    if (props != null) {
      newColProperties.put(after, props);
    }
    for (Map.Entry<String, List<String>> entry : newColAliases.entrySet()) {
      List<String> collections = entry.getValue();
      if (collections.contains(before)) {
        LinkedHashSet<String> newCollections = new LinkedHashSet<>(collections.size());
        for (String coll : collections) {
          if (coll.equals(before)) {
            newCollections.add(after);
          } else {
            newCollections.add(coll);
          }
        }
        entry.setValue(Collections.unmodifiableList(new ArrayList<>(newCollections)));
      }
    }
    if (level1 == null) { // create an alias that points to the collection
      newColAliases.put(before, Collections.singletonList(after));
    }
    return new Aliases(newColAliases, newColProperties, zNodeVersion);
  }

