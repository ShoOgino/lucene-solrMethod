  @Override
  public void process(WatchedEvent event) {
    if (event.getState() == AuthFailed || event.getState() == Disconnected || event.getState() == Expired) {
      log.warn("Watcher {} name: {} got event {} path: {} type: {}", this, name, event, event.getPath(), event.getType());
    } else {
      log.debug("Watcher {} name: {} got event {} path: {} type: {}", this, name, event, event.getPath(), event.getType());
    }
    
    if (isClosed()) {
      log.debug("Client->ZooKeeper status change trigger but we are already closed");
      return;
    }
    
    KeeperState state = event.getState();
    
    if (state == KeeperState.SyncConnected) {
      log.info("zkClient has connected");
      connected();
      connectionStrategy.connected();
    } else if (state == Expired) {
      if (isClosed()) {
        return;
      }
      // we don't call disconnected here, because we know we are expired
      connected = false;
      likelyExpiredState = LikelyExpiredState.EXPIRED;
      
      log.warn("Our previous ZooKeeper session was expired. Attempting to reconnect to recover relationship with ZooKeeper...");
      
      if (beforeReconnect != null) {
        try {
          beforeReconnect.command();
        } catch (Exception e) {
          log.warn("Exception running beforeReconnect command", e);
        }
      }
      
      do {
        // This loop will break if a valid connection is made. If a connection is not made then it will repeat and
        // try again to create a new connection.
        try {
          connectionStrategy.reconnect(zkServerAddress,
              client.getZkClientTimeout(), this,
              new ZkClientConnectionStrategy.ZkUpdate() {
                @Override
                public void update(SolrZooKeeper keeper) {
                  try {
                    waitForConnected(Long.MAX_VALUE);
                  } catch (Exception e1) {
                    closeKeeper(keeper);
                    throw new RuntimeException(e1);
                  }
  
                  log.info("Connection with ZooKeeper reestablished.");
                  try {
                    client.updateKeeper(keeper);
                  } catch (InterruptedException e) {
                    closeKeeper(keeper);
                    Thread.currentThread().interrupt();
                    // we must have been asked to stop
                    throw new RuntimeException(e);
                  } catch (Exception t) {
                    closeKeeper(keeper);
                    throw new RuntimeException(t);
                  }
  
                  if (onReconnect != null) {
                    onReconnect.command();
                  }
                }
              });
          
          break;
          
        } catch (Exception e) {
          SolrException.log(log, "", e);
          log.info("Could not connect due to error, sleeping for 5s and trying agian");
          waitSleep(1000);
        }
        
      } while (!isClosed());
      log.info("zkClient Connected:" + connected);
    } else if (state == KeeperState.Disconnected) {
      log.warn("zkClient has disconnected");
      disconnected();
      connectionStrategy.disconnected();
    } else if (state == KeeperState.AuthFailed) {
      log.warn("zkClient received AuthFailed");
    }
  }

