  private ClusterState constructState(Set<String> ln, Watcher watcher)
      throws KeeperException, InterruptedException {
    Stat stat = new Stat();
    byte[] data = zkClient.getData(CLUSTER_STATE, watcher, stat, true);
    ClusterState loadedData = ClusterState.load(stat.getVersion(), data, ln,
        CLUSTER_STATE);
    Map<String,ClusterState.CollectionRef> result = new LinkedHashMap<>();
    result.putAll(loadedData.getCollectionStates());// first load all
                                                    // collections in
                                                    // clusterstate.json
    for (String s : getIndividualColls()) {
      DocCollection watched = watchedCollectionStates.get(s);
      if (watched != null) {
        // if it is a watched collection, add too
        result.put(s, new ClusterState.CollectionRef(watched));
      } else {
        // if it is not collection, then just create a reference which can fetch 
        // the collection object just in time from ZK
        final String collName = s;
        result.put(s, new ClusterState.CollectionRef(null) {
          @Override
          public DocCollection get() {
            return getCollectionLive(ZkStateReader.this, collName);
          }
        });
      }
    }
    return new ClusterState(ln, result, stat.getVersion());
  }

