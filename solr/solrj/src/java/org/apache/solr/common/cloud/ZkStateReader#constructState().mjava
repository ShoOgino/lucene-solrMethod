  /**
   * Construct the total state view from all sources.
   * Must hold {@link #getUpdateLock()} before calling this.
   */
  private void constructState() {
    // Legacy clusterstate is authoritative, for backwards compatibility.
    // To move a collection's state to format2, first create the new state2 format node, then remove legacy entry.
    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>(legacyCollectionStates);

    // Are there any interesting collections that disappeared from the legacy cluster state?
    for (String coll : interestingCollections) {
      if (!result.containsKey(coll) && !watchedCollectionStates.containsKey(coll)) {
        new StateWatcher(coll).refreshAndWatch(true);
      }
    }
  
    // Add state format2 collections, but don't override legacy collection states.
    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {
      result.putIfAbsent(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));
    }

    // Finally, add any lazy collections that aren't already accounted for.
    for (Map.Entry<String, ClusterState.CollectionRef> entry : lazyCollectionStates.entrySet()) {
      result.putIfAbsent(entry.getKey(), entry.getValue());
    }

    this.clusterState = new ClusterState(liveNodes, result, legacyClusterStateVersion);
    log.debug("clusterStateSet: version {} legacy {} interesting {} watched {} lazy {} total {}",
        clusterState.getZkClusterStateVersion(),
        legacyCollectionStates.keySet(),
        interestingCollections,
        watchedCollectionStates.keySet(),
        lazyCollectionStates.keySet(),
        clusterState.getCollections());
  }

