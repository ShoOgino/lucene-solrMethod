    /**
     * If a new tag is encountered, check if it is of interest or not by seeing
     * if it matches against our node tree. If we have deperted from the node
     * tree then walk back though the tree's ancestor nodes checking to see if
     * any // expressions exist for the node and compare them against the new
     * tag. If matched then "jump" to that node, otherwise ignore the tag.
     * <p>
     * Note, the list of // expressions found while walking back up the tree
     * is chached in the HashMap decends. Then if the new tag is to be skipped,
     * any inner chil tags are compared against the cache and jumped to if
     * matched.
     */
    private void handleObjectStart(final JSONParser parser, final Set<Node> childrenFound,
                                   final Handler handler, final Map<String, Object> values,
                                   final Stack<Set<String>> stack, boolean recordStarted,
                                   MethodFrameWrapper frameWrapper)
        throws IOException {

      final boolean isRecordStarted = recordStarted || isRecord;
      Set<String> valuesAddedinThisFrame = null;
      if (isRecord || !recordStarted) {
        // This Node is a match for an PATH from a forEach attribute,
        // prepare for the clean up that will occurr when the record
        // is emitted after its END_ELEMENT is matched
        valuesAddedinThisFrame = new HashSet<>();
        stack.push(valuesAddedinThisFrame);
      } else if (recordStarted) {
        // This node is a child of some parent which matched against forEach
        // attribute. Continue to add values to an existing record.
        valuesAddedinThisFrame = stack.peek();
      }

      class Wrapper extends MethodFrameWrapper {
        Wrapper(Node node, MethodFrameWrapper parent, String name) {
          this.node = node;
          this.parent = parent;
          this.name = name;
        }

        @Override
        public void walk(int event) throws IOException {
          if (event == OBJECT_START) {
            node.handleObjectStart(parser, childrenFound, handler, values, stack, isRecordStarted, this);
          } else if (event == ARRAY_START) {
            for (; ; ) {
              event = parser.nextEvent();
              if (event == ARRAY_END) break;
              if (event == OBJECT_START) {
                node.handleObjectStart(parser, childrenFound, handler, values, stack, isRecordStarted, this);
              }
            }
          }

        }
      }

      try {
        for (; ; ) {
          int event = parser.nextEvent();
          if (event == OBJECT_END) {
            if (isRecord()) {
              handler.handle(getDeepCopy(values), splitPath);
            }
            return;
          }
          assert event == STRING;
          assert parser.wasKey();
          String name = parser.getString();

          Node node = childNodes.get(name);
          if (node == null) node = wildCardChild;
          if (node == null) node = recursiveWildCardChild;

          if (node != null) {
            if (node.isLeaf) {//this is a leaf collect data here
              event = parser.nextEvent();
              String nameInRecord = node.fieldName == null ? getNameInRecord(name, frameWrapper, node) : node.fieldName;
              MethodFrameWrapper runnable = null;
              if (event == OBJECT_START || event == ARRAY_START) {
                if (node.recursiveWildCardChild != null) runnable = new Wrapper(node, frameWrapper, name);
              }
              Object val = parseSingleFieldValue(event, parser, runnable);
              if (val != null) {
                putValue(values, nameInRecord, val);
                valuesAddedinThisFrame.add(nameInRecord);
              }

            } else {
              event = parser.nextEvent();
              new Wrapper(node, frameWrapper, name).walk(event);
            }
          } else {
            //this is not something we are interested in  . skip it
            event = parser.nextEvent();
            if (event == STRING ||
                event == LONG ||
                event == NUMBER ||
                event == BIGNUMBER ||
                event == BOOLEAN ||
                event == NULL) {
              continue;
            }
            if (event == ARRAY_START) {
              consumeTillMatchingEnd(parser, 0, 1);
              continue;
            }
            if (event == OBJECT_START) {
              consumeTillMatchingEnd(parser, 1, 0);
              continue;
            } else throw new RuntimeException("unexpected token " + event);

          }
        }
      } finally {
        if ((isRecord() || !isRecordStarted) ) {
            for (String fld : valuesAddedinThisFrame) {
              values.remove(fld);
            }
        }
      }
    }

