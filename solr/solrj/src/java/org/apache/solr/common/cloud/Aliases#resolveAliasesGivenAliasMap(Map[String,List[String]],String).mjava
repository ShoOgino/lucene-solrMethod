  /** @lucene.internal */
  @SuppressWarnings("JavaDoc")
  public static List<String> resolveAliasesGivenAliasMap(Map<String, List<String>> collectionAliasListMap, String aliasName) {
    // Due to another level of indirection, this is more complicated...
    List<String> level1 = collectionAliasListMap.get(aliasName);
    if (level1 == null) {
      return Collections.singletonList(aliasName);// is a collection
    }
    // avoid allocating objects if possible
    LinkedHashSet<String> uniqueResult = null;
    for (int i = 0; i < level1.size(); i++) {
      String level1Alias = level1.get(i);
      List<String> level2 = collectionAliasListMap.get(level1Alias);
      if (level2 == null && uniqueResult != null) {
        uniqueResult.add(level1Alias);
      } else {
        if (uniqueResult == null) { // lazy init
          uniqueResult = new LinkedHashSet<>(level1.size());
          uniqueResult.addAll(level1.subList(0, i));
        }
        uniqueResult.addAll(level2);
      }
    }
    if (uniqueResult == null) {
      return level1;
    } else {
      return Collections.unmodifiableList(new ArrayList<>(uniqueResult));
    }
  }

