  /**
   * @param name  The name of the slice
   * @param replicas The replicas of the slice.  This is used directly and a copy is not made.  If null, replicas will be constructed from props.
   * @param props  The properties of the slice - a shallow copy will always be made.
   */
  public Slice(String name, Map<String,Replica> replicas, Map<String,Object> props) {
    super( props==null ? new LinkedHashMap<String,Object>(2) : new LinkedHashMap<String,Object>(props));
    this.name = name;

    Object rangeObj = propMap.get(RANGE);
    HashPartitioner.Range tmpRange = null;
    if (rangeObj instanceof HashPartitioner.Range) {
      tmpRange = (HashPartitioner.Range)rangeObj;
    } else if (rangeObj != null) {
      HashPartitioner hp = new HashPartitioner();
      tmpRange = hp.fromString(rangeObj.toString());
    }
    range = tmpRange;

    replicationFactor = null;  // future

    // add the replicas *after* the other properties (for aesthetics, so it's easy to find slice properties in the JSON output)
    this.replicas = replicas != null ? replicas : makeReplicas((Map<String,Object>)propMap.get(REPLICAS));
    propMap.put(REPLICAS, this.replicas);

    leader = findLeader();
  }

