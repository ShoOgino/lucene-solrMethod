  /**
   * Construct the total state view from all sources.
   * Must hold {@link #getUpdateLock()} before calling this.
   *
   * @param changedCollections collections that have changed since the last call,
   *                           and that should fire notifications
   */
  private void constructState(Set<String> changedCollections) {

    Set<String> liveNodes = this.liveNodes; // volatile read

    Map<String, ClusterState.CollectionRef> result = new LinkedHashMap<>();

    // Add collections
    for (Map.Entry<String, DocCollection> entry : watchedCollectionStates.entrySet()) {
      result.put(entry.getKey(), new ClusterState.CollectionRef(entry.getValue()));
    }

    // Finally, add any lazy collections that aren't already accounted for.
    for (Map.Entry<String, LazyCollectionRef> entry : lazyCollectionStates.entrySet()) {
      result.putIfAbsent(entry.getKey(), entry.getValue());
    }

    this.clusterState = new ClusterState(result, liveNodes);

    if (log.isDebugEnabled()) {
      log.debug("clusterStateSet: interesting [{}] watched [{}] lazy [{}] total [{}]",
          collectionWatches.keySet().size(),
          watchedCollectionStates.keySet().size(),
          lazyCollectionStates.keySet().size(),
          clusterState.getCollectionStates().size());
    }

    if (log.isTraceEnabled()) {
      log.trace("clusterStateSet: interesting [{}] watched [{}] lazy [{}] total [{}]",
          collectionWatches.keySet(),
          watchedCollectionStates.keySet(),
          lazyCollectionStates.keySet(),
          clusterState.getCollectionStates());
    }

    notifyCloudCollectionsListeners();

    for (String collection : changedCollections) {
      notifyStateWatchers(collection, clusterState.getCollectionOrNull(collection));
    }

  }

