    /**
     * Build a Node tree structure representing all paths of intrest to us.
     * This must be done before parsing of the JSON stream starts. Each node
     * holds one portion of an path. Taking each path segment in turn this
     * method walks the Node tree  and finds where the new segment should be
     * inserted. It creates a Node representing a field's name, PATH and
     * some flags and inserts the Node into the Node tree.
     */
    private void build(
        List<String> paths,   // a List of segments from the split paths
        String fieldName,     // the fieldName assoc with this path
        boolean multiValued,  // flag if this fieldName is multiValued or not
        boolean record,       // is this path a record or a field
        String path) {
      // recursively walk the paths Lists adding new Nodes as required
      String segment = paths.remove(0); // shift out next path segment

      if(segment.length() < 1) throw new RuntimeException("all pieces in path must be non empty "+path);

      // does this "name" already exist as a child node.
      Node n = getOrAddNode(segment, childNodes);
      if (paths.isEmpty()) {
        // We have emptied paths, we are for the moment a leaf of the tree.
        // When parsing the actual input we have traversed to a position
        // where we actutally have to do something. getOrAddNode() will
        // have created and returned a new minimal Node with name and
        // pathName already populated. We need to add more information.
        if (record) {
          //wild cards cannot be used in split
          assert !WILDCARD_PATH.equals(n.name);
          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);
          // split attribute
          n.isRecord = true; // flag: split attribute, prepare to emit rec
          n.splitPath = fieldName; // the full split attribute path
        } else {
          if (n.name.equals(WILDCARD_PATH)) {
            wildCardChild = n;
          }
          if (n.name.equals(RECURSIVE_WILDCARD_PATH) ) {
            recursiveWildCardChild = n.recursiveWildCardChild= n;
          }

          // path with content we want to store and return
          n.isLeaf = true;        // we have to store text found here
          n.fieldName = fieldName; // name to store collected text against
          if("$FQN".equals(n.fieldName)) {
            n.fieldName = null;
            n.useFqn = true;
          }
        }
      } else {
        //wildcards must only come at the end
        if(WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name)) throw new RuntimeException("wild cards are allowed only in the end "+path) ;
        // recurse to handle next paths segment
        n.build(paths, fieldName, multiValued, record, path);
      }
    }

