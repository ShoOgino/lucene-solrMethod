    /**
     * @param pathSegments      pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'
     * @param index             current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'
     * @param templateVariables The mapping of template variable to its value
     * @param availableSubPaths If not null , available sub paths will be returned in this set
     */
    public T lookup(List<String> pathSegments, int index, Map<String, String> templateVariables, Set<String> availableSubPaths) {
      if (templateName != null) templateVariables.put(templateName, pathSegments.get(index - 1));
      if (pathSegments.size() < index + 1) {
        findAvailableChildren("", availableSubPaths);
        if (obj == null) {//this is not a leaf node
          Node n = children.get("*");
          if (n != null) {
            return n.obj;
          }

        }
        return obj;
      }
      String piece = pathSegments.get(index);
      if (children == null) {
        return null;
      }
      Node n = children.get(piece);
      if (n == null && !reserved.contains(piece)) n = children.get("");
      if (n == null) {
        n = children.get("*");
        if (n != null) {
          StringBuffer sb = new StringBuffer();
          for (int i = index; i < pathSegments.size(); i++) {
            sb.append("/").append(pathSegments.get(i));
          }
          templateVariables.put("*", sb.toString());
          return n.obj;

        }
      }
      if (n == null) {
        return null;
      }
      return n.lookup(pathSegments, index + 1, templateVariables, availableSubPaths);
    }

