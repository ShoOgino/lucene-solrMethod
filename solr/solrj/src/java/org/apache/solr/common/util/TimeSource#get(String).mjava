  /**
   * Obtain an instance of time source.
   * @param type supported types: <code>currentTime</code>, <code>nanoTime</code> and accelerated
   *             time with a double factor in the form of <code>simTime:FACTOR</code>, eg.
   *             <code>simTime:2.5</code>
   * @return one of the supported types
   */
  public static TimeSource get(String type) {
    if (type == null) {
      return NANO_TIME;
    } else if (type.equals("currentTime") || type.equals(CurrentTimeSource.class.getSimpleName())) {
      return CURRENT_TIME;
    } else if (type.equals("nanoTime") || type.equals(NanoTimeSource.class.getSimpleName())) {
      return NANO_TIME;
    } else if (type.startsWith("simTime") || type.startsWith(SimTimeSource.class.getSimpleName())) {
      return simTimeSources.computeIfAbsent(type, t -> {
        String[] parts = t.split(":");
        double mul = 1.0;
        if (parts.length != 2) {
          log.warn("Invalid simTime specification, assuming multiplier==1.0: '" + type + "'");
        } else {
          try {
            mul = Double.parseDouble(parts[1]);
          } catch (Exception e) {
            log.warn("Invalid simTime specification, assuming multiplier==1.0: '" + type + "'");
          }
        }
        return new SimTimeSource(mul);
      });
    } else {
      throw new UnsupportedOperationException("Unsupported time source type '" + type + "'.");
    }
  }

