  public static void downloadFromZK(SolrZkClient zkClient, String zkPath, Path file) throws IOException {
    try {
      List<String> children = zkClient.getChildren(zkPath, null, true);
      // If it has no children, it's a leaf node, write the assoicated data from the ZNode. 
      // Otherwise, continue recursing, but write the associated data to a special file if any
      if (children.size() == 0) {
        // If we didn't copy data down, then we also didn't create the file. But we still need a marker on the local
        // disk so create a dir.
        if (copyDataDown(zkClient, zkPath, file.toFile()) == 0) {
          Files.createDirectories(file);
        }
      } else {
        Files.createDirectories(file); // Make parent dir.
        // ZK nodes, whether leaf or not can have data. If it's a non-leaf node and
        // has associated data write it into the special file.
        copyDataDown(zkClient, zkPath, new File(file.toFile(), ZKNODE_DATA_FILE));

        for (String child : children) {
          String zkChild = zkPath;
          if (zkChild.endsWith("/") == false) zkChild += "/";
          zkChild += child;
          if (isEphemeral(zkClient, zkChild)) { // Don't copy ephemeral nodes
            continue;
          }
          // Go deeper into the tree now
          downloadFromZK(zkClient, zkChild, file.resolve(child));
        }
      }
    } catch (KeeperException | InterruptedException e) {
      throw new IOException("Error downloading files from zookeeper path " + zkPath + " to " + file.toString(),
          SolrZkClient.checkInterrupted(e));
    }
  }

