  /**
   * Splits the path into a List of segments and calls build() to
   * construct a tree of Nodes representing path segments. The resulting
   * tree structure ends up describing all the paths we are interested in.
   *
   * @param path        The path expression for this field
   * @param fieldName   The name for this field in the emitted record
   * @param multiValued If 'true' then the emitted record will have values in
   *                    a List&lt;String&gt;
   * @param isRecord    Flags that this PATH is from a forEach statement
   */
  private void addField(String path, String fieldName, boolean multiValued, boolean isRecord) {
    if (!path.startsWith("/")) throw new RuntimeException("All paths must start with '/' " + path);
    List<String> paths = splitEscapeQuote(path);
    if (paths.size() == 0) {
      if (isRecord) rootNode.isRecord = true;
      return;//the path is "/"
    }
    // deal with how split behaves when separator starts with an empty string!
    if ("".equals(paths.get(0).trim()))
      paths.remove(0);
    rootNode.build(paths, fieldName, multiValued, isRecord, path);
    rootNode.buildOptimize();
  }

