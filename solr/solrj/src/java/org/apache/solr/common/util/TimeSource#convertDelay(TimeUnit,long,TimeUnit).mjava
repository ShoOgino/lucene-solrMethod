  /**
   * This method allows using TimeSource with APIs that require providing just plain time intervals,
   * eg. {@link Object#wait(long)}. Values returned by this method are adjusted according to the
   * time source's notion of time - eg. accelerated time source provided by {@link SimTimeSource}
   * will return intervals that are proportionally shortened by the multiplier.
   * <p>NOTE: converting small values may significantly affect precision of the returned values
   * due to rounding, especially for accelerated time source, so care should be taken to use time
   * units that result in relatively large values. For example, converting a value of 1 expressed
   * in seconds would result in less precision than converting a value of 1000 expressed in milliseconds.</p>
   * @param fromUnit source unit
   * @param value original value
   * @param toUnit target unit
   * @return converted value, possibly scaled by the source's notion of accelerated time
   * (see {@link SimTimeSource})
   */
  public abstract long convertDelay(TimeUnit fromUnit, long value, TimeUnit toUnit);

