  public static void uploadToZK(SolrZkClient zkClient, final Path fromPath, final String zkPath,
                                final Pattern filenameExclusions) throws IOException {

    String path = fromPath.toString();
    if (path.endsWith("*")) {
      path = path.substring(0, path.length() - 1);
    }

    final Path rootPath = Paths.get(path);

    if (!Files.exists(rootPath))
      throw new IOException("Path " + rootPath + " does not exist");

    Files.walkFileTree(rootPath, new SimpleFileVisitor<Path>() {
      @Override
      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
        String filename = file.getFileName().toString();
        if (filenameExclusions != null && filenameExclusions.matcher(filename).matches()) {
          log.info("uploadToZK skipping '{}' due to filenameExclusions '{}'", filename, filenameExclusions);
          return FileVisitResult.CONTINUE;
        }
        String zkNode = createZkNodeName(zkPath, rootPath, file);
        try {
          // if the path exists (and presumably we're uploading data to it) just set its data
          if (file.toFile().getName().equals(ZKNODE_DATA_FILE) && zkClient.exists(zkNode, true)) {
            zkClient.setData(zkNode, file.toFile(), true);
          } else {
            zkClient.makePath(zkNode, file.toFile(), false, true);
          }
        } catch (KeeperException | InterruptedException e) {
          throw new IOException("Error uploading file " + file.toString() + " to zookeeper path " + zkNode,
              SolrZkClient.checkInterrupted(e));
        }
        return FileVisitResult.CONTINUE;
      }

      @Override
      public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
        if (dir.getFileName().toString().startsWith(".")) return FileVisitResult.SKIP_SUBTREE;

        return FileVisitResult.CONTINUE;
      }
    });
  }

