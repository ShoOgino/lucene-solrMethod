  public Map<String,T> asShallowMap() {
    return new Map<String, T>() {
      @Override
      public int size() {
        return NamedList.this.size();
      }

      @Override
      public boolean isEmpty() {
        return size() == 0;
      }

      public boolean containsKey(Object  key) {
        return NamedList.this.get((String) key) != null ;
      }

      @Override
      public boolean containsValue(Object value) {
        return false;
      }

      @Override
      public T get(Object key) {
        return  NamedList.this.get((String) key);
      }

      @Override
      public T put(String  key, T value) {
        NamedList.this.add(key, value);
        return  null;
      }

      @Override
      public T remove(Object key) {
        return  NamedList.this.remove((String) key);
      }

      @Override
      public void putAll(Map m) {
        NamedList.this.addAll(m);

      }

      @Override
      public void clear() {
        NamedList.this.clear();
      }

      @Override
      public Set<String> keySet() {
        //TODO implement more efficiently
        return  NamedList.this.asMap(1).keySet();
      }

      @Override
      public Collection values() {
        //TODO implement more efficiently
        return  NamedList.this.asMap(1).values();
      }

      @Override
      public Set<Entry<String,T>> entrySet() {
        //TODO implement more efficiently
        return NamedList.this.asMap(1).entrySet();
      }
    };
  }

