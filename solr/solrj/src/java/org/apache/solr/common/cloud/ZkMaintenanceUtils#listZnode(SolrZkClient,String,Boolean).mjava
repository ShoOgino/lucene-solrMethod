  /**
   * Lists a ZNode child and (optionally) the znodes of all the children. No data is dumped.
   *
   * @param path    The node to remove on Zookeeper
   * @param recurse Whether to remove children.
   * @throws KeeperException      Could not perform the Zookeeper operation.
   * @throws InterruptedException Thread interrupted
   * @throws SolrServerException  zookeeper node has children and recurse not specified.
   * @return an indented list of the znodes suitable for display
   */
  public static String listZnode(SolrZkClient zkClient, String path, Boolean recurse) throws KeeperException, InterruptedException, SolrServerException {
    String root = path;

    if (path.toLowerCase(Locale.ROOT).startsWith("zk:")) {
      root = path.substring(3);
    }
    if (root.equals("/") == false && root.endsWith("/")) {
      root = root.substring(0, root.length() - 1);
    }

    StringBuilder sb = new StringBuilder();
    
    if (recurse == false) {
      for (String node : zkClient.getChildren(root, null, true)) {
        if (node.equals("zookeeper") == false) {
          sb.append(node).append(System.lineSeparator());
        }
      }
      return sb.toString();
    }
    
    traverseZkTree(zkClient, root, VISIT_ORDER.VISIT_PRE, znode -> {
      if (znode.startsWith("/zookeeper")) return; // can't do anything with this node!
      int iPos = znode.lastIndexOf("/");
      if (iPos > 0) {
        for (int idx = 0; idx < iPos; ++idx) sb.append(" ");
        sb.append(znode.substring(iPos + 1)).append(System.lineSeparator());
      } else {
        sb.append(znode).append(System.lineSeparator());
      }
    });

    return sb.toString();
  }

