  /**
   * Used for getting one or many arguments from NamedList objects that hold
   * configuration parameters. Finds all entries in the NamedList that match
   * the given name. If they are all strings or arrays of strings, remove them
   * from the NamedList and return the individual elements as a {@link Collection}.
   * Parameter order will be preserved if the returned collection is handled as
   * an {@link ArrayList}. Throws SolrException if any of the values associated
   * with the name are not strings or arrays of strings.  If exception is
   * thrown, the NamedList is not modified.  Returns an empty collection if no
   * matches found.  If you need to remove and retrieve all matching items from
   * the NamedList regardless of data type, use {@link #removeAll(String)} instead.
   * 
   * @param name
   *          The key to look up in the NamedList.
   * @return A collection of the values found.
   * @throws SolrException
   *           If values are found for the input key that are not strings or
   *           arrays of strings.
   */
  @SuppressWarnings("rawtypes")
  public Collection<String> removeConfigArgs(final String name)
      throws SolrException {
    List<T> objects = getAll(name);
    List<String> collection = new ArrayList<String>(size() / 2);
    final String err = "init arg '" + name + "' must be a string "
        + "(ie: 'str'), or an array (ie: 'arr') containing strings; found: ";
    
    for (Object o : objects) {
      if (o instanceof String) {
        collection.add((String) o);
        continue;
      }
      
      // If it's an array, convert to List (which is a Collection).
      if (o instanceof Object[]) {
        o = Arrays.asList((Object[]) o);
      }
      
      // If it's a Collection, collect each value.
      if (o instanceof Collection) {
        for (Object item : (Collection) o) {
          if (!(item instanceof String)) {
            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + item.getClass());
          }
          collection.add((String) item);
        }
        continue;
      }
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + o.getClass());
    }
    
    if (collection.size() > 0) {
      killAll(name);
    }
    
    return collection;
  }

