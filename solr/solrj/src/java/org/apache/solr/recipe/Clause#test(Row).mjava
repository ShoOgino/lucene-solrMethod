  TestStatus test(Row row) {
    AtomicReference<TestStatus> result = new AtomicReference<>(TestStatus.NOT_APPLICABLE);
    outer:
    for (Map.Entry<String, Map<String, List<RuleSorter.ReplicaStat>>> e : row.replicaInfo.entrySet()) {
      if (!collection.isMatch(e.getKey())) break;
      int count = 0;
      for (Map.Entry<String, List<RuleSorter.ReplicaStat>> e1 : e.getValue().entrySet()) {
        if (!shard.isMatch(e1.getKey())) break;
        count += e1.getValue().size();
        if (shard.val.equals(RuleSorter.EACH) && count > 0 && replica.isMatch(count) && tag.isMatch(row)) {
          result.set(TestStatus.FAIL);
          continue outer;
        }
        if (RuleSorter.EACH.equals(shard.val)) count = 0;
      }
      if (shard.val.equals(RuleSorter.ANY) && count > 0 && replica.isMatch(count) && !tag.isMatch(row)) {
        result.set(TestStatus.FAIL);
      }
    }
    if (result.get() == TestStatus.FAIL) row.violations.add(this);
    return result.get();
  }

