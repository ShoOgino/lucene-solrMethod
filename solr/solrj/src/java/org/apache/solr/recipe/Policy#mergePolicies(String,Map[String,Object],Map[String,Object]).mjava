  public static Map<String, Object> mergePolicies(String coll,
                                                  Map<String, Object> collPolicy,
                                                  Map<String, Object> defaultPolicy) {
    Collection<Map<String, Object>> conditions = getDeepCopy(getListOfMap("conditions", collPolicy), 4, true);
    insertColl(coll, conditions);
    List<Clause> parsedConditions = conditions.stream().map(Clause::new).collect(toList());
    Collection<Map<String, Object>> preferences = getDeepCopy(getListOfMap("preferences", collPolicy), 4, true);
    List<Preference> parsedPreferences = preferences.stream().map(Preference::new).collect(toList());
    if (defaultPolicy != null) {
      Collection<Map<String, Object>> defaultConditions = getDeepCopy(getListOfMap("conditions", defaultPolicy), 4, true);
      insertColl(coll,defaultConditions);
      defaultConditions.forEach(e -> {
        Clause clause = new Clause(e);
        for (Clause c : parsedConditions) {
          if (c.collection.equals(clause.collection) &&
              c.tag.name.equals(clause.tag.name) ) return;
        }
        conditions.add(e);
      });
      Collection<Map<String,Object>> defaultPreferences = getDeepCopy(getListOfMap("preferences", defaultPolicy), 4, true);
      defaultPreferences.forEach(e -> {
        Preference preference = new Preference(e);
        for (Preference p : parsedPreferences) {
          if(p.name == preference.name) return;
        }
        preferences.add(e);

      });
  }
    return Utils.makeMap("conditions", conditions, "preferences", preferences );

  }

