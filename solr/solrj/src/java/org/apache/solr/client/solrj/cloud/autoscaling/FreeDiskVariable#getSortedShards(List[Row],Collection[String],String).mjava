  static List<String> getSortedShards(List<Row> matrix, Collection<String> shardSet, String coll) {
    return  shardSet.stream()
        .map(shard1 -> {
          AtomicReference<Pair<String, Long>> result = new AtomicReference<>();
          for (Row node : matrix) {
            node.forEachShard(coll, (s, ri) -> {
              if (result.get() != null) return;
              if (s.equals(shard1) && ri.size() > 0) {
                Number sz = ((Number) ri.get(0).getVariable(CORE_IDX.tagName));
                if (sz != null) result.set(new Pair<>(shard1, sz.longValue()));
              }
            });
          }
          return result.get() == null ? new Pair<>(shard1, 0L) : result.get();
        })
        .sorted(Comparator.comparingLong(Pair::second))
        .map(Pair::first)
        .collect(Collectors.toList());

  }

