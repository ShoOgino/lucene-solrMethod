  /**
   * Transforms the domain by running a join query with the provided {@code from} and {@code to} parameters
   *
   * Join modifies the current domain by selecting the documents whose values in field {@code to} match values for the
   * field {@code from} in the current domain.
   *
   * @param from a field-name whose values are matched against {@code to} by the join
   * @param to a field name whose values should match values specified by the {@code from} field
   */
  public DomainMap setJoinTransformation(String from, String to) {
    if (from == null) {
      throw new IllegalArgumentException("Parameter 'from' must be non-null");
    }
    if (to == null) {
      throw new IllegalArgumentException("Parameter 'to' must be non-null");
    }

    final Map<String, Object> joinParameters = new HashMap<>();
    joinParameters.put("from", from);
    joinParameters.put("to", to);
    put("join", joinParameters);

    return this;
  }

