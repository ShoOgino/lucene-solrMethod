    public double predict(double[] values) {

      Matrix obs = scaledObservations != null ? scaledObservations : observations;
      Matrix knn = KnnEvaluator.search(obs, values, k, distanceMeasure);
      List<Number> indexes = (List<Number>)knn.getAttribute("indexes");

      if(robust) {
        //Get the median of the results.
        double[] vals = new double[indexes.size()];
        Percentile percentile = new Percentile();
        int i=0;
        for (Number n : indexes) {
           vals[i++]=outcomes[n.intValue()];
        }

        //Return 50 percentile.
        return percentile.evaluate(vals, 50);
      } else {
        //Get the average of the results
        double sum = 0;

        //Collect the outcomes for the nearest neighbors
        for (Number n : indexes) {
          sum += outcomes[n.intValue()];
        }

        //Return the average of the outcomes as the prediction.
        return sum / ((double) indexes.size());
      }
    }

