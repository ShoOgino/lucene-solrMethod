  /**
   * Tries to query a live server from the list provided in Req. Servers in the dead pool are skipped.
   * If a request fails due to an IOException, the server is moved to the dead pool for a certain period of
   * time, or until a test request on that server succeeds.
   *
   * Servers are queried in the exact order given (except servers currently in the dead pool are skipped).
   * If no live servers from the provided list remain to be tried, a number of previously skipped dead servers will be tried.
   * Req.getNumDeadServersToTry() controls how many dead servers will be tried.
   *
   * If no live servers are found a SolrServerException is thrown.
   *
   * @param req contains both the request as well as the list of servers to query
   *
   * @return the result of the request
   *
   * @throws IOException If there is a low-level I/O error.
   */
  public Rsp request(Req req) throws SolrServerException, IOException {
    Rsp rsp = new Rsp();
    Exception ex = null;
    boolean isUpdate = req.request instanceof IsUpdateRequest;
    List<ServerWrapper> skipped = new ArrayList<>(req.getNumDeadServersToTry());

    for (String serverStr : req.getServers()) {
      serverStr = normalize(serverStr);
      // if the server is currently a zombie, just skip to the next one
      ServerWrapper wrapper = zombieServers.get(serverStr);
      if (wrapper != null) {
        // System.out.println("ZOMBIE SERVER QUERIED: " + serverStr);
        if (skipped.size() < req.getNumDeadServersToTry())
          skipped.add(wrapper);
        continue;
      }
      rsp.server = serverStr;
      HttpSolrServer server = makeServer(serverStr);

      try {
        rsp.rsp = server.request(req.getRequest());
        return rsp; // SUCCESS
      } catch (SolrException e) {
        // we retry on 404 or 403 or 503 or 500
        // unless it's an update - then we only retry on connect exceptions
        if (!isUpdate && RETRY_CODES.contains(e.code())) {
          ex = addZombie(server, e);
        } else {
          // Server is alive but the request was likely malformed or invalid
          throw e;
        }
      } catch (SocketException e) {
        if (!isUpdate || e instanceof ConnectException) {
          ex = addZombie(server, e);
        } else {
          throw e;
        }
      } catch (SocketTimeoutException e) {
        if (!isUpdate) {
          ex = addZombie(server, e);
        } else {
          throw e;
        }
      } catch (SolrServerException e) {
        Throwable rootCause = e.getRootCause();
        if (!isUpdate && rootCause instanceof IOException) {
          ex = addZombie(server, e);
        } else if (isUpdate && rootCause instanceof ConnectException) {
          ex = addZombie(server, e);
        } else {
          throw e;
        }
      } catch (Exception e) {
        throw new SolrServerException(e);
      }
    }

    // try the servers we previously skipped
    for (ServerWrapper wrapper : skipped) {
      try {
        rsp.rsp = wrapper.solrServer.request(req.getRequest());
        zombieServers.remove(wrapper.getKey());
        return rsp; // SUCCESS
      } catch (SolrException e) {
        // we retry on 404 or 403 or 503 or 500
        // unless it's an update - then we only retry on connect exceptions
        if (!isUpdate && RETRY_CODES.contains(e.code())) {
          ex = e;
          // already a zombie, no need to re-add
        } else {
          // Server is alive but the request was malformed or invalid
          zombieServers.remove(wrapper.getKey());
          throw e;
        }

      } catch (SocketException e) {
        if (!isUpdate || e instanceof ConnectException) {
          ex = e;
        } else {
          throw e;
        }
      } catch (SocketTimeoutException e) {
        if (!isUpdate) {
          ex = e;
        } else {
          throw e;
        }
      } catch (SolrServerException e) {
        Throwable rootCause = e.getRootCause();
        if (!isUpdate && rootCause instanceof IOException) {
          ex = e;
        } else if (isUpdate && rootCause instanceof ConnectException) {
          ex = e;
        } else {
          throw e;
        }
      } catch (Exception e) {
        throw new SolrServerException(e);
      }
    }


    if (ex == null) {
      throw new SolrServerException("No live SolrServers available to handle this request");
    } else {
      throw new SolrServerException("No live SolrServers available to handle this request:" + zombieServers.keySet(), ex);
    }

  }

