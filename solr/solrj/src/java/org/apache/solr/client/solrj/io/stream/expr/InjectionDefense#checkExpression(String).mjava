  /**
   * Perform some initial checks and establish the expected number of expressions
   *
   * @param exprString the expression to check.
   */
  private void checkExpression(String exprString) {
    exprString = STRING_PARAM.matcher(exprString).replaceAll("foo");
    exprString = NUMBER_PARAM.matcher(exprString).replaceAll("0");
    Matcher eMatcher = EXPRESSION_PARAM.matcher(exprString);
    StringBuffer temp = new StringBuffer();
    while (eMatcher.find()) {
      Matcher counter = EXPRESSION_COUNT.matcher(eMatcher.group());
      eMatcher.appendReplacement(temp, "noop()");
      if (counter.find()) {
        Integer subExprCount = Integer.valueOf(counter.group());
        if (subExprCount < 1) {
          throw new IllegalStateException("Expression Param must contribute at least 1 expression!" +
              " ?(1)? is the minimum allowed ");
        }
        expressionCount += (subExprCount - 1); // the noop() we insert will get counted later.
      }
    }
    eMatcher.appendTail(temp);
    exprString = temp.toString();

    StreamExpression parsed = StreamExpressionParser.parse(exprString);
    if (parsed != null) {
      expressionCount += countExpressions(parsed);
    } else {
      throw new IllegalStateException("Invalid expression (parse returned null):" + exprString);
    }
  }

