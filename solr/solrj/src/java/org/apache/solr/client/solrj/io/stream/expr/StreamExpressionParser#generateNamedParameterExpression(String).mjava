  private static StreamExpressionNamedParameter generateNamedParameterExpression(String clause){
    String working = clause.trim();

    // might be overkill as the only place this is called from does this check already
    if(!isNamedParameterClause(working)){
      throw new IllegalArgumentException(String.format(Locale.ROOT,"'%s' is not a proper named parameter clause", working));
    }

    // Get name
    int firstOpenEquals = findNextClear(working, 0, '=');
    StreamExpressionNamedParameter namedParameter = new StreamExpressionNamedParameter(working.substring(0, firstOpenEquals).trim());

    // we know this is ok because of the check in isNamedParameter
    String parameter = working.substring(firstOpenEquals + 1, working.length());
    if(isExpressionClause(parameter)){
      namedParameter.setParameter(generateStreamExpression(parameter));
    }
    else{
      // if wrapped in quotes, remove them
      if(parameter.startsWith("\"") && parameter.endsWith("\"")){
        parameter = parameter.substring(1, parameter.length() - 1).trim();
        if(0 == parameter.length()){
          throw new IllegalArgumentException(String.format(Locale.ROOT,"'%s' is not a proper named parameter clause", working));
        }
      }

      // if contain \" replace with "
      if(parameter.contains("\\\"")){
        parameter = parameter.replace("\\\"", "\"");
        if(0 == parameter.length()){
          throw new IllegalArgumentException(String.format(Locale.ROOT,"'%s' is not a proper named parameter clause", working));
        }
      }

      // If contains ` replace with "
      // This allows ` to be used as a quote character

      if(parameter.contains("`")){
        parameter = parameter.replace('`', '"');
        if(0 == parameter.length()){
          throw new IllegalArgumentException(String.format(Locale.ROOT,"'%s' is not a proper named parameter clause", working));
        }
      }


      namedParameter.setParameter(new StreamExpressionValue(parameter));
    }

    return namedParameter;
  }

