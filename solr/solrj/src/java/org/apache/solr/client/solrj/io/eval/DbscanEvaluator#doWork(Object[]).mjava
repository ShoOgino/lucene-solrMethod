  @Override
  public Object doWork(Object values[]) throws IOException {

    Matrix matrix = null;
    double e = 0;
    int minPoints = 1;
    DistanceMeasure distanceMeasure = new EuclideanDistance();

    if(values.length < 3 || values.length > 4) {
      throw new IOException("The dbscan scan function requires 3 or 4 parameters.");
    }

    if(values[0] instanceof Matrix) {
      matrix = (Matrix)values[0];
    } else {
      throw new IOException("The first parameter for dbscan should be the observation matrix.");
    }

    if(values[1] instanceof Number) {
      e = ((Number)values[1]).doubleValue();
    } else {
      throw new IOException("The second parameter for dbscan should be e.");
    }

    if(values[2] instanceof Number) {
      minPoints = ((Number)values[2]).intValue();
    } else {
      throw new IOException("The third parameter for dbscan should be minPoints.");
    }

    if(values.length > 3) {
      distanceMeasure = (DistanceMeasure)values[3];
    }

    DBSCANClusterer<ClusterPoint> dbscan = new DBSCANClusterer(e, minPoints, distanceMeasure);
    List<ClusterPoint> points = new ArrayList();
    double[][] data = matrix.getData();
    List<String> ids = matrix.getRowLabels();

    for(int i=0; i<data.length; i++) {
      double[] vec = data[i];
      if(ids != null) {
        points.add(new ClusterPoint(ids.get(i), vec));
      } else {
        points.add(new ClusterPoint(Integer.toString(i), vec));
      }
    }

    Map fields = new HashMap();

    fields.put("e", e);
    fields.put("minPoints", minPoints);
    fields.put("distance", distanceMeasure.toString());

    return new ClusterTuple(fields, dbscan.cluster(points), matrix.getColumnLabels());
  }

