    @Override
    public Registry<ConnectionSocketFactory> getSchemaRegistry() {
      // this mimics PoolingHttpClientConnectionManager's default behavior,
      // except that we explicitly use SSLConnectionSocketFactory.getSystemSocketFactory()
      // to pick up the system level default SSLContext (where javax.net.ssl.* properties
      // related to keystore & truststore are specified)
      RegistryBuilder<ConnectionSocketFactory> builder = RegistryBuilder.<ConnectionSocketFactory> create();
      builder.register("http", PlainConnectionSocketFactory.getSocketFactory());

      // logic to turn off peer host check
      SSLConnectionSocketFactory sslConnectionSocketFactory = null;
      boolean sslCheckPeerName = toBooleanDefaultIfNull(
          toBooleanObject(System.getProperty(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME)), true);
      if (sslCheckPeerName) {
        String[] cipherSuites = split(System.getProperty("https.cipherSuites"));
        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),
            getSupportedSSLProtocols(), cipherSuites, SSLConnectionSocketFactory.getDefaultHostnameVerifier());
      } else {
        sslConnectionSocketFactory = new SSLConnectionSocketFactory(SSLContexts.createSystemDefault(),
                                                                    NoopHostnameVerifier.INSTANCE);
        log.debug(HttpClientUtil.SYS_PROP_CHECK_PEER_NAME + "is false, hostname checks disabled.");
      }
      builder.register("https", sslConnectionSocketFactory);

      return builder.build();
    }

