  public ComplexEvaluator(StreamExpression expression, StreamFactory factory, List<String> ignoredNamedParameters) throws IOException{
    constructingFactory = factory;
    
    // We have to do this because order of the parameters matter
    List<StreamExpressionParameter> parameters = factory.getOperandsOfType(expression, StreamExpressionParameter.class);
    
    for(StreamExpressionParameter parameter : parameters){
      if(parameter instanceof StreamExpression){
        // possible evaluator
        StreamExpression streamExpression = (StreamExpression)parameter;
        if(factory.doesRepresentTypes(streamExpression, ComplexEvaluator.class)){
          subEvaluators.add(factory.constructEvaluator(streamExpression));
        }
        else if(factory.doesRepresentTypes(streamExpression, SimpleEvaluator.class)){
          subEvaluators.add(factory.constructEvaluator(streamExpression));
        }
        else{
          // Will be treated as a field name
          subEvaluators.add(new FieldEvaluator(streamExpression.toString()));
        }
      }
      else if(parameter instanceof StreamExpressionValue){
        if(0 != ((StreamExpressionValue)parameter).getValue().length()){
          // special case - if evaluates to a number, boolean, or null then we'll treat it 
          // as a RawValueEvaluator
          Object value = factory.constructPrimitiveObject(((StreamExpressionValue)parameter).getValue());
          if(null == value || value instanceof Boolean || value instanceof Number){
            subEvaluators.add(new RawValueEvaluator(value));
          }
          else if(value instanceof String){
            subEvaluators.add(new FieldEvaluator((String)value));
          }
        }
      }
    }
    
    Set<String> namedParameters = factory.getNamedOperands(expression).stream().map(param -> param.getName()).collect(Collectors.toSet());
    long ignorableCount = ignoredNamedParameters.stream().filter(name -> namedParameters.contains(name)).count();
    
    if(0 != expression.getParameters().size() - subEvaluators.size() - ignorableCount){
      if(namedParameters.isEmpty()){
        throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - unknown operands found - expecting only StreamEvaluators or field names", expression));
      }
      else{
        throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - unknown operands found - expecting only StreamEvaluators, field names, or named parameters [%s]", expression, namedParameters.stream().collect(Collectors.joining(","))));
      }
    }
  }

