  public Tuple read() throws IOException {
    try {
      if (tupleIterator == null) {
        Map<String, Double> termScores = new HashMap<>();
        Map<String, Long> docFreqs = new HashMap<>();


        long numDocs = 0;
        for (Future<NamedList> getTopTermsCall : callShards(getShardUrls())) {
          NamedList resp = getTopTermsCall.get();

          NamedList<Double> shardTopTerms = (NamedList<Double>)resp.get("featuredTerms");
          NamedList<Integer> shardDocFreqs = (NamedList<Integer>)resp.get("docFreq");

          numDocs += (Integer)resp.get("numDocs");

          for (int i = 0; i < shardTopTerms.size(); i++) {
            String term = shardTopTerms.getName(i);
            double score = shardTopTerms.getVal(i);
            int docFreq = shardDocFreqs.get(term);
            double prevScore = termScores.containsKey(term) ? termScores.get(term) : 0;
            long prevDocFreq = docFreqs.containsKey(term) ? docFreqs.get(term) : 0;
            termScores.put(term, prevScore + score);
            docFreqs.put(term, prevDocFreq + docFreq);

          }
        }

        List<Tuple> tuples = new ArrayList<>(numTerms);
        termScores = sortByValue(termScores);
        int index = 0;
        for (Map.Entry<String, Double> termScore : termScores.entrySet()) {
          if (tuples.size() == numTerms) break;
          index++;
          Tuple tuple = new Tuple();
          tuple.put(ID, featureSet + "_" + index);
          tuple.put("index_i", index);
          tuple.put("term_s", termScore.getKey());
          tuple.put("score_f", termScore.getValue());
          tuple.put("featureSet_s", featureSet);
          long docFreq = docFreqs.get(termScore.getKey());
          double d = Math.log(((double)numDocs / (double)(docFreq + 1)));
          tuple.put("idf_d", d);
          tuples.add(tuple);
        }

        tuples.add(Tuple.EOF());

        tupleIterator = tuples.iterator();
      }

      return tupleIterator.next();
    } catch(Exception e) {
      throw new IOException(e);
    }
  }

