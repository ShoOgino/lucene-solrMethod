  private Checker constructChecker(Object fromValue) throws IOException{
    if(null == fromValue){
      return new NullChecker() {
        @Override
        public boolean test(Object left, Object right) {
          return null == left && null == right;
        }
      };
    }
    else if(fromValue instanceof Boolean){
      return new BooleanChecker(){
        @Override
        public boolean test(Object left, Object right) {
          return (boolean)left.equals((boolean)right);
        }
      };
    }
    else if(fromValue instanceof Number){
      return new NumberChecker(){
        @Override
        public boolean test(Object left, Object right) {
          return 0 == (new BigDecimal(left.toString())).compareTo(new BigDecimal(right.toString()));
        }
      };
    }
    else if(fromValue instanceof String){
      return new StringChecker(){
        @Override
        public boolean test(Object left, Object right) {
          return left.equals(right);
        }
      };
    }
    
    throw new IOException(String.format(Locale.ROOT,"Unable to check %s(...) for values of type '%s'", constructingFactory.getFunctionName(getClass()), fromValue.getClass().getSimpleName()));
  }

