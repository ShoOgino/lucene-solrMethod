  @Override
  public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) throws IOException {
    HttpClient client = solrClient.getHttpClient();
    final HttpRequestBase req;
    HttpEntity entity = null;
    if (payload != null) {
      entity = new StringEntity(payload, "UTF-8");
    }
    switch (method) {
      case GET:
        req = new HttpGet(url);
        break;
      case POST:
        req = new HttpPost(url);
        if (entity != null) {
          ((HttpPost)req).setEntity(entity);
        }
        break;
      case PUT:
        req = new HttpPut(url);
        if (entity != null) {
          ((HttpPut)req).setEntity(entity);
        }
        break;
      case DELETE:
        req = new HttpDelete(url);
        break;
      default:
        throw new IOException("Unsupported method " + method);
    }
    if (headers != null) {
      headers.forEach((k, v) -> req.addHeader(k, v));
    }
    RequestConfig.Builder requestConfigBuilder = HttpClientUtil.createDefaultRequestConfigBuilder();
    if (timeout > 0) {
      requestConfigBuilder.setSocketTimeout(timeout);
      requestConfigBuilder.setConnectTimeout(timeout);
    }
    requestConfigBuilder.setRedirectsEnabled(followRedirects);
    req.setConfig(requestConfigBuilder.build());
    HttpClientContext httpClientRequestContext = HttpClientUtil.createNewHttpClientRequestContext();
    HttpResponse rsp = client.execute(req, httpClientRequestContext);
    int statusCode = rsp.getStatusLine().getStatusCode();
    if (statusCode != 200) {
      throw new IOException("Error sending request to " + url + ", HTTP response: " + rsp.toString());
    }
    HttpEntity responseEntity = rsp.getEntity();
    if (responseEntity != null && responseEntity.getContent() != null) {
      return EntityUtils.toByteArray(responseEntity);
    } else {
      return EMPTY;
    }
  }

