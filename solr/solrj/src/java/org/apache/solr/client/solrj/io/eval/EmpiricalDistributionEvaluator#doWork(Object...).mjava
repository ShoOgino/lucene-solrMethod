  @Override
  public Object doWork(Object... values) throws IOException {

    if(!(values[0] instanceof List<?>)){
      throw new StreamEvaluatorException("List value expected but found type %s for value %s", values[0].getClass().getName(), values[0].toString());
    }

    if(values.length == 2) {
      Number n = (Number)values[1];
      bins = n.intValue();
    }

    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);
    
    double[] backingValues = ((List<?>)values[0]).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).sorted().toArray();

    empiricalDistribution.load(backingValues);

    return empiricalDistribution;
  }

