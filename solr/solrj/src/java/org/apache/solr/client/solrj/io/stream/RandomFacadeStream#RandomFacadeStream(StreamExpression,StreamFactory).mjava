  public RandomFacadeStream(StreamExpression expression, StreamFactory factory) throws IOException{
    // grab all parameters out
    String collectionName = factory.getValueOperand(expression, 0);
    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);
    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, "zkHost");


    // Collection Name
    if(null == collectionName){
      throw new IOException(String.format(Locale.ROOT,"invalid expression %s - collectionName expected as first operand",expression));
    }

    // pull out known named params
    Map<String,String> params = new HashMap<String,String>();
    for(StreamExpressionNamedParameter namedParam : namedParams){
      if(!namedParam.getName().equals("zkHost") && !namedParam.getName().equals("buckets") && !namedParam.getName().equals("bucketSorts") && !namedParam.getName().equals("limit")){
        params.put(namedParam.getName(), namedParam.getParameter().toString().trim());
      }
    }

    //Add sensible defaults

    if(!params.containsKey("q")) {
      params.put("q", "*:*");
    }

    if(!params.containsKey("fl")) {
      params.put("fl", "*");
    }

    if(!params.containsKey("rows")) {
      params.put("rows", "500");
    }

    // zkHost, optional - if not provided then will look into factory list to get
    String zkHost = null;
    if(null == zkHostExpression){
      zkHost = factory.getCollectionZkHost(collectionName);
      if(zkHost == null) {
        zkHost = factory.getDefaultZkHost();
      }
    }
    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){
      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();
    }
    if(null == zkHost){
      throw new IOException(String.format(Locale.ROOT,"invalid expression %s - zkHost not found for collection '%s'",expression,collectionName));
    }

    if(params.get(ROWS) != null) {
      int rows = Integer.parseInt(params.get(ROWS));
      if(rows >= 5000) {
        DeepRandomStream deepRandomStream = new DeepRandomStream();
        deepRandomStream.init(collectionName, zkHost, toSolrParams(params));
        this.innerStream = deepRandomStream;
      } else {
        RandomStream randomStream = new RandomStream();
        randomStream.init(zkHost, collectionName, params);
        this.innerStream = randomStream;
      }
    } else {
      RandomStream randomStream = new RandomStream();
      randomStream.init(zkHost, collectionName, params);
      this.innerStream = randomStream;
    }
  }

