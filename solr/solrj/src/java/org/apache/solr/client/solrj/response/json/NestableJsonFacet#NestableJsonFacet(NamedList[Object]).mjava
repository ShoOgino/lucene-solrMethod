  public NestableJsonFacet(NamedList<Object> facetNL) {
    queryFacetsByName = new HashMap<>();
    bucketBasedFacetByName = new HashMap<>();
    statFacetsByName = new HashMap<>();
    heatmapFacetsByName = new HashMap<>();

    for (Map.Entry<String, Object> entry : facetNL) {
      final String key = entry.getKey();
      if (getKeysToSkip().contains(key)) {
        continue;
      } else if ("count".equals(key)) {
        domainCount = ((Number) entry.getValue()).longValue();
      } else if(entry.getValue() instanceof Number) { // Stat/agg facet value
        statFacetsByName.put(key, (Number)entry.getValue());
      } else if(entry.getValue() instanceof NamedList) { // Either heatmap/query/range/terms facet
        final NamedList<Object> facet = (NamedList<Object>) entry.getValue();
        final boolean isBucketBased = facet.get("buckets") != null;
        final boolean isHeatmap = HeatmapJsonFacet.isHeatmapFacet(facet);
        if (isBucketBased) {
          bucketBasedFacetByName.put(key, new BucketBasedJsonFacet(facet));
        } else if (isHeatmap) {
          heatmapFacetsByName.put(key, new HeatmapJsonFacet(facet));
        } else { // "query" facet
          queryFacetsByName.put(key, new NestableJsonFacet(facet));
        }
      }
    }
  }

