  List<Violation> testGroupNodes(Policy.Session session, double[] deviations) {
    //e.g:  {replica:'#EQUAL', shard:'#EACH',  sysprop.zone:'#EACH'}
    ComputedValueEvaluator eval = new ComputedValueEvaluator(session);
    eval.collName = (String) collection.getValue();
    Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, eval);

    Set tags = getUniqueTags(session, eval);
    if (tags.isEmpty()) return Collections.emptyList();

    Set<String> shards = getShardNames(session, eval);

    for (String s : shards) {
      final ReplicaCount replicaCount = new ReplicaCount();
      eval.shardName = s;

      for (Object tag : tags) {
        replicaCount.reset();
        for (Row row : session.matrix) {
         if(!isRowPass(eval, tag, row)) continue;
          addReplicaCountsForNode(eval, replicaCount, row);
        }

        SealedClause sealedClause = this.getSealedClause(eval);
        if (!sealedClause.replica.isPass(replicaCount)) {
          ReplicaCount replicaCountCopy = replicaCount.copy();
          Violation violation = new Violation(sealedClause,
              eval.collName,
              eval.shardName,
              null,
              replicaCountCopy,
              sealedClause.getReplica().replicaCountDelta(replicaCountCopy),
              tag);
          ctx.resetAndAddViolation(tag, replicaCountCopy, violation);
          sealedClause.addViolatingReplicasForGroup(sealedClause.tag, eval, ctx, this.tag.name, tag, violation, session.matrix);
          if (!this.strict && deviations != null) {
            this.tag.varType.computeDeviation(session, deviations, replicaCount, sealedClause);
          }
        } else {
          if (replica.op == RANGE_EQUAL) this.tag.varType.computeDeviation(session, deviations, replicaCount, sealedClause);
        }
      }
    }
    return ctx.allViolations;
  }

