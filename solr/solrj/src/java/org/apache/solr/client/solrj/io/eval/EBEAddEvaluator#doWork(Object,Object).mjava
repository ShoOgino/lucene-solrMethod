  @Override
  public Object doWork(Object first, Object second) throws IOException{
    if(null == first){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - null found for the first value",toExpression(constructingFactory)));
    }
    if(null == second){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - null found for the second value",toExpression(constructingFactory)));
    }

    if(first instanceof List && second instanceof List) {
      double[] result = MathArrays.ebeAdd(
          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),
          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()
      );

      List<Number> numbers = new ArrayList();
      for (double d : result) {
        numbers.add(d);
      }

      return numbers;
    } else if(first instanceof Matrix && second instanceof Matrix) {
      double[][] data1 = ((Matrix) first).getData();
      double[][] data2 = ((Matrix) second).getData();
      Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(data1, false);
      Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(data2, false);
      Array2DRowRealMatrix matrix3 = matrix1.add(matrix2);
      return new Matrix(matrix3.getDataRef());
    } else {
      throw new IOException("Parameters for ebeAdd must either be two numeric arrays or two matrices. ");
    }
  }

