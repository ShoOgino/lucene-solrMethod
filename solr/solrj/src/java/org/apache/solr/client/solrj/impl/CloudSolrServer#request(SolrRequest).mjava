  @Override
  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {
    connect();

    // TODO: if you can hash here, you could favor the shard leader
    
    CloudState cloudState = zkStateReader.getCloudState();

    SolrParams reqParams = request.getParams();
    if (reqParams == null) {
      reqParams = new ModifiableSolrParams();
    }
    String collection = reqParams.get("collection", defaultCollection);
    
    if (collection == null) {
      throw new SolrServerException("No collection param specified on request and no default collection has been set.");
    }
    
    // Extract each comma separated collection name and store in a List.
    List<String> collectionList = StrUtils.splitSmart(collection, ",", true);
    
    // Retrieve slices from the cloud state and, for each collection specified,
    // add it to the Map of slices.
    Map<String,Slice> slices = new HashMap<String,Slice>();
    for (int i = 0; i < collectionList.size(); i++) {
      String coll= collectionList.get(i);
      ClientUtils.appendMap(coll, slices, cloudState.getSlices(coll));
    }

    Set<String> liveNodes = cloudState.getLiveNodes();

    // IDEA: have versions on various things... like a global cloudState version
    // or shardAddressVersion (which only changes when the shards change)
    // to allow caching.

    // build a map of unique nodes
    // TODO: allow filtering by group, role, etc
    Map<String,ZkNodeProps> nodes = new HashMap<String,ZkNodeProps>();
    List<String> urlList = new ArrayList<String>();
    for (Slice slice : slices.values()) {
      for (ZkNodeProps nodeProps : slice.getShards().values()) {
        ZkCoreNodeProps coreNodeProps = new ZkCoreNodeProps(nodeProps);
        String node = coreNodeProps.getNodeName();
        if (!liveNodes.contains(coreNodeProps.getNodeName())
            || !coreNodeProps.getState().equals(
                ZkStateReader.ACTIVE)) continue;
        if (nodes.put(node, nodeProps) == null) {
          String url = coreNodeProps.getCoreUrl();
          urlList.add(url);
        }
      }
    }

    Collections.shuffle(urlList, rand);
    //System.out.println("########################## MAKING REQUEST TO " + urlList);
 
    LBHttpSolrServer.Req req = new LBHttpSolrServer.Req(request, urlList);
    LBHttpSolrServer.Rsp rsp = lbServer.request(req);
    return rsp.getResponse();
  }

