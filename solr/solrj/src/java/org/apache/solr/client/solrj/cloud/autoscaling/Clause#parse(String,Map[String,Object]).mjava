  Condition parse(String s, Map<String, Object> m) {

    Object expectedVal = null;
    ComputedType computedType = null;
    Object val = m.get(s);
    Type varType = VariableBase.getTagType(s);
    if (varType.meta.isHidden()) {
      throwExp(m, "''{0}'' is not allowed", varType.tagName);
    }
    try {
      String conditionName = s.trim();
      Operand operand = null;
      if (val == null) {
        operand = WILDCARD;
        expectedVal = Policy.ANY;
      } else if (val instanceof List) {
        if (!varType.meta.supportArrayVals()) {
          throwExp(m, "array values are not supported for {0}", conditionName);
        }
        expectedVal = readListVal(m, (List) val, varType, conditionName);
        operand = Operand.IN;
      } else if (val instanceof String) {
        String strVal = ((String) val).trim();
        val = strVal;
        operand = getOperand(strVal);
        strVal = strVal.substring(Operand.EQUAL == operand || WILDCARD == operand ? 0 : 1);
        for (ComputedType t : ComputedType.values()) {
          String changedVal = t.match(strVal);
          if (changedVal != null) {
            computedType = t;
            strVal = changedVal;
            if (varType == null || !varType.supportedComputedTypes.contains(computedType)) {
              throwExp(m, "''{0}'' is not allowed for variable :  ''{1}''", t, conditionName);
            }
          }
        }
        if (computedType == null && ((String) val).charAt(0) == '#' && !varType.wildCards.contains(val)) {
          throwExp(m, "''{0}'' is not an allowed value for ''{1}'', supported value is : {2} ", val, conditionName, varType.wildCards);

        }
        operand = varType == null ? operand : varType.getOperand(operand, strVal, computedType);
        expectedVal = validate(s, new Condition(s, strVal, operand, computedType, null), true);

      } else if (val instanceof Number) {
        operand = Operand.EQUAL;
        operand = varType.getOperand(operand, val, null);
        expectedVal = validate(s, new Condition(s, val, operand, null, null), true);
      }
      return new Condition(conditionName, expectedVal, operand, computedType, this);

    } catch (IllegalArgumentException iae) {
      throw iae;
    } catch (Exception e) {
      throwExp(m, "Invalid tag : {0} ", s);
      return null;
    }
  }

