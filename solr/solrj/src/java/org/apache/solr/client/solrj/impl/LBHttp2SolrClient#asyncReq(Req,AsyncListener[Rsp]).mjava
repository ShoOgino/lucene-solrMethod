  public Cancellable asyncReq(Req req, AsyncListener<Rsp> asyncListener) {
    Rsp rsp = new Rsp();
    boolean isNonRetryable = req.request instanceof IsUpdateRequest || ADMIN_PATHS.contains(req.request.getPath());
    ServerIterator it = new ServerIterator(req, zombieServers);
    asyncListener.onStart();
    final AtomicBoolean cancelled = new AtomicBoolean(false);
    AtomicReference<Cancellable> currentCancellable = new AtomicReference<>();
    RetryListener retryListener = new RetryListener() {

      @Override
      public void onSuccess(Rsp rsp) {
        asyncListener.onSuccess(rsp);
      }

      @Override
      public void onFailure(Exception e, boolean retryReq) {
        if (retryReq) {
          String url;
          try {
            url = it.nextOrError(e);
          } catch (SolrServerException ex) {
            asyncListener.onFailure(e);
            return;
          }
          try {
            MDC.put("LBSolrClient.url", url);
            synchronized (cancelled) {
              if (cancelled.get()) {
                return;
              }
              Cancellable cancellable = doRequest(url, req, rsp, isNonRetryable, it.isServingZombieServer(), this);
              currentCancellable.set(cancellable);
            }
          } finally {
            MDC.remove("LBSolrClient.url");
          }
        } else {
          asyncListener.onFailure(e);
        }
      }
    };
    try {
      Cancellable cancellable = doRequest(it.nextOrError(), req, rsp, isNonRetryable, it.isServingZombieServer(), retryListener);
      currentCancellable.set(cancellable);
    } catch (SolrServerException e) {
      asyncListener.onFailure(e);
    }
    return () -> {
      synchronized (cancelled) {
        cancelled.set(true);
        if (currentCancellable.get() != null) {
          currentCancellable.get().cancel();
        }
      }
    };
  }

