  /**
   * Specify a facet sent as a part of this JSON request.
   *
   * This method may be called multiple times.  Each call made with a different {@code facetName} value will add a new
   * top-level facet.  Repeating {@code facetName} values will cause previous facets with that {@code facetName} to be
   * overwritten.
   * <p>
   * <b>Example:</b> You wish to send the JSON request: {"query": "*:*", "facet": { "top_cats":{"type": "terms", "field":"cat"}}}.  You
   * would represent the facet in this request as follows:
   * <pre>
   *     final MapWriter facetWriter = new MapWriter() {
   *         &#64;Override
   *         public void writeMap(EntryWriter ew) throws IOException {
   *             ew.put("type", "terms");
   *             ew.put("field", "cat");
   *         }
   *     };
   * </pre>
   *
   * @param facetName the name of the top-level facet you'd like to add.  Avoid choosing facet names which overload
   *                  properties already present in the JSON response schema (e.g. "count", "val", "minX", etc.)
   * @param facetWriter a MapWriter representing the facet you wish to add to the request
   */
  public JsonQueryRequest withFacet(String facetName, MapWriter facetWriter) {
    if (facetName == null) {
      throw new IllegalArgumentException("'facetName' parameter must be non-null");
    }
    if (facetWriter == null) {
      throw new IllegalArgumentException("'facetWriter' parameter must be non-null");
    }

    if (! jsonRequestMap.containsKey("facet")) {
      jsonRequestMap.put("facet", new HashMap<String, Object>());
    }

    final Map<String, Object> facetMap = (Map<String, Object>) jsonRequestMap.get("facet");
    facetMap.put(facetName, facetWriter);
    return this;
  }

