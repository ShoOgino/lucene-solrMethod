    public TriggerListenerConfig(String name, Map<String, Object> properties) {
      this.name = name;
      if (properties == null) {
        this.properties = Collections.emptyMap();
      } else {
        this.properties = Collections.unmodifiableMap(new LinkedHashMap<>(properties));
      }
      trigger = (String)this.properties.get(AutoScalingParams.TRIGGER);
      List<Object> stageNames = getList(AutoScalingParams.STAGE, this.properties);
      for (Object stageName : stageNames) {
        try {
          TriggerEventProcessorStage stage = TriggerEventProcessorStage.valueOf(String.valueOf(stageName).toUpperCase(Locale.ROOT));
          stages.add(stage);
        } catch (Exception e) {
          log.warn("Invalid stage name '{}' for '{}' in listener config, skipping it in: {}",
              stageName, name, properties);
        }
      }
      listenerClass = (String)this.properties.get(AutoScalingParams.CLASS);
      Set<String> bActions = new LinkedHashSet<>();
      getList(AutoScalingParams.BEFORE_ACTION, this.properties).forEach(o -> bActions.add(String.valueOf(o)));
      beforeActions = Collections.unmodifiableSet(bActions);
      Set<String> aActions = new LinkedHashSet<>();
      getList(AutoScalingParams.AFTER_ACTION, this.properties).forEach(o -> aActions.add(String.valueOf(o)));
      afterActions = Collections.unmodifiableSet(aActions);
    }

