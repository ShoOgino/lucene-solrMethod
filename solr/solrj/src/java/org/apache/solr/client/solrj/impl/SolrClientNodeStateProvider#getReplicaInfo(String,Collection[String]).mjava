  @Override
  public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {
    Map<String, Map<String, List<ReplicaInfo>>> result = nodeVsCollectionVsShardVsReplicaInfo.computeIfAbsent(node, s -> emptyMap());
    if (!keys.isEmpty()) {
      Map<String, Pair<String, ReplicaInfo>> keyVsReplica = new HashMap<>();
      Row.forEachReplica(result, r -> {
        for (String key : keys) {
          if (r.getVariables().containsKey(key)) continue;
          String perReplicaAttrKeyPrefix = "solr.core." + r.getCollection() + "." + r.getShard() + "." + Utils.parseMetricsReplicaName(r.getCollection(), r.getCore()) + ":";
          Suggestion.ConditionType tagType = Suggestion.getTagType(key);
          if(tagType == null) continue;
          String perReplicaValue = tagType.metricsAttribute;
          perReplicaValue = perReplicaValue == null ? key : perReplicaValue;
          perReplicaAttrKeyPrefix += perReplicaValue;
          keyVsReplica.put(perReplicaAttrKeyPrefix, new Pair<>(key, r));
        }
      });

      if (!keyVsReplica.isEmpty()) {
        ClientSnitchCtx ctx = new ClientSnitchCtx(null, null, emptyMap(), solrClient);
        fetchMetrics(node, ctx,
            keyVsReplica.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getKey)));
        ctx.getTags().forEach((k, o) -> {
          Pair<String, ReplicaInfo> p = keyVsReplica.get(k);
          Suggestion.ConditionType validator = Suggestion.getTagType(p.first());
          if (validator != null) o = validator.convertVal(o);
          if (p.second() != null) p.second().getVariables().put(p.first(), o);
        });

      }
    }
    return result;
  }

