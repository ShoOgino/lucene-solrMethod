  @Override
  @SuppressWarnings({"unchecked"})
  public Object doWork(Object ... values) throws IOException{

    if(values.length == 1) {
      if (values[0] instanceof Matrix) {
        Matrix matrix = (Matrix) values[0];
        EuclideanDistance euclideanDistance = new EuclideanDistance();
        return distance(euclideanDistance, matrix);
      } else {
        throw new IOException("distance function operates on either two numeric arrays or a single matrix as parameters.");
      }
    } else if(values.length == 2) {
      Object first = values[0];
      Object second = values[1];

      if (null == first) {
        throw new IOException(String.format(Locale.ROOT, "Invalid expression %s - null found for the first value", toExpression(constructingFactory)));
      }

      if (null == second) {
        throw new IOException(String.format(Locale.ROOT, "Invalid expression %s - null found for the second value", toExpression(constructingFactory)));
      }

      if(first instanceof Matrix) {
        Matrix matrix = (Matrix) first;
        DistanceMeasure distanceMeasure = (DistanceMeasure)second;
        return distance(distanceMeasure, matrix);
      } else {
        if (!(first instanceof List<?>)) {
          throw new IOException(String.format(Locale.ROOT, "Invalid expression %s - found type %s for the first value, expecting a list of numbers", toExpression(constructingFactory), first.getClass().getSimpleName()));
        }

        if (!(second instanceof List<?>)) {
          throw new IOException(String.format(Locale.ROOT, "Invalid expression %s - found type %s for the second value, expecting a list of numbers", toExpression(constructingFactory), first.getClass().getSimpleName()));
        }

        DistanceMeasure distanceMeasure = new EuclideanDistance();
        return distanceMeasure.compute(
            ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),
            ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()
        );
      }
    } else if (values.length == 3) {
      Object first = values[0];
      Object second = values[1];
      DistanceMeasure distanceMeasure = (DistanceMeasure)values[2];

      if (null == first) {
        throw new IOException(String.format(Locale.ROOT, "Invalid expression %s - null found for the first value", toExpression(constructingFactory)));
      }

      if (null == second) {
        throw new IOException(String.format(Locale.ROOT, "Invalid expression %s - null found for the second value", toExpression(constructingFactory)));
      }

      if (!(first instanceof List<?>)) {
        throw new IOException(String.format(Locale.ROOT, "Invalid expression %s - found type %s for the first value, expecting a list of numbers", toExpression(constructingFactory), first.getClass().getSimpleName()));
      }

      if (!(second instanceof List<?>)) {
        throw new IOException(String.format(Locale.ROOT, "Invalid expression %s - found type %s for the second value, expecting a list of numbers", toExpression(constructingFactory), first.getClass().getSimpleName()));
      }

      return distanceMeasure.compute(
          ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray(),
          ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray()
      );
    } else {
      throw new IOException("distance function operates on either two numeric arrays or a single matrix as parameters.");
    }
  }

