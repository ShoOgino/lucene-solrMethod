  @Override
  public Object doWork(Object... values) throws IOException {
    if(Arrays.stream(values).anyMatch(item -> null == item)){
      return null;
    }

    List<?> sourceValues;

    if(values.length == 1){
      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]);
    }
    else
    {
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting at least one value but found %d",toExpression(constructingFactory),containedEvaluators.size()));
    }

    Frequency frequency = new Frequency();

    for(Object o : sourceValues) {
      Number number = (Number)o;
      frequency.addValue(number.longValue());
    }

    List<Tuple> histogramBins = new ArrayList<>();

    Iterator iterator = frequency.valuesIterator();

    while(iterator.hasNext()){
      Long value = (Long)iterator.next();
      Map<String,Number> map = new HashMap<>();
      map.put("value", value.longValue());
      map.put("count", frequency.getCount(value));
      map.put("cumFreq", frequency.getCumFreq(value));
      map.put("cumPct", frequency.getCumPct(value));
      map.put("pct", frequency.getPct(value));
      histogramBins.add(new Tuple(map));
    }
    return histogramBins;
  }

