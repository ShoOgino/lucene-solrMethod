  public KnnEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{
    super(expression, factory);

    DistanceEvaluator.DistanceType type = null;
    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);
    if(namedParams.size() > 0) {
      if (namedParams.size() > 1) {
        throw new IOException("distance function expects only one named parameter 'distance'.");
      }

      StreamExpressionNamedParameter namedParameter = namedParams.get(0);
      String name = namedParameter.getName();
      if (!name.equalsIgnoreCase("distance")) {
        throw new IOException("distance function expects only one named parameter 'distance'.");
      }

      String typeParam = namedParameter.getParameter().toString().trim();
      type= DistanceEvaluator.DistanceType.valueOf(typeParam);
    } else {
      type = DistanceEvaluator.DistanceType.euclidean;
    }

    if (type.equals(DistanceEvaluator.DistanceType.euclidean)) {
      distanceMeasure = new EuclideanDistance();
    } else if (type.equals(DistanceEvaluator.DistanceType.manhattan)) {
      distanceMeasure = new ManhattanDistance();
    } else if (type.equals(DistanceEvaluator.DistanceType.canberra)) {
      distanceMeasure = new CanberraDistance();
    } else if (type.equals(DistanceEvaluator.DistanceType.earthMovers)) {
      distanceMeasure = new EarthMoversDistance();
    }

  }

