  @Override
  @SuppressWarnings({"unchecked"})
  public Object doWork(Object... objects) throws IOException{

    Object first = objects[0];

    double[] x = null;
    double[] y = null;

    if(objects.length == 1) {
      //Only the y values passed
      y = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();
      x = new double[y.length];
      for(int i=0; i<y.length; i++) {
        x[i] = i;
      }
    } else if(objects.length == 2) {
      Object second = objects[1];
      x = ((List) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();
      y = ((List) second).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray();
    }

    LoessInterpolator interpolator = new LoessInterpolator(bandwidth, robustIterations);
    double[] smooth = interpolator.smooth(x, y);

    List<Number> list = new ArrayList<>();
    for(double yvalue : smooth) {
      list.add(yvalue);
    }

    PolynomialSplineFunction spline = interpolator.interpolate(x, y);

    VectorFunction vec = new VectorFunction(spline, list);
    vec.addToContext("x", x);
    vec.addToContext("y", y);

    return vec;
  }

