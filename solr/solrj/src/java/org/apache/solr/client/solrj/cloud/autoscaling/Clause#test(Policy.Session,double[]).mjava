  public List<Violation> test(Policy.Session session, double[] deviations) {
    if (isPerCollectiontag()) {
      if(nodeSetPresent) {
        if(put == Put.ON_EACH){
          return testPerNode(session, deviations) ;
        } else {
          return testGroupNodes(session, deviations);
        }
      }

      return tag.varType == Type.NODE ||
          (tag.varType.meta.isNodeSpecificVal() && replica.computedType == null) ?
          testPerNode(session, deviations) :
          testGroupNodes(session, deviations);
    } else {
      ComputedValueEvaluator computedValueEvaluator = new ComputedValueEvaluator(session);
      Violation.Ctx ctx = new Violation.Ctx(this, session.matrix, computedValueEvaluator);
      for (Row r : session.matrix) {
        computedValueEvaluator.node = r.node;
        SealedClause sealedClause = getSealedClause(computedValueEvaluator);
        if (!sealedClause.getGlobalTag().isPass(r)) {
          ctx.resetAndAddViolation(r.node, null, new Violation(sealedClause, null, null, r.node, r.getVal(sealedClause.globalTag.name),
              sealedClause.globalTag.delta(r.getVal(globalTag.name)), r.node));
          addViolatingReplicasForGroup(sealedClause.globalTag, computedValueEvaluator, ctx, Type.CORES.tagName, r.node, ctx.currentViolation, session.matrix);

        }
      }
      return ctx.allViolations;

    }
  }

