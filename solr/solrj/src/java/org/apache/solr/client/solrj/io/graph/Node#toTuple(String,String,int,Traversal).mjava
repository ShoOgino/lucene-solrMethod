  public Tuple toTuple(String collection, String field, int level, Traversal traversal) {
    Tuple tuple = new Tuple();

    tuple.put("node", id);
    tuple.put("collection", collection);
    tuple.put("field", field);
    tuple.put("level", level);

    boolean prependCollection = traversal.isMultiCollection();
    List<String> cols = traversal.getCollections();

    if(ancestors != null) {
      List<String> l = new ArrayList();
      for(String ancestor : ancestors) {
        String[] ancestorParts = ancestor.split("\\^");

        if(prependCollection) {
          //prepend the collection
          int colIndex = Integer.parseInt(ancestorParts[0]);
          l.add(cols.get(colIndex)+"/"+ancestorParts[1]);
        } else {
          // Use only the ancestor id.
          l.add(ancestorParts[1]);
        }
      }

      tuple.put("ancestors", l);
    }

    if(metrics != null) {
      for(Metric metric : metrics) {
        tuple.put(metric.getIdentifier(), metric.getValue());
      }
    }

    return tuple;
  }

