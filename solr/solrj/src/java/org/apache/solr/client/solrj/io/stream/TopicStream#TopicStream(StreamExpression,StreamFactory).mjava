  public TopicStream(StreamExpression expression, StreamFactory factory) throws IOException{
    // grab all parameters out
    String checkpointCollectionName = factory.getValueOperand(expression, 0);
    String collectionName = factory.getValueOperand(expression, 1);
    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);
    StreamExpressionNamedParameter zkHostExpression = factory.getNamedOperand(expression, "zkHost");

    StreamExpressionNamedParameter idParam = factory.getNamedOperand(expression, ID);
    if(null == idParam) {
      throw new IOException("invalid TopicStream id cannot be null");
    }

    StreamExpressionNamedParameter flParam = factory.getNamedOperand(expression, "fl");

    if(null == flParam) {
      throw new IOException("invalid TopicStream fl cannot be null");
    }

    long initialCheckpoint = -1;
    StreamExpressionNamedParameter initialCheckpointParam = factory.getNamedOperand(expression, "initialCheckpoint");

    if(initialCheckpointParam != null) {
      initialCheckpoint = Long.parseLong(((StreamExpressionValue) initialCheckpointParam.getParameter()).getValue());
    }

    long checkpointEvery = -1;
    StreamExpressionNamedParameter checkpointEveryParam = factory.getNamedOperand(expression, "checkpointEvery");

    if(checkpointEveryParam != null) {
      checkpointEvery = Long.parseLong(((StreamExpressionValue) checkpointEveryParam.getParameter()).getValue());
    }

    //  Checkpoint Collection Name
    if(null == checkpointCollectionName){
      throw new IOException(String.format(Locale.ROOT,"invalid expression %s - checkpointCollectionName expected as first operand",expression));
    }

    // Collection Name
    if(null == collectionName){
      throw new IOException(String.format(Locale.ROOT,"invalid expression %s - collectionName expected as second operand",expression));
    }

    // Named parameters - passed directly to solr as solrparams
    if(0 == namedParams.size()){
      throw new IOException(String.format(Locale.ROOT,"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'",expression));
    }

    ModifiableSolrParams params = new ModifiableSolrParams();
    for(StreamExpressionNamedParameter namedParam : namedParams){
      if(!namedParam.getName().equals("zkHost") &&
          !namedParam.getName().equals(ID) &&
          !namedParam.getName().equals("checkpointEvery")) {
        params.set(namedParam.getName(), namedParam.getParameter().toString().trim());
      }
    }

    // zkHost, optional - if not provided then will look into factory list to get
    String zkHost = null;
    if(null == zkHostExpression){
      zkHost = factory.getCollectionZkHost(collectionName);
      if(zkHost == null) {
        zkHost = factory.getDefaultZkHost();
      }
    }
    else if(zkHostExpression.getParameter() instanceof StreamExpressionValue){
      zkHost = ((StreamExpressionValue)zkHostExpression.getParameter()).getValue();
    }
    if(null == zkHost){
      throw new IOException(String.format(Locale.ROOT,"invalid expression %s - zkHost not found for collection '%s'",expression,collectionName));
    }

    // We've got all the required items
    init(zkHost,
        checkpointCollectionName,
        collectionName,
        ((StreamExpressionValue) idParam.getParameter()).getValue(),
        initialCheckpoint,
        checkpointEvery,
        params);
  }

