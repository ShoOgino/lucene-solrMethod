  @Override
  public Object doWork(Object first, Object second) throws IOException{
    if(null == first){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - null found for the first value",toExpression(constructingFactory)));
    }
    if(null == second){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - null found for the second value",toExpression(constructingFactory)));
    }
    if(!(first instanceof RealDistribution) && !(first instanceof IntegerDistribution)){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - found type %s for the first value, expecting a real or integer Distribution",toExpression(constructingFactory), first.getClass().getSimpleName()));
    }
    if(!(second instanceof Number)){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - found type %s for the second value, expecting a Number",toExpression(constructingFactory), first.getClass().getSimpleName()));
    }

    if(first instanceof  RealDistribution) {
      RealDistribution rd = (RealDistribution) first;
      Number predictOver = (Number) second;
      return rd.cumulativeProbability(predictOver.doubleValue());
    } else {
      IntegerDistribution id = (IntegerDistribution) first;
      Number predictOver = (Number) second;
      return id.cumulativeProbability(predictOver.intValue());
    }
  }

