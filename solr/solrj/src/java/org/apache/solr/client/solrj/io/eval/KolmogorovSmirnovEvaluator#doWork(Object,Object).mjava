  @Override
  public Object doWork(Object first, Object second) throws IOException{
    if(null == first || (first instanceof List<?> && ((List<?>) first).stream().anyMatch(item -> null == item))){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - null found for the first value",toExpression(constructingFactory)));
    }
    if(null == second || (second instanceof List<?> && ((List<?>) second).stream().anyMatch(item -> null == item))){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - null found for the second value",toExpression(constructingFactory)));
    }
    if(!(second instanceof List<?>) || ((List<?>) second).stream().anyMatch(item -> !(item instanceof Number))){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - found type %s for the second value, expecting a List of numbers",toExpression(constructingFactory), first.getClass().getSimpleName()));
    }
    
    KolmogorovSmirnovTest ks = new KolmogorovSmirnovTest();
    double[] data = ((List<?>)second).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();
    
    if(first instanceof RealDistribution){
      RealDistribution realDistribution = (RealDistribution)first;

      Map<String,Double> m = new HashMap<>();
      m.put("p-value", ks.kolmogorovSmirnovTest(realDistribution, data));
      m.put("d-statistic", ks.kolmogorovSmirnovStatistic(realDistribution, data));
      return new Tuple(m);
    }
    else if(first instanceof List<?> && ((List<?>) first).stream().noneMatch(item -> !(item instanceof Number))){
      double[] data2 = ((List<?>)first).stream().mapToDouble(item -> ((Number)item).doubleValue()).toArray();
      
      Map<String,Double> m = new HashMap<>();
      m.put("d-statistic", ks.kolmogorovSmirnovTest(data, data2));
      return new Tuple(m);
    }
    else{
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - found type %s for the first value, expecting a RealDistribution or list of numbers",toExpression(constructingFactory), first.getClass().getSimpleName()));
    }
  }

