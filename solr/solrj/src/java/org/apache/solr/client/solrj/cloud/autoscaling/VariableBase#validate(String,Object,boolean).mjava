  @Override
  public Object validate(String name, Object val, boolean isRuleVal) {
    if (val instanceof Clause.Condition) {
      Clause.Condition condition = (Clause.Condition) val;
      val = condition.op.readRuleValue(condition);
      if (val != condition.val) return val;
    }
    if (name == null) name = this.varType.tagName;
    if (varType.type == Double.class) {
      Double num = Clause.parseDouble(name, val);
      if (isRuleVal) {
        if (varType.min != null)
          if (Double.compare(num, varType.min.doubleValue()) == -1)
            throw new RuntimeException(name + ": " + val + " must be greater than " + varType.min);
        if (varType.max != null)
          if (Double.compare(num, varType.max.doubleValue()) == 1)
            throw new RuntimeException(name + ": " + val + " must be less than " + varType.max);
      }
      return num;
    } else if (varType.type == Long.class) {
      Long num = Clause.parseLong(name, val);
      if (isRuleVal) {
        if (varType.min != null)
          if (num < varType.min.longValue())
            throw new RuntimeException(name + ": " + val + " must be greater than " + varType.min);
        if (varType.max != null)
          if (num > varType.max.longValue())
            throw new RuntimeException(name + ": " + val + " must be less than " + varType.max);
      }
      return num;
    } else if (varType.type == String.class) {
      if (isRuleVal && !varType.vals.isEmpty() && !varType.vals.contains(val))
        throw new RuntimeException(name + ": " + val + " must be one of " + StrUtils.join(varType.vals, ','));
      return val;
    } else {
      throw new RuntimeException("Invalid type ");
    }
  }

