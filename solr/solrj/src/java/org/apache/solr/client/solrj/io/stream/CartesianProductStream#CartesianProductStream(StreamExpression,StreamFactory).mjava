  public CartesianProductStream(StreamExpression expression,StreamFactory factory) throws IOException {
    String functionName = factory.getFunctionName(getClass());
    
    // grab all parameters out
    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);
    List<StreamExpressionParameter> evaluateAsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);
    StreamExpressionNamedParameter orderByExpression = factory.getNamedOperand(expression, "productSort");
    
    // validate expression contains only what we want.
    if(expression.getParameters().size() != streamExpressions.size() + evaluateAsExpressions.size() + (null == orderByExpression ? 0 : 1)){
      throw new IOException(String.format(Locale.ROOT,"Invalid %s expression %s - unknown operands found", functionName, expression));
    }
    
    if(1 != streamExpressions.size()){
      throw new IOException(String.format(Locale.ROOT,"Invalid %s expression %s - expecting single stream but found %d (must be TupleStream types)", functionName, expression, streamExpressions.size()));
    }

    stream = factory.constructStream(streamExpressions.get(0));
    orderBy = null == orderByExpression ? null : factory.constructComparator(((StreamExpressionValue)orderByExpression.getParameter()).getValue(), FieldComparator.class);
    
    evaluators = new ArrayList<>();
    for(StreamExpressionParameter evaluateAsExpression : evaluateAsExpressions){
      String fullString = ((StreamExpressionValue)evaluateAsExpression).getValue().trim();
      String originalFullString = fullString; // used for error messages
      
      // remove possible wrapping quotes
      if(fullString.length() > 2 && fullString.startsWith("\"") && fullString.endsWith("\"")){
        fullString = fullString.substring(1, fullString.length() - 1).trim();
      }
      
      String evaluatorPart = null;
      String asNamePart = null;
      
      if(fullString.toLowerCase(Locale.ROOT).contains(" as ")){
        String[] parts = fullString.split("(?i) as "); // ensure we are splitting in a case-insensitive way
        if(2 != parts.length){
          throw new IOException(String.format(Locale.ROOT,"Invalid %s expression %s - expecting evaluator of form 'fieldA' or 'fieldA as alias' but found %s", functionName, expression, originalFullString));
        }
        
        evaluatorPart = parts[0].trim();
        asNamePart = parts[1].trim();        
      }
      else{
        evaluatorPart = fullString;
        // no rename
      }
      
      boolean wasHandledAsEvaluatorFunction = false;
      StreamEvaluator evaluator = null;
      if(evaluatorPart.contains("(")){
        // is a possible evaluator
        try{
          StreamExpression asValueExpression = StreamExpressionParser.parse(evaluatorPart);
          if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){
            evaluator = factory.constructEvaluator(asValueExpression);
            wasHandledAsEvaluatorFunction = true;
          }
        }
        catch(Throwable e){
          // it was not handled, so treat as a non-evaluator
        }
      }
      if(!wasHandledAsEvaluatorFunction){
        // treat as a straight field evaluator
        evaluator = new FieldEvaluator(evaluatorPart);
        if(null == asNamePart){
          asNamePart = evaluatorPart; // just use the field name
        }
      }

      if(null == evaluator || null == asNamePart){
        throw new IOException(String.format(Locale.ROOT,"Invalid %s expression %s - failed to parse evaluator '%s'", functionName, expression, originalFullString));
      }
      
      evaluators.add(new NamedEvaluator(asNamePart, evaluator));
    }
  }

