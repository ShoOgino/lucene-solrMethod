  @SuppressWarnings({"unchecked"})
  private LinkedList<Tuple> generateTupleList(Tuple original) throws IOException{
    Map<String, Object> evaluatedValues = new HashMap<>();
    
    for(NamedEvaluator evaluator : evaluators){
      evaluatedValues.put(evaluator.getName(), evaluator.getEvaluator().evaluate(original));
    }
    
    // use an array list internally because it has better sort performance
    // in Java 8. We do pay a conversion to a linked list but ..... oh well
    ArrayList<Tuple> generatedTupleList = new ArrayList<>();
    
    int[] workingIndexes = new int[evaluators.size()]; // java language spec ensures all values are 0
    do{
      Tuple generated = original.clone();
      for(int offset = 0; offset < workingIndexes.length; ++offset){
        String fieldName = evaluators.get(offset).getName();
        Object evaluatedValue = evaluatedValues.get(fieldName);
        if(evaluatedValue instanceof Collection){
          // because of the way a FieldEvaluator works we know that 
          // any collection is a list.
          generated.put(fieldName, ((List<Object>)evaluatedValue).get(workingIndexes[offset]));
        }
      }
      generatedTupleList.add(generated);
    }while(iterate(evaluators, workingIndexes, evaluatedValues));
    
    // order if we need to
    if(null != orderBy){
      generatedTupleList.sort(orderBy);
    }
    
    return new LinkedList<>(generatedTupleList);
  }

