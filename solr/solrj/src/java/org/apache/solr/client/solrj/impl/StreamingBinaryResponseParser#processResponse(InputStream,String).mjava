  @Override
  public NamedList<Object> processResponse(InputStream body, String encoding) {
    try (JavaBinCodec codec = new JavaBinCodec() {

        private int nestedLevel;

        @Override
        public SolrDocument readSolrDocument(DataInputInputStream dis) throws IOException {
          nestedLevel++;
          SolrDocument doc = super.readSolrDocument(dis);
          nestedLevel--;
          if (nestedLevel == 0) {
            // parent document
            callback.streamSolrDocument(doc);
            return null;
          } else {
            // child document
            return doc;
          }
        }

        @Override
        public SolrDocumentList readSolrDocumentList(DataInputInputStream dis) throws IOException {
          SolrDocumentList solrDocs = new SolrDocumentList();
          List list = (List) readVal(dis);
          solrDocs.setNumFound((Long) list.get(0));
          solrDocs.setStart((Long) list.get(1));
          solrDocs.setMaxScore((Float) list.get(2));

          callback.streamDocListInfo( 
              solrDocs.getNumFound(), 
              solrDocs.getStart(), 
              solrDocs.getMaxScore() );
          
          // Read the Array
          tagByte = dis.readByte();
          if( (tagByte >>> 5) != (ARR >>> 5) ) {
            throw new RuntimeException( "doclist must have an array" );
          } 
          int sz = readSize(dis);
          for (int i = 0; i < sz; i++) {
            // must be a SolrDocument
            readVal( dis ); 
          }
          return solrDocs;
        }
      };) {
      
      return (NamedList<Object>) codec.unmarshal(body);
    } 
    catch (IOException e) {
      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, "parsing error", e);
    }
  }

