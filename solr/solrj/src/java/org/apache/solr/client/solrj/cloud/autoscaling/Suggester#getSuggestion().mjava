  @SuppressWarnings("unchecked")
  public SolrRequest getSuggestion() {
    if (!isInitialized) {
      Set<String> collections = (Set<String>) hints.getOrDefault(Hint.COLL, Collections.emptySet());
      Set<Pair<String, String>> s = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());
      if (!collections.isEmpty() || !s.isEmpty()) {
        HashSet<Pair<String, String>> collectionShardPairs = new HashSet<>(s);
        collections.forEach(c -> collectionShardPairs.add(new Pair<>(c, null)));
        collections.forEach(c -> {
          try {
            getWithCollection(c).ifPresent(withCollection -> collectionShardPairs.add(new Pair<>(withCollection, null)));
          } catch (IOException e) {
            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
                "Exception while fetching 'withCollection' attribute for collection: " + c, e);
          }
        });
        s.forEach(kv -> {
          try {
            getWithCollection(kv.first()).ifPresent(withCollection -> collectionShardPairs.add(new Pair<>(withCollection, null)));
          } catch (IOException e) {
            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,
                "Exception while fetching 'withCollection' attribute for collection: " + kv.first(), e);
          }
        });
        setupCollection(collectionShardPairs);
        Collections.sort(session.expandedClauses);
      }
      Set<String> srcNodes = (Set<String>) hints.get(Hint.SRC_NODE);
      if (srcNodes != null && !srcNodes.isEmpty()) {
        // the source node is dead so live nodes may not have it
        for (String srcNode : srcNodes) {
          if (session.matrix.stream().noneMatch(row -> row.node.equals(srcNode))) {
            session.matrix.add(new Row(srcNode, session.getPolicy().getParams(), session.getPolicy().getPerReplicaAttributes(), session));
          }
        }
      }
      session.applyRules();
      originalViolations.addAll(session.getViolations());
      this.operation = init();
      isInitialized = true;
    }
    if (operation != null && session.transaction != null && session.transaction.isOpen()) {
      session.transaction.updateSession(session);
    }
    return operation;
  }

