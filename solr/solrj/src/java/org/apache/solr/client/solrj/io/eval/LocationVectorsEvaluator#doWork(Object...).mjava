  @Override
  public Object doWork(Object... objects) throws IOException {

    if (objects.length == 1) {
      //Just docs
      if(!(objects[0] instanceof List)) {
        throw new IOException("The locationVectors function expects a list of Tuples as a parameter.");
      } else {
        List list = (List)objects[0];
        if(list.size() > 0) {
          Object o = list.get(0);
          if(!(o instanceof Tuple)) {
            throw new IOException("The locationVectors function expects a list of Tuples as a parameter.");
          }
        } else {
          throw new IOException("Empty list was passed as a parameter to termVectors function.");
        }
      }

      List<Tuple> tuples = (List<Tuple>) objects[0];

      double[][] locationVectors = new double[tuples.size()][2];
      List<String> features = new ArrayList();
      features.add("lat");
      features.add("long");

      List<String> rowLabels = new ArrayList();

      for(int i=0; i< tuples.size(); i++) {
        Tuple tuple = tuples.get(i);
        String value = tuple.getString(field);
        String[] latLong = null;
        if(value.contains(",")) {
          latLong = value.split(",");
        } else {
          latLong = value.split(" ");
        }

        locationVectors[i][0] = Double.parseDouble(latLong[0].trim());
        locationVectors[i][1] = Double.parseDouble(latLong[1].trim());
        if(tuple.get("id") != null) {
          rowLabels.add(tuple.get("id").toString());
        }
      }

      Matrix matrix = new Matrix(locationVectors);
      matrix.setColumnLabels(features);
      matrix.setRowLabels(rowLabels);
      return matrix;
    } else {
      throw new IOException("The termVectors function takes a single positional parameter.");
    }
  }

