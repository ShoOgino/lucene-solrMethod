  @SuppressWarnings("unchecked")
  public Policy(Map<String, Object> jsonMap) {
    int[] idx = new int[1];
    List<Preference> initialClusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCES, emptyList())).stream()
        .map(m -> new Preference(m, idx[0]++))
        .collect(toList());
    for (int i = 0; i < initialClusterPreferences.size() - 1; i++) {
      Preference preference = initialClusterPreferences.get(i);
      preference.next = initialClusterPreferences.get(i + 1);
    }
    if (initialClusterPreferences.isEmpty()) {
      initialClusterPreferences.addAll(DEFAULT_PREFERENCES);
    }
    this.clusterPreferences = Collections.unmodifiableList(initialClusterPreferences);
    final SortedSet<String> paramsOfInterest = new TreeSet<>(DEFAULT_PARAMS_OF_INTEREST);
    clusterPreferences.forEach(preference -> paramsOfInterest.add(preference.name.toString()));
    List<String> newParams = new ArrayList<>(paramsOfInterest);
    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()
        .map(Clause::create)
        .filter(clause -> {
          clause.addTags(newParams);
          return true;
        })
        .collect(collectingAndThen(toList(), Collections::unmodifiableList));

    for (String newParam : new ArrayList<>(newParams)) {
      ConditionType t = Suggestion.getTagType(newParam);
      if(t != null && !t.associatedPerNodeValues.isEmpty()){
        for (String s : t.associatedPerNodeValues) {
          if(!newParams.contains(s)) newParams.add(s);
        }
      }
    }

    this.policies = Collections.unmodifiableMap(
        policiesFromMap((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault(POLICIES, emptyMap()), newParams));
    List<Pair<String, Suggestion.ConditionType>> params = newParams.stream()
        .map(s -> new Pair<>(s, Suggestion.getTagType(s)))
        .collect(toList());
    //let this be there always, there is no extra cost
    params.add(new Pair<>(WITH_COLLECTION.tagName, WITH_COLLECTION));
    this.params = Collections.unmodifiableList(params);
    perReplicaAttributes = readPerReplicaAttrs();
  }

