      public void run() {
        byte[] buf = new byte[1024];

        try {
          src.setSoTimeout(PUMP_SOCKET_TIMEOUT_MS);
        } catch (SocketException e) {
          if (e.getMessage().equals("Socket is closed")) {
            log.warn("Failed to set socket timeout on {} due to: ", src, e);
            return;
          }
          log.error("Failed to set socket timeout on {} due to ",src, e);
          throw new RuntimeException(e);
        }

        InputStream in = null;
        OutputStream out = null;
        try {
          in = src.getInputStream();
          out = destination.getOutputStream();
          while (true) {
            int len = -1;
            try {
              len = in.read(buf);
            } catch (SocketTimeoutException ste) {
              log.warn("Error when reading from {}", src, ste);
            }

            if (len == -1) {
              log.debug("read eof from: {}", src);
              break;
            }
            pause.get().await();
            if (len > 0)
              out.write(buf, 0, len);
          }
        } catch (Exception e) {
          if (log.isDebugEnabled()) {
            log.debug("read/write failed, reason: {}", e.getLocalizedMessage());
          }
          try {
            if (!receiveSocket.isClosed()) {
              // for halfClose, on read/write failure if we close the
              // remote end will see a close at the same time.
              close();
            }
          } catch (Exception ignore) {}
        } finally {
          if (in != null) {
            try {
              in.close();
            } catch (Exception exc) {
              log.debug("Error when closing InputStream on socket: {}", src, exc);
            }
          }
          if (out != null) {
            try {
              out.close();
            } catch (Exception exc) {
              log.debug("{} when closing OutputStream on socket: {}", exc, destination);
            }
          }
        }
      }

