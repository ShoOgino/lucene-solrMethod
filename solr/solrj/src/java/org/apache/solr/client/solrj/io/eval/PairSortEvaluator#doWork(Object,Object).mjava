  @Override
  @SuppressWarnings({"unchecked"})
  public Object doWork(Object first, Object second) throws IOException{
    if(null == first){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - null found for the first value",toExpression(constructingFactory)));
    }
    if(null == second){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - null found for the second value",toExpression(constructingFactory)));
    }
    if(!(first instanceof List<?>)){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - found type %s for the first value, expecting a list of numbers",toExpression(constructingFactory), first.getClass().getSimpleName()));
    }
    if(!(second instanceof List<?>)){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - found type %s for the second value, expecting a list of numbers",toExpression(constructingFactory), first.getClass().getSimpleName()));
    }

    List<Number> l1 = (List<Number>)first;
    List<Number> l2 = (List<Number>)second;

    if(l2.size() != l1.size()){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - first list (%d) has a different size than the second list (%d)",toExpression(constructingFactory), l1.size(), l2.size()));
    }

    List<double[]> pairs = new ArrayList<>();
    for(int idx = 0; idx < l1.size(); ++idx){
      double[] pair = new double[2];
      pair[0]= l1.get(idx).doubleValue();
      pair[1] = l2.get(idx).doubleValue();
      pairs.add(pair);
    }

    Collections.sort(pairs, new PairComp());
    double[][] data = new double[2][pairs.size()];
    for(int i=0; i<pairs.size(); i++) {
      data[0][i] = pairs.get(i)[0];
      data[1][i] = pairs.get(i)[1];
    }

    return new Matrix(data);
  }

