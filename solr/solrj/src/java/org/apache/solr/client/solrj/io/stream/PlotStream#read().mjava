  @SuppressWarnings({"unchecked"})
  public Tuple read() throws IOException {

    if (finished) {
      return Tuple.EOF();
    } else {
      finished = true;
      Map<String, Object> values = new HashMap<>();

      // add all string based params
      // these could come from the context, or they will just be treated as straight strings
      for(Entry<String,String> param : stringParams.entrySet()){
        if(streamContext.getLets().containsKey(param.getValue())){
          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));
        }
        else{
          values.put(param.getKey(), param.getValue());
        }
      }

      // add all evaluators
      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){
        values.put(param.getKey(), param.getValue().evaluateOverContext());
      }

      List<Number> y = (List<Number>)values.get("y");
      List<Number> x = (List<Number>)values.get("x");

      if(x == null) {
        //x is null so add a sequence
        x = new ArrayList<>();
        for(int i=0; i<y.size(); i++) {
          x.add(i+1);
        }
      }

      List<List<Number>> xy = new ArrayList<>();
      for(int i=0; i<x.size(); i++) {
        List<Number> pair = new ArrayList<>();
        pair.add(x.get(i));
        pair.add(y.get(i));
        xy.add(pair);
      }

      values.put("plot", values.get("type"));
      values.put("data", xy);

      Tuple tup = new Tuple(values);
      tup.setFieldLabels(fieldLabels);
      tup.setFieldNames(fieldNames);
      return tup;
    }
  }

