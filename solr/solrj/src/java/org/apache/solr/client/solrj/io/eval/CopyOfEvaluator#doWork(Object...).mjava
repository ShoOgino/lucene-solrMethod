  @Override
  public Object doWork(Object... values) throws IOException {
    if(Arrays.stream(values).anyMatch(item -> null == item)){
      return null;
    }
    
    List<?> sourceValues;
    Integer length;
    
    if(values.length >= 1){
      sourceValues = values[0] instanceof List<?> ? (List<?>)values[0] : Arrays.asList(values[0]); 
      
      // default to full array
      length = sourceValues.size();
      
      if(values.length >= 2){
        if(values[1] instanceof Number){
          length = ((Number)values[1]).intValue();
        }
        else{
          throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - if second parameter is provided then it must be a valid number but found %s instead",toExpression(constructingFactory), values[1].getClass().getSimpleName()));
        }        
      }      
    }
    else{
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting at least one value but found %d",toExpression(constructingFactory),containedEvaluators.size()));
    }

    return sourceValues.subList(0, Math.min(length, sourceValues.size()));
  }

