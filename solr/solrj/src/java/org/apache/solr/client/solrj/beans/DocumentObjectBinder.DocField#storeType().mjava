    private void storeType() {
      if (field != null) {
        type = field.getType();
      } else {
        Class[] params = setter.getParameterTypes();
        if (params.length != 1)
          throw new RuntimeException("Invalid setter method. Must have one and only one parameter");
        type = params[0];
      }
      if(type == Collection.class || type == List.class || type == ArrayList.class) {
        type = Object.class;
        isList = true;
        /*ParameterizedType parameterizedType = null;
        if(field !=null){
          if( field.getGenericType() instanceof ParameterizedType){
            parameterizedType = (ParameterizedType) field.getGenericType();
            Type[] types = parameterizedType.getActualTypeArguments();
            if (types != null && types.length > 0) type = (Class) types[0];
          }
        }*/
      } else if(type == byte[].class){
        //no op
      }else if (type.isArray()) {
        isArray = true;
        type = type.getComponentType();
      }
      //corresponding to the support for dynamicFields
      else if (type == Map.class || type == HashMap.class) {
        isContainedInMap = true;
        //assigned a default type
        type = Object.class;
        if(field != null){
          if(field.getGenericType() instanceof ParameterizedType){
            //check what are the generic values
            ParameterizedType parameterizedType = (ParameterizedType) field.getGenericType();
            Type[] types = parameterizedType.getActualTypeArguments();
            if(types != null && types.length == 2 && types[0] == String.class){
              //the key should always be String
              //Raw and primitive types
              if(types[1] instanceof Class){
                //the value could be multivalued then it is a List ,Collection,ArrayList
                if(types[1]== Collection.class || types[1] == List.class || types[1] == ArrayList.class){
                  type = Object.class;
                  isList = true;
                }else{
                  //else assume it is a primitive and put in the source type itself
                  type = (Class) types[1];
                }
              }
              //Of all the Parameterized types, only List is supported
              else if(types[1] instanceof ParameterizedType){
                Type rawType = ((ParameterizedType)types[1]).getRawType();
                if(rawType== Collection.class || rawType == List.class || rawType == ArrayList.class){
                  type = Object.class;
                  isList = true;
                }
              }
              //Array types
              else if(types[1] instanceof GenericArrayType){
                type = (Class) ((GenericArrayType) types[1]).getGenericComponentType();
                isArray = true;
              }
              //Throw an Exception if types are not known
              else{
                throw new RuntimeException("Allowed type for values of mapping a dynamicField are : " +
                    "Object, Object[] and List");
              }
            }
          }
        }
      }
    }

