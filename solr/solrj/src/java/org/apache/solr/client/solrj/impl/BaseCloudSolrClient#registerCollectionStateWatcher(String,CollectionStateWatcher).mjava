  /**
   * Register a CollectionStateWatcher to be called when the cluster state for a collection changes
   * <em>or</em> the set of live nodes changes.
   *
   * <p>
   * The Watcher will automatically be removed when it's 
   * <code>onStateChanged</code> returns <code>true</code>
   * </p>
   *
   * <p>
   * This implementation utilizes {@link ZkStateReader#registerCollectionStateWatcher} internally.
   * Callers that don't care about liveNodes are encouraged to use a {@link DocCollectionWatcher} 
   * instead
   * </p>
   *
   * @see #registerDocCollectionWatcher(String, DocCollectionWatcher)
   * @see ZkStateReader#registerCollectionStateWatcher
   * @param collection the collection to watch
   * @param watcher    a watcher that will be called when the state changes
   */
  public void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher) {
    getClusterStateProvider().connect();
    assertZKStateProvider().zkStateReader.registerCollectionStateWatcher(collection, watcher);
  }

