  public ConversionEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{
    super(expression, factory);
    
    if(3 != containedEvaluators.size()){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting exactly 3 parameters but found %d", super.toExpression(constructingFactory), containedEvaluators.size()));
    }
    
    if(0 != containedEvaluators.subList(0, 2).stream().filter(item -> !(item instanceof RawValueEvaluator) && !(item instanceof FieldValueEvaluator)).count()){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - first two parameters must be strings", super.toExpression(constructingFactory)));      
    }
    
    String fromString = containedEvaluators.get(0).toExpression(factory).toString().toUpperCase(Locale.ROOT);
    String toString = containedEvaluators.get(1).toExpression(factory).toString().toUpperCase(Locale.ROOT);
    
    try {
      from = LENGTH_CONSTANT.valueOf(fromString);
      to = LENGTH_CONSTANT.valueOf(toString);
      this.converter = constructConverter(from, to);
      
    } catch (IllegalArgumentException e) {
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - '%s' and '%s' are not both valid conversion types", super.toExpression(constructingFactory), fromString, toString));
    }
    
    // Remove evaluators 0 and 1 because we don't actually want those used
    containedEvaluators = containedEvaluators.subList(2, 3);
  }

