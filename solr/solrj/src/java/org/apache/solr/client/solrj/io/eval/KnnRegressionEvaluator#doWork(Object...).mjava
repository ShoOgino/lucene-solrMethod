  @Override
  public Object doWork(Object ... values) throws IOException {

    if(values.length < 3) {
      throw new IOException("knnRegress expects atleast three parameters: an observation matrix, an outcomes vector and k.");
    }

    Matrix observations = null;
    List<Number> outcomes = null;
    int k = 5;
    DistanceMeasure distanceMeasure = new EuclideanDistance();

    if(values[0] instanceof Matrix) {
      observations = (Matrix)values[0];
    } else {
      throw new IOException("The first parameter for knnRegress should be the observation matrix.");
    }

    if(values[1] instanceof List) {
      outcomes = (List) values[1];
    } else {
      throw new IOException("The second parameter for knnRegress should be outcome array. ");
    }

    if(values[2] instanceof Number) {
      k = ((Number) values[2]).intValue();
    } else {
      throw new IOException("The third parameter for knnRegress should be k. ");
    }

    if(values.length == 4) {
      if(values[3] instanceof DistanceMeasure) {
        distanceMeasure = (DistanceMeasure) values[3];
        throw new IOException("The fourth parameter for knnRegress should be a distance measure. ");
      }
    }

    double[] outcomeData = new double[outcomes.size()];
    for(int i=0; i<outcomeData.length; i++) {
      outcomeData[i] = outcomes.get(i).doubleValue();
    }

    Map map = new HashMap();
    map.put("k", k);
    map.put("observations", observations.getRowCount());
    map.put("features", observations.getColumnCount());
    map.put("distance", distanceMeasure.getClass().getSimpleName());

    return new KnnRegressionTuple(observations, outcomeData, k, distanceMeasure, map, scale, robust);
  }

