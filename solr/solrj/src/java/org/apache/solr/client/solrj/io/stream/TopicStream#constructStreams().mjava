  protected void constructStreams() throws IOException {
    try {
      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();
      Slice[] slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);

      ModifiableSolrParams mParams = new ModifiableSolrParams(params);
      mParams.set(DISTRIB, "false"); // We are the aggregator.
      String fl = mParams.get("fl");
      mParams.set(SORT, "_version_ asc");
      if(!fl.contains(VERSION_FIELD)) {
        fl += ",_version_";
      }
      mParams.set("fl", fl);

      Random random = new Random();

      ClusterState clusterState = zkStateReader.getClusterState();
      Set<String> liveNodes = clusterState.getLiveNodes();

      for(Slice slice : slices) {
        ModifiableSolrParams localParams = new ModifiableSolrParams(mParams);
        long checkpoint = checkpoints.get(slice.getName());

        Collection<Replica> replicas = slice.getReplicas();
        List<Replica> shuffler = new ArrayList<>();
        for(Replica replica : replicas) {
          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName()))
            shuffler.add(replica);
        }

        Replica rep = shuffler.get(random.nextInt(shuffler.size()));
        ZkCoreNodeProps zkProps = new ZkCoreNodeProps(rep);
        String url = zkProps.getCoreUrl();
        SolrStream solrStream = new SolrStream(url, localParams);
        solrStream.setSlice(slice.getName());
        solrStream.setCheckpoint(checkpoint);
        solrStream.setTrace(true);
        if(streamContext != null) {
          solrStream.setStreamContext(streamContext);
        }
        solrStreams.add(solrStream);
      }
    } catch (Exception e) {
      throw new IOException(e);
    }
  }

