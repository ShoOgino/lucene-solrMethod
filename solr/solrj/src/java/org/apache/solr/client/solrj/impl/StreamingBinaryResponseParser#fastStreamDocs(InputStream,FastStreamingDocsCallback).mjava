  private NamedList<Object> fastStreamDocs(InputStream body, FastStreamingDocsCallback fastCallback) throws IOException {

    fieldListener = new EntryListener() {
      @Override
      public void entry(DataEntry field) {
        if (((EntryImpl) field).getTag() == Tag._SOLRDOC) {
          field.listenContainer(fastCallback.startChildDoc(field.ctx()), fieldListener);
        } else {
          fastCallback.field(field,  field.ctx());
        }
      }

      @Override
      public void end(DataEntry e) {
        fastCallback.endDoc(((EntryImpl) e).ctx);
      }
    };
    docListener = e -> {
      EntryImpl entry = (EntryImpl) e;
      if (entry.getTag() == Tag._SOLRDOC) {//this is a doc
        entry.listenContainer(fastCallback.startDoc(entry.ctx()), fieldListener);
      }
    };
    new FastJavaBinDecoder()
        .withInputStream(body)
        .decode(new EntryListener() {
          @Override
          public void entry(DataEntry e) {
            EntryImpl entry = (EntryImpl) e;
            if( !entry.type().isContainer) return;
            if (e.isKeyValEntry() && entry.getTag() == Tag._SOLRDOCLST) {
              List l = (List) e.metadata();
              e.listenContainer(fastCallback.initDocList(
                  (Long) l.get(0),
                  (Long) l.get(1),
                  (Float) l.get(2)),
                  docListener);
            } else {
              e.listenContainer(null, this);
            }
          }
        });
    return null;
  }

