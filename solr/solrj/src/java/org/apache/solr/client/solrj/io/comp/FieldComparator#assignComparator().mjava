  /*
   * What're we doing here messing around with lambdas for the comparator logic?
   * We want the compare(...) function to run as fast as possible because it will be called many many
   * times over the lifetime of this object. For that reason we want to limit the number of comparisons
   * taking place in the compare(...) function. Because this class supports both ascending and
   * descending comparisons and the logic for each is slightly different, we want to do the 
   *   if(ascending){ compare like this } else { compare like this }
   * check only once - we can do that in the constructor of this class, create a lambda, and then execute 
   * that lambda in the compare function. A little bit of branch prediction savings right here.
   */
  private void assignComparator(){
    if(ComparatorOrder.DESCENDING == order){
      comparator = new ComparatorLambda() {
        @Override
        public int compare(Tuple leftTuple, Tuple rightTuple) {
          Comparable leftComp = (Comparable)leftTuple.get(fieldName);
          Comparable rightComp = (Comparable)rightTuple.get(fieldName);
          
          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal
          if(null == leftComp){ return 1; }
          if(null == rightComp){ return -1; }
          
          return rightComp.compareTo(leftComp);
        }
      };
    }
    else{
      // See above for black magic reasoning.
      comparator = new ComparatorLambda() {
        @Override
        public int compare(Tuple leftTuple, Tuple rightTuple) {
          Comparable leftComp = (Comparable)leftTuple.get(fieldName);
          Comparable rightComp = (Comparable)rightTuple.get(fieldName);
          
          if(leftComp == rightComp){ return 0; } // if both null then they are equal. if both are same ref then are equal
          if(null == leftComp){ return -1; }
          if(null == rightComp){ return 1; }
          
          return leftComp.compareTo(rightComp);
        }
      };
    }
  }

