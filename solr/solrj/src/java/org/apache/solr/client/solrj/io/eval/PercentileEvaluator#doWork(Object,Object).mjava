  @Override
  public Object doWork(Object first, Object second) throws IOException{
    if(null == first){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - null found for the first value",toExpression(constructingFactory)));
    }
    if(null == second){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - null found for the second value",toExpression(constructingFactory)));
    }
    if(!(first instanceof List<?>)) {
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - found type %s for the first value, expecting a List",toExpression(constructingFactory), first.getClass().getSimpleName()));
    }
    if((second instanceof Number)) {
      Percentile percentile = new Percentile();
      percentile.setData(((List<?>) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray());
      return percentile.evaluate(((Number) second).doubleValue());
    } else if(second instanceof List){
      Percentile percentile = new Percentile();
      percentile.setData(((List<?>) first).stream().mapToDouble(value -> ((Number) value).doubleValue()).toArray());
      @SuppressWarnings({"unchecked"})
      List<Number> values = (List<Number>) second;
      List<Number> percentiles = new ArrayList<>();
      for(Number value : values) {
        percentiles.add(percentile.evaluate(value.doubleValue()));
      }

      return percentiles;
    } else {
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - found type %s for the second value, expecting a number or a numeric array",toExpression(constructingFactory), first.getClass().getSimpleName()));
    }
  }

