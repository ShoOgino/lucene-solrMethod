  public Tuple read() throws IOException {

    while(true) {
      Tuple tuple = tupleStream.read();
      if(tuple.EOF) {
        if(!finished) {

          if(currentMetrics == null) {
            return tuple;
          }

          Tuple t = new Tuple();
          for(Metric metric : currentMetrics) {
            t.put(metric.getIdentifier(), metric.getValue());
          }

          for(int i=0; i<buckets.length; i++) {
            t.put(buckets[i].toString(), currentKey.getParts()[i]);
          }
          tupleStream.pushBack(tuple);
          finished = true;
          return t;
        } else {
          return tuple;
        }
      }

      Object[] bucketValues = new Object[buckets.length];
      for(int i=0; i<buckets.length; i++) {
        bucketValues[i] = buckets[i].getBucketValue(tuple);
      }

      HashKey hashKey = new HashKey(bucketValues);

      if(hashKey.equals(currentKey)) {
        for(Metric bucketMetric : currentMetrics) {
          bucketMetric.update(tuple);
        }
      } else {
        Tuple t = null;
        if(currentMetrics != null) {
          t = new Tuple();
          for(Metric metric : currentMetrics) {
            t.put(metric.getIdentifier(), metric.getValue());
          }

          for(int i=0; i<buckets.length; i++) {
            t.put(buckets[i].toString(), currentKey.getParts()[i]);
          }
        }

        currentKey = hashKey;
        if (metrics != null) {
          currentMetrics = new Metric[metrics.length];
          for(int i=0; i<metrics.length; i++) {
            Metric bucketMetric = metrics[i].newInstance();
            bucketMetric.update(tuple);
            currentMetrics[i]  = bucketMetric;
          }
        }

        if(t != null) {
          return t;
        }
      }
    }
  }

