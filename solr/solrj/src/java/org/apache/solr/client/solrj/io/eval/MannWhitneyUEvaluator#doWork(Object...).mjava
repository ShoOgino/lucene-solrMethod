  @Override
  public Object doWork(Object... values) throws IOException {
    @SuppressWarnings({"unchecked"})
    List<double[]> mannWhitneyUInput = Arrays.stream(values)
        .map(value -> ((List<Number>) value).stream().mapToDouble(Number::doubleValue).toArray())
        .collect(Collectors.toList());
    if(mannWhitneyUInput.size() == 2) {
      MannWhitneyUTest mannwhitneyutest = new MannWhitneyUTest();
      double u = mannwhitneyutest.mannWhitneyU(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));
      double p = mannwhitneyutest.mannWhitneyUTest(mannWhitneyUInput.get(0), mannWhitneyUInput.get(1));
      Map<String,Number> m = new HashMap<>();
      m.put("u-statistic", u);
      m.put("p-value", p);
      return new Tuple(m);
    }else{
      throw new IOException(String.format(Locale.ROOT,"%s(...) only works with a list of 2 arrays but a list of %d array(s) was provided.", constructingFactory.getFunctionName(getClass()), mannWhitneyUInput.size()));
    }
  }

