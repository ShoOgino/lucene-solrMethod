  @Override
  @SuppressWarnings({"rawtypes"})
  SolrRequest init() {
    @SuppressWarnings({"unchecked"})
    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());
    if (shards.isEmpty()) {
      throw new RuntimeException("delete-replica requires 'collection' and 'shard'");
    }
    if (shards.size() > 1) {
      throw new RuntimeException("delete-replica requires exactly one pair of 'collection' and 'shard'");
    }
    Pair<String, String> collShard = shards.iterator().next();
    @SuppressWarnings({"unchecked"})
    Set<Number> counts = (Set<Number>) hints.getOrDefault(Hint.NUMBER, Collections.emptySet());
    Integer count = null;
    if (!counts.isEmpty()) {
      if (counts.size() > 1) {
        throw new RuntimeException("delete-replica allows at most one number hint specifying the number of replicas to delete");
      }
      Number n = counts.iterator().next();
      count = n.intValue();
    }
    @SuppressWarnings({"unchecked"})
    Set<String> replicas = (Set<String>) hints.getOrDefault(Hint.REPLICA, Collections.emptySet());
    String replica = null;
    if (!replicas.isEmpty()) {
      if (replicas.size() > 1) {
        throw new RuntimeException("delete-replica allows at most one 'replica' hint");
      }
      replica = replicas.iterator().next();
    }
    if (replica == null && count == null) {
      throw new RuntimeException("delete-replica requires either 'replica' or 'number' hint");
    }
    if (replica != null) {
      return CollectionAdminRequest.deleteReplica(collShard.first(), collShard.second(), replica);
    } else {
      return CollectionAdminRequest.deleteReplica(collShard.first(), collShard.second(), count);
    }
  }

