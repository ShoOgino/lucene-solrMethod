  @Override
  public Set<String> liveNodes() {
    if (liveNodes == null) {
      throw new RuntimeException("We don't know of any live_nodes to fetch the"
          + " latest live_nodes information from. "
          + "If you think your Solr cluster is up and is accessible,"
          + " you could try re-creating a new CloudSolrClient using a working"
          + " solrUrl or zkUrl.");
    }
    if (TimeUnit.SECONDS.convert((System.nanoTime() - liveNodesTimestamp), TimeUnit.NANOSECONDS) > getCacheTimeout()) {
      for (String nodeName: liveNodes) {
        try (HttpSolrClient client = new HttpSolrClient.Builder().
            withBaseSolrUrl(ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme)).
            withHttpClient(httpClient).build()) {
          Set<String> liveNodes = fetchLiveNodes(client);
          this.liveNodes = (liveNodes);
          liveNodesTimestamp = System.nanoTime();
          return liveNodes;
        } catch (Exception e) {
          log.warn("Attempt to fetch live_nodes from " +
              ZkStateReader.getBaseUrlForNodeName(nodeName, urlScheme) + " failed.", e);
        }
      }
      throw new RuntimeException("Tried fetching live_nodes using all the node names we knew of, i.e. " + liveNodes +". However, "
          + "succeeded in obtaining the cluster state from none of them."
          + "If you think your Solr cluster is up and is accessible,"
          + " you could try re-creating a new CloudSolrClient using a working"
          + " solrUrl or zkUrl.");
    } else {
      return liveNodes; // cached copy is fresh enough
    }
  }

