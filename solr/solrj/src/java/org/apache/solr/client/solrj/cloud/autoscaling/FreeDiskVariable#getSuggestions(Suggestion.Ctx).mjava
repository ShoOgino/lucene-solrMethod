  @Override
  public void getSuggestions(Suggestion.Ctx ctx) {
    if (ctx.violation == null) return;
    if (ctx.violation.replicaCountDelta > 0) {
      List<Row> matchingNodes = ctx.session.matrix.stream().filter(
          row -> ctx.violation.getViolatingReplicas()
              .stream()
              .anyMatch(p -> row.node.equals(p.replicaInfo.getNode())))
          .sorted(Comparator.comparing(r -> ((Double) r.getVal(ImplicitSnitch.DISK, 0d))))
          .collect(Collectors.toList());


      for (Row node : matchingNodes) {
        //lets try to start moving the smallest cores off of the node
        ArrayList<ReplicaInfo> replicas = new ArrayList<>();
        node.forEachReplica(replicas::add);
        replicas.sort((r1, r2) -> {
          Long s1 = Clause.parseLong(CORE_IDX.tagName, r1.getVariables().get(CORE_IDX.tagName));
          Long s2 = Clause.parseLong(CORE_IDX.tagName, r2.getVariables().get(CORE_IDX.tagName));
          if (s1 != null && s2 != null) return s1.compareTo(s2);
          return 0;
        });
        double currentDelta = ctx.violation.getClause().tag.delta(node.getVal(ImplicitSnitch.DISK));
        for (ReplicaInfo replica : replicas) {
          if (currentDelta < 1) break;
          if (replica.getVariables().get(CORE_IDX.tagName) == null) continue;
          Suggester suggester = ctx.session.getSuggester(MOVEREPLICA)
              .hint(Hint.COLL_SHARD, new Pair<>(replica.getCollection(), replica.getShard()))
              .hint(Hint.SRC_NODE, node.node)
              .forceOperation(true);
          if (ctx.addSuggestion(suggester) == null) break;
          currentDelta -= Clause.parseLong(CORE_IDX.tagName, replica.getVariable(CORE_IDX.tagName));
        }
      }
    } else if (ctx.violation.replicaCountDelta < 0) {
      suggestNegativeViolations(ctx, shards -> getSortedShards(ctx.session.matrix, shards, ctx.violation.coll));
    }
  }

