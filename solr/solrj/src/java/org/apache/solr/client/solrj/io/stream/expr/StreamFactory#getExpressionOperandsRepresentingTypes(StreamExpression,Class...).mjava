  @SuppressWarnings({"unchecked"})
  public List<StreamExpression> getExpressionOperandsRepresentingTypes(StreamExpression expression,
                                                                       @SuppressWarnings({"rawtypes"})Class ... clazzes) {
    List<StreamExpression> matchingStreamExpressions = new ArrayList<>();
    List<StreamExpression> allStreamExpressions = getExpressionOperands(expression);
    
    parameterLoop:
    for (StreamExpression streamExpression : allStreamExpressions) {
      Supplier<Class<? extends Expressible>> classSupplier = functionNames.get(streamExpression.getFunctionName());
      if (classSupplier != null) {
        for (@SuppressWarnings({"rawtypes"})Class clazz : clazzes) {
          if (!clazz.isAssignableFrom(classSupplier.get())) {
            continue parameterLoop;
          }
        }
        matchingStreamExpressions.add(streamExpression);
      }
    }
    return matchingStreamExpressions;   
  }

