  /* Finds index of the next char equal to findThis that is not within a quote or set of parens
   * Does not work with the following values of findThis: " ' \ ) -- well, it might but wouldn't
   * really give you what you want. Don't call with those characters */
  private static int findNextClear(String clause, int startingIdx, char findThis){
    int openParens = 0;
    boolean isDoubleQuote = false;
    boolean isSingleQuote = false;
    boolean isEscaped = false;

    for(int idx = startingIdx; idx < clause.length(); ++idx){
      char c = clause.charAt(idx);

      // if we're not in a non-escaped quote or paren state, then we've found the space we want
      if(c == findThis && !isEscaped && !isSingleQuote && !isDoubleQuote && 0 == openParens){
        return idx;
      }


      switch(c){
        case '\\':
          // We invert to support situations where \\ exists
          isEscaped = !isEscaped;
          break;

        case '"':
          // if we're not in a non-escaped single quote state, then invert the double quote state
          if(!isEscaped && !isSingleQuote){
            isDoubleQuote = !isDoubleQuote;
          }
          isEscaped = false;
          break;

        case '\'':
          // if we're not in a non-escaped double quote state, then invert the single quote state
          if(!isEscaped && !isDoubleQuote){
            isSingleQuote = !isSingleQuote;
          }
          isEscaped = false;
          break;

        case '(':
          // if we're not in a non-escaped quote state, then increment the # of open parens
          if(!isEscaped && !isSingleQuote && !isDoubleQuote){
            openParens += 1;
          }
          isEscaped = false;
          break;

        case ')':
          // if we're not in a non-escaped quote state, then decrement the # of open parens
          if(!isEscaped && !isSingleQuote && !isDoubleQuote){
            openParens -= 1;
          }
          isEscaped = false;
          break;
        default:
          isEscaped = false;
      }
    }

    // Not found
    return -1;
  }

