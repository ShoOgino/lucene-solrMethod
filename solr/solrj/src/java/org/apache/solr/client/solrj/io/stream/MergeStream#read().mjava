  public Tuple read() throws IOException {
    
    // might be able to optimize this by sorting the streams based on the next to read tuple from each.
    // if we can ensure the sort of the streams and update it in less than linear time then there would
    // be some performance gain. But, assuming the # of streams is kinda small then this might not be
    // worth it
    
    Tuple minimum = null;
    PushBackStream minimumStream = null;
    for(PushBackStream stream : streams){
      Tuple current = stream.read();
      
      if(current.EOF){
        stream.pushBack(current);
        continue;
      }
      
      if(null == minimum){
        minimum = current;
        minimumStream = stream;
        continue;
      }
      
      if(comp.compare(current, minimum) < 0){
        // Push back on its stream
        minimumStream.pushBack(minimum);
        
        minimum = current;
        minimumStream = stream;
        continue;
      }
      else{
        stream.pushBack(current);
      }
    }
    
    // If all EOF then min will be null, else min is the current minimum
    if(null == minimum){
      // return EOF, doesn't matter which cause we're done
      return streams[0].read();
    }
    
    return minimum;
    
//    Tuple a = streamA.read();
//    Tuple b = streamB.read();
//
//    if(a.EOF && b.EOF) {
//      return a;
//    }
//
//    if(a.EOF) {
//      streamA.pushBack(a);
//      return b;
//    }
//
//    if(b.EOF) {
//      streamB.pushBack(b);
//      return a;
//    }
//
//    int c = comp.compare(a,b);
//
//    if(c < 0) {
//      streamB.pushBack(b);
//      return a;
//    } else {
//      streamA.pushBack(a);
//      return b;
//    }
  }

