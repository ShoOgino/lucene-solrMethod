    /**
     * Called by the {@link #inject} method to read the value(s) for a field
     * This method supports reading of all "matching" fieldName's in the <code>SolrDocument</code>
     *
     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,
     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.
     */
    @SuppressWarnings("unchecked")
    private Object getFieldValue(SolrDocument sdoc){
      Object fieldValue = sdoc.getFieldValue(name);
      if(fieldValue != null) {
        //this is not a dynamic field. so return te value
        return fieldValue;
      }
      //reading dynamic field values
      if(dynamicFieldNamePatternMatcher != null){
        Map<String, Object> allValuesMap = null;
        ArrayList allValuesList = null;
        if(isContainedInMap){
         allValuesMap = new HashMap<String, Object>();
        } else {
          allValuesList = new ArrayList();
        }
        for(String field : sdoc.getFieldNames()){
          if(dynamicFieldNamePatternMatcher.matcher(field).find()){
            Object val = sdoc.getFieldValue(field);
            if(val == null) continue;
            if(isContainedInMap){
              if(isList){
                if (!(val instanceof List)) {
                  ArrayList al = new ArrayList();
                  al.add(val);
                  val = al;
                }
              } else if(isArray){
                if (!(val instanceof List)) {
                  Object[] arr= (Object[]) Array.newInstance(type,1);
                  arr[0] = val;
                  val= arr;
                } else {
                  val = Array.newInstance(type,((List)val).size());
                }
              }
              allValuesMap.put(field, val);
            }else {
              if (val instanceof Collection) {
                allValuesList.addAll((Collection) val);
              } else {
                allValuesList.add(val);
              }
            }
          }
        }
        if (isContainedInMap) {
          return allValuesMap.isEmpty() ? null : allValuesMap;
        } else {
          return allValuesList.isEmpty() ? null : allValuesList;
        }
      }
      return null;
    }

