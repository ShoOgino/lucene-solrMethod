    /**
     * Called by the {@link #inject} method to read the value(s) for a field
     * This method supports reading of all "matching" fieldName's in the <code>SolrDocument</code>
     *
     * Returns <code>SolrDocument.getFieldValue</code> for regular fields,
     * and <code>Map<String, List<Object>></code> for a dynamic field. The key is all matching fieldName's.
     */
    @SuppressWarnings("unchecked")
    private Object getFieldValue(SolrDocument solrDocument) {
      Object fieldValue = solrDocument.getFieldValue(name);
      if (fieldValue != null) {
        //this is not a dynamic field. so return the value
        return fieldValue;
      }

      if (dynamicFieldNamePatternMatcher == null) {
        return null;
      }

      //reading dynamic field values
      Map<String, Object> allValuesMap = null;
      List allValuesList = null;
      if (isContainedInMap) {
        allValuesMap = new HashMap<String, Object>();
      } else {
        allValuesList = new ArrayList();
      }

      for (String field : solrDocument.getFieldNames()) {
        if (dynamicFieldNamePatternMatcher.matcher(field).find()) {
          Object val = solrDocument.getFieldValue(field);
          if (val == null) {
            continue;
          }

          if (isContainedInMap) {
            if (isList) {
              if (!(val instanceof List)) {
                List al = new ArrayList();
                al.add(val);
                val = al;
              }
            } else if (isArray) {
              if (!(val instanceof List)) {
                Object[] arr = (Object[]) Array.newInstance(type, 1);
                arr[0] = val;
                val = arr;
              } else {
                val = Array.newInstance(type, ((List) val).size());
              }
            }
            allValuesMap.put(field, val);
          } else {
            if (val instanceof Collection) {
              allValuesList.addAll((Collection) val);
            } else {
              allValuesList.add(val);
            }
          }
        }
      }
      if (isContainedInMap) {
        return allValuesMap.isEmpty() ? null : allValuesMap;
      } else {
        return allValuesList.isEmpty() ? null : allValuesList;
      }
    }

