  public Tuple evaluate(Tuple tuple) throws IOException {

    if(subEvaluators.size() != 1) {
      throw new IOException("describe expects 1 column as a parameters");
    }

    StreamEvaluator colEval = subEvaluators.get(0);

    List<Number> numbers = (List<Number>)colEval.evaluate(tuple);
    DescriptiveStatistics descriptiveStatistics = new DescriptiveStatistics();

    for(Number n : numbers) {
      descriptiveStatistics.addValue(n.doubleValue());
    }


    Map map = new HashMap();

    map.put("max", descriptiveStatistics.getMax());
    map.put("mean", descriptiveStatistics.getMean());
    map.put("min", descriptiveStatistics.getMin());
    map.put("stdev", descriptiveStatistics.getStandardDeviation());
    map.put("sum", descriptiveStatistics.getSum());
    map.put("N", descriptiveStatistics.getN());
    map.put("var", descriptiveStatistics.getVariance());
    map.put("kurtosis", descriptiveStatistics.getKurtosis());
    map.put("skewness", descriptiveStatistics.getSkewness());
    map.put("popVar", descriptiveStatistics.getPopulationVariance());
    map.put("geometricMean", descriptiveStatistics.getGeometricMean());
    map.put("sumsq", descriptiveStatistics.getSumsq());

    return new Tuple(map);
  }

