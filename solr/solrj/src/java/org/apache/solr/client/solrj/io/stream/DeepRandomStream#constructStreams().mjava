  protected void constructStreams() throws IOException {
    try {
      ModifiableSolrParams mParams = new ModifiableSolrParams(params);
      mParams = adjustParams(mParams);
      mParams.set(DISTRIB, "false"); // We are the aggregator.

      List<String> shardUrls = getShards(this.zkHost, this.collection, this.streamContext, mParams);

      String rows = mParams.get(ROWS);
      int r = Integer.parseInt(rows);
      int newRows = r/shardUrls.size();
      mParams.set(ROWS, Integer.toString(newRows));
      int seed = new Random().nextInt();
      mParams.set(SORT, "random_"+Integer.toString(seed)+" asc");

      int remainder = r - newRows*shardUrls.size();
      for(String shardUrl : shardUrls) {
        ModifiableSolrParams useParams = null;

        if(solrStreams.size() == 0 && remainder > 0) {
          useParams = new ModifiableSolrParams(mParams);
          useParams.set(ROWS, newRows+remainder);
        } else {
          useParams = mParams;
        }

        SolrStream solrStream = new SolrStream(shardUrl, useParams);
        if(streamContext != null) {
          solrStream.setStreamContext(streamContext);
        }
        solrStream.setFieldMappings(this.fieldMappings);
        solrStreams.add(solrStream);

      }
    } catch (Exception e) {
      throw new IOException(e);
    }
  }

