  @Override
  public Boolean evaluate(Tuple tuple) throws IOException {
    
    List<Object> results = evaluateAll(tuple);
    
    if(results.size() < 2){
      String message = null;
      if(1 == results.size()){
        message = String.format(Locale.ROOT,"%s(...) only works with at least 2 values but 1 was provided", constructingFactory.getFunctionName(getClass())); 
      }
      else{
        message = String.format(Locale.ROOT,"%s(...) only works with at least 2 values but 0 were provided", constructingFactory.getFunctionName(getClass()));
      }
      throw new IOException(message);
    }
    
    Checker checker = constructChecker(results.get(0));
    if(results.stream().anyMatch(result -> null == result && !checker.isNullAllowed())){
      return false;
    }
    if(results.stream().anyMatch(result -> !checker.isCorrectType(result))){
      throw new IOException(String.format(Locale.ROOT,"Unable to check %s(...) of differing types [%s]", constructingFactory.getFunctionName(getClass()), results.stream().map(item -> item.getClass().getSimpleName()).collect(Collectors.joining(","))));
    }

    for(int idx = 1; idx < results.size(); ++idx){
      if(!checker.test(results.get(0), results.get(idx))){
        return false;
      }
    }
    
    return true;
  }

