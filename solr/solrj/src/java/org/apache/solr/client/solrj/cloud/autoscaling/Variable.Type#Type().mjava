    Type() {
      try {
        meta = Type.class.getField(name()).getAnnotation(Meta.class);
        if (meta == null) {
          throw new RuntimeException("Invalid type, should have a @Meta annotation " + name());
        }
      } catch (NoSuchFieldException e) {
        //cannot happen
      }
      impl = VariableBase.loadImpl(meta, this);

      this.tagName = meta.name();
      this.type = meta.type();

      this.vals = readSet(meta.enumVals());
      this.max = readNum(meta.max());
      this.min = readNum(meta.min());
      this.perReplicaValue = readStr(meta.associatedPerReplicaValue());
      this.associatedPerNodeValues = readSet(meta.associatedPerNodeValue());
      this.additive = meta.isAdditive();
      this.metricsAttribute = readStr(meta.metricsKey());
      this.supportedComputedTypes = meta.computedValues()[0] == ComputedType.NULL ?
          emptySet() :
          unmodifiableSet(new HashSet(Arrays.asList(meta.computedValues())));
      this.wildCards = readSet(meta.wildCards());

    }

