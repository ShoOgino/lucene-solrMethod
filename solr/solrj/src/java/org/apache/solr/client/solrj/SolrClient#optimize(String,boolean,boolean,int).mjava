  /**
   * Performs an explicit optimize, causing a merge of all segments to one.
   *
   * Note: In most cases it is not required to do explicit optimize
   *
   * @param collection the Solr collection to send the optimize to
   * @param waitFlush  block until index changes are flushed to disk
   * @param waitSearcher  block until a new searcher is opened and registered as
   *                      the main query searcher, making the changes visible
   * @param maxSegments  optimizes down to at most this number of segments
   *
   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} containing the response
   *         from the server
   *
   * @throws IOException If there is a low-level I/O error.
   * @throws SolrServerException if there is an error on the server
   */
  public UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments)
      throws SolrServerException, IOException {
    return new UpdateRequest()
        .setAction(UpdateRequest.ACTION.OPTIMIZE, waitFlush, waitSearcher, maxSegments)
        .process(this, collection);
  }

