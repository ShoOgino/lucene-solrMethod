  private StreamExpression toExpression(StreamFactory factory, boolean includeStreams) throws IOException {
    // function name
    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));
    
    if(includeStreams){
      // streams
      if(hashStream instanceof Expressible && fullStream instanceof Expressible){
        expression.addParameter(((Expressible)fullStream).toExpression(factory));
        expression.addParameter(new StreamExpressionNamedParameter("hashed", ((Expressible)hashStream).toExpression(factory)));
      }
      else{
        throw new IOException("This HashJoinStream contains a non-expressible TupleStream - it cannot be converted to an expression");
      }
    }
    else{
      expression.addParameter("<stream>");
      expression.addParameter("hashed=<stream>");
    }
    
    // on
    StringBuilder sb = new StringBuilder();
    for(int idx = 0; idx < leftHashOn.size(); ++idx){
      if(sb.length() > 0){ sb.append(","); }
      
      // we know that left and right hashOns are the same size
      String left = leftHashOn.get(idx);
      String right = rightHashOn.get(idx);
      
      if(left.equals(right)){ 
        sb.append(left); 
      }
      else{
        sb.append(left);
        sb.append("=");
        sb.append(right);
      }
    }
    
    expression.addParameter(new StreamExpressionNamedParameter("on",sb.toString()));
    return expression;   
  }

