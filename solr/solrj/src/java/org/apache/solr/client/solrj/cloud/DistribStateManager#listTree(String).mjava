  /**
   * List a subtree including the root path, using breadth-first traversal.
   * @param root root path
   * @return list of full paths, with the root path being the first element
   */
  default List<String> listTree(String root) throws NoSuchElementException, IOException, KeeperException, InterruptedException {
    Deque<String> queue = new LinkedList<String>();
    List<String> tree = new ArrayList<String>();
    if (!root.startsWith("/")) {
      root = "/" + root;
    }
    queue.add(root);
    tree.add(root);
    while (true) {
      String node = queue.pollFirst();
      if (node == null) {
        break;
      }
      List<String> children = listData(node);
      for (final String child : children) {
        final String childPath = node + (node.equals("/") ? "" : "/") + child;
        queue.add(childPath);
        tree.add(childPath);
      }
    }
    return tree;
  }

