  public DateEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {
    super(expression, factory);

    String functionName = expression.getFunctionName();

    try {
      this.function = FUNCTION.valueOf(functionName);
    } catch (IllegalArgumentException e) {
      throw new IOException(String.format(Locale.ROOT,"Invalid date expression %s - expecting one of %s",functionName, Arrays.toString(FUNCTION.values())));
    }

    fieldName = factory.getValueOperand(expression, 0);

    //Taken from Field evaluator
    if(fieldName != null && fieldName.startsWith("'") && fieldName.endsWith("'") && fieldName.length() > 1){
      fieldName = fieldName.substring(1, fieldName.length() - 1);
    }

    if(1 != subEvaluators.size()){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting one value but found %d",expression,subEvaluators.size()));
    }
  }

