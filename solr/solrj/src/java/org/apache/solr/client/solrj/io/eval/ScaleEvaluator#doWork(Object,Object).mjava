  @Override
  public Object doWork(Object first, Object second) throws IOException{
    
    if(null == first || null == second){
      return null;
    }
    
    // we know these are all numbers or lists of numbers
    if(first instanceof List<?>){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting Number as first value but found a list", toExpression(constructingFactory)));
    }
    
    double[] scaleOver;
    if(second instanceof Number){
      scaleOver = Arrays.asList((Number)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();
    }
    else{
      scaleOver = ((List<?>)second).stream().mapToDouble(value -> ((Number)value).doubleValue()).toArray();
    }
      
    return Arrays.stream(MathArrays.scale(((Number)first).doubleValue(), scaleOver)).boxed().collect(Collectors.toList());
  }

