  @Override
  public Explanation toExplanation(StreamFactory factory) throws IOException {

    StreamExplanation explanation = new StreamExplanation(getStreamNodeId().toString());
    
    explanation.setFunctionName(factory.getFunctionName(this.getClass()));
    explanation.setImplementingClass(this.getClass().getName());
    explanation.setExpressionType(ExpressionType.STREAM_SOURCE);
    explanation.setExpression(toExpression(factory).toString());
    
    {
      // child 1 is a datastore so add it at this point
      StreamExplanation child = new StreamExplanation(getStreamNodeId() + "-datastore");
      child.setFunctionName(String.format(Locale.ROOT, "solr (%s)", collection)); 
        // TODO: fix this so we know the # of workers - check with Joel about a Topic's ability to be in a
        // parallel stream.
      
      child.setImplementingClass("Solr/Lucene");
      child.setExpressionType(ExpressionType.DATASTORE);    
      child.setExpression(params.entrySet().stream().map(e -> String.format(Locale.ROOT, "%s=%s", e.getKey(), e.getValue())).collect(Collectors.joining(",")));
      explanation.addChild(child);
    }
    
    {
      // child 2 is a place where we store and read checkpoint info from
      StreamExplanation child = new StreamExplanation(getStreamNodeId() + "-checkpoint");
      child.setFunctionName(String.format(Locale.ROOT, "solr (checkpoint store)")); 
      child.setImplementingClass("Solr/Lucene");
      child.setExpressionType(ExpressionType.DATASTORE);    
      child.setExpression(String.format(Locale.ROOT, "id=%s, collection=%s, checkpointEvery=%d", id, checkpointCollection, checkpointEvery));
      explanation.addChild(child);
    }
    
    return explanation;
  }

