  public List<Violation> test(List<Row> allRows) {
    Suggestion.ViolationCtx ctx = new Suggestion.ViolationCtx(this, allRows);
    if (isPerCollectiontag()) {
      Map<String, Map<String, Map<String, ReplicaCount>>> replicaCount = computeReplicaCounts(allRows);
      for (Map.Entry<String, Map<String, Map<String, ReplicaCount>>> e : replicaCount.entrySet()) {
        if (!collection.isPass(e.getKey())) continue;
        for (Map.Entry<String, Map<String, ReplicaCount>> shardVsCount : e.getValue().entrySet()) {
          if (!shard.isPass(shardVsCount.getKey())) continue;
          for (Map.Entry<String, ReplicaCount> counts : shardVsCount.getValue().entrySet()) {
            if (!replica.isPass(counts.getValue())) {
              Violation violation = new Violation(this,
                  e.getKey(),
                  shardVsCount.getKey(),
                  tag.name.equals("node") ? counts.getKey() : null,
                  counts.getValue(),
                  replica.delta(counts.getValue()),
                  counts.getKey());
              Suggestion.getTagType(tag.name).addViolatingReplicas(ctx.reset(counts.getKey(), counts.getValue(), violation));
            }
          }
        }
      }
    } else {
      for (Row r : allRows) {
        if (!globalTag.isPass(r)) {
          Suggestion.ConditionType.CORES.addViolatingReplicas(ctx.reset(null, null,
              new Violation(this, null, null, r.node, r.getVal(globalTag.name), globalTag.delta(r.getVal(globalTag.name)), null)));
        }
      }
    }
    return ctx.allViolations;

  }

