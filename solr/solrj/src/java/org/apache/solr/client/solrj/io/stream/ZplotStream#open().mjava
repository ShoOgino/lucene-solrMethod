  public void open() throws IOException {
    Map<String, Object> lets = streamContext.getLets();
    Set<Map.Entry<String, Object>> entries = letParams.entrySet();
    Map<String, Object> evaluated = new HashMap();

    //Load up the StreamContext with the data created by the letParams.
    int numTuples = -1;
    int columns = 0;
    boolean table = false;
    boolean distribution = false;
    boolean clusters = false;
    for(Map.Entry<String, Object> entry : entries) {
      ++columns;

      String name = entry.getKey();
      if(name.equals("table")) {
        table = true;
      } else if(name.equals("dist")) {
        distribution = true;
      } else if(name.equals("clusters")) {
        clusters = true;
      }

      Object o = entry.getValue();
      if(o instanceof StreamEvaluator) {
        Tuple eTuple = new Tuple(lets);
        StreamEvaluator evaluator = (StreamEvaluator)o;
        evaluator.setStreamContext(streamContext);
        Object eo = evaluator.evaluate(eTuple);
        if(eo instanceof List) {
          List l = (List)eo;
          if(numTuples == -1) {
            numTuples = l.size();
          } else {
            if(l.size() != numTuples) {
              throw new IOException("All lists provided to the zplot function must be the same length.");
            }
          }
          evaluated.put(name, l);
        } else if (eo instanceof Tuple) {
          evaluated.put(name, eo);
        } else {
          evaluated.put(name, eo);
        }
      } else {
        Object eval = lets.get(o);
        if(eval instanceof List) {
          List l = (List)eval;
          if(numTuples == -1) {
            numTuples = l.size();
          } else {
            if(l.size() != numTuples) {
              throw new IOException("All lists provided to the zplot function must be the same length.");
            }
          }
          evaluated.put(name, l);
        } else if(eval instanceof Tuple) {
          evaluated.put(name, eval);
        }
      }
    }

    if(columns > 1 && (table || distribution)) {
      throw new IOException("If the table or dist parameter is set there can only be one parameter.");
    }
    //Load the values into tuples

    List<Tuple> outTuples = new ArrayList();
    if(!table && !distribution && !clusters) {
      //Handle the vectors
      for (int i = 0; i < numTuples; i++) {
        Tuple tuple = new Tuple(new HashMap());
        for (String key : evaluated.keySet()) {
          List l = (List) evaluated.get(key);
          tuple.put(key, l.get(i));
        }

        outTuples.add(tuple);
      }

      //Generate the x axis if the tuples contain y and not x
      if (outTuples.get(0).fields.containsKey("y") && !outTuples.get(0).fields.containsKey("x")) {
        int x = 0;
        for (Tuple tuple : outTuples) {
          tuple.put("x", x++);
        }
      }
    } else if(clusters) {
      Object o = evaluated.get("clusters");
      KmeansEvaluator.ClusterTuple ct = (KmeansEvaluator.ClusterTuple)o;
      List<CentroidCluster<KmeansEvaluator.ClusterPoint>> cs = ct.getClusters();
      int clusterNum = 0;
      for(CentroidCluster<KmeansEvaluator.ClusterPoint> c : cs) {
        clusterNum++;
        List<KmeansEvaluator.ClusterPoint> points = c.getPoints();
        for(KmeansEvaluator.ClusterPoint p : points) {
          Tuple tuple = new Tuple(new HashMap());
          tuple.put("x", p.getPoint()[0]);
          tuple.put("y", p.getPoint()[1]);
          tuple.put("cluster", "cluster"+clusterNum);
          outTuples.add(tuple);
        }
      }
    } else if(distribution) {
      Object o = evaluated.get("dist");
      if(o instanceof RealDistribution) {
        RealDistribution realDistribution = (RealDistribution) o;
        List<SummaryStatistics> binStats = null;
        if(realDistribution instanceof  EmpiricalDistribution) {
          EmpiricalDistribution empiricalDistribution = (EmpiricalDistribution)realDistribution;
          binStats = empiricalDistribution.getBinStats();
        } else {
          double[] samples = realDistribution.sample(500000);
          EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(32);
          empiricalDistribution.load(samples);
          binStats = empiricalDistribution.getBinStats();
        }
        double[] x = new double[binStats.size()];
        double[] y = new double[binStats.size()];
        for (int i = 0; i < binStats.size(); i++) {
          x[i] = binStats.get(i).getMean();
          y[i] = realDistribution.density(x[i]);
        }

        for (int i = 0; i < x.length; i++) {
          Tuple tuple = new Tuple(new HashMap());
          if(!Double.isNaN(x[i])) {
            tuple.put("x", Precision.round(x[i], 2));
            if(y[i] == Double.NEGATIVE_INFINITY || y[i] == Double.POSITIVE_INFINITY) {
              tuple.put("y", 0);

            } else {
              tuple.put("y", y[i]);
            }
            outTuples.add(tuple);
          }
        }
      } else if(o instanceof IntegerDistribution) {
        IntegerDistribution integerDistribution = (IntegerDistribution)o;
        int[] samples = integerDistribution.sample(50000);
        Frequency frequency = new Frequency();
        for(int i : samples) {
          frequency.addValue(i);
        }

        Iterator it = frequency.valuesIterator();
        List<Long> values = new ArrayList();
        while(it.hasNext()) {
          values.add((Long)it.next());
        }
        int[] x = new int[values.size()];
        double[] y = new double[values.size()];
        for(int i=0; i<values.size(); i++) {
          x[i] = values.get(i).intValue();
          y[i] = integerDistribution.probability(x[i]);
        }

        for (int i = 0; i < x.length; i++) {
          Tuple tuple = new Tuple(new HashMap());
          tuple.put("x", x[i]);
          tuple.put("y", y[i]);
          outTuples.add(tuple);
        }
      } else if(o instanceof List) {
        List list = (List)o;
        if(list.get(0) instanceof Tuple) {
          List<Tuple> tlist = (List<Tuple>)o;
          Tuple tuple = tlist.get(0);
          if(tuple.fields.containsKey("N")) {
            for(Tuple t : tlist) {
              Tuple outtuple = new Tuple(new HashMap());
              outtuple.put("x", Precision.round(((double)t.get("mean")), 2));
              outtuple.put("y", t.get("prob"));
              outTuples.add(outtuple);
            }
          } else if(tuple.fields.containsKey("count")) {
            for(Tuple t : tlist) {
              Tuple outtuple = new Tuple(new HashMap());
              outtuple.put("x", t.get("value"));
              outtuple.put("y", t.get("pct"));
              outTuples.add(outtuple);
            }
          }
        }
      }
    } else if(table){
      //Handle the Tuple and List of Tuples
      Object o = evaluated.get("table");
      if(o instanceof List) {
        List<Tuple> tuples = (List<Tuple>)o;
        outTuples.addAll(tuples);
      } else if(o instanceof Tuple) {
        outTuples.add((Tuple)o);
      }
    }

    this.out = outTuples.iterator();
  }

