  protected ConcurrentUpdateSolrClient(Builder builder) {
    this.internalHttpClient = (builder.httpClient == null);
    this.client = new HttpSolrClient.Builder(builder.baseSolrUrl)
        .withHttpClient(builder.httpClient)
        .withConnectionTimeout(builder.connectionTimeoutMillis)
        .withSocketTimeout(builder.socketTimeoutMillis)
        .build();
    this.client.setFollowRedirects(false);
    this.queue = new LinkedBlockingQueue<>(builder.queueSize);
    this.threadCount = builder.threadCount;
    this.runners = new LinkedList<>();
    this.streamDeletes = builder.streamDeletes;
    this.connectionTimeout = builder.connectionTimeoutMillis;
    this.soTimeout = builder.socketTimeoutMillis;
    this.stallTime = Integer.getInteger("solr.cloud.client.stallTime", 15000);
    if (stallTime < pollQueueTime * 2) {
      throw new RuntimeException("Invalid stallTime: " + stallTime + "ms, must be 2x > pollQueueTime " + pollQueueTime);
    }

    if (builder.executorService != null) {
      this.scheduler = builder.executorService;
      this.shutdownExecutor = false;
    } else {
      this.scheduler = ExecutorUtil.newMDCAwareCachedThreadPool(new SolrjNamedThreadFactory("concurrentUpdateScheduler"));
      this.shutdownExecutor = true;
    }
    
    if (log.isDebugEnabled()) {
      this.pollInterrupts = new AtomicInteger();
      this.pollExits = new AtomicInteger();
      this.blockLoops = new AtomicInteger();
      this.emptyQueueLoops = new AtomicInteger();
    }
  }

