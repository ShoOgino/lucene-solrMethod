  public NodePreferenceRulesComparator(final List<PreferenceRule> preferenceRules, final SolrParams requestParams,
      final String nodeName, final String localHostAddress, final NodesSysPropsCacher sysPropsCache,
      final ReplicaListTransformerFactory defaultRltFactory, final ReplicaListTransformerFactory stableRltFactory) {
    this.sysPropsCache = sysPropsCache;
    this.preferenceRules = preferenceRules;
    this.nodeName = nodeName;
    this.localHostAddress = localHostAddress;
    final int maxIdx = preferenceRules.size() - 1;
    final PreferenceRule lastRule = preferenceRules.get(maxIdx);
    if (!ShardParams.SHARDS_PREFERENCE_REPLICA_BASE.equals(lastRule.name)) {
      this.sortRules = preferenceRules;
      this.baseReplicaListTransformer = defaultRltFactory.getInstance(null, requestParams, RequestReplicaListTransformerGenerator.RANDOM_RLTF);
    } else {
      if (maxIdx == 0) {
        this.sortRules = null;
      } else {
        this.sortRules = preferenceRules.subList(0, maxIdx);
      }
      String[] parts = lastRule.value.split(":", 2);
      switch (parts[0]) {
        case ShardParams.REPLICA_RANDOM:
          this.baseReplicaListTransformer = RequestReplicaListTransformerGenerator.RANDOM_RLTF.getInstance(parts.length == 1 ? null : parts[1], requestParams, null);
          break;
        case ShardParams.REPLICA_STABLE:
          this.baseReplicaListTransformer = stableRltFactory.getInstance(parts.length == 1 ? null : parts[1], requestParams, RequestReplicaListTransformerGenerator.RANDOM_RLTF);
          break;
        default:
          throw new IllegalArgumentException("Invalid base replica order spec");
      }
    }
  }

