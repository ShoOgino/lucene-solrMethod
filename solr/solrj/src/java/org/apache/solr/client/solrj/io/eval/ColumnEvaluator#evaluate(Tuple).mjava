  @Override
  public Object evaluate(Tuple tuple) throws IOException {    
    try{
      
      Object firstLevel = containedEvaluators.get(0).evaluate(tuple);
      
      if(!(firstLevel instanceof List<?>) || 0 != ((List<?>)firstLevel).stream().filter(value -> !(value instanceof Tuple)).count()){
        throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting a list of tuples but found %s", toExpression(constructingFactory), firstLevel.getClass().getSimpleName()));
      }

      List<Object> column = new ArrayList<>();
      for(Object innerTuple : (List<?>)firstLevel){
        column.add(containedEvaluators.get(1).evaluate((Tuple)innerTuple));
      }

      return normalizeOutputType(column);
    }
    catch(UncheckedIOException e){
      throw e.getCause();
    }
  }

