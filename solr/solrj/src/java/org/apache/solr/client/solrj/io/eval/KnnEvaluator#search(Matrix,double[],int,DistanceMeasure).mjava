  public static Matrix search(Matrix observations,
                              double[] vec,
                              int k,
                              DistanceMeasure distanceMeasure) {

    double[][] data = observations.getData();
    TreeSet<Neighbor> neighbors = new TreeSet<>();
    for(int i=0; i<data.length; i++) {
      double distance = distanceMeasure.compute(vec, data[i]);
      neighbors.add(new Neighbor(i, distance));
      if(neighbors.size() > k) {
        neighbors.pollLast();
      }
    }

    double[][] out = new double[neighbors.size()][];
    List<String> rowLabels = observations.getRowLabels();
    List<String> newRowLabels = new ArrayList<>();
    List<Number> indexes = new ArrayList<>();
    List<Number> distances = new ArrayList<>();
    int i=-1;

    while(neighbors.size() > 0) {
      Neighbor neighbor = neighbors.pollFirst();
      int rowIndex = neighbor.getRow();

      if(rowLabels != null) {
        newRowLabels.add(rowLabels.get(rowIndex));
      }

      out[++i] = data[rowIndex];
      distances.add(neighbor.getDistance());
      indexes.add(rowIndex);
    }

    Matrix knn = new Matrix(out);

    if(rowLabels != null) {
      knn.setRowLabels(newRowLabels);
    }

    knn.setColumnLabels(observations.getColumnLabels());
    knn.setAttribute("distances", distances);
    knn.setAttribute("indexes", indexes);
    return knn;
  }

