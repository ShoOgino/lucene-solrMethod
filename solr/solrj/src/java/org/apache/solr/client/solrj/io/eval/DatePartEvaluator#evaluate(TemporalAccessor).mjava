  /**
   * Evaluate the date based on the specified function
   *
   * @param date
   * @return the evaluated value
   */
  private Number evaluate(TemporalAccessor date) throws IOException {
    try {
      switch (function) {
        case year:
          return date.get(ChronoField.YEAR);
        case month:
          return date.get(ChronoField.MONTH_OF_YEAR);
        case day:
          return date.get(ChronoField.DAY_OF_MONTH);
        case dayOfYear:
          return date.get(ChronoField.DAY_OF_YEAR);
        case hour:
          return date.get(ChronoField.HOUR_OF_DAY);
        case minute:
          return date.get(ChronoField.MINUTE_OF_HOUR);
        case second:
          return date.get(ChronoField.SECOND_OF_MINUTE);
        case dayOfQuarter:
          return date.get(IsoFields.DAY_OF_QUARTER);
        case quarter:
          return date.get(IsoFields.QUARTER_OF_YEAR);
        case week:
          return date.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);
        case epoch:
          if (date instanceof LocalDateTime) {
            return ((LocalDateTime)date).atZone(ZoneOffset.UTC).toInstant().toEpochMilli();
          }
      }
    } catch (UnsupportedTemporalTypeException utte) {
      throw new IOException(String.format(Locale.ROOT, "It is not possible to call '%s' function on %s", function, date.getClass().getName()));
    }
    throw new IOException(String.format(Locale.ROOT, "Unsupported function '%s' called on %s", function, date.toString()));
  }

