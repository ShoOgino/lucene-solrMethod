  private Converter constructConverter(LENGTH_CONSTANT from, LENGTH_CONSTANT to) throws IOException {
    switch(from) {
      case INCHES:
        switch(to) {
          case MILLIMETERS:
            return (double value) -> value * 25.4;
          case CENTIMETERS:
            return (double value) -> value * 2.54;
          case METERS:
            return (double value) -> value * 0.0254;
          default:
            throw new EvaluatorException(String.format(Locale.ROOT,  "No conversion available from %s to %s", from, to));
        }
      case FEET:
        switch(to) {
          case METERS:
            return (double value) -> value * .30;
          default:
            throw new EvaluatorException(String.format(Locale.ROOT,  "No conversion available from %s to %s", from, to));
        }
      case YARDS:
        switch(to) {
          case METERS:
            return (double value) -> value * .91;
          case KILOMETERS:
            return (double value) -> value * 0.00091;
          default:
            throw new EvaluatorException(String.format(Locale.ROOT,  "No conversion available from %s to %s", from, to));
        }
      case MILES:
        switch(to) {
          case KILOMETERS:
            return (double value) -> value * 1.61;
          default:
            throw new EvaluatorException(String.format(Locale.ROOT,  "No conversion available from %s to %s", from, to));
        }
      case MILLIMETERS:
        switch (to) {
          case INCHES:
            return (double value) -> value * 0.039;
          default:
            throw new EvaluatorException(String.format(Locale.ROOT,  "No conversion available from %s to %s", from, to));
        }
      case CENTIMETERS:
        switch(to) {
          case INCHES:
            return (double value) -> value * 0.39;
          default:
            throw new EvaluatorException(String.format(Locale.ROOT,  "No conversion available from %s to %s", from, to));
        }
      case METERS:
        switch(to) {
          case FEET:
            return (double value) -> value * 3.28;
          default:
            throw new EvaluatorException(String.format(Locale.ROOT,  "No conversion available from %s to %s", from, to));
        }
      case KILOMETERS:
        switch(to) {
          case MILES:
            return (double value) -> value * 0.62;
          case FEET:
            return (double value) -> value * 3280.8;
          default:
            throw new EvaluatorException(String.format(Locale.ROOT,  "No conversion available from %s to %s", from, to));
        }
      default:
        throw new EvaluatorException(String.format(Locale.ROOT,  "No conversion available from %s to %s", from, to));
    }
  }

