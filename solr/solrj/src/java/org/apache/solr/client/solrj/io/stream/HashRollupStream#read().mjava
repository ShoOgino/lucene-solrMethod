  @SuppressWarnings({"unchecked"})
  public Tuple read() throws IOException {
    //On the first call to read build the tupleIterator.
    if(tupleIterator == null) {
      Map<HashKey, Metric[]> metricMap = new HashMap<>();
      while (true) {
        Tuple tuple = tupleStream.read();
        if (tuple.EOF) {
          @SuppressWarnings({"rawtypes"})
          List tuples = new ArrayList();
          for(Map.Entry<HashKey, Metric[]> entry : metricMap.entrySet()) {
            Tuple t = new Tuple();
            Metric[] finishedMetrics = entry.getValue();
            for (Metric metric : finishedMetrics) {
              t.put(metric.getIdentifier(), metric.getValue());
            }

            HashKey hashKey = entry.getKey();
            for (int i = 0; i < buckets.length; i++) {
              t.put(buckets[i].toString(), hashKey.getParts()[i]);
            }
            tuples.add(t);
          }
          tuples.add(tuple);
          this.tupleIterator = tuples.iterator();
          break;
        }

        Object[] bucketValues = new Object[buckets.length];
        for (int i = 0; i < buckets.length; i++) {
          bucketValues[i] = buckets[i].getBucketValue(tuple);
        }

        HashKey hashKey = new HashKey(bucketValues);
        Metric[] currentMetrics = metricMap.get(hashKey);

        if (currentMetrics != null) {
          for (Metric bucketMetric : currentMetrics) {
            bucketMetric.update(tuple);
          }
        } else {
          currentMetrics = new Metric[metrics.length];
          for (int i = 0; i < metrics.length; i++) {
            Metric bucketMetric = metrics[i].newInstance();
            bucketMetric.update(tuple);
            currentMetrics[i] = bucketMetric;
          }
          metricMap.put(hashKey, currentMetrics);
        }
      }
    }

    return tupleIterator.next();
  }

