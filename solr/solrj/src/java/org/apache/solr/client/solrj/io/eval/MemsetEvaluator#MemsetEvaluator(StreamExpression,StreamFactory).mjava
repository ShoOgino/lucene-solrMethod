  public MemsetEvaluator(StreamExpression expression, StreamFactory factory) throws IOException {
    super(expression, factory);

    /*
    * Instantiate and validate all the parameters
    */

    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);
    StreamExpressionNamedParameter colsExpression = factory.getNamedOperand(expression, "cols");
    StreamExpressionNamedParameter varsExpression = factory.getNamedOperand(expression, "vars");
    StreamExpressionNamedParameter sizeExpression = factory.getNamedOperand(expression, "size");

    if(1 != streamExpressions.size()){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting a single stream but found %d",expression, streamExpressions.size()));
    }

    if(null == colsExpression || !(colsExpression.getParameter() instanceof StreamExpressionValue)){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting single 'cols' parameter listing fields to sort over but didn't find one",expression));
    }

    if(null == varsExpression || !(varsExpression.getParameter() instanceof StreamExpressionValue)){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting single 'vars' parameter listing fields to sort over but didn't find one",expression));
    }

    if(null != sizeExpression) {
      StreamExpressionValue sizeExpressionValue = (StreamExpressionValue)sizeExpression.getParameter();
      String sizeString = sizeExpressionValue.getValue();
      size = Integer.parseInt(sizeString);
    }

    in = factory.constructStream(streamExpressions.get(0));

    StreamExpressionValue colsExpressionValue = (StreamExpressionValue)colsExpression.getParameter();
    StreamExpressionValue varsExpressionValue = (StreamExpressionValue)varsExpression.getParameter();
    String colsString = colsExpressionValue.getValue();
    String varsString = varsExpressionValue.getValue();

    vars = varsString.split(",");
    cols = colsString.split(",");

    if(cols.length != vars.length) {
      throw new IOException("The cols and vars lists must be the same size");
    }

    for(int i=0; i<cols.length; i++) {
      cols[i]  = cols[i].trim();
      vars[i]  = vars[i].trim();
    }
  }

