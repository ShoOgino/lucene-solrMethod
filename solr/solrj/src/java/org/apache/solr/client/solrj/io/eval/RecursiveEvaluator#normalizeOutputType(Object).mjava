  protected Object normalizeOutputType(Object value) {
    if(null == value){
      return null;
    }
    else if(value instanceof BigDecimal){
      BigDecimal bd = (BigDecimal)value;
      if(bd.signum() == 0 || bd.scale() <= 0 || bd.stripTrailingZeros().scale() <= 0){
        try{
          return bd.longValueExact();
        }
        catch(ArithmeticException e){
          // value was too big for a long, so use a double which can handle scientific notation
        }
      }
      
      return bd.doubleValue();
    }
    else if(value instanceof Double){
      if(Double.isNaN((Double)value)){
        return value;
      }
      
      // could be a long so recurse back in as a BigDecimal
      return normalizeOutputType(new BigDecimal((Double)value));
    }
    else if(value instanceof Number){
      return normalizeOutputType(new BigDecimal(((Number)value).toString()));
    }
    else if(value instanceof List){
      // normalize each value in the list
      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());
    }
    else{
      // anything else can just be returned as is
      return value;
    }

  }

