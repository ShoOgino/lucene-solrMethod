  protected Object normalizeOutputType(Object value) {
    if(null == value){
      return null;
    } else if (value instanceof VectorFunction) {
      return value;
    } else if(value instanceof BigDecimal){
      BigDecimal bd = (BigDecimal)value;
      return bd.doubleValue();
    }
    else if(value instanceof Long || value instanceof Integer) {
      return ((Number) value).longValue();
    }
    else if(value instanceof Double){
      return value;
    }
    else if(value instanceof Number){
      return ((Number) value).doubleValue();
    }
    else if(value instanceof List){
      // normalize each value in the list
      return ((List<?>)value).stream().map(innerValue -> normalizeOutputType(innerValue)).collect(Collectors.toList());
    } else if(value instanceof Tuple && value.getClass().getEnclosingClass() == null) {
      //If its a tuple and not a inner class that has extended tuple, which is done in a number of cases so that mathematical models
      //can be contained within a tuple.

      Tuple tuple = (Tuple)value;
      Map map = new HashMap();
      for(Object o : tuple.fields.keySet()) {
        Object v = tuple.fields.get(o);
        map.put(o, normalizeOutputType(v));
      }
      return new Tuple(map);
    }
    else{
      // anything else can just be returned as is
      return value;
    }

  }

