  public static List<String> getShards(String zkHost,
                                       String collection,
                                       StreamContext streamContext,
                                       SolrParams requestParams)
      throws IOException {
    Map<String, List<String>> shardsMap = null;
    List<String> shards = new ArrayList();

    if(streamContext != null) {
      shardsMap = (Map<String, List<String>>)streamContext.get("shards");
    }

    if(shardsMap != null) {
      //Manual Sharding
      shards = shardsMap.get(collection);
    } else {
      //SolrCloud Sharding
      CloudSolrClient cloudSolrClient =
          Optional.ofNullable(streamContext.getSolrClientCache()).orElseGet(SolrClientCache::new).getCloudSolrClient(zkHost);
      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();
      ClusterState clusterState = zkStateReader.getClusterState();
      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);
      Set<String> liveNodes = clusterState.getLiveNodes();


      ModifiableSolrParams solrParams = new ModifiableSolrParams(streamContext.getRequestParams());
      solrParams.add(requestParams);

      RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator =
          Optional.ofNullable(streamContext.getRequestReplicaListTransformerGenerator()).orElseGet(RequestReplicaListTransformerGenerator::new);

      ReplicaListTransformer replicaListTransformer = requestReplicaListTransformerGenerator.getReplicaListTransformer(solrParams);

      for(Slice slice : slices) {
        List<Replica> sortedReplicas = new ArrayList<>();
        for(Replica replica : slice.getReplicas()) {
          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {
            sortedReplicas.add(replica);
          }
        }

        replicaListTransformer.transform(sortedReplicas);
        if (sortedReplicas.size() > 0) {
          shards.add(sortedReplicas.get(0).getCoreUrl());
        }
      }
    }
    Object core = streamContext.get("core");
    if (streamContext != null && streamContext.isLocal() && core != null) {
      shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));
    }

    return shards;
  }

