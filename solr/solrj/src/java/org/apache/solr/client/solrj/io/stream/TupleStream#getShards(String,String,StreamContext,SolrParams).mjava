  @SuppressWarnings({"unchecked"})
  public static List<String> getShards(String zkHost,
                                       String collection,
                                       StreamContext streamContext,
                                       SolrParams requestParams)
      throws IOException {
    Map<String, List<String>> shardsMap = null;
    List<String> shards = new ArrayList<>();

    if(streamContext != null) {
      shardsMap = (Map<String, List<String>>)streamContext.get("shards");
    }

    if(shardsMap != null) {
      //Manual Sharding
      shards = shardsMap.get(collection);
    } else {
      //SolrCloud Sharding
      SolrClientCache solrClientCache = (streamContext != null ? streamContext.getSolrClientCache() : null);
      final SolrClientCache localSolrClientCache; // tracks any locally allocated cache that needs to be closed locally
      if (solrClientCache == null) { // streamContext was null OR streamContext.getSolrClientCache() returned null
        solrClientCache = localSolrClientCache = new SolrClientCache();
      } else {
        localSolrClientCache = null;
      }
      CloudSolrClient cloudSolrClient = solrClientCache.getCloudSolrClient(zkHost);
      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();
      ClusterState clusterState = zkStateReader.getClusterState();
      Slice[] slices = CloudSolrStream.getSlices(collection, zkStateReader, true);
      Set<String> liveNodes = clusterState.getLiveNodes();


      RequestReplicaListTransformerGenerator requestReplicaListTransformerGenerator;
      final ModifiableSolrParams solrParams;
      if (streamContext != null) {
        solrParams = new ModifiableSolrParams(streamContext.getRequestParams());
        requestReplicaListTransformerGenerator = streamContext.getRequestReplicaListTransformerGenerator();
      } else {
        solrParams = new ModifiableSolrParams();
        requestReplicaListTransformerGenerator = null;
      }
      if (requestReplicaListTransformerGenerator == null) {
        requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator();
      }
      solrParams.add(requestParams);

      ReplicaListTransformer replicaListTransformer = requestReplicaListTransformerGenerator.getReplicaListTransformer(solrParams);

      for(Slice slice : slices) {
        List<Replica> sortedReplicas = new ArrayList<>();
        for(Replica replica : slice.getReplicas()) {
          if(replica.getState() == Replica.State.ACTIVE && liveNodes.contains(replica.getNodeName())) {
            sortedReplicas.add(replica);
          }
        }

        replicaListTransformer.transform(sortedReplicas);
        if (sortedReplicas.size() > 0) {
          shards.add(sortedReplicas.get(0).getCoreUrl());
        }
      }
      if (localSolrClientCache != null) {
        localSolrClientCache.close();
      }
    }
    if (streamContext != null) {
      Object core = streamContext.get("core");
      if (streamContext.isLocal() && core != null) {
        shards.removeIf(shardUrl -> !shardUrl.contains((CharSequence) core));
      }
    }

    return shards;
  }

