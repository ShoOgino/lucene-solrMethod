  protected Object normalizeInputType(Object value){
    if(null == value){
      return null;
    } else if (value instanceof VectorFunction) {
      return value;
    }
    else if(value instanceof Double){
      if(Double.isNaN((Double)value)){
        return null;
      }
      return new BigDecimal(value.toString());
    }
    else if(value instanceof BigDecimal){
      return (BigDecimal)value;
    }
    else if(value instanceof Number){
      return new BigDecimal(value.toString());
    }
    else if(value instanceof Collection){
      //Let's first check to see if we have a List of Strings.
      //If we do let's try and convert to a list of doubles and see what happens
      try {
        List<Number> vector = new ArrayList();
        boolean allDoubles = true;
        for(Object o : (Collection)value) {
          if(o instanceof String) {
            Double d = Double.parseDouble(o.toString());
            vector.add(d);
          } else {
            allDoubles = false;
            break;
          }
        }
        if(allDoubles) {
          return vector;
        }
      } catch(Exception e) {

      }

      return ((Collection<?>)value).stream().map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());
    }
    else if(value.getClass().isArray()){
      Stream<?> stream = Stream.empty();
      if(value instanceof double[]){
        stream = Arrays.stream((double[])value).boxed();
      }
      else if(value instanceof int[]){
        stream = Arrays.stream((int[])value).boxed();
      }
      else if(value instanceof long[]){
        stream = Arrays.stream((long[])value).boxed();
      }
      else if(value instanceof String[]){
        stream = Arrays.stream((String[])value);
      }      
      return stream.map(innerValue -> normalizeInputType(innerValue)).collect(Collectors.toList());
    }
    else{
      // anything else can just be returned as is
      return value;
    }

  }

