  /* Returns a list of the tokens found. Assumed to be of the form
   * 'foo bar baz' and not of the for '(foo bar baz)'
   * 'foo bar (baz jaz)' is ok and will return three tokens of
   * 'foo', 'bar', and '(baz jaz)'
   */
  private static List<String> splitOn(String clause, char splitOnThis){
    String working = clause.trim();

    List<String> parts = new ArrayList<String>();

    while(true){ // will break when next splitOnThis isn't found
      int nextIdx = findNextClear(working, 0, splitOnThis);

      if(nextIdx < 0){
        parts.add(working);
        break;
      }

      parts.add(working.substring(0, nextIdx));

      // handle ending splitOnThis
      if(nextIdx+1 == working.length()){
        break;
      }

      working = working.substring(nextIdx + 1).trim();
    }

    return parts;
  }

