  /* Returns true if the clause has balanced parenthesis */
  private static boolean isBalanced(String clause){
    int openParens = 0;
    boolean isDoubleQuote = false;
    boolean isSingleQuote = false;
    boolean isEscaped = false;
    
    for(int idx = 0; idx < clause.length(); ++idx){
      char c = clause.charAt(idx);
      
      switch(c){
        case '\\':
          // We invert to support situations where \\ exists
          isEscaped = !isEscaped;
          break;
          
        case '"':
          // if we're not in a non-escaped single quote state, then invert the double quote state
          if(!isEscaped && !isSingleQuote){
            isDoubleQuote = !isDoubleQuote;
          }
          isEscaped = false;
          break;
        
        case '\'':
          // if we're not in a non-escaped double quote state, then invert the single quote state
          if(!isEscaped && !isDoubleQuote){
            isSingleQuote = !isSingleQuote;
          }
          isEscaped = false;
          break;
          
        case '(':
          // if we're not in a non-escaped quote state, then increment the # of open parens
          if(!isEscaped && !isSingleQuote && !isDoubleQuote){
            openParens += 1;
          }
          isEscaped = false;
          break;
          
        case ')':
          // if we're not in a non-escaped quote state, then decrement the # of open parens
          if(!isEscaped && !isSingleQuote && !isDoubleQuote){
            openParens -= 1;
            
            // If we're ever < 0 then we know we're not balanced
            if(openParens < 0){
              return false;
            }
          }
          isEscaped = false;
          break;
          
        default:
          isEscaped = false;
      }
    }

    return (0 == openParens);
  }

