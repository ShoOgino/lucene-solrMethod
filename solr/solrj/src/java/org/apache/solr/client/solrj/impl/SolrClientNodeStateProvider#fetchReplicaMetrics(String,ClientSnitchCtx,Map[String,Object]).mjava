  static void fetchReplicaMetrics(String solrNode, ClientSnitchCtx ctx, Map<String, Object> metricsKeyVsTag) {
    if (!ctx.isNodeAlive(solrNode)) return;
    ModifiableSolrParams params = new ModifiableSolrParams();
    params.add("key", metricsKeyVsTag.keySet().toArray(new String[0]));
    try {
      
      SimpleSolrResponse rsp = null;
      int cnt = 0;
      while (cnt++ < 3) {
        try {
          rsp = ctx.invoke(solrNode, CommonParams.METRICS_PATH, params);
          break;
        } catch (SolrException | SolrServerException | IOException e) {
          boolean hasCauseIOException = false;
          Throwable cause = e;
          while (cause != null) {
            if (cause instanceof IOException) {
              hasCauseIOException = true;
              break;
            }
            cause = cause.getCause();
          }
          if (hasCauseIOException || e instanceof IOException) {
            log.info("Error on getting remote info, trying again: " + e.getMessage());
            Thread.sleep(500);
            continue;
          } else {
            throw e;
          }
        }
      }
      
      
      SimpleSolrResponse frsp = rsp;
      metricsKeyVsTag.forEach((key, tag) -> {
        Object v = Utils.getObjectByPath(frsp.nl, true, Arrays.asList("metrics", key));
        if (tag instanceof Function) {
          Pair<String, Object> p = (Pair<String, Object>) ((Function) tag).apply(v);
          ctx.getTags().put(p.first(), p.second());
        } else {
          if (v != null) ctx.getTags().put(tag.toString(), v);
        }
      });
    } catch (Exception e) {
      log.warn("could not get tags from node " + solrNode, e);
    }
  }

