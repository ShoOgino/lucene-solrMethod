  public Tuple read() throws IOException {
    
    while(true){
      Tuple a = streamA.read();
      Tuple b = streamB.read();
      
      // if either are EOF then we're done
      if(a.EOF){ return a; }
      if(b.EOF){ return b; }
      
      if(eq.test(a, b)){
        streamB.pushBack(b);
        return a;
      }
      
      // We're not at the end and they're not equal. We now need to decide which we can
      // throw away. This is accomplished by checking which is less than the other. The
      // one that is less (determined by the sort) can be tossed. The other should
      // be pushed back and the loop continued. We don't have to worry about an == 0
      // result because we already know tuples a and b are not equal. And because eq
      // is derived from the sorts of both streamA and streamB we can rest assured that
      // equality is not a possibility.
      int aComp = streamA.getStreamSort().compare(a, b);
      if(aComp < 0){ streamB.pushBack(b); }
      else{ streamA.pushBack(a); }
    }
  }

