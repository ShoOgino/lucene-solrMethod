  public void open() throws IOException {
    Map<String, Object> lets = streamContext.getLets();
    Set<Map.Entry<String, Object>> entries = letParams.entrySet();

    //Load up the StreamContext with the data created by the letParams.
    for(Map.Entry<String, Object> entry : entries) {
      String name = entry.getKey();
      Object o = entry.getValue();
      if(o instanceof TupleStream) {
        List<Tuple> tuples = new ArrayList();
        TupleStream tStream = (TupleStream)o;
        tStream.setStreamContext(streamContext);
        try {
          tStream.open();
          TUPLES:
          while(true) {
            Tuple tuple = tStream.read();
            if (tuple.EOF) {
              break TUPLES;
            } else {
              tuples.add(tuple);
            }
          }
          lets.put(name, tuples);
        } finally {
          tStream.close();
        }
      } else {
        //Add the data from the StreamContext to a tuple.
        //Let the evaluator works from this tuple.
        //This will allow columns to be created from tuples already in the StreamContext.
        Tuple eTuple = new Tuple(lets);
        StreamEvaluator evaluator = (StreamEvaluator)o;
        evaluator.setStreamContext(streamContext);
        Object eo = evaluator.evaluate(eTuple);
        if(evaluator instanceof MemsetEvaluator) {
          Map mem = (Map)eo;
          lets.putAll(mem);
        } else {
          lets.put(name, eo);
        }
      }
    }
    stream.open();
  }

