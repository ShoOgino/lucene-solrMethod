  @Override
  public int compare(Object left, Object right) {
    if (this.sortRules != null) {
      for (PreferenceRule preferenceRule: this.sortRules) {
        final boolean lhs;
        final boolean rhs;
        switch (preferenceRule.name) {
          case ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE:
            lhs = hasReplicaType(left, preferenceRule.value);
            rhs = hasReplicaType(right, preferenceRule.value);
            break;
          case ShardParams.SHARDS_PREFERENCE_REPLICA_LOCATION:
            lhs = hasCoreUrlPrefix(left, preferenceRule.value);
            rhs = hasCoreUrlPrefix(right, preferenceRule.value);
            break;
          case ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP:
            if (sysPropsCache == null) {
              throw new IllegalArgumentException("Unable to get the NodesSysPropsCacher on sorting replicas by preference:"+ preferenceRule.value);
            }
            lhs = hasSameMetric(left, preferenceRule.value);
            rhs = hasSameMetric(right, preferenceRule.value);
            break;
          case ShardParams.SHARDS_PREFERENCE_REPLICA_BASE:
            throw new IllegalArgumentException("only one base replica order may be specified in "
                + ShardParams.SHARDS_PREFERENCE + ", and it must be specified last");
          default:
            throw new IllegalArgumentException("Invalid " + ShardParams.SHARDS_PREFERENCE + " type: " + preferenceRule.name);
        }
        if (lhs != rhs) {
          return lhs ? -1 : +1;
        }
      }
    }
    return 0;
  }

