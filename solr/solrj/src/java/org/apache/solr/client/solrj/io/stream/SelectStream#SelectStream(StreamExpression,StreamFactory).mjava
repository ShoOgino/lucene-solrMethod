  public SelectStream(StreamExpression expression,StreamFactory factory) throws IOException {
    // grab all parameters out
    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);
    List<StreamExpressionParameter> selectAsFieldsExpressions = factory.getOperandsOfType(expression, StreamExpressionValue.class);
    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamOperation.class);
    List<StreamExpression> evaluatorExpressions = factory.getExpressionOperandsRepresentingTypes(expression, StreamEvaluator.class);
    
    // validate expression contains only what we want.
    if(expression.getParameters().size() != streamExpressions.size() + selectAsFieldsExpressions.size() + operationExpressions.size()){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - unknown operands found", expression));
    }
    
    if(1 != streamExpressions.size()){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting single stream but found %d (must be TupleStream types)",expression, streamExpressions.size()));
    }

    if(0 == selectAsFieldsExpressions.size()){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting at least one select field but found %d",expression, streamExpressions.size()));
    }
    
    if(0 != evaluatorExpressions.size()){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - evaluators must be given a name, like 'add(...) as result' but found %d evaluators without names",expression, evaluatorExpressions.size()));
    }

    stream = factory.constructStream(streamExpressions.get(0));
    
    selectedFields = new HashMap<String,String>();
    selectedEvaluators = new HashMap<StreamEvaluator, String>();
    for(StreamExpressionParameter parameter : selectAsFieldsExpressions){
      StreamExpressionValue selectField = (StreamExpressionValue)parameter;
      String value = selectField.getValue().trim();
      
      // remove possible wrapping quotes
      if(value.length() > 2 && value.startsWith("\"") && value.endsWith("\"")){
        value = value.substring(1, value.length() - 1);
      }
      if(value.toLowerCase(Locale.ROOT).contains(" as ")){
        String[] parts = value.split("(?i) as "); // ensure we are splitting in a case-insensitive way
        if(2 != parts.length){
          throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting select field of form 'fieldA' or 'fieldA as alias' but found %s",expression, value));
        }
        
        String asValue = parts[0].trim();
        String asName = parts[1].trim();
        
        boolean handled = false;
        if(asValue.contains("(")){
          // possible evaluator
          try{
            StreamExpression asValueExpression = StreamExpressionParser.parse(asValue);
            if(factory.doesRepresentTypes(asValueExpression, StreamEvaluator.class)){
              selectedEvaluators.put(factory.constructEvaluator(asValueExpression), asName);
              handled = true;
            }
          }
          catch(Throwable e){
            // it was not handled, so treat as a non-evaluator
          }
        }
        
        if(!handled){        
          selectedFields.put(asValue, asName);
        }
      }
      else{
        selectedFields.put(value,value);
      }
    }
    
    operations = new ArrayList<>();
    for(StreamExpression expr : operationExpressions){
      operations.add(factory.constructOperation(expr));
    }
  }

