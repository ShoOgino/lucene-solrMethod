  public HavingStream(StreamExpression expression, StreamFactory factory) throws IOException{
    // grab all parameters out
    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);
    List<StreamExpression> operationExpressions = factory.getExpressionOperandsRepresentingTypes(expression, BooleanOperation.class);

    // validate expression contains only what we want.
    if(expression.getParameters().size() != streamExpressions.size() + 1){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - unknown operands found", expression));
    }

    if(1 != streamExpressions.size()){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting a single stream but found %d",expression, streamExpressions.size()));
    }


    BooleanOperation booleanOperation = null;
    if(operationExpressions != null && operationExpressions.size() == 1) {
      StreamExpression ex = operationExpressions.get(0);
      StreamOperation operation = factory.constructOperation(ex);
      if(operation instanceof BooleanOperation) {
        booleanOperation = (BooleanOperation) operation;
      } else {
        throw new IOException("The HavingStream requires a BooleanOperation. A StreamOperation was provided.");
      }
    } else {
      throw new IOException("The HavingStream requires a BooleanOperation.");
    }

    init(factory.constructStream(streamExpressions.get(0)), booleanOperation);
  }

