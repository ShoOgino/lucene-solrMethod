  public Tuple read() throws IOException {
    Tuple original = stream.read();
    
    if(original.EOF){
      return original;
    }

    // create a copy with the limited set of fields
    Tuple workingToReturn = new Tuple(new HashMap<>());
    Tuple workingForEvaluators = new Tuple(new HashMap<>());

    //Clear the TupleContext before running the evaluators.
    //The TupleContext allows evaluators to cache values within the scope of a single tuple.
    //For example a LocalDateTime could be parsed by one evaluator and used by other evaluators within the scope of the tuple.
    //This avoids the need to create multiple LocalDateTime instances for the same tuple to satisfy a select expression.

    streamContext.getTupleContext().clear();

    for(Object fieldName : original.fields.keySet()){
      workingForEvaluators.put(fieldName, original.get(fieldName));
      if(selectedFields.containsKey(fieldName)){
        workingToReturn.put(selectedFields.get(fieldName), original.get(fieldName));
      }
    }
    
    // apply all operations
    for(StreamOperation operation : operations){
      operation.operate(workingToReturn);
      operation.operate(workingForEvaluators);
    }
    
    // Apply all evaluators
    for(Map.Entry<StreamEvaluator, String> selectedEvaluator : selectedEvaluators.entrySet()) {
      Object o = selectedEvaluator.getKey().evaluate(workingForEvaluators);
      if(o != null) {
        workingForEvaluators.put(selectedEvaluator.getValue(), o);
        workingToReturn.put(selectedEvaluator.getValue(), o);
      }
    }
    
    return workingToReturn;
  }

