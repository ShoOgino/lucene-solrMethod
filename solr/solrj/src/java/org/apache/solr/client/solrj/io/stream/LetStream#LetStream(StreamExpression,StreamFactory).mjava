  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {
    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);

    if(streamExpressions.size() < 2){
      throw new IOException(String.format(Locale.ROOT,"Invalid expression %s - expecting atleast 2 streams but found %d",expression, streamExpressions.size()));
    }

    TupleStream stream = null;
    List<CellStream> cellStreams = new ArrayList();

    for(StreamExpression streamExpression : streamExpressions) {
      TupleStream s = factory.constructStream(streamExpression);
      if(s instanceof CellStream) {
        cellStreams.add((CellStream)s);
      } else {
        if(stream == null) {
          stream = s;
        } else {
          throw new IOException("Found more then one stream that was not a CellStream");
        }
      }
    }

    init(stream, cellStreams);
  }

