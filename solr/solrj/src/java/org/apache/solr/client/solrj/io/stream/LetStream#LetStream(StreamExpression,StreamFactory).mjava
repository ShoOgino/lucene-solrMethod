  public LetStream(StreamExpression expression, StreamFactory factory) throws IOException {
    List<StreamExpression> streamExpressions = factory.getExpressionOperandsRepresentingTypes(expression, Expressible.class, TupleStream.class);

    List<StreamExpressionNamedParameter> namedParams = factory.getNamedOperands(expression);
    //Get all the named params
    boolean echo = false;
    String currentName = null;
    for(StreamExpressionParameter np : namedParams) {
      String name = ((StreamExpressionNamedParameter)np).getName();
      currentName = name;

      if(name.equals("echo")) {
        echo = true;
        continue;
      }

      StreamExpressionParameter param = ((StreamExpressionNamedParameter)np).getParameter();
      if(factory.isEvaluator((StreamExpression)param)) {
        StreamEvaluator evaluator = factory.constructEvaluator((StreamExpression) param);
        letParams.put(name, evaluator);
      } else {
        TupleStream tupleStream = factory.constructStream((StreamExpression) param);
        letParams.put(name, tupleStream);
      }
    }

    if(streamExpressions.size() > 0) {
      stream = factory.constructStream(streamExpressions.get(0));
    } else {
      StreamExpression tupleExpression = new StreamExpression("tuple");
      if(!echo) {
        tupleExpression.addParameter(new StreamExpressionNamedParameter(currentName, currentName));
      } else {
        Set<String> names = letParams.keySet();
        for(String name : names) {
          tupleExpression.addParameter(new StreamExpressionNamedParameter(name, name));
        }
      }
      stream = factory.constructStream(tupleExpression);
    }
  }

