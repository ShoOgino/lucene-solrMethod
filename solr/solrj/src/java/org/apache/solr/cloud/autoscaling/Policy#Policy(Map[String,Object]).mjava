  public Policy(Map<String, Object> jsonMap) {

    clusterPreferences = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_PREFERENCE, emptyList())).stream()
        .map(Preference::new)
        .collect(toList());
    for (int i = 0; i < clusterPreferences.size() - 1; i++) {
      Preference preference = clusterPreferences.get(i);
      preference.next = clusterPreferences.get(i + 1);
    }
    if (clusterPreferences.isEmpty()) {
      clusterPreferences.add(new Preference((Map<String, Object>) Utils.fromJSONString("{minimize : cores, precision:1}")));
    }
    for (Preference preference : clusterPreferences) {
      if (params.contains(preference.name.name())) {
        throw new RuntimeException(preference.name + " is repeated");
      }
      params.add(preference.name.toString());
      preference.idx = params.size() - 1;
    }
    clusterPolicy = ((List<Map<String, Object>>) jsonMap.getOrDefault(CLUSTER_POLICY, emptyList())).stream()
        .map(Clause::new)
        .filter(clause -> {
          clause.addTags(params);
          return true;
        })
        .collect(Collectors.toList());

    ((Map<String, List<Map<String, Object>>>) jsonMap.getOrDefault("policies", emptyMap())).forEach((s, l1) ->
        this.policies.put(s, l1.stream()
            .map(Clause::new)
            .filter(clause -> {
              clause.addTags(params);
              return true;
            })
            .sorted()
            .collect(toList())));

    this.policies.forEach((s, c) -> {
      for (Clause clause : c) {
        if (!clause.isPerCollectiontag())
          throw new RuntimeException(clause.globalTag.name + " is only allowed in 'cluster-policy'");
      }
    });



    clusterPolicy.stream().forEach(new Consumer<Clause>() {
      @Override
      public void accept(Clause clause) {
        clause.addTags(params);
      }
    });
  }

