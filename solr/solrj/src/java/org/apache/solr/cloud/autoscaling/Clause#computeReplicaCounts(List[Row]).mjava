  private Map<String, Map<String, Map<String, AtomicInteger>>> computeReplicaCounts(List<Row> allRows) {
    Map<String, Map<String, Map<String, AtomicInteger>>> replicaCount = new HashMap<>();
    for (Row row : allRows)
      for (Map.Entry<String, Map<String, List<ReplicaInfo>>> colls : row.replicaInfo.entrySet()) {
        String collectionName = colls.getKey();
        if (!collection.isPass(collectionName)) continue;
        replicaCount.putIfAbsent(collectionName, new HashMap<>());
        Map<String, Map<String, AtomicInteger>> collMap = replicaCount.get(collectionName);
        for (Map.Entry<String, List<ReplicaInfo>> shards : colls.getValue().entrySet()) {
          String shardName = shards.getKey();
          if (ANY.equals(shard.val)) shardName = ANY;
          if (!shard.isPass(shardName)) break;
          collMap.putIfAbsent(shardName, new HashMap<>());
          Map<String, AtomicInteger> tagVsCount = collMap.get(shardName);
          AtomicInteger count = null;
          Object tagVal = row.getVal(tag.name);
          if (tag.isPass(tagVal)) {
            tagVsCount.put(String.valueOf(tagVal), count = tagVsCount.getOrDefault(tagVal, new AtomicInteger()));
            count.addAndGet(shards.getValue().size());
          }
        }
      }
    return replicaCount;
  }

