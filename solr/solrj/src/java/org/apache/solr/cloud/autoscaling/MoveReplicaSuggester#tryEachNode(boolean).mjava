  Map tryEachNode(boolean strict) {
    //iterate through elements and identify the least loaded
    for (Pair<Policy.ReplicaInfo, Row> fromReplica : getValidReplicas(true, true, -1)) {
      Row fromRow = fromReplica.second();
      String coll = fromReplica.first().collection;
      String shard = fromReplica.first().shard;
      Pair<Row, Policy.ReplicaInfo> pair = fromRow.removeReplica(coll, shard);
      Row tmpRow = pair.first();
      if (tmpRow == null) {
        //no such replica available
        continue;
      }
      tmpRow.violations.clear();
      for (Clause clause : session.expandedClauses) {
        if (strict || clause.strict) {
          clause.test(tmpRow);
        }
      }
      final int i = getMatrix().indexOf(fromRow);
      if (tmpRow.violations.isEmpty()) {
        for (int j = getMatrix().size() - 1; j > i; j--) {
          Row targetRow = getMatrix().get(j);
          if (!isAllowed(targetRow.node, Hint.TARGET_NODE)) continue;
          targetRow = targetRow.addReplica(coll, shard);
          targetRow.violations.clear();
          for (Clause clause : session.expandedClauses) {
            if (strict || clause.strict) clause.test(targetRow);
          }
          if (targetRow.violations.isEmpty()) {
            getMatrix().set(i, getMatrix().get(i).removeReplica(coll, shard).first());
            getMatrix().set(j, getMatrix().get(j).addReplica(coll, shard));
            return Utils.makeMap("operation", MOVEREPLICA.toLower(),
                COLLECTION_PROP, coll,
                SHARD_ID_PROP, shard,
                NODE, fromRow.node,
                REPLICA, pair.second().name,
                "targetNode", targetRow.node);
          }
        }
      }
    }
    return null;
  }

