    public void testBuild () {
        try {
            IndexReader r=IndexReader.open(userindex);

            spellChecker.clearIndex();

            addwords(r, "field1");
            int num_field1=this.numdoc();

            addwords(r, "field2");
            int num_field2=this.numdoc();

            this.assertTrue(num_field2==num_field1+1);

            // test small word
            String[] l=spellChecker.suggestSimilar("fvie", 2);
            this.assertTrue(l[0].equals("five"));

            l=spellChecker.suggestSimilar("fiv", 2);
            this.assertTrue(l[0].equals("five"));

            l=spellChecker.suggestSimilar("ive", 2);
            this.assertTrue(l[0].equals("five"));

            l=spellChecker.suggestSimilar("fives", 2);
            this.assertTrue(l[0].equals("five"));

            l=spellChecker.suggestSimilar("fie", 2);
            this.assertTrue(l[0].equals("five"));

            l=spellChecker.suggestSimilar("fi", 2);
            this.assertEquals(0,l.length);

            // test restreint to a field
            l=spellChecker.suggestSimilar("tousand", 10, r, "field1", false);
            this.assertEquals(0,l.length); // there isn't the term thousand in the field field1

            l=spellChecker.suggestSimilar("tousand", 10, r, "field2", false);
            this.assertEquals(1,l.length); // there is the term thousand in the field field2
        }
        catch (IOException e) {
            e.printStackTrace();
            this.assertTrue(false);
        }

    }

