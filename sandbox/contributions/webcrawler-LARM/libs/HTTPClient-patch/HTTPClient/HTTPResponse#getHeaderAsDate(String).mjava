    /**
     * Retrieves the value for a given header. The value is parsed as a date; if
     * this fails it is parsed as a long representing the number of seconds
     * since 12:00 AM, Jan 1st, 1970. If this also fails an exception is thrown.
     * <br>
     * Note: When sending dates use Util.httpDate().
     *
     * @param hdr                           the header name.
     * @return                              the value for the header, or null if
     *      non-existent.
     * @exception IllegalArgumentException  if the header's value is neither a
     *      legal date nor a number.
     * @exception IOException               if any exception occurs on the
     *      socket.
     * @exception ModuleException           if any module encounters an
     *      exception.
     */
    public Date getHeaderAsDate(String hdr)
        throws IOException, IllegalArgumentException, ModuleException
    {
        String raw_date = getHeader(hdr);
        if (raw_date == null)
        {
            return null;
        }

        // asctime() format is missing an explicit GMT specifier
        if (raw_date.toUpperCase().indexOf("GMT") == -1 &&
                raw_date.indexOf(' ') > 0)
        {
            raw_date += " GMT";
        }

        Date date;

        try
        {
            date = Util.parseHttpDate(raw_date);
        }
        catch (IllegalArgumentException iae)
        {
            // some servers erroneously send a number, so let's try that
            long time;
            try
            {
                time = Long.parseLong(raw_date);
            }
            catch (NumberFormatException nfe)
            {
                throw iae;
            }
            // give up
            if (time < 0)
            {
                time = 0;
            }
            date = new Date(time * 1000L);
        }

        return date;
    }

