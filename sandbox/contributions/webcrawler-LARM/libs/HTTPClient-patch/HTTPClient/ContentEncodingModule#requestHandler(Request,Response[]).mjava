    /**
     * Invoked by the HTTPClient.
     *
     * @param req                  Description of the Parameter
     * @param resp                 Description of the Parameter
     * @return                     Description of the Return Value
     * @exception ModuleException  Description of the Exception
     */
    public int requestHandler(Request req, Response[] resp)
        throws ModuleException
    {
        // parse Accept-Encoding header

        int idx;
        NVPair[] hdrs = req.getHeaders();
        for (idx = 0; idx < hdrs.length; idx++)
        {
            if (hdrs[idx].getName().equalsIgnoreCase("Accept-Encoding"))
            {
                break;
            }
        }

        Vector pae;
        if (idx == hdrs.length)
        {
            hdrs = Util.resizeArray(hdrs, idx + 1);
            req.setHeaders(hdrs);
            pae = new Vector();
        }
        else
        {
            try
            {
                pae = Util.parseHeader(hdrs[idx].getValue());
            }
            catch (ParseException pe)
            {
                throw new ModuleException(pe.toString());
            }
        }

        // done if "*;q=1.0" present

        HttpHeaderElement all = Util.getElement(pae, "*");
        if (all != null)
        {
            NVPair[] params = all.getParams();
            for (idx = 0; idx < params.length; idx++)
            {
                if (params[idx].getName().equalsIgnoreCase("q"))
                {
                    break;
                }
            }

            if (idx == params.length)
            {
                // no qvalue, i.e. q=1.0
                return REQ_CONTINUE;
            }

            if (params[idx].getValue() == null ||
                    params[idx].getValue().length() == 0)
            {
                throw new ModuleException("Invalid q value for \"*\" in " +
                        "Accept-Encoding header: ");
            }

            try
            {
                if (Float.valueOf(params[idx].getValue()).floatValue() > 0.)
                {
                    return REQ_CONTINUE;
                }
            }
            catch (NumberFormatException nfe)
            {
                throw new ModuleException("Invalid q value for \"*\" in " +
                        "Accept-Encoding header: " + nfe.getMessage());
            }
        }

        // Add gzip, deflate and compress tokens to the Accept-Encoding header

        if (!pae.contains(new HttpHeaderElement("deflate")))
        {
            pae.addElement(new HttpHeaderElement("deflate"));
        }
        if (!pae.contains(new HttpHeaderElement("gzip")))
        {
            pae.addElement(new HttpHeaderElement("gzip"));
        }
        if (!pae.contains(new HttpHeaderElement("x-gzip")))
        {
            pae.addElement(new HttpHeaderElement("x-gzip"));
        }
        if (!pae.contains(new HttpHeaderElement("compress")))
        {
            pae.addElement(new HttpHeaderElement("compress"));
        }
        if (!pae.contains(new HttpHeaderElement("x-compress")))
        {
            pae.addElement(new HttpHeaderElement("x-compress"));
        }

        hdrs[idx] = new NVPair("Accept-Encoding", Util.assembleHeader(pae));

        return REQ_CONTINUE;
    }

