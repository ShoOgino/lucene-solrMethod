    /**
     * Description of the Method
     *
     * @exception Exception  Description of the Exception
     */
    public void tokenize()
        throws Exception
    {
        int c;


        while ((c = read()) != -1)
        {
            switch (state)
            {
                case ST_START:
                    switch (c)
                    {
                        case '<':
                            state = ST_TAG_LT;
                            linkTagType = LINKTYPE_NONE;
                            linkAttrFound = false;
                            linkAttrType = 0;
                            linkValue = "";

                            isStartTag = true;
                            keepPCData= false;

                            // until proven wrong
                            tagname.reset();
                            break;
                        case ' ':
                        case '\t':
                        case '\r':
                        case '\n':
                            if (!rcgnzWS)
                            {
                                break;
                            }
                        // else fall through
                        default:
                            state = ST_PCDATA;
                            if(keepPCData)
                            {
                                pcData.write(c);
                                pcDataLength++;
                                if(pcDataLength > MAX_PCDATA_LENGTH)
                                {
                                    this.gotPCDATA(false);
                                    keepPCData = false;
                                }
                            }

                    }
                    break;
                case ST_PCDATA:
                    if (c == '<')
                    {
                        if(keepPCData)
                        {
                            gotPCDATA(true);
                            keepPCData = false;
                        }
                        linkTagType = LINKTYPE_NONE;
                        linkAttrFound = false;
                        linkAttrType = 0;
                        linkValue = "";
                        state = ST_TAG_LT;
                    }
                    else
                    {
                        if(keepPCData)
                        {
                            pcData.write(c);
                            pcDataLength++;
                            if(pcDataLength > MAX_PCDATA_LENGTH)
                            {
                                this.gotPCDATA(false);
                                keepPCData = false;
                            }

                        }
                    }
                    break;
                case ST_TAG_LT:
                    switch (c)
                    {
                        case '/':
                            isStartTag = false;
                            state = ST_TAG_NAME;
                            break;
                        case '!':
                            c = read();
                            if ((c == '-' && !rcgnzComments) || (c == '[' && !rcgnzCDATA))
                            {
                                state = ST_PCDATA;
                                pcData.reset();
                                pcData.write(c);
                                break;
                            }
                            if (c == '-')
                            {
                                state = ST_COMMENT;
                            }
                            else if (c == '[')
                            {
                                parseCDATA();
                            }
                            else
                            {
                                // FIXME: shouldn't be delivered as PCDATA
                                //warning("Bad markup " + buf);
                                state = ST_PCDATA;
                                pcData.reset();
                                pcData.write(c);
                            }
                            break;
                        case '?':
                            parsePI();
                            break;
                        case ' ':
                        case '\t':
                        case '\r':
                        case '\n':
                            state = ST_TAG_WS;
                            break;
                        default:
                            tagname.write(Character.toLowerCase((char) c));
                            // ## changed
                            state = ST_TAG_NAME;
                    }
                    break;
                case ST_TAG_NAME:
                    switch (c)
                    {
                        case ' ':
                        case '\t':
                        case '\r':
                        case '\n':
                            state = ST_TAG_WS;
                            gotTagName();
                            // ## changed
                            break;
                        case '/':
                            state = ST_EMPTY_TAG_SLASH;
                            gotTagName();
                            // ## changed
                            break;
                        case '>':
                            gotTagName();
                            // ## changed
                            gotTag();
                            break;
                        default:
                            tagname.write(Character.toLowerCase((char) c));
                        // ## changed
                    }
                    break;
                case ST_TAG_WS:
                    switch (c)
                    {
                        case ' ':
                        case '\t':
                        case '\r':
                        case '\n':
                            break;
                        case '/':
                            state = ST_EMPTY_TAG_SLASH;
                            break;
                        case '>':
                            gotTag();
                            break;
                        case '?':
                        // NOTE: if !inXMLDecl we fall through to default case
                        default:
                            if (!isStartTag)
                            {
                                // bit of a hack this...
                                //errHandler.warning("Malformed tag: "+buf, sysID, _line, _column);
                                //err_continue("Malformed tag: "+buf);
                                toStart();
                                // ## changed
                                if (c == '<')
                                {
                                    gotPCDATA(true);
                                    keepPCData = false;
                                    state = ST_TAG_LT;
                                }
                                else
                                {
                                    // we get here e.g. if there's an end tag with attributes
                                    state = ST_PCDATA;
                                    pcData.reset();
                                }
                            }
                            else
                            {
                                // FIXME: this accepts way too many first chars for attr name
                                attrName.write(Character.toLowerCase((char) c));
                                state = ST_NAME;
                            }
                    }
                    break;
                case ST_EMPTY_TAG_SLASH:
                    if (c == '>')
                    {
                        //tagtype = TAG_EMPTY;
                        gotTag();
                        break;
                    }
                    else
                    {
                        // ERROR !? - can't throw Exception here - we go to next tag...
                        state = ST_PCDATA;
                        pcData.reset();
                    }
                    break;
                case ST_NAME:
                    switch (c)
                    {
                        case ' ':
                        case '\t':
                        case '\r':
                        case '\n':
                            if (attrName.size() > 0)
                            {
                                state = ST_NAME_WS;
                            }
                            break;
                        case '>':
                            if (attrName.size() > 0)
                            {
                                gotAttr();
                            }
                            gotTag();
                            break;
                        case '=':
                            state = ST_EQ;
                            break;
                        default:
                            if (isCtlOrTspecial(c))
                            {
                                state = ST_PCDATA;
                                pcData.reset();
                            }
                            else
                            {
                                attrName.write(Character.toLowerCase((char) c));
                            }
                    }
                    break;
                case ST_NAME_WS:
                    // white-space between name and '='
                    switch (c)
                    {
                        case ' ':
                        case '\t':
                        case '\r':
                        case '\n':
                            break;
                        case '=':
                            state = ST_EQ;
                            break;
                        case '>':
                            gotAttr();
                            gotTag();
                            break;
                        default:
                            if (isNameChar(c))
                            {
                                gotAttr();
                                attrName.write(Character.toLowerCase((char) c));
                                state = ST_TAG_WS;
                            }
                            else
                            {
                                state = ST_PCDATA;
                                pcData.reset();
                            }
                    }
                    break;
                case ST_EQ:
                    // white-space between '=' and value
                    switch (c)
                    {
                        case ' ':
                        case '\t':
                        case '\r':
                        case '\n':
                            break;
                        case '"':
                            qchar = '"';
                            state = ST_VALUE_QUOTED;
                            break;
                        case '\'':
                            qchar = '\'';
                            state = ST_VALUE_QUOTED;
                            break;
                        default:
                            if (isCtlOrTspecial(c))
                            {
                                state = ST_PCDATA;
                                pcData.reset();
                            }
                            else
                            {
                                attrValue.write(c);
                                state = ST_VALUE;
                            }
                    }
                    break;
                case ST_VALUE:
                    switch (c)
                    {
                        case ' ':
                        case '\t':
                        case '\r':
                        case '\n':
                            gotAttr();
                            state = ST_TAG_WS;
                            break;
                        case '>':
                            gotAttr();
                            gotTag();
                            break;
                        /*
                         *  case '/':     // FIXME: HTML knows things like <a href=a/b.html> !!
                         *  gotAttr();
                         *  state = ST_EMPTY_TAG_SLASH;
                         *  break;
                         */
                        default:
                            if (isValueBreaker(c))
                            {
                                state = ST_PCDATA;
                                pcData.reset();
                            }
                            else
                            {
                                attrValue.write(c);
                            }
                    }
                    break;
                case ST_VALUE_QUOTED:
                    if (c == qchar)
                    {
                        gotAttr();
                        state = ST_TAG_WS;
                    }
                    else
                    {
                        attrValue.write(c);
                    }
                    break;
                case ST_COMMENT:
                    // we've seen "...<!-" by now
                    try
                    {
                        if (c != '-')
                        {
                            //warning("Bad comment");
                            state = ST_PCDATA;
                            pcData.reset();
                            break;
                        }
                        // we're within comment - read till we see "--"
                        while (true)
                        {
                            while (read_ex() != '-')
                            {
                                ;
                            }
                            if (read_ex() == '-')
                            {
                                break;
                            }
                        }
                        // seen "--" - gotComment() reads past next '>'
                        gotComment();
                        //while (read_ex() != '>') ;
                        //state = ST_PCDATA;
                    }
                    catch (EmptyInputStream ex)
                    {
                        gotPCDATA(false);
                        keepPCData = false;
                        break;
                    }
                    break;
                case ST_IN_ANCHOR:
                     // we've seen <a href="...">. href is in linkValue. Read until
                     // the next end tag, at most 200 characters.
                     // (end tags are often ommited, i.e. <a ...>text</td>)
                     // regards other tags as text
                     // @todo: read until next </a> or a couple of other tags
                    try
                    {
                        short count = 0;
                        switch(c)
                        {
                            case '\t':
                            case '\n':
                            case '\r':
                                pcData.write(' ');
                                break;
                            default:
                                pcData.write(c);
                        }
                        while(count < MAX_PCDATA_LENGTH)
                        {
                            count++;
                            while(((c =read_ex()) != '<') && (count < MAX_PCDATA_LENGTH))
                            {
                                switch(c)
                                {
                                    case '\t':
                                    case '\n':
                                    case '\r':
                                        pcData.write(' ');
                                        break;
                                    default:
                                        pcData.write(c);
                                }
                            }
                            if(count >= MAX_PCDATA_LENGTH)
                            {
                                gotAnchor(false);
                                break;
                            }
                            else
                            {
                                pcData.write(c);
                                count++;
                                if((c=read_ex()) == '/')
                                {
                                    gotAnchor(true);
                                    isStartTag = false;
                                    state = ST_TAG_NAME;
                                    break;
                                }
                                else
                                {
                                    pcData.write(c);
                                }
                            }
                        }
                    }
                    catch(EmptyInputStream ex)
                    {

                    }
            }
        }

        // input stream ended - return rest, if any, as PCDATA
        if (buf.size() > 0)
        {
            gotPCDATA(false);
            keepPCData = false;
            buf.reset();
        }
    }

