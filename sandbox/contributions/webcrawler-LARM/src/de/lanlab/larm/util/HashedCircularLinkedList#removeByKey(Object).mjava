    /**
     * Removes the first occurrence of the specified element in this list.  If
     * the list does not contain the element, it is unchanged.  More formally,
     * removes the element with the lowest index <tt>i</tt> such that
     * <tt>(o==null ? get(i)==null : o.equals(get(i)))</tt> (if such an
     * element exists).
     *
     * @param o element to be removed from this list, if present.
     * @return <tt>true</tt> if the list contained the specified element.
     */
    public boolean removeByKey(Object o)
    {
        // assert(o != null)
        Entry e = (Entry)keys.get(o);
        if(e != null)
        {
            if(e == current)
            {
                if(size > 1)
                {
                    current = previousEntry(current);
                }
                else
                {
                    current = null;
                }
            }
            this.removeEntryFromList(e);
            keys.remove(o);
            size--;
            return true;
        }
        else
        {
            return false;
        }
    }

