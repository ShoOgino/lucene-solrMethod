    /**
     * Constructor for the DistanceCount object
     *
     * @param filename         Description of the Parameter
     * @exception IOException  Description of the Exception
     */

    public DistanceCount(String filename)
        throws IOException
    {

        System.out.println("reading file...");

        long t1 = System.currentTimeMillis();

        BufferedReader b = new BufferedReader(new FileReader(filename));

        String line;

        boolean firstNotFound = true;

        Node firstNode = null;

        int lines = 0;

        while ((line = b.readLine()) != null)
        {

            lines++;

            String title = null;

            try
            {

                //StringTokenizer st = new StringTokenizer(line, " ");

                StringTokenizer st = new StringTokenizer(line, "\t");

                String from = st.nextToken();

                if (from.endsWith("/"))
                {

                    from = from.substring(0, from.length() - 1);

                }

                from = from.toLowerCase();

                String to = st.nextToken();

                if (to.endsWith("/"))
                {

                    to = to.substring(0, to.length() - 1);

                }

                to = to.toLowerCase();

                boolean isFrame = (Integer.parseInt(st.nextToken()) == 1);

                if (st.countTokens() > 3)
                {

                    title = "<untitled>";

                    //StringBuffer sb = new StringBuffer();

                    st.nextToken();

                    // result

                    st.nextToken();

                    // Mime Type

                    st.nextToken();

                    // Size

                    /*
                     *  while(st.hasMoreTokens())
                     *  {
                     *  sb.append(st.nextToken()).append(" ");
                     *  }
                     */
                    title = st.nextToken();

                    if (title.length() > 2)
                    {

                        title = title.substring(1, title.length() - 1);

                        int indexOfPara = title.indexOf("\"");

                        if (indexOfPara > -1)
                        {

                            title = title.substring(0, indexOfPara);

                        }

                    }

                }

                Node fromNode = getOrCreateNode(from, null);

                Node toNode = getOrCreateNode(to, title);

                Transition t = new Transition(fromNode, toNode, isFrame);

                /*
                 *  if(firstNotFound && to.equals("http://127.0.0.1"))
                 *  {
                 *  firstNode = toNode;
                 *  firstNotFound = false;
                 *  }
                 */
                if (lines % 10000 == 0)
                {

                    System.out.println("" + lines + " Lines; " + nodes.size() + " nodes");

                }

            }

            catch (NoSuchElementException e)
            {

                System.out.println("Malformed line " + lines + ": field number doesn't match");

            }

            catch (NumberFormatException e)
            {

                System.out.println("Malformed line " + lines + ": NumberFormat wrong");

            }

        }

        System.out.println("finished; b" + lines + " Lines; " + nodes.size() + " nodes");

        long t2 = System.currentTimeMillis();

        System.out.println("" + (t2 - t1) + " ms");

        /*
         *  if(firstNotFound)
         *  {
         *  System.out.println("Couldn't find start page");
         *  System.exit(-1);
         *  }
         */
    }

