    /**
     * Description of the Method
     *
     * @param firstNode  Description of the Parameter
     */

    public void calculateShortestDistance(Node firstNode)
    {

        clearDistances();

        firstNode.setDistance(0);

        nodesToDo.addLast(firstNode);

        int calculations = 0;

        while (!nodesToDo.isEmpty())
        {

            if (calculations % 100000 == 0)
            {

                System.out.println("Calculations: " + calculations + "; nodes to go: " + nodesToDo.size() + " total Mem: " + Runtime.getRuntime().totalMemory() + "; free mem: " + Runtime.getRuntime().freeMemory());

            }

            calculations++;

            Node act = (Node) nodesToDo.removeFirst();

            LinkedList outTrans = act.getOutgoing();

            float distance = act.getDistance();

            Iterator i = outTrans.iterator();

            //distance++;

            while (i.hasNext())
            {

                Transition t = (Transition) i.next();

                float transDistance = t.getDistance();

                /*
                 *  if (t.isFrame())
                 *  {
                 *  System.out.println("Frame from " + t.from.getName() + " to " + t.to.getName());
                 *  }
                 */
                float newDistance = distance + (t.isFrame() ? 0.25f : 1f);

                if (transDistance > newDistance)
                {

                    t.setDistance(newDistance);

                    Node to = t.getTo();

                    if (to.distance > distance)
                    {

                        to.setDistance(newDistance);

                        nodesToDo.addLast(to);

                    }

                }

            }

            /*
             *  if(looksGood)
             *  {
             *  System.out.println("Node " + act.id + " looks good");
             *  }
             */
        }

        System.out.println("Calculations: " + calculations);

    }

