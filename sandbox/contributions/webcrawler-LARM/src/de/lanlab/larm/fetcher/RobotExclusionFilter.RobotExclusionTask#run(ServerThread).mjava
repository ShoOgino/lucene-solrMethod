        /**
         * gets a robots.txt file and adds the information to the hostInfo
         * structure
         *
         * @param thread  the server thread (passed by the thread pool)
         */
        public void run(ServerThread thread)
        {
            String threadName = Thread.currentThread().getName();
            synchronized(hostInfo)
            {
                if(hostInfo.isRobotTxtChecked())
                {
                    log.logThreadSafe("task " + threadName + ": already loaded " + hostInfo.getHostName());
                    return;         // may happen 'cause check is not synchronized
                }
            }
            // assert hostInfo != null;

            log.logThreadSafe("task " + threadName + ": starting to load " + hostInfo.getHostName());
            //hostInfo.setLoadingRobotsTxt(true);
            String[] disallows = null;
            boolean errorOccured = false;
            try
            {
                log.logThreadSafe("task " + threadName + ": getting connection");
                HTTPConnection conn = new HTTPConnection(hostInfo.getHostName());
                conn.setTimeout(30000);
                // wait at most 20 secs

                HTTPResponse res = conn.Get("/robots.txt", (String) null, headers);
                log.logThreadSafe("task " + threadName + ": got connection.");
                if (res.getStatusCode() != 200)
                {
                    errorOccured = true;
                    log.log("task " + threadName + ": return code was " + res.getStatusCode());
                }
                else
                {

                    log.logThreadSafe("task " + threadName + ": reading");
                    byte[] file = res.getData(40000);
                    // max. 40 kb
                    log.logThreadSafe("task " + threadName + ": reading done. parsing");
                    disallows = parse(new BufferedReader(new InputStreamReader(new ByteArrayInputStream(file))));
                    log.logThreadSafe("task " + threadName + ": parsing done. found " + disallows.length + " disallows");
                    // assert disallows != null
                    // HostInfo hostInfo = hostManager.getHostInfo(this.hostName);
                    // assert hostInfo != null
                    log.logThreadSafe("task " + threadName + ": setting disallows");
                }
            }
            catch (java.net.UnknownHostException e)
            {
                hostInfo.setReachable(false);
                log.logThreadSafe("task " + threadName + ": unknown host '" + hostInfo.getHostName() + "'. setting to unreachable");
                errorOccured = true;
            }
            catch (java.net.NoRouteToHostException e)
            {
                hostInfo.setReachable(false);
                log.logThreadSafe("task " + threadName + ": no route to '"+hostInfo.getHostName()+"'. setting to unreachable");
                errorOccured = true;
            }
            catch (java.net.ConnectException e)
            {
                hostInfo.setReachable(false);
                log.logThreadSafe("task " + threadName + ": connect exception while connecting to '"+hostInfo.getHostName()+"'. setting to unreachable");
                errorOccured = true;
            }
            catch (java.io.InterruptedIOException e)
            {
                // time out. fatal in this case
                hostInfo.setReachable(false);
                log.logThreadSafe("task " + threadName + ": time out while connecting to '" +hostInfo.getHostName() + "'. setting to unreachable");
                errorOccured = true;
            }

            catch (Throwable e)
            {
                errorOccured = true;
                log.log("task " + threadName + ": unknown exception: " + e.getClass().getName() + ": " + e.getMessage() + ". continuing");
                log.log(e);

            }
            finally
            {
                if (errorOccured)
                {
                    log.logThreadSafe("task " + threadName + ": error occured. putback...");
                    synchronized (hostInfo)
                    {
                        hostInfo.setRobotsChecked(true, null);
                        // crawl everything
                        hostInfo.setLoadingRobotsTxt(false);
                        log.logThreadSafe("task " + threadName + ": now put " + hostInfo.getQueueSize() + " queueud requests back");
                        //hostInfo.setLoadingRobotsTxt(false);
                        putBackURLs();
                    }
                }
                else
                {
                    log.logThreadSafe("task " + threadName + ": finished. putback...");
                    synchronized (hostInfo)
                    {
                        hostInfo.setRobotsChecked(true, disallows);
                        log.logThreadSafe("task " + threadName + ": done");
                        log.logThreadSafe("task " + threadName + ": now put " + hostInfo.getQueueSize() + " queueud requests back");
                        hostInfo.setLoadingRobotsTxt(false);
                        putBackURLs();
                    }
                }
            }
        }

