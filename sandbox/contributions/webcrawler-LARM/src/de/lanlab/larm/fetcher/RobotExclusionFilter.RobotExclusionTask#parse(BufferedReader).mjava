        /**
         * this parses the robots.txt file. It was taken from the PERL implementation
         * Since this is only rarely called, it's not optimized for speed
         *
         * @param r                the robots.txt file
         * @return                 the disallows
         * @exception IOException  any IOException
         */
        public String[] parse(BufferedReader r)
            throws IOException
        {
            // taken from Perl
            Perl5Util p = new Perl5Util();
            String line;
            boolean isMe = false;
            boolean isAnon = false;
            ArrayList disallowed = new ArrayList();
            String ua = null;

            while ((line = r.readLine()) != null)
            {
                if (p.match("/^#.*/", line))
                {
                    // a comment
                    continue;
                }
                line = p.substitute("s/\\s*\\#.* //", line);
                if (p.match("/^\\s*$/", line))
                {
                    if (isMe)
                    {
                        break;
                    }
                }
                else if (p.match("/^User-Agent:\\s*(.*)/i", line))
                {
                    ua = p.group(1);
                    ua = p.substitute("s/\\s+$//", ua);
                    if (isMe)
                    {
                        break;
                    }
                    else if (ua.equals("*"))
                    {
                        isAnon = true;
                    }
                    else if (Constants.CRAWLER_AGENT.startsWith(ua))
                    {
                        isMe = true;
                    }
                }
                else if (p.match("/^Disallow:\\s*(.*)/i", line))
                {
                    if (ua == null)
                    {
                        isAnon = true;
                        // warn...
                    }
                    String disallow = p.group(1);
                    if (disallow != null && disallow.length() > 0)
                    {
                        // assume we have a relative path
                        ;
                    }
                    else
                    {
                        disallow = "/";
                    }
                    if (isMe || isAnon)
                    {
                        disallowed.add(disallow);
                    }
                }
                else
                {
                    // warn: unexpected line
                }
            }
            String[] disalloweds = new String[disallowed.size()];
            disallowed.toArray(disalloweds);
            return disalloweds;
        }

