    /**
     * Sets the current context. The context is used by modules such as the
     * AuthorizationModule and the CookieModule which keep lists of info that is
     * normally shared between all instances of HTTPConnection. This is usually
     * the desired behaviour. However, in some cases one would like to simulate
     * multiple independent clients within the same application and hence the
     * sharing of such info should be restricted. This is where the context
     * comes in. Modules will only share their info between requests using the
     * same context (i.e. they keep multiple lists, one for each context). <P>
     *
     * The context may be any object. Contexts are considered equal if <code>equals()</code>
     * returns true. Examples of useful context objects are threads (e.g. if you
     * are running multiple clients, one per thread) and sockets (e.g. if you
     * are implementing a gateway). <P>
     *
     * When a new HTTPConnection is created it is initialized with a default
     * context which is the same for all instances. This method must be invoked
     * immediately after a new HTTPConnection is created and before any request
     * method is invoked. Furthermore, this method may only be called once (i.e.
     * the context is "sticky").
     *
     * @param context  the new context; must be non-null
     */
    public void setContext(Object context)
    {
        if (context == null)
        {
            throw new IllegalArgumentException("Context must be non-null");
        }
        if (Context != null)
        {
            throw new IllegalStateException("Context already set");
        }

        Context = context;
    }

