    /**
     * Sets the timeout to be used for creating connections and reading
     * responses. When a timeout expires the operation will throw an
     * InterruptedIOException. The operation may be restarted again afterwards.
     * If the operation is not restarted and it is a read operation (i.e
     * HTTPResponse.xxxx()) then <code>resp.getInputStream().close()</code>
     * <strong>should</strong> be invoked. <P>
     *
     * When creating new sockets the timeout will limit the time spent doing the
     * host name translation and establishing the connection with the server.
     * <P>
     *
     * The timeout also influences the reading of the response headers. However,
     * it does not specify a how long, for example, getStatusCode() may take, as
     * might be assumed. Instead it specifies how long a read on the socket may
     * take. If the response dribbles in slowly with packets arriving quicker
     * than the timeout then the method will complete normally. I.e. the
     * exception is only thrown if nothing arrives on the socket for the
     * specified time. Furthermore, the timeout only influences the reading of
     * the headers, not the reading of the body. <P>
     *
     * Read Timeouts are associated with responses, so that you may change this
     * value before each request and it won't affect the reading of responses to
     * previous requests.
     *
     * @param time  the time in milliseconds. A time of 0 means wait
     *      indefinitely.
     * @see         #stop()
     */
    public void setTimeout(int time)
    {
        Timeout = time;
    }

