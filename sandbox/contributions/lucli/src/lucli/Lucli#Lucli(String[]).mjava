	/**
		Main entry point. The first argument can be a filename with an
		application initialization file.
		*/

	public Lucli(String[] args) throws ParseException, IOException {
		String line;

		fullPath = System.getProperty("user.home") +  System.getProperty("file.separator")
			+ HISTORYFILE;

		/*
		 * Initialize the list of commands
		 */

		addCommand("info", INFO, "Display info about the current Lucene Index. Example:info");
		addCommand("search", SEARCH, "Search the current index. Example: search foo", 1);
		addCommand("count", COUNT, "Return the number of hits for a search. Example: count foo", 1);
		addCommand("optimize", OPTIMIZE, "Optimize the current index");
		addCommand("quit", QUIT, "Quit/exit the program");
		addCommand("help", HELP, "Display help about commands.");
		addCommand("terms", TERMS, "Show the first " + MAX_TERMS + " terms in this index. Supply a field name to only show terms in a specific field. Example: terms");
		addCommand("index", INDEX, "Choose a different lucene index. Example index my_index", 1);
		addCommand("tokens", TOKENS, "Does a search and shows the top 10 tokens for each document. Verbose! Example: tokens foo", 1);
		addCommand("explain", EXPLAIN, "Explanation that describes how the document scored against query. Example: explain foo", 1);



		//parse command line arguments
		parseArgs(args);

		if (enableReadline)
			org.gnu.readline.Readline.load(ReadlineLibrary.GnuReadline  );
		else
			org.gnu.readline.Readline.load(ReadlineLibrary.PureJava  );

		Readline.initReadline("lucli"); // init, set app name, read inputrc



		Readline.readHistoryFile(fullPath);

		// read history file, if available

		File history = new File(".rltest_history");
		try {
			if (history.exists())
				Readline.readHistoryFile(history.getName());
		} catch (Exception e) {
			System.err.println("Error reading history file!");
		}

		// Set word break characters
		try {
			Readline.setWordBreakCharacters(" \t;");
		}
		catch (UnsupportedEncodingException enc) {
			System.err.println("Could not set word break characters");
			System.exit(0);
		}

		// set completer with list of words

		Readline.setCompleter(new Completer(commandMap));

		// main input loop

		luceneMethods = new LuceneMethods(DEFAULT_INDEX);

		while (true) {
			try {
				line = Readline.readline("lucli> ");
				if (line != null) {
					handleCommand(line);
				}
			} catch (UnsupportedEncodingException enc) {
				System.err.println("caught UnsupportedEncodingException");
				break;
			} catch (java.io.EOFException eof) {
				System.out.println("");//new line
				exit();
			} catch (IOException ioe) {
				ioe.printStackTrace(System.err);
			}
		}

		exit();
	}

