  /**
   * Index the fileset.
   *
   *@exception  IOException if Lucene I/O exception
   *@todo refactor!!!!!
   */
  private void indexDocs() throws IOException {
    Date start = new Date();

    boolean create = overwrite;
    // If the index directory doesn't exist,
    // create it and force create mode
    if (indexDir.mkdirs() && !overwrite) {
      create = true;
    }

    Searcher searcher = null;
    boolean checkLastModified = false;
    if (!create) {
      try {
        searcher = new IndexSearcher(indexDir.getAbsolutePath());
        checkLastModified = true;
      } catch (IOException ioe) {
        log("IOException: " + ioe.getMessage());
        // Empty - ignore, which indicates to index all
        // documents
      }
    }

    log("checkLastModified = " + checkLastModified, Project.MSG_VERBOSE);

    IndexWriter writer =
      new IndexWriter(indexDir, analyzer, create);
    int totalFiles = 0;
    int totalIndexed = 0;
    int totalIgnored = 0;
    try {
      writer.mergeFactor = mergeFactor;

      for (int i = 0; i < filesets.size(); i++) {
        FileSet fs = (FileSet) filesets.get(i);
        if (fs != null) {
          DirectoryScanner ds =
            fs.getDirectoryScanner(getProject());
          String[] dsfiles = ds.getIncludedFiles();
          File baseDir = ds.getBasedir();

          for (int j = 0; j < dsfiles.length; j++) {
            File file = new File(baseDir, dsfiles[j]);
            totalFiles++;

            if (!file.exists() || !file.canRead()) {
              throw new BuildException("File \"" +
                                       file.getAbsolutePath()
                                       + "\" does not exist or is not readable.");
            }

            boolean indexIt = true;

            if (checkLastModified) {
              Hits hits = null;
              Term pathTerm =
                new Term("path", file.getPath());
              TermQuery query =
                new TermQuery(pathTerm);
              hits = searcher.search(query);

              // if document is found, compare the
              // indexed last modified time with the
              // current file
              // - don't index if up to date
              if (hits.length() > 0) {
                Document doc = hits.doc(0);
                String indexModified =
                  doc.get("modified").trim();
                if (indexModified != null) {
                  if (DateField.stringToTime(indexModified)
                    == file.lastModified()) {
                    indexIt = false;
                  }
                }
              }
            }

            if (indexIt) {
              try {
                log("Indexing " + file.getPath(),
                    Project.MSG_VERBOSE);
                Document doc =
                  handler.getDocument(file);

                if (doc == null) {
                  totalIgnored++;
                } else {
                  // Add the path of the file as a field named "path".  Use a Text field, so
                  // that the index stores the path, and so that the path is searchable
                  doc.add(Field.Keyword("path", file.getPath()));

                  // Add the last modified date of the file a field named "modified".  Use a
                  // Keyword field, so that it's searchable, but so that no attempt is made
                  // to tokenize the field into words.
                  doc.add(Field.Keyword("modified",
                                        DateField.timeToString(file.lastModified())));

                  writer.addDocument(doc);
                  totalIndexed++;
                }
              } catch (DocumentHandlerException e) {
                throw new BuildException(e);
              }
            }
          }
          // for j
        }
        // if (fs != null)
      }
      // for i

      writer.optimize();
    }
      //try
    finally {
      // always make sure everything gets closed,
      // no matter how we exit.
      writer.close();
      if (searcher != null) {
        searcher.close();
      }
    }

    Date end = new Date();

    log(totalIndexed + " out of " + totalFiles + " indexed (" +
        totalIgnored + " ignored) in " + (end.getTime() - start.getTime()) +
        " milliseconds");
  }

