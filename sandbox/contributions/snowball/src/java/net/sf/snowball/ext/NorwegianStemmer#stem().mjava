        public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            // (, line 71
            // do, line 73
            v_1 = cursor;
            lab0: do {
                // call mark_regions, line 73
                if (!r_mark_regions())
                {
                    break lab0;
                }
            } while (false);
            cursor = v_1;
            // backwards, line 74
            limit_backward = cursor; cursor = limit;
            // (, line 74
            // do, line 75
            v_2 = limit - cursor;
            lab1: do {
                // call main_suffix, line 75
                if (!r_main_suffix())
                {
                    break lab1;
                }
            } while (false);
            cursor = limit - v_2;
            // do, line 76
            v_3 = limit - cursor;
            lab2: do {
                // call consonant_pair, line 76
                if (!r_consonant_pair())
                {
                    break lab2;
                }
            } while (false);
            cursor = limit - v_3;
            // do, line 77
            v_4 = limit - cursor;
            lab3: do {
                // call other_suffix, line 77
                if (!r_other_suffix())
                {
                    break lab3;
                }
            } while (false);
            cursor = limit - v_4;
            cursor = limit_backward;            return true;
        }

