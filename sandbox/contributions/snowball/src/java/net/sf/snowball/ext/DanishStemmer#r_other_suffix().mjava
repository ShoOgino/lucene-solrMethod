        private boolean r_other_suffix() {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            // (, line 64
            // do, line 65
            v_1 = limit - cursor;
            lab0: do {
                // (, line 65
                // [, line 65
                ket = cursor;
                // literal, line 65
                if (!(eq_s_b(2, "st")))
                {
                    break lab0;
                }
                // ], line 65
                bra = cursor;
                // literal, line 65
                if (!(eq_s_b(2, "ig")))
                {
                    break lab0;
                }
                // delete, line 65
                slice_del();
            } while (false);
            cursor = limit - v_1;
            // setlimit, line 66
            v_2 = limit - cursor;
            // tomark, line 66
            if (cursor < I_p1)
            {
                return false;
            }
            cursor = I_p1;
            v_3 = limit_backward;
            limit_backward = cursor;
            cursor = limit - v_2;
            // (, line 66
            // [, line 66
            ket = cursor;
            // substring, line 66
            among_var = find_among_b(a_2, 5);
            if (among_var == 0)
            {
                limit_backward = v_3;
                return false;
            }
            // ], line 66
            bra = cursor;
            limit_backward = v_3;
            switch(among_var) {
                case 0:
                    return false;
                case 1:
                    // (, line 69
                    // delete, line 69
                    slice_del();
                    // do, line 69
                    v_4 = limit - cursor;
                    lab1: do {
                        // call consonant_pair, line 69
                        if (!r_consonant_pair())
                        {
                            break lab1;
                        }
                    } while (false);
                    cursor = limit - v_4;
                    break;
                case 2:
                    // (, line 71
                    // <-, line 71
                    slice_from("l\u00F8s");
                    break;
            }
            return true;
        }

