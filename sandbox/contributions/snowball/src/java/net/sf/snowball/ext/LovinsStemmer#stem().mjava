        public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            // (, line 197
            // backwards, line 199
            limit_backward = cursor; cursor = limit;
            // (, line 199
            // do, line 200
            v_1 = limit - cursor;
            lab0: do {
                // call endings, line 200
                if (!r_endings())
                {
                    break lab0;
                }
            } while (false);
            cursor = limit - v_1;
            // do, line 201
            v_2 = limit - cursor;
            lab1: do {
                // call undouble, line 201
                if (!r_undouble())
                {
                    break lab1;
                }
            } while (false);
            cursor = limit - v_2;
            // do, line 202
            v_3 = limit - cursor;
            lab2: do {
                // call respell, line 202
                if (!r_respell())
                {
                    break lab2;
                }
            } while (false);
            cursor = limit - v_3;
            cursor = limit_backward;            return true;
        }

