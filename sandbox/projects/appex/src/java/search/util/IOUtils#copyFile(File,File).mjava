    /** To copy the file. (from Java Examples in a Nutshell)
     * @param from_file source file with full path.
     * @param to_file target file with full path.
     */
    public static void copyFile(File from_file, File to_file)
            throws IOException
    {
        if (!from_file.exists())
            throw new IOException("FileCopy: no such source file: " + from_file.getName());
        if (!from_file.isFile())
            throw new IOException("FileCopy: can't copy directory: " + from_file.getName());
        if (!from_file.canRead())
            throw new IOException("FileCopy: source file is unreadable: " + from_file.getName());

        // If we've gotten this far, then everything is okay.
        // So we copy the file, a buffer of bytes at a time.
        FileInputStream from = null;  // Stream to read from source
        FileOutputStream to = null;   // Stream to write to destination
        try
        {
            from = new FileInputStream(from_file);  // Create input stream
            to = new FileOutputStream(to_file);     // Create output stream
            byte[] buffer = new byte[8192];         // A buffer to hold file contents
            int bytes_read;                         // How many bytes in buffer
            // Read a chunk of bytes into the buffer, then write them out,
            // looping until we reach the end of the file (when read() returns -1).
            // Note the combination of assignment and comparison in this while
            // loop.  This is a common I/O programming idiom.
            while ((bytes_read = from.read(buffer)) != -1) // Read bytes until EOF
                to.write(buffer, 0, bytes_read);            //   write bytes
        }

                // Always close the streams, even if exceptions were thrown
        finally
        {
            if (from != null)
                try
                {
                    from.close();
                }
                catch (IOException e)
                {
                    ;
                }
            if (to != null)
                try
                {
                    to.close();
                }
                catch (IOException e)
                {
                    ;
                }
        }
    }

