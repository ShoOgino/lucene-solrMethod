  public void init(FilterConfig config) throws ServletException
  {
    log.info("SolrDispatchFilter.init()");

    boolean abortOnConfigurationError = true;
    try {
      // web.xml configuration
      this.pathPrefix = config.getInitParameter( "path-prefix" );
      this.solrConfigFilename = config.getInitParameter("solrconfig-filename");

      // multicore instantiation
      this.multicore = initMultiCore(config);

      if(multicore != null && multicore.isEnabled() ) {
        abortOnConfigurationError = false;
        singleCoreDescriptor = null;
        // if any core aborts on startup, then abort
        for( SolrCore c : multicore.getCores() ) {
          if( c.getSolrConfig().getBool( "abortOnConfigurationError",false) ) {
            abortOnConfigurationError = true;
            break;
          }
        }
      }
      else {
        SolrConfig cfg = this.solrConfigFilename == null? new SolrConfig() : new SolrConfig(this.solrConfigFilename);
        singleCoreDescriptor = new CoreDescriptor((MultiCore)null);
        singleCoreDescriptor.init("",cfg.getResourceLoader().getInstanceDir());
        SolrCore singlecore = new SolrCore( null, null, cfg, null, singleCoreDescriptor);
        singleCoreDescriptor.setCore(singlecore);
        abortOnConfigurationError = cfg.getBool(
                "abortOnConfigurationError", abortOnConfigurationError);
      }
      log.info("user.dir=" + System.getProperty("user.dir"));
    }
    catch( Throwable t ) {
      // catch this so our filter still works
      log.log(Level.SEVERE, "Could not start SOLR. Check solr/home property", t);
      SolrConfig.severeErrors.add( t );
      SolrCore.log( t );
    }

    // Optionally abort if we found a sever error
    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {
      StringWriter sw = new StringWriter();
      PrintWriter out = new PrintWriter( sw );
      out.println( "Severe errors in solr configuration.\n" );
      out.println( "Check your log files for more detailed information on what may be wrong.\n" );
      out.println( "If you want solr to continue after configuration errors, change: \n");
      out.println( " <abortOnConfigurationError>false</abortOnConfigurationError>\n" );
      if (multicore != null && multicore.isEnabled()) {
        out.println( "in solr.xml\n" );
      } else {
        out.println( "in solrconfig.xml\n" );
      }

      for( Throwable t : SolrConfig.severeErrors ) {
        out.println( "-------------------------------------------------------------" );
        t.printStackTrace( out );
      }
      out.flush();

      // Servlet containers behave slightly differently if you throw an exception during 
      // initialization.  Resin will display that error for every page, jetty prints it in
      // the logs, but continues normally.  (We will see a 404 rather then the real error)
      // rather then leave the behavior undefined, lets cache the error and spit it out 
      // for every request.
      abortErrorMessage = sw.toString();
      //throw new ServletException( abortErrorMessage );
    }

    log.info("SolrDispatchFilter.init() done");
  }

