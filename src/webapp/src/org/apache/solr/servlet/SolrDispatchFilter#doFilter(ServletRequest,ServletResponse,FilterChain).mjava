  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException 
  {
    if( abortErrorMessage != null ) {
      ((HttpServletResponse)response).sendError( 500, abortErrorMessage );
      return;
    }
    
    if( request instanceof HttpServletRequest) {
      SolrQueryRequest solrReq = null;
      HttpServletRequest req = (HttpServletRequest)request;
      try {
        String path = req.getServletPath();    
        if( req.getPathInfo() != null ) {
          // this lets you handle /update/commit when /update is a servlet
          path += req.getPathInfo(); 
        }
        if( pathPrefix != null && path.startsWith( pathPrefix ) ) {
          path = path.substring( pathPrefix.length() );
        }
        
        int idx = path.indexOf( ':' );
        if( idx > 0 ) {
          // save the portion after the ':' for a 'handler' path parameter
          path = path.substring( 0, idx );
        }
        
        // By default use the single core.  If multicore is enabled, look for one.
        SolrCore core = singlecore;
        if( core == null ) {
          // try to get the corename as a request parameter first
          String corename = request.getParameter("core");
          if( corename == null && path.startsWith( "/@" ) ) { // multicore
            idx = path.indexOf( '/', 2 );
            if( idx < 1 ) {
              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, 
                  "MultiCore path must contain a '/'.  For example: /@corename/handlerpath" );
            }
            corename = path.substring( 2, idx );
            path = path.substring( idx );
          }
          if (corename != null) {
            core = multicore.getCore( corename );
            if( core == null ) {
              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, 
                "Can not find core: '"+corename+"'" );
            }
          }
          else {
            core = multicore.getDefaultCore();
          }
        }
        
        SolrRequestHandler handler = null;
        if( path.length() > 1 ) { // don't match "" or "/" as valid path
          handler = core.getRequestHandler( path );
        }
        if( handler == null && handleSelect ) {
          if( "/select".equals( path ) || "/select/".equals( path ) ) {
            solrReq = parsers.parse( core, path, req );
            String qt = solrReq.getParams().get( CommonParams.QT );
            if( qt != null && qt.startsWith( "/" ) ) {
              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "Invalid query type.  Do not use /select to access: "+qt);
            }
            handler = core.getRequestHandler( qt );
            if( handler == null ) {
              throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "unknown handler: "+qt);
            }
          }
        }

        // Perhaps this is a muli-core admin page?
        if( handler == null && path.equals( multicore.getAdminPath() ) ) {
          handler = multicore.getMultiCoreHandler();
        } 
        
        if( handler != null ) {
          if( solrReq == null ) {
            solrReq = parsers.parse( core, path, req );
          }
          SolrQueryResponse solrRsp = new SolrQueryResponse();
          this.execute( req, handler, solrReq, solrRsp );
          if( solrRsp.getException() != null ) {
            sendError( (HttpServletResponse)response, solrRsp.getException() );
            return;
          }
          
          // Now write it out
          QueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);
          response.setContentType(responseWriter.getContentType(solrReq, solrRsp));
          PrintWriter out = response.getWriter();
          responseWriter.write(out, solrReq, solrRsp);
          return;
        }
        // otherwise, let's ensure the core is in the SolrCore request attribute so
        // the servlet can retrieve it
        else {
          req.setAttribute("org.apache.solr.SolrCore", core);
        }
      }
      catch( Throwable ex ) {
        sendError( (HttpServletResponse)response, ex );
        return;
      }
      finally {
        if( solrReq != null ) {
          solrReq.close();
        }
      }
    }
    
    // Otherwise let the webapp handle the request
    chain.doFilter(request, response);
  }

