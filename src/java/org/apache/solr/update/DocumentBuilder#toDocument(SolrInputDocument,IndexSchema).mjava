  /**
   * Convert a SolrInputDocument to a lucene Document.
   * 
   * This function shoould go elsewhere.  This builds the Document without an
   * extra Map<> checking for multiple values.  For more discussion, see:
   * http://www.nabble.com/Re%3A-svn-commit%3A-r547493---in--lucene-solr-trunk%3A-.--src-java-org-apache-solr-common--src-java-org-apache-solr-schema--src-java-org-apache-solr-update--src-test-org-apache-solr-common--tf3931539.html
   * 
   * TODO: /!\ NOTE /!\ This semantics of this function are still in flux.  
   * Something somewhere needs to be able to fill up a SolrDocument from
   * a lucene document - this is one place that may happen.  It may also be
   * moved to an independent function
   * 
   * @since solr 1.3
   */
  public static Document toDocument( SolrInputDocument doc, IndexSchema schema )
  { 
    Document out = new Document();
    out.setBoost( doc.getDocumentBoost() );
    
    // Load fields from SolrDocument to Document
    for( SolrInputField field : doc ) {
      String name = field.getName();
      SchemaField sfield = schema.getFieldOrNull(name);
      boolean used = false;
      float boost = field.getBoost();
      
      // Make sure it has the correct number
      if( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {
        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,
            "ERROR: multiple values encountered for non multiValued field " + 
              sfield.getName() + ": " +field.getValue() );
      }
      
      SchemaField[] destArr = schema.getCopyFields(name);
      
      // load each field value
      boolean hasField = false;
      for( Object v : field ) {
        if( v == null ) {
          continue;
        }
        String val = null;
        hasField = true;
        
        // TODO!!! HACK -- date conversion
        if( sfield != null && v instanceof Date && sfield.getType() instanceof DateField ) {
          DateField df = (DateField)sfield.getType();
          val = df.toInternal( (Date)v )+'Z';
        }
        else if (v != null) {
          val = v.toString();
        }
        
        if( sfield != null ) {
          used = true;
          Field f = sfield.createField( val, boost );
          if( f != null ) { // null fields are not added
            out.add( f );
          }
        }
        
        // Add the copy fields
        for( SchemaField sf : destArr ) {
          // check if the copy field is a multivalued or not
          if( !sf.multiValued() && out.get( sf.getName() ) != null ) {
            throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,
                "ERROR: multiple values encountered for non multiValued copy field " + 
                  sf.getName() + ": " +val ); 
          }
          
          used = true;
          Field f = sf.createField( val, boost );
          if( f != null ) { // null fields are not added
            out.add( f );
          }
        }
        
        // In lucene, the boost for a given field is the product of the 
        // document boost and *all* boosts on values of that field. 
        // For multi-valued fields, we only want to set the boost on the
        // first field.
        boost = 1.0f; 
      }
      
      // make sure the field was used somehow...
      if( !used && hasField ) {
        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,"ERROR:unknown field '" + name + "'");
      }
    }
    
        
    // Now validate required fields or add default values
    // fields with default values are defacto 'required'
    for (SchemaField field : schema.getRequiredFields()) {
      if (out.getField(field.getName() ) == null) {
        if (field.getDefaultValue() != null) {
          out.add( field.createField( field.getDefaultValue(), 1.0f ) );
        } 
        else {
          String id = schema.printableUniqueKey( out );
          String msg = "Document ["+id+"] missing required field: " + field.getName();
          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, msg );
        }
      }
    }
    return out;
  }

