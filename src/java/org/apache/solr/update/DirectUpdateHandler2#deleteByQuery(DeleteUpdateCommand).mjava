  // why not return number of docs deleted?
  // Depending on implementation, we may not be able to immediately determine the num...
   public void deleteByQuery(DeleteUpdateCommand cmd) throws IOException {
     deleteByQueryCommands.incrementAndGet();
     deleteByQueryCommandsCumulative.incrementAndGet();

     if (!cmd.fromPending && !cmd.fromCommitted) {
       numErrors.incrementAndGet();
       numErrorsCumulative.incrementAndGet();
       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,"meaningless command: " + cmd);
     }
     if (!cmd.fromPending || !cmd.fromCommitted) {
       numErrors.incrementAndGet();
       numErrorsCumulative.incrementAndGet();
       throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,"operation not supported" + cmd);
     }

    boolean madeIt=false;
    boolean delAll=false;
    try {
     Query q = QueryParsing.parseQuery(cmd.query, schema);
     delAll = MatchAllDocsQuery.class == q.getClass();

     int totDeleted = 0;
     iwCommit.lock();
     try {
       if (delAll) {
         deleteAll();
       } else {
         // we need to do much of the commit logic (mainly doing queued
         // deletes since deleteByQuery can throw off our counts.
         doDeletions();

         closeWriter();
         openSearcher();

         // if we want to count the number of docs that were deleted, then
         // we need a new instance of the DeleteHitCollector
         final DeleteHitCollector deleter = new DeleteHitCollector(searcher);
         searcher.search(q, null, deleter);
         totDeleted = deleter.deleted;
       }
     } finally {
       iwCommit.unlock();
     }

      if (!delAll) {
        if (SolrCore.log.isLoggable(Level.FINE)) {
          SolrCore.log.fine("docs deleted by query:" + totDeleted);
        }
        numDocsDeleted.getAndAdd(totDeleted);
      }

     madeIt=true;

     if( tracker.timeUpperBound > 0 ) {
       tracker.scheduleCommitWithin( tracker.timeUpperBound );
     }
    } finally {
      if (!madeIt) {
        numErrors.incrementAndGet();
        numErrorsCumulative.incrementAndGet();
      }
    }
   }

