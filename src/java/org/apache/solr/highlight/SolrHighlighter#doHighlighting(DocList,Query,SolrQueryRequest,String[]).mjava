  /**
   * Generates a list of Highlighted query fragments for each item in a list
   * of documents, or returns null if highlighting is disabled.
   *
   * @param docs query results
   * @param query the query
   * @param req the current request
   * @param defaultFields default list of fields to summarize
   *
   * @return NamedList containing a NamedList for each document, which in 
   * turns contains sets (field, summary) pairs.
   */
  @SuppressWarnings("unchecked")
  public NamedList<Object> doHighlighting(DocList docs, Query query, SolrQueryRequest req, String[] defaultFields) throws IOException {
    SolrParams params = req.getParams(); 
    if (!isHighlightingEnabled(params))
        return null;
     
     SolrIndexSearcher searcher = req.getSearcher();
     IndexSchema schema = searcher.getSchema();
     NamedList fragments = new SimpleOrderedMap();
     String[] fieldNames = getHighlightFields(query, req, defaultFields);
     Document[] readDocs = new Document[docs.size()];
     {
       // pre-fetch documents using the Searcher's doc cache
       Set<String> fset = new HashSet<String>();
       for(String f : fieldNames) { fset.add(f); }
       // fetch unique key if one exists.
       SchemaField keyField = schema.getUniqueKeyField();
       if(null != keyField)
         fset.add(keyField.getName());  
       searcher.readDocs(readDocs, docs, fset);
     }

     // Highlight each document
     DocIterator iterator = docs.iterator();
     for (int i = 0; i < docs.size(); i++) {
        int docId = iterator.nextDoc();
        Document doc = readDocs[i];
        NamedList docSummaries = new SimpleOrderedMap();
        for (String fieldName : fieldNames) {
           fieldName = fieldName.trim();
           String[] docTexts = doc.getValues(fieldName);
           if (docTexts == null) continue;

           // get highlighter, and number of fragments for this field
           Highlighter highlighter = getHighlighter(query, fieldName, req);
           int numFragments = getMaxSnippets(fieldName, params);

           String[] summaries = null;
           TextFragment[] frag;
           if (docTexts.length == 1) {
              // single-valued field
              TokenStream tstream;
              try {
                 // attempt term vectors
                 tstream = TokenSources.getTokenStream(searcher.getReader(), docId, fieldName);
              }
              catch (IllegalArgumentException e) {
                 // fall back to analyzer
                 tstream = new TokenOrderingFilter(schema.getAnalyzer().tokenStream(fieldName, new StringReader(docTexts[0])), 10);
              }
              frag = highlighter.getBestTextFragments(tstream, docTexts[0], false, numFragments);
           }
           else {
              // multi-valued field
              MultiValueTokenStream tstream;
              tstream = new MultiValueTokenStream(fieldName, docTexts, schema.getAnalyzer(), true);
              frag = highlighter.getBestTextFragments(tstream, tstream.asSingleValue(), false, numFragments);
           }
           // convert fragments back into text
           // TODO: we can include score and position information in output as snippet attributes
           if (frag.length > 0) {
              ArrayList<String> fragTexts = new ArrayList<String>();
              for (int j = 0; j < frag.length; j++) {
                 if ((frag[j] != null) && (frag[j].getScore() > 0)) {
                    fragTexts.add(frag[j].toString());
                 }
              }
              summaries = fragTexts.toArray(new String[0]);
              if (summaries.length > 0) 
                docSummaries.add(fieldName, summaries);
           }
           // no summeries made, copy text from alternate field
           if (summaries == null || summaries.length == 0) {
              String alternateField = req.getParams().getFieldParam(fieldName, HighlightParams.ALTERNATE_FIELD);
              if (alternateField != null && alternateField.length() > 0) {
                 String[] altTexts = doc.getValues(alternateField);
                    if (altTexts != null && altTexts.length > 0)
                       docSummaries.add(fieldName, altTexts);
              }
           }
 
        }
        String printId = schema.printableUniqueKey(doc);
        fragments.add(printId == null ? null : printId, docSummaries);
     }
     return fragments;
  }

