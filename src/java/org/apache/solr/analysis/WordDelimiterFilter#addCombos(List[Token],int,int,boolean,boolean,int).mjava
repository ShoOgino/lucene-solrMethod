  // index "a","b","c" as  pos0="a", pos1="b", pos2="c", pos2="abc"
  private void addCombos(List<Token> lst, int start, int end, boolean generateSubwords, boolean catenateSubwords, int posOffset) {
    if (end-start==1) {
      // always generate a word alone, even if generateSubwords=0 because
      // the catenation of all the subwords *is* the subword.
      queue.add(lst.get(start));
      return;
    }

    StringBuilder sb = null;
    if (catenateSubwords) sb=new StringBuilder();
    Token firstTok=null;
    Token tok=null;
    for (int i=start; i<end; i++) {
      tok = lst.get(i);
      if (catenateSubwords) {
        if (i==start) firstTok=tok;
        sb.append(tok.termBuffer(), 0, tok.termLength());
      }
      if (generateSubwords) {
        queue.add(tok);
      }
    }

    if (catenateSubwords) {
      Token concatTok = new Token(sb.toString(),
              firstTok.startOffset(),
              tok.endOffset(),
              firstTok.type());
      // if we indexed some other tokens, then overlap concatTok with the last.
      // Otherwise, use the value passed in as the position offset.
      concatTok.setPositionIncrement(generateSubwords==true ? 0 : posOffset);
      queue.add(concatTok);
    }
  }

