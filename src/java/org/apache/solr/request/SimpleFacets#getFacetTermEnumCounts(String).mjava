  /**
   * Returns a list of terms in the specified field along with the 
   * corrisponding count of documents in the set that match that constraint.
   *
   * @see SolrParams#FACET_LIMIT
   * @see SolrParams#FACET_ZEROS
   */
  public NamedList getFacetTermEnumCounts(String fieldName) 
    throws IOException {
    
    /* :TODO: potential optimization...
     * cache the Terms with the highest docFreq and try them first
     * don't enum if we get our max from them
     */
     
    IndexSchema schema = searcher.getSchema();
    IndexReader r = searcher.getReader();
    FieldType ft = schema.getFieldType(fieldName);

    Set<CountPair<String,Integer>> counts 
      = new HashSet<CountPair<String,Integer>>();

    int limit = params.getFieldInt(fieldName, params.FACET_LIMIT, 100);
    if (0 <= limit) {
      counts = new BoundedTreeSet<CountPair<String,Integer>>(limit);
    }

    boolean zeros = params.getFieldBool(fieldName, params.FACET_ZEROS, true);
      
    TermEnum te = r.terms(new Term(fieldName,""));
    do {
      Term t = te.term();

      if (null == t || ! t.field().equals(fieldName)) 
        break;

      if (0 < te.docFreq()) { /* all docs may be deleted */
        int count = searcher.numDocs(new TermQuery(t),
                                     docs);

        /* :TODO: is indexedToReadable correct? */ 
        if (zeros || 0 < count) 
          counts.add(new CountPair<String,Integer>
                     (ft.indexedToReadable(t.text()), count));

      }
    } while (te.next());

    NamedList res = new NamedList();
    for (CountPair<String,Integer> p : counts) {
      res.add(p.key, p.val);
    }
    return res;
  }

