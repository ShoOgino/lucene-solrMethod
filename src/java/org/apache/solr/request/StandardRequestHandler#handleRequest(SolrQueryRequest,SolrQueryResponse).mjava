  public void handleRequest(SolrQueryRequest req, SolrQueryResponse rsp) {
    numRequests++;

    try {
      U.setDefaults(req,defaults);
      SolrParams p = req.getParams();
      String sreq = p.get(Q);

      String defaultField = p.get(DF);

      // find fieldnames to return (fieldlist)
      String fl = p.get(SolrParams.FL);
      int flags = 0; 
      if (fl != null) {
        flags |= U.setReturnFields(fl, rsp);
      }

      if (sreq==null) throw new SolrException(400,"Missing queryString");
      List<String> commands = StrUtils.splitSmart(sreq,';');

      String qs = commands.size() >= 1 ? commands.get(0) : "";
      Query query = QueryParsing.parseQuery(qs, defaultField, req.getSchema());

      // If the first non-query, non-filter command is a simple sort on an indexed field, then
      // we can use the Lucene sort ability.
      Sort sort = null;
      if (commands.size() >= 2) {
        QueryParsing.SortSpec sortSpec = QueryParsing.parseSort(commands.get(1), req.getSchema());
        if (sortSpec != null) {
          sort = sortSpec.getSort();
          // ignore the count for now... it's currently only controlled by start & limit on req
          // count = sortSpec.getCount();
        }
      }

      DocList results = req.getSearcher().getDocList(query, null, sort, p.getInt(START,0), p.getInt(ROWS,10), flags);
      rsp.add(null,results);

      try {
        NamedList dbg = U.doStandardDebug(req, qs, query, results);
        if (null != dbg) 
          rsp.add("debug", dbg);
      } catch (Exception e) {
        SolrException.logOnce(SolrCore.log, "Exception durring debug", e);
        rsp.add("exception_during_debug", SolrException.toStr(e));
      }

      NamedList sumData = SolrPluginUtils.doStandardHighlighting(
        results, query, req, new String[]{defaultField});
      if(sumData != null)
        rsp.add("highlighting", sumData);

    } catch (SolrException e) {
      rsp.setException(e);
      numErrors++;
      return;
    } catch (Exception e) {
      SolrException.log(SolrCore.log,e);
      rsp.setException(e);
      numErrors++;
      return;
    }
  }

