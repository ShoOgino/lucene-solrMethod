  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {
    rsp.setHttpCaching(false);
    final SolrParams solrParams = req.getParams();
    String command = solrParams.get(COMMAND);
    if (command == null) {
      rsp.add("status", "OK");
      return;
    }
    // This command does not give the current index version of the master
    // It gives the current 'replicateable' index version
    if (command.equals(CMD_INDEX_VERSION)) {
      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change
      if (commitPoint != null) {
        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());
        rsp.add(GENERATION, commitPoint.getGeneration());
      } else {
        // This happens when replication is not configured to happen after startup and no commit/optimize
        // has happened yet.
        rsp.add(CMD_INDEX_VERSION, 0L);
        rsp.add(GENERATION, 0L);
      }
    } else if (command.equals(CMD_GET_FILE)) {
      getFileStream(solrParams, rsp);
    } else if (command.equals(CMD_GET_FILE_LIST)) {
      getFileList(solrParams, rsp);
    } else if (command.equals(CMD_SNAP_SHOOT)) {
      doSnapShoot(rsp);
    } else if (command.equals(CMD_SNAP_PULL)) {
      new Thread() {
        public void run() {
          doSnapPull(solrParams);
        }
      }.start();
      rsp.add("status", "OK");
    } else if (command.equals(CMD_DISABLE_POLL)) {
      if (snapPuller != null)
        snapPuller.disablePoll();
    } else if (command.equals(CMD_ENABLE_POLL)) {
      if (snapPuller != null)
        snapPuller.enablePoll();
    } else if (command.equals(CMD_ABORT_SNAP_PULL)) {
      if (snapPuller != null)
        snapPuller.abortPull();
    } else if (command.equals(CMD_FILE_CHECKSUM)) {
      // this command is not used by anyone
      getFileChecksum(solrParams, rsp);
    } else if (command.equals(CMD_SHOW_COMMITS)) {
      rsp.add(CMD_SHOW_COMMITS, getCommits());
    } else if (command.equals(CMD_DETAILS)) {
      getReplicationDetails(rsp);
    }
  }

