  @SuppressWarnings("unchecked")
  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( 
    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) 
    throws Exception
  { 
    Query matchAllDocs = new MatchAllDocsQuery();
    SolrQueryParser qp = searcher.getSchema().getSolrQueryParser(null);

    IndexReader reader = searcher.getReader();
    IndexSchema schema = searcher.getSchema();
    
    // Walk the term enum and keep a priority quey for each map in our set
    Map<String,TopTermQueue> ttinfo = getTopTerms(reader, fields, numTerms, null );
    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();
    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);
    for (String fieldName : fieldNames) {
      if( fields != null && !fields.contains( fieldName ) ) {
        continue; // if a field is specified, only them
      }
      
      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();
      
      SchemaField sfield = schema.getFieldOrNull( fieldName );
      FieldType ftype = (sfield==null)?null:sfield.getType();

      f.add( "type", (ftype==null)?null:ftype.getTypeName() );
      f.add( "schema", getFieldFlags( sfield ) );
      
      Query q = qp.parse( fieldName+":[* TO *]" ); 
      int docCount = searcher.numDocs( q, matchAllDocs );
      if( docCount > 0 ) {
        // Find a document with this field
        DocList ds = searcher.getDocList( q, (Query)null, (Sort)null, 0, 1 );
        try {
          Document doc = searcher.doc( ds.iterator().next() );
          Fieldable fld = doc.getFieldable( fieldName );
          if( fld != null ) {
            f.add( "index", getFieldFlags( fld ) );
          }
          else {
            // it is a non-stored field...
            f.add( "index", "(unstored field)" );
          }
        }
        catch( Exception ex ) {
          log.warning( "error reading field: "+fieldName );
        }
        // Find one document so we can get the fieldable
      }
      f.add( "docs", docCount );
      
      TopTermQueue topTerms = ttinfo.get( fieldName );
      if( topTerms != null ) {
        f.add( "distinct", topTerms.distinctTerms );
        
        // Include top terms
        f.add( "topTerms", topTerms.toNamedList( searcher.getSchema() ) );

        // Add a histogram
        f.add( "histogram", topTerms.histogram.toNamedList() );
      }
      
      // Add the field
      finfo.add( fieldName, f );
    }
    return finfo;
  }

