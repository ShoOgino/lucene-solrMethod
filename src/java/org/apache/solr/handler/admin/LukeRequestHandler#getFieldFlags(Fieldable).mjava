  /**
   * @return a string representing a Fieldable's flags.  
   */
  private static String getFieldFlags( Fieldable f )
  {
    StringBuilder flags = new StringBuilder();
    flags.append( (f != null && f.isIndexed())                     ? 'I' : '-' );
    flags.append( (f != null && f.isTokenized())                   ? 'T' : '-' );
    flags.append( (f != null && f.isStored())                      ? 'S' : '-' );
    flags.append( (false)                                          ? 'M' : '-' ); // SchemaField Specific
    flags.append( (f != null && f.isTermVectorStored())            ? 'V' : '-' );
    flags.append( (f != null && f.isStoreOffsetWithTermVector())   ? 'o' : '-' );
    flags.append( (f != null && f.isStorePositionWithTermVector()) ? 'p' : '-' );
    flags.append( (f != null && f.getOmitNorms())                  ? 'O' : '-' );
    flags.append( (f != null && f.isLazy())                        ? 'L' : '-' );
    flags.append( (f != null && f.isBinary())                      ? 'B' : '-' );
    flags.append( (f != null && f.isCompressed())                  ? 'C' : '-' );
    flags.append( (false)                                          ? 'f' : '-' ); // SchemaField Specific
    flags.append( (false)                                          ? 'l' : '-' ); // SchemaField Specific
    return flags.toString();
  }

