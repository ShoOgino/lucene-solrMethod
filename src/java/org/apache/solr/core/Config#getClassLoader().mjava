  /**
   * Returns the singleton classloader to be use when loading resources
   * specified in any configs.
   *
   * <p>
   * This loader will delegate to the context classloader when possible,
   * otherwise it will attempt to resolve resources useing any jar files
   * found in the "lib/" directory in the "Solr Home" directory.
   * <p>
   */
  static ClassLoader getClassLoader() {
    if (null == classLoader) {
      classLoader = Thread.currentThread().getContextClassLoader();

      File f = new File(getInstanceDir() + "lib/");
      if (f.canRead() && f.isDirectory()) {
        File[] jarFiles = f.listFiles();
        URL[] jars = new URL[jarFiles.length];
        try {
          for (int j = 0; j < jarFiles.length; j++) {
            jars[j] = jarFiles[j].toURI().toURL();
            log.info("Adding '" + jars[j].toString() + "' to Solr classloader");
          }
          classLoader = URLClassLoader.newInstance(jars, classLoader);
        } catch (MalformedURLException e) {
          SolrException.log(log,"Can't construct solr lib class loader", e);
        }
      }
    }
    return classLoader;
  }

