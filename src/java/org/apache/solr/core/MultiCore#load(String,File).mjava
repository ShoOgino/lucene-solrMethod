  /**
   * Load a config file listing the available solr cores
   */
  public void load(String dir, File configFile ) throws ParserConfigurationException, IOException, SAXException {
    this.configFile = configFile;
    Config cfg = new Config( new SolrResourceLoader(dir), 
        null, new FileInputStream( configFile ), null );
    
    persistent = cfg.getBool( "multicore/@persistent", false );
    adminPath  = cfg.get(     "multicore/@adminPath", null );
    libDir     = cfg.get(     "multicore/@sharedLib", null);
    if (libDir != null) {
      // relative dir to conf
      File f = new File(dir, libDir);
      libDir = f.getPath(); 
      log.info( "loading shared library: "+f.getAbsolutePath() );
      libLoader = SolrResourceLoader.createClassLoader(f, null);
    }
    
    if( adminPath != null ) {
      multiCoreHandler = new MultiCoreHandler();
    }
    
    boolean hasDefault = false;
    NodeList nodes = (NodeList)cfg.evaluate("multicore/core", XPathConstants.NODESET);
    for (int i=0; i<nodes.getLength(); i++) {
      Node node = nodes.item(i);
      
      try {
        String name         = DOMUtil.getAttr(node,"name", "Core needs a name" );
        String instanceDir  = DOMUtil.getAttr(node,"instanceDir", "Missing required 'instanceDir'" );
        String dataDir      = DOMUtil.getAttr(node,"dataDir", null );
        String defaultStr   = DOMUtil.getAttr(node,"default", null );
        
        // Make the instanceDir relative to the core config
        File idir = new File( dir, instanceDir );
        instanceDir = idir.getPath();
        
        // Initialize the solr config
        SolrResourceLoader solrLoader = new SolrResourceLoader(instanceDir, libLoader);
        SolrConfig solrConfig = new SolrConfig( solrLoader, SolrConfig.DEFAULT_CONF_FILE, null );
        IndexSchema schema = new IndexSchema(solrConfig, instanceDir+"/conf/schema.xml");
        SolrCore core = new SolrCore( name, dataDir, solrConfig, schema );
        
        // Register the new core
        SolrCore old = this.register( core );
        if( old != null ) {
          throw new RuntimeException( cfg.getName() +
                  " registers multiple cores to the same name: "+name );
        }
        
        if( "true".equalsIgnoreCase( defaultStr ) ) {
          if( hasDefault ) {
            throw new RuntimeException( 
                "multicore.xml defines multiple default cores. "+
                getDefaultCore().getName() + " and " + core.getName() );
          }
          this.setDefaultCore( core );
          hasDefault = true;
        }
      } 
      catch( Throwable ex ) {
        SolrConfig.severeErrors.add( ex );
        SolrException.logOnce(log,null,ex);
      }
    }
    
    if( !hasDefault ) {
      throw new RuntimeException( 
          "multicore.xml must define at least one default core" );
    }
    enabled = true;
  }

