  /**
   * <p>
   * This loader will delegate to the context classloader when possible,
   * otherwise it will attempt to resolve resources using any jar files
   * found in the "lib/" directory in the "Solr Home" directory.
   * <p>
   */
  public SolrResourceLoader( String instanceDir, ClassLoader loader )
  {
    if( instanceDir == null ) {
      instanceDir = SolrResourceLoader.locateInstanceDir();
    }
    this.instanceDir = normalizeDir(instanceDir);
    log.info("Solr home set to '" + this.instanceDir + "'");
    
    if( loader == null ) {
      // NB5.5/win32/1.5_10: need to go thru local var or classLoader is not set!
      loader = Thread.currentThread().getContextClassLoader();
    }
    
    File f = new File(instanceDir + "lib/");
    if (f.canRead() && f.isDirectory()) {
      File[] jarFiles = f.listFiles();
      URL[] jars = new URL[jarFiles.length];
      try {
        for (int j = 0; j < jarFiles.length; j++) {
          jars[j] = jarFiles[j].toURI().toURL();
          log.info("Adding '" + jars[j].toString() + "' to Solr classloader");
        }
        loader = URLClassLoader.newInstance(jars, loader);
      } catch (MalformedURLException e) {
        SolrException.log(log,"Can't construct solr lib class loader", e);
      }
    }
    this.classLoader = loader;
  }

