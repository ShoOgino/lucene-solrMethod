  /**
   * Read solrconfig.xml and register the appropriate handlers
   * 
   * This function should <b>only</b> be called from the SolrCore constructor.  It is
   * not intended as a public API.
   * 
   * While the normal runtime registration contract is that handlers MUST be initialized 
   * before they are registered, this function does not do that exactly.
   * 
   * This function registers all handlers first and then calls init() for each one.  
   * 
   * This is OK because this function is only called at startup and there is no chance that
   * a handler could be asked to handle a request before it is initialized.
   * 
   * The advantage to this approach is that handlers can know what path they are registered
   * to and what other handlers are available at startup.
   * 
   * Handlers will be registered and initialized in the order they appear in solrconfig.xml
   */
  void initHandlersFromConfig( final Config config )  
  {
    final RequestHandlers handlers = this;
    AbstractPluginLoader<SolrRequestHandler> loader = 
      new AbstractPluginLoader<SolrRequestHandler>( "[solrconfig.xml] requestHandler", true, true )
    {
      @Override
      protected SolrRequestHandler create( Config config, String name, String className, Node node ) throws Exception
      {    
        String startup = DOMUtil.getAttr( node, "startup" );
        if( startup != null ) {
          if( "lazy".equals( startup ) ) {
            log.info("adding lazy requestHandler: " + className );
            NamedList args = DOMUtil.childNodesToNamedList(node);
            return new LazyRequestHandlerWrapper( core, className, args );
          }
          else {
            throw new Exception( "Unknown startup value: '"+startup+"' for: "+className );
          }
        }
        return super.create( config, name, className, node );
      }

      @Override
      protected SolrRequestHandler register(String name, SolrRequestHandler plugin) throws Exception {
        return handlers.register( name, plugin );
      }
      
      @Override
      protected void init(SolrRequestHandler plugin, Node node ) throws Exception {
        plugin.init( DOMUtil.childNodesToNamedList(node) );
      }      
    };
    
    NodeList nodes = (NodeList)config.evaluate("requestHandler", XPathConstants.NODESET);
    
    // Load the handlers and get the default one
    SolrRequestHandler defaultHandler = loader.load( config, nodes );
    if( defaultHandler == null ) {
      defaultHandler = get(RequestHandlers.DEFAULT_HANDLER_NAME);
      if( defaultHandler == null ) {
        defaultHandler = new StandardRequestHandler();
        register(RequestHandlers.DEFAULT_HANDLER_NAME, defaultHandler);
      }
    }
    register(null, defaultHandler);
    register("", defaultHandler);
  }

