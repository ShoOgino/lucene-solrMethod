  public Query parse() throws ParseException {
    SolrParams solrParams = localParams == null ? params : new DefaultSolrParams(localParams, params);

    IndexSchema schema = req.getSchema();

    queryFields = U.parseFieldBoosts(solrParams.getParams(DMP.QF));
    Map<String,Float> phraseFields = U.parseFieldBoosts(solrParams.getParams(DMP.PF));

    float tiebreaker = solrParams.getFloat(DMP.TIE, 0.0f);

    int pslop = solrParams.getInt(DMP.PS, 0);
    int qslop = solrParams.getInt(DMP.QS, 0);

    /* a generic parser for parsing regular lucene queries */
    QueryParser p = schema.getSolrQueryParser(null);

    /* a parser for dealing with user input, which will convert
     * things to DisjunctionMaxQueries
     */
    U.DisjunctionMaxQueryParser up =
      new U.DisjunctionMaxQueryParser(schema, IMPOSSIBLE_FIELD_NAME);
    up.addAlias(IMPOSSIBLE_FIELD_NAME,
                tiebreaker, queryFields);
    up.setPhraseSlop(qslop);

    /* for parsing sloppy phrases using DisjunctionMaxQueries */
    U.DisjunctionMaxQueryParser pp =
      new U.DisjunctionMaxQueryParser(schema, IMPOSSIBLE_FIELD_NAME);
    pp.addAlias(IMPOSSIBLE_FIELD_NAME,
                tiebreaker, phraseFields);
    pp.setPhraseSlop(pslop);


    /* the main query we will execute.  we disable the coord because
     * this query is an artificial construct
     */
    BooleanQuery query = new BooleanQuery(true);

    /* * * Main User Query * * */
    parsedUserQuery = null;
    String userQuery = getString();
    Query altUserQuery = null;
    if( userQuery == null || userQuery.trim().length() < 1 ) {
      // If no query is specified, we may have an alternate
      String altQ = solrParams.get( DMP.ALTQ );
      if (altQ != null) {
        altUserQuery = p.parse(altQ);
        query.add( altUserQuery , BooleanClause.Occur.MUST );
      } else {
        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, "missing query string" );
      }
    }
    else {
      // There is a valid query string
      userQuery = U.partialEscape(U.stripUnbalancedQuotes(userQuery)).toString();

      String minShouldMatch = solrParams.get(DMP.MM, "100%");
      Query dis = up.parse(userQuery);
      parsedUserQuery = dis;

      if (dis instanceof BooleanQuery) {
        BooleanQuery t = new BooleanQuery();
        U.flattenBooleanQuery(t, (BooleanQuery)dis);
        U.setMinShouldMatch(t, minShouldMatch);
        parsedUserQuery = t;
      }
      query.add(parsedUserQuery, BooleanClause.Occur.MUST);


      /* * * Add on Phrases for the Query * * */

      /* build up phrase boosting queries */

      /* if the userQuery already has some quotes, stip them out.
       * we've already done the phrases they asked for in the main
       * part of the query, this is to boost docs that may not have
       * matched those phrases but do match looser phrases.
       */
      String userPhraseQuery = userQuery.replace("\"","");
      Query phrase = pp.parse("\"" + userPhraseQuery + "\"");
      if (null != phrase) {
        query.add(phrase, BooleanClause.Occur.SHOULD);
      }
    }


    /* * * Boosting Query * * */
    String[] boostParams = solrParams.getParams(DMP.BQ);
    //List<Query> boostQueries = U.parseQueryStrings(req, boostParams);
    List<Query> boostQueries=null;
    if (boostParams!=null && boostParams.length>0) {
      boostQueries = new ArrayList<Query>();
      for (String qs : boostParams) {
        Query q = subQuery(qs, null).parse();
        boostQueries.add(q);
      }
    }
    if (null != boostQueries) {
      if(1 == boostQueries.size() && 1 == boostParams.length) {
        /* legacy logic */
        Query f = boostQueries.get(0);
        if (1.0f == f.getBoost() && f instanceof BooleanQuery) {
          /* if the default boost was used, and we've got a BooleanQuery
           * extract the subqueries out and use them directly
           */
          for (Object c : ((BooleanQuery)f).clauses()) {
            query.add((BooleanClause)c);
          }
        } else {
          query.add(f, BooleanClause.Occur.SHOULD);
        }
      } else {
        for(Query f : boostQueries) {
          query.add(f, BooleanClause.Occur.SHOULD);
        }
      }
    }

    /* * * Boosting Functions * * */

    String[] boostFuncs = solrParams.getParams(DMP.BF);
    if (null != boostFuncs && 0 != boostFuncs.length) {
      for (String boostFunc : boostFuncs) {
        if(null == boostFunc || "".equals(boostFunc)) continue;
        Map<String,Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);
        for (String f : ff.keySet()) {
          Query fq = subQuery(f, FunctionQParserPlugin.NAME).parse();
          Float b = ff.get(f);
          if (null != b) {
            fq.setBoost(b);
          }
          query.add(fq, BooleanClause.Occur.SHOULD);
        }
      }
    }

    return query;
  }

