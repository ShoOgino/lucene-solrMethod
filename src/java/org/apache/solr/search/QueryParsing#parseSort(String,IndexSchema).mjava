  /**
   * Returns null if the sortSpec is the standard sort desc.
   *
   * <p>
   * The form of the sort specification string currently parsed is:
   * </p>
   * <pre>>
   * SortSpec ::= SingleSort [, SingleSort]*
   * SingleSort ::= <fieldname> SortDirection
   * SortDirection ::= top | desc | bottom | asc
   * </pre>
   * Examples:
   * <pre>
   *   score desc               #normal sort by score (will return null)
   *   weight bottom            #sort by weight ascending 
   *   weight desc              #sort by weight descending
   *   height desc,weight desc  #sort by height descending, and use weight descending to break any ties
   *   height desc,weight asc   #sort by height descending, using weight ascending as a tiebreaker
   * </pre>
   *
   */
  public static SortSpec parseSort(String sortSpec, IndexSchema schema) {
    if (sortSpec==null || sortSpec.length()==0) return null;

    String[] parts = sortSep.split(sortSpec.trim());
    if (parts.length == 0) return null;

    SortField[] lst = new SortField[parts.length];
    for( int i=0; i<parts.length; i++ ) {
      String part = parts[i].trim();
      boolean top=true;
        
      int idx = part.indexOf( ' ' );
      if( idx > 0 ) {
        String order = part.substring( idx+1 ).trim();
    	if( "desc".equals( order ) || "top".equals(order) ) {
    	  top = true;
    	}
    	else if ("asc".equals(order) || "bottom".equals(order)) {
    	  top = false;
    	}
    	else {
    	  throw new SolrException( 400, "Unknown sort order: "+order);
    	}
    	part = part.substring( 0, idx ).trim();
      }
      else {
		throw new SolrException( 400, "Missing sort order." );
      }
    	
      if( "score".equals(part) ) {
        if (top) {
          // If thre is only one thing in the list, just do the regular thing...
          if( parts.length == 1 ) {
            return null; // do normal scoring...
          }
          lst[i] = SortField.FIELD_SCORE;
        }
        else {
          lst[i] = new SortField(null, SortField.SCORE, true);
        }
      } 
      else {
        // getField could throw an exception if the name isn't found
        SchemaField f = null;
        try{
          f = schema.getField(part);
        }
        catch( SolrException e ){
          throw new SolrException( 400, "can not sort on undefined field: "+part, e );
        }
        if (f == null || !f.indexed()){
          throw new SolrException( 400, "can not sort on unindexed field: "+part );
        }
        lst[i] = f.getType().getSortField(f,top);
      }
    }
    // For more info on the 'num' field, -1, 
    // see: https://issues.apache.org/jira/browse/SOLR-99
    return new SortSpec( new Sort(lst),-1);
  }

