  public DocValues getValues(IndexReader reader) throws IOException {
    final DocValues vals =  source.getValues(reader);
    int maxDoc = reader.maxDoc();

    // this doesn't take into account deleted docs!
    float minVal=0.0f;
    float maxVal=0.0f;

    if (maxDoc>0) {
      minVal = maxVal = vals.floatVal(0);      
    }

    // Traverse the complete set of values to get the min and the max.
    // Future alternatives include being able to ask a DocValues for min/max
    // Another memory-intensive option is to cache the values in
    // a float[] on this first pass.

    for (int i=0; i<maxDoc; i++) {
      float val = vals.floatVal(i);
      if (val < minVal) {
        minVal = val;
      } else if (val > maxVal) {
        maxVal = val;
      }
    }

    final float scale = (maxVal-minVal==0) ? 0 : (max-min)/(maxVal-minVal);
    final float minSource = minVal;
    final float maxSource = maxVal;

    return new DocValues() {
      public float floatVal(int doc) {
	return (vals.floatVal(doc) - minSource) * scale + min;
      }
      public int intVal(int doc) {
        return (int)floatVal(doc);
      }
      public long longVal(int doc) {
        return (long)floatVal(doc);
      }
      public double doubleVal(int doc) {
        return (double)floatVal(doc);
      }
      public String strVal(int doc) {
        return Float.toString(floatVal(doc));
      }
      public String toString(int doc) {
	return "scale(" + vals.toString(doc) + ",toMin=" + min + ",toMax=" + max
                + ",fromMin=" + minSource
                + ",fromMax=" + maxSource
                + ")";
      }
    };
  }

