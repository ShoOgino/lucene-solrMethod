  /**
   * Returns documents matching both <code>query</code> and <code>filter</code>
   * and sorted by <code>sort</code>. Also returns the compete set of documents
   * matching <code>query</code> and <code>filter</code> (regardless of <code>offset</code> and <code>len</code>).
   * <p>
   * FUTURE: The returned DocList may be retrieved from a cache.
   * <p>
   * The DocList and DocSet returned should <b>not</b> be modified.
   *
   * @param query
   * @param filter   may be null
   * @param lsort    criteria by which to sort (if null, query relevance is used)
   * @param offset   offset into the list of documents to return
   * @param len      maximum number of documents to return
   * @return
   * @throws IOException
   */
  public DocListAndSet getDocListAndSet(Query query, DocSet filter, Sort lsort, int offset, int len) throws IOException {
    DocListAndSet ret = new DocListAndSet();
    getDocListC(ret,query,null,filter,lsort,offset,len,0);
    if (ret.docSet == null) {
      ret.docSet = getDocSet(query,filter);
    }

    // TODO: OPT: Hmmm, but if docList.size() == docList.matches() then
    // we actually already have all the ids (the set)!  We could simply
    // return the docList as the docSet also, or hash the ids into
    // a HashDocSet, etc... no need to run the query again!
    //

    assert(ret.docList.matches() == ret.docSet.size());
    return ret;
  }

