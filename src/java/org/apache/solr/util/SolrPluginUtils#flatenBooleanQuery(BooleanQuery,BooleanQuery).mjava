  /**
   * Recursively walks the "from" query pulling out sub-queries and
   * adding them to the "to" query.
   *
   * <p>
   * Boosts are multiplied as needed.  Sub-BooleanQueryies which are not
   * optional will not be flattened.  From will be mangled durring the walk,
   * so do not attempt to reuse it.
   * </p>
   */
  public static void flatenBooleanQuery(BooleanQuery to, BooleanQuery from) {

    BooleanClause[] c = from.getClauses();
    for (int i = 0; i < c.length; i++) {
            
      Query ci = c[i].getQuery();
      ci.setBoost(ci.getBoost() * from.getBoost());
            
      if (ci instanceof BooleanQuery
          && !c[i].isRequired()
          && !c[i].isProhibited()) {
                
        /* we can recurse */
        flatenBooleanQuery(to, (BooleanQuery)ci);
                
      } else {
        to.add(c[i]);
      }
    }
  }

