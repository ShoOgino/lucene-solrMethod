  /** Flips a range of bits, expanding the set size if necessary
   *
   * @param startIndex lower index
   * @param endIndex one-past the last bit to flip
   */
  public void flip(long startIndex, long endIndex) {
    if (endIndex <= startIndex) return;

    int oldlen = wlen;
    ensureCapacity(endIndex);
    int startWord = (int)(startIndex>>6);
    int endWord   = (int)(endIndex>>6);

    /*** Grrr, java shifting wraps around so -1L>>64 == -1
    long startmask = -1L << (startIndex & 0x3f);     // example: 11111...111000
    long endmask = -1L >>> (64-(endIndex & 0x3f));   // example: 00111...111111
    ***/

    long startmask = -1L << startIndex;
    long endmask = (endIndex&0x3c)==0 ? 0 : -1L >>> (64-endIndex);

    if (this.wlen <= endWord) {
      this.wlen = endWord;
      if (endmask!=0) this.wlen++;
    }

    if (startWord == endWord) {
      bits[startWord] ^= (startmask & endmask);
      return;
    }

    bits[startWord] ^= startmask;

    int middle = Math.min(oldlen,endWord);
    for (int i=startWord+1; i<middle; i++) {
      bits[i] = ~bits[i];
    }

    if (endWord>middle) {
      Arrays.fill(bits,middle,endWord,-1L);
    }

    if (endmask!=0) {
      bits[endWord] ^= endmask;
    }
  }

