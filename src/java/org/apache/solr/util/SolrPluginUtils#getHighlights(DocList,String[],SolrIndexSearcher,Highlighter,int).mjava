  /**
   * Generates a list of Highlighted query fragments for each item in a list
   * of documents
   *
   * @param docs query results
   * @param fieldNames list of fields to summarize
   * @param searcher the SolrIndexSearcher corresponding to a request
   * @param numFragments maximum number of summary fragments to return for
   *        a given field   
   * @param highlighter a customized Highlighter instance
   *
   * @return NamedList containing a NamedList for each document, which in
   * turns contains sets (field, summary) pairs.
   */
  public static NamedList getHighlights(DocList docs, 
                                        String[] fieldNames, 
                                        SolrIndexSearcher searcher,
                                        Highlighter highlighter,
                                        int numFragments
                                        ) throws IOException {
    NamedList fragments = new NamedList();
    DocIterator iterator = docs.iterator();
    for (int i=0; i<docs.size(); i++) {
      int docId = iterator.nextDoc();
      // use the Searcher's doc cache
      Document doc = searcher.doc(docId);
      NamedList docSummaries = new NamedList();
      for(String fieldName : fieldNames) {
        fieldName = fieldName.trim();
        String[] docTexts = doc.getValues(fieldName);
        if(docTexts == null) 
          continue;        
        String[] summaries;
        TextFragment[] frag;
        if(docTexts.length == 1) {
          // single-valued field
          TokenStream tstream;
          try {
            // attempt term vectors
            tstream = TokenSources.getTokenStream(
              searcher.getReader(), docId, fieldName);
          } catch (IllegalArgumentException e) {
            // fall back to analyzer
            tstream = searcher.getSchema().getAnalyzer().tokenStream(
             fieldName, new StringReader(docTexts[0]));
          }
          frag = highlighter.getBestTextFragments(
            tstream, docTexts[0], false, numFragments);

        } else {
          // multi-valued field
          MultiValueTokenStream tstream;
          tstream = new MultiValueTokenStream(fieldName,
                                              docTexts,
                                              searcher.getSchema().getAnalyzer());
          frag = highlighter.getBestTextFragments(
            tstream, tstream.asSingleValue(), false, numFragments);
        }
        // convert fragments back into text
        // TODO: we can include score and position information in output as
        // snippet attributes
        if(frag.length > 0) {
          ArrayList fragTexts = new ArrayList();
          for (int j = 0; j < frag.length; j++) {
              if ((frag[j] != null) && (frag[j].getScore() > 0)) {
                  fragTexts.add(frag[j].toString());
                }
            }
          summaries =  (String[]) fragTexts.toArray(new String[0]);
          if(summaries.length > 0)
            docSummaries.add(fieldName, summaries);
        }
      }      
      String printId = searcher.getSchema().printableUniqueKey(doc);
      fragments.add(printId == null ? null : printId, docSummaries);
    }    
    return fragments;
  }

