    /**
     * <p>
     * Parses a query which searches on the fields specified.
     * <p>
     * If x fields are specified, this effectively constructs:
     * <pre>
     * <code>
     * (field1:query1) (field2:query2) (field3:query3)...(fieldx:queryx)
     * </code>
     * </pre>
     * @param queries Queries strings to parse
     * @param fields Fields to search on
     * @param analyzer Analyzer to use
     * @throws ParseException if query parsing fails
     * @throws TokenMgrError if query parsing fails
     * @throws IllegalArgumentException if the length of the queries array differs
     *  from the length of the fields array
     */
    public static Query parse(String[] queries, String[] fields,
        Analyzer analyzer) throws ParseException
    {
        if (queries.length != fields.length)
            throw new IllegalArgumentException("queries.length != fields.length");
        BooleanQuery bQuery = new BooleanQuery();
        for (int i = 0; i < fields.length; i++)
        {
            Query q = parse(queries[i], fields[i], analyzer);
            bQuery.add(q, BooleanClause.Occur.SHOULD);
        }
        return bQuery;
    }

