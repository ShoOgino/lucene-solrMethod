    /**
     * <p>
     * Parses a query, searching on the fields specified.
     * Use this if you need to specify certain fields as required,
     * and others as prohibited.
     * <p><pre>
     * Usage:
     * <code>
     * String[] fields = {"filename", "contents", "description"};
     * int[] flags = {MultiFieldQueryParser.NORMAL_FIELD,
     *                MultiFieldQueryParser.REQUIRED_FIELD,
     *                MultiFieldQueryParser.PROHIBITED_FIELD,};
     * parse(query, fields, flags, analyzer);
     * </code>
     * </pre>
     *<p>
     * The code above would construct a query:
     * <pre>
     * <code>
     * (filename:query) +(contents:query) -(description:query)
     * </code>
     * </pre>
     *
     * @param query Query string to parse
     * @param fields Fields to search on
     * @param flags Flags describing the fields
     * @param analyzer Analyzer to use
     * @throws ParseException if query parsing fails
     * @throws TokenMgrError if query parsing fails
     * @throws IllegalArgumentException if the length of the fields array differs
     *  from the length of the flags array
     */
    public static Query parse(String query, String[] fields, int[] flags,
	Analyzer analyzer) throws ParseException
    {
        if (fields.length != flags.length)
          throw new IllegalArgumentException("fields.length != flags.length");
        BooleanQuery bQuery = new BooleanQuery();
        for (int i = 0; i < fields.length; i++)
        {
            Query q = parse(query, fields[i], analyzer);
            int flag = flags[i];
            switch (flag)
            {
                case REQUIRED_FIELD:
                    bQuery.add(q, BooleanClause.Occur.MUST);
                    break;
                case PROHIBITED_FIELD:
                    bQuery.add(q, BooleanClause.Occur.MUST_NOT);
                    break;
                default:
                    bQuery.add(q, BooleanClause.Occur.SHOULD);
                    break;
            }
        }
        return bQuery;
    }

