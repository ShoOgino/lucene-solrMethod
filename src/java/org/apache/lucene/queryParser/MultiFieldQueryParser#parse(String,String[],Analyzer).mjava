  /**
   * Parses a query which searches on the fields specified.
   * If x fields are specified, this effectively constructs:
   *
   * <code>
   * (field1:query) (field2:query) (field3:query)...(fieldx:query)
   * </code>
   *
   * @param query Query string to parse
   * @param fields Fields to search on
   * @param analyzer Analyzer to use
   * @throws ParseException if query parsing fails
   * @throws TokenMgrError if query parsing fails
   * @deprecated use {@link #parse(String)} instead but note that it
   *  returns a different query for queries where all terms are required:
   *  its query excepts all terms, no matter in what field they occur whereas
   *  the query built by this (deprecated) method expected all terms in all fields 
   *  at the same time.
   */
  public static Query parse(String query, String[] fields, Analyzer analyzer)
	throws ParseException
  {
    BooleanQuery bQuery = new BooleanQuery();
    for (int i = 0; i < fields.length; i++)
    {
      Query q = parse(query, fields[i], analyzer);
      bQuery.add(q, BooleanClause.Occur.SHOULD);
    }
    return bQuery;
  }

