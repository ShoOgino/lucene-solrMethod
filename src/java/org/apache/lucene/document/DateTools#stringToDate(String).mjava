  /**
   * Converts a string produced by <code>timeToString</code> or
   * <code>dateToString</code> back to a time, represented as a
   * Date object.
   * 
   * @param dateString the date string to be converted
   * @return the parsed time as a Date object 
   * @throws ParseException if <code>dateString</code> is not in the 
   *  expected format 
   */
  public static Date stringToDate(String dateString) throws ParseException {
    String pattern = null;
    if (dateString.length() == 4 )
      pattern = "yyyy";
    else if (dateString.length() == 6 )
      pattern = "yyyyMM";
    else if (dateString.length() == 8 )
      pattern = "yyyyMMdd";
    else if (dateString.length() == 10 )
      pattern = "yyyyMMddHH";
    else if (dateString.length() == 12 )
      pattern = "yyyyMMddHHmm";
    else if (dateString.length() == 14 )
      pattern = "yyyyMMddHHmmss";
    else if (dateString.length() == 17 )
      pattern = "yyyyMMddHHmmssSSS";
    else
      throw new ParseException("Input is not valid date string: " + dateString, 0);
    SimpleDateFormat sdf = new SimpleDateFormat(pattern);
    sdf.setTimeZone(GMT);
    Date date = sdf.parse(dateString);
    return date;
  }

