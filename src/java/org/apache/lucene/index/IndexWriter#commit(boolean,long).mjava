  /** Walk through all files referenced by the current
   *  segmentInfos, minus flushes, and ask the Directory to
   *  sync each file, if it wasn't already.  If that
   *  succeeds, then we write a new segments_N file & sync
   *  that. */
  private void commit(boolean skipWait, long sizeInBytes) throws IOException {

    assert testPoint("startCommit");

    if (hitOOM)
      return;

    try {

      if (infoStream != null)
        message("start commit() skipWait=" + skipWait + " sizeInBytes=" + sizeInBytes);

      if (!skipWait)
        syncPause(sizeInBytes);

      SegmentInfos toSync = null;
      final long myChangeCount;

      synchronized(this) {

        assert lastCommitChangeCount <= changeCount;

        if (changeCount == lastCommitChangeCount) {
          if (infoStream != null)
            message("  skip commit(): no changes pending");
          return;
        }

        // First, we clone & incref the segmentInfos we intend
        // to sync, then, without locking, we sync() each file
        // referenced by toSync, in the background.  Multiple
        // threads can be doing this at once, if say a large
        // merge and a small merge finish at the same time:

        toSync = (SegmentInfos) segmentInfos.clone();
        deleter.incRef(toSync, false);
        myChangeCount = changeCount;
      }

      if (infoStream != null)
        message("commit index=" + segString(toSync));

      assert testPoint("midCommit");

      try {

        // Loop until all files toSync references are sync'd:
        while(true) {

          final Collection pending = new ArrayList();

          for(int i=0;i<toSync.size();i++) {
            final SegmentInfo info = toSync.info(i);
            final List files = info.files();
            for(int j=0;j<files.size();j++) {
              final String fileName = (String) files.get(j);
              if (startSync(fileName, pending)) {
                boolean success = false;
                try {
                  // Because we incRef'd this commit point, above,
                  // the file had better exist:
                  assert directory.fileExists(fileName);
                  message("now sync " + fileName);
                  directory.sync(fileName);
                  success = true;
                } finally {
                  finishSync(fileName, success);
                }
              }
            }
          }

          // All files that I require are either synced or being
          // synced by other threads.  If they are being synced,
          // we must at this point block until they are done.
          // If this returns false, that means an error in
          // another thread resulted in failing to actually
          // sync one of our files, so we repeat:
          if (waitForAllSynced(pending))
            break;
        }

        assert testPoint("midCommit2");
      
        synchronized(this) {
          // If someone saved a newer version of segments file
          // since I first started syncing my version, I can
          // safely skip saving myself since I've been
          // superseded:
          if (myChangeCount > lastCommitChangeCount) {
          
            if (segmentInfos.getGeneration() > toSync.getGeneration())
              toSync.updateGeneration(segmentInfos);

            boolean success = false;
            try {
              toSync.commit(directory);
              success = true;
            } finally {
              // Have our master segmentInfos record the
              // generations we just sync'd
              segmentInfos.updateGeneration(toSync);
              if (!success)
                message("hit exception committing segments file");
            }

            message("commit complete");

            lastCommitChangeCount = myChangeCount;

            deleter.checkpoint(toSync, true);
            setRollbackSegmentInfos();
          } else
            message("sync superseded by newer infos");
        }

        message("done all syncs");

        assert testPoint("midCommitSuccess");

      } finally {
        synchronized(this) {
          deleter.decRef(toSync);
        }
      }
    } catch (OutOfMemoryError oom) {
      hitOOM = true;
      throw oom;
    }
    assert testPoint("finishCommit");
  }

