  /** Merges all segments together into a single segment,
   * optimizing an index for search..
   * 
   * <p>Note that this requires temporary free space in the
   * Directory up to the size of the starting index (exact
   * usage could be less but will depend on many
   * factors).</p>

   * <p>If an Exception is hit during optimize() (eg, due to
   * disk full), the index will not be corrupted.  However
   * it's possible that one of the segments in the index
   * will be in non-CFS format even when using compound file
   * format.  This will occur when the Exception is hit
   * during conversion of the segment into compound
   * format.</p>
  */
  public synchronized void optimize() throws IOException {
    flushRamSegments();
    while (segmentInfos.size() > 1 ||
           (segmentInfos.size() == 1 &&
            (SegmentReader.hasDeletions(segmentInfos.info(0)) ||
             segmentInfos.info(0).dir != directory ||
             (useCompoundFile &&
              (!SegmentReader.usesCompoundFile(segmentInfos.info(0)) ||
                SegmentReader.hasSeparateNorms(segmentInfos.info(0))))))) {
      int minSegment = segmentInfos.size() - mergeFactor;
      mergeSegments(segmentInfos, minSegment < 0 ? 0 : minSegment, segmentInfos.size());
    }
  }

