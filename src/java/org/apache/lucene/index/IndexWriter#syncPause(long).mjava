  /** Pauses before syncing.  On Windows, at least, it's
   *  best (performance-wise) to pause in order to let OS
   *  flush writes to disk on its own, before forcing a
   *  sync.
   * @deprecated -- this will be removed in 3.0 when
   * autoCommit is hardwired to false */
  private void syncPause(long sizeInBytes) {
    if (mergeScheduler instanceof ConcurrentMergeScheduler && maxSyncPauseSeconds > 0) {
      // Rough heuristic: for every 10 MB, we pause for 1
      // second, up until the max
      long pauseTime = (long) (1000*sizeInBytes/10/1024/1024);
      final long maxPauseTime = (long) (maxSyncPauseSeconds*1000);
      if (pauseTime > maxPauseTime)
        pauseTime = maxPauseTime;
      final int sleepCount = (int) (pauseTime / 100);
      for(int i=0;i<sleepCount;i++) {
        synchronized(this) {
          if (stopMerges || closing)
            break;
        }
        try {
          Thread.sleep(100);
        } catch (InterruptedException ie) {
          // In 3.0 we will change this to throw
          // InterruptedException instead
          Thread.currentThread().interrupt();
          throw new RuntimeException(ie);
        }
      }
    }
  }

