    final void writeField(FieldInfo fi, Fieldable field) throws IOException {
      // if the field as an instanceof FieldsReader.FieldForMerge, we're in merge mode
      // and field.binaryValue() already returns the compressed value for a field
      // with isCompressed()==true, so we disable compression in that case
      boolean disableCompression = (field instanceof FieldsReader.FieldForMerge);
      fieldsStream.writeVInt(fi.number);
      byte bits = 0;
      if (field.isTokenized())
        bits |= FieldsWriter.FIELD_IS_TOKENIZED;
      if (field.isBinary())
        bits |= FieldsWriter.FIELD_IS_BINARY;
      if (field.isCompressed())
        bits |= FieldsWriter.FIELD_IS_COMPRESSED;
                
      fieldsStream.writeByte(bits);
                
      if (field.isCompressed()) {
        // compression is enabled for the current field
        byte[] data = null;
                  
        if (disableCompression) {
          // optimized case for merging, the data
          // is already compressed
          data = field.binaryValue();
        } else {
          // check if it is a binary field
          if (field.isBinary()) {
            data = compress(field.binaryValue());
          }
          else {
            data = compress(field.stringValue().getBytes("UTF-8"));
          }
        }
        final int len = data.length;
        fieldsStream.writeVInt(len);
        fieldsStream.writeBytes(data, len);
      }
      else {
        // compression is disabled for the current field
        if (field.isBinary()) {
          byte[] data = field.binaryValue();
          final int len = data.length;
          fieldsStream.writeVInt(len);
          fieldsStream.writeBytes(data, len);
        }
        else {
          fieldsStream.writeString(field.stringValue());
        }
      }
    }

