  protected void doCommit() throws IOException {
    if (deletedDocsDirty) {               // re-write deleted
      String oldDelFileName = si.getDelFileName();
      if (oldDelFileName != null) {
        // Mark this file for deletion.  Note that we don't
        // actually try to delete it until the new segments files is
        // successfully written:
        deleter.addPendingFile(oldDelFileName);
      }

      si.advanceDelGen();

      // We can write directly to the actual name (vs to a
      // .tmp & renaming it) because the file is not live
      // until segments file is written:
      deletedDocs.write(directory(), si.getDelFileName());
    }
    if (undeleteAll && si.hasDeletions()) {
      String oldDelFileName = si.getDelFileName();
      if (oldDelFileName != null) {
        // Mark this file for deletion.  Note that we don't
        // actually try to delete it until the new segments files is
        // successfully written:
        deleter.addPendingFile(oldDelFileName);
      }
      si.clearDelGen();
    }
    if (normsDirty) {               // re-write norms
      si.setNumField(fieldInfos.size());
      Enumeration values = norms.elements();
      while (values.hasMoreElements()) {
        Norm norm = (Norm) values.nextElement();
        if (norm.dirty) {
          norm.reWrite(si);
        }
      }
    }
    deletedDocsDirty = false;
    normsDirty = false;
    undeleteAll = false;
  }

