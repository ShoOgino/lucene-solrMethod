  /*
   * Begin a transaction.  During a transaction, any segment
   * merges that happen (or ram segments flushed) will not
   * write a new segments file and will not remove any files
   * that were present at the start of the transaction.  You
   * must make a matched (try/finally) call to
   * commitTransaction() or rollbackTransaction() to finish
   * the transaction.
   *
   * Note that buffered documents and delete terms are not handled
   * within the transactions, so they must be flushed before the
   * transaction is started.
   */
  private void startTransaction() throws IOException {

    if (infoStream != null)
      message("now start transaction");

    assert docWriter.getNumBufferedDeleteTerms() == 0 :
           "calling startTransaction with buffered delete terms not supported";
    assert docWriter.getNumDocsInRAM() == 0 :
           "calling startTransaction with buffered documents not supported";

    localRollbackSegmentInfos = (SegmentInfos) segmentInfos.clone();
    localAutoCommit = autoCommit;
    if (localAutoCommit) {

      if (infoStream != null)
        message("flush at startTransaction");

      flush();
      // Turn off auto-commit during our local transaction:
      autoCommit = false;
    } else
      // We must "protect" our files at this point from
      // deletion in case we need to rollback:
      deleter.incRef(segmentInfos, false);
  }

