  /** Merges the provided indexes into this index.
   * <p>After this completes, the index is optimized. </p>
   * <p>The provided IndexReaders are not closed.</p>

   * <p>See {@link #addIndexes(Directory[])} for
   * details on transactional semantics, temporary free
   * space required in the Directory, and non-CFS segments
   * on an Exception.</p>
   * @throws CorruptIndexException if the index is corrupt
   * @throws IOException if there is a low-level IO error
   */
  public synchronized void addIndexes(IndexReader[] readers)
    throws CorruptIndexException, IOException {

    ensureOpen();
    try {
      optimize();					  // start with zero or 1 seg

      final String mergedName = newSegmentName();
      SegmentMerger merger = new SegmentMerger(this, mergedName, null);

      SegmentInfo info;

      IndexReader sReader = null;
      try {
        if (segmentInfos.size() == 1){ // add existing index, if any
          sReader = SegmentReader.get(segmentInfos.info(0));
          merger.add(sReader);
        }

        for (int i = 0; i < readers.length; i++)      // add new indexes
          merger.add(readers[i]);

        boolean success = false;

        startTransaction();

        try {
          int docCount = merger.merge();                // merge 'em

          if(sReader != null) {
            sReader.close();
            sReader = null;
          }

          segmentInfos.setSize(0);                      // pop old infos & add new
          info = new SegmentInfo(mergedName, docCount, directory, false, true,
                                 -1, null, false);
          segmentInfos.addElement(info);

          success = true;

        } finally {
          if (!success) {
            if (infoStream != null)
              message("hit exception in addIndexes during merge");

            rollbackTransaction();
          } else {
            commitTransaction();
          }
        }
      } finally {
        if (sReader != null) {
          sReader.close();
        }
      }
    
      if (mergePolicy instanceof LogMergePolicy && getUseCompoundFile()) {

        boolean success = false;

        startTransaction();

        try {
          merger.createCompoundFile(mergedName + ".cfs");
          info.setUseCompoundFile(true);
        } finally {
          if (!success) {
            if (infoStream != null)
              message("hit exception building compound file in addIndexes during merge");

            rollbackTransaction();
          } else {
            commitTransaction();
          }
        }
      }
    } catch (OutOfMemoryError oom) {
      hitOOM = true;
      throw oom;
    }
  }

