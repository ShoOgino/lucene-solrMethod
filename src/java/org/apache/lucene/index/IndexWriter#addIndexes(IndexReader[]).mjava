  /** Merges the provided indexes into this index.
   * <p>After this completes, the index is optimized. </p>
   * <p>The provided IndexReaders are not closed.</p>
   */
  public synchronized void addIndexes(IndexReader[] readers)
    throws IOException {

    optimize();					  // start with zero or 1 seg

    final String mergedName = newSegmentName();
    SegmentMerger merger = new SegmentMerger(this, mergedName);

    final Vector segmentsToDelete = new Vector();
    IndexReader sReader = null;
    if (segmentInfos.size() == 1){ // add existing index, if any
        sReader = SegmentReader.get(segmentInfos.info(0));
        merger.add(sReader);
        segmentsToDelete.addElement(sReader);   // queue segment for deletion
    }

    for (int i = 0; i < readers.length; i++)      // add new indexes
      merger.add(readers[i]);

    int docCount = merger.merge();                // merge 'em

    segmentInfos.setSize(0);                      // pop old infos & add new
    SegmentInfo info = new SegmentInfo(mergedName, docCount, directory, false);
    segmentInfos.addElement(info);

    if(sReader != null)
        sReader.close();

    String segmentsInfosFileName = segmentInfos.getCurrentSegmentFileName();
    segmentInfos.write(directory);         // commit changes

    deleter.deleteFile(segmentsInfosFileName);    // delete old segments_N file
    deleter.deleteSegments(segmentsToDelete);     // delete now-unused segments

    if (useCompoundFile) {
      Vector filesToDelete = merger.createCompoundFile(mergedName + ".cfs");
      segmentsInfosFileName = segmentInfos.getCurrentSegmentFileName();
      info.setUseCompoundFile(true);
      segmentInfos.write(directory);     // commit again so readers know we've switched this segment to a compound file

      deleter.deleteFile(segmentsInfosFileName);  // delete old segments_N file
      deleter.deleteFiles(filesToDelete); // delete now unused files of segment 
    }
  }

