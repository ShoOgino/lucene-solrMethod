  /***
  private synchronized void testInvariants() {
    // index segments should decrease in size
    int maxSegLevel = 0;
    for (int i=segmentInfos.size()-1; i>=0; i--) {
      SegmentInfo si = segmentInfos.info(i);
      int segLevel = (si.docCount)/minMergeDocs;
      if (segLevel < maxSegLevel) {

        throw new RuntimeException("Segment #" + i + " is too small. " + segInfo());
      }
      maxSegLevel = Math.max(maxSegLevel,segLevel);
    }

    // check if merges needed
    long targetMergeDocs = minMergeDocs;
    int minSegment = segmentInfos.size();

    while (targetMergeDocs <= maxMergeDocs && minSegment>=0) {
      int mergeDocs = 0;
      while (--minSegment >= 0) {
        SegmentInfo si = segmentInfos.info(minSegment);
        if (si.docCount >= targetMergeDocs) break;
        mergeDocs += si.docCount;
      }

      if (mergeDocs >= targetMergeDocs) {
        throw new RuntimeException("Merge needed at level "+targetMergeDocs + " :"+segInfo());
      }

      targetMergeDocs *= mergeFactor;		  // increase target size
    }
  }

  private String segInfo() {
    StringBuffer sb = new StringBuffer("minMergeDocs="+minMergeDocs+" singleDocSegmentsCount="+singleDocSegmentsCount+" segsizes:");
    for (int i=0; i<segmentInfos.size(); i++) {
      sb.append(segmentInfos.info(i).docCount);
      sb.append(",");
    }
    return sb.toString();
  }
  ***/

  /*
   * Some operating systems (e.g. Windows) don't permit a file to be deleted
   * while it is opened for read (e.g. by another process or thread). So we
   * assume that when a delete fails it is because the file is open in another
   * process, and queue the file for subsequent deletion.
   */

  private final void deleteSegments(Vector segments) throws IOException {
    Vector deletable = new Vector();

    deleteFiles(readDeleteableFiles(), deletable); // try to delete deleteable

    for (int i = 0; i < segments.size(); i++) {
      SegmentReader reader = (SegmentReader)segments.elementAt(i);
      if (reader.directory() == this.directory)
        deleteFiles(reader.files(), deletable);	  // try to delete our files
      else
        deleteFiles(reader.files(), reader.directory()); // delete other files
    }

    writeDeleteableFiles(deletable);		  // note files we can't delete
  }

