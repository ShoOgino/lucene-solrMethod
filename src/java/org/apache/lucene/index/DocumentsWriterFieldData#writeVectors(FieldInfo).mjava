  /** Called once per field per document if term vectors
   *  are enabled, to write the vectors to *
   *  RAMOutputStream, which is then quickly flushed to
   *  * the real term vectors files in the Directory. */
  void writeVectors(FieldInfo fieldInfo) throws IOException {

    assert fieldInfo.storeTermVector;
    assert threadState.vectorFieldsInOrder(fieldInfo);

    threadState.vectorFieldNumbers[threadState.numVectorFields] = fieldInfo.number;
    threadState.vectorFieldPointers[threadState.numVectorFields] = threadState.tvfLocal.getFilePointer();
    threadState.numVectorFields++;

    final int numPostingsVectors = postingsVectorsUpto;
    final PostingVector[] postingsVectors = threadState.postingsVectors;

    final IndexOutput tvfLocal = threadState.tvfLocal;

    threadState.tvfLocal.writeVInt(numPostingsVectors);
    byte bits = 0x0;
    if (doVectorPositions)
      bits |= TermVectorsReader.STORE_POSITIONS_WITH_TERMVECTOR;
    if (doVectorOffsets) 
      bits |= TermVectorsReader.STORE_OFFSET_WITH_TERMVECTOR;
    threadState.tvfLocal.writeByte(bits);

    threadState.doVectorSort(postingsVectors, numPostingsVectors);

    int encoderUpto = 0;
    int lastTermBytesCount = 0;

    final ByteSliceReader reader = vectorSliceReader;
    final char[][] charBuffers = threadState.charPool.buffers;

    for(int j=0;j<numPostingsVectors;j++) {
      final PostingVector vector = postingsVectors[j];
      Posting posting = vector.p;
      final int freq = posting.docFreq;
          
      final char[] text2 = charBuffers[posting.textStart >> DocumentsWriter.CHAR_BLOCK_SHIFT];
      final int start2 = posting.textStart & DocumentsWriter.CHAR_BLOCK_MASK;

      // We swap between two encoders to save copying
      // last Term's byte array
      final UnicodeUtil.UTF8Result utf8Result = threadState.utf8Results[encoderUpto];

      // TODO: we could do this incrementally
      UnicodeUtil.UTF16toUTF8(text2, start2, utf8Result);
      final int termBytesCount = utf8Result.length;

      // TODO: UTF16toUTF8 could tell us this prefix
      // Compute common prefix between last term and
      // this term
      int prefix = 0;
      if (j > 0) {
        final byte[] lastTermBytes = threadState.utf8Results[1-encoderUpto].result;
        final byte[] termBytes = threadState.utf8Results[encoderUpto].result;
        while(prefix < lastTermBytesCount && prefix < termBytesCount) {
          if (lastTermBytes[prefix] != termBytes[prefix])
            break;
          prefix++;
        }
      }
      encoderUpto = 1-encoderUpto;
      lastTermBytesCount = termBytesCount;

      final int suffix = termBytesCount - prefix;
      tvfLocal.writeVInt(prefix);
      tvfLocal.writeVInt(suffix);
      tvfLocal.writeBytes(utf8Result.result, prefix, suffix);
      tvfLocal.writeVInt(freq);

      if (doVectorPositions) {
        reader.init(threadState.vectorsPool, vector.posStart, vector.posUpto);
        reader.writeTo(tvfLocal);
      }

      if (doVectorOffsets) {
        reader.init(threadState.vectorsPool, vector.offsetStart, vector.offsetUpto);
        reader.writeTo(tvfLocal);
      }
    }
  }

