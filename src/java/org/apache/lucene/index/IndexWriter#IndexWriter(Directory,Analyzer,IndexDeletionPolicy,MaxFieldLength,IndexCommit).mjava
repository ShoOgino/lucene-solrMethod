  /**
   * Expert: constructs an IndexWriter on specific commit
   * point, with a custom {@link IndexDeletionPolicy}, for
   * the index in <code>d</code>.  Text will be analyzed
   * with <code>a</code>.
   *
   * <p> This is only meaningful if you've used a {@link
   * IndexDeletionPolicy} in that past that keeps more than
   * just the last commit.
   * 
   * <p>This operation is similar to {@link #rollback()},
   * except that method can only rollback what's been done
   * with the current instance of IndexWriter since its last
   * commit, whereas this method can rollback to an
   * arbitrary commit point from the past, assuming the
   * {@link IndexDeletionPolicy} has preserved past
   * commits.
   *
   * <p><b>NOTE</b>: autoCommit (see <a
   * href="#autoCommit">above</a>) is set to false with this
   * constructor.
   *
   * @param d the index directory
   * @param a the analyzer to use
   * @param deletionPolicy see <a href="#deletionPolicy">above</a>
   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.
   * @param commit which commit to open
   * @throws CorruptIndexException if the index is corrupt
   * @throws LockObtainFailedException if another writer
   *  has this index open (<code>write.lock</code> could not
   *  be obtained)
   * @throws IOException if the directory cannot be read/written to, or
   *  if it does not exist and <code>create</code> is
   *  <code>false</code> or if there is any other low-level
   *  IO error
   */
  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)
       throws CorruptIndexException, LockObtainFailedException, IOException {
    init(d, a, false, false, deletionPolicy, false, mfl.getLimit(), null, commit);
  }

