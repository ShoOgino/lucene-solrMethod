  /**
   * Merges the named range of segments, replacing them in the stack with a
   * single segment.
   */
  private final int mergeSegments(SegmentInfos sourceSegments, int minSegment, int end)
    throws IOException {

    final String mergedName = newSegmentName();
    if (infoStream != null) infoStream.print("merging segments");
    SegmentMerger merger = new SegmentMerger(this, mergedName);
    
    final Vector segmentsToDelete = new Vector();
    for (int i = minSegment; i < end; i++) {
      SegmentInfo si = sourceSegments.info(i);
      if (infoStream != null)
        infoStream.print(" " + si.name + " (" + si.docCount + " docs)");
      IndexReader reader = SegmentReader.get(si);
      merger.add(reader);
      if ((reader.directory() == this.directory) || // if we own the directory
          (reader.directory() == this.ramDirectory))
        segmentsToDelete.addElement(reader);   // queue segment for deletion
    }

    int mergedDocCount = merger.merge();

    if (infoStream != null) {
      infoStream.println(" into "+mergedName+" ("+mergedDocCount+" docs)");
    }

    SegmentInfo newSegment = new SegmentInfo(mergedName, mergedDocCount,
                                             directory, false);
    if (sourceSegments == ramSegmentInfos) {
      sourceSegments.removeAllElements();
      segmentInfos.addElement(newSegment);
    } else {
      for (int i = end-1; i > minSegment; i--)     // remove old infos & add new
        sourceSegments.remove(i);
      segmentInfos.set(minSegment, newSegment);
    }

    // close readers before we attempt to delete now-obsolete segments
    merger.closeReaders();

    String segmentsInfosFileName = segmentInfos.getCurrentSegmentFileName();
    segmentInfos.write(directory);     // commit before deleting

    deleter.deleteFile(segmentsInfosFileName);    // delete old segments_N file
    deleter.deleteSegments(segmentsToDelete);     // delete now-unused segments

    if (useCompoundFile) {
      Vector filesToDelete = merger.createCompoundFile(mergedName + ".cfs");

      segmentsInfosFileName = segmentInfos.getCurrentSegmentFileName();
      newSegment.setUseCompoundFile(true);
      segmentInfos.write(directory);     // commit again so readers know we've switched this segment to a compound file

      deleter.deleteFile(segmentsInfosFileName);  // delete old segments_N file
      deleter.deleteFiles(filesToDelete);  // delete now-unused segments
    }

    return mergedDocCount;
  }

