  /** Adds a custom AttributeImpl instance with one or more Attribute interfaces. */
  public void addAttributeImpl(final AttributeImpl att) {
    final Class clazz = att.getClass();
    if (attributeImpls.containsKey(clazz)) return;
    LinkedList foundInterfaces;
    synchronized(knownImplClasses) {
      foundInterfaces = (LinkedList) knownImplClasses.get(clazz);
      if (foundInterfaces == null) {
        knownImplClasses.put(clazz, foundInterfaces=new LinkedList());
        // find all interfaces that this attribute instance implements
        // and that extend the Attribute interface
        Class actClazz = clazz;
        do {
          Class[] interfaces = actClazz.getInterfaces();
          for (int i = 0; i < interfaces.length; i++) {
            final Class curInterface = interfaces[i];
            if (Attribute.class.isAssignableFrom(curInterface)) {
              foundInterfaces.add(curInterface);
            }
          }
          actClazz = actClazz.getSuperclass();
        } while (actClazz != null);
      }
    }
    
    // add all interfaces of this AttributeImpl to the maps
    for (Iterator it = foundInterfaces.iterator(); it.hasNext(); ) {
      final Class curInterface = (Class) it.next();
      // Attribute is a superclass of this interface
      if (!attributes.containsKey(curInterface)) {
        // invalidate state to force recomputation in captureState()
        this.currentState = null;
        attributes.put(curInterface, att);
        attributeImpls.put(clazz, att);
      }
    }
  }

