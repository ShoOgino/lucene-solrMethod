  /**
   * Creates a last-recently-used cache with the specified size. 
   */
  public SimpleLRUCache(final int cacheSize) {
    super(new LinkedHashMap<K,V>((int) Math.ceil(cacheSize / LOADFACTOR) + 1, LOADFACTOR, true) {
      @Override
      protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
        return size() > cacheSize;
      }
    });
  }

