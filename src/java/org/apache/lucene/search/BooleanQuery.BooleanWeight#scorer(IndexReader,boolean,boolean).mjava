    public Scorer scorer(IndexReader reader, boolean scoreDocsInOrder, boolean topScorer)
        throws IOException {
      List required = new ArrayList();
      List prohibited = new ArrayList();
      List optional = new ArrayList();
      for (Iterator wIter = weights.iterator(), cIter = clauses.iterator(); wIter.hasNext();) {
        QueryWeight w = (QueryWeight) wIter.next();
        BooleanClause c = (BooleanClause) cIter.next();
        Scorer subScorer = w.scorer(reader, true, false);
        if (subScorer == null) {
          return null;
        } else if (c.isRequired()) {
          required.add(subScorer);
        } else if (c.isProhibited()) {
          prohibited.add(subScorer);
        } else {
          optional.add(subScorer);
        }
      }
      
      // Check if we can return a BooleanScorer
      scoreDocsInOrder |= !allowDocsOutOfOrder; // until it is removed, factor in the static setting.
      if (!scoreDocsInOrder && topScorer && required.size() == 0 && prohibited.size() < 32) {
        return new BooleanScorer(similarity, minNrShouldMatch, optional, prohibited);
      }
      
      // Return a BooleanScorer2
      return new BooleanScorer2(similarity, minNrShouldMatch, required, prohibited, optional);
    }

