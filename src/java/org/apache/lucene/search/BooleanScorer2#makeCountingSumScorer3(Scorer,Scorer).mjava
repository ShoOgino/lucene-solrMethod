  /** Returns the scorer to be used for match counting and score summing.
   * Uses the arguments and prohibitedScorers.
   * @param requiredCountingSumScorer A required scorer already built.
   * @param optionalCountingSumScorer An optional scorer already built.
   */
  private Scorer makeCountingSumScorer3(
      Scorer requiredCountingSumScorer,
      Scorer optionalCountingSumScorer)
  {
    if (prohibitedScorers.size() == 0) { // no prohibited
      return new ReqOptSumScorer(requiredCountingSumScorer,
                                 optionalCountingSumScorer);
    } else if (prohibitedScorers.size() == 1) { // 1 prohibited
      return new ReqOptSumScorer(
                    new ReqExclScorer(requiredCountingSumScorer,
                                      (Scorer) prohibitedScorers.get(0)),  // not match counting
                    optionalCountingSumScorer);
    } else { // more prohibited
      return new ReqOptSumScorer(
                    new ReqExclScorer(
                          requiredCountingSumScorer,
                          new DisjunctionSumScorer(prohibitedScorers)), // score unused. not match counting
                    optionalCountingSumScorer);
    }
  }

