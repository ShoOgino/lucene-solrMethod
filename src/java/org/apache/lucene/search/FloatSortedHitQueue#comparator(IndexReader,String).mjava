	/**
	 * Returns a comparator for sorting hits according to a field containing floats.
	 * @param reader  Index to use.
	 * @param field  Field containg float values.
	 * @return  Comparator for sorting hits.
	 * @throws IOException If an error occurs reading the index.
	 */
	static ScoreDocLookupComparator comparator (final IndexReader reader, final String field)
	throws IOException {
		return new ScoreDocLookupComparator () {

			protected final float[] fieldOrder = generateSortIndex();

			protected final float[] generateSortIndex()
			throws IOException {

				float[] retArray = new float[reader.maxDoc()];

				TermEnum enumerator = reader.terms (new Term (field, ""));
				TermDocs termDocs = reader.termDocs ();
				if (enumerator.term () == null) {
					throw new RuntimeException ("no terms in field " + field);
				}

				try {
					do {
						Term term = enumerator.term ();
						if (term.field () != field) break;
						float termval = Float.parseFloat (term.text());
						termDocs.seek (enumerator);
						while (termDocs.next ()) {
							retArray[termDocs.doc ()] = termval;
						}
					} while (enumerator.next ());
				} finally {
					enumerator.close ();
					termDocs.close ();
				}

				return retArray;
			}

			public final int compare (final ScoreDoc i, final ScoreDoc j) {
				final float fi = fieldOrder[i.doc];
				final float fj = fieldOrder[j.doc];
				if (fi < fj) return -1;
				if (fi > fj) return 1;
				return 0;
			}

			public final int compareReverse (final ScoreDoc i, final ScoreDoc j) {
				final float fi = fieldOrder[i.doc];
				final float fj = fieldOrder[j.doc];
				if (fi > fj) return -1;
				if (fi < fj) return 1;
				return 0;
			}

			public final boolean sizeMatches (final int n) {
				return fieldOrder.length == n;
			}

			public Object sortValue (final ScoreDoc i) {
				return new Float (fieldOrder[i.doc]);
			}

			public int sortType() {
				return SortField.FLOAT;
			}
		};
	}

