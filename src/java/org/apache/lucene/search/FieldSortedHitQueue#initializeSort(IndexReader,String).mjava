    /**
     * Initializes the cache of sort information.  <code>fieldCache</code> is queried
     * to see if it has the term information for the given field.
     * If so, and if the reader still has the same value for maxDoc()
     * (note that we assume new IndexReaders are caught during the
     * constructor), the existing data is used.  If not, all the term values
     * for the given field are fetched.  The value of the term is assumed
     * to indicate the sort order for any documents containing the term.  Documents
     * should only have one term in the given field.  Multiple documents
     * can share the same term if desired, in which case they will be
	 * considered equal during the sort.
     * @param reader  The document index.
     * @param field   The field to sort by.
     * @throws IOException  If createComparator(IndexReader,String) fails - usually caused by the term enumerator failing.
     */
    protected final ScoreDocComparator initializeSort (IndexReader reader, String field)
    throws IOException {

		ScoreDocLookupComparator comparer = (ScoreDocLookupComparator) fieldCache.get (field);
		if (comparer == null || !comparer.sizeMatches(reader.maxDoc())) {
			comparer = createComparator (reader, field);
            fieldCache.put (field, comparer);
		}
		return comparer;
    }

