  /**
   * Computes a score factor for a simple term and returns an explanation
   * for that score factor.
   * 
   * <p>
   * The default implementation uses:
   * 
   * <pre>
   * idf(searcher.docFreq(term), searcher.maxDoc());
   * </pre>
   * 
   * Note that {@link Searcher#maxDoc()} is used instead of
   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also 
   * {@link Searcher#docFreq(Term)} is used, and when the latter 
   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.
   * In addition, {@link Searcher#maxDoc()} is more efficient to compute
   *   
   * @param term the term in question
   * @param searcher the document collection being searched
   * @return an IDFExplain object that includes both an idf score factor 
             and an explanation for the term.
   * @throws IOException
   */
  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {
    if(supportedMethods.overridesTermIDF) {
      final float idf = idf(term, searcher);
      return new IDFExplanation() {
        //@Override
        public float getIdf() {
          return idf;
        }
        //@Override
        public String explain() {
          return "Inexplicable";
        }
      };
    }
    final int df = searcher.docFreq(term);
    final int max = searcher.maxDoc();
    final float idf = idf(df, max);
    return new IDFExplanation() {
        //@Override
        public String explain() {
          return "idf(docFreq=" + df +
          ", maxDocs=" + max + ")";
        }
        //@Override
        public float getIdf() {
          return idf;
        }};
   }

