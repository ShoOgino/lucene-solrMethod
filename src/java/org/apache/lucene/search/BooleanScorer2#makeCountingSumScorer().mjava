  /** Returns the scorer to be used for match counting and score summing.
   * Uses requiredScorers, optionalScorers and prohibitedScorers.
   */
  private Scorer makeCountingSumScorer()
  // each scorer counted as a single matcher
  {
    if (requiredScorers.size() == 0) {
      if (optionalScorers.size() == 0) {
        return new NonMatchingScorer();  // only prohibited scorers
      } else if (optionalScorers.size() == 1) {
        return makeCountingSumScorer2( // the only optional scorer is required
                  new SingleMatchScorer((Scorer) optionalScorers.get(0)),
                  new ArrayList()); // no optional scorers left
      } else { // more than 1 optionalScorers, no required scorers
        return makeCountingSumScorer2( // at least one optional scorer is required
                  countingDisjunctionSumScorer(optionalScorers), 
                  new ArrayList()); // no optional scorers left
      }
    } else if (requiredScorers.size() == 1) { // 1 required
      return makeCountingSumScorer2(
                  new SingleMatchScorer((Scorer) requiredScorers.get(0)),
                  optionalScorers);
    } else { // more required scorers
      return makeCountingSumScorer2(
                  countingConjunctionSumScorer(requiredScorers),
                  optionalScorers);
    }
  }

