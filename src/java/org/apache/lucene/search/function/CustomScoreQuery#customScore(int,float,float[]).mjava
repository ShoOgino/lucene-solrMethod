  /**
   * Compute a custom score by the subQuery score and a number of 
   * ValueSourceQuery scores.
   * <p> 
   * Subclasses can override this method to modify the custom score.  
   * <p>
   * If your custom scoring is different than the default herein you 
   * should override at least one of the two customScore() methods.
   * If the number of ValueSourceQueries is always &lt; 2 it is 
   * sufficient to override the other 
   * {@link #customScore(int, float, float) costomScore()} 
   * method, which is simpler. 
   * <p>
   * The default computation herein is:
   * <pre>
   *     ModifiedScore = valSrcScore * subQueryScore[0] * subQueryScore[1] * ...
   * </pre>
   * 
   * @param doc id of scored doc. 
   * @param subQueryScore score of that doc by the subQuery.
   * @param valSrcScores score of that doc by the ValueSourceQuery.
   * @return custom score.
   */
  public float customScore(int doc, float subQueryScore, float valSrcScores[]) {
	  if(valSrcScores.length == 1) {
	    return customScore(doc, subQueryScore, valSrcScores[0]);
	  }
    if (valSrcScores.length == 0) {
	    return customScore(doc, subQueryScore, 1);
	  }
    float score = subQueryScore;
    for(int i = 0; i < valSrcScores.length; i++) {
      score *= valSrcScores[i];
    }
    return score;
  }

