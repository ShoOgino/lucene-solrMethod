  /**
   * Executes each {@link Searchable}'s docFreq() in its own thread and waits for each search to complete and merge
   * the results back together.
   */
  @Override
  public int docFreq(final Term term) throws IOException {
    @SuppressWarnings("unchecked") final Future<Integer>[] searchThreads = new Future[searchables.length];
    for (int i = 0; i < searchables.length; i++) { // search each searchable
      final Searchable searchable = searchables[i];
      searchThreads[i] = executor.submit(new Callable<Integer>() {
        public Integer call() throws IOException {
          return Integer.valueOf(searchable.docFreq(term));
        }
      });
    }
    final CountDocFreq func = new CountDocFreq();
    foreach(func, Arrays.asList(searchThreads));
    return func.docFreq;
  }

