  /**
   * Creates a hit queue sorted by the given list of fields.
   * @param fields SortField array we are sorting by in
   *   priority order (highest priority first); cannot be <code>null</code> or empty
   * @param size  The number of hits to retain.  Must be
   *   greater than zero.
   * @param subReaders Array of IndexReaders we will search,
   *   in order that they will be searched
   * @throws IOException
   */
  public FieldValueHitQueue(SortField[] fields, int size, IndexReader[] subReaders) throws IOException {
    numComparators = fields.length;
    comparators = new FieldComparator[numComparators];
    reverseMul = new int[numComparators];

    if (fields.length == 0) {
      throw new IllegalArgumentException("Sort must contain at least one field");
    }

    this.fields = fields;
    for (int i=0; i<numComparators; ++i) {
      SortField field = fields[i];

      // AUTO is resolved before we are called
      assert field.getType() != SortField.AUTO;

      reverseMul[i] = field.reverse ? -1 : 1;
      comparators[i] = field.getComparator(subReaders, size, i, field.reverse);
    }

    if (numComparators == 1) {
      comparator1 = comparators[0];
      reverseMul1 = reverseMul[0];
    } else {
      comparator1 = null;
      reverseMul1 = 0;
    }

    initialize(size);
  }

