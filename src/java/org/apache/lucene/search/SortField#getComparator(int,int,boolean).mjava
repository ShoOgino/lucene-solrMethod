  /** Returns the {@link FieldComparator} to use for sorting.
   * @param numHits number of top hits the queue will store
   * @param sortPos position of this SortField within {@link
   *   Sort}.  The comparator is primary if sortPos==0,
   *   secondary if sortPos==1, etc.  Some comparators can
   *   optimize themselves when they are the primary sort.
   * @param reversed True if the SortField is reversed
   * @return {@link FieldComparator} to use when sorting
   */
  protected FieldComparator getComparator(final int numHits, final int sortPos, final boolean reversed) throws IOException {

    if (locale != null) {
      // TODO: it'd be nice to allow FieldCache.getStringIndex
      // to optionally accept a Locale so sorting could then use
      // the faster StringComparator impls
      return new FieldComparator.StringComparatorLocale(numHits, field, locale);
    }

    switch (type) {
    case SortField.SCORE:
      return new FieldComparator.RelevanceComparator(numHits);

    case SortField.DOC:
      return new FieldComparator.DocComparator(numHits);

    case SortField.INT:
      return new FieldComparator.IntComparator(numHits, field, parser);

    case SortField.FLOAT:
      return new FieldComparator.FloatComparator(numHits, field, parser);

    case SortField.LONG:
      return new FieldComparator.LongComparator(numHits, field, parser);

    case SortField.DOUBLE:
      return new FieldComparator.DoubleComparator(numHits, field, parser);

    case SortField.BYTE:
      return new FieldComparator.ByteComparator(numHits, field, parser);

    case SortField.SHORT:
      return new FieldComparator.ShortComparator(numHits, field, parser);

    case SortField.CUSTOM:
      assert factory == null && comparatorSource != null;
      return comparatorSource.newComparator(field, numHits, sortPos, reversed);

    case SortField.STRING:
      return new FieldComparator.StringOrdValComparator(numHits, field, sortPos, reversed);

    case SortField.STRING_VAL:
      return new FieldComparator.StringValComparator(numHits, field);
        
    default:
      throw new IllegalStateException("Illegal sort type: " + type);
    }
  }

