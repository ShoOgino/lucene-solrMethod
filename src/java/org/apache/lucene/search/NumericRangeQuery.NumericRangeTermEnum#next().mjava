    /** Increments the enumeration to the next element.  True if one exists. */
    @Override
    public boolean next() throws IOException {
      // if a current term exists, the actual enum is initialized:
      // try change to next term, if no such term exists, fall-through
      if (currentTerm != null) {
        assert actualEnum!=null;
        if (actualEnum.next()) {
          currentTerm = actualEnum.term();
          if (termCompare(currentTerm)) return true;
        }
      }
      // if all above fails, we go forward to the next enum,
      // if one is available
      currentTerm = null;
      if (rangeBounds.size() < 2) return false;
      // close the current enum and read next bounds
      if (actualEnum != null) {
        actualEnum.close();
        actualEnum = null;
      }
      final String lowerBound = rangeBounds.removeFirst();
      this.currentUpperBound = rangeBounds.removeFirst();
      // this call recursively uses next(), if no valid term in
      // next enum found.
      // if this behavior is changed/modified in the superclass,
      // this enum will not work anymore!
      setEnum(reader.terms(new Term(field, lowerBound)));
      return (currentTerm != null);
    }

