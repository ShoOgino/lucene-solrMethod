  /** Creates a sort, possibly in reverse, by terms in the given field, parsed
   * to numeric values using a custom {@link FieldCache.Parser}.
   * @param field  Name of field to sort by.  Must not be null.
   * @param parser Instance of a {@link FieldCache.Parser},
   *  which must subclass one of the existing numeric
   *  parsers from {@link FieldCache} or {@link
   *  ExtendedFieldCache}. Sort type is inferred by testing
   *  which numeric parser the parser subclasses.
   * @param reverse True if natural order should be reversed.
   * @throws IllegalArgumentException if the parser fails to
   *  subclass an existing numeric parser, or field is null
   */
  public SortField (String field, FieldCache.Parser parser, boolean reverse) {

    if (parser instanceof FieldCache.IntParser) this.type=INT;
    else if (parser instanceof FieldCache.FloatParser) this.type=FLOAT;
    else if (parser instanceof FieldCache.ShortParser) this.type=SHORT;
    else if (parser instanceof FieldCache.ByteParser) this.type=BYTE;
    else if (parser instanceof ExtendedFieldCache.LongParser) this.type=LONG;
    else if (parser instanceof ExtendedFieldCache.DoubleParser) this.type=DOUBLE;
    else
      throw new IllegalArgumentException("Parser instance does not subclass existing numeric parser from FieldCache or ExtendedFieldCache (got" + parser + ")");

    initFieldType(field, type);

    this.reverse = reverse;
    this.parser = parser;
  }

