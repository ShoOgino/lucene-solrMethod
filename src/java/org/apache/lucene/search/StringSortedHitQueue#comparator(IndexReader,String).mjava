	/**
	 * Returns a comparator for sorting hits according to a field containing strings.
	 * @param reader  Index to use.
	 * @param field  Field containg string values.
	 * @return  Comparator for sorting hits.
	 * @throws IOException If an error occurs reading the index.
	 */
	static ScoreDocLookupComparator comparator (final IndexReader reader, final String field)
	throws IOException {
		return new ScoreDocLookupComparator() {

			/** The sort information being used by this instance */
			protected final int[] fieldOrder = generateSortIndex();

			private final int[] generateSortIndex()
			throws IOException {

				final int[] retArray = new int[reader.maxDoc()];

				TermEnum enumerator = reader.terms (new Term (field, ""));
				TermDocs termDocs = reader.termDocs();
				if (enumerator.term() == null) {
					throw new RuntimeException ("no terms in field " + field);
				}

				// NOTE: the contract for TermEnum says the
				// terms will be in natural order (which is
				// ordering by field name, term text).  The
				// contract for TermDocs says the docs will
				// be ordered by document number.  So the
				// following loop will automatically sort the
				// terms in the correct order.

				try {
					int t = 0;  // current term number
					do {
						Term term = enumerator.term();
						if (term.field() != field) break;
						t++;
						termDocs.seek (enumerator);
						while (termDocs.next()) {
							retArray[termDocs.doc()] = t;
						}
					} while (enumerator.next());
				} finally {
					enumerator.close();
					termDocs.close();
				}

				return retArray;
			}

			public final int compare (final ScoreDoc i, final ScoreDoc j) {
				final int fi = fieldOrder[i.doc];
				final int fj = fieldOrder[j.doc];
				if (fi < fj) return -1;
				if (fi > fj) return 1;
				return 0;
			}

			public final int compareReverse (final ScoreDoc i, final ScoreDoc j) {
				final int fi = fieldOrder[i.doc];
				final int fj = fieldOrder[j.doc];
				if (fi > fj) return -1;
				if (fi < fj) return 1;
				return 0;
			}

			public final boolean sizeMatches (final int n) {
				return fieldOrder.length == n;
			}

			public Object sortValue (final ScoreDoc i) {
				return new Integer(fieldOrder[i.doc]);
			}

			public int sortType() {
				return SortField.INT;
			}
		};
	}

