  /** Returns the scorer to be used for match counting and score summing.
   * Uses the arguments and prohibitedScorers.
   * @param requiredCountingSumScorer A required scorer already built.
   * @param optionalScorers A list of optional scorers, possibly empty.
   */
  private Scorer makeCountingSumScorer2(
      Scorer requiredCountingSumScorer,
      List optionalScorers) // not match counting
  {
    if (optionalScorers.size() == 0) { // no optional
      if (prohibitedScorers.size() == 0) { // no prohibited
        return requiredCountingSumScorer;
      } else if (prohibitedScorers.size() == 1) { // no optional, 1 prohibited
        return new ReqExclScorer(
                      requiredCountingSumScorer,
                      (Scorer) prohibitedScorers.get(0)); // not match counting
      } else { // no optional, more prohibited
        return new ReqExclScorer(
                      requiredCountingSumScorer,
                      new DisjunctionSumScorer(prohibitedScorers)); // score unused. not match counting
      }
    } else if (optionalScorers.size() == 1) { // 1 optional
      return makeCountingSumScorer3(
                      requiredCountingSumScorer,
                      new SingleMatchScorer((Scorer) optionalScorers.get(0)));
   } else { // more optional
      return makeCountingSumScorer3(
                      requiredCountingSumScorer,
                      countingDisjunctionSumScorer(optionalScorers));
    }
  }

