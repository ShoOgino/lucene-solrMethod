	/**
	 * Creates a hit queue sorted by the given list of fields.
	 * @param reader  Index to use.
	 * @param fields Field names, in priority order (highest priority first).  Cannot be <code>null</code> or empty.
	 * @param size  The number of hits to retain.  Must be greater than zero.
	 * @throws IOException
	 */
	MultiFieldSortedHitQueue (IndexReader reader, SortField[] fields, int size)
	throws IOException {
		final int n = fields.length;
		comparators = new ScoreDocComparator[n];
		this.fields = new SortField[n];
		for (int i=0; i<n; ++i) {
			String fieldname = fields[i].getField();
			comparators[i] = FieldSortedHitQueue.getCachedComparator (reader, fieldname, fields[i].getType());
			this.fields[i] = new SortField (fieldname, comparators[i].sortType(), fields[i].getReverse());
		}
		initialize (size);
	}

