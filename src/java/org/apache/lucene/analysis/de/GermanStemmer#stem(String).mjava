	/**
	 * Stemms the given term to an unique <tt>discriminator</tt>.
	 *
	 * @param word  The term that should be stemmed.
	 * @return      Discriminator for <tt>term</tt>
	 */
	protected String stem( String term ) {
		if ( !isStemmable( term ) ) {
			return term;
		}
		// Mark a possible noun.
		if ( Character.isUpperCase( term.charAt( 0 ) ) ) {
			uppercase = true;
		}
		// Use lowercase for medium stemming.
		term = term.toLowerCase();
		// Reset the StringBuffer.
		sb.delete( 0, sb.length() );
		sb.insert( 0, term );
		sb = substitute( sb );
		// Nouns have only seven possible suffixes.
		if ( uppercase && sb.length() > 3 ) {
			if ( sb.substring( sb.length() - 3, sb.length() ).equals( "ern" ) ) {
				sb.delete( sb.length() - 3, sb.length() );
			}
			else if ( sb.substring( sb.length() - 2, sb.length() ).equals( "en" ) ) {
				sb.delete( sb.length() - 2, sb.length() );
			}
			else if ( sb.substring( sb.length() - 2, sb.length() ).equals( "er" ) ) {
				sb.delete( sb.length() - 2, sb.length() );
			}
			else if ( sb.substring( sb.length() - 2, sb.length() ).equals( "es" ) ) {
				sb.delete( sb.length() - 2, sb.length() );
			}
			else if ( sb.charAt( sb.length() - 1 ) == 'e' ) {
				sb.deleteCharAt( sb.length() - 1 );
			}
			else if ( sb.charAt( sb.length() - 1 ) == 'n' ) {
				sb.deleteCharAt( sb.length() - 1 );
			}
			else if ( sb.charAt( sb.length() - 1 ) == 's' ) {
				sb.deleteCharAt( sb.length() - 1 );
			}
			// Additional step for female plurals of professions and inhabitants.
			if ( sb.length() > 5 && sb.substring( sb.length() - 3, sb.length() ).equals( "erin*" ) ) {
				sb.deleteCharAt( sb.length() -1 );
			}
			// Additional step for irregular plural nouns like "Matrizen -> Matrix".
			if ( sb.charAt( sb.length() - 1 ) == ( 'z' ) ) {
				sb.setCharAt( sb.length() - 1, 'x' );
			}
		}
		// Check the 7 "base" suffixes: "e", "s", "n", "t", "em", "er", "nd" for all
		// other terms. Adjectives, Verbs and Adverbs have a total of 52 different
		// possible suffixes.
		else {
			// Strip base suffixes as long as enough characters remain.
			boolean doMore = true;
			while ( sb.length() > 3 && doMore ) {
				if ( ( sb.length() + substCount > 5 ) && sb.substring( sb.length() - 2, sb.length() ).equals( "nd" ) ) {
					sb.delete( sb.length() - 2, sb.length() );
				}
				else if ( ( sb.length() + substCount > 4 ) && sb.substring( sb.length() - 2, sb.length() ).equals( "er" ) ) {
					sb.delete( sb.length() - 2, sb.length() );
				}
				else if ( ( sb.length() + substCount > 4 ) && sb.substring( sb.length() - 2, sb.length() ).equals( "em" ) ) {
					sb.delete( sb.length() - 2, sb.length() );
				}
				else if ( sb.charAt( sb.length() - 1 ) == 't' ) {
					sb.deleteCharAt( sb.length() - 1 );
				}
				else if ( sb.charAt( sb.length() - 1 ) == 'n' ) {
					sb.deleteCharAt( sb.length() - 1 );
				}
				else if ( sb.charAt( sb.length() - 1 ) == 's' ) {
					sb.deleteCharAt( sb.length() - 1 );
				}
				else if ( sb.charAt( sb.length() - 1 ) == 'e' ) {
					sb.deleteCharAt( sb.length() - 1 );
				}
				else {
					doMore = false;
				}
			}
		}
		if ( !uppercase ) {
			sb = removeParticleDenotion( sb );
		}
		sb = resubstitute( sb );
		return sb.toString();
	}

