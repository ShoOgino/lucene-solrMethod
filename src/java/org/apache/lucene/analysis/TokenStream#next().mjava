  /**
   * Returns the next {@link Token} in the stream, or null at EOS.
   * 
   * @deprecated The returned Token is a "full private copy" (not re-used across
   *             calls to {@link #next()}) but will be slower than calling
   *             {@link #next(Token)} or using the new {@link #incrementToken()}
   *             method with the new {@link AttributeSource} API.
   */
  public Token next() throws IOException {
    if (tokenWrapper == null)
      throw new UnsupportedOperationException("This TokenStream only supports the new Attributes API.");
    
    final Token nextToken;
    if (supportedMethods.hasIncrementToken) {
      final Token savedDelegate = tokenWrapper.delegate;
      tokenWrapper.delegate = new Token();
      nextToken = incrementToken() ? tokenWrapper.delegate : null;
      tokenWrapper.delegate = savedDelegate;
    } else {
      assert supportedMethods.hasReusableNext;
      nextToken = next(new Token());
    }
    
    if (nextToken != null) {
      Payload p = nextToken.getPayload();
      if (p != null) {
        nextToken.setPayload((Payload) p.clone());
      }
    }
    return nextToken;
  }

