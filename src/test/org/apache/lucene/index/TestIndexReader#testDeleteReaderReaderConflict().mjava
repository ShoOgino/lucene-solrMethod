    public void testDeleteReaderReaderConflict()
    {
        Directory dir = new RAMDirectory();
        IndexWriter writer = null;
        IndexReader reader1 = null;
        IndexReader reader2 = null;
        Searcher searcher = null;
        Hits hits = null;
        Term searchTerm1 = new Term("content", "aaa");
        Term searchTerm2 = new Term("content", "bbb");

        try
        {
            //  add 100 documents with term : aaa
            //  add 100 documents with term : bbb
            //  add 100 documents with term : ccc
            writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);
            for (int i = 0; i < 100; i++)
            {
                addDoc(writer, "aaa");
                addDoc(writer, "bbb");
                addDoc(writer, "ccc");
            }
            writer.optimize();
            writer.close();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }

        try
        {
            reader1 = IndexReader.open(dir);
            reader2 = IndexReader.open(dir);

            // delete documents containing term: aaa
            reader2.delete(searchTerm1);
            reader2.close();

            // delete documents containing term: bbb
            reader1.delete(searchTerm2);
            reader1.close();
        }
        catch (IOException e)
        {
            try
            {
                // if reader throws IOException try once more to delete documents with a new reader
                reader1.close();
                reader1 = IndexReader.open(dir);
                reader1.delete(searchTerm2);
                reader1.close();
            }
            catch (IOException e1)
            {
                e1.printStackTrace();
            }
        }

        try
        {
            searcher = new IndexSearcher(dir);
            hits = searcher.search(new TermQuery(searchTerm1));
            assertEquals(0, hits.length());
            hits = searcher.search(new TermQuery(searchTerm2));
            assertEquals(0, hits.length());
            searcher.close();
        }
        catch (IOException e1)
        {
            e1.printStackTrace();
        }
    }

