  public void testReopenOnCommit() throws Throwable {
    Directory dir = new MockRAMDirectory();
    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), new KeepAllCommits(), IndexWriter.MaxFieldLength.UNLIMITED);
    for(int i=0;i<4;i++) {
      Document doc = new Document();
      doc.add(new Field("id", ""+i, Field.Store.NO, Field.Index.NOT_ANALYZED));
      writer.addDocument(doc);
      writer.commit(""+i);
    }
    for(int i=0;i<4;i++) {
      writer.deleteDocuments(new Term("id", ""+i));
      writer.commit(""+(4+i));
    }
    writer.close();

    IndexReader r = IndexReader.open(dir);
    assertEquals(0, r.numDocs());
    assertEquals(4, r.maxDoc());

    Iterator it = IndexReader.listCommits(dir).iterator();
    while(it.hasNext()) {
      IndexCommit commit = (IndexCommit) it.next();
      IndexReader r2 = r.reopen(commit);
      assertTrue(r2 != r);

      // Reader should be readOnly
      try {
        r2.deleteDocument(0);
        fail("no exception hit");
      } catch (UnsupportedOperationException uoe) {
        // expected
      }

      final String s = commit.getUserData();
      final int v;
      if (s == null) {
        // First commit created by IW
        v = -1;
      } else {
        v = Integer.parseInt(s);
      }
      if (v < 4) {
        assertEquals(1+v, r2.numDocs());
      } else {
        assertEquals(7-v, r2.numDocs());
      }
      r.close();
      r = r2;
    }
    r.close();
    dir.close();
  }

