  // test if tokenization fails, if only the new API is allowed and an old TokenStream is in the chain
  public void testOnlyNewAPI() throws IOException {
    TokenStream.setOnlyUseNewAPI(true);
    try {
    
      // this should fail with UOE
      try {
        TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));
        stream = new PartOfSpeechTaggingFilter(stream); // <-- this one is evil!
        stream = new LowerCaseFilter(stream);
        stream = new StopFilter(stream, stopwords);
        while (stream.incrementToken());
        fail("If only the new API is allowed, this should fail with an UOE");
      } catch (UnsupportedOperationException uoe) {
        assertTrue((PartOfSpeechTaggingFilter.class.getName()+" does not implement incrementToken() which is needed for onlyUseNewAPI.").equals(uoe.getMessage()));
      }

      // this should pass, as all core token streams support the new API
      TokenStream stream = new WhitespaceTokenizer(new StringReader(doc));
      stream = new LowerCaseFilter(stream);
      stream = new StopFilter(stream, stopwords);
      while (stream.incrementToken());
      
      // Test, if all attributes are implemented by their implementation, not Token/TokenWrapper
      assertTrue("TermAttribute is implemented by TermAttributeImpl",
        stream.addAttribute(TermAttribute.class) instanceof TermAttributeImpl);
      assertTrue("OffsetAttribute is implemented by OffsetAttributeImpl",
        stream.addAttribute(OffsetAttribute.class) instanceof OffsetAttributeImpl);
      assertTrue("FlagsAttribute is implemented by FlagsAttributeImpl",
        stream.addAttribute(FlagsAttribute.class) instanceof FlagsAttributeImpl);
      assertTrue("PayloadAttribute is implemented by PayloadAttributeImpl",
        stream.addAttribute(PayloadAttribute.class) instanceof PayloadAttributeImpl);
      assertTrue("PositionIncrementAttribute is implemented by PositionIncrementAttributeImpl", 
        stream.addAttribute(PositionIncrementAttribute.class) instanceof PositionIncrementAttributeImpl);
      assertTrue("TypeAttribute is implemented by TypeAttributeImpl",
        stream.addAttribute(TypeAttribute.class) instanceof TypeAttributeImpl);
      
      // Test if the wrapper API (onlyUseNewAPI==false) uses TokenWrapper
      // as attribute instance.
      // TokenWrapper encapsulates a Token instance that can be exchanged
      // by another Token instance without changing the AttributeImpl instance
      // itsself.
      TokenStream.setOnlyUseNewAPI(false);
      stream = new WhitespaceTokenizer(new StringReader(doc));
      assertTrue("TermAttribute is implemented by TokenWrapper",
        stream.addAttribute(TermAttribute.class) instanceof TokenWrapper);
      assertTrue("OffsetAttribute is implemented by TokenWrapper",
        stream.addAttribute(OffsetAttribute.class) instanceof TokenWrapper);
      assertTrue("FlagsAttribute is implemented by TokenWrapper",
        stream.addAttribute(FlagsAttribute.class) instanceof TokenWrapper);
      assertTrue("PayloadAttribute is implemented by TokenWrapper",
        stream.addAttribute(PayloadAttribute.class) instanceof TokenWrapper);
      assertTrue("PositionIncrementAttribute is implemented by TokenWrapper",
        stream.addAttribute(PositionIncrementAttribute.class) instanceof TokenWrapper);
      assertTrue("TypeAttribute is implemented by TokenWrapper",
        stream.addAttribute(TypeAttribute.class) instanceof TokenWrapper);
      
    } finally {
      TokenStream.setOnlyUseNewAPI(false);
    }
  }

