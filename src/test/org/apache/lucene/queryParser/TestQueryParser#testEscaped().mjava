  public void testEscaped() throws Exception {
    Analyzer a = new WhitespaceAnalyzer();
    assertQueryEquals("\\[brackets", a, "\\[brackets");
    assertQueryEquals("\\[brackets", null, "brackets");
    assertQueryEquals("\\\\", a, "\\\\");
    assertQueryEquals("\\+blah", a, "\\+blah");
    assertQueryEquals("\\(blah", a, "\\(blah");

    assertQueryEquals("\\-blah", a, "\\-blah");
    assertQueryEquals("\\!blah", a, "\\!blah");
    assertQueryEquals("\\{blah", a, "\\{blah");
    assertQueryEquals("\\}blah", a, "\\}blah");
    assertQueryEquals("\\:blah", a, "\\:blah");
    assertQueryEquals("\\^blah", a, "\\^blah");
    assertQueryEquals("\\[blah", a, "\\[blah");
    assertQueryEquals("\\]blah", a, "\\]blah");
    assertQueryEquals("\\\"blah", a, "\\\"blah");
    assertQueryEquals("\\(blah", a, "\\(blah");
    assertQueryEquals("\\)blah", a, "\\)blah");
    assertQueryEquals("\\~blah", a, "\\~blah");
    assertQueryEquals("\\*blah", a, "\\*blah");
    assertQueryEquals("\\?blah", a, "\\?blah");
    
    // TODO: what about these?
    //assertQueryEquals("foo \\&\\& bar", a, "foo \\&\\& bar");
    //assertQueryEquals("foo \\|| bar", a, "foo \\|| bar");
    //assertQueryEquals("foo \\AND bar", a, "foo \\AND bar");

	assertQueryEquals("a\\-b:c",a,"a\\-b:c");
	assertQueryEquals("a\\+b:c",a,"a\\+b:c");
	assertQueryEquals("a\\:b:c",a,"a\\:b:c");
	assertQueryEquals("a\\\\b:c",a,"a\\\\b:c");

	assertQueryEquals("a:b\\-c",a,"a:b\\-c");
	assertQueryEquals("a:b\\+c",a,"a:b\\+c");
	assertQueryEquals("a:b\\:c",a,"a:b\\:c");
	assertQueryEquals("a:b\\\\c",a,"a:b\\\\c");

	assertQueryEquals("a:b\\-c*",a,"a:b-c*");
	assertQueryEquals("a:b\\+c*",a,"a:b+c*");
	assertQueryEquals("a:b\\:c*",a,"a:b:c*");
  
	assertQueryEquals("a:b\\\\c*",a,"a:b\\c*");

	assertQueryEquals("a:b\\-?c",a,"a:b-?c");
	assertQueryEquals("a:b\\+?c",a,"a:b+?c");
	assertQueryEquals("a:b\\:?c",a,"a:b:?c");
  
	assertQueryEquals("a:b\\\\?c",a,"a:b\\\\\\?c");

	assertQueryEquals("a:b\\-c~",a,"a:b-c~");
	assertQueryEquals("a:b\\+c~",a,"a:b+c~");
	assertQueryEquals("a:b\\:c~",a,"a:b:c~");
	assertQueryEquals("a:b\\\\c~",a,"a:b\\c~");

	assertQueryEquals("[ a\\- TO a\\+ ]", null, "[a- TO a+]");
	assertQueryEquals("[ a\\: TO a\\~ ]", null, "[a: TO a~]");
	assertQueryEquals("[ a\\\\ TO a\\* ]", null, "[a\\ TO a*]");
  }

