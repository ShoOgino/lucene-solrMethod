  public void testBoost() throws IOException {
    // NOTE: uses index build in *this* setUp

    IndexReader reader = IndexReader.open(small);
    IndexSearcher search = new IndexSearcher(reader);

    // test for correct application of query normalization
    // must use a non score normalizing method for this.
    Query q = csrq("data", "1", "6", T, T);
    q.setBoost(100);
    search.search(q, null, new HitCollector() {
      public void collect(int doc, float score) {
        assertEquals("score for doc " + doc + " was not correct", 1.0f, score);
      }
    });

    //
    // Ensure that boosting works to score one clause of a query higher
    // than another.
    //
    Query q1 = csrq("data", "A", "A", T, T); // matches document #0
    q1.setBoost(.1f);
    Query q2 = csrq("data", "Z", "Z", T, T); // matches document #1
    BooleanQuery bq = new BooleanQuery(true);
    bq.add(q1, BooleanClause.Occur.SHOULD);
    bq.add(q2, BooleanClause.Occur.SHOULD);

    ScoreDoc[] hits = search.search(bq, null, 1000).scoreDocs;
    assertEquals(1, hits[0].doc);
    assertEquals(0, hits[1].doc);
    assertTrue(hits[0].score > hits[1].score);

    q1 = csrq("data", "A", "A", T, T); // matches document #0
    q1.setBoost(10f);
    q2 = csrq("data", "Z", "Z", T, T); // matches document #1
    bq = new BooleanQuery(true);
    bq.add(q1, BooleanClause.Occur.SHOULD);
    bq.add(q2, BooleanClause.Occur.SHOULD);

    hits = search.search(bq, null, 1000).scoreDocs;
    assertEquals(0, hits[0].doc);
    assertEquals(1, hits[1].doc);
    assertTrue(hits[0].score > hits[1].score);
  }

