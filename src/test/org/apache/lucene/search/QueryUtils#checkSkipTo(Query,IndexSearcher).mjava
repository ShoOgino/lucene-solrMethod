  /** alternate scorer skipTo(),skipTo(),next(),next(),skipTo(),skipTo(), etc
   * and ensure a hitcollector receives same docs and scores
   */
  public static void checkSkipTo(final Query q, final IndexSearcher s) throws IOException {
    //System.out.println("Checking "+q);
    final Weight w = q.weight(s);
    final Scorer scorer = w.scorer(s.getIndexReader());

    // FUTURE: ensure scorer.doc()==-1
    
    if (BooleanQuery.getUseScorer14()) return;  // 1.4 doesn't support skipTo

    final int[] which = new int[1];
    final int[] sdoc = new int[] {-1};
    final float maxDiff = 1e-5f;
    s.search(q,new HitCollector() {
      public void collect(int doc, float score) {
        try {
          boolean more = (which[0]++&0x02)==0 ? scorer.skipTo(sdoc[0]+1) : scorer.next();
          sdoc[0] = scorer.doc();
          float scorerScore = scorer.score();
          float scoreDiff = Math.abs(score-scorerScore);
          scoreDiff=0; // TODO: remove this go get LUCENE-697 failures 
          if (more==false || doc != sdoc[0] || scoreDiff>maxDiff) {
            throw new RuntimeException("ERROR matching docs:"
                    +"\n\tscorer.more=" + more + " doc="+sdoc[0] + " score="+scorerScore
                    +"\n\thitCollector.doc=" + doc + " score="+score
                    +"\n\t Scorer=" + scorer
                    +"\n\t Query=" + q
                    +"\n\t Searcher=" + s
            );
          }
        } catch (IOException e) {
          throw new RuntimeException(e);
        }
      }
    });

    // make sure next call to scorer is false.
    TestCase.assertFalse((which[0]++&0x02)==0 ? scorer.skipTo(sdoc[0]+1) : scorer.next());
  }

