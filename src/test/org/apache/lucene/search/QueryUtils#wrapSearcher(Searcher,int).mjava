  /**
   * Given a Searcher, returns a new MultiSearcher wrapping the  
   * the original Searcher, 
   * as well as several "empty" IndexSearchers -- some of which will have
   * deleted documents in them.  This new MultiSearcher 
   * should behave exactly the same as the original Searcher.
   * @param s the Searcher to wrap
   * @param edge if negative, s will be the first sub; if 0, s will be in hte middle, if positive s will be the last sub
   */
  public static MultiSearcher wrapSearcher(final Searcher s, final int edge) 
    throws IOException {

    // we can't put deleted docs before the nested reader, because
    // it will through off the docIds
    Searcher[] searchers = new Searcher[] {
      edge < 0 ? s : new IndexSearcher(makeEmptyIndex(0)),
      new MultiSearcher(new Searcher[] {
        new IndexSearcher(makeEmptyIndex(edge < 0 ? 65 : 0)),
        new IndexSearcher(makeEmptyIndex(0)),
        0 == edge ? s : new IndexSearcher(makeEmptyIndex(0))
      }),
      new IndexSearcher(makeEmptyIndex(0 < edge ? 0 : 3)),
      new IndexSearcher(makeEmptyIndex(0)),
      new MultiSearcher(new Searcher[] {
        new IndexSearcher(makeEmptyIndex(0 < edge ? 0 : 5)),
        new IndexSearcher(makeEmptyIndex(0)),
        0 < edge ? s : new IndexSearcher(makeEmptyIndex(0))
      })
    };
    MultiSearcher out = new MultiSearcher(searchers);
    out.setSimilarity(s.getSimilarity());
    return out;
  }

