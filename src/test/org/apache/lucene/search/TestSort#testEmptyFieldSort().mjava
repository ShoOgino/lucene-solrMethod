	// test sorting when the sort field is empty (undefined) for some of the documents
	public void testEmptyFieldSort() throws Exception {
		sort.setSort ("string");
		assertMatches (full, queryF, sort, "ZJI");

		sort.setSort ("string", true);
		assertMatches (full, queryF, sort, "IJZ");
		
		sort.setSort (new SortField ("i18n", Locale.ENGLISH));
		assertMatches (full, queryF, sort, "ZJI");
		
		sort.setSort (new SortField ("i18n", Locale.ENGLISH, true));
		assertMatches (full, queryF, sort, "IJZ");

		sort.setSort ("int");
		assertMatches (full, queryF, sort, "IZJ");

		sort.setSort ("int", true);
		assertMatches (full, queryF, sort, "JZI");

		sort.setSort ("float");
		assertMatches (full, queryF, sort, "ZJI");

		// using a nonexisting field as first sort key shouldn't make a difference:
		sort.setSort (new SortField[] { new SortField ("nosuchfield", SortField.STRING),
				new SortField ("float") });
		assertMatches (full, queryF, sort, "ZJI");

		sort.setSort ("float", true);
		assertMatches (full, queryF, sort, "IJZ");

		// When a field is null for both documents, the next SortField should be used.
                // Works for
		sort.setSort (new SortField[] { new SortField ("int"),
                                new SortField ("string", SortField.STRING),
				new SortField ("float") });
		assertMatches (full, queryG, sort, "ZWXY");

		// Reverse the last criterium to make sure the test didn't pass by chance
		sort.setSort (new SortField[] { new SortField ("int"),
                                new SortField ("string", SortField.STRING),
				new SortField ("float", true) });
		assertMatches (full, queryG, sort, "ZYXW");

		// Do the same for a MultiSearcher
		Searcher multiSearcher=new MultiSearcher (new Searchable[] { full });

		sort.setSort (new SortField[] { new SortField ("int"),
                                new SortField ("string", SortField.STRING),
				new SortField ("float") });
		assertMatches (multiSearcher, queryG, sort, "ZWXY");

		sort.setSort (new SortField[] { new SortField ("int"),
                                new SortField ("string", SortField.STRING),
				new SortField ("float", true) });
		assertMatches (multiSearcher, queryG, sort, "ZYXW");
		// Don't close the multiSearcher. it would close the full searcher too!

		// Do the same for a ParallelMultiSearcher
                Searcher parallelSearcher=new ParallelMultiSearcher (new Searchable[] { full });

		sort.setSort (new SortField[] { new SortField ("int"),
                                new SortField ("string", SortField.STRING),
				new SortField ("float") });
		assertMatches (parallelSearcher, queryG, sort, "ZWXY");

		sort.setSort (new SortField[] { new SortField ("int"),
                                new SortField ("string", SortField.STRING),
				new SortField ("float", true) });
		assertMatches (parallelSearcher, queryG, sort, "ZYXW");
		// Don't close the parallelSearcher. it would close the full searcher too!
	}

