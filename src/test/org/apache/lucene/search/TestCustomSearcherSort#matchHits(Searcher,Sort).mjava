	// make sure the documents returned by the search match the expected list
	private void matchHits (Searcher searcher, Sort sort)
	throws IOException {
	    // make a query without sorting first
		Hits hitsByRank = searcher.search(query);
		checkHits(hitsByRank, "Sort by rank: "); // check for duplicates
        Map resultMap = new TreeMap();
        // store hits in TreeMap - TreeMap does not allow duplicates; existing entries are silently overwritten
        for(int hitid=0;hitid<hitsByRank.length(); ++hitid) {
            resultMap.put(
                    new Integer(hitsByRank.id(hitid)),  // Key:   Lucene Document ID
                    new Integer(hitid));				// Value: Hits-Objekt Index
        }
        
        // now make a query using the sort criteria
		Hits resultSort = searcher.search (query, sort);
		checkHits(resultSort, "Sort by custom criteria: "); // check for duplicates
		
        String lf = System.getProperty("line.separator", "\n");
        // besides the sorting both sets of hits must be identical
        for(int hitid=0;hitid<resultSort.length(); ++hitid) {
            Integer idHitDate = new Integer(resultSort.id(hitid)); // document ID from sorted search
            if(!resultMap.containsKey(idHitDate)) {
                log("ID "+idHitDate+" not found. Possibliy a duplicate.");
            }
            assertTrue(resultMap.containsKey(idHitDate)); // same ID must be in the Map from the rank-sorted search
            // every hit must appear once in both result sets --> remove it from the Map.
            // At the end the Map must be empty!
            resultMap.remove(idHitDate);
        }
        if(resultMap.size()==0) {
            // log("All hits matched");
        } else {
        log("Couldn't match "+resultMap.size()+" hits.");
        }
        assertEquals(resultMap.size(), 0);
	}

