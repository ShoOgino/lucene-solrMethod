  public void testFilteredDocIdSet() throws Exception {
    final int maxdoc=10;
    final DocIdSet innerSet = new DocIdSet() {

        // @Override
        public DocIdSetIterator iterator() {
          return new DocIdSetIterator() {

            int docid=-1;
            //@Override
            public int doc() {
              return docid;
            }

            //@Override
            public boolean next() throws IOException {
              docid++;
              return (docid<maxdoc);
            }

            //@Override
            public boolean skipTo(int target) throws IOException {
              do {
                if (!next()) {
                  return false;
                }
              } while (target > doc());

              return true;
            }
          };
        } 
      };
	  
		
    DocIdSet filteredSet = new FilteredDocIdSet(innerSet){
        // @Override
        protected boolean match(int docid) {
          return docid%2 == 0;  //validate only even docids
        }	
      };
	  
    DocIdSetIterator iter = filteredSet.iterator();
    ArrayList/*<Integer>*/ list = new ArrayList/*<Integer>*/();
    if (iter.skipTo(3)) {
      list.add(new Integer(iter.doc()));
      while(iter.next()) {
        list.add(new Integer(iter.doc()));
      }
    }
	  
    int[] docs = new int[list.size()];
    int c=0;
    Iterator/*<Integer>*/ intIter = list.iterator();
    while(intIter.hasNext()) {
      docs[c++] = ((Integer) intIter.next()).intValue();
    }
    int[] answer = new int[]{4,6,8};
    boolean same = Arrays.equals(answer, docs);
    if (!same) {
      System.out.println("answer: "+_TestUtil.arrayToString(answer));
      System.out.println("gotten: "+_TestUtil.arrayToString(docs));
      fail();
    }
  }

