  public void testSplitLongRange() throws Exception {
    // a hard-coded "standard" range
    assertLongRangeSplit(-5000L, 9500L, 4, true, Arrays.asList(new Long[]{
      new Long(0x7fffffffffffec78L),new Long(0x7fffffffffffec7fL),
      new Long(0x8000000000002510L),new Long(0x800000000000251cL),
      new Long(0x7fffffffffffec8L), new Long(0x7fffffffffffecfL),
      new Long(0x800000000000250L), new Long(0x800000000000250L),
      new Long(0x7fffffffffffedL),  new Long(0x7fffffffffffefL),
      new Long(0x80000000000020L),  new Long(0x80000000000024L),
      new Long(0x7ffffffffffffL),   new Long(0x8000000000001L)
    }).iterator());
    
    // the same with no range splitting
    assertLongRangeSplit(-5000L, 9500L, 64, true, Arrays.asList(new Long[]{
      new Long(0x7fffffffffffec78L),new Long(0x800000000000251cL)
    }).iterator());
    
    // this tests optimized range splitting, if one of the inner bounds
    // is also the bound of the next lower precision, it should be used completely
    assertLongRangeSplit(0L, 1024L+63L, 4, true, Arrays.asList(new Long[]{
      new Long(0x800000000000040L), new Long(0x800000000000043L),
      new Long(0x80000000000000L),  new Long(0x80000000000003L)
    }).iterator());
    
    // the full long range should only consist of a lowest precision range; no bitset testing here, as too much memory needed :-)
    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 8, false, Arrays.asList(new Long[]{
      new Long(0x00L),new Long(0xffL)
    }).iterator());

    // the same with precisionStep=4
    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 4, false, Arrays.asList(new Long[]{
      new Long(0x0L),new Long(0xfL)
    }).iterator());

    // the same with precisionStep=2
    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 2, false, Arrays.asList(new Long[]{
      new Long(0x0L),new Long(0x3L)
    }).iterator());

    // the same with precisionStep=1
    assertLongRangeSplit(Long.MIN_VALUE, Long.MAX_VALUE, 1, false, Arrays.asList(new Long[]{
      new Long(0x0L),new Long(0x1L)
    }).iterator());

    // a inverse range should produce no sub-ranges
    assertLongRangeSplit(9500L, -5000L, 4, false, Collections.EMPTY_LIST.iterator());    

    // a 0-length range should reproduce the range itsself
    assertLongRangeSplit(9500L, 9500L, 4, false, Arrays.asList(new Long[]{
      new Long(0x800000000000251cL),new Long(0x800000000000251cL)
    }).iterator());
  }

