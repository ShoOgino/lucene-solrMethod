  /**
   * Test for correct spelling of a single word at various accuracy levels
   * to see how the suggestions vary.
   */
  public void testSpellCheck_03_multiWords_correctWords() {
    
    buildSpellCheckIndex();

    lrf = h.getRequestFactory("spellchecker", 0, 20 );
    lrf.args.put("version","2.0");
    lrf.args.put("sp.query.accuracy",".9");
    
    assertQ("Confirm the index is still valid",
            req("cat")
            ,"//str[@name='words'][.='cat']"
            ,"//str[@name='exist'][.='true']"
            );
    
    
    // Enable multiWords formatting:
    lrf.args.put("sp.query.extendedResults", "true");
    
    
    assertQ("Failed to spell check",
            req("cat")
            ,"//int[@name='numDocs'][.=10]"
            ,"//lst[@name='cat']"
            ,"//lst[@name='cat']/int[@name='frequency'][.>0]"
            ,"//lst[@name='cat']/lst[@name='suggestions' and count(lst)=0]"
            );
    
 
    // Please note that the following produces the following XML structure.
    //  <response>
    //    <responseHeader>
    //      <status>0</status><QTime>0</QTime>
    //    </responseHeader>
    //    <lst name="result">
    //      <lst name="cat">
    //        <int name="frequency">1</int>
    //        <lst name="suggestions">
    //          <lst name="cart"><int name="frequency">1</int></lst>
    //          <lst name="cot"><int name="frequency">1</int></lst>
    //          <lst name="cod"><int name="frequency">1</int></lst>
    //          <lst name="carp"><int name="frequency">1</int></lst>
    //        </lst>
    //      </lst>
    //    </lst>
    //  </response>


    lrf.args.put("sp.query.accuracy",".2");
    assertQ("Failed to spell check",
            req("cat")
            ,"//int[@name='numDocs'][.=10]"
            ,"//lst[@name='cat']"
            ,"//lst[@name='cat']/int[@name='frequency'][.>0]"
            ,"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']/int[@name='frequency'][.>0]"
            ,"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']/int[@name='frequency'][.>0]"
            ,"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cod']/int[@name='frequency'][.>0]"
            ,"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='carp']/int[@name='frequency'][.>0]"
            );

    lrf.args.put("sp.query.suggestionCount", "2");
    lrf.args.put("sp.query.accuracy",".2");
    assertQ("Failed to spell check",
            req("cat")
            ,"//lst[@name='cat']"
            ,"//lst[@name='cat']/int[@name='frequency'][.>0]"
            ,"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']"
            ,"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']"
            );

    /* The following is the generated XML response for the next query with three words:
      <response>
        <responseHeader><status>0</status><QTime>0</QTime></responseHeader>
        <int name="numDocs">10</int>
        <lst name="result">
          <lst name="cat">
            <int name="frequency">1</int>
            <lst name="suggestions">
              <lst name="cart"><int name="frequency">1</int></lst>
              <lst name="cot"><int name="frequency">1</int></lst>
            </lst>
          </lst>
          <lst name="card">
            <int name="frequency">1</int>
            <lst name="suggestions">
              <lst name="carp"><int name="frequency">1</int></lst>
              <lst name="cat"><int name="frequency">1</int></lst>
            </lst>
          </lst>
          <lst name="carp">
            <int name="frequency">1</int>
            <lst name="suggestions">
              <lst name="cart"><int name="frequency">1</int></lst>
              <lst name="corn"><int name="frequency">1</int></lst>
            </lst>
          </lst>
        </lst>
      </response>
    */

    lrf.args.put("sp.query.suggestionCount", "2");
    lrf.args.put("sp.query.accuracy",".2");
    assertQ("Failed to spell check",
        req("cat cart carp")
        ,"//lst[@name='cat']"
        ,"//lst[@name='cat']/int[@name='frequency'][.>0]"
        ,"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cart']"
        ,"//lst[@name='cat']/lst[@name='suggestions']/lst[@name='cot']"

        ,"//lst[@name='cart']"
        ,"//lst[@name='cart']/int[@name='frequency'][.>0]"
        ,"//lst[@name='cart']/lst/lst[1]"
        ,"//lst[@name='cart']/lst/lst[2]"

        ,"//lst[@name='carp']"
        ,"//lst[@name='carp']/int[@name='frequency'][.>0]"
        ,"//lst[@name='carp']/lst[@name='suggestions']/lst[@name='cart']"
        ,"//lst[@name='carp']/lst[@name='suggestions']/lst[@name='corn']"

    );

  }

