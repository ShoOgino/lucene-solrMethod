  private void testRangeSplit(final TrieUtils variant) throws Exception {
    String field="ascfield"+variant.TRIE_BITS;
    // 50 random tests
    for (int i=0; i<50; i++) {
      long lower=(long)(rnd.nextDouble()*10000L);
      long upper=(long)(rnd.nextDouble()*10000L);
      if (lower>upper) {
        long a=lower; lower=upper; upper=a;
      }
      // test inclusive range
      TrieRangeQuery tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, true, variant);
      TopDocs tTopDocs = searcher.search(tq, 1);
      assertEquals("Returned count of range query must be equal to inclusive range length", tTopDocs.totalHits, Math.max(upper-lower+1, 0) );
      // test exclusive range
      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, false, variant);
      tTopDocs = searcher.search(tq, 1);
      assertEquals("Returned count of range query must be equal to exclusive range length", tTopDocs.totalHits, Math.max(upper-lower-1, 0) );
      // test left exclusive range
      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), false, true, variant);
      tTopDocs = searcher.search(tq, 1);
      assertEquals("Returned count of range query must be equal to half exclusive range length", tTopDocs.totalHits, upper-lower );
      // test right exclusive range
      tq=new TrieRangeQuery(field, new Long(lower), new Long(upper), true, false, variant);
      tTopDocs = searcher.search(tq, 1);
      assertEquals("Returned count of range query must be equal to half exclusive range length", tTopDocs.totalHits, upper-lower );
    }
  }

