  /**
   * Universal constructor (expert use only): Uses already trie-converted min/max values.
   * You can set <code>min</code> or <code>max</code> (but not both) to <code>null</code> to leave one bound open.
   * With <code>minInclusive</code> and <code>maxInclusive</code> can be choosen, if the corresponding
   * bound should be included or excluded from the range.
   */
  public TrieRangeFilter(final String field, String min, String max,
    final boolean minInclusive, final boolean maxInclusive, final TrieUtils variant
  ) {
    if (min==null && max==null) throw new IllegalArgumentException("The min and max values cannot be both null.");
    this.trieVariant=variant;
    this.field=field.intern();
    // just for toString()
    this.minUnconverted=min;
    this.maxUnconverted=max;
    this.minInclusive=minInclusive;
    this.maxInclusive=maxInclusive;
    // encode bounds
    this.min=(min==null) ? trieVariant.TRIE_CODED_NUMERIC_MIN : (
      minInclusive ? min : variant.incrementTrieCoded(min)
    );
    this.max=(max==null) ? trieVariant.TRIE_CODED_NUMERIC_MAX : (
      maxInclusive ? max : variant.decrementTrieCoded(max)
    );
    // check encoded values
    if (
      this.min.length() != trieVariant.TRIE_CODED_LENGTH ||
      this.max.length() != trieVariant.TRIE_CODED_LENGTH
    ) throw new NumberFormatException("Invalid trie encoded numerical value representation (incompatible length).");
  }

