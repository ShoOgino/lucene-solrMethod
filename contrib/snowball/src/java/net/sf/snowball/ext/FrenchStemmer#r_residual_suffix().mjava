        private boolean r_residual_suffix() {
            int among_var;
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            // (, line 189
            // try, line 190
            v_1 = limit - cursor;
            lab0: do {
                // (, line 190
                // [, line 190
                ket = cursor;
                // literal, line 190
                if (!(eq_s_b(1, "s")))
                {
                    cursor = limit - v_1;
                    break lab0;
                }
                // ], line 190
                bra = cursor;
                // test, line 190
                v_2 = limit - cursor;
                if (!(out_grouping_b(g_keep_with_s, 97, 232)))
                {
                    cursor = limit - v_1;
                    break lab0;
                }
                cursor = limit - v_2;
                // delete, line 190
                slice_del();
            } while (false);
            // setlimit, line 191
            v_3 = limit - cursor;
            // tomark, line 191
            if (cursor < I_pV)
            {
                return false;
            }
            cursor = I_pV;
            v_4 = limit_backward;
            limit_backward = cursor;
            cursor = limit - v_3;
            // (, line 191
            // [, line 192
            ket = cursor;
            // substring, line 192
            among_var = find_among_b(a_6, 7);
            if (among_var == 0)
            {
                limit_backward = v_4;
                return false;
            }
            // ], line 192
            bra = cursor;
            switch(among_var) {
                case 0:
                    limit_backward = v_4;
                    return false;
                case 1:
                    // (, line 193
                    // call R2, line 193
                    if (!r_R2())
                    {
                        limit_backward = v_4;
                        return false;
                    }
                    // or, line 193
                    lab1: do {
                        v_5 = limit - cursor;
                        lab2: do {
                            // literal, line 193
                            if (!(eq_s_b(1, "s")))
                            {
                                break lab2;
                            }
                            break lab1;
                        } while (false);
                        cursor = limit - v_5;
                        // literal, line 193
                        if (!(eq_s_b(1, "t")))
                        {
                            limit_backward = v_4;
                            return false;
                        }
                    } while (false);
                    // delete, line 193
                    slice_del();
                    break;
                case 2:
                    // (, line 195
                    // <-, line 195
                    slice_from("i");
                    break;
                case 3:
                    // (, line 196
                    // delete, line 196
                    slice_del();
                    break;
                case 4:
                    // (, line 197
                    // literal, line 197
                    if (!(eq_s_b(2, "gu")))
                    {
                        limit_backward = v_4;
                        return false;
                    }
                    // delete, line 197
                    slice_del();
                    break;
            }
            limit_backward = v_4;
            return true;
        }

