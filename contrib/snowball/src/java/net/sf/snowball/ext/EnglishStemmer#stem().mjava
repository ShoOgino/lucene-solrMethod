        public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
            int v_7;
            int v_8;
            int v_9;
            int v_10;
            int v_11;
            int v_12;
            int v_13;
            // (, line 194
            // or, line 196
            lab0: do {
                v_1 = cursor;
                lab1: do {
                    // call exception1, line 196
                    if (!r_exception1())
                    {
                        break lab1;
                    }
                    break lab0;
                } while (false);
                cursor = v_1;
                // (, line 196
                // test, line 198
                v_2 = cursor;
                // hop, line 198
                {
                    int c = cursor + 3;
                    if (0 > c || c > limit)
                    {
                        return false;
                    }
                    cursor = c;
                }
                cursor = v_2;
                // do, line 199
                v_3 = cursor;
                lab2: do {
                    // call prelude, line 199
                    if (!r_prelude())
                    {
                        break lab2;
                    }
                } while (false);
                cursor = v_3;
                // do, line 200
                v_4 = cursor;
                lab3: do {
                    // call mark_regions, line 200
                    if (!r_mark_regions())
                    {
                        break lab3;
                    }
                } while (false);
                cursor = v_4;
                // backwards, line 201
                limit_backward = cursor; cursor = limit;
                // (, line 201
                // do, line 203
                v_5 = limit - cursor;
                lab4: do {
                    // call Step_1a, line 203
                    if (!r_Step_1a())
                    {
                        break lab4;
                    }
                } while (false);
                cursor = limit - v_5;
                // or, line 205
                lab5: do {
                    v_6 = limit - cursor;
                    lab6: do {
                        // call exception2, line 205
                        if (!r_exception2())
                        {
                            break lab6;
                        }
                        break lab5;
                    } while (false);
                    cursor = limit - v_6;
                    // (, line 205
                    // do, line 207
                    v_7 = limit - cursor;
                    lab7: do {
                        // call Step_1b, line 207
                        if (!r_Step_1b())
                        {
                            break lab7;
                        }
                    } while (false);
                    cursor = limit - v_7;
                    // do, line 208
                    v_8 = limit - cursor;
                    lab8: do {
                        // call Step_1c, line 208
                        if (!r_Step_1c())
                        {
                            break lab8;
                        }
                    } while (false);
                    cursor = limit - v_8;
                    // do, line 210
                    v_9 = limit - cursor;
                    lab9: do {
                        // call Step_2, line 210
                        if (!r_Step_2())
                        {
                            break lab9;
                        }
                    } while (false);
                    cursor = limit - v_9;
                    // do, line 211
                    v_10 = limit - cursor;
                    lab10: do {
                        // call Step_3, line 211
                        if (!r_Step_3())
                        {
                            break lab10;
                        }
                    } while (false);
                    cursor = limit - v_10;
                    // do, line 212
                    v_11 = limit - cursor;
                    lab11: do {
                        // call Step_4, line 212
                        if (!r_Step_4())
                        {
                            break lab11;
                        }
                    } while (false);
                    cursor = limit - v_11;
                    // do, line 214
                    v_12 = limit - cursor;
                    lab12: do {
                        // call Step_5, line 214
                        if (!r_Step_5())
                        {
                            break lab12;
                        }
                    } while (false);
                    cursor = limit - v_12;
                } while (false);
                cursor = limit_backward;                // do, line 217
                v_13 = cursor;
                lab13: do {
                    // call postlude, line 217
                    if (!r_postlude())
                    {
                        break lab13;
                    }
                } while (false);
                cursor = v_13;
            } while (false);
            return true;
        }

