        public boolean stem() {
            int v_1;
            int v_2;
            int v_3;
            int v_4;
            int v_5;
            int v_6;
            int v_7;
            int v_8;
            int v_9;
            // (, line 183
            // do, line 185
            v_1 = cursor;
            lab0: do {
                // call mark_regions, line 185
                if (!r_mark_regions())
                {
                    break lab0;
                }
            } while (false);
            cursor = v_1;
            // unset ending_removed, line 186
            B_ending_removed = false;
            // backwards, line 187
            limit_backward = cursor; cursor = limit;
            // (, line 187
            // do, line 188
            v_2 = limit - cursor;
            lab1: do {
                // call particle_etc, line 188
                if (!r_particle_etc())
                {
                    break lab1;
                }
            } while (false);
            cursor = limit - v_2;
            // do, line 189
            v_3 = limit - cursor;
            lab2: do {
                // call possessive, line 189
                if (!r_possessive())
                {
                    break lab2;
                }
            } while (false);
            cursor = limit - v_3;
            // do, line 190
            v_4 = limit - cursor;
            lab3: do {
                // call case, line 190
                if (!r_case())
                {
                    break lab3;
                }
            } while (false);
            cursor = limit - v_4;
            // do, line 191
            v_5 = limit - cursor;
            lab4: do {
                // call other_endings, line 191
                if (!r_other_endings())
                {
                    break lab4;
                }
            } while (false);
            cursor = limit - v_5;
            // or, line 192
            lab5: do {
                v_6 = limit - cursor;
                lab6: do {
                    // (, line 192
                    // Boolean test ending_removed, line 192
                    if (!(B_ending_removed))
                    {
                        break lab6;
                    }
                    // do, line 192
                    v_7 = limit - cursor;
                    lab7: do {
                        // call i_plural, line 192
                        if (!r_i_plural())
                        {
                            break lab7;
                        }
                    } while (false);
                    cursor = limit - v_7;
                    break lab5;
                } while (false);
                cursor = limit - v_6;
                // do, line 192
                v_8 = limit - cursor;
                lab8: do {
                    // call t_plural, line 192
                    if (!r_t_plural())
                    {
                        break lab8;
                    }
                } while (false);
                cursor = limit - v_8;
            } while (false);
            // do, line 193
            v_9 = limit - cursor;
            lab9: do {
                // call tidy, line 193
                if (!r_tidy())
                {
                    break lab9;
                }
            } while (false);
            cursor = limit - v_9;
            cursor = limit_backward;            return true;
        }

