    /* to replace chars between c_bra and c_ket in current by the
     * chars in s.
     */
    protected int replace_s(int c_bra, int c_ket, CharSequence s)
    {
	final int adjustment = s.length() - (c_ket - c_bra);
	final int newLength = limit + adjustment;
	//resize if necessary
	if (newLength > current.length) {
	  char newBuffer[] = new char[ArrayUtil.oversize(newLength, RamUsageEstimator.NUM_BYTES_CHAR)];
	  System.arraycopy(current, 0, newBuffer, 0, limit);
	  current = newBuffer;
	}
	// if the substring being replaced is longer or shorter than the
	// replacement, need to shift things around
	if (adjustment != 0 && c_ket < limit) {
	  System.arraycopy(current, c_ket, current, c_bra + s.length(), 
	      limit - c_ket);
	}
	// insert the replacement text
	// Note, faster is s.getChars(0, s.length(), current, c_bra);
	// but would have to duplicate this method for both String and StringBuilder
	for (int i = 0; i < s.length(); i++)
	  current[c_bra + i] = s.charAt(i);
	
	limit += adjustment;
	if (cursor >= c_ket) cursor += adjustment;
	else if (cursor > c_bra) cursor = c_bra;
	return adjustment;
    }

