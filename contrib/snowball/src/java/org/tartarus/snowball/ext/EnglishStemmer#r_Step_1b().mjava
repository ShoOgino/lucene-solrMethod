        private boolean r_Step_1b() {
            int among_var;
            int v_1;
            int v_3;
            int v_4;
            // (, line 74
            // [, line 75
            ket = cursor;
            // substring, line 75
            among_var = find_among_b(a_4, 6);
            if (among_var == 0)
            {
                return false;
            }
            // ], line 75
            bra = cursor;
            switch(among_var) {
                case 0:
                    return false;
                case 1:
                    // (, line 77
                    // call R1, line 77
                    if (!r_R1())
                    {
                        return false;
                    }
                    // <-, line 77
                    slice_from("ee");
                    break;
                case 2:
                    // (, line 79
                    // test, line 80
                    v_1 = limit - cursor;
                    // gopast, line 80
                    golab0: while(true)
                    {
                        lab1: do {
                            if (!(in_grouping_b(g_v, 97, 121)))
                            {
                                break lab1;
                            }
                            break golab0;
                        } while (false);
                        if (cursor <= limit_backward)
                        {
                            return false;
                        }
                        cursor--;
                    }
                    cursor = limit - v_1;
                    // delete, line 80
                    slice_del();
                    // test, line 81
                    v_3 = limit - cursor;
                    // substring, line 81
                    among_var = find_among_b(a_3, 13);
                    if (among_var == 0)
                    {
                        return false;
                    }
                    cursor = limit - v_3;
                    switch(among_var) {
                        case 0:
                            return false;
                        case 1:
                            // (, line 83
                            // <+, line 83
                            {
                                int c = cursor;
                                insert(cursor, cursor, "e");
                                cursor = c;
                            }
                            break;
                        case 2:
                            // (, line 86
                            // [, line 86
                            ket = cursor;
                            // next, line 86
                            if (cursor <= limit_backward)
                            {
                                return false;
                            }
                            cursor--;
                            // ], line 86
                            bra = cursor;
                            // delete, line 86
                            slice_del();
                            break;
                        case 3:
                            // (, line 87
                            // atmark, line 87
                            if (cursor != I_p1)
                            {
                                return false;
                            }
                            // test, line 87
                            v_4 = limit - cursor;
                            // call shortv, line 87
                            if (!r_shortv())
                            {
                                return false;
                            }
                            cursor = limit - v_4;
                            // <+, line 87
                            {
                                int c = cursor;
                                insert(cursor, cursor, "e");
                                cursor = c;
                            }
                            break;
                    }
                    break;
            }
            return true;
        }

