    /**
     * Fetches the requested entries from the storage. The given list contains
     * entry ids to be looked up in the storage. First the {@link StorageBuffer}
     * will be queried for the entry ids. If not all of the entries remain in
     * the buffer the underlaying lucene index will be searched. The entries are
     * not guaranteed to be in the same order as they are in the given id list.
     * Entry ID's not found in the index or the buffer will be omitted.
     * <p>
     * The entries will be searched in a feed context specified by the given
     * feed ID
     * </p>
     * 
     * @param entryIds -
     *            the entriy ids to fetch.
     * @param feedId -
     *            the feed id eg. feed context.
     * @param config -
     *            the FeedInstanceConfiguration contaning extension profile used
     *            to create the entriy instances
     * 
     * @return - the list of entries corresponding to the given entry id list.
     * @throws IOException -
     *             if the index could not be queries or the entries could not be
     *             build
     * @throws ParseException -
     *             if an entry could not be parsed while building it from the
     *             Lucene Document.
     */
    public List<BaseEntry> entryQuery(List<String> entryIds,
            final String feedId, final ProvidedService config)
            throws IOException, ParseException {
        List<BaseEntry> resultList = new ArrayList<BaseEntry>(entryIds.size());
        List<String> searchList = new ArrayList<String>(entryIds.size());
        for (String entry : entryIds) {

            StorageEntryWrapper bufferedEntry = this.buffer.getEntry(entry,
                    feedId);
            if (bufferedEntry != null) {
                resultList.add(bufferedEntry.getEntry());
            } else
                searchList.add(entry);
        }
        if (searchList.isEmpty())
            return resultList;

        Hits hits = storageQuery(searchList);
        Iterator hitIterator = hits.iterator();
        while (hitIterator.hasNext()) {
            Hit hit = (Hit) hitIterator.next();
            Document doc = hit.getDocument();
            BaseEntry entry = buildEntryFromLuceneDocument(doc, config);
            resultList.add(entry);

        }

        return resultList;

    }

