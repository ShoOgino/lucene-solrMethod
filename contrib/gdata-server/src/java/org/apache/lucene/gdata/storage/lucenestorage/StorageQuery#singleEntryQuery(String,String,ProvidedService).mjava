    /**
     * This method retrieves a single entry from the storage. If the
     * {@link StorageBuffer} does not contain the requested entry the
     * underlaying storage index will be searched.
     * <p>
     * The Entry will be searched in a feed context specified by the given feed
     * ID
     * </p>
     * 
     * @param entryId -
     *            the entry to fetch
     * @param feedId -
     *            the feedid eg. feed context
     * @param config -
     *            the FeedInstanceConfiguration contaning extension profile used
     *            to create the entriy instances
     * @return - the requested {@link BaseEntry} or <code>null</code> if the
     *         entry can not be found
     * @throws IOException -
     *             if the index could not be queries or the entries could not be
     *             build
     * @throws ParseException -
     *             if an entry could not be parsed while building it from the
     *             Lucene Document.
     */
    public BaseEntry singleEntryQuery(final String entryId,
            final String feedId, final ProvidedService config)
            throws IOException, ParseException {
        StorageEntryWrapper wrapper = this.buffer.getEntry(entryId, feedId);

        if (wrapper == null) {
            Hits hits = storageQuery(entryId);
            if (hits.length() <= 0)
                return null;
            Document doc = hits.doc(0);

            return buildEntryFromLuceneDocument(doc, config);
        }
        /*
         * ServerBaseEntry enables the dynamic element of the entry like the
         * links to be dynamic. BufferedEntries will be reused until they are
         * written.
         */
        return wrapper.getEntry();

    }

