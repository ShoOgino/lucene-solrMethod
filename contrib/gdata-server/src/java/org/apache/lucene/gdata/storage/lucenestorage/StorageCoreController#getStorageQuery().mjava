    /**
     * returns a <tt>StorageQuery</tt> to query the storage index. The
     * returned object is a reference counter to keep track of the references to
     * the <tt>StorageQuery</tt>. The reference is already incremented before
     * returned from this method.
     * <p>
     * if the reference counter has no remaining references the resource e.g.
     * the <tt>StorageQuery</tt> will be closed. This ensures that a
     * <tt>StorageQuery</tt> instance will be arround as long as needed and
     * the resources will be released. The reference counter should be
     * decremented by clients after finished using the query instance.
     * </p>
     * 
     * @return a {@link ReferenceCounter} instance holding the StorageQuery as a
     *         resource.
     * 
     */
    protected ReferenceCounter<StorageQuery> getStorageQuery() {
    	if(this.isClosed.get())
    		throw new IllegalStateException("StorageController is already closed -- server is shutting down");
        this.storageControllerLock.lock();
        try{
        	if(this.isClosed.get())
        		throw new IllegalStateException("StorageController is already closed -- server is shutting down");
            if (this.storageQuery == null) {
                this.storageQuery = getNewStorageQueryHolder(new StorageQuery(
                        this.currentBuffer, this.searcher));
                if (LOG.isInfoEnabled())
                    LOG.info("Relese new StorageQuery");
            }
            this.storageQuery.increamentReference();
            return this.storageQuery;
        }finally{
        	this.closeCondition.signalAll();
        	this.storageControllerLock.unlock();
        }
    }

