    /**
     * Deletes the entry for the given entry id.
     * @param wrapper - the wrapper containing the information to delete 
     * 
     * @throws StorageException -
     *             if the entry can not be deleted
     * 
     */
    public void deleteEntry(final StorageEntryWrapper wrapper)
            throws StorageException {
        if(wrapper.getOperation() != StorageOperation.DELETE)
            throw new StorageException("Illegal method call -- insertEntry does not accept other storage operations than delete");
        this.lock.lock();
        try {
            
            Term tempTerm = new Term(StorageEntryWrapper.FIELD_ENTRY_ID,
                    wrapper.getEntryId());
            this.deletedDocumentQueue.add(tempTerm);
            storageModified();
            /*
             * If storage not written write entry to recoverfile
             * and make the entry available via the buffer
             */
            if(this.modifiedCounter != 0)
                try{
                    this.controller.writeRecoverEntry(wrapper);
                    this.buffer.addDeleted(wrapper.getEntryId(), wrapper.getFeedId());
                }catch (Exception e) {
                    /*
                     * remove from all resources
                     */
                 this.deletedDocumentQueue.remove(tempTerm);
                    
                }
        } finally {
            this.lock.unlock();
        }
    }

