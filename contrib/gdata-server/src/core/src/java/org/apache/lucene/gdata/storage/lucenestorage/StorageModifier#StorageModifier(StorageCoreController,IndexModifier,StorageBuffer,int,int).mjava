    /**
     * Creates a new StorageModifier
     * 
     * @param controller -
     *            the registered StorageController
     * @param modifier -
     *            the IndexModifier
     * @param buffer -
     *            the StorageBuffer
     * @param persitsFactor -
     *            the factor when the changes will be persisted to the storage
     *            index
     * @param optimizeInterval -
     *            after how many storage operations the index will be optimized
     */
    protected StorageModifier(final StorageCoreController controller,
            final IndexModifier modifier, final StorageBuffer buffer,
            int persitsFactor, int optimizeInterval) {
        this.deletedDocumentQueue = new LinkedList<Term>();
        this.deletedForUpdateDocumentQueue = new LinkedList<Term>();
        this.documentMap = new HashMap<String, Document>(persitsFactor);
        this.forceWriteDocuments = new ArrayList<Document>(5);
        this.forceWriteTerms = new ArrayList<Term>(5);
        this.buffer = buffer;
        this.controller = controller;

        this.persistFactor = persitsFactor > 0 ? persitsFactor
                : DEFAULT_PERSIST_FACTOR;
        this.modifier = modifier;
        this.optimizeInterval = optimizeInterval < DEFAULT_OPTIMIZE_INTERVAL ? DEFAULT_OPTIMIZE_INTERVAL
                : optimizeInterval;

    }

