    /*
     * Test method for
     * 'org.apache.lucene.gdata.search.index.GDataIndexer.addIndexableDocumentTask(Future<IndexDocument>)'
     */
    public void testAddIndexableDocumentTask() throws InterruptedException,
            IOException {
        String id = "myID";
        Field f = new Field(FIELD_ID, id, Field.Store.YES,
                Field.Index.UN_TOKENIZED);
        Document doc = new Document();
        doc.add(f);
        Term delTerm = new Term(FIELD_ID, id);
        /*
         * Latch will be decremented in FutureStub#get() and
         * IndexDocumentStub#getIndexable
         */
        CountDownLatch l = new CountDownLatch(2);
        IndexDocument iDoc = new IndexDocumentStub(doc, delTerm,
                IndexAction.INSERT, l);
        Future<IndexDocument> future = new FutureStub<IndexDocument>(iDoc, l);

        this.indexer.addIndexableDocumentTask(future);
        // wait for the latch do decrement
        l.await(5000, TimeUnit.MILLISECONDS);

        this.indexer.commit(false);
        IndexSearcher s = new IndexSearcher(this.dir);
        Hits h = s.search(new TermQuery(delTerm));
        assertEquals(1, h.length());
        s.close();
        // test for update
        /*
         * Latch will be decremented in FutureStub#get() and
         * IndexDocumentStub#getIndexable
         */
        l = new CountDownLatch(2);
        iDoc = new IndexDocumentStub(doc, delTerm, IndexAction.UPDATE, l);
        future = new FutureStub<IndexDocument>(iDoc, l);
        this.indexer.addIndexableDocumentTask(future);
        l.await(5000, TimeUnit.MILLISECONDS);
        this.indexer.commit(false);
        s = new IndexSearcher(this.dir);
        h = s.search(new TermQuery(delTerm));
        assertEquals(1, h.length());
        s.close();

        // test for delete
        /*
         * Latch will be decremented in FutureStub#get()
         */
        l = new CountDownLatch(1);
        iDoc = new IndexDocumentStub(doc, delTerm, IndexAction.DELETE, l);
        future = new FutureStub<IndexDocument>(iDoc, l);

        this.indexer.addIndexableDocumentTask(future);
        /*
         * wait for the indexer task to add the deleted
         */
        while (this.indexer.docsDeleted.get() == 0)
            l.await(5000, TimeUnit.MILLISECONDS);

        this.indexer.commit(false);
        s = new IndexSearcher(this.dir);
        h = s.search(new TermQuery(delTerm));
        assertEquals(0, h.length());
        s.close();
    }

