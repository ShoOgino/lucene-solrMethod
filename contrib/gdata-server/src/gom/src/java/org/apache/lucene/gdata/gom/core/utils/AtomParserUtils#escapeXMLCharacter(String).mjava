	/**
	 * Replaces all xml character with the corresponding entity.
	 * 
	 * <ul>
	 * <li>&lt;!ENTITY lt &quot;&amp;#38;#60;&quot;&gt;</li>
	 * <li>&lt;!ENTITY gt &quot;&amp;#62;&quot;&gt;</li>
	 * <li>&lt;!ENTITY amp &quot;&amp;#38;#38;&quot;&gt;</li>
	 * <li>&lt;!ENTITY apos &quot;&amp;#39;&quot;&gt;</li>
	 * <li>&lt;!ENTITY quot &quot;&amp;#34;&quot;&gt;</li>
	 * </ul>
	 * 
	 * see <a
	 * href="http://www.w3.org/TR/2006/REC-xml-20060816/#intern-replacement">W3C
	 * specification</a>
	 * 
	 * @param aString -
	 *            a string may container xml characters like '<'
	 * @return the input string with escaped xml characters
	 */
	public static String escapeXMLCharacter(String aString) {
		StringBuilder builder = new StringBuilder();
		char[] cs = aString.toCharArray();
		for (int i = 0; i < cs.length; i++) {
			switch (cs[i]) {
			case '<':
				builder.append("&lt;");
				break;
			case '>':
				builder.append("&gt;");
				break;
			case '"':
				builder.append("&quot;");
				break;
			case '\'':
				builder.append("&apos;");
				break;
			case '&':
				builder.append("&amp;");
				break;
			case '\0':
				// this breaks some xml serializer like soap serializer -->
				// remove it
				break;
			default:
				builder.append(cs[i]);
			}
		}

		return builder.toString();

	}

