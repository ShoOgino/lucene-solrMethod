	/**
	 * Constructs a new instance with the given parameters.
	 * 
	 * @param pattern
	 *            a regular expression delimiting tokens
	 * @param toLowerCase
	 *            if <code>true</code> returns tokens after applying
	 *            String.toLowerCase()
	 * @param stopWords
	 *            if non-null, ignores all tokens that are contained in the
	 *            given stop set (after previously having applied toLowerCase()
	 *            if applicable). For example, created via
	 *            {@link StopFilter#makeStopSet(String[])}and/or
	 *            {@link org.apache.lucene.analysis.WordlistLoader}as in
	 *            <code>WordlistLoader.getWordSet(new File("samples/fulltext/stopwords.txt")</code>
	 *            or <a href="http://www.unine.ch/info/clef/">other stop words
	 *            lists </a>.
	 */
	public PatternAnalyzer(Pattern pattern, boolean toLowerCase, Set stopWords) {
		if (pattern == null) 
			throw new IllegalArgumentException("pattern must not be null");
		
		if (eqPattern(NON_WORD_PATTERN, pattern)) pattern = NON_WORD_PATTERN;
		else if (eqPattern(WHITESPACE_PATTERN, pattern)) pattern = WHITESPACE_PATTERN;
		
		if (stopWords != null && stopWords.size() == 0) stopWords = null;
		
		this.pattern = pattern;
		this.toLowerCase = toLowerCase;
		this.stopWords = stopWords;
	}

