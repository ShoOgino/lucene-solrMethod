		public TermEnum terms(Term term) {
			if (DEBUG) System.err.println("MemoryIndexReader.terms: " + term);
	
			int i; // index into info.sortedTerms
			int j; // index into sortedFields
			
			sortFields();
			j = Arrays.binarySearch(sortedFields, term.field(), termComparator);
			if (j < 0) { // not found; choose successor
				j = -j -1; 
				i = 0;
				if (j < sortedFields.length) getInfo(j).sortTerms();
			}
			else { // found
				Info info = getInfo(j);
				info.sortTerms();
				i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);
				if (i < 0) { // not found; choose successor
					i = -i -1;
					if (i >= info.sortedTerms.length) { // move to next successor
						j++;
						i = 0;
						if (j < sortedFields.length) getInfo(j).sortTerms();
					}
				}
			}
			final int ix = i;
			final int jx = j;
	
			return new TermEnum() {
	
				private int i = ix; // index into info.sortedTerms
				private int j = jx; // index into sortedFields
	
				public boolean next() {
					if (DEBUG) System.err.println("TermEnum.next");
					if (j >= sortedFields.length) return false;
					Info info = getInfo(j);
					if (++i < info.sortedTerms.length) return true;
	
					// move to successor
					j++;
					i = 0;
					if (j >= sortedFields.length) return false;
					info.sortTerms();
					return true;
				}
	
				public Term term() {
					if (DEBUG) System.err.println("TermEnum.term: " + i);
					if (j >= sortedFields.length) return null;
					Info info = getInfo(j);
					if (i >= info.sortedTerms.length) return null;
					String fieldName = (String) sortedFields[j].getKey();
					return new Term(fieldName, (String) info.sortedTerms[i].getKey());
				}
	
				public int docFreq() {
					if (DEBUG) System.err.println("TermEnum.docFreq");
					if (j >= sortedFields.length) return 0;
					Info info = getInfo(j);
					if (i >= info.sortedTerms.length) return 0;
					return numPositions(info.getPositions(i));
				}
	
				public void close() {
					if (DEBUG) System.err.println("TermEnum.close");
				}
			};
		}

