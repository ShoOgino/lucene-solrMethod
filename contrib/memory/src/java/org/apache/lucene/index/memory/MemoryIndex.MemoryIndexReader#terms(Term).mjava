    @Override
    public TermEnum terms(Term term) {
      if (DEBUG) System.err.println("MemoryIndexReader.terms: " + term);
  
      int i; // index into info.sortedTerms
      int j; // index into sortedFields
      
      sortFields();
      if (sortedFields.length == 1 && sortedFields[0].getKey() == term.field()) {
        j = 0; // fast path
      } else {
        j = Arrays.binarySearch(sortedFields, term.field(), termComparator);
      }
      
      if (j < 0) { // not found; choose successor
        j = -j -1; 
        i = 0;
        if (j < sortedFields.length) getInfo(j).sortTerms();
      } else { // found
        Info info = getInfo(j);
        info.sortTerms();
        i = Arrays.binarySearch(info.sortedTerms, term.text(), termComparator);
        if (i < 0) { // not found; choose successor
          i = -i -1;
          if (i >= info.sortedTerms.length) { // move to next successor
            j++;
            i = 0;
            if (j < sortedFields.length) getInfo(j).sortTerms();
          }
        }
      }
      final int ix = i;
      final int jx = j;
  
      return new TermEnum() {
  
        private int srtTermsIdx = ix; // index into info.sortedTerms
        private int srtFldsIdx = jx; // index into sortedFields
          
        @Override
        public boolean next() {
          if (DEBUG) System.err.println("TermEnum.next");
          if (srtFldsIdx >= sortedFields.length) return false;
          Info info = getInfo(srtFldsIdx);
          if (++srtTermsIdx < info.sortedTerms.length) return true;
  
          // move to successor
          srtFldsIdx++;
          srtTermsIdx = 0;
          if (srtFldsIdx >= sortedFields.length) return false;
          getInfo(srtFldsIdx).sortTerms();
          return true;
        }
  
        @Override
        public Term term() {
          if (DEBUG) System.err.println("TermEnum.term: " + srtTermsIdx);
          if (srtFldsIdx >= sortedFields.length) return null;
          Info info = getInfo(srtFldsIdx);
          if (srtTermsIdx >= info.sortedTerms.length) return null;
//          if (DEBUG) System.err.println("TermEnum.term: " + i + ", " + info.sortedTerms[i].getKey());
          return createTerm(info, srtFldsIdx, info.sortedTerms[srtTermsIdx].getKey());
        }
        
        @Override
        public int docFreq() {
          if (DEBUG) System.err.println("TermEnum.docFreq");
          if (srtFldsIdx >= sortedFields.length) return 0;
          Info info = getInfo(srtFldsIdx);
          if (srtTermsIdx >= info.sortedTerms.length) return 0;
          return numPositions(info.getPositions(srtTermsIdx));
        }
  
        @Override
        public void close() {
          if (DEBUG) System.err.println("TermEnum.close");
        }
        
        /** Returns a new Term object, minimizing String.intern() overheads. */
        private Term createTerm(Info info, int pos, String text) { 
          // Assertion: sortFields has already been called before
          Term template = info.template;
          if (template == null) { // not yet cached?
            String fieldName = sortedFields[pos].getKey();
            template = new Term(fieldName);
            info.template = template;
          }
          
          return template.createTerm(text);
        }
        
      };
    }

