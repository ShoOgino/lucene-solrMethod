	/**
	 * Randomize synonyms to later sample a subset. Uses constant random seed
	 * for reproducability. Uses "DRand", a simple, fast, uniform pseudo-random
	 * number generator with medium statistical quality (multiplicative
	 * congruential method), producing integers in the range [Integer.MIN_VALUE,
	 * Integer.MAX_VALUE].
	 */
	private static void randomize(Object[] arr) {
		int seed = 1234567; // constant
		int randomState = 4*seed + 1;
//		Random random = new Random(seed); // unnecessary overhead
		int len = arr.length;
		for (int i=0; i < len-1; i++) {
			randomState *= 0x278DDE6D; // z(i+1)=a*z(i) (mod 2**32)
			int r = randomState % (len-i);
			if (r < 0) r = -r; // e.g. -9 % 2 == -1
//			int r = random.nextInt(len-i);
			
			// swap arr[i, i+r]
			Object tmp = arr[i];
			arr[i] = arr[i + r];
			arr[i + r] = tmp;
		}		
	}

