		public TermFreqVector getTermFreqVector(int docNumber, final String fieldName) {
			if (DEBUG) System.err.println("MemoryIndexReader.getTermFreqVector");
			final Info info = getInfo(fieldName);
			if (info == null) return null; // TODO: or return empty vector impl???
			info.sortTerms();
			
			return new TermPositionVector() { 
	
				private final Map.Entry[] sortedTerms = info.sortedTerms;
				
				public String getField() {
					return fieldName;
				}
	
				public int size() {
					return sortedTerms.length;
				}
	
				public String[] getTerms() {
					String[] terms = new String[sortedTerms.length];
					for (int i=sortedTerms.length; --i >= 0; ) {
						terms[i] = (String) sortedTerms[i].getKey();
					}
					return terms;
				}
	
				public int[] getTermFrequencies() {
					int[] freqs = new int[sortedTerms.length];
					for (int i=sortedTerms.length; --i >= 0; ) {
						freqs[i] = numPositions((ArrayIntList) sortedTerms[i].getValue());
					}
					return freqs;
				}
	
				public int indexOf(String term) {
					int i = Arrays.binarySearch(sortedTerms, term, termComparator);
					return i >= 0 ? i : -1;
				}
	
				public int[] indexesOf(String[] terms, int start, int len) {
					int[] indexes = new int[len];
					for (int i=0; i < len; i++) {
						indexes[i] = indexOf(terms[start++]);
					}
					return indexes;
				}
				
				// lucene >= 1.4.3
				public int[] getTermPositions(int index) {
					return ((ArrayIntList) sortedTerms[index].getValue()).toArray(stride);
				} 
				
				// lucene >= 1.9 (remove this method for lucene-1.4.3)
				public org.apache.lucene.index.TermVectorOffsetInfo[] getOffsets(int index) {
					if (stride == 1) return null; // no offsets stored
					
					ArrayIntList positions = (ArrayIntList) sortedTerms[index].getValue();
					int size = positions.size();
					org.apache.lucene.index.TermVectorOffsetInfo[] offsets = 
						new org.apache.lucene.index.TermVectorOffsetInfo[size / stride];
					
					for (int i=0, j=1; j < size; i++, j += stride) {
						int start = positions.get(j);
						int end = positions.get(j+1);
						offsets[i] = new org.apache.lucene.index.TermVectorOffsetInfo(start, end);
					}
					return offsets;
				}

			};
		}

