  public void testGetConstantScoreRangeFragments() throws Exception {

    numHighlights = 0;
    String queryString = FIELD_NAME + ":[kannedy TO kznnedy]";

    // Need to explicitly set the QueryParser property to use RangeQuery
    // rather
    // than RangeFilters
    QueryParser parser = new QueryParser(FIELD_NAME, new StandardAnalyzer());
    // parser.setUseOldRangeQuery(true);
    query = parser.parse(queryString);

    searcher = new IndexSearcher(ramDir);
    // can't rewrite ConstantScoreRangeQuery if you want to highlight it -
    // it rewrites to ConstantScoreQuery which cannot be highlighted
    // query = unReWrittenQuery.rewrite(reader);
    System.out.println("Searching for: " + query.toString(FIELD_NAME));
    hits = searcher.search(query);

    for (int i = 0; i < hits.length(); i++) {
      String text = hits.doc(i).get(HighlighterTest.FIELD_NAME);
      int maxNumFragmentsRequired = 2;
      String fragmentSeparator = "...";
      SpanScorer scorer = null;
      TokenStream tokenStream = null;

      tokenStream = new CachingTokenFilter(analyzer.tokenStream(HighlighterTest.FIELD_NAME,
          new StringReader(text)));
      scorer = new SpanScorer(query, HighlighterTest.FIELD_NAME, (CachingTokenFilter) tokenStream);
      scorer.setHighlightCnstScrRngQuery(true);

      Highlighter highlighter = new Highlighter(this, scorer);

      ((CachingTokenFilter) tokenStream).reset();

      highlighter.setTextFragmenter(new SimpleFragmenter(20));

      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,
          fragmentSeparator);
      System.out.println("\t" + result);
    }
    assertTrue("Failed to find correct number of highlights " + numHighlights + " found",
        numHighlights == 5);
  }

