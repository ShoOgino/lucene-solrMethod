  @Override
  public BitSet bits(IndexReader reader) throws IOException {

    /* Create a BitSet to store the result */
    int maxdocs = reader.maxDoc();
    BitSet bits = new BitSet(maxdocs);
    
    setPrecision(maxdocs);
    // create an intermediate cache to avoid recomputing
    //   distances for the same point 
    //   TODO: Why is this a WeakHashMap? 
    WeakHashMap<String,Double> cdistance = new WeakHashMap<String,Double>(maxdocs);
    long start = System.currentTimeMillis();
    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);
    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);

    /* store calculated distances for reuse by other components */
    distances = new HashMap<Integer,Double>(maxdocs);
    
    if (distances == null){
    	distances = new HashMap<Integer,Double>();
    }

    TermDocs td = reader.termDocs(null);
    while(td.next()) {
      int doc = td.doc();
      
      String sx = latIndex[doc];
      String sy = lngIndex[doc];
  
      double x = NumberUtils.SortableStr2double(sx);
      double y = NumberUtils.SortableStr2double(sy);
      
      // round off lat / longs if necessary
//      x = DistanceHandler.getPrecision(x, precise);
//      y = DistanceHandler.getPrecision(y, precise);
      
      String ck = new Double(x).toString()+","+new Double(y).toString();
      Double cachedDistance = cdistance.get(ck);
      
      
      double d;
      
      if(cachedDistance != null){
        d = cachedDistance.doubleValue();
      } else {
        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);
        cdistance.put(ck, d);
      }
      
   // why was i storing all distances again?
      if (d < distance){
        bits.set(doc);
        distances.put(doc+ nextOffset, d); // include nextOffset for multi segment reader  
      }
    }
    int size = bits.cardinality();
    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader
    long end = System.currentTimeMillis();
    log.fine("Bits 1: Time taken : "+ (end - start) + 
            ", results : "+ distances.size() + 
            ", cached : "+ cdistance.size() +
            ", incoming size: "+ size+
            ", nextOffset: "+ nextOffset);
    
    return bits;
  }

