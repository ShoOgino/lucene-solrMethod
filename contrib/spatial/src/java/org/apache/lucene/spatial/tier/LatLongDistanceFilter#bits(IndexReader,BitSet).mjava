  @Override
  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {

  
    /* Create a BitSet to store the result */
  	
    int size = bits.cardinality();
    BitSet result = new BitSet(size);
    
    
    /* create an intermediate cache to avoid recomputing
         distances for the same point  */
    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);
    

    /* store calculated distances for reuse by other components */
    boolean db = false;
    offset += reader.maxDoc();
    if (distances == null){
    	distances = new HashMap<Integer,Double>();
    }else {
    	db=true;
    }
    
    long start = System.currentTimeMillis();
    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);
    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);
    
    /* loop over all set bits (hits from the boundary box filters) */
    int i = bits.nextSetBit(0);
    while (i >= 0){
      double x,y;
      
      // if we have a completed
      // filter chain, lat / lngs can be retrived from 
      // memory rather than document base.

      String sx = latIndex[i];
      String sy = lngIndex[i];
      x = NumberUtils.SortableStr2double(sx);
      y = NumberUtils.SortableStr2double(sy);
      
      // round off lat / longs if necessary
//      x = DistanceHandler.getPrecision(x, precise);
//      y = DistanceHandler.getPrecision(y, precise);

      String ck = new Double(x).toString()+","+new Double(y).toString();
      Double cachedDistance = cdistance.get(ck);
      double d;
      
      if(cachedDistance != null){
        d = cachedDistance.doubleValue();
        
      } else {
        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);
        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);
        cdistance.put(ck, d);
      }
      
      // why was i storing all distances again?
      if (d < distance){
        result.set(i);
        distances.put(i+ nextOffset, d); // include nextOffset for multireader  
      }
      i = bits.nextSetBit(i+1);
    }
    
    long end = System.currentTimeMillis();
    log.fine("Time taken : "+ (end - start) + 
        ", results : "+ distances.size() + 
        ", cached : "+ cdistance.size() +
        ", incoming size: "+ size);
  

    cdistance = null;
    nextOffset += offset;  // this should be something that's part of indexReader
    
    return result;
  }

