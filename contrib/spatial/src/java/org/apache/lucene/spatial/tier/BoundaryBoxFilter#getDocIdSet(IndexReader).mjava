  /**
   * Returns a DocIdSet with true for documents which should be
   * permitted in search results, and false for those that should
   * not.
   */
  @Override
  public DocIdSet getDocIdSet(IndexReader reader) throws IOException {
    long start = System.currentTimeMillis();
    
    OpenBitSet bits = new OpenBitSet(reader.maxDoc());
    TermEnum enumerator =
        (null != lowerTerm
         ? reader.terms(new Term(fieldName, lowerTerm))
         : reader.terms(new Term(fieldName,"")));
    
    //coords = new HashMap(enumerator.docFreq());
    
    try {
      if (enumerator.term() == null) {
        return bits;
      }
      
      boolean checkLower = false;
      if (!includeLower) // make adjustments to set to exclusive
        checkLower = true;
  
      TermDocs termDocs = reader.termDocs();
      try {          
        do {
          Term term = enumerator.term();
          if (term != null && term.field().equals(fieldName)) {
            if (!checkLower || null==lowerTerm || term.text().compareTo(lowerTerm) > 0) {
              checkLower = false;
              if (upperTerm != null) {
                int compare = upperTerm.compareTo(term.text());
                // if beyond the upper term, or is exclusive and
                // this is equal to the upper term, break out 
                if ((compare < 0) ||
                  (!includeUpper && compare==0)) {
                  break;
                }
              }
              // we have a good term, find the docs 
              termDocs.seek(enumerator.term());
              while (termDocs.next()) {
                bits.fastSet(termDocs.doc());
              }
            }
          } 
          else {
            break;
          }
        }
        while (enumerator.next());    
      } 
      finally {
        termDocs.close();
      }
    } 
    finally {
      enumerator.close();
    }

    long end = System.currentTimeMillis();
    log.info("BoundaryBox Time Taken: "+ (end - start));
    return bits;
  }

