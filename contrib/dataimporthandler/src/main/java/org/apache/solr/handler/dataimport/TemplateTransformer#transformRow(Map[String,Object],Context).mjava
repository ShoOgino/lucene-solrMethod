  @SuppressWarnings("unchecked")
  public Object transformRow(Map<String, Object> row, Context context) {

    String entityName = context.getEntityAttribute(DataImporter.NAME);

    VariableResolverImpl resolver = (VariableResolverImpl) context
            .getVariableResolver();
    Map<String, Object> resolverMap = (Map<String, Object>) resolver
            .resolve(entityName);

    // Clone resolver map because the resolver map contains common fields or any
    // others
    // that the entity processor chooses to keep.
    Map<String, Object> resolverMapCopy = new HashMap<String, Object>();
    if (resolverMap != null) {
      for (Map.Entry<String, Object> entry : resolverMap.entrySet())
        resolverMapCopy.put(entry.getKey(), entry.getValue());
    }
    // Add current row to the copy of resolver map
    for (Map.Entry<String, Object> entry : row.entrySet())
      resolverMapCopy.put(entry.getKey(), entry.getValue());
    // Add this copy to the namespace of the current entity in the resolver
    resolver.addNamespace(entityName, resolverMapCopy);

    for (Map<String, String> map : context.getAllEntityFields()) {
      String expr = map.get(TEMPLATE);
      if (expr == null)
        continue;

      String column = map.get(DataImporter.COLUMN);

      // Verify if all variables can be resolved or not
      boolean resolvable = true;
      List<String> variables = TemplateString.getVariables(expr);
      for (String v : variables) {
        if (resolver.resolve(v) == null) {
          LOG.warning("Unable to resolve variable: " + v
                  + " while parsing expression: " + expr);
          resolvable = false;
        }
      }

      if (!resolvable)
        continue;

      row.put(column, resolver.replaceTokens(expr));
    }

    // Restore the original resolver map
    resolver.addNamespace(entityName, resolverMap);

    return row;
  }

