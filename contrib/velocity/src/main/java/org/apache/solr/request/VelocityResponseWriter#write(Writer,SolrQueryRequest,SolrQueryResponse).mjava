  public void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException {
    VelocityEngine engine = getEngine(request);  // TODO: have HTTP headers available for configuring engine

    // TODO: Add layout capability, render to string buffer, then render layout
    Template template = getTemplate(engine, request);

    VelocityContext context = new VelocityContext();

    context.put("request", request);

    SolrResponse rsp = new QueryResponse();
    rsp.setResponse(new EmbeddedSolrServer(request.getCore()).getParsedResponse(request, response));
    context.put("response", rsp);

    // Velocity context tools - TODO: make these pluggable
    context.put("page",new PageTool(request,response));
    context.put("esc", new EscapeTool());
    context.put("sort", new SortTool());
    context.put("number", new NumberTool());
    context.put("date", new ComparisonDateTool());
    context.put("math", new MathTool());
   
    // TODO: check for v.layout, render to string, then render v.layout's template setting $content in the context
    String layout_template = request.getParams().get("v.layout");
    String json_wrapper = request.getParams().get("v.json");
    boolean wrap_response = (layout_template != null) || (json_wrapper !=null);
    
    // create output, optionally wrap it into a json object
    if (wrap_response) {
      StringWriter stringWriter = new StringWriter();
      template.merge(context, stringWriter);
      
      if (layout_template != null) {
        context.put("content", stringWriter.toString());
        stringWriter = new StringWriter();
        try {
          engine.getTemplate(layout_template + ".vm").merge(context, stringWriter);
        } catch (Exception e) {
          throw new IOException(e.getMessage());
        }
      }
      
      if (json_wrapper != null) {
        writer.write(request.getParams().get("v.json") + "(");
        writer.write(getJSONWrap(stringWriter.toString()));
        writer.write(')');
      } else {  // using a layout, but not JSON wrapping
        writer.write(stringWriter.toString());
      }
    } else {
      template.merge(context, writer);
    }
  }

