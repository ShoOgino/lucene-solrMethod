  public void testLiterals() throws Exception {
    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler("/update/extract");
    assertTrue("handler is null and it shouldn't be", handler != null);
    //test literal
    loadLocal("version_control.xml", "map.created", "extractedDate", "map.producer", "extractedProducer",
            "map.creator", "extractedCreator", "map.Keywords", "extractedKeywords",
            "map.Author", "extractedAuthor",
            "map.content", "extractedContent",
            "literal.id", "one",
            "map.language", "extractedLanguage",
            "literal.extractionLiteralMV", "one",
            "literal.extractionLiteralMV", "two",
            "map.Last-Modified", "extractedDate"

    );
    assertQ(req("stream_name:version_control.xml"), "//*[@numFound='0']");
    assertU(commit());
    assertQ(req("stream_name:version_control.xml"), "//*[@numFound='1']");

    assertQ(req("extractionLiteralMV:one"), "//*[@numFound='1']");
    assertQ(req("extractionLiteralMV:two"), "//*[@numFound='1']");

    try {
      loadLocal("version_control.xml", "map.created", "extractedDate", "map.producer", "extractedProducer",
              "map.creator", "extractedCreator", "map.Keywords", "extractedKeywords",
              "map.Author", "extractedAuthor",
              "map.content", "extractedContent",
              "literal.id", "two",
              "map.language", "extractedLanguage",
              "literal.extractionLiteral", "one",
              "literal.extractionLiteral", "two",
              "map.Last-Modified", "extractedDate"
      );
      // TODO: original author did not specify why an exception should be thrown... how to fix?
      // assertTrue("Exception should have been thrown", false);
    } catch (SolrException e) {
      //nothing to see here, move along
    }

    loadLocal("version_control.xml", "map.created", "extractedDate", "map.producer", "extractedProducer",
            "map.creator", "extractedCreator", "map.Keywords", "extractedKeywords",
            "map.Author", "extractedAuthor",
            "map.content", "extractedContent",
            "literal.id", "three",
            "map.language", "extractedLanguage",
            "literal.extractionLiteral", "one",
            "map.Last-Modified", "extractedDate"
    );
    assertU(commit());
    assertQ(req("extractionLiteral:one"), "//*[@numFound='1']");

  }

