  public Token next(final Token reusableToken) throws IOException {
    assert reusableToken != null;
    if (thaiToken != null) {
      int start = breaker.current();
      int end = breaker.next();
      if (end != BreakIterator.DONE) {
        reusableToken.reinit(thaiToken, thaiToken.termBuffer(), start, end - start);
        reusableToken.setStartOffset(thaiToken.startOffset()+start);
        reusableToken.setEndOffset(thaiToken.startOffset()+end);
        return reusableToken;
      }
      thaiToken = null;
    }

    Token nextToken = input.next(reusableToken);
    if (nextToken == null || nextToken.termLength() == 0) {
      return null;
    }

    String text = nextToken.term();
    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {
      nextToken.setTermBuffer(text.toLowerCase());
      return nextToken;
    }

    thaiToken = (Token) nextToken.clone();
    breaker.setText(text);
    int end = breaker.next();
    if (end != BreakIterator.DONE) {
      nextToken.setTermBuffer(text, 0, end);
      nextToken.setEndOffset(nextToken.startOffset() + end);
      return nextToken;
    }
    return null;
  }

