  /**
   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the
   * text in the provided {@link Reader}.
   * 
   * @return A {@link TokenStream} built from a {@link StandardTokenizer}
   *         filtered with {@link StandardFilter}, {@link LowerCaseFilter},
   *         {@link StopFilter}, and {@link CzechStemFilter} (only if version is
   *         >= LUCENE_31)
   */
	@Override
	public TokenStream reusableTokenStream(String fieldName, Reader reader)
      throws IOException {
      SavedStreams streams = (SavedStreams) getPreviousTokenStream();
      if (streams == null) {
        streams = new SavedStreams();
        streams.source = new StandardTokenizer(matchVersion, reader);
        streams.result = new StandardFilter(streams.source);
        streams.result = new LowerCaseFilter(matchVersion, streams.result);
        streams.result = new StopFilter(StopFilter.getEnablePositionIncrementsVersionDefault(matchVersion),
                                        streams.result, stoptable);
        if (matchVersion.onOrAfter(Version.LUCENE_31))
          streams.result = new CzechStemFilter(streams.result);
        setPreviousTokenStream(streams);
      } else {
        streams.source.reset(reader);
      }
      return streams.result;
    }

