  /**
   * Creates {@link TokenStreamComponents} used to tokenize all the text in the provided
   * {@link Reader}.
   * 
   * @return {@link TokenStreamComponents} built from a {@link StandardTokenizer}
   *         filtered with {@link StandardFilter}, {@link LowerCaseFilter},
   *         {@link StopFilter}, and {@link CzechStemFilter} (only if version is
   *         >= LUCENE_31). If a version is >= LUCENE_31 and a stem exclusion set
   *         is provided via {@link #CzechAnalyzer(Version, Set, Set)} a 
   *         {@link KeywordMarkerTokenFilter} is added before {@link CzechStemFilter}.
   */
  @Override
  protected TokenStreamComponents createComponents(String fieldName,
      Reader reader) {
    final Tokenizer source = new StandardTokenizer(matchVersion, reader);
    TokenStream result = new StandardFilter(source);
    result = new LowerCaseFilter(matchVersion, result);
    result = new StopFilter( matchVersion, result, stoptable);
    if (matchVersion.onOrAfter(Version.LUCENE_31)) {
      if(!this.stemExclusionTable.isEmpty())
        result = new KeywordMarkerTokenFilter(result, stemExclusionTable);
      result = new CzechStemFilter(result);
    }
    return new TokenStreamComponents(source, result);
  }

