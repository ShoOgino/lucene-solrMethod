    /**
     * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text 
     * in the provided {@link Reader}.
     *
     * @return  A {@link TokenStream} built from a 
     *   {@link RussianLetterTokenizer} filtered with 
     *   {@link LowerCaseFilter}, {@link StopFilter}, 
     *   and {@link RussianStemFilter}
     */
    @Override
    public TokenStream reusableTokenStream(String fieldName, Reader reader) 
      throws IOException {
    SavedStreams streams = (SavedStreams) getPreviousTokenStream();
    if (streams == null) {
      streams = new SavedStreams();
      streams.source = new RussianLetterTokenizer(reader);
      streams.result = new LowerCaseFilter(matchVersion, streams.source);
      streams.result = new StopFilter(matchVersion, streams.result, stopSet);
      streams.result = new RussianStemFilter(streams.result);
      setPreviousTokenStream(streams);
    } else {
      streams.source.reset(reader);
    }
    return streams.result;
  }

