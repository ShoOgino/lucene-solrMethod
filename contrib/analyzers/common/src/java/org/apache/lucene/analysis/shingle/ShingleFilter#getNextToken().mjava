  /**
   * Get the next token from the input stream and push it on the token buffer.
   * If we encounter a token with position increment > 1, we put filler tokens
   * on the token buffer.
   * <p/>
   * Returns null when the end of the input stream is reached.
   * @return the next token, or null if at end of input stream
   * @throws IOException if the input stream has a problem
   */
  private boolean getNextToken() throws IOException {
    
    while (true) {
  	  if (numFillerTokensToInsert > 0) {
  	    if (currentToken == null) {
  	      currentToken = captureState();
  	    } else {
  	      restoreState(currentToken);
  	    }
  	    numFillerTokensToInsert--;
        // A filler token occupies no space
  	    offsetAtt.setOffset(offsetAtt.startOffset(), offsetAtt.startOffset());
  	    termAtt.setTermBuffer(FILLER_TOKEN, 0, FILLER_TOKEN.length);
        return true;
  	  } 
  	  
  	  if (hasCurrentToken) {
  	    if (currentToken != null) {
  	      restoreState(currentToken);
  	      currentToken = null;
  	    }
  	    hasCurrentToken = false;
  	    return true;
  	  }
  	  
  	  if (!input.incrementToken()) return false;
  	  hasCurrentToken = true;
  	  
  	  if (posIncrAtt.getPositionIncrement() > 1) {
  	    numFillerTokensToInsert = posIncrAtt.getPositionIncrement() - 1;
  	  }
    }
	}

