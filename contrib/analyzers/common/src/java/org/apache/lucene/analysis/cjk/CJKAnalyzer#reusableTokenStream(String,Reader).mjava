  /**
   * Returns a (possibly reused) {@link TokenStream} which tokenizes all the text 
   * in the provided {@link Reader}.
   *
   * @param fieldName lucene field name
   * @param reader    Input {@link Reader}
   * @return A {@link TokenStream} built from {@link CJKTokenizer}, filtered with
   *    {@link StopFilter}
   */
  public final TokenStream reusableTokenStream(String fieldName, Reader reader) throws IOException {
    /* tokenStream() is final, no back compat issue */
    SavedStreams streams = (SavedStreams) getPreviousTokenStream();
    if (streams == null) {
      streams = new SavedStreams();
      streams.source = new CJKTokenizer(reader);
      streams.result = new StopFilter(streams.source, stopTable);
      setPreviousTokenStream(streams);
    } else {
      streams.source.reset(reader);
    }
    return streams.result;
  }

