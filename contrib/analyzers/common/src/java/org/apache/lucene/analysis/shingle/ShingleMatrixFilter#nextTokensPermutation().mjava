  /**
   * get next permutation of row combinations,
   * creates list of all tokens in the row and
   * an index from each such token to what row they exist in.
   * finally resets the current (next) shingle size and offset.
   */
  private void nextTokensPermutation() {
    Matrix.Column.Row[] rowsPermutation = permutations.next();
    List<Matrix.Column.Row> currentPermutationRows = new ArrayList<Matrix.Column.Row>();
    List<Token> currentPermuationTokens = new ArrayList<Token>();
    for (Matrix.Column.Row row : rowsPermutation) {
      for (Token token : row.getTokens()) {
        currentPermuationTokens.add(token);
        currentPermutationRows.add(row);
      }
    }
    this.currentPermuationTokens = currentPermuationTokens;
    this.currentPermutationRows = currentPermutationRows;

    currentPermutationTokensStartOffset = 0;
    currentShingleLength = minimumShingleSize - 1;

  }

