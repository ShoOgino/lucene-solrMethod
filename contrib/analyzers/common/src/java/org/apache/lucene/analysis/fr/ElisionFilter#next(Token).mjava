  /**
   * Returns the next input Token with term() without elisioned start
   */
  public Token next(final Token reusableToken) throws IOException {
    assert reusableToken != null;
    Token nextToken = input.next(reusableToken);
    if (nextToken == null)
      return null;

    char[] termBuffer = nextToken.termBuffer();
    int termLength = nextToken.termLength();

    int minPoz = Integer.MAX_VALUE;
    for (int i = 0; i < apostrophes.length; i++) {
      char apos = apostrophes[i];
      // The equivalent of String.indexOf(ch)
      for (int poz = 0; poz < termLength ; poz++) {
        if (termBuffer[poz] == apos) {
            minPoz = Math.min(poz, minPoz);
            break;
        }
      }
    }

    // An apostrophe has been found. If the prefix is an article strip it off.
    if (minPoz != Integer.MAX_VALUE
        && articles.contains(new String(nextToken.termBuffer(), 0, minPoz).toLowerCase())) {
      nextToken.setTermBuffer(nextToken.termBuffer(), minPoz + 1, nextToken.termLength() - (minPoz + 1));
    }

    return nextToken;
  }

