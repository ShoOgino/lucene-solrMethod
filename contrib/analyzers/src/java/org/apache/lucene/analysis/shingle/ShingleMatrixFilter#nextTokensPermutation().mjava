  /**
   * get next permutation of row combinations,
   * creates list of all tokens in the row and
   * an index from each such token to what row they exist in.
   * finally resets the current (next) shingle size and offset.
   */
  private void nextTokensPermutation() {
    Matrix.Column.Row[] rowsPermutation;
    rowsPermutation = (Matrix.Column.Row[]) permutations.next();
    List currentPermutationRows = new ArrayList();
    List currentPermuationTokens = new ArrayList();
    for (int i = 0; i < rowsPermutation.length; i++) {
      Matrix.Column.Row row = rowsPermutation[i];
      for (Iterator iterator = row.getTokens().iterator(); iterator.hasNext();) {
        currentPermuationTokens.add(iterator.next());
        currentPermutationRows.add(row);
      }
    }
    this.currentPermuationTokens = currentPermuationTokens;
    this.currentPermutationRows = currentPermutationRows;

    currentPermutationTokensStartOffset = 0;
    currentShingleLength = minimumShingleSize - 1;

  }

