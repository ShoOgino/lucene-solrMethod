  /**
   * 比较两个整数数组的大小, 分别从数组的一定位置开始逐个比较, 当依次相等且都到达末尾时, 返回相等, 否则未到达末尾的大于到达末尾的;
   * 当未到达末尾时有一位不相等, 该位置数值大的数组大于小的
   * 
   * @param larray
   * @param lstartIndex larray的起始位置
   * @param rarray
   * @param rstartIndex rarray的起始位置
   * @return 0表示相等，1表示larray > rarray, -1表示larray < rarray
   */
  public static int compareArray(char[] larray, int lstartIndex, char[] rarray,
      int rstartIndex) {

    if (larray == null) {
      if (rarray == null || rstartIndex >= rarray.length)
        return 0;
      else
        return -1;
    } else {
      // larray != null
      if (rarray == null) {
        if (lstartIndex >= larray.length)
          return 0;
        else
          return 1;
      }
    }

    int li = lstartIndex, ri = rstartIndex;
    while (li < larray.length && ri < rarray.length && larray[li] == rarray[ri]) {
      li++;
      ri++;
    }
    if (li == larray.length) {
      if (ri == rarray.length) {
        // 两者一直相等到末尾，因此返回相等，也就是结果0
        return 0;
      } else {
        // 此时不可能ri>rarray.length因此只有ri<rarray.length
        // 表示larray已经结束，rarray没有结束，因此larray < rarray，返回-1
        return -1;
      }
    } else {
      // 此时不可能li>larray.length因此只有li < larray.length，表示li没有到达larray末尾
      if (ri == rarray.length) {
        // larray没有结束，但是rarray已经结束，因此larray > rarray
        return 1;
      } else {
        // 此时不可能ri>rarray.length因此只有ri < rarray.length
        // 表示larray和rarray都没有结束，因此按下一个数的大小判断
        if (larray[li] > rarray[ri])
          return 1;
        else
          return -1;
      }
    }
  }

