    public void testGoodCases() throws Exception {
	
	IndexSearcher searcher;
	final float[] scores = new float[NUM_DOCS];
	float lastScore = 0.0f;
	
	// default similarity should put docs with shorter length first
	searcher = new IndexSearcher(store);
	searcher.search
	    (new TermQuery(new Term("field", "word")),
	     new HitCollector() {
		 public final void collect(int doc, float score) {
		     scores[doc] = score;
		 }
	     });
	searcher.close();
	
	lastScore = Float.MAX_VALUE;
	for (int i = 0; i < NUM_DOCS; i++) {
	    String msg = "i=" + i + ", "+scores[i]+" <= "+lastScore;
	    assertTrue(msg, scores[i] <= lastScore);
	    //System.out.println(msg);
	    lastScore = scores[i];
	}

	// override the norms to be inverted
	Similarity s = new DefaultSimilarity() {
		public float lengthNorm(String fieldName, int numTokens) {
		    return (float)numTokens;
		}
	    };
	LengthNormModifier lnm = new LengthNormModifier(store, s);
	lnm.reSetNorms("field");

	// new norm (with default similarity) should put longer docs first
	searcher = new IndexSearcher(store);
	searcher.search
	    (new TermQuery(new Term("field", "word")),
	     new HitCollector() {
		 public final void collect(int doc, float score) {
		     scores[doc] = score;
		 }
	     });
	searcher.close();
	
	lastScore = 0.0f;
	for (int i = 0; i < NUM_DOCS; i++) {
	    String msg = "i=" + i + ", "+scores[i]+" >= "+lastScore;
	    assertTrue(msg, scores[i] >= lastScore);
	    //System.out.println(msg);
	    lastScore = scores[i];
	}
	
    }

