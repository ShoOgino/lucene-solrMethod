  public void testGoodCases() throws Exception {
    
    IndexSearcher searcher = new IndexSearcher(store);
    final float[] scores = new float[NUM_DOCS];
    float lastScore = 0.0f;
    
    // default similarity should put docs with shorter length first
    searcher.search(new TermQuery(new Term("field", "word")), new MultiReaderHitCollector() {
      private int docBase = -1;
      public final void collect(int doc, float score) {
        scores[doc + docBase] = score;
      }
      public void setNextReader(IndexReader reader, int docBase) {
        this.docBase = docBase;
      }
    });
    searcher.close();
    
    lastScore = Float.MAX_VALUE;
    for (int i = 0; i < NUM_DOCS; i++) {
      String msg = "i=" + i + ", " + scores[i] + " <= " + lastScore;
      assertTrue(msg, scores[i] <= lastScore);
      //System.out.println(msg);
      lastScore = scores[i];
    }

    FieldNormModifier fnm = new FieldNormModifier(store, s);
    fnm.reSetNorms("field");
    
    // new norm (with default similarity) should put longer docs first
    searcher = new IndexSearcher(store);
    searcher.search(new TermQuery(new Term("field", "word")),  new MultiReaderHitCollector() {
      private int docBase = -1;
      public final void collect(int doc, float score) {
        scores[doc + docBase] = score;
      }
      public void setNextReader(IndexReader reader, int docBase) {
        this.docBase = docBase;
      }
    });
    searcher.close();
    
    lastScore = 0.0f;
    for (int i = 0; i < NUM_DOCS; i++) {
      String msg = "i=" + i + ", " + scores[i] + " >= " + lastScore;
      assertTrue(msg, scores[i] >= lastScore);
      //System.out.println(msg);
      lastScore = scores[i];
    }
  }

