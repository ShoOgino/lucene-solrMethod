  /**
   * Overrides super class, by passing terms through analyzer.
   * @exception ParseException
   */
  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive)
      throws ParseException {
    // get Analyzer from superclass and tokenize the terms
    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(part1));
    final Token reusableToken = new Token();
    Token nextToken;
    Token multipleToken;
    boolean multipleTokens = false;

    // part1
    try {
      nextToken = source.next(reusableToken);
      if (nextToken != null) {
        part1 = nextToken.term();
      }
      multipleTokens = source.next(reusableToken) != null;
    } catch (IOException e) {
      nextToken = null;
    }
    try {
      source.close();
    } catch (IOException e) {
      // ignore
    }
    if (multipleTokens) {
      throw new ParseException("Cannot build RangeQuery with analyzer " + getAnalyzer().getClass()
          + " - tokens were added to part1");
    }

    // part2
    source = getAnalyzer().tokenStream(field, new StringReader(part2));
    try {
      nextToken = source.next(reusableToken);
      if (nextToken != null) {
        part2 = nextToken.term();
      }
      multipleTokens = source.next(reusableToken) != null;
    } catch (IOException e) {
      nextToken = null;
    }
    try {
      source.close();
    } catch (IOException e) {
      // ignore
    }
    if (multipleTokens) {
      throw new ParseException("Cannot build RangeQuery with analyzer " + getAnalyzer().getClass()
          + " - tokens were added to part2");
    }
    return super.getRangeQuery(field, part1, part2, inclusive);
  }

