  /**
   * Creates a MultiFieldQueryParser. Allows passing of a map with term to
   * Boost, and the boost to apply to each term.
   * 
   * <p>
   * It will, when parse(String query) is called, construct a query like this
   * (assuming the query consists of two terms and you specify the two fields
   * <code>title</code> and <code>body</code>):
   * </p>
   * 
   * <code>
     * (title:term1 body:term1) (title:term2 body:term2)
     * </code>
   * 
   * <p>
   * When setDefaultOperator(AND_OPERATOR) is set, the result will be:
   * </p>
   * 
   * <code>
     * +(title:term1 body:term1) +(title:term2 body:term2)
     * </code>
   * 
   * <p>
   * When you pass a boost (title=>5 body=>10) you can get
   * </p>
   * 
   * <code>
     * +(title:term1^5.0 body:term1^10.0) +(title:term2^5.0 body:term2^10.0)
     * </code>
   * 
   * <p>
   * In other words, all the query's terms must appear, but it doesn't matter in
   * what fields they appear.
   * </p>
   */
  @SuppressWarnings("unchecked")
public MultiFieldQueryParserWrapper(String[] fields, Analyzer analyzer, Map boosts) {
    this(fields, analyzer);
    OriginalQueryParserHelper qpHelper = (OriginalQueryParserHelper) getQueryParserHelper();

    qpHelper.setMultiFields(fields);
    qpHelper.setFieldsBoost(boosts);

  }

