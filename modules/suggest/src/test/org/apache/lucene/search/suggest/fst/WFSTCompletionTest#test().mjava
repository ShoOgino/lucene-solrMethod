  public void test() throws Exception {
    TermFreq keys[] = new TermFreq[] {
        new TermFreq("foo", 50),
        new TermFreq("bar", 10),
        new TermFreq("barbar", 12),
        new TermFreq("barbara", 6)
    };
    
    WFSTCompletionLookup suggester = new WFSTCompletionLookup();
    suggester.build(new TermFreqArrayIterator(keys));
    
    // top N of 2, but only foo is available
    List<LookupResult> results = suggester.lookup("f", false, 2);
    assertEquals(1, results.size());
    assertEquals("foo", results.get(0).key);
    assertEquals(50, results.get(0).value, 0.01F);
    
    // top N of 1 for 'bar': we return this even though barbar is higher
    results = suggester.lookup("bar", false, 1);
    assertEquals(1, results.size());
    assertEquals("bar", results.get(0).key);
    assertEquals(10, results.get(0).value, 0.01F);
    
    // top N Of 2 for 'b'
    results = suggester.lookup("b", false, 2);
    assertEquals(2, results.size());
    assertEquals("barbar", results.get(0).key);
    assertEquals(12, results.get(0).value, 0.01F);
    assertEquals("bar", results.get(1).key);
    assertEquals(10, results.get(1).value, 0.01F);
    
    // top N of 3 for 'ba'
    results = suggester.lookup("ba", false, 3);
    assertEquals(3, results.size());
    assertEquals("barbar", results.get(0).key);
    assertEquals(12, results.get(0).value, 0.01F);
    assertEquals("bar", results.get(1).key);
    assertEquals(10, results.get(1).value, 0.01F);
    assertEquals("barbara", results.get(2).key);
    assertEquals(6, results.get(2).value, 0.01F);
  }

