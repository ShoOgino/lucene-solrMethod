  public void testRequestedCount() throws Exception {
    // 'one' is promoted after collecting two higher ranking results.
    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence("one", random), 2), 
        "one/0.0", 
        "oneness/1.0");

    // 'four' is collected in a bucket and then again as an exact match. 
    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence("four", random), 2), 
        "four/0.0", 
        "fourblah/1.0");

    // Check reordering of exact matches. 
    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence("four", random), 4), 
        "four/0.0",
        "fourblah/1.0",
        "fourteen/1.0",
        "fourier/0.0");

    // 'one' is at the top after collecting all alphabetical results.
    assertMatchEquals(completionAlphabetical.lookup(_TestUtil.stringToCharSequence("one", random), 2), 
        "one/0.0", 
        "oneness/1.0");
    
    // 'one' is not promoted after collecting two higher ranking results.
    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);
    assertMatchEquals(noPromotion.lookup(_TestUtil.stringToCharSequence("one", random), 2),  
        "oneness/1.0",
        "onerous/1.0");

    // 'one' is at the top after collecting all alphabetical results. 
    assertMatchEquals(completionAlphabetical.lookup(_TestUtil.stringToCharSequence("one", random), 2), 
        "one/0.0", 
        "oneness/1.0");
  }

