  @BeforeClass
  public static void beforeClass() throws Exception {
    List<Class<?>> analysisClasses = getClassesForPackage("org.apache.lucene.analysis");
    tokenizers = new ArrayList<Class<? extends Tokenizer>>();
    tokenfilters = new ArrayList<Class<? extends TokenFilter>>();
    charfilters = new ArrayList<Class<? extends CharStream>>();
    for (Class<?> c : analysisClasses) {
      // don't waste time with abstract classes or deprecated known-buggy ones
      final int modifiers = c.getModifiers();
      if (Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)
          || c.getAnnotation(Deprecated.class) != null
          || c.isSynthetic() || c.isAnonymousClass() || c.isMemberClass() || c.isInterface()
          // TODO: fix basetokenstreamtestcase not to trip because this one has no CharTermAtt
          || c.equals(EmptyTokenizer.class)
          // doesn't actual reset itself!
          || c.equals(CachingTokenFilter.class)
          // broken!
          || c.equals(NGramTokenizer.class)
          // broken!
          || c.equals(NGramTokenFilter.class)
          // broken!
          || c.equals(EdgeNGramTokenizer.class)
          // broken!
          || c.equals(EdgeNGramTokenFilter.class)) {
        continue;
      }
      if (Tokenizer.class.isAssignableFrom(c)) {
        tokenizers.add(c.asSubclass(Tokenizer.class));
      } else if (TokenFilter.class.isAssignableFrom(c)) {
        tokenfilters.add(c.asSubclass(TokenFilter.class));
      } else if (CharStream.class.isAssignableFrom(c)) {
        charfilters.add(c.asSubclass(CharStream.class));
      }
    }
    final Comparator<Class<?>> classComp = new Comparator<Class<?>>() {
      @Override
      public int compare(Class<?> arg0, Class<?> arg1) {
        return arg0.getName().compareTo(arg1.getName());
      }
    };
    Collections.sort(tokenizers, classComp);
    Collections.sort(tokenfilters, classComp);
    Collections.sort(charfilters, classComp);
    if (VERBOSE) {
      System.out.println("tokenizers = " + tokenizers);
      System.out.println("tokenfilters = " + tokenfilters);
      System.out.println("charfilters = " + charfilters);
    }
  }

