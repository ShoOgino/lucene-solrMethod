  /**
   * put the entry in map
   * @return current position of buffer, which will be wordId of next entry
   */
  public int put(String[] entry) {
    short leftId = Short.parseShort(entry[1]);
    short rightId = Short.parseShort(entry[2]);
    short wordCost = Short.parseShort(entry[3]);
    
    StringBuilder sb = new StringBuilder();
    
    // build up the POS string
    for (int i = 4; i < 8; i++) {
      String part = entry[i];
      assert part.length() > 0;
      if (!"*".equals(part)) {
        if (sb.length() > 0) {
          sb.append('-');
        }
        sb.append(part);
      }
    }
    String pos = sb.toString();
    Integer posIndex = posDictLookup.get(pos);
    if (posIndex == null) {
      posIndex = posDict.size();
      posDict.add(pos);
      posDictLookup.put(pos, posIndex);
      assert posDict.size() == posDictLookup.size();
    }
    
    sb.setLength(0);
    sb.append(CSVUtil.quoteEscape(entry[8]));
    sb.append(',');
    sb.append(CSVUtil.quoteEscape(entry[9]));
    String inflData = sb.toString();
    
    Integer inflIndex = Integer.MAX_VALUE;
    int hasInflData;
    if ("*,*".equals(inflData)) {
      hasInflData = 0; // no inflection data
    } else {
      hasInflData = 1;
      inflIndex = inflDictLookup.get(inflData);
      if (inflIndex == null) {
        inflIndex = inflDict.size();
        inflDict.add(inflData);
        inflDictLookup.put(inflData, inflIndex);
        assert inflDict.size() == inflDictLookup.size();
      }
    }
    
    String baseForm = entry[10];
    String reading = entry[11];
    String pronunciation = entry[12];
    
    // extend buffer if necessary
    int left = buffer.remaining();
    // worst case: three short, 4 bytes, one vint and features (all as utf-16)
    int worstCase = 6 + 4 + 2 + 2*(baseForm.length() + reading.length() + pronunciation.length());
    if (worstCase > left) {
      ByteBuffer newBuffer = ByteBuffer.allocate(ArrayUtil.oversize(buffer.limit() + worstCase - left, 1));
      buffer.flip();
      newBuffer.put(buffer);
      buffer = newBuffer;
    }
    
    buffer.putShort(leftId);
    buffer.putShort(rightId);
    buffer.putShort(wordCost);
    assert posIndex.intValue() < 128;
    buffer.put((byte) (posIndex.intValue() << 1 | hasInflData));
    
    int pronunciationIsReading = pronunciation.equals(reading) ? 1 : 0;
    
    if ("*".equals(baseForm) || baseForm.equals(entry[0])) {
      buffer.put((byte)pronunciationIsReading); // base form is the same as surface form
    } else {
      assert baseForm.length() < 128;
      buffer.put((byte)(baseForm.length() << 1 | pronunciationIsReading));
      for (int i = 0; i < baseForm.length(); i++) {
        buffer.putChar(baseForm.charAt(i));
      }
    }
    
    if (isKatakana(reading)) {
      buffer.put((byte) (reading.length() << 1 | 1));
      writeKatakana(reading);
    } else {
      buffer.put((byte) (reading.length() << 1));
      for (int i = 0; i < reading.length(); i++) {
        buffer.putChar(reading.charAt(i));
      }
    }
    
    if (pronunciationIsReading == 0) {
      if (isKatakana(pronunciation)) {
        buffer.put((byte) (pronunciation.length() << 1 | 1));
        writeKatakana(pronunciation);
      } else {
        buffer.put((byte) (pronunciation.length() << 1));
        for (int i = 0; i < pronunciation.length(); i++) {
          buffer.putChar(pronunciation.charAt(i));
        }
      }
    }
    
    if (hasInflData > 0) {
      int key = inflIndex.intValue();
      assert key < 32768; // note there are really like 300 of these...
      if (key < 128) {
        buffer.put((byte) key);
      } else {
        buffer.put((byte) ((key & 0x7f) | 0x80));
        buffer.put((byte) (key >>> 7));
      }
    }
    
    return buffer.position();
  }

