  /**
   * Allocate a new object. If there's a previously allocated object in our
   * pool, we return it immediately. Otherwise, a new object is allocated.
   * <P>
   * Don't forget to call {@link #free(Object)} when you're done with the object,
   * to return it to the pool. If you don't, memory is <I>not</I> leaked,
   * but the pool will remain empty and a new object will be allocated each
   * time (just like the maxArrays=0 case). 
   */
  public final T allocate() {
    T object = pool.poll();
    if (object==null) {
      return create();
    }
    clear(object);
    return object;
  }

