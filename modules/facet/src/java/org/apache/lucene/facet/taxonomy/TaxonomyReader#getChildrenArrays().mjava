  /**
   * getChildrenArrays() returns a {@link ChildrenArrays} object which can
   * be used together to efficiently enumerate the children of any category. 
   * <P>
   * The caller can hold on to the object it got indefinitely - it is
   * guaranteed that no-one else will modify it. The other side of the
   * same coin is that the caller must treat the object which it got (and
   * the arrays it contains) as read-only and <B>not modify it</B>, because
   * other callers might have gotten the same object too.
   * <P>
   * Implementations should have O(getSize()) time for the first call or
   * after a refresh(), but O(1) time for further calls. In neither case
   * there should be a need to read new data from disk. These guarantees
   * are most likely achieved by calculating this object (based on the
   * getParentArray()) when first needed, and later (if the taxonomy was not
   * refreshed) returning the same object (without any allocation or copying)
   * when requested.
   * <P>
   * The reason we have one method returning one object, rather than two
   * methods returning two arrays, is to avoid race conditions in a multi-
   * threaded application: We want to avoid the possibility of returning one
   * new array and one old array, as those could not be used together.
   */
  public ChildrenArrays getChildrenArrays();

