  @Override
  protected void setPayload() {
    this.payloadAttribute.setPayload(null);
    if (enhancements == null) {
      return;
    }
    // clear previous payload content
    int nBytes = nStart;
    int i = 0;
    int nEnhancementBytes = 0;
    for (CategoryEnhancement enhancement : enhancements) {
      // get payload bytes from each enhancement
      enhancementBytes[i] = enhancement
          .getCategoryTokenBytes(categoryAttribute);
      // write the number of bytes in the payload
      if (enhancementBytes[i] == null) {
        nBytes += Vint8.encode(0, payloadBytes, nBytes);
      } else {
        nBytes += Vint8.encode(enhancementBytes[i].length,
            payloadBytes, nBytes);
        nEnhancementBytes += enhancementBytes[i].length;
      }
      i++;
    }
    if (nEnhancementBytes > 0) {
      // make sure we have space for all bytes
      if (payloadBytes.length < nBytes + nEnhancementBytes) {
        byte[] temp = new byte[(nBytes + nEnhancementBytes) * 2];
        System.arraycopy(payloadBytes, 0, temp, 0, nBytes);
        payloadBytes = temp;
      }
      for (i = 0; i < enhancementBytes.length; i++) {
        // add the enhancement payload bytes after the existing bytes
        if (enhancementBytes[i] != null) {
          System.arraycopy(enhancementBytes[i], 0, payloadBytes,
              nBytes, enhancementBytes[i].length);
          nBytes += enhancementBytes[i].length;
        }
      }
      payload.setData(payloadBytes, 0, nBytes);
      payloadAttribute.setPayload(payload);
    }
  }

