  /**
   * Skips to the given docId, getting the values in pairs of (ordinal, value)
   * and populating the map
   * 
   * @param docId
   *            document id owning the associations
   * @return true if associations were fetched successfully, false otherwise
   * @throws IOException
   *             on error
   */
  private boolean fetchAssociations(int docId) throws IOException {
    // No associations at all? don't bother trying to seek the docID in the
    // posting
    if (!hasAssociations) {
      return false;
    }

    // No associations for this document? well, nothing to decode than,
    // return false
    if (!associationPayloadIter.skipTo(docId)) {
      return false;
    }

    // loop over all the values decoded from the payload in pairs.
    for (;;) {
      // Get the ordinal
      long ordinal = associationPayloadIter.nextCategory();

      // if no ordinal - it's the end of data, break the loop
      if (ordinal > Integer.MAX_VALUE) {
        break;
      }

      // get the associated value
      long association = associationPayloadIter.nextCategory();
      // If we're at this step - it means we have an ordinal, do we have
      // an association for it?
      if (association > Integer.MAX_VALUE) {
        // No association!!! A Broken Pair!! PANIC!
        throw new IOException(
            "ERROR! Associations should come in pairs of (ordinal, value), yet this payload has an odd number of values! (docId="
                + docId + ")");
      }
      // Populate the map with the given ordinal and association pair
      ordinalToAssociationMap.put((int) ordinal, (int) association);
    }

    return true;
  }

