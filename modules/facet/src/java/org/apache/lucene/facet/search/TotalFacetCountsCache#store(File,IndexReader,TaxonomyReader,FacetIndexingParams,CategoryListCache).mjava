  /**
   * Store the {@link TotalFacetCounts} matching input parameters into the provided outputFile,
   * making them available for a later call to {@link #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)}.
   * If these {@link TotalFacetCounts} are available in the cache, they are used. But if they are
   * not in the cache, this call will first compute them (which will also add them to the cache). 
   * @param outputFile file to store in.
   * @param indexReader the documents index
   * @param taxonomy the taxonomy index
   * @param facetIndexingParams the facet indexing parameters
   * @param clCache category list cache for faster computation, can be null
   * @throws IOException on error
   * @see #load(File, IndexReader, TaxonomyReader, FacetIndexingParams)
   * @see #getTotalCounts(IndexReader, TaxonomyReader, FacetIndexingParams, CategoryListCache)
   */
  public void store(File outputFile, IndexReader indexReader, TaxonomyReader taxonomy,
      FacetIndexingParams facetIndexingParams, CategoryListCache clCache) throws IOException {
    File parentFile = outputFile.getParentFile();
    if (
        ( outputFile.exists() && (!outputFile.isFile()      || !outputFile.canWrite())) ||
        (!outputFile.exists() && (!parentFile.isDirectory() || !parentFile.canWrite()))
      ) {
      throw new IllegalArgumentException("Exepecting a writable file: "+outputFile);
    }
    TotalFacetCounts tfc = getTotalCounts(indexReader, taxonomy, facetIndexingParams, clCache);
    TotalFacetCounts.storeToFile(outputFile, tfc);  
  }

