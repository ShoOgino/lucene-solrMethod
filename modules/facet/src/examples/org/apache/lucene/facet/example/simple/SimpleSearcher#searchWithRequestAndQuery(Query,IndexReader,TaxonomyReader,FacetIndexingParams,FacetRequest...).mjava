  /**
   * Search an index with facets for given query and facet requests.
   * @param q query of interest
   * @param indexReader index reader.
   * @param taxoReader taxonomy reader.
   * @param indexingParams the facet indexing params
   * @param facetRequests facet requests of interest
   * @throws Exception on error (no detailed exception handling here for sample simplicity
   * @return facet results
   */
  public static List<FacetResult> searchWithRequestAndQuery(Query q,
      IndexReader indexReader, TaxonomyReader taxoReader,
      FacetIndexingParams indexingParams, FacetRequest... facetRequests)
      throws Exception {
    
    ExampleUtils.log("Query: " + q);
    // prepare searcher to search against
    IndexSearcher searcher = new IndexSearcher(indexReader);

    // collect matching documents into a collector
    TopScoreDocCollector topDocsCollector = TopScoreDocCollector.create(10, true);

    if (indexingParams == null) {
      indexingParams = new DefaultFacetIndexingParams();
    }
    
    // Faceted search parameters indicate which facets are we interested in
    FacetSearchParams facetSearchParams = new FacetSearchParams(indexingParams);
    
    // Add the facet requests of interest to the search params
    for (FacetRequest frq : facetRequests) {
      facetSearchParams.addFacetRequest(frq);
    }

    FacetsCollector facetsCollector = new FacetsCollector(facetSearchParams, indexReader, taxoReader);

    // perform documents search and facets accumulation
    searcher.search(q, MultiCollector.wrap(topDocsCollector, facetsCollector));

    // Obtain facets results and print them
    List<FacetResult> res = facetsCollector.getFacetResults();

    int i = 0;
    for (FacetResult facetResult : res) {
      ExampleUtils.log("Res " + (i++) + ": " + facetResult);
    }

    return res;
  }

