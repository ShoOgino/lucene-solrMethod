  public static Rectangle calcBoxByDistFromPtDEG(double lat, double lon, double distance, SpatialContext ctx) {
    //See http://janmatuschek.de/LatitudeLongitudeBoundingCoordinates Section 3.1, 3.2 and 3.3

    double radius = ctx.getUnits().earthRadius();
    double dist_rad = distance / radius;
    double dist_deg = Math.toDegrees(dist_rad);

    if (dist_deg == 0)
      return ctx.makeRect(lon,lon,lat,lat);

    if (dist_deg >= 180)//distance is >= opposite side of the globe
      return ctx.getWorldBounds();

    //--calc latitude bounds
    double latN_deg = lat + dist_deg;
    double latS_deg = lat - dist_deg;

    if (latN_deg >= 90 || latS_deg <= -90) {//touches either pole
      //we have special logic for longitude
      double lonW_deg = -180, lonE_deg = 180;//world wrap: 360 deg
      if (latN_deg <= 90 && latS_deg >= -90) {//doesn't pass either pole: 180 deg
        lonW_deg = lon -90;
        lonE_deg = lon +90;
      }
      if (latN_deg > 90)
        latN_deg = 90;
      if (latS_deg < -90)
        latS_deg = -90;

      return ctx.makeRect(lonW_deg, lonE_deg, latS_deg, latN_deg);
    } else {
      //--calc longitude bounds
      double lon_delta_deg = calcBoxByDistFromPtVertAxisOffsetDEG(lat, lon, distance, radius);

      double lonW_deg = lon -lon_delta_deg;
      double lonE_deg = lon +lon_delta_deg;

      return ctx.makeRect(lonW_deg, lonE_deg, latS_deg, latN_deg);//ctx will normalize longitude
    }
  }

