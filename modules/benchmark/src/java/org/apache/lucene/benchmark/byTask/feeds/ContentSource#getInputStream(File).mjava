  /**
   * Returns an {@link InputStream} over the requested file. This method
   * attempts to identify the appropriate {@link InputStream} instance to return
   * based on the file name (e.g., if it ends with .bz2 or .bzip, return a
   * 'bzip' {@link InputStream}).
   */
  protected InputStream getInputStream(File file) throws IOException {
    // First, create a FileInputStream, as this will be required by all types.
    // Wrap with BufferedInputStream for better performance
    InputStream is = new BufferedInputStream(new FileInputStream(file), BUFFER_SIZE);
    
    String fileName = file.getName();
    int idx = fileName.lastIndexOf('.');
    int type = OTHER;
    if (idx != -1) {
      Integer typeInt = extensionToType.get(fileName.substring(idx));
      if (typeInt != null) {
        type = typeInt.intValue();
      }
    }
    switch (type) {
      case BZIP:
        try {
          // According to BZip2CompressorInputStream's code, it reads the first 
          // two file header chars ('B' and 'Z'). It is important to wrap the
          // underlying input stream with a buffered one since
          // Bzip2CompressorInputStream uses the read() method exclusively.
          is = csFactory.createCompressorInputStream("bzip2", is);
        } catch (CompressorException e) {
          IOException ioe = new IOException(e.getMessage());
          ioe.initCause(e);
          throw ioe;
        }
        break;
      default: // Do nothing, stay with FileInputStream
    }
    
    return is;
  }

