  // Pulls out child doc and scores for all join queries:
  private void copyGroups(OneGroup og) {
    // While rare, it's possible top arrays could be too
    // short if join query had null scorer on first
    // segment(s) but then became non-null on later segments
    final int numSubScorers = joinScorers.length;
    if (og.docs.length < numSubScorers) {
      // While rare, this could happen if join query had
      // null scorer on first segment(s) but then became
      // non-null on later segments
      og.docs = ArrayUtil.grow(og.docs);
    }
    if (og.counts.length < numSubScorers) {
      og.counts = ArrayUtil.grow(og.counts);
    }
    if (trackScores && og.scores.length < numSubScorers) {
      og.scores = ArrayUtil.grow(og.scores);
    }

    //System.out.println("copyGroups parentDoc=" + og.doc);
    for(int scorerIDX = 0;scorerIDX < numSubScorers;scorerIDX++) {
      final BlockJoinQuery.BlockJoinScorer joinScorer = joinScorers[scorerIDX];
      //System.out.println("  scorer=" + joinScorer);
      if (joinScorer != null) {
        og.counts[scorerIDX] = joinScorer.getChildCount();
        //System.out.println("    count=" + og.counts[scorerIDX]);
        og.docs[scorerIDX] = joinScorer.swapChildDocs(og.docs[scorerIDX]);
        /*
        for(int idx=0;idx<og.counts[scorerIDX];idx++) {
          System.out.println("    docs[" + idx + "]=" + og.docs[scorerIDX][idx]);
        }
        */
        if (trackScores) {
          og.scores[scorerIDX] = joinScorer.swapChildScores(og.scores[scorerIDX]);
        }
      }
    }
  }

