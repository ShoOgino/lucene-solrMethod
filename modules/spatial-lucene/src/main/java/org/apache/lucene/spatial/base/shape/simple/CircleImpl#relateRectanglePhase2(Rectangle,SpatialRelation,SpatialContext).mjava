  protected SpatialRelation relateRectanglePhase2(final Rectangle r, SpatialRelation bboxSect, SpatialContext ctx) {
    /*
     !! DOES NOT WORK WITH GEO CROSSING DATELINE OR WORLD-WRAP.
     TODO upgrade to handle crossing dateline, but not world-wrap; use some x-shifting code from RectangleImpl.
     */

    //At this point, the only thing we are certain of is that circle is *NOT* WITHIN r, since the bounding box of a
    // circle MUST be within r for the circle to be within r.

    //--Quickly determine if they are DISJOINT or not.
    //see http://stackoverflow.com/questions/401847/circle-rectangle-collision-detection-intersection/1879223#1879223
    final double closestX;
    double ctr_x = getXAxis();
    if ( ctr_x < r.getMinX() )
      closestX = r.getMinX();
    else if (ctr_x > r.getMaxX())
      closestX = r.getMaxX();
    else
      closestX = ctr_x;

    final double closestY;
    double ctr_y = getYAxis();
    if ( ctr_y < r.getMinY() )
      closestY = r.getMinY();
    else if (ctr_y > r.getMaxY())
      closestY = r.getMaxY();
    else
      closestY = ctr_y;

    //Check if there is an intersection from this circle to closestXY
    boolean didContainOnClosestXY = false;
    if (ctr_x == closestX) {
      double deltaY = Math.abs(ctr_y - closestY);
      double distYCirc = (ctr_y < closestY ? enclosingBox.getMaxY() - ctr_y : ctr_y - enclosingBox.getMinY());
      if (deltaY > distYCirc)
        return SpatialRelation.DISJOINT;
    } else if (ctr_y == closestY) {
      double deltaX = Math.abs(ctr_x - closestX);
      double distXCirc = (ctr_x < closestX ? enclosingBox.getMaxX() - ctr_x : ctr_x - enclosingBox.getMinX());
      if (deltaX > distXCirc)
        return SpatialRelation.DISJOINT;
    } else {
      //fallback on more expensive calculation
      didContainOnClosestXY = true;
      if(! contains(closestX,closestY) )
        return SpatialRelation.DISJOINT;
    }

    //At this point we know that it's *NOT* DISJOINT, so there is some level of intersection. It's *NOT* WITHIN either.
    // The only question left is whether circle CONTAINS r or simply intersects it.

    //If circle contains r, then its bbox MUST also CONTAIN r.
    if (bboxSect != SpatialRelation.CONTAINS)
      return SpatialRelation.INTERSECTS;

    //Find the farthest point of r away from the center of the circle. If that point is contained, then all of r is
    // contained.
    double farthestX = r.getMaxX() - ctr_x > ctr_x - r.getMinX() ? r.getMaxX() : r.getMinX();
    double farthestY = r.getMaxY() - ctr_y > ctr_y - r.getMinY() ? r.getMaxY() : r.getMinY();
    if (contains(farthestX,farthestY))
      return SpatialRelation.CONTAINS;
    return SpatialRelation.INTERSECTS;
  }

